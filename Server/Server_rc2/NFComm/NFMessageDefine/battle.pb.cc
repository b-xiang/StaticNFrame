// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: battle.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "battle.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

namespace {

const ::google::protobuf::Descriptor* SyncBattleObjAtt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncBattleObjAtt_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Match_ServerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Match_ServerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Game2Battle_EnterScene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Game2Battle_EnterScene_reflection_ = NULL;
const ::google::protobuf::Descriptor* Game2Battle_ChangeMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Game2Battle_ChangeMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* Game2Battle_ChangeTttle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Game2Battle_ChangeTttle_reflection_ = NULL;
const ::google::protobuf::Descriptor* Game2Battle_ChangeAwaken_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Game2Battle_ChangeAwaken_reflection_ = NULL;
const ::google::protobuf::Descriptor* Game2Battle_ChangePet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Game2Battle_ChangePet_reflection_ = NULL;
const ::google::protobuf::Descriptor* Game2Battle_UpdateMyCombat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Game2Battle_UpdateMyCombat_reflection_ = NULL;
const ::google::protobuf::Descriptor* Game2Battle_ChangeAvatar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Game2Battle_ChangeAvatar_reflection_ = NULL;
const ::google::protobuf::Descriptor* Game2Battle_ChangeRide_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Game2Battle_ChangeRide_reflection_ = NULL;
const ::google::protobuf::Descriptor* Game2Battle_BornMercenary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Game2Battle_BornMercenary_reflection_ = NULL;
const ::google::protobuf::Descriptor* Game2Battle_UpdateMercenaryScript_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Game2Battle_UpdateMercenaryScript_reflection_ = NULL;
const ::google::protobuf::Descriptor* Game2Battle_UpdateRideScript_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Game2Battle_UpdateRideScript_reflection_ = NULL;
const ::google::protobuf::Descriptor* Game2Battle_UpdateAwakenScript_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Game2Battle_UpdateAwakenScript_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Game_SaveMercenaryHp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Game_SaveMercenaryHp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Game_UpdatePlayerStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Game_UpdatePlayerStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* Game2Battle_ChangeEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Game2Battle_ChangeEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* Game2Battle_FollowLeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Game2Battle_FollowLeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* Game2Battle_ChangeMapPendingBranch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Game2Battle_ChangeMapPendingBranch_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Client_ChangePet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Client_ChangePet_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Client_ChangeRide_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Client_ChangeRide_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Client_ChangeAwaken_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Client_ChangeAwaken_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Client_ChangeAvatar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Client_ChangeAvatar_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Client_ChangeSuit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Client_ChangeSuit_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Client_ReconnectUnDoTrigger_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Client_ReconnectUnDoTrigger_reflection_ = NULL;
const ::google::protobuf::Descriptor* Game2Battle_UpdatePlayerValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Game2Battle_UpdatePlayerValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Game_EnterScene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Game_EnterScene_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Client_EnterScene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Client_EnterScene_reflection_ = NULL;
const ::google::protobuf::Descriptor* Client2Battle_ClientLoadOK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Client2Battle_ClientLoadOK_reflection_ = NULL;
const ::google::protobuf::Descriptor* Client2Battle_SyncMove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Client2Battle_SyncMove_reflection_ = NULL;
const ::google::protobuf::Descriptor* Client2Battle_GetMapBranch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Client2Battle_GetMapBranch_reflection_ = NULL;
const ::google::protobuf::Descriptor* Client2Battle_ChangeBranch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Client2Battle_ChangeBranch_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Client_SyncPlayerAppear_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Client_SyncPlayerAppear_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Client_SyncObjDisappear_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Client_SyncObjDisappear_reflection_ = NULL;
const ::google::protobuf::Descriptor* OwnerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OwnerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Client_SyncMonsterAppear_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Client_SyncMonsterAppear_reflection_ = NULL;
const ::google::protobuf::Descriptor* mercenarySkillCD_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mercenarySkillCD_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Client_SyncMercenaryAppear_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Client_SyncMercenaryAppear_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Client_SyncMove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Client_SyncMove_reflection_ = NULL;
const ::google::protobuf::Descriptor* Client2Battle_SpeelBegin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Client2Battle_SpeelBegin_reflection_ = NULL;
const ::google::protobuf::Descriptor* Client2Battle_SpeelEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Client2Battle_SpeelEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Client_SpeelBegin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Client_SpeelBegin_reflection_ = NULL;
const ::google::protobuf::Descriptor* SceneBranchInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SceneBranchInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Client_GetMapBranch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Client_GetMapBranch_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Client_ChangeBranch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Client_ChangeBranch_reflection_ = NULL;
const ::google::protobuf::Descriptor* Client2Battle_ChangeMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Client2Battle_ChangeMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* Client2Battle_SummonMercenary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Client2Battle_SummonMercenary_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Client_CheckPosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Client_CheckPosition_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Client_MonsterStopMove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Client_MonsterStopMove_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Client_TriggerEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Client_TriggerEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Client_TriggerServerTips_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Client_TriggerServerTips_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Client_ChangeTttle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Client_ChangeTttle_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Client_ChangeEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Client_ChangeEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Client_ClientLoadOK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Client_ClientLoadOK_reflection_ = NULL;
const ::google::protobuf::Descriptor* Client2Battle__TriggerEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Client2Battle__TriggerEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Game_AddDropItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Game_AddDropItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Game_DungeonResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Game_DungeonResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameToBattle_PlayerDisconnect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameToBattle_PlayerDisconnect_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Game_SyncMove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Game_SyncMove_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Game_UpdateQuest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Game_UpdateQuest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Game_TriggerQuest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Game_TriggerQuest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Game_MonsterDie_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Game_MonsterDie_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Game_LeaveDungeon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Game_LeaveDungeon_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Game_ChangeMapForceAwakenOff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Game_ChangeMapForceAwakenOff_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Game_DieToChangeAwakenAndRide_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Game_DieToChangeAwakenAndRide_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Game_SceneLoadOk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Game_SceneLoadOk_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Game_MercenaryDieInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Game_MercenaryDieInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Game2Battle_CheckTrigger_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Game2Battle_CheckTrigger_reflection_ = NULL;
const ::google::protobuf::Descriptor* Game2Battle_AddQuestTrigger_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Game2Battle_AddQuestTrigger_reflection_ = NULL;
const ::google::protobuf::Descriptor* Game2Battle_UpdateTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Game2Battle_UpdateTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* Game2Battle_QuestNPCAddBuff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Game2Battle_QuestNPCAddBuff_reflection_ = NULL;
const ::google::protobuf::Descriptor* Client2Battle_GameStoryStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Client2Battle_GameStoryStart_reflection_ = NULL;
const ::google::protobuf::Descriptor* Client2Battle_GameStoryEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Client2Battle_GameStoryEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* Client2Battle_NPCStopAI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Client2Battle_NPCStopAI_reflection_ = NULL;
const ::google::protobuf::Descriptor* Client2Battle_NPCActiveAI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Client2Battle_NPCActiveAI_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Game_DungeonLoadOk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Game_DungeonLoadOk_reflection_ = NULL;
const ::google::protobuf::Descriptor* Client2Battle_WolrdBossDorp_ItemList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Client2Battle_WolrdBossDorp_ItemList_reflection_ = NULL;
const ::google::protobuf::Descriptor* Client2Battle_WorldBoss_HurtRankList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Client2Battle_WorldBoss_HurtRankList_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Client_WolrdBoss_HurtRankList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Client_WolrdBoss_HurtRankList_reflection_ = NULL;
const ::google::protobuf::Descriptor* WolrdBossSaleItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WolrdBossSaleItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Client_WolrdBoss_DorpItemList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Client_WolrdBoss_DorpItemList_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Client_WolrdBoss_SaleBid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Client_WolrdBoss_SaleBid_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Client_WolrdBoss_SaleResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Client_WolrdBoss_SaleResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Game_WolrdBoss_SaleResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Game_WolrdBoss_SaleResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Game_SendMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Game_SendMail_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Game_WolrdBoss_HpChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Game_WolrdBoss_HpChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Client_WolrdBoss_HpChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Client_WolrdBoss_HpChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* Game2Battle_AddCurHp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Game2Battle_AddCurHp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Game2Battle_AddBuff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Game2Battle_AddBuff_reflection_ = NULL;
const ::google::protobuf::Descriptor* Client2Battle_WorldBoss_SaledItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Client2Battle_WorldBoss_SaledItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Client_WorldBoss_SaledItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Client_WorldBoss_SaledItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Client_SyncDropItemAppear_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Client_SyncDropItemAppear_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Client_TicketBoss_DropItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Client_TicketBoss_DropItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Client_SyncDropItemChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Client_SyncDropItemChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* Client2Battle_Ping_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Client2Battle_Ping_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Client_Ping_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Client_Ping_reflection_ = NULL;
const ::google::protobuf::Descriptor* Game2Battle_CreateMonster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Game2Battle_CreateMonster_reflection_ = NULL;
const ::google::protobuf::Descriptor* Client2Battle_ChangeAttackMode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Client2Battle_ChangeAttackMode_reflection_ = NULL;
const ::google::protobuf::Descriptor* Client2Battle_Transfer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Client2Battle_Transfer_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Client_Anchor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Client_Anchor_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Client_UpdateHeadInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Client_UpdateHeadInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Client_UpdateMercenaryRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Client_UpdateMercenaryRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Client_TriggerRadius_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Client_TriggerRadius_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Client_ScenePlayerNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Client_ScenePlayerNum_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Client_GradeDataChanged_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Client_GradeDataChanged_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Client_SyncMonsterOnwer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Client_SyncMonsterOnwer_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Client_SafeAreaStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Client_SafeAreaStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Client_ServerMove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Client_ServerMove_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Client_PlayerDie_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Client_PlayerDie_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Client_MonsterCountChanged_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Client_MonsterCountChanged_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Client_AckTBPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Client_AckTBPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Client_SyncSceneObjDisappear_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Client_SyncSceneObjDisappear_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Client_SyncSceneObjAppear_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Client_SyncSceneObjAppear_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Battle2Client_GradeDataType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_battle_2eproto() {
  protobuf_AddDesc_battle_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "battle.proto");
  GOOGLE_CHECK(file != NULL);
  SyncBattleObjAtt_descriptor_ = file->message_type(0);
  static const int SyncBattleObjAtt_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncBattleObjAtt, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncBattleObjAtt, atttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncBattleObjAtt, attvalue_),
  };
  SyncBattleObjAtt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncBattleObjAtt_descriptor_,
      SyncBattleObjAtt::default_instance_,
      SyncBattleObjAtt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncBattleObjAtt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncBattleObjAtt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncBattleObjAtt));
  Battle2Match_ServerInfo_descriptor_ = file->message_type(1);
  static const int Battle2Match_ServerInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Match_ServerInfo, szip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Match_ServerInfo, uiport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Match_ServerInfo, uimapid_),
  };
  Battle2Match_ServerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Match_ServerInfo_descriptor_,
      Battle2Match_ServerInfo::default_instance_,
      Battle2Match_ServerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Match_ServerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Match_ServerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Match_ServerInfo));
  Game2Battle_EnterScene_descriptor_ = file->message_type(2);
  static const int Game2Battle_EnterScene_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_EnterScene, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_EnterScene, pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_EnterScene, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_EnterScene, layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_EnterScene, splyinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_EnterScene, sboatinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_EnterScene, combat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_EnterScene, tbinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_EnterScene, isbackline_),
  };
  Game2Battle_EnterScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Game2Battle_EnterScene_descriptor_,
      Game2Battle_EnterScene::default_instance_,
      Game2Battle_EnterScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_EnterScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_EnterScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Game2Battle_EnterScene));
  Game2Battle_ChangeMap_descriptor_ = file->message_type(3);
  static const int Game2Battle_ChangeMap_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_ChangeMap, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_ChangeMap, pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_ChangeMap, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_ChangeMap, layer_),
  };
  Game2Battle_ChangeMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Game2Battle_ChangeMap_descriptor_,
      Game2Battle_ChangeMap::default_instance_,
      Game2Battle_ChangeMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_ChangeMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_ChangeMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Game2Battle_ChangeMap));
  Game2Battle_ChangeTttle_descriptor_ = file->message_type(4);
  static const int Game2Battle_ChangeTttle_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_ChangeTttle, nid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_ChangeTttle, titleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_ChangeTttle, titlename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_ChangeTttle, ishide_),
  };
  Game2Battle_ChangeTttle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Game2Battle_ChangeTttle_descriptor_,
      Game2Battle_ChangeTttle::default_instance_,
      Game2Battle_ChangeTttle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_ChangeTttle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_ChangeTttle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Game2Battle_ChangeTttle));
  Game2Battle_ChangeAwaken_descriptor_ = file->message_type(5);
  static const int Game2Battle_ChangeAwaken_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_ChangeAwaken, nid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_ChangeAwaken, awakenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_ChangeAwaken, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_ChangeAwaken, isdead_),
  };
  Game2Battle_ChangeAwaken_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Game2Battle_ChangeAwaken_descriptor_,
      Game2Battle_ChangeAwaken::default_instance_,
      Game2Battle_ChangeAwaken_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_ChangeAwaken, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_ChangeAwaken, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Game2Battle_ChangeAwaken));
  Game2Battle_ChangePet_descriptor_ = file->message_type(6);
  static const int Game2Battle_ChangePet_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_ChangePet, nid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_ChangePet, petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_ChangePet, ranking_),
  };
  Game2Battle_ChangePet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Game2Battle_ChangePet_descriptor_,
      Game2Battle_ChangePet::default_instance_,
      Game2Battle_ChangePet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_ChangePet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_ChangePet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Game2Battle_ChangePet));
  Game2Battle_UpdateMyCombat_descriptor_ = file->message_type(7);
  static const int Game2Battle_UpdateMyCombat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_UpdateMyCombat, combat_),
  };
  Game2Battle_UpdateMyCombat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Game2Battle_UpdateMyCombat_descriptor_,
      Game2Battle_UpdateMyCombat::default_instance_,
      Game2Battle_UpdateMyCombat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_UpdateMyCombat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_UpdateMyCombat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Game2Battle_UpdateMyCombat));
  Game2Battle_ChangeAvatar_descriptor_ = file->message_type(8);
  static const int Game2Battle_ChangeAvatar_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_ChangeAvatar, nid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_ChangeAvatar, avatarid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_ChangeAvatar, colorid_),
  };
  Game2Battle_ChangeAvatar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Game2Battle_ChangeAvatar_descriptor_,
      Game2Battle_ChangeAvatar::default_instance_,
      Game2Battle_ChangeAvatar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_ChangeAvatar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_ChangeAvatar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Game2Battle_ChangeAvatar));
  Game2Battle_ChangeRide_descriptor_ = file->message_type(9);
  static const int Game2Battle_ChangeRide_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_ChangeRide, nid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_ChangeRide, rideid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_ChangeRide, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_ChangeRide, isdead_),
  };
  Game2Battle_ChangeRide_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Game2Battle_ChangeRide_descriptor_,
      Game2Battle_ChangeRide::default_instance_,
      Game2Battle_ChangeRide_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_ChangeRide, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_ChangeRide, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Game2Battle_ChangeRide));
  Game2Battle_BornMercenary_descriptor_ = file->message_type(10);
  static const int Game2Battle_BornMercenary_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_BornMercenary, nid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_BornMercenary, hpper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_BornMercenary, ranking_),
  };
  Game2Battle_BornMercenary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Game2Battle_BornMercenary_descriptor_,
      Game2Battle_BornMercenary::default_instance_,
      Game2Battle_BornMercenary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_BornMercenary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_BornMercenary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Game2Battle_BornMercenary));
  Game2Battle_UpdateMercenaryScript_descriptor_ = file->message_type(11);
  static const int Game2Battle_UpdateMercenaryScript_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_UpdateMercenaryScript, script_),
  };
  Game2Battle_UpdateMercenaryScript_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Game2Battle_UpdateMercenaryScript_descriptor_,
      Game2Battle_UpdateMercenaryScript::default_instance_,
      Game2Battle_UpdateMercenaryScript_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_UpdateMercenaryScript, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_UpdateMercenaryScript, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Game2Battle_UpdateMercenaryScript));
  Game2Battle_UpdateRideScript_descriptor_ = file->message_type(12);
  static const int Game2Battle_UpdateRideScript_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_UpdateRideScript, script_),
  };
  Game2Battle_UpdateRideScript_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Game2Battle_UpdateRideScript_descriptor_,
      Game2Battle_UpdateRideScript::default_instance_,
      Game2Battle_UpdateRideScript_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_UpdateRideScript, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_UpdateRideScript, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Game2Battle_UpdateRideScript));
  Game2Battle_UpdateAwakenScript_descriptor_ = file->message_type(13);
  static const int Game2Battle_UpdateAwakenScript_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_UpdateAwakenScript, script_),
  };
  Game2Battle_UpdateAwakenScript_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Game2Battle_UpdateAwakenScript_descriptor_,
      Game2Battle_UpdateAwakenScript::default_instance_,
      Game2Battle_UpdateAwakenScript_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_UpdateAwakenScript, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_UpdateAwakenScript, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Game2Battle_UpdateAwakenScript));
  Battle2Game_SaveMercenaryHp_descriptor_ = file->message_type(14);
  static const int Battle2Game_SaveMercenaryHp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_SaveMercenaryHp, nid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_SaveMercenaryHp, hpper_),
  };
  Battle2Game_SaveMercenaryHp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Game_SaveMercenaryHp_descriptor_,
      Battle2Game_SaveMercenaryHp::default_instance_,
      Battle2Game_SaveMercenaryHp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_SaveMercenaryHp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_SaveMercenaryHp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Game_SaveMercenaryHp));
  Battle2Game_UpdatePlayerStatus_descriptor_ = file->message_type(15);
  static const int Battle2Game_UpdatePlayerStatus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_UpdatePlayerStatus, status_),
  };
  Battle2Game_UpdatePlayerStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Game_UpdatePlayerStatus_descriptor_,
      Battle2Game_UpdatePlayerStatus::default_instance_,
      Battle2Game_UpdatePlayerStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_UpdatePlayerStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_UpdatePlayerStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Game_UpdatePlayerStatus));
  Game2Battle_ChangeEquip_descriptor_ = file->message_type(16);
  static const int Game2Battle_ChangeEquip_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_ChangeEquip, nid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_ChangeEquip, equip_list_),
  };
  Game2Battle_ChangeEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Game2Battle_ChangeEquip_descriptor_,
      Game2Battle_ChangeEquip::default_instance_,
      Game2Battle_ChangeEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_ChangeEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_ChangeEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Game2Battle_ChangeEquip));
  Game2Battle_FollowLeader_descriptor_ = file->message_type(17);
  static const int Game2Battle_FollowLeader_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_FollowLeader, nid_),
  };
  Game2Battle_FollowLeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Game2Battle_FollowLeader_descriptor_,
      Game2Battle_FollowLeader::default_instance_,
      Game2Battle_FollowLeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_FollowLeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_FollowLeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Game2Battle_FollowLeader));
  Game2Battle_ChangeMapPendingBranch_descriptor_ = file->message_type(18);
  static const int Game2Battle_ChangeMapPendingBranch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_ChangeMapPendingBranch, nid_),
  };
  Game2Battle_ChangeMapPendingBranch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Game2Battle_ChangeMapPendingBranch_descriptor_,
      Game2Battle_ChangeMapPendingBranch::default_instance_,
      Game2Battle_ChangeMapPendingBranch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_ChangeMapPendingBranch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_ChangeMapPendingBranch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Game2Battle_ChangeMapPendingBranch));
  Battle2Client_ChangePet_descriptor_ = file->message_type(19);
  static const int Battle2Client_ChangePet_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_ChangePet, nid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_ChangePet, petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_ChangePet, ranking_),
  };
  Battle2Client_ChangePet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Client_ChangePet_descriptor_,
      Battle2Client_ChangePet::default_instance_,
      Battle2Client_ChangePet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_ChangePet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_ChangePet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Client_ChangePet));
  Battle2Client_ChangeRide_descriptor_ = file->message_type(20);
  static const int Battle2Client_ChangeRide_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_ChangeRide, nid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_ChangeRide, rideid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_ChangeRide, status_),
  };
  Battle2Client_ChangeRide_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Client_ChangeRide_descriptor_,
      Battle2Client_ChangeRide::default_instance_,
      Battle2Client_ChangeRide_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_ChangeRide, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_ChangeRide, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Client_ChangeRide));
  Battle2Client_ChangeAwaken_descriptor_ = file->message_type(21);
  static const int Battle2Client_ChangeAwaken_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_ChangeAwaken, nid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_ChangeAwaken, awakenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_ChangeAwaken, status_),
  };
  Battle2Client_ChangeAwaken_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Client_ChangeAwaken_descriptor_,
      Battle2Client_ChangeAwaken::default_instance_,
      Battle2Client_ChangeAwaken_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_ChangeAwaken, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_ChangeAwaken, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Client_ChangeAwaken));
  Battle2Client_ChangeAvatar_descriptor_ = file->message_type(22);
  static const int Battle2Client_ChangeAvatar_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_ChangeAvatar, nid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_ChangeAvatar, avatarid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_ChangeAvatar, colorid_),
  };
  Battle2Client_ChangeAvatar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Client_ChangeAvatar_descriptor_,
      Battle2Client_ChangeAvatar::default_instance_,
      Battle2Client_ChangeAvatar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_ChangeAvatar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_ChangeAvatar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Client_ChangeAvatar));
  Battle2Client_ChangeSuit_descriptor_ = file->message_type(23);
  static const int Battle2Client_ChangeSuit_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_ChangeSuit, nid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_ChangeSuit, suitid_),
  };
  Battle2Client_ChangeSuit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Client_ChangeSuit_descriptor_,
      Battle2Client_ChangeSuit::default_instance_,
      Battle2Client_ChangeSuit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_ChangeSuit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_ChangeSuit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Client_ChangeSuit));
  Battle2Client_ReconnectUnDoTrigger_descriptor_ = file->message_type(24);
  static const int Battle2Client_ReconnectUnDoTrigger_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_ReconnectUnDoTrigger, triggerid_),
  };
  Battle2Client_ReconnectUnDoTrigger_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Client_ReconnectUnDoTrigger_descriptor_,
      Battle2Client_ReconnectUnDoTrigger::default_instance_,
      Battle2Client_ReconnectUnDoTrigger_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_ReconnectUnDoTrigger, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_ReconnectUnDoTrigger, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Client_ReconnectUnDoTrigger));
  Game2Battle_UpdatePlayerValue_descriptor_ = file->message_type(25);
  static const int Game2Battle_UpdatePlayerValue_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_UpdatePlayerValue, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_UpdatePlayerValue, ivalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_UpdatePlayerValue, llvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_UpdatePlayerValue, szvalue_),
  };
  Game2Battle_UpdatePlayerValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Game2Battle_UpdatePlayerValue_descriptor_,
      Game2Battle_UpdatePlayerValue::default_instance_,
      Game2Battle_UpdatePlayerValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_UpdatePlayerValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_UpdatePlayerValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Game2Battle_UpdatePlayerValue));
  Battle2Game_EnterScene_descriptor_ = file->message_type(26);
  static const int Battle2Game_EnterScene_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_EnterScene, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_EnterScene, pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_EnterScene, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_EnterScene, layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_EnterScene, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_EnterScene, port_),
  };
  Battle2Game_EnterScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Game_EnterScene_descriptor_,
      Battle2Game_EnterScene::default_instance_,
      Battle2Game_EnterScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_EnterScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_EnterScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Game_EnterScene));
  Battle2Client_EnterScene_descriptor_ = file->message_type(27);
  static const int Battle2Client_EnterScene_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_EnterScene, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_EnterScene, pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_EnterScene, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_EnterScene, layer_),
  };
  Battle2Client_EnterScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Client_EnterScene_descriptor_,
      Battle2Client_EnterScene::default_instance_,
      Battle2Client_EnterScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_EnterScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_EnterScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Client_EnterScene));
  Client2Battle_ClientLoadOK_descriptor_ = file->message_type(28);
  static const int Client2Battle_ClientLoadOK_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_ClientLoadOK, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_ClientLoadOK, dungeon_assign_id_),
  };
  Client2Battle_ClientLoadOK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Client2Battle_ClientLoadOK_descriptor_,
      Client2Battle_ClientLoadOK::default_instance_,
      Client2Battle_ClientLoadOK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_ClientLoadOK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_ClientLoadOK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Client2Battle_ClientLoadOK));
  Client2Battle_SyncMove_descriptor_ = file->message_type(29);
  static const int Client2Battle_SyncMove_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_SyncMove, pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_SyncMove, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_SyncMove, arrival_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_SyncMove, objtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_SyncMove, speed_),
  };
  Client2Battle_SyncMove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Client2Battle_SyncMove_descriptor_,
      Client2Battle_SyncMove::default_instance_,
      Client2Battle_SyncMove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_SyncMove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_SyncMove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Client2Battle_SyncMove));
  Client2Battle_GetMapBranch_descriptor_ = file->message_type(30);
  static const int Client2Battle_GetMapBranch_offsets_[1] = {
  };
  Client2Battle_GetMapBranch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Client2Battle_GetMapBranch_descriptor_,
      Client2Battle_GetMapBranch::default_instance_,
      Client2Battle_GetMapBranch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_GetMapBranch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_GetMapBranch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Client2Battle_GetMapBranch));
  Client2Battle_ChangeBranch_descriptor_ = file->message_type(31);
  static const int Client2Battle_ChangeBranch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_ChangeBranch, branchid_),
  };
  Client2Battle_ChangeBranch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Client2Battle_ChangeBranch_descriptor_,
      Client2Battle_ChangeBranch::default_instance_,
      Client2Battle_ChangeBranch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_ChangeBranch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_ChangeBranch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Client2Battle_ChangeBranch));
  Battle2Client_SyncPlayerAppear_descriptor_ = file->message_type(32);
  static const int Battle2Client_SyncPlayerAppear_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncPlayerAppear, uiobjid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncPlayerAppear, uitype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncPlayerAppear, splyinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncPlayerAppear, sboatinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncPlayerAppear, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncPlayerAppear, attack_mode_),
  };
  Battle2Client_SyncPlayerAppear_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Client_SyncPlayerAppear_descriptor_,
      Battle2Client_SyncPlayerAppear::default_instance_,
      Battle2Client_SyncPlayerAppear_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncPlayerAppear, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncPlayerAppear, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Client_SyncPlayerAppear));
  Battle2Client_SyncObjDisappear_descriptor_ = file->message_type(33);
  static const int Battle2Client_SyncObjDisappear_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncObjDisappear, uiobjid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncObjDisappear, uiobjtype_),
  };
  Battle2Client_SyncObjDisappear_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Client_SyncObjDisappear_descriptor_,
      Battle2Client_SyncObjDisappear::default_instance_,
      Battle2Client_SyncObjDisappear_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncObjDisappear, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncObjDisappear, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Client_SyncObjDisappear));
  OwnerInfo_descriptor_ = file->message_type(34);
  static const int OwnerInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwnerInfo, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwnerInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwnerInfo, career_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwnerInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwnerInfo, dhlev_),
  };
  OwnerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OwnerInfo_descriptor_,
      OwnerInfo::default_instance_,
      OwnerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwnerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwnerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OwnerInfo));
  Battle2Client_SyncMonsterAppear_descriptor_ = file->message_type(35);
  static const int Battle2Client_SyncMonsterAppear_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncMonsterAppear, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncMonsterAppear, proid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncMonsterAppear, pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncMonsterAppear, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncMonsterAppear, velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncMonsterAppear, maxhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncMonsterAppear, curhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncMonsterAppear, max_tp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncMonsterAppear, cur_tp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncMonsterAppear, cmap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncMonsterAppear, layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncMonsterAppear, sboatinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncMonsterAppear, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncMonsterAppear, owner_),
  };
  Battle2Client_SyncMonsterAppear_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Client_SyncMonsterAppear_descriptor_,
      Battle2Client_SyncMonsterAppear::default_instance_,
      Battle2Client_SyncMonsterAppear_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncMonsterAppear, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncMonsterAppear, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Client_SyncMonsterAppear));
  mercenarySkillCD_descriptor_ = file->message_type(36);
  static const int mercenarySkillCD_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mercenarySkillCD, nskillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mercenarySkillCD, ncd_),
  };
  mercenarySkillCD_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mercenarySkillCD_descriptor_,
      mercenarySkillCD::default_instance_,
      mercenarySkillCD_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mercenarySkillCD, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mercenarySkillCD, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mercenarySkillCD));
  Battle2Client_SyncMercenaryAppear_descriptor_ = file->message_type(37);
  static const int Battle2Client_SyncMercenaryAppear_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncMercenaryAppear, uiobjid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncMercenaryAppear, uitype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncMercenaryAppear, lordobjid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncMercenaryAppear, smerinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncMercenaryAppear, mercd_),
  };
  Battle2Client_SyncMercenaryAppear_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Client_SyncMercenaryAppear_descriptor_,
      Battle2Client_SyncMercenaryAppear::default_instance_,
      Battle2Client_SyncMercenaryAppear_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncMercenaryAppear, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncMercenaryAppear, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Client_SyncMercenaryAppear));
  Battle2Client_SyncMove_descriptor_ = file->message_type(38);
  static const int Battle2Client_SyncMove_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncMove, uiobjid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncMove, pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncMove, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncMove, velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncMove, arrival_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncMove, objtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncMove, timestamp_),
  };
  Battle2Client_SyncMove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Client_SyncMove_descriptor_,
      Battle2Client_SyncMove::default_instance_,
      Battle2Client_SyncMove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncMove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncMove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Client_SyncMove));
  Client2Battle_SpeelBegin_descriptor_ = file->message_type(39);
  static const int Client2Battle_SpeelBegin_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_SpeelBegin, layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_SpeelBegin, triggerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_SpeelBegin, triggertype_),
  };
  Client2Battle_SpeelBegin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Client2Battle_SpeelBegin_descriptor_,
      Client2Battle_SpeelBegin::default_instance_,
      Client2Battle_SpeelBegin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_SpeelBegin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_SpeelBegin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Client2Battle_SpeelBegin));
  Client2Battle_SpeelEnd_descriptor_ = file->message_type(40);
  static const int Client2Battle_SpeelEnd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_SpeelEnd, pt_),
  };
  Client2Battle_SpeelEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Client2Battle_SpeelEnd_descriptor_,
      Client2Battle_SpeelEnd::default_instance_,
      Client2Battle_SpeelEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_SpeelEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_SpeelEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Client2Battle_SpeelEnd));
  Battle2Client_SpeelBegin_descriptor_ = file->message_type(41);
  static const int Battle2Client_SpeelBegin_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SpeelBegin, plyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SpeelBegin, layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SpeelBegin, triggerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SpeelBegin, triggertype_),
  };
  Battle2Client_SpeelBegin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Client_SpeelBegin_descriptor_,
      Battle2Client_SpeelBegin::default_instance_,
      Battle2Client_SpeelBegin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SpeelBegin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SpeelBegin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Client_SpeelBegin));
  SceneBranchInfo_descriptor_ = file->message_type(42);
  static const int SceneBranchInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneBranchInfo, branchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneBranchInfo, playernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneBranchInfo, displybranchid_),
  };
  SceneBranchInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SceneBranchInfo_descriptor_,
      SceneBranchInfo::default_instance_,
      SceneBranchInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneBranchInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneBranchInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SceneBranchInfo));
  Battle2Client_GetMapBranch_descriptor_ = file->message_type(43);
  static const int Battle2Client_GetMapBranch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_GetMapBranch, branch_list_),
  };
  Battle2Client_GetMapBranch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Client_GetMapBranch_descriptor_,
      Battle2Client_GetMapBranch::default_instance_,
      Battle2Client_GetMapBranch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_GetMapBranch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_GetMapBranch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Client_GetMapBranch));
  Battle2Client_ChangeBranch_descriptor_ = file->message_type(44);
  static const int Battle2Client_ChangeBranch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_ChangeBranch, rt_),
  };
  Battle2Client_ChangeBranch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Client_ChangeBranch_descriptor_,
      Battle2Client_ChangeBranch::default_instance_,
      Battle2Client_ChangeBranch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_ChangeBranch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_ChangeBranch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Client_ChangeBranch));
  Client2Battle_ChangeMap_descriptor_ = file->message_type(45);
  static const int Client2Battle_ChangeMap_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_ChangeMap, uimapid_),
  };
  Client2Battle_ChangeMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Client2Battle_ChangeMap_descriptor_,
      Client2Battle_ChangeMap::default_instance_,
      Client2Battle_ChangeMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_ChangeMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_ChangeMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Client2Battle_ChangeMap));
  Client2Battle_SummonMercenary_descriptor_ = file->message_type(46);
  static const int Client2Battle_SummonMercenary_offsets_[1] = {
  };
  Client2Battle_SummonMercenary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Client2Battle_SummonMercenary_descriptor_,
      Client2Battle_SummonMercenary::default_instance_,
      Client2Battle_SummonMercenary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_SummonMercenary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_SummonMercenary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Client2Battle_SummonMercenary));
  Battle2Client_CheckPosition_descriptor_ = file->message_type(47);
  static const int Battle2Client_CheckPosition_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_CheckPosition, nid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_CheckPosition, pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_CheckPosition, dir_),
  };
  Battle2Client_CheckPosition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Client_CheckPosition_descriptor_,
      Battle2Client_CheckPosition::default_instance_,
      Battle2Client_CheckPosition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_CheckPosition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_CheckPosition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Client_CheckPosition));
  Battle2Client_MonsterStopMove_descriptor_ = file->message_type(48);
  static const int Battle2Client_MonsterStopMove_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_MonsterStopMove, nid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_MonsterStopMove, pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_MonsterStopMove, dir_),
  };
  Battle2Client_MonsterStopMove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Client_MonsterStopMove_descriptor_,
      Battle2Client_MonsterStopMove::default_instance_,
      Battle2Client_MonsterStopMove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_MonsterStopMove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_MonsterStopMove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Client_MonsterStopMove));
  Battle2Client_TriggerEvent_descriptor_ = file->message_type(49);
  static const int Battle2Client_TriggerEvent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_TriggerEvent, plyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_TriggerEvent, triggertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_TriggerEvent, triggerid_),
  };
  Battle2Client_TriggerEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Client_TriggerEvent_descriptor_,
      Battle2Client_TriggerEvent::default_instance_,
      Battle2Client_TriggerEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_TriggerEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_TriggerEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Client_TriggerEvent));
  Battle2Client_TriggerServerTips_descriptor_ = file->message_type(50);
  static const int Battle2Client_TriggerServerTips_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_TriggerServerTips, servertipsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_TriggerServerTips, arg_),
  };
  Battle2Client_TriggerServerTips_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Client_TriggerServerTips_descriptor_,
      Battle2Client_TriggerServerTips::default_instance_,
      Battle2Client_TriggerServerTips_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_TriggerServerTips, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_TriggerServerTips, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Client_TriggerServerTips));
  Battle2Client_ChangeTttle_descriptor_ = file->message_type(51);
  static const int Battle2Client_ChangeTttle_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_ChangeTttle, nid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_ChangeTttle, titleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_ChangeTttle, titlename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_ChangeTttle, ishide_),
  };
  Battle2Client_ChangeTttle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Client_ChangeTttle_descriptor_,
      Battle2Client_ChangeTttle::default_instance_,
      Battle2Client_ChangeTttle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_ChangeTttle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_ChangeTttle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Client_ChangeTttle));
  Battle2Client_ChangeEquip_descriptor_ = file->message_type(52);
  static const int Battle2Client_ChangeEquip_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_ChangeEquip, nid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_ChangeEquip, equip_list_),
  };
  Battle2Client_ChangeEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Client_ChangeEquip_descriptor_,
      Battle2Client_ChangeEquip::default_instance_,
      Battle2Client_ChangeEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_ChangeEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_ChangeEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Client_ChangeEquip));
  Battle2Client_ClientLoadOK_descriptor_ = file->message_type(53);
  static const int Battle2Client_ClientLoadOK_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_ClientLoadOK, branch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_ClientLoadOK, inittime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_ClientLoadOK, displybranchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_ClientLoadOK, relivenum_),
  };
  Battle2Client_ClientLoadOK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Client_ClientLoadOK_descriptor_,
      Battle2Client_ClientLoadOK::default_instance_,
      Battle2Client_ClientLoadOK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_ClientLoadOK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_ClientLoadOK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Client_ClientLoadOK));
  Client2Battle__TriggerEvent_descriptor_ = file->message_type(54);
  static const int Client2Battle__TriggerEvent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle__TriggerEvent, triggertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle__TriggerEvent, triggerid_),
  };
  Client2Battle__TriggerEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Client2Battle__TriggerEvent_descriptor_,
      Client2Battle__TriggerEvent::default_instance_,
      Client2Battle__TriggerEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle__TriggerEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle__TriggerEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Client2Battle__TriggerEvent));
  Battle2Game_AddDropItem_descriptor_ = file->message_type(55);
  static const int Battle2Game_AddDropItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_AddDropItem, uigetway_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_AddDropItem, vecitemlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_AddDropItem, uisendtips_),
  };
  Battle2Game_AddDropItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Game_AddDropItem_descriptor_,
      Battle2Game_AddDropItem::default_instance_,
      Battle2Game_AddDropItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_AddDropItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_AddDropItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Game_AddDropItem));
  Battle2Game_DungeonResult_descriptor_ = file->message_type(56);
  static const int Battle2Game_DungeonResult_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_DungeonResult, uiproid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_DungeonResult, uiresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_DungeonResult, uigrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_DungeonResult, uipasstime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_DungeonResult, uibeatttimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_DungeonResult, uiremainhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_DungeonResult, uinpchp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_DungeonResult, uidietimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_DungeonResult, uinotcomtask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_DungeonResult, uleaderid_),
  };
  Battle2Game_DungeonResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Game_DungeonResult_descriptor_,
      Battle2Game_DungeonResult::default_instance_,
      Battle2Game_DungeonResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_DungeonResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_DungeonResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Game_DungeonResult));
  GameToBattle_PlayerDisconnect_descriptor_ = file->message_type(57);
  static const int GameToBattle_PlayerDisconnect_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameToBattle_PlayerDisconnect, uibackonline_),
  };
  GameToBattle_PlayerDisconnect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameToBattle_PlayerDisconnect_descriptor_,
      GameToBattle_PlayerDisconnect::default_instance_,
      GameToBattle_PlayerDisconnect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameToBattle_PlayerDisconnect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameToBattle_PlayerDisconnect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameToBattle_PlayerDisconnect));
  Battle2Game_SyncMove_descriptor_ = file->message_type(58);
  static const int Battle2Game_SyncMove_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_SyncMove, uisceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_SyncMove, pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_SyncMove, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_SyncMove, layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_SyncMove, branchid_),
  };
  Battle2Game_SyncMove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Game_SyncMove_descriptor_,
      Battle2Game_SyncMove::default_instance_,
      Battle2Game_SyncMove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_SyncMove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_SyncMove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Game_SyncMove));
  Battle2Game_UpdateQuest_descriptor_ = file->message_type(59);
  static const int Battle2Game_UpdateQuest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_UpdateQuest, uiquesttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_UpdateQuest, uitargetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_UpdateQuest, uiarg_),
  };
  Battle2Game_UpdateQuest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Game_UpdateQuest_descriptor_,
      Battle2Game_UpdateQuest::default_instance_,
      Battle2Game_UpdateQuest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_UpdateQuest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_UpdateQuest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Game_UpdateQuest));
  Battle2Game_TriggerQuest_descriptor_ = file->message_type(60);
  static const int Battle2Game_TriggerQuest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_TriggerQuest, uiquestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_TriggerQuest, uiquesttype_),
  };
  Battle2Game_TriggerQuest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Game_TriggerQuest_descriptor_,
      Battle2Game_TriggerQuest::default_instance_,
      Battle2Game_TriggerQuest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_TriggerQuest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_TriggerQuest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Game_TriggerQuest));
  Battle2Game_MonsterDie_descriptor_ = file->message_type(61);
  static const int Battle2Game_MonsterDie_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_MonsterDie, uimonsterproid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_MonsterDie, uimonsterobjid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_MonsterDie, pt_),
  };
  Battle2Game_MonsterDie_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Game_MonsterDie_descriptor_,
      Battle2Game_MonsterDie::default_instance_,
      Battle2Game_MonsterDie_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_MonsterDie, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_MonsterDie, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Game_MonsterDie));
  Battle2Game_LeaveDungeon_descriptor_ = file->message_type(62);
  static const int Battle2Game_LeaveDungeon_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_LeaveDungeon, uiend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_LeaveDungeon, uiagain_),
  };
  Battle2Game_LeaveDungeon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Game_LeaveDungeon_descriptor_,
      Battle2Game_LeaveDungeon::default_instance_,
      Battle2Game_LeaveDungeon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_LeaveDungeon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_LeaveDungeon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Game_LeaveDungeon));
  Battle2Game_ChangeMapForceAwakenOff_descriptor_ = file->message_type(63);
  static const int Battle2Game_ChangeMapForceAwakenOff_offsets_[1] = {
  };
  Battle2Game_ChangeMapForceAwakenOff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Game_ChangeMapForceAwakenOff_descriptor_,
      Battle2Game_ChangeMapForceAwakenOff::default_instance_,
      Battle2Game_ChangeMapForceAwakenOff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_ChangeMapForceAwakenOff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_ChangeMapForceAwakenOff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Game_ChangeMapForceAwakenOff));
  Battle2Game_DieToChangeAwakenAndRide_descriptor_ = file->message_type(64);
  static const int Battle2Game_DieToChangeAwakenAndRide_offsets_[1] = {
  };
  Battle2Game_DieToChangeAwakenAndRide_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Game_DieToChangeAwakenAndRide_descriptor_,
      Battle2Game_DieToChangeAwakenAndRide::default_instance_,
      Battle2Game_DieToChangeAwakenAndRide_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_DieToChangeAwakenAndRide, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_DieToChangeAwakenAndRide, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Game_DieToChangeAwakenAndRide));
  Battle2Game_SceneLoadOk_descriptor_ = file->message_type(65);
  static const int Battle2Game_SceneLoadOk_offsets_[1] = {
  };
  Battle2Game_SceneLoadOk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Game_SceneLoadOk_descriptor_,
      Battle2Game_SceneLoadOk::default_instance_,
      Battle2Game_SceneLoadOk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_SceneLoadOk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_SceneLoadOk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Game_SceneLoadOk));
  Battle2Game_MercenaryDieInfo_descriptor_ = file->message_type(66);
  static const int Battle2Game_MercenaryDieInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_MercenaryDieInfo, uimercenary_),
  };
  Battle2Game_MercenaryDieInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Game_MercenaryDieInfo_descriptor_,
      Battle2Game_MercenaryDieInfo::default_instance_,
      Battle2Game_MercenaryDieInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_MercenaryDieInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_MercenaryDieInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Game_MercenaryDieInfo));
  Game2Battle_CheckTrigger_descriptor_ = file->message_type(67);
  static const int Game2Battle_CheckTrigger_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_CheckTrigger, uitype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_CheckTrigger, uivalue_),
  };
  Game2Battle_CheckTrigger_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Game2Battle_CheckTrigger_descriptor_,
      Game2Battle_CheckTrigger::default_instance_,
      Game2Battle_CheckTrigger_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_CheckTrigger, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_CheckTrigger, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Game2Battle_CheckTrigger));
  Game2Battle_AddQuestTrigger_descriptor_ = file->message_type(68);
  static const int Game2Battle_AddQuestTrigger_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_AddQuestTrigger, uiquestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_AddQuestTrigger, uiquesttargettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_AddQuestTrigger, uitriggerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_AddQuestTrigger, uitriggernpcid_),
  };
  Game2Battle_AddQuestTrigger_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Game2Battle_AddQuestTrigger_descriptor_,
      Game2Battle_AddQuestTrigger::default_instance_,
      Game2Battle_AddQuestTrigger_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_AddQuestTrigger, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_AddQuestTrigger, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Game2Battle_AddQuestTrigger));
  Game2Battle_UpdateTask_descriptor_ = file->message_type(69);
  static const int Game2Battle_UpdateTask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_UpdateTask, uiid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_UpdateTask, uivalue_),
  };
  Game2Battle_UpdateTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Game2Battle_UpdateTask_descriptor_,
      Game2Battle_UpdateTask::default_instance_,
      Game2Battle_UpdateTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_UpdateTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_UpdateTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Game2Battle_UpdateTask));
  Game2Battle_QuestNPCAddBuff_descriptor_ = file->message_type(70);
  static const int Game2Battle_QuestNPCAddBuff_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_QuestNPCAddBuff, ntriggernpcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_QuestNPCAddBuff, uitype_),
  };
  Game2Battle_QuestNPCAddBuff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Game2Battle_QuestNPCAddBuff_descriptor_,
      Game2Battle_QuestNPCAddBuff::default_instance_,
      Game2Battle_QuestNPCAddBuff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_QuestNPCAddBuff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_QuestNPCAddBuff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Game2Battle_QuestNPCAddBuff));
  Client2Battle_GameStoryStart_descriptor_ = file->message_type(71);
  static const int Client2Battle_GameStoryStart_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_GameStoryStart, gamestoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_GameStoryStart, npcid_),
  };
  Client2Battle_GameStoryStart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Client2Battle_GameStoryStart_descriptor_,
      Client2Battle_GameStoryStart::default_instance_,
      Client2Battle_GameStoryStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_GameStoryStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_GameStoryStart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Client2Battle_GameStoryStart));
  Client2Battle_GameStoryEnd_descriptor_ = file->message_type(72);
  static const int Client2Battle_GameStoryEnd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_GameStoryEnd, gamestoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_GameStoryEnd, npcid_),
  };
  Client2Battle_GameStoryEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Client2Battle_GameStoryEnd_descriptor_,
      Client2Battle_GameStoryEnd::default_instance_,
      Client2Battle_GameStoryEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_GameStoryEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_GameStoryEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Client2Battle_GameStoryEnd));
  Client2Battle_NPCStopAI_descriptor_ = file->message_type(73);
  static const int Client2Battle_NPCStopAI_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_NPCStopAI, npcid_),
  };
  Client2Battle_NPCStopAI_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Client2Battle_NPCStopAI_descriptor_,
      Client2Battle_NPCStopAI::default_instance_,
      Client2Battle_NPCStopAI_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_NPCStopAI, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_NPCStopAI, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Client2Battle_NPCStopAI));
  Client2Battle_NPCActiveAI_descriptor_ = file->message_type(74);
  static const int Client2Battle_NPCActiveAI_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_NPCActiveAI, npcid_),
  };
  Client2Battle_NPCActiveAI_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Client2Battle_NPCActiveAI_descriptor_,
      Client2Battle_NPCActiveAI::default_instance_,
      Client2Battle_NPCActiveAI_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_NPCActiveAI, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_NPCActiveAI, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Client2Battle_NPCActiveAI));
  Battle2Game_DungeonLoadOk_descriptor_ = file->message_type(75);
  static const int Battle2Game_DungeonLoadOk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_DungeonLoadOk, uiproid_),
  };
  Battle2Game_DungeonLoadOk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Game_DungeonLoadOk_descriptor_,
      Battle2Game_DungeonLoadOk::default_instance_,
      Battle2Game_DungeonLoadOk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_DungeonLoadOk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_DungeonLoadOk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Game_DungeonLoadOk));
  Client2Battle_WolrdBossDorp_ItemList_descriptor_ = file->message_type(76);
  static const int Client2Battle_WolrdBossDorp_ItemList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_WolrdBossDorp_ItemList, vecitemlist_),
  };
  Client2Battle_WolrdBossDorp_ItemList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Client2Battle_WolrdBossDorp_ItemList_descriptor_,
      Client2Battle_WolrdBossDorp_ItemList::default_instance_,
      Client2Battle_WolrdBossDorp_ItemList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_WolrdBossDorp_ItemList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_WolrdBossDorp_ItemList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Client2Battle_WolrdBossDorp_ItemList));
  Client2Battle_WorldBoss_HurtRankList_descriptor_ = file->message_type(77);
  static const int Client2Battle_WorldBoss_HurtRankList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_WorldBoss_HurtRankList, uibosstype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_WorldBoss_HurtRankList, uibosstableid_),
  };
  Client2Battle_WorldBoss_HurtRankList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Client2Battle_WorldBoss_HurtRankList_descriptor_,
      Client2Battle_WorldBoss_HurtRankList::default_instance_,
      Client2Battle_WorldBoss_HurtRankList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_WorldBoss_HurtRankList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_WorldBoss_HurtRankList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Client2Battle_WorldBoss_HurtRankList));
  Battle2Client_WolrdBoss_HurtRankList_descriptor_ = file->message_type(78);
  static const int Battle2Client_WolrdBoss_HurtRankList_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_WolrdBoss_HurtRankList, namelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_WolrdBoss_HurtRankList, hurttotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_WolrdBoss_HurtRankList, selfhurttotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_WolrdBoss_HurtRankList, selfrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_WolrdBoss_HurtRankList, uibosstype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_WolrdBoss_HurtRankList, uibosstableid_),
  };
  Battle2Client_WolrdBoss_HurtRankList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Client_WolrdBoss_HurtRankList_descriptor_,
      Battle2Client_WolrdBoss_HurtRankList::default_instance_,
      Battle2Client_WolrdBoss_HurtRankList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_WolrdBoss_HurtRankList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_WolrdBoss_HurtRankList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Client_WolrdBoss_HurtRankList));
  WolrdBossSaleItem_descriptor_ = file->message_type(79);
  static const int WolrdBossSaleItem_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WolrdBossSaleItem, uiindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WolrdBossSaleItem, uiexpirytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WolrdBossSaleItem, uisharenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WolrdBossSaleItem, uiplayername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WolrdBossSaleItem, uiplayerjob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WolrdBossSaleItem, uiplayerlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WolrdBossSaleItem, uiprice_),
  };
  WolrdBossSaleItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WolrdBossSaleItem_descriptor_,
      WolrdBossSaleItem::default_instance_,
      WolrdBossSaleItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WolrdBossSaleItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WolrdBossSaleItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WolrdBossSaleItem));
  Battle2Client_WolrdBoss_DorpItemList_descriptor_ = file->message_type(80);
  static const int Battle2Client_WolrdBoss_DorpItemList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_WolrdBoss_DorpItemList, vecitemlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_WolrdBoss_DorpItemList, ssaleitem_),
  };
  Battle2Client_WolrdBoss_DorpItemList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Client_WolrdBoss_DorpItemList_descriptor_,
      Battle2Client_WolrdBoss_DorpItemList::default_instance_,
      Battle2Client_WolrdBoss_DorpItemList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_WolrdBoss_DorpItemList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_WolrdBoss_DorpItemList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Client_WolrdBoss_DorpItemList));
  Battle2Client_WolrdBoss_SaleBid_descriptor_ = file->message_type(81);
  static const int Battle2Client_WolrdBoss_SaleBid_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_WolrdBoss_SaleBid, uiindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_WolrdBoss_SaleBid, uiplayername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_WolrdBoss_SaleBid, uiplayerjob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_WolrdBoss_SaleBid, uiplayerlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_WolrdBoss_SaleBid, uiprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_WolrdBoss_SaleBid, uiexpirytime_),
  };
  Battle2Client_WolrdBoss_SaleBid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Client_WolrdBoss_SaleBid_descriptor_,
      Battle2Client_WolrdBoss_SaleBid::default_instance_,
      Battle2Client_WolrdBoss_SaleBid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_WolrdBoss_SaleBid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_WolrdBoss_SaleBid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Client_WolrdBoss_SaleBid));
  Battle2Client_WolrdBoss_SaleResult_descriptor_ = file->message_type(82);
  static const int Battle2Client_WolrdBoss_SaleResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_WolrdBoss_SaleResult, uiindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_WolrdBoss_SaleResult, uiplayername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_WolrdBoss_SaleResult, uiplayerjob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_WolrdBoss_SaleResult, uiplayerlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_WolrdBoss_SaleResult, uiprice_),
  };
  Battle2Client_WolrdBoss_SaleResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Client_WolrdBoss_SaleResult_descriptor_,
      Battle2Client_WolrdBoss_SaleResult::default_instance_,
      Battle2Client_WolrdBoss_SaleResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_WolrdBoss_SaleResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_WolrdBoss_SaleResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Client_WolrdBoss_SaleResult));
  Battle2Game_WolrdBoss_SaleResult_descriptor_ = file->message_type(83);
  static const int Battle2Game_WolrdBoss_SaleResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_WolrdBoss_SaleResult, item_),
  };
  Battle2Game_WolrdBoss_SaleResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Game_WolrdBoss_SaleResult_descriptor_,
      Battle2Game_WolrdBoss_SaleResult::default_instance_,
      Battle2Game_WolrdBoss_SaleResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_WolrdBoss_SaleResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_WolrdBoss_SaleResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Game_WolrdBoss_SaleResult));
  Battle2Game_SendMail_descriptor_ = file->message_type(84);
  static const int Battle2Game_SendMail_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_SendMail, uisendto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_SendMail, uimode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_SendMail, uiarg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_SendMail, szarg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_SendMail, vecitemlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_SendMail, uiopt_),
  };
  Battle2Game_SendMail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Game_SendMail_descriptor_,
      Battle2Game_SendMail::default_instance_,
      Battle2Game_SendMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_SendMail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_SendMail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Game_SendMail));
  Battle2Game_WolrdBoss_HpChange_descriptor_ = file->message_type(85);
  static const int Battle2Game_WolrdBoss_HpChange_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_WolrdBoss_HpChange, uibosstype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_WolrdBoss_HpChange, uihp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_WolrdBoss_HpChange, uibosstableid_),
  };
  Battle2Game_WolrdBoss_HpChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Game_WolrdBoss_HpChange_descriptor_,
      Battle2Game_WolrdBoss_HpChange::default_instance_,
      Battle2Game_WolrdBoss_HpChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_WolrdBoss_HpChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_WolrdBoss_HpChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Game_WolrdBoss_HpChange));
  Battle2Client_WolrdBoss_HpChange_descriptor_ = file->message_type(86);
  static const int Battle2Client_WolrdBoss_HpChange_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_WolrdBoss_HpChange, uibosstype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_WolrdBoss_HpChange, uihp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_WolrdBoss_HpChange, uibosstableid_),
  };
  Battle2Client_WolrdBoss_HpChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Client_WolrdBoss_HpChange_descriptor_,
      Battle2Client_WolrdBoss_HpChange::default_instance_,
      Battle2Client_WolrdBoss_HpChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_WolrdBoss_HpChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_WolrdBoss_HpChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Client_WolrdBoss_HpChange));
  Game2Battle_AddCurHp_descriptor_ = file->message_type(87);
  static const int Game2Battle_AddCurHp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_AddCurHp, uihp_),
  };
  Game2Battle_AddCurHp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Game2Battle_AddCurHp_descriptor_,
      Game2Battle_AddCurHp::default_instance_,
      Game2Battle_AddCurHp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_AddCurHp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_AddCurHp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Game2Battle_AddCurHp));
  Game2Battle_AddBuff_descriptor_ = file->message_type(88);
  static const int Game2Battle_AddBuff_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_AddBuff, uibuffid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_AddBuff, uiquality_),
  };
  Game2Battle_AddBuff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Game2Battle_AddBuff_descriptor_,
      Game2Battle_AddBuff::default_instance_,
      Game2Battle_AddBuff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_AddBuff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_AddBuff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Game2Battle_AddBuff));
  Client2Battle_WorldBoss_SaledItem_descriptor_ = file->message_type(89);
  static const int Client2Battle_WorldBoss_SaledItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_WorldBoss_SaledItem, uiindex_),
  };
  Client2Battle_WorldBoss_SaledItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Client2Battle_WorldBoss_SaledItem_descriptor_,
      Client2Battle_WorldBoss_SaledItem::default_instance_,
      Client2Battle_WorldBoss_SaledItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_WorldBoss_SaledItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_WorldBoss_SaledItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Client2Battle_WorldBoss_SaledItem));
  Battle2Client_WorldBoss_SaledItem_descriptor_ = file->message_type(90);
  static const int Battle2Client_WorldBoss_SaledItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_WorldBoss_SaledItem, sitem_),
  };
  Battle2Client_WorldBoss_SaledItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Client_WorldBoss_SaledItem_descriptor_,
      Battle2Client_WorldBoss_SaledItem::default_instance_,
      Battle2Client_WorldBoss_SaledItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_WorldBoss_SaledItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_WorldBoss_SaledItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Client_WorldBoss_SaledItem));
  Battle2Client_SyncDropItemAppear_descriptor_ = file->message_type(91);
  static const int Battle2Client_SyncDropItemAppear_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncDropItemAppear, uiobjid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncDropItemAppear, uitype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncDropItemAppear, pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncDropItemAppear, vecitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncDropItemAppear, uiownerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncDropItemAppear, name_),
  };
  Battle2Client_SyncDropItemAppear_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Client_SyncDropItemAppear_descriptor_,
      Battle2Client_SyncDropItemAppear::default_instance_,
      Battle2Client_SyncDropItemAppear_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncDropItemAppear, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncDropItemAppear, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Client_SyncDropItemAppear));
  Battle2Client_TicketBoss_DropItem_descriptor_ = file->message_type(92);
  static const int Battle2Client_TicketBoss_DropItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_TicketBoss_DropItem, uibosstableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_TicketBoss_DropItem, vecitemlist_),
  };
  Battle2Client_TicketBoss_DropItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Client_TicketBoss_DropItem_descriptor_,
      Battle2Client_TicketBoss_DropItem::default_instance_,
      Battle2Client_TicketBoss_DropItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_TicketBoss_DropItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_TicketBoss_DropItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Client_TicketBoss_DropItem));
  Battle2Client_SyncDropItemChange_descriptor_ = file->message_type(93);
  static const int Battle2Client_SyncDropItemChange_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncDropItemChange, uiobjid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncDropItemChange, iitemindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncDropItemChange, uiownerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncDropItemChange, uitakeobjid_),
  };
  Battle2Client_SyncDropItemChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Client_SyncDropItemChange_descriptor_,
      Battle2Client_SyncDropItemChange::default_instance_,
      Battle2Client_SyncDropItemChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncDropItemChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncDropItemChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Client_SyncDropItemChange));
  Client2Battle_Ping_descriptor_ = file->message_type(94);
  static const int Client2Battle_Ping_offsets_[1] = {
  };
  Client2Battle_Ping_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Client2Battle_Ping_descriptor_,
      Client2Battle_Ping::default_instance_,
      Client2Battle_Ping_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_Ping, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_Ping, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Client2Battle_Ping));
  Battle2Client_Ping_descriptor_ = file->message_type(95);
  static const int Battle2Client_Ping_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_Ping, timestamp_),
  };
  Battle2Client_Ping_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Client_Ping_descriptor_,
      Battle2Client_Ping::default_instance_,
      Battle2Client_Ping_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_Ping, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_Ping, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Client_Ping));
  Game2Battle_CreateMonster_descriptor_ = file->message_type(96);
  static const int Game2Battle_CreateMonster_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_CreateMonster, proid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_CreateMonster, pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_CreateMonster, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_CreateMonster, layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_CreateMonster, from_),
  };
  Game2Battle_CreateMonster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Game2Battle_CreateMonster_descriptor_,
      Game2Battle_CreateMonster::default_instance_,
      Game2Battle_CreateMonster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_CreateMonster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_CreateMonster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Game2Battle_CreateMonster));
  Client2Battle_ChangeAttackMode_descriptor_ = file->message_type(97);
  static const int Client2Battle_ChangeAttackMode_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_ChangeAttackMode, uiattackmode_),
  };
  Client2Battle_ChangeAttackMode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Client2Battle_ChangeAttackMode_descriptor_,
      Client2Battle_ChangeAttackMode::default_instance_,
      Client2Battle_ChangeAttackMode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_ChangeAttackMode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_ChangeAttackMode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Client2Battle_ChangeAttackMode));
  Client2Battle_Transfer_descriptor_ = file->message_type(98);
  static const int Client2Battle_Transfer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_Transfer, uitransfertableid_),
  };
  Client2Battle_Transfer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Client2Battle_Transfer_descriptor_,
      Client2Battle_Transfer::default_instance_,
      Client2Battle_Transfer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_Transfer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client2Battle_Transfer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Client2Battle_Transfer));
  Battle2Client_Anchor_descriptor_ = file->message_type(99);
  static const int Battle2Client_Anchor_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_Anchor, uiobjid_),
  };
  Battle2Client_Anchor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Client_Anchor_descriptor_,
      Battle2Client_Anchor::default_instance_,
      Battle2Client_Anchor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_Anchor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_Anchor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Client_Anchor));
  Battle2Client_UpdateHeadInfo_descriptor_ = file->message_type(100);
  static const int Battle2Client_UpdateHeadInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_UpdateHeadInfo, info_),
  };
  Battle2Client_UpdateHeadInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Client_UpdateHeadInfo_descriptor_,
      Battle2Client_UpdateHeadInfo::default_instance_,
      Battle2Client_UpdateHeadInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_UpdateHeadInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_UpdateHeadInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Client_UpdateHeadInfo));
  Battle2Client_UpdateMercenaryRank_descriptor_ = file->message_type(101);
  static const int Battle2Client_UpdateMercenaryRank_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_UpdateMercenaryRank, uiobjid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_UpdateMercenaryRank, ranking_),
  };
  Battle2Client_UpdateMercenaryRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Client_UpdateMercenaryRank_descriptor_,
      Battle2Client_UpdateMercenaryRank::default_instance_,
      Battle2Client_UpdateMercenaryRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_UpdateMercenaryRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_UpdateMercenaryRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Client_UpdateMercenaryRank));
  Battle2Client_TriggerRadius_descriptor_ = file->message_type(102);
  static const int Battle2Client_TriggerRadius_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_TriggerRadius, uitriggerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_TriggerRadius, pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_TriggerRadius, fradius_),
  };
  Battle2Client_TriggerRadius_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Client_TriggerRadius_descriptor_,
      Battle2Client_TriggerRadius::default_instance_,
      Battle2Client_TriggerRadius_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_TriggerRadius, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_TriggerRadius, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Client_TriggerRadius));
  Battle2Client_ScenePlayerNum_descriptor_ = file->message_type(103);
  static const int Battle2Client_ScenePlayerNum_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_ScenePlayerNum, uisceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_ScenePlayerNum, uicurnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_ScenePlayerNum, uimaxnum_),
  };
  Battle2Client_ScenePlayerNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Client_ScenePlayerNum_descriptor_,
      Battle2Client_ScenePlayerNum::default_instance_,
      Battle2Client_ScenePlayerNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_ScenePlayerNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_ScenePlayerNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Client_ScenePlayerNum));
  Battle2Client_GradeDataChanged_descriptor_ = file->message_type(104);
  static const int Battle2Client_GradeDataChanged_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_GradeDataChanged, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_GradeDataChanged, data_),
  };
  Battle2Client_GradeDataChanged_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Client_GradeDataChanged_descriptor_,
      Battle2Client_GradeDataChanged::default_instance_,
      Battle2Client_GradeDataChanged_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_GradeDataChanged, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_GradeDataChanged, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Client_GradeDataChanged));
  Battle2Client_SyncMonsterOnwer_descriptor_ = file->message_type(105);
  static const int Battle2Client_SyncMonsterOnwer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncMonsterOnwer, monsterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncMonsterOnwer, owner_),
  };
  Battle2Client_SyncMonsterOnwer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Client_SyncMonsterOnwer_descriptor_,
      Battle2Client_SyncMonsterOnwer::default_instance_,
      Battle2Client_SyncMonsterOnwer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncMonsterOnwer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncMonsterOnwer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Client_SyncMonsterOnwer));
  Battle2Client_SafeAreaStatus_descriptor_ = file->message_type(106);
  static const int Battle2Client_SafeAreaStatus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SafeAreaStatus, status_),
  };
  Battle2Client_SafeAreaStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Client_SafeAreaStatus_descriptor_,
      Battle2Client_SafeAreaStatus::default_instance_,
      Battle2Client_SafeAreaStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SafeAreaStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SafeAreaStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Client_SafeAreaStatus));
  Battle2Client_ServerMove_descriptor_ = file->message_type(107);
  static const int Battle2Client_ServerMove_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_ServerMove, pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_ServerMove, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_ServerMove, speed_),
  };
  Battle2Client_ServerMove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Client_ServerMove_descriptor_,
      Battle2Client_ServerMove::default_instance_,
      Battle2Client_ServerMove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_ServerMove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_ServerMove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Client_ServerMove));
  Battle2Client_PlayerDie_descriptor_ = file->message_type(108);
  static const int Battle2Client_PlayerDie_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_PlayerDie, killername_),
  };
  Battle2Client_PlayerDie_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Client_PlayerDie_descriptor_,
      Battle2Client_PlayerDie::default_instance_,
      Battle2Client_PlayerDie_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_PlayerDie, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_PlayerDie, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Client_PlayerDie));
  Battle2Client_MonsterCountChanged_descriptor_ = file->message_type(109);
  static const int Battle2Client_MonsterCountChanged_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_MonsterCountChanged, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_MonsterCountChanged, monsters_),
  };
  Battle2Client_MonsterCountChanged_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Client_MonsterCountChanged_descriptor_,
      Battle2Client_MonsterCountChanged::default_instance_,
      Battle2Client_MonsterCountChanged_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_MonsterCountChanged, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_MonsterCountChanged, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Client_MonsterCountChanged));
  Battle2Client_AckTBPlayerInfo_descriptor_ = file->message_type(110);
  static const int Battle2Client_AckTBPlayerInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_AckTBPlayerInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_AckTBPlayerInfo, jointime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_AckTBPlayerInfo, overtime_),
  };
  Battle2Client_AckTBPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Client_AckTBPlayerInfo_descriptor_,
      Battle2Client_AckTBPlayerInfo::default_instance_,
      Battle2Client_AckTBPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_AckTBPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_AckTBPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Client_AckTBPlayerInfo));
  Battle2Client_SyncSceneObjDisappear_descriptor_ = file->message_type(111);
  static const int Battle2Client_SyncSceneObjDisappear_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncSceneObjDisappear, objs_),
  };
  Battle2Client_SyncSceneObjDisappear_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Client_SyncSceneObjDisappear_descriptor_,
      Battle2Client_SyncSceneObjDisappear::default_instance_,
      Battle2Client_SyncSceneObjDisappear_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncSceneObjDisappear, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncSceneObjDisappear, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Client_SyncSceneObjDisappear));
  Battle2Client_SyncSceneObjAppear_descriptor_ = file->message_type(112);
  static const int Battle2Client_SyncSceneObjAppear_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncSceneObjAppear, monsters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncSceneObjAppear, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncSceneObjAppear, drop_items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncSceneObjAppear, mercenarys_),
  };
  Battle2Client_SyncSceneObjAppear_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Client_SyncSceneObjAppear_descriptor_,
      Battle2Client_SyncSceneObjAppear::default_instance_,
      Battle2Client_SyncSceneObjAppear_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncSceneObjAppear, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Client_SyncSceneObjAppear, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Client_SyncSceneObjAppear));
  Battle2Client_GradeDataType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_battle_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncBattleObjAtt_descriptor_, &SyncBattleObjAtt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Match_ServerInfo_descriptor_, &Battle2Match_ServerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Game2Battle_EnterScene_descriptor_, &Game2Battle_EnterScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Game2Battle_ChangeMap_descriptor_, &Game2Battle_ChangeMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Game2Battle_ChangeTttle_descriptor_, &Game2Battle_ChangeTttle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Game2Battle_ChangeAwaken_descriptor_, &Game2Battle_ChangeAwaken::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Game2Battle_ChangePet_descriptor_, &Game2Battle_ChangePet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Game2Battle_UpdateMyCombat_descriptor_, &Game2Battle_UpdateMyCombat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Game2Battle_ChangeAvatar_descriptor_, &Game2Battle_ChangeAvatar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Game2Battle_ChangeRide_descriptor_, &Game2Battle_ChangeRide::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Game2Battle_BornMercenary_descriptor_, &Game2Battle_BornMercenary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Game2Battle_UpdateMercenaryScript_descriptor_, &Game2Battle_UpdateMercenaryScript::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Game2Battle_UpdateRideScript_descriptor_, &Game2Battle_UpdateRideScript::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Game2Battle_UpdateAwakenScript_descriptor_, &Game2Battle_UpdateAwakenScript::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Game_SaveMercenaryHp_descriptor_, &Battle2Game_SaveMercenaryHp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Game_UpdatePlayerStatus_descriptor_, &Battle2Game_UpdatePlayerStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Game2Battle_ChangeEquip_descriptor_, &Game2Battle_ChangeEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Game2Battle_FollowLeader_descriptor_, &Game2Battle_FollowLeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Game2Battle_ChangeMapPendingBranch_descriptor_, &Game2Battle_ChangeMapPendingBranch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Client_ChangePet_descriptor_, &Battle2Client_ChangePet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Client_ChangeRide_descriptor_, &Battle2Client_ChangeRide::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Client_ChangeAwaken_descriptor_, &Battle2Client_ChangeAwaken::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Client_ChangeAvatar_descriptor_, &Battle2Client_ChangeAvatar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Client_ChangeSuit_descriptor_, &Battle2Client_ChangeSuit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Client_ReconnectUnDoTrigger_descriptor_, &Battle2Client_ReconnectUnDoTrigger::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Game2Battle_UpdatePlayerValue_descriptor_, &Game2Battle_UpdatePlayerValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Game_EnterScene_descriptor_, &Battle2Game_EnterScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Client_EnterScene_descriptor_, &Battle2Client_EnterScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Client2Battle_ClientLoadOK_descriptor_, &Client2Battle_ClientLoadOK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Client2Battle_SyncMove_descriptor_, &Client2Battle_SyncMove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Client2Battle_GetMapBranch_descriptor_, &Client2Battle_GetMapBranch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Client2Battle_ChangeBranch_descriptor_, &Client2Battle_ChangeBranch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Client_SyncPlayerAppear_descriptor_, &Battle2Client_SyncPlayerAppear::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Client_SyncObjDisappear_descriptor_, &Battle2Client_SyncObjDisappear::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OwnerInfo_descriptor_, &OwnerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Client_SyncMonsterAppear_descriptor_, &Battle2Client_SyncMonsterAppear::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mercenarySkillCD_descriptor_, &mercenarySkillCD::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Client_SyncMercenaryAppear_descriptor_, &Battle2Client_SyncMercenaryAppear::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Client_SyncMove_descriptor_, &Battle2Client_SyncMove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Client2Battle_SpeelBegin_descriptor_, &Client2Battle_SpeelBegin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Client2Battle_SpeelEnd_descriptor_, &Client2Battle_SpeelEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Client_SpeelBegin_descriptor_, &Battle2Client_SpeelBegin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SceneBranchInfo_descriptor_, &SceneBranchInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Client_GetMapBranch_descriptor_, &Battle2Client_GetMapBranch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Client_ChangeBranch_descriptor_, &Battle2Client_ChangeBranch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Client2Battle_ChangeMap_descriptor_, &Client2Battle_ChangeMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Client2Battle_SummonMercenary_descriptor_, &Client2Battle_SummonMercenary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Client_CheckPosition_descriptor_, &Battle2Client_CheckPosition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Client_MonsterStopMove_descriptor_, &Battle2Client_MonsterStopMove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Client_TriggerEvent_descriptor_, &Battle2Client_TriggerEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Client_TriggerServerTips_descriptor_, &Battle2Client_TriggerServerTips::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Client_ChangeTttle_descriptor_, &Battle2Client_ChangeTttle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Client_ChangeEquip_descriptor_, &Battle2Client_ChangeEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Client_ClientLoadOK_descriptor_, &Battle2Client_ClientLoadOK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Client2Battle__TriggerEvent_descriptor_, &Client2Battle__TriggerEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Game_AddDropItem_descriptor_, &Battle2Game_AddDropItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Game_DungeonResult_descriptor_, &Battle2Game_DungeonResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameToBattle_PlayerDisconnect_descriptor_, &GameToBattle_PlayerDisconnect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Game_SyncMove_descriptor_, &Battle2Game_SyncMove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Game_UpdateQuest_descriptor_, &Battle2Game_UpdateQuest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Game_TriggerQuest_descriptor_, &Battle2Game_TriggerQuest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Game_MonsterDie_descriptor_, &Battle2Game_MonsterDie::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Game_LeaveDungeon_descriptor_, &Battle2Game_LeaveDungeon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Game_ChangeMapForceAwakenOff_descriptor_, &Battle2Game_ChangeMapForceAwakenOff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Game_DieToChangeAwakenAndRide_descriptor_, &Battle2Game_DieToChangeAwakenAndRide::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Game_SceneLoadOk_descriptor_, &Battle2Game_SceneLoadOk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Game_MercenaryDieInfo_descriptor_, &Battle2Game_MercenaryDieInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Game2Battle_CheckTrigger_descriptor_, &Game2Battle_CheckTrigger::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Game2Battle_AddQuestTrigger_descriptor_, &Game2Battle_AddQuestTrigger::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Game2Battle_UpdateTask_descriptor_, &Game2Battle_UpdateTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Game2Battle_QuestNPCAddBuff_descriptor_, &Game2Battle_QuestNPCAddBuff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Client2Battle_GameStoryStart_descriptor_, &Client2Battle_GameStoryStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Client2Battle_GameStoryEnd_descriptor_, &Client2Battle_GameStoryEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Client2Battle_NPCStopAI_descriptor_, &Client2Battle_NPCStopAI::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Client2Battle_NPCActiveAI_descriptor_, &Client2Battle_NPCActiveAI::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Game_DungeonLoadOk_descriptor_, &Battle2Game_DungeonLoadOk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Client2Battle_WolrdBossDorp_ItemList_descriptor_, &Client2Battle_WolrdBossDorp_ItemList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Client2Battle_WorldBoss_HurtRankList_descriptor_, &Client2Battle_WorldBoss_HurtRankList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Client_WolrdBoss_HurtRankList_descriptor_, &Battle2Client_WolrdBoss_HurtRankList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WolrdBossSaleItem_descriptor_, &WolrdBossSaleItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Client_WolrdBoss_DorpItemList_descriptor_, &Battle2Client_WolrdBoss_DorpItemList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Client_WolrdBoss_SaleBid_descriptor_, &Battle2Client_WolrdBoss_SaleBid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Client_WolrdBoss_SaleResult_descriptor_, &Battle2Client_WolrdBoss_SaleResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Game_WolrdBoss_SaleResult_descriptor_, &Battle2Game_WolrdBoss_SaleResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Game_SendMail_descriptor_, &Battle2Game_SendMail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Game_WolrdBoss_HpChange_descriptor_, &Battle2Game_WolrdBoss_HpChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Client_WolrdBoss_HpChange_descriptor_, &Battle2Client_WolrdBoss_HpChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Game2Battle_AddCurHp_descriptor_, &Game2Battle_AddCurHp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Game2Battle_AddBuff_descriptor_, &Game2Battle_AddBuff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Client2Battle_WorldBoss_SaledItem_descriptor_, &Client2Battle_WorldBoss_SaledItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Client_WorldBoss_SaledItem_descriptor_, &Battle2Client_WorldBoss_SaledItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Client_SyncDropItemAppear_descriptor_, &Battle2Client_SyncDropItemAppear::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Client_TicketBoss_DropItem_descriptor_, &Battle2Client_TicketBoss_DropItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Client_SyncDropItemChange_descriptor_, &Battle2Client_SyncDropItemChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Client2Battle_Ping_descriptor_, &Client2Battle_Ping::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Client_Ping_descriptor_, &Battle2Client_Ping::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Game2Battle_CreateMonster_descriptor_, &Game2Battle_CreateMonster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Client2Battle_ChangeAttackMode_descriptor_, &Client2Battle_ChangeAttackMode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Client2Battle_Transfer_descriptor_, &Client2Battle_Transfer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Client_Anchor_descriptor_, &Battle2Client_Anchor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Client_UpdateHeadInfo_descriptor_, &Battle2Client_UpdateHeadInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Client_UpdateMercenaryRank_descriptor_, &Battle2Client_UpdateMercenaryRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Client_TriggerRadius_descriptor_, &Battle2Client_TriggerRadius::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Client_ScenePlayerNum_descriptor_, &Battle2Client_ScenePlayerNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Client_GradeDataChanged_descriptor_, &Battle2Client_GradeDataChanged::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Client_SyncMonsterOnwer_descriptor_, &Battle2Client_SyncMonsterOnwer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Client_SafeAreaStatus_descriptor_, &Battle2Client_SafeAreaStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Client_ServerMove_descriptor_, &Battle2Client_ServerMove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Client_PlayerDie_descriptor_, &Battle2Client_PlayerDie::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Client_MonsterCountChanged_descriptor_, &Battle2Client_MonsterCountChanged::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Client_AckTBPlayerInfo_descriptor_, &Battle2Client_AckTBPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Client_SyncSceneObjDisappear_descriptor_, &Battle2Client_SyncSceneObjDisappear::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Client_SyncSceneObjAppear_descriptor_, &Battle2Client_SyncSceneObjAppear::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_battle_2eproto() {
  delete SyncBattleObjAtt::default_instance_;
  delete SyncBattleObjAtt_reflection_;
  delete Battle2Match_ServerInfo::default_instance_;
  delete Battle2Match_ServerInfo_reflection_;
  delete Game2Battle_EnterScene::default_instance_;
  delete Game2Battle_EnterScene_reflection_;
  delete Game2Battle_ChangeMap::default_instance_;
  delete Game2Battle_ChangeMap_reflection_;
  delete Game2Battle_ChangeTttle::default_instance_;
  delete Game2Battle_ChangeTttle_reflection_;
  delete Game2Battle_ChangeAwaken::default_instance_;
  delete Game2Battle_ChangeAwaken_reflection_;
  delete Game2Battle_ChangePet::default_instance_;
  delete Game2Battle_ChangePet_reflection_;
  delete Game2Battle_UpdateMyCombat::default_instance_;
  delete Game2Battle_UpdateMyCombat_reflection_;
  delete Game2Battle_ChangeAvatar::default_instance_;
  delete Game2Battle_ChangeAvatar_reflection_;
  delete Game2Battle_ChangeRide::default_instance_;
  delete Game2Battle_ChangeRide_reflection_;
  delete Game2Battle_BornMercenary::default_instance_;
  delete Game2Battle_BornMercenary_reflection_;
  delete Game2Battle_UpdateMercenaryScript::default_instance_;
  delete Game2Battle_UpdateMercenaryScript_reflection_;
  delete Game2Battle_UpdateRideScript::default_instance_;
  delete Game2Battle_UpdateRideScript_reflection_;
  delete Game2Battle_UpdateAwakenScript::default_instance_;
  delete Game2Battle_UpdateAwakenScript_reflection_;
  delete Battle2Game_SaveMercenaryHp::default_instance_;
  delete Battle2Game_SaveMercenaryHp_reflection_;
  delete Battle2Game_UpdatePlayerStatus::default_instance_;
  delete Battle2Game_UpdatePlayerStatus_reflection_;
  delete Game2Battle_ChangeEquip::default_instance_;
  delete Game2Battle_ChangeEquip_reflection_;
  delete Game2Battle_FollowLeader::default_instance_;
  delete Game2Battle_FollowLeader_reflection_;
  delete Game2Battle_ChangeMapPendingBranch::default_instance_;
  delete Game2Battle_ChangeMapPendingBranch_reflection_;
  delete Battle2Client_ChangePet::default_instance_;
  delete Battle2Client_ChangePet_reflection_;
  delete Battle2Client_ChangeRide::default_instance_;
  delete Battle2Client_ChangeRide_reflection_;
  delete Battle2Client_ChangeAwaken::default_instance_;
  delete Battle2Client_ChangeAwaken_reflection_;
  delete Battle2Client_ChangeAvatar::default_instance_;
  delete Battle2Client_ChangeAvatar_reflection_;
  delete Battle2Client_ChangeSuit::default_instance_;
  delete Battle2Client_ChangeSuit_reflection_;
  delete Battle2Client_ReconnectUnDoTrigger::default_instance_;
  delete Battle2Client_ReconnectUnDoTrigger_reflection_;
  delete Game2Battle_UpdatePlayerValue::default_instance_;
  delete Game2Battle_UpdatePlayerValue_reflection_;
  delete Battle2Game_EnterScene::default_instance_;
  delete Battle2Game_EnterScene_reflection_;
  delete Battle2Client_EnterScene::default_instance_;
  delete Battle2Client_EnterScene_reflection_;
  delete Client2Battle_ClientLoadOK::default_instance_;
  delete Client2Battle_ClientLoadOK_reflection_;
  delete Client2Battle_SyncMove::default_instance_;
  delete Client2Battle_SyncMove_reflection_;
  delete Client2Battle_GetMapBranch::default_instance_;
  delete Client2Battle_GetMapBranch_reflection_;
  delete Client2Battle_ChangeBranch::default_instance_;
  delete Client2Battle_ChangeBranch_reflection_;
  delete Battle2Client_SyncPlayerAppear::default_instance_;
  delete Battle2Client_SyncPlayerAppear_reflection_;
  delete Battle2Client_SyncObjDisappear::default_instance_;
  delete Battle2Client_SyncObjDisappear_reflection_;
  delete OwnerInfo::default_instance_;
  delete OwnerInfo_reflection_;
  delete Battle2Client_SyncMonsterAppear::default_instance_;
  delete Battle2Client_SyncMonsterAppear_reflection_;
  delete mercenarySkillCD::default_instance_;
  delete mercenarySkillCD_reflection_;
  delete Battle2Client_SyncMercenaryAppear::default_instance_;
  delete Battle2Client_SyncMercenaryAppear_reflection_;
  delete Battle2Client_SyncMove::default_instance_;
  delete Battle2Client_SyncMove_reflection_;
  delete Client2Battle_SpeelBegin::default_instance_;
  delete Client2Battle_SpeelBegin_reflection_;
  delete Client2Battle_SpeelEnd::default_instance_;
  delete Client2Battle_SpeelEnd_reflection_;
  delete Battle2Client_SpeelBegin::default_instance_;
  delete Battle2Client_SpeelBegin_reflection_;
  delete SceneBranchInfo::default_instance_;
  delete SceneBranchInfo_reflection_;
  delete Battle2Client_GetMapBranch::default_instance_;
  delete Battle2Client_GetMapBranch_reflection_;
  delete Battle2Client_ChangeBranch::default_instance_;
  delete Battle2Client_ChangeBranch_reflection_;
  delete Client2Battle_ChangeMap::default_instance_;
  delete Client2Battle_ChangeMap_reflection_;
  delete Client2Battle_SummonMercenary::default_instance_;
  delete Client2Battle_SummonMercenary_reflection_;
  delete Battle2Client_CheckPosition::default_instance_;
  delete Battle2Client_CheckPosition_reflection_;
  delete Battle2Client_MonsterStopMove::default_instance_;
  delete Battle2Client_MonsterStopMove_reflection_;
  delete Battle2Client_TriggerEvent::default_instance_;
  delete Battle2Client_TriggerEvent_reflection_;
  delete Battle2Client_TriggerServerTips::default_instance_;
  delete Battle2Client_TriggerServerTips_reflection_;
  delete Battle2Client_ChangeTttle::default_instance_;
  delete Battle2Client_ChangeTttle_reflection_;
  delete Battle2Client_ChangeEquip::default_instance_;
  delete Battle2Client_ChangeEquip_reflection_;
  delete Battle2Client_ClientLoadOK::default_instance_;
  delete Battle2Client_ClientLoadOK_reflection_;
  delete Client2Battle__TriggerEvent::default_instance_;
  delete Client2Battle__TriggerEvent_reflection_;
  delete Battle2Game_AddDropItem::default_instance_;
  delete Battle2Game_AddDropItem_reflection_;
  delete Battle2Game_DungeonResult::default_instance_;
  delete Battle2Game_DungeonResult_reflection_;
  delete GameToBattle_PlayerDisconnect::default_instance_;
  delete GameToBattle_PlayerDisconnect_reflection_;
  delete Battle2Game_SyncMove::default_instance_;
  delete Battle2Game_SyncMove_reflection_;
  delete Battle2Game_UpdateQuest::default_instance_;
  delete Battle2Game_UpdateQuest_reflection_;
  delete Battle2Game_TriggerQuest::default_instance_;
  delete Battle2Game_TriggerQuest_reflection_;
  delete Battle2Game_MonsterDie::default_instance_;
  delete Battle2Game_MonsterDie_reflection_;
  delete Battle2Game_LeaveDungeon::default_instance_;
  delete Battle2Game_LeaveDungeon_reflection_;
  delete Battle2Game_ChangeMapForceAwakenOff::default_instance_;
  delete Battle2Game_ChangeMapForceAwakenOff_reflection_;
  delete Battle2Game_DieToChangeAwakenAndRide::default_instance_;
  delete Battle2Game_DieToChangeAwakenAndRide_reflection_;
  delete Battle2Game_SceneLoadOk::default_instance_;
  delete Battle2Game_SceneLoadOk_reflection_;
  delete Battle2Game_MercenaryDieInfo::default_instance_;
  delete Battle2Game_MercenaryDieInfo_reflection_;
  delete Game2Battle_CheckTrigger::default_instance_;
  delete Game2Battle_CheckTrigger_reflection_;
  delete Game2Battle_AddQuestTrigger::default_instance_;
  delete Game2Battle_AddQuestTrigger_reflection_;
  delete Game2Battle_UpdateTask::default_instance_;
  delete Game2Battle_UpdateTask_reflection_;
  delete Game2Battle_QuestNPCAddBuff::default_instance_;
  delete Game2Battle_QuestNPCAddBuff_reflection_;
  delete Client2Battle_GameStoryStart::default_instance_;
  delete Client2Battle_GameStoryStart_reflection_;
  delete Client2Battle_GameStoryEnd::default_instance_;
  delete Client2Battle_GameStoryEnd_reflection_;
  delete Client2Battle_NPCStopAI::default_instance_;
  delete Client2Battle_NPCStopAI_reflection_;
  delete Client2Battle_NPCActiveAI::default_instance_;
  delete Client2Battle_NPCActiveAI_reflection_;
  delete Battle2Game_DungeonLoadOk::default_instance_;
  delete Battle2Game_DungeonLoadOk_reflection_;
  delete Client2Battle_WolrdBossDorp_ItemList::default_instance_;
  delete Client2Battle_WolrdBossDorp_ItemList_reflection_;
  delete Client2Battle_WorldBoss_HurtRankList::default_instance_;
  delete Client2Battle_WorldBoss_HurtRankList_reflection_;
  delete Battle2Client_WolrdBoss_HurtRankList::default_instance_;
  delete Battle2Client_WolrdBoss_HurtRankList_reflection_;
  delete WolrdBossSaleItem::default_instance_;
  delete WolrdBossSaleItem_reflection_;
  delete Battle2Client_WolrdBoss_DorpItemList::default_instance_;
  delete Battle2Client_WolrdBoss_DorpItemList_reflection_;
  delete Battle2Client_WolrdBoss_SaleBid::default_instance_;
  delete Battle2Client_WolrdBoss_SaleBid_reflection_;
  delete Battle2Client_WolrdBoss_SaleResult::default_instance_;
  delete Battle2Client_WolrdBoss_SaleResult_reflection_;
  delete Battle2Game_WolrdBoss_SaleResult::default_instance_;
  delete Battle2Game_WolrdBoss_SaleResult_reflection_;
  delete Battle2Game_SendMail::default_instance_;
  delete Battle2Game_SendMail_reflection_;
  delete Battle2Game_WolrdBoss_HpChange::default_instance_;
  delete Battle2Game_WolrdBoss_HpChange_reflection_;
  delete Battle2Client_WolrdBoss_HpChange::default_instance_;
  delete Battle2Client_WolrdBoss_HpChange_reflection_;
  delete Game2Battle_AddCurHp::default_instance_;
  delete Game2Battle_AddCurHp_reflection_;
  delete Game2Battle_AddBuff::default_instance_;
  delete Game2Battle_AddBuff_reflection_;
  delete Client2Battle_WorldBoss_SaledItem::default_instance_;
  delete Client2Battle_WorldBoss_SaledItem_reflection_;
  delete Battle2Client_WorldBoss_SaledItem::default_instance_;
  delete Battle2Client_WorldBoss_SaledItem_reflection_;
  delete Battle2Client_SyncDropItemAppear::default_instance_;
  delete Battle2Client_SyncDropItemAppear_reflection_;
  delete Battle2Client_TicketBoss_DropItem::default_instance_;
  delete Battle2Client_TicketBoss_DropItem_reflection_;
  delete Battle2Client_SyncDropItemChange::default_instance_;
  delete Battle2Client_SyncDropItemChange_reflection_;
  delete Client2Battle_Ping::default_instance_;
  delete Client2Battle_Ping_reflection_;
  delete Battle2Client_Ping::default_instance_;
  delete Battle2Client_Ping_reflection_;
  delete Game2Battle_CreateMonster::default_instance_;
  delete Game2Battle_CreateMonster_reflection_;
  delete Client2Battle_ChangeAttackMode::default_instance_;
  delete Client2Battle_ChangeAttackMode_reflection_;
  delete Client2Battle_Transfer::default_instance_;
  delete Client2Battle_Transfer_reflection_;
  delete Battle2Client_Anchor::default_instance_;
  delete Battle2Client_Anchor_reflection_;
  delete Battle2Client_UpdateHeadInfo::default_instance_;
  delete Battle2Client_UpdateHeadInfo_reflection_;
  delete Battle2Client_UpdateMercenaryRank::default_instance_;
  delete Battle2Client_UpdateMercenaryRank_reflection_;
  delete Battle2Client_TriggerRadius::default_instance_;
  delete Battle2Client_TriggerRadius_reflection_;
  delete Battle2Client_ScenePlayerNum::default_instance_;
  delete Battle2Client_ScenePlayerNum_reflection_;
  delete Battle2Client_GradeDataChanged::default_instance_;
  delete Battle2Client_GradeDataChanged_reflection_;
  delete Battle2Client_SyncMonsterOnwer::default_instance_;
  delete Battle2Client_SyncMonsterOnwer_reflection_;
  delete Battle2Client_SafeAreaStatus::default_instance_;
  delete Battle2Client_SafeAreaStatus_reflection_;
  delete Battle2Client_ServerMove::default_instance_;
  delete Battle2Client_ServerMove_reflection_;
  delete Battle2Client_PlayerDie::default_instance_;
  delete Battle2Client_PlayerDie_reflection_;
  delete Battle2Client_MonsterCountChanged::default_instance_;
  delete Battle2Client_MonsterCountChanged_reflection_;
  delete Battle2Client_AckTBPlayerInfo::default_instance_;
  delete Battle2Client_AckTBPlayerInfo_reflection_;
  delete Battle2Client_SyncSceneObjDisappear::default_instance_;
  delete Battle2Client_SyncSceneObjDisappear_reflection_;
  delete Battle2Client_SyncSceneObjAppear::default_instance_;
  delete Battle2Client_SyncSceneObjAppear_reflection_;
}

void protobuf_AddDesc_battle_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::message::protobuf_AddDesc_common_2eproto();
  ::proto::message::protobuf_AddDesc_item_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014battle.proto\022\rproto.message\032\014common.pr"
    "oto\032\nitem.proto\"D\n\020SyncBattleObjAtt\022\r\n\005o"
    "bjid\030\001 \001(\r\022\017\n\007atttype\030\002 \003(\r\022\020\n\010attvalue\030"
    "\003 \003(\004\"H\n\027Battle2Match_ServerInfo\022\014\n\004szIp"
    "\030\001 \001(\t\022\016\n\006uiPort\030\002 \002(\r\022\017\n\007uiMapId\030\003 \003(\r\""
    "\234\002\n\026Game2Battle_EnterScene\022\r\n\005mapid\030\001 \002("
    "\005\022\"\n\002pt\030\002 \002(\0132\026.proto.message.Point3D\022\013\n"
    "\003dir\030\003 \002(\002\022\r\n\005layer\030\004 \002(\005\0221\n\010sPlyInfo\030\005 "
    "\002(\0132\037.proto.message.BattlePlayerInfo\0220\n\t"
    "sBoatInfo\030\006 \001(\0132\035.proto.message.BattleBo"
    "atInfo\022\016\n\006combat\030\007 \001(\005\022*\n\006tbinfo\030\010 \001(\0132\032"
    ".proto.message.TBFieldInfo\022\022\n\nisbackline"
    "\030\t \001(\010\"f\n\025Game2Battle_ChangeMap\022\r\n\005mapid"
    "\030\001 \002(\005\022\"\n\002pt\030\002 \002(\0132\026.proto.message.Point"
    "3D\022\013\n\003dir\030\003 \002(\002\022\r\n\005layer\030\004 \002(\005\"Z\n\027Game2B"
    "attle_ChangeTttle\022\013\n\003nId\030\001 \002(\r\022\017\n\007titleI"
    "D\030\002 \002(\005\022\021\n\ttitlename\030\003 \001(\t\022\016\n\006ishide\030\004 \001"
    "(\005\"Y\n\030Game2Battle_ChangeAwaken\022\013\n\003nId\030\001 "
    "\002(\r\022\020\n\010awakenID\030\002 \002(\005\022\016\n\006status\030\003 \002(\010\022\016\n"
    "\006isDead\030\004 \002(\010\"D\n\025Game2Battle_ChangePet\022\013"
    "\n\003nId\030\001 \002(\r\022\r\n\005petID\030\002 \002(\005\022\017\n\007ranking\030\003 "
    "\001(\005\",\n\032Game2Battle_UpdateMyCombat\022\016\n\006com"
    "bat\030\001 \002(\r\"J\n\030Game2Battle_ChangeAvatar\022\013\n"
    "\003nId\030\001 \002(\r\022\020\n\010avatarID\030\002 \002(\005\022\017\n\007colorID\030"
    "\003 \002(\005\"U\n\026Game2Battle_ChangeRide\022\013\n\003nId\030\001"
    " \002(\r\022\016\n\006RideID\030\002 \002(\005\022\016\n\006status\030\003 \002(\010\022\016\n\006"
    "isDead\030\004 \002(\010\"H\n\031Game2Battle_BornMercenar"
    "y\022\013\n\003nId\030\001 \002(\r\022\r\n\005hpper\030\002 \001(\r\022\017\n\007ranking"
    "\030\003 \001(\r\"3\n!Game2Battle_UpdateMercenaryScr"
    "ipt\022\016\n\006script\030\001 \003(\r\".\n\034Game2Battle_Updat"
    "eRideScript\022\016\n\006script\030\001 \003(\r\"0\n\036Game2Batt"
    "le_UpdateAwakenScript\022\016\n\006script\030\001 \003(\r\"9\n"
    "\033Battle2Game_SaveMercenaryHp\022\013\n\003nId\030\001 \002("
    "\r\022\r\n\005hpper\030\002 \001(\r\"0\n\036Battle2Game_UpdatePl"
    "ayerStatus\022\016\n\006status\030\001 \001(\004\"P\n\027Game2Battl"
    "e_ChangeEquip\022\013\n\003nId\030\001 \002(\r\022(\n\nequip_list"
    "\030\002 \003(\0132\024.proto.message.Equip\"\'\n\030Game2Bat"
    "tle_FollowLeader\022\013\n\003nId\030\001 \002(\004\"1\n\"Game2Ba"
    "ttle_ChangeMapPendingBranch\022\013\n\003nId\030\001 \002(\004"
    "\"F\n\027Battle2Client_ChangePet\022\013\n\003nId\030\001 \002(\r"
    "\022\r\n\005petid\030\002 \002(\r\022\017\n\007ranking\030\003 \001(\005\"G\n\030Batt"
    "le2Client_ChangeRide\022\013\n\003nId\030\001 \002(\r\022\016\n\006rid"
    "eid\030\002 \002(\r\022\016\n\006status\030\003 \002(\010\"K\n\032Battle2Clie"
    "nt_ChangeAwaken\022\013\n\003nId\030\001 \002(\r\022\020\n\010awakenid"
    "\030\002 \002(\r\022\016\n\006status\030\003 \002(\010\"L\n\032Battle2Client_"
    "ChangeAvatar\022\013\n\003nId\030\001 \002(\r\022\020\n\010avatarid\030\002 "
    "\002(\r\022\017\n\007colorid\030\003 \002(\r\"7\n\030Battle2Client_Ch"
    "angeSuit\022\013\n\003nId\030\001 \002(\r\022\016\n\006suitid\030\002 \002(\r\"7\n"
    "\"Battle2Client_ReconnectUnDoTrigger\022\021\n\tt"
    "riggerid\030\001 \003(\005\"_\n\035Game2Battle_UpdatePlay"
    "erValue\022\014\n\004type\030\001 \002(\r\022\016\n\006iValue\030\002 \001(\005\022\017\n"
    "\007llValue\030\003 \001(\003\022\017\n\007szValue\030\004 \001(\t\"\201\001\n\026Batt"
    "le2Game_EnterScene\022\r\n\005mapid\030\001 \002(\005\022\"\n\002pt\030"
    "\002 \002(\0132\026.proto.message.Point3D\022\013\n\003dir\030\003 \002"
    "(\002\022\r\n\005layer\030\004 \002(\005\022\n\n\002ip\030\005 \001(\t\022\014\n\004port\030\006 "
    "\001(\005\"i\n\030Battle2Client_EnterScene\022\r\n\005mapid"
    "\030\001 \002(\005\022\"\n\002pt\030\002 \002(\0132\026.proto.message.Point"
    "3D\022\013\n\003dir\030\003 \002(\002\022\r\n\005layer\030\004 \002(\005\"E\n\032Client"
    "2Battle_ClientLoadOK\022\014\n\004uuid\030\001 \002(\004\022\031\n\021du"
    "ngeon_assign_id\030\002 \001(\r\"z\n\026Client2Battle_S"
    "yncMove\022\"\n\002pt\030\001 \002(\0132\026.proto.message.Poin"
    "t3D\022\013\n\003dir\030\002 \002(\002\022\017\n\007arrival\030\003 \001(\005\022\017\n\007obj"
    "Type\030\004 \001(\005\022\r\n\005speed\030\005 \001(\002\"\034\n\032Client2Batt"
    "le_GetMapBranch\".\n\032Client2Battle_ChangeB"
    "ranch\022\020\n\010BranchId\030\001 \002(\005\"\313\001\n\036Battle2Clien"
    "t_SyncPlayerAppear\022\017\n\007uiObjId\030\001 \002(\r\022\016\n\006u"
    "iType\030\002 \002(\r\0221\n\010sPlyInfo\030\003 \002(\0132\037.proto.me"
    "ssage.BattlePlayerInfo\0220\n\tsBoatInfo\030\004 \001("
    "\0132\035.proto.message.BattleBoatInfo\022\016\n\006Stat"
    "us\030\005 \001(\004\022\023\n\013attack_mode\030\006 \001(\r\"D\n\036Battle2"
    "Client_SyncObjDisappear\022\017\n\007uiObjId\030\001 \002(\r"
    "\022\021\n\tuiObjType\030\002 \002(\r\"Y\n\tOwnerInfo\022\020\n\010play"
    "erid\030\001 \001(\004\022\014\n\004name\030\002 \001(\t\022\016\n\006career\030\003 \001(\r"
    "\022\r\n\005level\030\004 \001(\r\022\r\n\005dhlev\030\005 \001(\r\"\305\002\n\037Battl"
    "e2Client_SyncMonsterAppear\022\n\n\002ID\030\001 \002(\r\022\r"
    "\n\005ProID\030\002 \002(\r\022\"\n\002pt\030\003 \002(\0132\026.proto.messag"
    "e.Point3D\022\013\n\003dir\030\004 \002(\002\022\020\n\010Velocity\030\005 \001(\005"
    "\022\r\n\005MaxHP\030\006 \001(\003\022\r\n\005CurHP\030\007 \001(\003\022\016\n\006max_tp"
    "\030\010 \001(\005\022\016\n\006cur_tp\030\t \001(\005\022\014\n\004cmap\030\n \001(\005\022\r\n\005"
    "layer\030\013 \001(\005\0220\n\tsBoatInfo\030\014 \001(\0132\035.proto.m"
    "essage.BattleBoatInfo\022\016\n\006Status\030\r \001(\004\022\'\n"
    "\005owner\030\016 \001(\0132\030.proto.message.OwnerInfo\"1"
    "\n\020mercenarySkillCD\022\020\n\010nskillID\030\001 \002(\005\022\013\n\003"
    "nCD\030\002 \002(\005\"\275\001\n!Battle2Client_SyncMercenar"
    "yAppear\022\017\n\007uiObjId\030\001 \002(\r\022\016\n\006uiType\030\002 \002(\r"
    "\022\021\n\tlordObjId\030\003 \002(\r\0224\n\010sMerInfo\030\004 \002(\0132\"."
    "proto.message.BattleMercenaryInfo\022.\n\005mer"
    "CD\030\005 \003(\0132\037.proto.message.mercenarySkillC"
    "D\"\241\001\n\026Battle2Client_SyncMove\022\017\n\007uiObjId\030"
    "\001 \002(\r\022\"\n\002pt\030\002 \002(\0132\026.proto.message.Point3"
    "D\022\013\n\003dir\030\003 \002(\002\022\020\n\010velocity\030\004 \002(\002\022\017\n\007arri"
    "val\030\005 \001(\005\022\017\n\007objType\030\006 \001(\005\022\021\n\ttimestamp\030"
    "\007 \001(\004\"Q\n\030Client2Battle_SpeelBegin\022\r\n\005Lay"
    "er\030\001 \002(\r\022\021\n\tTriggerId\030\002 \001(\005\022\023\n\013TriggerTy"
    "pe\030\003 \001(\r\"<\n\026Client2Battle_SpeelEnd\022\"\n\002pt"
    "\030\001 \002(\0132\026.proto.message.Point3D\"`\n\030Battle"
    "2Client_SpeelBegin\022\r\n\005PlyId\030\001 \002(\r\022\r\n\005Lay"
    "er\030\002 \002(\r\022\021\n\tTriggerId\030\003 \001(\005\022\023\n\013TriggerTy"
    "pe\030\004 \001(\r\"N\n\017SceneBranchInfo\022\020\n\010BranchId\030"
    "\001 \002(\005\022\021\n\tPlayerNum\030\002 \002(\005\022\026\n\016DisplyBranch"
    "Id\030\003 \001(\005\"Q\n\032Battle2Client_GetMapBranch\0223"
    "\n\013branch_list\030\001 \003(\0132\036.proto.message.Scen"
    "eBranchInfo\"(\n\032Battle2Client_ChangeBranc"
    "h\022\n\n\002rt\030\001 \002(\005\"*\n\027Client2Battle_ChangeMap"
    "\022\017\n\007uiMapId\030\001 \002(\r\"\037\n\035Client2Battle_Summo"
    "nMercenary\"[\n\033Battle2Client_CheckPositio"
    "n\022\013\n\003nId\030\001 \002(\r\022\"\n\002pt\030\002 \002(\0132\026.proto.messa"
    "ge.Point3D\022\013\n\003dir\030\003 \002(\002\"]\n\035Battle2Client"
    "_MonsterStopMove\022\013\n\003nId\030\001 \002(\r\022\"\n\002pt\030\002 \002("
    "\0132\026.proto.message.Point3D\022\013\n\003dir\030\003 \002(\002\"S"
    "\n\032Battle2Client_TriggerEvent\022\r\n\005PlyId\030\001 "
    "\002(\r\022\023\n\013TriggerType\030\002 \002(\r\022\021\n\tTriggerId\030\003 "
    "\002(\r\"D\n\037Battle2Client_TriggerServerTips\022\024"
    "\n\014ServerTipsId\030\001 \001(\r\022\013\n\003arg\030\002 \003(\t\"\\\n\031Bat"
    "tle2Client_ChangeTttle\022\013\n\003nId\030\001 \002(\r\022\017\n\007t"
    "itleID\030\002 \002(\005\022\021\n\ttitlename\030\003 \001(\t\022\016\n\006ishid"
    "e\030\004 \001(\005\"R\n\031Battle2Client_ChangeEquip\022\013\n\003"
    "nId\030\001 \002(\r\022(\n\nequip_list\030\002 \003(\0132\024.proto.me"
    "ssage.Equip\"i\n\032Battle2Client_ClientLoadO"
    "K\022\016\n\006Branch\030\001 \001(\005\022\020\n\010initTime\030\002 \001(\005\022\026\n\016D"
    "isplyBranchId\030\003 \001(\005\022\021\n\treliveNum\030\004 \001(\005\"E"
    "\n\033Client2Battle__TriggerEvent\022\023\n\013Trigger"
    "Type\030\001 \002(\r\022\021\n\tTriggerId\030\002 \002(\r\"j\n\027Battle2"
    "Game_AddDropItem\022\020\n\010uiGetWay\030\001 \002(\r\022)\n\013ve"
    "cItemList\030\002 \003(\0132\024.proto.message.IDNum\022\022\n"
    "\nuiSendTips\030\003 \002(\r\"\333\001\n\031Battle2Game_Dungeo"
    "nResult\022\017\n\007uiProId\030\001 \002(\r\022\020\n\010uiResult\030\002 \002"
    "(\r\022\017\n\007uiGrade\030\003 \001(\r\022\022\n\nuiPassTime\030\004 \001(\r\022"
    "\024\n\014uiBeAttTimes\030\005 \001(\r\022\022\n\nuiRemainHP\030\006 \001("
    "\r\022\017\n\007uiNPCHP\030\007 \001(\r\022\022\n\nuiDieTimes\030\010 \001(\r\022\024"
    "\n\014uiNotComTask\030\t \001(\r\022\021\n\tuleaderid\030\n \001(\004\""
    "5\n\035GameToBattle_PlayerDisconnect\022\024\n\014uiBa"
    "ckOnline\030\001 \001(\r\"{\n\024Battle2Game_SyncMove\022\021"
    "\n\tuiSceneId\030\001 \002(\r\022\"\n\002pt\030\002 \002(\0132\026.proto.me"
    "ssage.Point3D\022\013\n\003dir\030\003 \002(\002\022\r\n\005layer\030\004 \002("
    "\r\022\020\n\010branchid\030\005 \001(\r\"Q\n\027Battle2Game_Updat"
    "eQuest\022\023\n\013uiQuestType\030\001 \002(\r\022\022\n\nuiTargetI"
    "d\030\002 \002(\r\022\r\n\005uiArg\030\003 \002(\r\"B\n\030Battle2Game_Tr"
    "iggerQuest\022\021\n\tuiQuestId\030\001 \002(\r\022\023\n\013uiQuest"
    "Type\030\002 \002(\r\"l\n\026Battle2Game_MonsterDie\022\026\n\016"
    "uiMonsterProId\030\001 \002(\r\022\026\n\016uiMonsterObjId\030\002"
    " \002(\r\022\"\n\002pt\030\003 \002(\0132\026.proto.message.Point3D"
    "\":\n\030Battle2Game_LeaveDungeon\022\r\n\005uiEnd\030\001 "
    "\002(\r\022\017\n\007uiAgain\030\002 \002(\r\"%\n#Battle2Game_Chan"
    "geMapForceAwakenOff\"&\n$Battle2Game_DieTo"
    "ChangeAwakenAndRide\"\031\n\027Battle2Game_Scene"
    "LoadOk\"3\n\034Battle2Game_MercenaryDieInfo\022\023"
    "\n\013uiMercenary\030\001 \002(\r\";\n\030Game2Battle_Check"
    "Trigger\022\016\n\006uiType\030\001 \002(\r\022\017\n\007uiValue\030\002 \002(\r"
    "\"x\n\033Game2Battle_AddQuestTrigger\022\021\n\tuiQue"
    "stId\030\001 \002(\r\022\031\n\021uiQuestTargetType\030\002 \002(\r\022\023\n"
    "\013uiTriggerId\030\003 \002(\r\022\026\n\016uiTriggerNPCId\030\004 \002"
    "(\r\"7\n\026Game2Battle_UpdateTask\022\014\n\004uiId\030\001 \002"
    "(\r\022\017\n\007uiValue\030\002 \002(\r\"D\n\033Game2Battle_Quest"
    "NPCAddBuff\022\025\n\rnTriggerNPCId\030\001 \002(\r\022\016\n\006uiT"
    "ype\030\002 \002(\r\"B\n\034Client2Battle_GameStoryStar"
    "t\022\023\n\013GameStoryID\030\001 \002(\r\022\r\n\005NPCID\030\002 \001(\r\"@\n"
    "\032Client2Battle_GameStoryEnd\022\023\n\013GameStory"
    "ID\030\001 \002(\r\022\r\n\005NPCID\030\002 \001(\r\"(\n\027Client2Battle"
    "_NPCStopAI\022\r\n\005NPCID\030\001 \001(\r\"*\n\031Client2Batt"
    "le_NPCActiveAI\022\r\n\005NPCID\030\001 \001(\r\",\n\031Battle2"
    "Game_DungeonLoadOk\022\017\n\007uiProId\030\001 \002(\r\"Q\n$C"
    "lient2Battle_WolrdBossDorp_ItemList\022)\n\013v"
    "ecItemList\030\001 \003(\0132\024.proto.message.IDNum\"Q"
    "\n$Client2Battle_WorldBoss_HurtRankList\022\022"
    "\n\nuiBossType\030\001 \002(\r\022\025\n\ruiBossTableId\030\002 \001("
    "\r\"\237\001\n$Battle2Client_WolrdBoss_HurtRankLi"
    "st\022\020\n\010namelist\030\001 \003(\t\022\021\n\thurttotal\030\002 \003(\004\022"
    "\025\n\rselfhurttotal\030\003 \002(\004\022\020\n\010selfrank\030\004 \002(\r"
    "\022\022\n\nuiBossType\030\005 \002(\r\022\025\n\ruiBossTableId\030\006 "
    "\001(\r\"\241\001\n\021WolrdBossSaleItem\022\017\n\007uiIndex\030\001 \002"
    "(\r\022\024\n\014uiExpiryTime\030\002 \002(\r\022\022\n\nuiShareNum\030\003"
    " \002(\r\022\024\n\014uiPlayerName\030\004 \002(\t\022\023\n\013uiPlayerJo"
    "b\030\005 \002(\r\022\025\n\ruiPlayerLevel\030\006 \002(\r\022\017\n\007uiPric"
    "e\030\007 \002(\r\"\206\001\n$Battle2Client_WolrdBoss_Dorp"
    "ItemList\022)\n\013vecItemList\030\001 \003(\0132\024.proto.me"
    "ssage.IDNum\0223\n\tsSaleItem\030\002 \002(\0132 .proto.m"
    "essage.WolrdBossSaleItem\"\233\001\n\037Battle2Clie"
    "nt_WolrdBoss_SaleBid\022\017\n\007uiIndex\030\001 \002(\r\022\024\n"
    "\014uiPlayerName\030\002 \002(\t\022\023\n\013uiPlayerJob\030\003 \002(\r"
    "\022\025\n\ruiPlayerLevel\030\004 \002(\r\022\017\n\007uiPrice\030\005 \002(\r"
    "\022\024\n\014uiExpiryTime\030\006 \001(\r\"\210\001\n\"Battle2Client"
    "_WolrdBoss_SaleResult\022\017\n\007uiIndex\030\001 \002(\r\022\024"
    "\n\014uiPlayerName\030\002 \001(\t\022\023\n\013uiPlayerJob\030\003 \001("
    "\r\022\025\n\ruiPlayerLevel\030\004 \001(\r\022\017\n\007uiPrice\030\005 \001("
    "\r\"S\n Battle2Game_WolrdBoss_SaleResult\022/\n"
    "\004item\030\001 \001(\0132!.proto.message.WolrdBossSal"
    "edItem\"\220\001\n\024Battle2Game_SendMail\022\020\n\010uiSen"
    "dTo\030\001 \002(\004\022\016\n\006uiMode\030\002 \002(\r\022\r\n\005uiArg\030\003 \002(\r"
    "\022\r\n\005szArg\030\004 \001(\t\022)\n\013vecItemList\030\005 \003(\0132\024.p"
    "roto.message.IDNum\022\r\n\005uiOpt\030\006 \001(\r\"Y\n\036Bat"
    "tle2Game_WolrdBoss_HpChange\022\022\n\nuiBossTyp"
    "e\030\001 \002(\r\022\014\n\004uiHp\030\002 \002(\004\022\025\n\ruiBossTableId\030\003"
    " \001(\r\"[\n Battle2Client_WolrdBoss_HpChange"
    "\022\022\n\nuiBossType\030\001 \002(\r\022\014\n\004uiHp\030\002 \002(\004\022\025\n\rui"
    "BossTableId\030\003 \001(\r\"$\n\024Game2Battle_AddCurH"
    "p\022\014\n\004uiHp\030\001 \002(\r\":\n\023Game2Battle_AddBuff\022\020"
    "\n\010uiBuffId\030\001 \002(\r\022\021\n\tuiQuality\030\002 \002(\r\"4\n!C"
    "lient2Battle_WorldBoss_SaledItem\022\017\n\007uiIn"
    "dex\030\001 \001(\r\"T\n!Battle2Client_WorldBoss_Sal"
    "edItem\022/\n\005sItem\030\001 \001(\0132 .proto.message.Wo"
    "lrdBossSaleItem\"\261\001\n Battle2Client_SyncDr"
    "opItemAppear\022\017\n\007uiObjId\030\001 \002(\r\022\016\n\006uiType\030"
    "\002 \002(\r\022\"\n\002pt\030\003 \002(\0132\026.proto.message.Point3"
    "D\022\'\n\tvecItemId\030\004 \003(\0132\024.proto.message.IDN"
    "um\022\021\n\tuiOwnerId\030\005 \002(\004\022\014\n\004name\030\006 \001(\t\"\200\001\n!"
    "Battle2Client_TicketBoss_DropItem\022\025\n\ruiB"
    "ossTableId\030\001 \002(\r\022D\n\013vecItemList\030\002 \003(\0132/."
    "proto.message.Battle2Client_SyncDropItem"
    "Appear\"o\n Battle2Client_SyncDropItemChan"
    "ge\022\017\n\007uiObjId\030\001 \002(\r\022\022\n\niItemIndex\030\002 \002(\005\022"
    "\021\n\tuiOwnerId\030\003 \002(\004\022\023\n\013uiTakeObjId\030\004 \002(\r\""
    "\024\n\022Client2Battle_Ping\"\'\n\022Battle2Client_P"
    "ing\022\021\n\ttimestamp\030\001 \001(\004\"x\n\031Game2Battle_Cr"
    "eateMonster\022\r\n\005ProID\030\001 \001(\r\022\"\n\002pt\030\002 \001(\0132\026"
    ".proto.message.Point3D\022\013\n\003dir\030\003 \001(\002\022\r\n\005l"
    "ayer\030\004 \001(\005\022\014\n\004from\030\005 \001(\005\"6\n\036Client2Battl"
    "e_ChangeAttackMode\022\024\n\014uiAttackMode\030\001 \001(\r"
    "\"3\n\026Client2Battle_Transfer\022\031\n\021uiTransfer"
    "TableId\030\001 \001(\r\"\'\n\024Battle2Client_Anchor\022\017\n"
    "\007uiObjId\030\001 \002(\r\"Q\n\034Battle2Client_UpdateHe"
    "adInfo\0221\n\004info\030\001 \001(\0132#.proto.message.Bat"
    "tleSingleHeadInfo\"E\n!Battle2Client_Updat"
    "eMercenaryRank\022\017\n\007uiObjId\030\001 \002(\r\022\017\n\007ranki"
    "ng\030\002 \001(\005\"g\n\033Battle2Client_TriggerRadius\022"
    "\023\n\013uiTriggerId\030\001 \001(\r\022\"\n\002pt\030\002 \001(\0132\026.proto"
    ".message.Point3D\022\017\n\007fRadius\030\003 \001(\002\"U\n\034Bat"
    "tle2Client_ScenePlayerNum\022\021\n\tuiSceneId\030\001"
    " \001(\r\022\020\n\010uiCurNum\030\002 \001(\r\022\020\n\010uiMaxNum\030\003 \001(\r"
    "\"S\n\036Battle2Client_GradeDataChanged\022\r\n\005gr"
    "ade\030\001 \002(\005\022\"\n\004data\030\002 \001(\0132\024.proto.message."
    "IDNum\"\\\n\036Battle2Client_SyncMonsterOnwer\022"
    "\021\n\tmonsterid\030\001 \001(\r\022\'\n\005owner\030\002 \001(\0132\030.prot"
    "o.message.OwnerInfo\".\n\034Battle2Client_Saf"
    "eAreaStatus\022\016\n\006status\030\001 \001(\r\"Z\n\030Battle2Cl"
    "ient_ServerMove\022\"\n\002pt\030\001 \002(\0132\026.proto.mess"
    "age.Point3D\022\013\n\003dir\030\002 \002(\002\022\r\n\005speed\030\003 \001(\002\""
    "-\n\027Battle2Client_PlayerDie\022\022\n\nkillerName"
    "\030\001 \001(\t\"Z\n!Battle2Client_MonsterCountChan"
    "ged\022\r\n\005count\030\001 \002(\r\022&\n\010monsters\030\002 \003(\0132\024.p"
    "roto.message.IDNum\"O\n\035Battle2Client_AckT"
    "BPlayerInfo\022\n\n\002id\030\001 \001(\r\022\020\n\010jointime\030\002 \001("
    "\r\022\020\n\010overtime\030\003 \001(\r\"b\n#Battle2Client_Syn"
    "cSceneObjDisappear\022;\n\004objs\030\001 \003(\0132-.proto"
    ".message.Battle2Client_SyncObjDisappear\""
    "\257\002\n Battle2Client_SyncSceneObjAppear\022@\n\010"
    "monsters\030\001 \003(\0132..proto.message.Battle2Cl"
    "ient_SyncMonsterAppear\022>\n\007players\030\002 \003(\0132"
    "-.proto.message.Battle2Client_SyncPlayer"
    "Appear\022C\n\ndrop_items\030\003 \003(\0132/.proto.messa"
    "ge.Battle2Client_SyncDropItemAppear\022D\n\nm"
    "ercenarys\030\004 \003(\01320.proto.message.Battle2C"
    "lient_SyncMercenaryAppear*\257\001\n\033Battle2Cli"
    "ent_GradeDataType\022\033\n\027Dungeon_Grade_Data_"
    "Time\020\000\022\033\n\027Dungeon_Grade_Data_Hurt\020\001\022\031\n\025D"
    "ungeon_Grade_Data_Hp\020\002\022\035\n\031Dungeon_Grade_"
    "Data_Npc_Hp\020\003\022\034\n\030Dungeon_Grade_Data_Deat"
    "h\020\004B\017\n\rproto.message", 10300);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "battle.proto", &protobuf_RegisterTypes);
  SyncBattleObjAtt::default_instance_ = new SyncBattleObjAtt();
  Battle2Match_ServerInfo::default_instance_ = new Battle2Match_ServerInfo();
  Game2Battle_EnterScene::default_instance_ = new Game2Battle_EnterScene();
  Game2Battle_ChangeMap::default_instance_ = new Game2Battle_ChangeMap();
  Game2Battle_ChangeTttle::default_instance_ = new Game2Battle_ChangeTttle();
  Game2Battle_ChangeAwaken::default_instance_ = new Game2Battle_ChangeAwaken();
  Game2Battle_ChangePet::default_instance_ = new Game2Battle_ChangePet();
  Game2Battle_UpdateMyCombat::default_instance_ = new Game2Battle_UpdateMyCombat();
  Game2Battle_ChangeAvatar::default_instance_ = new Game2Battle_ChangeAvatar();
  Game2Battle_ChangeRide::default_instance_ = new Game2Battle_ChangeRide();
  Game2Battle_BornMercenary::default_instance_ = new Game2Battle_BornMercenary();
  Game2Battle_UpdateMercenaryScript::default_instance_ = new Game2Battle_UpdateMercenaryScript();
  Game2Battle_UpdateRideScript::default_instance_ = new Game2Battle_UpdateRideScript();
  Game2Battle_UpdateAwakenScript::default_instance_ = new Game2Battle_UpdateAwakenScript();
  Battle2Game_SaveMercenaryHp::default_instance_ = new Battle2Game_SaveMercenaryHp();
  Battle2Game_UpdatePlayerStatus::default_instance_ = new Battle2Game_UpdatePlayerStatus();
  Game2Battle_ChangeEquip::default_instance_ = new Game2Battle_ChangeEquip();
  Game2Battle_FollowLeader::default_instance_ = new Game2Battle_FollowLeader();
  Game2Battle_ChangeMapPendingBranch::default_instance_ = new Game2Battle_ChangeMapPendingBranch();
  Battle2Client_ChangePet::default_instance_ = new Battle2Client_ChangePet();
  Battle2Client_ChangeRide::default_instance_ = new Battle2Client_ChangeRide();
  Battle2Client_ChangeAwaken::default_instance_ = new Battle2Client_ChangeAwaken();
  Battle2Client_ChangeAvatar::default_instance_ = new Battle2Client_ChangeAvatar();
  Battle2Client_ChangeSuit::default_instance_ = new Battle2Client_ChangeSuit();
  Battle2Client_ReconnectUnDoTrigger::default_instance_ = new Battle2Client_ReconnectUnDoTrigger();
  Game2Battle_UpdatePlayerValue::default_instance_ = new Game2Battle_UpdatePlayerValue();
  Battle2Game_EnterScene::default_instance_ = new Battle2Game_EnterScene();
  Battle2Client_EnterScene::default_instance_ = new Battle2Client_EnterScene();
  Client2Battle_ClientLoadOK::default_instance_ = new Client2Battle_ClientLoadOK();
  Client2Battle_SyncMove::default_instance_ = new Client2Battle_SyncMove();
  Client2Battle_GetMapBranch::default_instance_ = new Client2Battle_GetMapBranch();
  Client2Battle_ChangeBranch::default_instance_ = new Client2Battle_ChangeBranch();
  Battle2Client_SyncPlayerAppear::default_instance_ = new Battle2Client_SyncPlayerAppear();
  Battle2Client_SyncObjDisappear::default_instance_ = new Battle2Client_SyncObjDisappear();
  OwnerInfo::default_instance_ = new OwnerInfo();
  Battle2Client_SyncMonsterAppear::default_instance_ = new Battle2Client_SyncMonsterAppear();
  mercenarySkillCD::default_instance_ = new mercenarySkillCD();
  Battle2Client_SyncMercenaryAppear::default_instance_ = new Battle2Client_SyncMercenaryAppear();
  Battle2Client_SyncMove::default_instance_ = new Battle2Client_SyncMove();
  Client2Battle_SpeelBegin::default_instance_ = new Client2Battle_SpeelBegin();
  Client2Battle_SpeelEnd::default_instance_ = new Client2Battle_SpeelEnd();
  Battle2Client_SpeelBegin::default_instance_ = new Battle2Client_SpeelBegin();
  SceneBranchInfo::default_instance_ = new SceneBranchInfo();
  Battle2Client_GetMapBranch::default_instance_ = new Battle2Client_GetMapBranch();
  Battle2Client_ChangeBranch::default_instance_ = new Battle2Client_ChangeBranch();
  Client2Battle_ChangeMap::default_instance_ = new Client2Battle_ChangeMap();
  Client2Battle_SummonMercenary::default_instance_ = new Client2Battle_SummonMercenary();
  Battle2Client_CheckPosition::default_instance_ = new Battle2Client_CheckPosition();
  Battle2Client_MonsterStopMove::default_instance_ = new Battle2Client_MonsterStopMove();
  Battle2Client_TriggerEvent::default_instance_ = new Battle2Client_TriggerEvent();
  Battle2Client_TriggerServerTips::default_instance_ = new Battle2Client_TriggerServerTips();
  Battle2Client_ChangeTttle::default_instance_ = new Battle2Client_ChangeTttle();
  Battle2Client_ChangeEquip::default_instance_ = new Battle2Client_ChangeEquip();
  Battle2Client_ClientLoadOK::default_instance_ = new Battle2Client_ClientLoadOK();
  Client2Battle__TriggerEvent::default_instance_ = new Client2Battle__TriggerEvent();
  Battle2Game_AddDropItem::default_instance_ = new Battle2Game_AddDropItem();
  Battle2Game_DungeonResult::default_instance_ = new Battle2Game_DungeonResult();
  GameToBattle_PlayerDisconnect::default_instance_ = new GameToBattle_PlayerDisconnect();
  Battle2Game_SyncMove::default_instance_ = new Battle2Game_SyncMove();
  Battle2Game_UpdateQuest::default_instance_ = new Battle2Game_UpdateQuest();
  Battle2Game_TriggerQuest::default_instance_ = new Battle2Game_TriggerQuest();
  Battle2Game_MonsterDie::default_instance_ = new Battle2Game_MonsterDie();
  Battle2Game_LeaveDungeon::default_instance_ = new Battle2Game_LeaveDungeon();
  Battle2Game_ChangeMapForceAwakenOff::default_instance_ = new Battle2Game_ChangeMapForceAwakenOff();
  Battle2Game_DieToChangeAwakenAndRide::default_instance_ = new Battle2Game_DieToChangeAwakenAndRide();
  Battle2Game_SceneLoadOk::default_instance_ = new Battle2Game_SceneLoadOk();
  Battle2Game_MercenaryDieInfo::default_instance_ = new Battle2Game_MercenaryDieInfo();
  Game2Battle_CheckTrigger::default_instance_ = new Game2Battle_CheckTrigger();
  Game2Battle_AddQuestTrigger::default_instance_ = new Game2Battle_AddQuestTrigger();
  Game2Battle_UpdateTask::default_instance_ = new Game2Battle_UpdateTask();
  Game2Battle_QuestNPCAddBuff::default_instance_ = new Game2Battle_QuestNPCAddBuff();
  Client2Battle_GameStoryStart::default_instance_ = new Client2Battle_GameStoryStart();
  Client2Battle_GameStoryEnd::default_instance_ = new Client2Battle_GameStoryEnd();
  Client2Battle_NPCStopAI::default_instance_ = new Client2Battle_NPCStopAI();
  Client2Battle_NPCActiveAI::default_instance_ = new Client2Battle_NPCActiveAI();
  Battle2Game_DungeonLoadOk::default_instance_ = new Battle2Game_DungeonLoadOk();
  Client2Battle_WolrdBossDorp_ItemList::default_instance_ = new Client2Battle_WolrdBossDorp_ItemList();
  Client2Battle_WorldBoss_HurtRankList::default_instance_ = new Client2Battle_WorldBoss_HurtRankList();
  Battle2Client_WolrdBoss_HurtRankList::default_instance_ = new Battle2Client_WolrdBoss_HurtRankList();
  WolrdBossSaleItem::default_instance_ = new WolrdBossSaleItem();
  Battle2Client_WolrdBoss_DorpItemList::default_instance_ = new Battle2Client_WolrdBoss_DorpItemList();
  Battle2Client_WolrdBoss_SaleBid::default_instance_ = new Battle2Client_WolrdBoss_SaleBid();
  Battle2Client_WolrdBoss_SaleResult::default_instance_ = new Battle2Client_WolrdBoss_SaleResult();
  Battle2Game_WolrdBoss_SaleResult::default_instance_ = new Battle2Game_WolrdBoss_SaleResult();
  Battle2Game_SendMail::default_instance_ = new Battle2Game_SendMail();
  Battle2Game_WolrdBoss_HpChange::default_instance_ = new Battle2Game_WolrdBoss_HpChange();
  Battle2Client_WolrdBoss_HpChange::default_instance_ = new Battle2Client_WolrdBoss_HpChange();
  Game2Battle_AddCurHp::default_instance_ = new Game2Battle_AddCurHp();
  Game2Battle_AddBuff::default_instance_ = new Game2Battle_AddBuff();
  Client2Battle_WorldBoss_SaledItem::default_instance_ = new Client2Battle_WorldBoss_SaledItem();
  Battle2Client_WorldBoss_SaledItem::default_instance_ = new Battle2Client_WorldBoss_SaledItem();
  Battle2Client_SyncDropItemAppear::default_instance_ = new Battle2Client_SyncDropItemAppear();
  Battle2Client_TicketBoss_DropItem::default_instance_ = new Battle2Client_TicketBoss_DropItem();
  Battle2Client_SyncDropItemChange::default_instance_ = new Battle2Client_SyncDropItemChange();
  Client2Battle_Ping::default_instance_ = new Client2Battle_Ping();
  Battle2Client_Ping::default_instance_ = new Battle2Client_Ping();
  Game2Battle_CreateMonster::default_instance_ = new Game2Battle_CreateMonster();
  Client2Battle_ChangeAttackMode::default_instance_ = new Client2Battle_ChangeAttackMode();
  Client2Battle_Transfer::default_instance_ = new Client2Battle_Transfer();
  Battle2Client_Anchor::default_instance_ = new Battle2Client_Anchor();
  Battle2Client_UpdateHeadInfo::default_instance_ = new Battle2Client_UpdateHeadInfo();
  Battle2Client_UpdateMercenaryRank::default_instance_ = new Battle2Client_UpdateMercenaryRank();
  Battle2Client_TriggerRadius::default_instance_ = new Battle2Client_TriggerRadius();
  Battle2Client_ScenePlayerNum::default_instance_ = new Battle2Client_ScenePlayerNum();
  Battle2Client_GradeDataChanged::default_instance_ = new Battle2Client_GradeDataChanged();
  Battle2Client_SyncMonsterOnwer::default_instance_ = new Battle2Client_SyncMonsterOnwer();
  Battle2Client_SafeAreaStatus::default_instance_ = new Battle2Client_SafeAreaStatus();
  Battle2Client_ServerMove::default_instance_ = new Battle2Client_ServerMove();
  Battle2Client_PlayerDie::default_instance_ = new Battle2Client_PlayerDie();
  Battle2Client_MonsterCountChanged::default_instance_ = new Battle2Client_MonsterCountChanged();
  Battle2Client_AckTBPlayerInfo::default_instance_ = new Battle2Client_AckTBPlayerInfo();
  Battle2Client_SyncSceneObjDisappear::default_instance_ = new Battle2Client_SyncSceneObjDisappear();
  Battle2Client_SyncSceneObjAppear::default_instance_ = new Battle2Client_SyncSceneObjAppear();
  SyncBattleObjAtt::default_instance_->InitAsDefaultInstance();
  Battle2Match_ServerInfo::default_instance_->InitAsDefaultInstance();
  Game2Battle_EnterScene::default_instance_->InitAsDefaultInstance();
  Game2Battle_ChangeMap::default_instance_->InitAsDefaultInstance();
  Game2Battle_ChangeTttle::default_instance_->InitAsDefaultInstance();
  Game2Battle_ChangeAwaken::default_instance_->InitAsDefaultInstance();
  Game2Battle_ChangePet::default_instance_->InitAsDefaultInstance();
  Game2Battle_UpdateMyCombat::default_instance_->InitAsDefaultInstance();
  Game2Battle_ChangeAvatar::default_instance_->InitAsDefaultInstance();
  Game2Battle_ChangeRide::default_instance_->InitAsDefaultInstance();
  Game2Battle_BornMercenary::default_instance_->InitAsDefaultInstance();
  Game2Battle_UpdateMercenaryScript::default_instance_->InitAsDefaultInstance();
  Game2Battle_UpdateRideScript::default_instance_->InitAsDefaultInstance();
  Game2Battle_UpdateAwakenScript::default_instance_->InitAsDefaultInstance();
  Battle2Game_SaveMercenaryHp::default_instance_->InitAsDefaultInstance();
  Battle2Game_UpdatePlayerStatus::default_instance_->InitAsDefaultInstance();
  Game2Battle_ChangeEquip::default_instance_->InitAsDefaultInstance();
  Game2Battle_FollowLeader::default_instance_->InitAsDefaultInstance();
  Game2Battle_ChangeMapPendingBranch::default_instance_->InitAsDefaultInstance();
  Battle2Client_ChangePet::default_instance_->InitAsDefaultInstance();
  Battle2Client_ChangeRide::default_instance_->InitAsDefaultInstance();
  Battle2Client_ChangeAwaken::default_instance_->InitAsDefaultInstance();
  Battle2Client_ChangeAvatar::default_instance_->InitAsDefaultInstance();
  Battle2Client_ChangeSuit::default_instance_->InitAsDefaultInstance();
  Battle2Client_ReconnectUnDoTrigger::default_instance_->InitAsDefaultInstance();
  Game2Battle_UpdatePlayerValue::default_instance_->InitAsDefaultInstance();
  Battle2Game_EnterScene::default_instance_->InitAsDefaultInstance();
  Battle2Client_EnterScene::default_instance_->InitAsDefaultInstance();
  Client2Battle_ClientLoadOK::default_instance_->InitAsDefaultInstance();
  Client2Battle_SyncMove::default_instance_->InitAsDefaultInstance();
  Client2Battle_GetMapBranch::default_instance_->InitAsDefaultInstance();
  Client2Battle_ChangeBranch::default_instance_->InitAsDefaultInstance();
  Battle2Client_SyncPlayerAppear::default_instance_->InitAsDefaultInstance();
  Battle2Client_SyncObjDisappear::default_instance_->InitAsDefaultInstance();
  OwnerInfo::default_instance_->InitAsDefaultInstance();
  Battle2Client_SyncMonsterAppear::default_instance_->InitAsDefaultInstance();
  mercenarySkillCD::default_instance_->InitAsDefaultInstance();
  Battle2Client_SyncMercenaryAppear::default_instance_->InitAsDefaultInstance();
  Battle2Client_SyncMove::default_instance_->InitAsDefaultInstance();
  Client2Battle_SpeelBegin::default_instance_->InitAsDefaultInstance();
  Client2Battle_SpeelEnd::default_instance_->InitAsDefaultInstance();
  Battle2Client_SpeelBegin::default_instance_->InitAsDefaultInstance();
  SceneBranchInfo::default_instance_->InitAsDefaultInstance();
  Battle2Client_GetMapBranch::default_instance_->InitAsDefaultInstance();
  Battle2Client_ChangeBranch::default_instance_->InitAsDefaultInstance();
  Client2Battle_ChangeMap::default_instance_->InitAsDefaultInstance();
  Client2Battle_SummonMercenary::default_instance_->InitAsDefaultInstance();
  Battle2Client_CheckPosition::default_instance_->InitAsDefaultInstance();
  Battle2Client_MonsterStopMove::default_instance_->InitAsDefaultInstance();
  Battle2Client_TriggerEvent::default_instance_->InitAsDefaultInstance();
  Battle2Client_TriggerServerTips::default_instance_->InitAsDefaultInstance();
  Battle2Client_ChangeTttle::default_instance_->InitAsDefaultInstance();
  Battle2Client_ChangeEquip::default_instance_->InitAsDefaultInstance();
  Battle2Client_ClientLoadOK::default_instance_->InitAsDefaultInstance();
  Client2Battle__TriggerEvent::default_instance_->InitAsDefaultInstance();
  Battle2Game_AddDropItem::default_instance_->InitAsDefaultInstance();
  Battle2Game_DungeonResult::default_instance_->InitAsDefaultInstance();
  GameToBattle_PlayerDisconnect::default_instance_->InitAsDefaultInstance();
  Battle2Game_SyncMove::default_instance_->InitAsDefaultInstance();
  Battle2Game_UpdateQuest::default_instance_->InitAsDefaultInstance();
  Battle2Game_TriggerQuest::default_instance_->InitAsDefaultInstance();
  Battle2Game_MonsterDie::default_instance_->InitAsDefaultInstance();
  Battle2Game_LeaveDungeon::default_instance_->InitAsDefaultInstance();
  Battle2Game_ChangeMapForceAwakenOff::default_instance_->InitAsDefaultInstance();
  Battle2Game_DieToChangeAwakenAndRide::default_instance_->InitAsDefaultInstance();
  Battle2Game_SceneLoadOk::default_instance_->InitAsDefaultInstance();
  Battle2Game_MercenaryDieInfo::default_instance_->InitAsDefaultInstance();
  Game2Battle_CheckTrigger::default_instance_->InitAsDefaultInstance();
  Game2Battle_AddQuestTrigger::default_instance_->InitAsDefaultInstance();
  Game2Battle_UpdateTask::default_instance_->InitAsDefaultInstance();
  Game2Battle_QuestNPCAddBuff::default_instance_->InitAsDefaultInstance();
  Client2Battle_GameStoryStart::default_instance_->InitAsDefaultInstance();
  Client2Battle_GameStoryEnd::default_instance_->InitAsDefaultInstance();
  Client2Battle_NPCStopAI::default_instance_->InitAsDefaultInstance();
  Client2Battle_NPCActiveAI::default_instance_->InitAsDefaultInstance();
  Battle2Game_DungeonLoadOk::default_instance_->InitAsDefaultInstance();
  Client2Battle_WolrdBossDorp_ItemList::default_instance_->InitAsDefaultInstance();
  Client2Battle_WorldBoss_HurtRankList::default_instance_->InitAsDefaultInstance();
  Battle2Client_WolrdBoss_HurtRankList::default_instance_->InitAsDefaultInstance();
  WolrdBossSaleItem::default_instance_->InitAsDefaultInstance();
  Battle2Client_WolrdBoss_DorpItemList::default_instance_->InitAsDefaultInstance();
  Battle2Client_WolrdBoss_SaleBid::default_instance_->InitAsDefaultInstance();
  Battle2Client_WolrdBoss_SaleResult::default_instance_->InitAsDefaultInstance();
  Battle2Game_WolrdBoss_SaleResult::default_instance_->InitAsDefaultInstance();
  Battle2Game_SendMail::default_instance_->InitAsDefaultInstance();
  Battle2Game_WolrdBoss_HpChange::default_instance_->InitAsDefaultInstance();
  Battle2Client_WolrdBoss_HpChange::default_instance_->InitAsDefaultInstance();
  Game2Battle_AddCurHp::default_instance_->InitAsDefaultInstance();
  Game2Battle_AddBuff::default_instance_->InitAsDefaultInstance();
  Client2Battle_WorldBoss_SaledItem::default_instance_->InitAsDefaultInstance();
  Battle2Client_WorldBoss_SaledItem::default_instance_->InitAsDefaultInstance();
  Battle2Client_SyncDropItemAppear::default_instance_->InitAsDefaultInstance();
  Battle2Client_TicketBoss_DropItem::default_instance_->InitAsDefaultInstance();
  Battle2Client_SyncDropItemChange::default_instance_->InitAsDefaultInstance();
  Client2Battle_Ping::default_instance_->InitAsDefaultInstance();
  Battle2Client_Ping::default_instance_->InitAsDefaultInstance();
  Game2Battle_CreateMonster::default_instance_->InitAsDefaultInstance();
  Client2Battle_ChangeAttackMode::default_instance_->InitAsDefaultInstance();
  Client2Battle_Transfer::default_instance_->InitAsDefaultInstance();
  Battle2Client_Anchor::default_instance_->InitAsDefaultInstance();
  Battle2Client_UpdateHeadInfo::default_instance_->InitAsDefaultInstance();
  Battle2Client_UpdateMercenaryRank::default_instance_->InitAsDefaultInstance();
  Battle2Client_TriggerRadius::default_instance_->InitAsDefaultInstance();
  Battle2Client_ScenePlayerNum::default_instance_->InitAsDefaultInstance();
  Battle2Client_GradeDataChanged::default_instance_->InitAsDefaultInstance();
  Battle2Client_SyncMonsterOnwer::default_instance_->InitAsDefaultInstance();
  Battle2Client_SafeAreaStatus::default_instance_->InitAsDefaultInstance();
  Battle2Client_ServerMove::default_instance_->InitAsDefaultInstance();
  Battle2Client_PlayerDie::default_instance_->InitAsDefaultInstance();
  Battle2Client_MonsterCountChanged::default_instance_->InitAsDefaultInstance();
  Battle2Client_AckTBPlayerInfo::default_instance_->InitAsDefaultInstance();
  Battle2Client_SyncSceneObjDisappear::default_instance_->InitAsDefaultInstance();
  Battle2Client_SyncSceneObjAppear::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_battle_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_battle_2eproto {
  StaticDescriptorInitializer_battle_2eproto() {
    protobuf_AddDesc_battle_2eproto();
  }
} static_descriptor_initializer_battle_2eproto_;
const ::google::protobuf::EnumDescriptor* Battle2Client_GradeDataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Client_GradeDataType_descriptor_;
}
bool Battle2Client_GradeDataType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int SyncBattleObjAtt::kObjidFieldNumber;
const int SyncBattleObjAtt::kAtttypeFieldNumber;
const int SyncBattleObjAtt::kAttvalueFieldNumber;
#endif  // !_MSC_VER

SyncBattleObjAtt::SyncBattleObjAtt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SyncBattleObjAtt::InitAsDefaultInstance() {
}

SyncBattleObjAtt::SyncBattleObjAtt(const SyncBattleObjAtt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SyncBattleObjAtt::SharedCtor() {
  _cached_size_ = 0;
  objid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncBattleObjAtt::~SyncBattleObjAtt() {
  SharedDtor();
}

void SyncBattleObjAtt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SyncBattleObjAtt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncBattleObjAtt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncBattleObjAtt_descriptor_;
}

const SyncBattleObjAtt& SyncBattleObjAtt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

SyncBattleObjAtt* SyncBattleObjAtt::default_instance_ = NULL;

SyncBattleObjAtt* SyncBattleObjAtt::New() const {
  return new SyncBattleObjAtt;
}

void SyncBattleObjAtt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objid_ = 0u;
  }
  atttype_.Clear();
  attvalue_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncBattleObjAtt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 objid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_atttype;
        break;
      }

      // repeated uint32 atttype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atttype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_atttype())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_atttype())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_atttype;
        if (input->ExpectTag(24)) goto parse_attvalue;
        break;
      }

      // repeated uint64 attvalue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_attvalue())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_attvalue())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_attvalue;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncBattleObjAtt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 objid = 1;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->objid(), output);
  }

  // repeated uint32 atttype = 2;
  for (int i = 0; i < this->atttype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->atttype(i), output);
  }

  // repeated uint64 attvalue = 3;
  for (int i = 0; i < this->attvalue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->attvalue(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SyncBattleObjAtt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 objid = 1;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->objid(), target);
  }

  // repeated uint32 atttype = 2;
  for (int i = 0; i < this->atttype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->atttype(i), target);
  }

  // repeated uint64 attvalue = 3;
  for (int i = 0; i < this->attvalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->attvalue(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SyncBattleObjAtt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 objid = 1;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->objid());
    }

  }
  // repeated uint32 atttype = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->atttype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->atttype(i));
    }
    total_size += 1 * this->atttype_size() + data_size;
  }

  // repeated uint64 attvalue = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->attvalue_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->attvalue(i));
    }
    total_size += 1 * this->attvalue_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncBattleObjAtt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncBattleObjAtt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncBattleObjAtt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncBattleObjAtt::MergeFrom(const SyncBattleObjAtt& from) {
  GOOGLE_CHECK_NE(&from, this);
  atttype_.MergeFrom(from.atttype_);
  attvalue_.MergeFrom(from.attvalue_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncBattleObjAtt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncBattleObjAtt::CopyFrom(const SyncBattleObjAtt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncBattleObjAtt::IsInitialized() const {

  return true;
}

void SyncBattleObjAtt::Swap(SyncBattleObjAtt* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    atttype_.Swap(&other->atttype_);
    attvalue_.Swap(&other->attvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncBattleObjAtt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncBattleObjAtt_descriptor_;
  metadata.reflection = SyncBattleObjAtt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Match_ServerInfo::kSzIpFieldNumber;
const int Battle2Match_ServerInfo::kUiPortFieldNumber;
const int Battle2Match_ServerInfo::kUiMapIdFieldNumber;
#endif  // !_MSC_VER

Battle2Match_ServerInfo::Battle2Match_ServerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Match_ServerInfo::InitAsDefaultInstance() {
}

Battle2Match_ServerInfo::Battle2Match_ServerInfo(const Battle2Match_ServerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Match_ServerInfo::SharedCtor() {
  _cached_size_ = 0;
  szip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uiport_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Match_ServerInfo::~Battle2Match_ServerInfo() {
  SharedDtor();
}

void Battle2Match_ServerInfo::SharedDtor() {
  if (szip_ != &::google::protobuf::internal::kEmptyString) {
    delete szip_;
  }
  if (this != default_instance_) {
  }
}

void Battle2Match_ServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Match_ServerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Match_ServerInfo_descriptor_;
}

const Battle2Match_ServerInfo& Battle2Match_ServerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Match_ServerInfo* Battle2Match_ServerInfo::default_instance_ = NULL;

Battle2Match_ServerInfo* Battle2Match_ServerInfo::New() const {
  return new Battle2Match_ServerInfo;
}

void Battle2Match_ServerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_szip()) {
      if (szip_ != &::google::protobuf::internal::kEmptyString) {
        szip_->clear();
      }
    }
    uiport_ = 0u;
  }
  uimapid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Match_ServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string szIp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->szip().data(), this->szip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiPort;
        break;
      }

      // required uint32 uiPort = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiport_)));
          set_has_uiport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uiMapId;
        break;
      }

      // repeated uint32 uiMapId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiMapId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_uimapid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_uimapid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uiMapId;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Match_ServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string szIp = 1;
  if (has_szip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szip().data(), this->szip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->szip(), output);
  }

  // required uint32 uiPort = 2;
  if (has_uiport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uiport(), output);
  }

  // repeated uint32 uiMapId = 3;
  for (int i = 0; i < this->uimapid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->uimapid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Match_ServerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string szIp = 1;
  if (has_szip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szip().data(), this->szip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->szip(), target);
  }

  // required uint32 uiPort = 2;
  if (has_uiport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uiport(), target);
  }

  // repeated uint32 uiMapId = 3;
  for (int i = 0; i < this->uimapid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->uimapid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Match_ServerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string szIp = 1;
    if (has_szip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szip());
    }

    // required uint32 uiPort = 2;
    if (has_uiport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiport());
    }

  }
  // repeated uint32 uiMapId = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->uimapid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->uimapid(i));
    }
    total_size += 1 * this->uimapid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Match_ServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Match_ServerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Match_ServerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Match_ServerInfo::MergeFrom(const Battle2Match_ServerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  uimapid_.MergeFrom(from.uimapid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_szip()) {
      set_szip(from.szip());
    }
    if (from.has_uiport()) {
      set_uiport(from.uiport());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Match_ServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Match_ServerInfo::CopyFrom(const Battle2Match_ServerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Match_ServerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void Battle2Match_ServerInfo::Swap(Battle2Match_ServerInfo* other) {
  if (other != this) {
    std::swap(szip_, other->szip_);
    std::swap(uiport_, other->uiport_);
    uimapid_.Swap(&other->uimapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Match_ServerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Match_ServerInfo_descriptor_;
  metadata.reflection = Battle2Match_ServerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Game2Battle_EnterScene::kMapidFieldNumber;
const int Game2Battle_EnterScene::kPtFieldNumber;
const int Game2Battle_EnterScene::kDirFieldNumber;
const int Game2Battle_EnterScene::kLayerFieldNumber;
const int Game2Battle_EnterScene::kSPlyInfoFieldNumber;
const int Game2Battle_EnterScene::kSBoatInfoFieldNumber;
const int Game2Battle_EnterScene::kCombatFieldNumber;
const int Game2Battle_EnterScene::kTbinfoFieldNumber;
const int Game2Battle_EnterScene::kIsbacklineFieldNumber;
#endif  // !_MSC_VER

Game2Battle_EnterScene::Game2Battle_EnterScene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Game2Battle_EnterScene::InitAsDefaultInstance() {
  pt_ = const_cast< ::proto::message::Point3D*>(&::proto::message::Point3D::default_instance());
  splyinfo_ = const_cast< ::proto::message::BattlePlayerInfo*>(&::proto::message::BattlePlayerInfo::default_instance());
  sboatinfo_ = const_cast< ::proto::message::BattleBoatInfo*>(&::proto::message::BattleBoatInfo::default_instance());
  tbinfo_ = const_cast< ::proto::message::TBFieldInfo*>(&::proto::message::TBFieldInfo::default_instance());
}

Game2Battle_EnterScene::Game2Battle_EnterScene(const Game2Battle_EnterScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Game2Battle_EnterScene::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0;
  pt_ = NULL;
  dir_ = 0;
  layer_ = 0;
  splyinfo_ = NULL;
  sboatinfo_ = NULL;
  combat_ = 0;
  tbinfo_ = NULL;
  isbackline_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Game2Battle_EnterScene::~Game2Battle_EnterScene() {
  SharedDtor();
}

void Game2Battle_EnterScene::SharedDtor() {
  if (this != default_instance_) {
    delete pt_;
    delete splyinfo_;
    delete sboatinfo_;
    delete tbinfo_;
  }
}

void Game2Battle_EnterScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Game2Battle_EnterScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Game2Battle_EnterScene_descriptor_;
}

const Game2Battle_EnterScene& Game2Battle_EnterScene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Game2Battle_EnterScene* Game2Battle_EnterScene::default_instance_ = NULL;

Game2Battle_EnterScene* Game2Battle_EnterScene::New() const {
  return new Game2Battle_EnterScene;
}

void Game2Battle_EnterScene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0;
    if (has_pt()) {
      if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
    }
    dir_ = 0;
    layer_ = 0;
    if (has_splyinfo()) {
      if (splyinfo_ != NULL) splyinfo_->::proto::message::BattlePlayerInfo::Clear();
    }
    if (has_sboatinfo()) {
      if (sboatinfo_ != NULL) sboatinfo_->::proto::message::BattleBoatInfo::Clear();
    }
    combat_ = 0;
    if (has_tbinfo()) {
      if (tbinfo_ != NULL) tbinfo_->::proto::message::TBFieldInfo::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    isbackline_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Game2Battle_EnterScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pt;
        break;
      }

      // required .proto.message.Point3D pt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_dir;
        break;
      }

      // required float dir = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_layer;
        break;
      }

      // required int32 layer = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_sPlyInfo;
        break;
      }

      // required .proto.message.BattlePlayerInfo sPlyInfo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sPlyInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_splyinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_sBoatInfo;
        break;
      }

      // optional .proto.message.BattleBoatInfo sBoatInfo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sBoatInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sboatinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_combat;
        break;
      }

      // optional int32 combat = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_combat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combat_)));
          set_has_combat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_tbinfo;
        break;
      }

      // optional .proto.message.TBFieldInfo tbinfo = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tbinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tbinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_isbackline;
        break;
      }

      // optional bool isbackline = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isbackline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isbackline_)));
          set_has_isbackline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Game2Battle_EnterScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mapid = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mapid(), output);
  }

  // required .proto.message.Point3D pt = 2;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pt(), output);
  }

  // required float dir = 3;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->dir(), output);
  }

  // required int32 layer = 4;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->layer(), output);
  }

  // required .proto.message.BattlePlayerInfo sPlyInfo = 5;
  if (has_splyinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->splyinfo(), output);
  }

  // optional .proto.message.BattleBoatInfo sBoatInfo = 6;
  if (has_sboatinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->sboatinfo(), output);
  }

  // optional int32 combat = 7;
  if (has_combat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->combat(), output);
  }

  // optional .proto.message.TBFieldInfo tbinfo = 8;
  if (has_tbinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->tbinfo(), output);
  }

  // optional bool isbackline = 9;
  if (has_isbackline()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->isbackline(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Game2Battle_EnterScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mapid = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mapid(), target);
  }

  // required .proto.message.Point3D pt = 2;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pt(), target);
  }

  // required float dir = 3;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->dir(), target);
  }

  // required int32 layer = 4;
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->layer(), target);
  }

  // required .proto.message.BattlePlayerInfo sPlyInfo = 5;
  if (has_splyinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->splyinfo(), target);
  }

  // optional .proto.message.BattleBoatInfo sBoatInfo = 6;
  if (has_sboatinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->sboatinfo(), target);
  }

  // optional int32 combat = 7;
  if (has_combat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->combat(), target);
  }

  // optional .proto.message.TBFieldInfo tbinfo = 8;
  if (has_tbinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->tbinfo(), target);
  }

  // optional bool isbackline = 9;
  if (has_isbackline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->isbackline(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Game2Battle_EnterScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mapid = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // required .proto.message.Point3D pt = 2;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

    // required float dir = 3;
    if (has_dir()) {
      total_size += 1 + 4;
    }

    // required int32 layer = 4;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layer());
    }

    // required .proto.message.BattlePlayerInfo sPlyInfo = 5;
    if (has_splyinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->splyinfo());
    }

    // optional .proto.message.BattleBoatInfo sBoatInfo = 6;
    if (has_sboatinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sboatinfo());
    }

    // optional int32 combat = 7;
    if (has_combat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->combat());
    }

    // optional .proto.message.TBFieldInfo tbinfo = 8;
    if (has_tbinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tbinfo());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool isbackline = 9;
    if (has_isbackline()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Game2Battle_EnterScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Game2Battle_EnterScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Game2Battle_EnterScene*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Game2Battle_EnterScene::MergeFrom(const Game2Battle_EnterScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_pt()) {
      mutable_pt()->::proto::message::Point3D::MergeFrom(from.pt());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_layer()) {
      set_layer(from.layer());
    }
    if (from.has_splyinfo()) {
      mutable_splyinfo()->::proto::message::BattlePlayerInfo::MergeFrom(from.splyinfo());
    }
    if (from.has_sboatinfo()) {
      mutable_sboatinfo()->::proto::message::BattleBoatInfo::MergeFrom(from.sboatinfo());
    }
    if (from.has_combat()) {
      set_combat(from.combat());
    }
    if (from.has_tbinfo()) {
      mutable_tbinfo()->::proto::message::TBFieldInfo::MergeFrom(from.tbinfo());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_isbackline()) {
      set_isbackline(from.isbackline());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Game2Battle_EnterScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Game2Battle_EnterScene::CopyFrom(const Game2Battle_EnterScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game2Battle_EnterScene::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_splyinfo()) {
    if (!this->splyinfo().IsInitialized()) return false;
  }
  return true;
}

void Game2Battle_EnterScene::Swap(Game2Battle_EnterScene* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(pt_, other->pt_);
    std::swap(dir_, other->dir_);
    std::swap(layer_, other->layer_);
    std::swap(splyinfo_, other->splyinfo_);
    std::swap(sboatinfo_, other->sboatinfo_);
    std::swap(combat_, other->combat_);
    std::swap(tbinfo_, other->tbinfo_);
    std::swap(isbackline_, other->isbackline_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Game2Battle_EnterScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Game2Battle_EnterScene_descriptor_;
  metadata.reflection = Game2Battle_EnterScene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Game2Battle_ChangeMap::kMapidFieldNumber;
const int Game2Battle_ChangeMap::kPtFieldNumber;
const int Game2Battle_ChangeMap::kDirFieldNumber;
const int Game2Battle_ChangeMap::kLayerFieldNumber;
#endif  // !_MSC_VER

Game2Battle_ChangeMap::Game2Battle_ChangeMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Game2Battle_ChangeMap::InitAsDefaultInstance() {
  pt_ = const_cast< ::proto::message::Point3D*>(&::proto::message::Point3D::default_instance());
}

Game2Battle_ChangeMap::Game2Battle_ChangeMap(const Game2Battle_ChangeMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Game2Battle_ChangeMap::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0;
  pt_ = NULL;
  dir_ = 0;
  layer_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Game2Battle_ChangeMap::~Game2Battle_ChangeMap() {
  SharedDtor();
}

void Game2Battle_ChangeMap::SharedDtor() {
  if (this != default_instance_) {
    delete pt_;
  }
}

void Game2Battle_ChangeMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Game2Battle_ChangeMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Game2Battle_ChangeMap_descriptor_;
}

const Game2Battle_ChangeMap& Game2Battle_ChangeMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Game2Battle_ChangeMap* Game2Battle_ChangeMap::default_instance_ = NULL;

Game2Battle_ChangeMap* Game2Battle_ChangeMap::New() const {
  return new Game2Battle_ChangeMap;
}

void Game2Battle_ChangeMap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0;
    if (has_pt()) {
      if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
    }
    dir_ = 0;
    layer_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Game2Battle_ChangeMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pt;
        break;
      }

      // required .proto.message.Point3D pt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_dir;
        break;
      }

      // required float dir = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_layer;
        break;
      }

      // required int32 layer = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Game2Battle_ChangeMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mapid = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mapid(), output);
  }

  // required .proto.message.Point3D pt = 2;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pt(), output);
  }

  // required float dir = 3;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->dir(), output);
  }

  // required int32 layer = 4;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->layer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Game2Battle_ChangeMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mapid = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mapid(), target);
  }

  // required .proto.message.Point3D pt = 2;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pt(), target);
  }

  // required float dir = 3;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->dir(), target);
  }

  // required int32 layer = 4;
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->layer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Game2Battle_ChangeMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mapid = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // required .proto.message.Point3D pt = 2;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

    // required float dir = 3;
    if (has_dir()) {
      total_size += 1 + 4;
    }

    // required int32 layer = 4;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Game2Battle_ChangeMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Game2Battle_ChangeMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Game2Battle_ChangeMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Game2Battle_ChangeMap::MergeFrom(const Game2Battle_ChangeMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_pt()) {
      mutable_pt()->::proto::message::Point3D::MergeFrom(from.pt());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_layer()) {
      set_layer(from.layer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Game2Battle_ChangeMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Game2Battle_ChangeMap::CopyFrom(const Game2Battle_ChangeMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game2Battle_ChangeMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Game2Battle_ChangeMap::Swap(Game2Battle_ChangeMap* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(pt_, other->pt_);
    std::swap(dir_, other->dir_);
    std::swap(layer_, other->layer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Game2Battle_ChangeMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Game2Battle_ChangeMap_descriptor_;
  metadata.reflection = Game2Battle_ChangeMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Game2Battle_ChangeTttle::kNIdFieldNumber;
const int Game2Battle_ChangeTttle::kTitleIDFieldNumber;
const int Game2Battle_ChangeTttle::kTitlenameFieldNumber;
const int Game2Battle_ChangeTttle::kIshideFieldNumber;
#endif  // !_MSC_VER

Game2Battle_ChangeTttle::Game2Battle_ChangeTttle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Game2Battle_ChangeTttle::InitAsDefaultInstance() {
}

Game2Battle_ChangeTttle::Game2Battle_ChangeTttle(const Game2Battle_ChangeTttle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Game2Battle_ChangeTttle::SharedCtor() {
  _cached_size_ = 0;
  nid_ = 0u;
  titleid_ = 0;
  titlename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ishide_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Game2Battle_ChangeTttle::~Game2Battle_ChangeTttle() {
  SharedDtor();
}

void Game2Battle_ChangeTttle::SharedDtor() {
  if (titlename_ != &::google::protobuf::internal::kEmptyString) {
    delete titlename_;
  }
  if (this != default_instance_) {
  }
}

void Game2Battle_ChangeTttle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Game2Battle_ChangeTttle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Game2Battle_ChangeTttle_descriptor_;
}

const Game2Battle_ChangeTttle& Game2Battle_ChangeTttle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Game2Battle_ChangeTttle* Game2Battle_ChangeTttle::default_instance_ = NULL;

Game2Battle_ChangeTttle* Game2Battle_ChangeTttle::New() const {
  return new Game2Battle_ChangeTttle;
}

void Game2Battle_ChangeTttle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nid_ = 0u;
    titleid_ = 0;
    if (has_titlename()) {
      if (titlename_ != &::google::protobuf::internal::kEmptyString) {
        titlename_->clear();
      }
    }
    ishide_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Game2Battle_ChangeTttle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 nId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nid_)));
          set_has_nid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_titleID;
        break;
      }

      // required int32 titleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_titleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &titleid_)));
          set_has_titleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_titlename;
        break;
      }

      // optional string titlename = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_titlename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_titlename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->titlename().data(), this->titlename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ishide;
        break;
      }

      // optional int32 ishide = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ishide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ishide_)));
          set_has_ishide();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Game2Battle_ChangeTttle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 nId = 1;
  if (has_nid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nid(), output);
  }

  // required int32 titleID = 2;
  if (has_titleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->titleid(), output);
  }

  // optional string titlename = 3;
  if (has_titlename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->titlename().data(), this->titlename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->titlename(), output);
  }

  // optional int32 ishide = 4;
  if (has_ishide()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ishide(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Game2Battle_ChangeTttle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 nId = 1;
  if (has_nid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nid(), target);
  }

  // required int32 titleID = 2;
  if (has_titleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->titleid(), target);
  }

  // optional string titlename = 3;
  if (has_titlename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->titlename().data(), this->titlename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->titlename(), target);
  }

  // optional int32 ishide = 4;
  if (has_ishide()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ishide(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Game2Battle_ChangeTttle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 nId = 1;
    if (has_nid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nid());
    }

    // required int32 titleID = 2;
    if (has_titleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->titleid());
    }

    // optional string titlename = 3;
    if (has_titlename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->titlename());
    }

    // optional int32 ishide = 4;
    if (has_ishide()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ishide());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Game2Battle_ChangeTttle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Game2Battle_ChangeTttle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Game2Battle_ChangeTttle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Game2Battle_ChangeTttle::MergeFrom(const Game2Battle_ChangeTttle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nid()) {
      set_nid(from.nid());
    }
    if (from.has_titleid()) {
      set_titleid(from.titleid());
    }
    if (from.has_titlename()) {
      set_titlename(from.titlename());
    }
    if (from.has_ishide()) {
      set_ishide(from.ishide());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Game2Battle_ChangeTttle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Game2Battle_ChangeTttle::CopyFrom(const Game2Battle_ChangeTttle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game2Battle_ChangeTttle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Game2Battle_ChangeTttle::Swap(Game2Battle_ChangeTttle* other) {
  if (other != this) {
    std::swap(nid_, other->nid_);
    std::swap(titleid_, other->titleid_);
    std::swap(titlename_, other->titlename_);
    std::swap(ishide_, other->ishide_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Game2Battle_ChangeTttle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Game2Battle_ChangeTttle_descriptor_;
  metadata.reflection = Game2Battle_ChangeTttle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Game2Battle_ChangeAwaken::kNIdFieldNumber;
const int Game2Battle_ChangeAwaken::kAwakenIDFieldNumber;
const int Game2Battle_ChangeAwaken::kStatusFieldNumber;
const int Game2Battle_ChangeAwaken::kIsDeadFieldNumber;
#endif  // !_MSC_VER

Game2Battle_ChangeAwaken::Game2Battle_ChangeAwaken()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Game2Battle_ChangeAwaken::InitAsDefaultInstance() {
}

Game2Battle_ChangeAwaken::Game2Battle_ChangeAwaken(const Game2Battle_ChangeAwaken& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Game2Battle_ChangeAwaken::SharedCtor() {
  _cached_size_ = 0;
  nid_ = 0u;
  awakenid_ = 0;
  status_ = false;
  isdead_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Game2Battle_ChangeAwaken::~Game2Battle_ChangeAwaken() {
  SharedDtor();
}

void Game2Battle_ChangeAwaken::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Game2Battle_ChangeAwaken::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Game2Battle_ChangeAwaken::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Game2Battle_ChangeAwaken_descriptor_;
}

const Game2Battle_ChangeAwaken& Game2Battle_ChangeAwaken::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Game2Battle_ChangeAwaken* Game2Battle_ChangeAwaken::default_instance_ = NULL;

Game2Battle_ChangeAwaken* Game2Battle_ChangeAwaken::New() const {
  return new Game2Battle_ChangeAwaken;
}

void Game2Battle_ChangeAwaken::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nid_ = 0u;
    awakenid_ = 0;
    status_ = false;
    isdead_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Game2Battle_ChangeAwaken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 nId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nid_)));
          set_has_nid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_awakenID;
        break;
      }

      // required int32 awakenID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awakenID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awakenid_)));
          set_has_awakenid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required bool status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isDead;
        break;
      }

      // required bool isDead = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isDead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdead_)));
          set_has_isdead();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Game2Battle_ChangeAwaken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 nId = 1;
  if (has_nid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nid(), output);
  }

  // required int32 awakenID = 2;
  if (has_awakenid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->awakenid(), output);
  }

  // required bool status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->status(), output);
  }

  // required bool isDead = 4;
  if (has_isdead()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isdead(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Game2Battle_ChangeAwaken::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 nId = 1;
  if (has_nid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nid(), target);
  }

  // required int32 awakenID = 2;
  if (has_awakenid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->awakenid(), target);
  }

  // required bool status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->status(), target);
  }

  // required bool isDead = 4;
  if (has_isdead()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isdead(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Game2Battle_ChangeAwaken::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 nId = 1;
    if (has_nid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nid());
    }

    // required int32 awakenID = 2;
    if (has_awakenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awakenid());
    }

    // required bool status = 3;
    if (has_status()) {
      total_size += 1 + 1;
    }

    // required bool isDead = 4;
    if (has_isdead()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Game2Battle_ChangeAwaken::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Game2Battle_ChangeAwaken* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Game2Battle_ChangeAwaken*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Game2Battle_ChangeAwaken::MergeFrom(const Game2Battle_ChangeAwaken& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nid()) {
      set_nid(from.nid());
    }
    if (from.has_awakenid()) {
      set_awakenid(from.awakenid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_isdead()) {
      set_isdead(from.isdead());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Game2Battle_ChangeAwaken::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Game2Battle_ChangeAwaken::CopyFrom(const Game2Battle_ChangeAwaken& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game2Battle_ChangeAwaken::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Game2Battle_ChangeAwaken::Swap(Game2Battle_ChangeAwaken* other) {
  if (other != this) {
    std::swap(nid_, other->nid_);
    std::swap(awakenid_, other->awakenid_);
    std::swap(status_, other->status_);
    std::swap(isdead_, other->isdead_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Game2Battle_ChangeAwaken::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Game2Battle_ChangeAwaken_descriptor_;
  metadata.reflection = Game2Battle_ChangeAwaken_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Game2Battle_ChangePet::kNIdFieldNumber;
const int Game2Battle_ChangePet::kPetIDFieldNumber;
const int Game2Battle_ChangePet::kRankingFieldNumber;
#endif  // !_MSC_VER

Game2Battle_ChangePet::Game2Battle_ChangePet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Game2Battle_ChangePet::InitAsDefaultInstance() {
}

Game2Battle_ChangePet::Game2Battle_ChangePet(const Game2Battle_ChangePet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Game2Battle_ChangePet::SharedCtor() {
  _cached_size_ = 0;
  nid_ = 0u;
  petid_ = 0;
  ranking_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Game2Battle_ChangePet::~Game2Battle_ChangePet() {
  SharedDtor();
}

void Game2Battle_ChangePet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Game2Battle_ChangePet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Game2Battle_ChangePet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Game2Battle_ChangePet_descriptor_;
}

const Game2Battle_ChangePet& Game2Battle_ChangePet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Game2Battle_ChangePet* Game2Battle_ChangePet::default_instance_ = NULL;

Game2Battle_ChangePet* Game2Battle_ChangePet::New() const {
  return new Game2Battle_ChangePet;
}

void Game2Battle_ChangePet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nid_ = 0u;
    petid_ = 0;
    ranking_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Game2Battle_ChangePet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 nId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nid_)));
          set_has_nid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_petID;
        break;
      }

      // required int32 petID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_petID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ranking;
        break;
      }

      // optional int32 ranking = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ranking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranking_)));
          set_has_ranking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Game2Battle_ChangePet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 nId = 1;
  if (has_nid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nid(), output);
  }

  // required int32 petID = 2;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->petid(), output);
  }

  // optional int32 ranking = 3;
  if (has_ranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ranking(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Game2Battle_ChangePet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 nId = 1;
  if (has_nid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nid(), target);
  }

  // required int32 petID = 2;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->petid(), target);
  }

  // optional int32 ranking = 3;
  if (has_ranking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ranking(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Game2Battle_ChangePet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 nId = 1;
    if (has_nid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nid());
    }

    // required int32 petID = 2;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->petid());
    }

    // optional int32 ranking = 3;
    if (has_ranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranking());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Game2Battle_ChangePet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Game2Battle_ChangePet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Game2Battle_ChangePet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Game2Battle_ChangePet::MergeFrom(const Game2Battle_ChangePet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nid()) {
      set_nid(from.nid());
    }
    if (from.has_petid()) {
      set_petid(from.petid());
    }
    if (from.has_ranking()) {
      set_ranking(from.ranking());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Game2Battle_ChangePet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Game2Battle_ChangePet::CopyFrom(const Game2Battle_ChangePet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game2Battle_ChangePet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Game2Battle_ChangePet::Swap(Game2Battle_ChangePet* other) {
  if (other != this) {
    std::swap(nid_, other->nid_);
    std::swap(petid_, other->petid_);
    std::swap(ranking_, other->ranking_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Game2Battle_ChangePet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Game2Battle_ChangePet_descriptor_;
  metadata.reflection = Game2Battle_ChangePet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Game2Battle_UpdateMyCombat::kCombatFieldNumber;
#endif  // !_MSC_VER

Game2Battle_UpdateMyCombat::Game2Battle_UpdateMyCombat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Game2Battle_UpdateMyCombat::InitAsDefaultInstance() {
}

Game2Battle_UpdateMyCombat::Game2Battle_UpdateMyCombat(const Game2Battle_UpdateMyCombat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Game2Battle_UpdateMyCombat::SharedCtor() {
  _cached_size_ = 0;
  combat_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Game2Battle_UpdateMyCombat::~Game2Battle_UpdateMyCombat() {
  SharedDtor();
}

void Game2Battle_UpdateMyCombat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Game2Battle_UpdateMyCombat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Game2Battle_UpdateMyCombat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Game2Battle_UpdateMyCombat_descriptor_;
}

const Game2Battle_UpdateMyCombat& Game2Battle_UpdateMyCombat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Game2Battle_UpdateMyCombat* Game2Battle_UpdateMyCombat::default_instance_ = NULL;

Game2Battle_UpdateMyCombat* Game2Battle_UpdateMyCombat::New() const {
  return new Game2Battle_UpdateMyCombat;
}

void Game2Battle_UpdateMyCombat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    combat_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Game2Battle_UpdateMyCombat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 combat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &combat_)));
          set_has_combat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Game2Battle_UpdateMyCombat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 combat = 1;
  if (has_combat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->combat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Game2Battle_UpdateMyCombat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 combat = 1;
  if (has_combat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->combat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Game2Battle_UpdateMyCombat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 combat = 1;
    if (has_combat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->combat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Game2Battle_UpdateMyCombat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Game2Battle_UpdateMyCombat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Game2Battle_UpdateMyCombat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Game2Battle_UpdateMyCombat::MergeFrom(const Game2Battle_UpdateMyCombat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_combat()) {
      set_combat(from.combat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Game2Battle_UpdateMyCombat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Game2Battle_UpdateMyCombat::CopyFrom(const Game2Battle_UpdateMyCombat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game2Battle_UpdateMyCombat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Game2Battle_UpdateMyCombat::Swap(Game2Battle_UpdateMyCombat* other) {
  if (other != this) {
    std::swap(combat_, other->combat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Game2Battle_UpdateMyCombat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Game2Battle_UpdateMyCombat_descriptor_;
  metadata.reflection = Game2Battle_UpdateMyCombat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Game2Battle_ChangeAvatar::kNIdFieldNumber;
const int Game2Battle_ChangeAvatar::kAvatarIDFieldNumber;
const int Game2Battle_ChangeAvatar::kColorIDFieldNumber;
#endif  // !_MSC_VER

Game2Battle_ChangeAvatar::Game2Battle_ChangeAvatar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Game2Battle_ChangeAvatar::InitAsDefaultInstance() {
}

Game2Battle_ChangeAvatar::Game2Battle_ChangeAvatar(const Game2Battle_ChangeAvatar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Game2Battle_ChangeAvatar::SharedCtor() {
  _cached_size_ = 0;
  nid_ = 0u;
  avatarid_ = 0;
  colorid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Game2Battle_ChangeAvatar::~Game2Battle_ChangeAvatar() {
  SharedDtor();
}

void Game2Battle_ChangeAvatar::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Game2Battle_ChangeAvatar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Game2Battle_ChangeAvatar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Game2Battle_ChangeAvatar_descriptor_;
}

const Game2Battle_ChangeAvatar& Game2Battle_ChangeAvatar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Game2Battle_ChangeAvatar* Game2Battle_ChangeAvatar::default_instance_ = NULL;

Game2Battle_ChangeAvatar* Game2Battle_ChangeAvatar::New() const {
  return new Game2Battle_ChangeAvatar;
}

void Game2Battle_ChangeAvatar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nid_ = 0u;
    avatarid_ = 0;
    colorid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Game2Battle_ChangeAvatar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 nId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nid_)));
          set_has_nid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_avatarID;
        break;
      }

      // required int32 avatarID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avatarID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avatarid_)));
          set_has_avatarid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_colorID;
        break;
      }

      // required int32 colorID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_colorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &colorid_)));
          set_has_colorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Game2Battle_ChangeAvatar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 nId = 1;
  if (has_nid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nid(), output);
  }

  // required int32 avatarID = 2;
  if (has_avatarid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->avatarid(), output);
  }

  // required int32 colorID = 3;
  if (has_colorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->colorid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Game2Battle_ChangeAvatar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 nId = 1;
  if (has_nid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nid(), target);
  }

  // required int32 avatarID = 2;
  if (has_avatarid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->avatarid(), target);
  }

  // required int32 colorID = 3;
  if (has_colorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->colorid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Game2Battle_ChangeAvatar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 nId = 1;
    if (has_nid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nid());
    }

    // required int32 avatarID = 2;
    if (has_avatarid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->avatarid());
    }

    // required int32 colorID = 3;
    if (has_colorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->colorid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Game2Battle_ChangeAvatar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Game2Battle_ChangeAvatar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Game2Battle_ChangeAvatar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Game2Battle_ChangeAvatar::MergeFrom(const Game2Battle_ChangeAvatar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nid()) {
      set_nid(from.nid());
    }
    if (from.has_avatarid()) {
      set_avatarid(from.avatarid());
    }
    if (from.has_colorid()) {
      set_colorid(from.colorid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Game2Battle_ChangeAvatar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Game2Battle_ChangeAvatar::CopyFrom(const Game2Battle_ChangeAvatar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game2Battle_ChangeAvatar::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Game2Battle_ChangeAvatar::Swap(Game2Battle_ChangeAvatar* other) {
  if (other != this) {
    std::swap(nid_, other->nid_);
    std::swap(avatarid_, other->avatarid_);
    std::swap(colorid_, other->colorid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Game2Battle_ChangeAvatar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Game2Battle_ChangeAvatar_descriptor_;
  metadata.reflection = Game2Battle_ChangeAvatar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Game2Battle_ChangeRide::kNIdFieldNumber;
const int Game2Battle_ChangeRide::kRideIDFieldNumber;
const int Game2Battle_ChangeRide::kStatusFieldNumber;
const int Game2Battle_ChangeRide::kIsDeadFieldNumber;
#endif  // !_MSC_VER

Game2Battle_ChangeRide::Game2Battle_ChangeRide()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Game2Battle_ChangeRide::InitAsDefaultInstance() {
}

Game2Battle_ChangeRide::Game2Battle_ChangeRide(const Game2Battle_ChangeRide& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Game2Battle_ChangeRide::SharedCtor() {
  _cached_size_ = 0;
  nid_ = 0u;
  rideid_ = 0;
  status_ = false;
  isdead_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Game2Battle_ChangeRide::~Game2Battle_ChangeRide() {
  SharedDtor();
}

void Game2Battle_ChangeRide::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Game2Battle_ChangeRide::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Game2Battle_ChangeRide::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Game2Battle_ChangeRide_descriptor_;
}

const Game2Battle_ChangeRide& Game2Battle_ChangeRide::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Game2Battle_ChangeRide* Game2Battle_ChangeRide::default_instance_ = NULL;

Game2Battle_ChangeRide* Game2Battle_ChangeRide::New() const {
  return new Game2Battle_ChangeRide;
}

void Game2Battle_ChangeRide::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nid_ = 0u;
    rideid_ = 0;
    status_ = false;
    isdead_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Game2Battle_ChangeRide::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 nId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nid_)));
          set_has_nid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_RideID;
        break;
      }

      // required int32 RideID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RideID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rideid_)));
          set_has_rideid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required bool status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isDead;
        break;
      }

      // required bool isDead = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isDead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdead_)));
          set_has_isdead();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Game2Battle_ChangeRide::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 nId = 1;
  if (has_nid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nid(), output);
  }

  // required int32 RideID = 2;
  if (has_rideid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rideid(), output);
  }

  // required bool status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->status(), output);
  }

  // required bool isDead = 4;
  if (has_isdead()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isdead(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Game2Battle_ChangeRide::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 nId = 1;
  if (has_nid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nid(), target);
  }

  // required int32 RideID = 2;
  if (has_rideid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rideid(), target);
  }

  // required bool status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->status(), target);
  }

  // required bool isDead = 4;
  if (has_isdead()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isdead(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Game2Battle_ChangeRide::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 nId = 1;
    if (has_nid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nid());
    }

    // required int32 RideID = 2;
    if (has_rideid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rideid());
    }

    // required bool status = 3;
    if (has_status()) {
      total_size += 1 + 1;
    }

    // required bool isDead = 4;
    if (has_isdead()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Game2Battle_ChangeRide::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Game2Battle_ChangeRide* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Game2Battle_ChangeRide*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Game2Battle_ChangeRide::MergeFrom(const Game2Battle_ChangeRide& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nid()) {
      set_nid(from.nid());
    }
    if (from.has_rideid()) {
      set_rideid(from.rideid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_isdead()) {
      set_isdead(from.isdead());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Game2Battle_ChangeRide::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Game2Battle_ChangeRide::CopyFrom(const Game2Battle_ChangeRide& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game2Battle_ChangeRide::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Game2Battle_ChangeRide::Swap(Game2Battle_ChangeRide* other) {
  if (other != this) {
    std::swap(nid_, other->nid_);
    std::swap(rideid_, other->rideid_);
    std::swap(status_, other->status_);
    std::swap(isdead_, other->isdead_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Game2Battle_ChangeRide::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Game2Battle_ChangeRide_descriptor_;
  metadata.reflection = Game2Battle_ChangeRide_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Game2Battle_BornMercenary::kNIdFieldNumber;
const int Game2Battle_BornMercenary::kHpperFieldNumber;
const int Game2Battle_BornMercenary::kRankingFieldNumber;
#endif  // !_MSC_VER

Game2Battle_BornMercenary::Game2Battle_BornMercenary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Game2Battle_BornMercenary::InitAsDefaultInstance() {
}

Game2Battle_BornMercenary::Game2Battle_BornMercenary(const Game2Battle_BornMercenary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Game2Battle_BornMercenary::SharedCtor() {
  _cached_size_ = 0;
  nid_ = 0u;
  hpper_ = 0u;
  ranking_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Game2Battle_BornMercenary::~Game2Battle_BornMercenary() {
  SharedDtor();
}

void Game2Battle_BornMercenary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Game2Battle_BornMercenary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Game2Battle_BornMercenary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Game2Battle_BornMercenary_descriptor_;
}

const Game2Battle_BornMercenary& Game2Battle_BornMercenary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Game2Battle_BornMercenary* Game2Battle_BornMercenary::default_instance_ = NULL;

Game2Battle_BornMercenary* Game2Battle_BornMercenary::New() const {
  return new Game2Battle_BornMercenary;
}

void Game2Battle_BornMercenary::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nid_ = 0u;
    hpper_ = 0u;
    ranking_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Game2Battle_BornMercenary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 nId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nid_)));
          set_has_nid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hpper;
        break;
      }

      // optional uint32 hpper = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hpper:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hpper_)));
          set_has_hpper();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ranking;
        break;
      }

      // optional uint32 ranking = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ranking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ranking_)));
          set_has_ranking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Game2Battle_BornMercenary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 nId = 1;
  if (has_nid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nid(), output);
  }

  // optional uint32 hpper = 2;
  if (has_hpper()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hpper(), output);
  }

  // optional uint32 ranking = 3;
  if (has_ranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ranking(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Game2Battle_BornMercenary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 nId = 1;
  if (has_nid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nid(), target);
  }

  // optional uint32 hpper = 2;
  if (has_hpper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hpper(), target);
  }

  // optional uint32 ranking = 3;
  if (has_ranking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ranking(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Game2Battle_BornMercenary::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 nId = 1;
    if (has_nid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nid());
    }

    // optional uint32 hpper = 2;
    if (has_hpper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hpper());
    }

    // optional uint32 ranking = 3;
    if (has_ranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ranking());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Game2Battle_BornMercenary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Game2Battle_BornMercenary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Game2Battle_BornMercenary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Game2Battle_BornMercenary::MergeFrom(const Game2Battle_BornMercenary& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nid()) {
      set_nid(from.nid());
    }
    if (from.has_hpper()) {
      set_hpper(from.hpper());
    }
    if (from.has_ranking()) {
      set_ranking(from.ranking());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Game2Battle_BornMercenary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Game2Battle_BornMercenary::CopyFrom(const Game2Battle_BornMercenary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game2Battle_BornMercenary::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Game2Battle_BornMercenary::Swap(Game2Battle_BornMercenary* other) {
  if (other != this) {
    std::swap(nid_, other->nid_);
    std::swap(hpper_, other->hpper_);
    std::swap(ranking_, other->ranking_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Game2Battle_BornMercenary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Game2Battle_BornMercenary_descriptor_;
  metadata.reflection = Game2Battle_BornMercenary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Game2Battle_UpdateMercenaryScript::kScriptFieldNumber;
#endif  // !_MSC_VER

Game2Battle_UpdateMercenaryScript::Game2Battle_UpdateMercenaryScript()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Game2Battle_UpdateMercenaryScript::InitAsDefaultInstance() {
}

Game2Battle_UpdateMercenaryScript::Game2Battle_UpdateMercenaryScript(const Game2Battle_UpdateMercenaryScript& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Game2Battle_UpdateMercenaryScript::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Game2Battle_UpdateMercenaryScript::~Game2Battle_UpdateMercenaryScript() {
  SharedDtor();
}

void Game2Battle_UpdateMercenaryScript::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Game2Battle_UpdateMercenaryScript::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Game2Battle_UpdateMercenaryScript::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Game2Battle_UpdateMercenaryScript_descriptor_;
}

const Game2Battle_UpdateMercenaryScript& Game2Battle_UpdateMercenaryScript::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Game2Battle_UpdateMercenaryScript* Game2Battle_UpdateMercenaryScript::default_instance_ = NULL;

Game2Battle_UpdateMercenaryScript* Game2Battle_UpdateMercenaryScript::New() const {
  return new Game2Battle_UpdateMercenaryScript;
}

void Game2Battle_UpdateMercenaryScript::Clear() {
  script_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Game2Battle_UpdateMercenaryScript::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 script = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_script:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_script())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_script())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_script;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Game2Battle_UpdateMercenaryScript::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 script = 1;
  for (int i = 0; i < this->script_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->script(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Game2Battle_UpdateMercenaryScript::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 script = 1;
  for (int i = 0; i < this->script_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->script(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Game2Battle_UpdateMercenaryScript::ByteSize() const {
  int total_size = 0;

  // repeated uint32 script = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->script_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->script(i));
    }
    total_size += 1 * this->script_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Game2Battle_UpdateMercenaryScript::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Game2Battle_UpdateMercenaryScript* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Game2Battle_UpdateMercenaryScript*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Game2Battle_UpdateMercenaryScript::MergeFrom(const Game2Battle_UpdateMercenaryScript& from) {
  GOOGLE_CHECK_NE(&from, this);
  script_.MergeFrom(from.script_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Game2Battle_UpdateMercenaryScript::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Game2Battle_UpdateMercenaryScript::CopyFrom(const Game2Battle_UpdateMercenaryScript& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game2Battle_UpdateMercenaryScript::IsInitialized() const {

  return true;
}

void Game2Battle_UpdateMercenaryScript::Swap(Game2Battle_UpdateMercenaryScript* other) {
  if (other != this) {
    script_.Swap(&other->script_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Game2Battle_UpdateMercenaryScript::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Game2Battle_UpdateMercenaryScript_descriptor_;
  metadata.reflection = Game2Battle_UpdateMercenaryScript_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Game2Battle_UpdateRideScript::kScriptFieldNumber;
#endif  // !_MSC_VER

Game2Battle_UpdateRideScript::Game2Battle_UpdateRideScript()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Game2Battle_UpdateRideScript::InitAsDefaultInstance() {
}

Game2Battle_UpdateRideScript::Game2Battle_UpdateRideScript(const Game2Battle_UpdateRideScript& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Game2Battle_UpdateRideScript::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Game2Battle_UpdateRideScript::~Game2Battle_UpdateRideScript() {
  SharedDtor();
}

void Game2Battle_UpdateRideScript::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Game2Battle_UpdateRideScript::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Game2Battle_UpdateRideScript::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Game2Battle_UpdateRideScript_descriptor_;
}

const Game2Battle_UpdateRideScript& Game2Battle_UpdateRideScript::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Game2Battle_UpdateRideScript* Game2Battle_UpdateRideScript::default_instance_ = NULL;

Game2Battle_UpdateRideScript* Game2Battle_UpdateRideScript::New() const {
  return new Game2Battle_UpdateRideScript;
}

void Game2Battle_UpdateRideScript::Clear() {
  script_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Game2Battle_UpdateRideScript::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 script = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_script:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_script())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_script())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_script;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Game2Battle_UpdateRideScript::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 script = 1;
  for (int i = 0; i < this->script_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->script(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Game2Battle_UpdateRideScript::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 script = 1;
  for (int i = 0; i < this->script_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->script(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Game2Battle_UpdateRideScript::ByteSize() const {
  int total_size = 0;

  // repeated uint32 script = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->script_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->script(i));
    }
    total_size += 1 * this->script_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Game2Battle_UpdateRideScript::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Game2Battle_UpdateRideScript* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Game2Battle_UpdateRideScript*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Game2Battle_UpdateRideScript::MergeFrom(const Game2Battle_UpdateRideScript& from) {
  GOOGLE_CHECK_NE(&from, this);
  script_.MergeFrom(from.script_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Game2Battle_UpdateRideScript::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Game2Battle_UpdateRideScript::CopyFrom(const Game2Battle_UpdateRideScript& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game2Battle_UpdateRideScript::IsInitialized() const {

  return true;
}

void Game2Battle_UpdateRideScript::Swap(Game2Battle_UpdateRideScript* other) {
  if (other != this) {
    script_.Swap(&other->script_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Game2Battle_UpdateRideScript::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Game2Battle_UpdateRideScript_descriptor_;
  metadata.reflection = Game2Battle_UpdateRideScript_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Game2Battle_UpdateAwakenScript::kScriptFieldNumber;
#endif  // !_MSC_VER

Game2Battle_UpdateAwakenScript::Game2Battle_UpdateAwakenScript()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Game2Battle_UpdateAwakenScript::InitAsDefaultInstance() {
}

Game2Battle_UpdateAwakenScript::Game2Battle_UpdateAwakenScript(const Game2Battle_UpdateAwakenScript& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Game2Battle_UpdateAwakenScript::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Game2Battle_UpdateAwakenScript::~Game2Battle_UpdateAwakenScript() {
  SharedDtor();
}

void Game2Battle_UpdateAwakenScript::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Game2Battle_UpdateAwakenScript::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Game2Battle_UpdateAwakenScript::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Game2Battle_UpdateAwakenScript_descriptor_;
}

const Game2Battle_UpdateAwakenScript& Game2Battle_UpdateAwakenScript::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Game2Battle_UpdateAwakenScript* Game2Battle_UpdateAwakenScript::default_instance_ = NULL;

Game2Battle_UpdateAwakenScript* Game2Battle_UpdateAwakenScript::New() const {
  return new Game2Battle_UpdateAwakenScript;
}

void Game2Battle_UpdateAwakenScript::Clear() {
  script_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Game2Battle_UpdateAwakenScript::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 script = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_script:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_script())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_script())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_script;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Game2Battle_UpdateAwakenScript::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 script = 1;
  for (int i = 0; i < this->script_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->script(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Game2Battle_UpdateAwakenScript::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 script = 1;
  for (int i = 0; i < this->script_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->script(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Game2Battle_UpdateAwakenScript::ByteSize() const {
  int total_size = 0;

  // repeated uint32 script = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->script_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->script(i));
    }
    total_size += 1 * this->script_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Game2Battle_UpdateAwakenScript::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Game2Battle_UpdateAwakenScript* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Game2Battle_UpdateAwakenScript*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Game2Battle_UpdateAwakenScript::MergeFrom(const Game2Battle_UpdateAwakenScript& from) {
  GOOGLE_CHECK_NE(&from, this);
  script_.MergeFrom(from.script_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Game2Battle_UpdateAwakenScript::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Game2Battle_UpdateAwakenScript::CopyFrom(const Game2Battle_UpdateAwakenScript& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game2Battle_UpdateAwakenScript::IsInitialized() const {

  return true;
}

void Game2Battle_UpdateAwakenScript::Swap(Game2Battle_UpdateAwakenScript* other) {
  if (other != this) {
    script_.Swap(&other->script_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Game2Battle_UpdateAwakenScript::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Game2Battle_UpdateAwakenScript_descriptor_;
  metadata.reflection = Game2Battle_UpdateAwakenScript_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Game_SaveMercenaryHp::kNIdFieldNumber;
const int Battle2Game_SaveMercenaryHp::kHpperFieldNumber;
#endif  // !_MSC_VER

Battle2Game_SaveMercenaryHp::Battle2Game_SaveMercenaryHp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Game_SaveMercenaryHp::InitAsDefaultInstance() {
}

Battle2Game_SaveMercenaryHp::Battle2Game_SaveMercenaryHp(const Battle2Game_SaveMercenaryHp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Game_SaveMercenaryHp::SharedCtor() {
  _cached_size_ = 0;
  nid_ = 0u;
  hpper_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Game_SaveMercenaryHp::~Battle2Game_SaveMercenaryHp() {
  SharedDtor();
}

void Battle2Game_SaveMercenaryHp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Battle2Game_SaveMercenaryHp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Game_SaveMercenaryHp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Game_SaveMercenaryHp_descriptor_;
}

const Battle2Game_SaveMercenaryHp& Battle2Game_SaveMercenaryHp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Game_SaveMercenaryHp* Battle2Game_SaveMercenaryHp::default_instance_ = NULL;

Battle2Game_SaveMercenaryHp* Battle2Game_SaveMercenaryHp::New() const {
  return new Battle2Game_SaveMercenaryHp;
}

void Battle2Game_SaveMercenaryHp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nid_ = 0u;
    hpper_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Game_SaveMercenaryHp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 nId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nid_)));
          set_has_nid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hpper;
        break;
      }

      // optional uint32 hpper = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hpper:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hpper_)));
          set_has_hpper();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Game_SaveMercenaryHp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 nId = 1;
  if (has_nid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nid(), output);
  }

  // optional uint32 hpper = 2;
  if (has_hpper()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hpper(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Game_SaveMercenaryHp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 nId = 1;
  if (has_nid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nid(), target);
  }

  // optional uint32 hpper = 2;
  if (has_hpper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hpper(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Game_SaveMercenaryHp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 nId = 1;
    if (has_nid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nid());
    }

    // optional uint32 hpper = 2;
    if (has_hpper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hpper());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Game_SaveMercenaryHp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Game_SaveMercenaryHp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Game_SaveMercenaryHp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Game_SaveMercenaryHp::MergeFrom(const Battle2Game_SaveMercenaryHp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nid()) {
      set_nid(from.nid());
    }
    if (from.has_hpper()) {
      set_hpper(from.hpper());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Game_SaveMercenaryHp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Game_SaveMercenaryHp::CopyFrom(const Battle2Game_SaveMercenaryHp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Game_SaveMercenaryHp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Battle2Game_SaveMercenaryHp::Swap(Battle2Game_SaveMercenaryHp* other) {
  if (other != this) {
    std::swap(nid_, other->nid_);
    std::swap(hpper_, other->hpper_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Game_SaveMercenaryHp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Game_SaveMercenaryHp_descriptor_;
  metadata.reflection = Battle2Game_SaveMercenaryHp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Game_UpdatePlayerStatus::kStatusFieldNumber;
#endif  // !_MSC_VER

Battle2Game_UpdatePlayerStatus::Battle2Game_UpdatePlayerStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Game_UpdatePlayerStatus::InitAsDefaultInstance() {
}

Battle2Game_UpdatePlayerStatus::Battle2Game_UpdatePlayerStatus(const Battle2Game_UpdatePlayerStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Game_UpdatePlayerStatus::SharedCtor() {
  _cached_size_ = 0;
  status_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Game_UpdatePlayerStatus::~Battle2Game_UpdatePlayerStatus() {
  SharedDtor();
}

void Battle2Game_UpdatePlayerStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Battle2Game_UpdatePlayerStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Game_UpdatePlayerStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Game_UpdatePlayerStatus_descriptor_;
}

const Battle2Game_UpdatePlayerStatus& Battle2Game_UpdatePlayerStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Game_UpdatePlayerStatus* Battle2Game_UpdatePlayerStatus::default_instance_ = NULL;

Battle2Game_UpdatePlayerStatus* Battle2Game_UpdatePlayerStatus::New() const {
  return new Battle2Game_UpdatePlayerStatus;
}

void Battle2Game_UpdatePlayerStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Game_UpdatePlayerStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Game_UpdatePlayerStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Game_UpdatePlayerStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Game_UpdatePlayerStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Game_UpdatePlayerStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Game_UpdatePlayerStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Game_UpdatePlayerStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Game_UpdatePlayerStatus::MergeFrom(const Battle2Game_UpdatePlayerStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Game_UpdatePlayerStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Game_UpdatePlayerStatus::CopyFrom(const Battle2Game_UpdatePlayerStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Game_UpdatePlayerStatus::IsInitialized() const {

  return true;
}

void Battle2Game_UpdatePlayerStatus::Swap(Battle2Game_UpdatePlayerStatus* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Game_UpdatePlayerStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Game_UpdatePlayerStatus_descriptor_;
  metadata.reflection = Battle2Game_UpdatePlayerStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Game2Battle_ChangeEquip::kNIdFieldNumber;
const int Game2Battle_ChangeEquip::kEquipListFieldNumber;
#endif  // !_MSC_VER

Game2Battle_ChangeEquip::Game2Battle_ChangeEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Game2Battle_ChangeEquip::InitAsDefaultInstance() {
}

Game2Battle_ChangeEquip::Game2Battle_ChangeEquip(const Game2Battle_ChangeEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Game2Battle_ChangeEquip::SharedCtor() {
  _cached_size_ = 0;
  nid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Game2Battle_ChangeEquip::~Game2Battle_ChangeEquip() {
  SharedDtor();
}

void Game2Battle_ChangeEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Game2Battle_ChangeEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Game2Battle_ChangeEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Game2Battle_ChangeEquip_descriptor_;
}

const Game2Battle_ChangeEquip& Game2Battle_ChangeEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Game2Battle_ChangeEquip* Game2Battle_ChangeEquip::default_instance_ = NULL;

Game2Battle_ChangeEquip* Game2Battle_ChangeEquip::New() const {
  return new Game2Battle_ChangeEquip;
}

void Game2Battle_ChangeEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nid_ = 0u;
  }
  equip_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Game2Battle_ChangeEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 nId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nid_)));
          set_has_nid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_equip_list;
        break;
      }

      // repeated .proto.message.Equip equip_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_equip_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Game2Battle_ChangeEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 nId = 1;
  if (has_nid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nid(), output);
  }

  // repeated .proto.message.Equip equip_list = 2;
  for (int i = 0; i < this->equip_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equip_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Game2Battle_ChangeEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 nId = 1;
  if (has_nid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nid(), target);
  }

  // repeated .proto.message.Equip equip_list = 2;
  for (int i = 0; i < this->equip_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equip_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Game2Battle_ChangeEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 nId = 1;
    if (has_nid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nid());
    }

  }
  // repeated .proto.message.Equip equip_list = 2;
  total_size += 1 * this->equip_list_size();
  for (int i = 0; i < this->equip_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Game2Battle_ChangeEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Game2Battle_ChangeEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Game2Battle_ChangeEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Game2Battle_ChangeEquip::MergeFrom(const Game2Battle_ChangeEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_list_.MergeFrom(from.equip_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nid()) {
      set_nid(from.nid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Game2Battle_ChangeEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Game2Battle_ChangeEquip::CopyFrom(const Game2Battle_ChangeEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game2Battle_ChangeEquip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Game2Battle_ChangeEquip::Swap(Game2Battle_ChangeEquip* other) {
  if (other != this) {
    std::swap(nid_, other->nid_);
    equip_list_.Swap(&other->equip_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Game2Battle_ChangeEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Game2Battle_ChangeEquip_descriptor_;
  metadata.reflection = Game2Battle_ChangeEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Game2Battle_FollowLeader::kNIdFieldNumber;
#endif  // !_MSC_VER

Game2Battle_FollowLeader::Game2Battle_FollowLeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Game2Battle_FollowLeader::InitAsDefaultInstance() {
}

Game2Battle_FollowLeader::Game2Battle_FollowLeader(const Game2Battle_FollowLeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Game2Battle_FollowLeader::SharedCtor() {
  _cached_size_ = 0;
  nid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Game2Battle_FollowLeader::~Game2Battle_FollowLeader() {
  SharedDtor();
}

void Game2Battle_FollowLeader::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Game2Battle_FollowLeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Game2Battle_FollowLeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Game2Battle_FollowLeader_descriptor_;
}

const Game2Battle_FollowLeader& Game2Battle_FollowLeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Game2Battle_FollowLeader* Game2Battle_FollowLeader::default_instance_ = NULL;

Game2Battle_FollowLeader* Game2Battle_FollowLeader::New() const {
  return new Game2Battle_FollowLeader;
}

void Game2Battle_FollowLeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Game2Battle_FollowLeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 nId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nid_)));
          set_has_nid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Game2Battle_FollowLeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 nId = 1;
  if (has_nid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->nid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Game2Battle_FollowLeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 nId = 1;
  if (has_nid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->nid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Game2Battle_FollowLeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 nId = 1;
    if (has_nid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Game2Battle_FollowLeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Game2Battle_FollowLeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Game2Battle_FollowLeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Game2Battle_FollowLeader::MergeFrom(const Game2Battle_FollowLeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nid()) {
      set_nid(from.nid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Game2Battle_FollowLeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Game2Battle_FollowLeader::CopyFrom(const Game2Battle_FollowLeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game2Battle_FollowLeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Game2Battle_FollowLeader::Swap(Game2Battle_FollowLeader* other) {
  if (other != this) {
    std::swap(nid_, other->nid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Game2Battle_FollowLeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Game2Battle_FollowLeader_descriptor_;
  metadata.reflection = Game2Battle_FollowLeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Game2Battle_ChangeMapPendingBranch::kNIdFieldNumber;
#endif  // !_MSC_VER

Game2Battle_ChangeMapPendingBranch::Game2Battle_ChangeMapPendingBranch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Game2Battle_ChangeMapPendingBranch::InitAsDefaultInstance() {
}

Game2Battle_ChangeMapPendingBranch::Game2Battle_ChangeMapPendingBranch(const Game2Battle_ChangeMapPendingBranch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Game2Battle_ChangeMapPendingBranch::SharedCtor() {
  _cached_size_ = 0;
  nid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Game2Battle_ChangeMapPendingBranch::~Game2Battle_ChangeMapPendingBranch() {
  SharedDtor();
}

void Game2Battle_ChangeMapPendingBranch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Game2Battle_ChangeMapPendingBranch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Game2Battle_ChangeMapPendingBranch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Game2Battle_ChangeMapPendingBranch_descriptor_;
}

const Game2Battle_ChangeMapPendingBranch& Game2Battle_ChangeMapPendingBranch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Game2Battle_ChangeMapPendingBranch* Game2Battle_ChangeMapPendingBranch::default_instance_ = NULL;

Game2Battle_ChangeMapPendingBranch* Game2Battle_ChangeMapPendingBranch::New() const {
  return new Game2Battle_ChangeMapPendingBranch;
}

void Game2Battle_ChangeMapPendingBranch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Game2Battle_ChangeMapPendingBranch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 nId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nid_)));
          set_has_nid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Game2Battle_ChangeMapPendingBranch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 nId = 1;
  if (has_nid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->nid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Game2Battle_ChangeMapPendingBranch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 nId = 1;
  if (has_nid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->nid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Game2Battle_ChangeMapPendingBranch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 nId = 1;
    if (has_nid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Game2Battle_ChangeMapPendingBranch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Game2Battle_ChangeMapPendingBranch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Game2Battle_ChangeMapPendingBranch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Game2Battle_ChangeMapPendingBranch::MergeFrom(const Game2Battle_ChangeMapPendingBranch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nid()) {
      set_nid(from.nid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Game2Battle_ChangeMapPendingBranch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Game2Battle_ChangeMapPendingBranch::CopyFrom(const Game2Battle_ChangeMapPendingBranch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game2Battle_ChangeMapPendingBranch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Game2Battle_ChangeMapPendingBranch::Swap(Game2Battle_ChangeMapPendingBranch* other) {
  if (other != this) {
    std::swap(nid_, other->nid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Game2Battle_ChangeMapPendingBranch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Game2Battle_ChangeMapPendingBranch_descriptor_;
  metadata.reflection = Game2Battle_ChangeMapPendingBranch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Client_ChangePet::kNIdFieldNumber;
const int Battle2Client_ChangePet::kPetidFieldNumber;
const int Battle2Client_ChangePet::kRankingFieldNumber;
#endif  // !_MSC_VER

Battle2Client_ChangePet::Battle2Client_ChangePet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Client_ChangePet::InitAsDefaultInstance() {
}

Battle2Client_ChangePet::Battle2Client_ChangePet(const Battle2Client_ChangePet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Client_ChangePet::SharedCtor() {
  _cached_size_ = 0;
  nid_ = 0u;
  petid_ = 0u;
  ranking_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Client_ChangePet::~Battle2Client_ChangePet() {
  SharedDtor();
}

void Battle2Client_ChangePet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Battle2Client_ChangePet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Client_ChangePet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Client_ChangePet_descriptor_;
}

const Battle2Client_ChangePet& Battle2Client_ChangePet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Client_ChangePet* Battle2Client_ChangePet::default_instance_ = NULL;

Battle2Client_ChangePet* Battle2Client_ChangePet::New() const {
  return new Battle2Client_ChangePet;
}

void Battle2Client_ChangePet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nid_ = 0u;
    petid_ = 0u;
    ranking_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Client_ChangePet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 nId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nid_)));
          set_has_nid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_petid;
        break;
      }

      // required uint32 petid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_petid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ranking;
        break;
      }

      // optional int32 ranking = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ranking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranking_)));
          set_has_ranking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Client_ChangePet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 nId = 1;
  if (has_nid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nid(), output);
  }

  // required uint32 petid = 2;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->petid(), output);
  }

  // optional int32 ranking = 3;
  if (has_ranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ranking(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Client_ChangePet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 nId = 1;
  if (has_nid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nid(), target);
  }

  // required uint32 petid = 2;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->petid(), target);
  }

  // optional int32 ranking = 3;
  if (has_ranking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ranking(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Client_ChangePet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 nId = 1;
    if (has_nid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nid());
    }

    // required uint32 petid = 2;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->petid());
    }

    // optional int32 ranking = 3;
    if (has_ranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranking());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Client_ChangePet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Client_ChangePet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Client_ChangePet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Client_ChangePet::MergeFrom(const Battle2Client_ChangePet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nid()) {
      set_nid(from.nid());
    }
    if (from.has_petid()) {
      set_petid(from.petid());
    }
    if (from.has_ranking()) {
      set_ranking(from.ranking());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Client_ChangePet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Client_ChangePet::CopyFrom(const Battle2Client_ChangePet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Client_ChangePet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Battle2Client_ChangePet::Swap(Battle2Client_ChangePet* other) {
  if (other != this) {
    std::swap(nid_, other->nid_);
    std::swap(petid_, other->petid_);
    std::swap(ranking_, other->ranking_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Client_ChangePet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Client_ChangePet_descriptor_;
  metadata.reflection = Battle2Client_ChangePet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Client_ChangeRide::kNIdFieldNumber;
const int Battle2Client_ChangeRide::kRideidFieldNumber;
const int Battle2Client_ChangeRide::kStatusFieldNumber;
#endif  // !_MSC_VER

Battle2Client_ChangeRide::Battle2Client_ChangeRide()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Client_ChangeRide::InitAsDefaultInstance() {
}

Battle2Client_ChangeRide::Battle2Client_ChangeRide(const Battle2Client_ChangeRide& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Client_ChangeRide::SharedCtor() {
  _cached_size_ = 0;
  nid_ = 0u;
  rideid_ = 0u;
  status_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Client_ChangeRide::~Battle2Client_ChangeRide() {
  SharedDtor();
}

void Battle2Client_ChangeRide::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Battle2Client_ChangeRide::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Client_ChangeRide::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Client_ChangeRide_descriptor_;
}

const Battle2Client_ChangeRide& Battle2Client_ChangeRide::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Client_ChangeRide* Battle2Client_ChangeRide::default_instance_ = NULL;

Battle2Client_ChangeRide* Battle2Client_ChangeRide::New() const {
  return new Battle2Client_ChangeRide;
}

void Battle2Client_ChangeRide::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nid_ = 0u;
    rideid_ = 0u;
    status_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Client_ChangeRide::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 nId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nid_)));
          set_has_nid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rideid;
        break;
      }

      // required uint32 rideid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rideid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rideid_)));
          set_has_rideid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required bool status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Client_ChangeRide::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 nId = 1;
  if (has_nid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nid(), output);
  }

  // required uint32 rideid = 2;
  if (has_rideid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rideid(), output);
  }

  // required bool status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Client_ChangeRide::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 nId = 1;
  if (has_nid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nid(), target);
  }

  // required uint32 rideid = 2;
  if (has_rideid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rideid(), target);
  }

  // required bool status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Client_ChangeRide::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 nId = 1;
    if (has_nid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nid());
    }

    // required uint32 rideid = 2;
    if (has_rideid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rideid());
    }

    // required bool status = 3;
    if (has_status()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Client_ChangeRide::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Client_ChangeRide* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Client_ChangeRide*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Client_ChangeRide::MergeFrom(const Battle2Client_ChangeRide& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nid()) {
      set_nid(from.nid());
    }
    if (from.has_rideid()) {
      set_rideid(from.rideid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Client_ChangeRide::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Client_ChangeRide::CopyFrom(const Battle2Client_ChangeRide& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Client_ChangeRide::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Battle2Client_ChangeRide::Swap(Battle2Client_ChangeRide* other) {
  if (other != this) {
    std::swap(nid_, other->nid_);
    std::swap(rideid_, other->rideid_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Client_ChangeRide::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Client_ChangeRide_descriptor_;
  metadata.reflection = Battle2Client_ChangeRide_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Client_ChangeAwaken::kNIdFieldNumber;
const int Battle2Client_ChangeAwaken::kAwakenidFieldNumber;
const int Battle2Client_ChangeAwaken::kStatusFieldNumber;
#endif  // !_MSC_VER

Battle2Client_ChangeAwaken::Battle2Client_ChangeAwaken()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Client_ChangeAwaken::InitAsDefaultInstance() {
}

Battle2Client_ChangeAwaken::Battle2Client_ChangeAwaken(const Battle2Client_ChangeAwaken& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Client_ChangeAwaken::SharedCtor() {
  _cached_size_ = 0;
  nid_ = 0u;
  awakenid_ = 0u;
  status_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Client_ChangeAwaken::~Battle2Client_ChangeAwaken() {
  SharedDtor();
}

void Battle2Client_ChangeAwaken::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Battle2Client_ChangeAwaken::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Client_ChangeAwaken::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Client_ChangeAwaken_descriptor_;
}

const Battle2Client_ChangeAwaken& Battle2Client_ChangeAwaken::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Client_ChangeAwaken* Battle2Client_ChangeAwaken::default_instance_ = NULL;

Battle2Client_ChangeAwaken* Battle2Client_ChangeAwaken::New() const {
  return new Battle2Client_ChangeAwaken;
}

void Battle2Client_ChangeAwaken::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nid_ = 0u;
    awakenid_ = 0u;
    status_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Client_ChangeAwaken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 nId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nid_)));
          set_has_nid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_awakenid;
        break;
      }

      // required uint32 awakenid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awakenid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &awakenid_)));
          set_has_awakenid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required bool status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Client_ChangeAwaken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 nId = 1;
  if (has_nid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nid(), output);
  }

  // required uint32 awakenid = 2;
  if (has_awakenid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->awakenid(), output);
  }

  // required bool status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Client_ChangeAwaken::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 nId = 1;
  if (has_nid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nid(), target);
  }

  // required uint32 awakenid = 2;
  if (has_awakenid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->awakenid(), target);
  }

  // required bool status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Client_ChangeAwaken::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 nId = 1;
    if (has_nid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nid());
    }

    // required uint32 awakenid = 2;
    if (has_awakenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->awakenid());
    }

    // required bool status = 3;
    if (has_status()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Client_ChangeAwaken::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Client_ChangeAwaken* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Client_ChangeAwaken*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Client_ChangeAwaken::MergeFrom(const Battle2Client_ChangeAwaken& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nid()) {
      set_nid(from.nid());
    }
    if (from.has_awakenid()) {
      set_awakenid(from.awakenid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Client_ChangeAwaken::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Client_ChangeAwaken::CopyFrom(const Battle2Client_ChangeAwaken& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Client_ChangeAwaken::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Battle2Client_ChangeAwaken::Swap(Battle2Client_ChangeAwaken* other) {
  if (other != this) {
    std::swap(nid_, other->nid_);
    std::swap(awakenid_, other->awakenid_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Client_ChangeAwaken::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Client_ChangeAwaken_descriptor_;
  metadata.reflection = Battle2Client_ChangeAwaken_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Client_ChangeAvatar::kNIdFieldNumber;
const int Battle2Client_ChangeAvatar::kAvataridFieldNumber;
const int Battle2Client_ChangeAvatar::kColoridFieldNumber;
#endif  // !_MSC_VER

Battle2Client_ChangeAvatar::Battle2Client_ChangeAvatar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Client_ChangeAvatar::InitAsDefaultInstance() {
}

Battle2Client_ChangeAvatar::Battle2Client_ChangeAvatar(const Battle2Client_ChangeAvatar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Client_ChangeAvatar::SharedCtor() {
  _cached_size_ = 0;
  nid_ = 0u;
  avatarid_ = 0u;
  colorid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Client_ChangeAvatar::~Battle2Client_ChangeAvatar() {
  SharedDtor();
}

void Battle2Client_ChangeAvatar::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Battle2Client_ChangeAvatar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Client_ChangeAvatar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Client_ChangeAvatar_descriptor_;
}

const Battle2Client_ChangeAvatar& Battle2Client_ChangeAvatar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Client_ChangeAvatar* Battle2Client_ChangeAvatar::default_instance_ = NULL;

Battle2Client_ChangeAvatar* Battle2Client_ChangeAvatar::New() const {
  return new Battle2Client_ChangeAvatar;
}

void Battle2Client_ChangeAvatar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nid_ = 0u;
    avatarid_ = 0u;
    colorid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Client_ChangeAvatar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 nId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nid_)));
          set_has_nid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_avatarid;
        break;
      }

      // required uint32 avatarid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avatarid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avatarid_)));
          set_has_avatarid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_colorid;
        break;
      }

      // required uint32 colorid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_colorid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &colorid_)));
          set_has_colorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Client_ChangeAvatar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 nId = 1;
  if (has_nid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nid(), output);
  }

  // required uint32 avatarid = 2;
  if (has_avatarid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->avatarid(), output);
  }

  // required uint32 colorid = 3;
  if (has_colorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->colorid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Client_ChangeAvatar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 nId = 1;
  if (has_nid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nid(), target);
  }

  // required uint32 avatarid = 2;
  if (has_avatarid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->avatarid(), target);
  }

  // required uint32 colorid = 3;
  if (has_colorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->colorid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Client_ChangeAvatar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 nId = 1;
    if (has_nid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nid());
    }

    // required uint32 avatarid = 2;
    if (has_avatarid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avatarid());
    }

    // required uint32 colorid = 3;
    if (has_colorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->colorid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Client_ChangeAvatar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Client_ChangeAvatar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Client_ChangeAvatar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Client_ChangeAvatar::MergeFrom(const Battle2Client_ChangeAvatar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nid()) {
      set_nid(from.nid());
    }
    if (from.has_avatarid()) {
      set_avatarid(from.avatarid());
    }
    if (from.has_colorid()) {
      set_colorid(from.colorid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Client_ChangeAvatar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Client_ChangeAvatar::CopyFrom(const Battle2Client_ChangeAvatar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Client_ChangeAvatar::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Battle2Client_ChangeAvatar::Swap(Battle2Client_ChangeAvatar* other) {
  if (other != this) {
    std::swap(nid_, other->nid_);
    std::swap(avatarid_, other->avatarid_);
    std::swap(colorid_, other->colorid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Client_ChangeAvatar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Client_ChangeAvatar_descriptor_;
  metadata.reflection = Battle2Client_ChangeAvatar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Client_ChangeSuit::kNIdFieldNumber;
const int Battle2Client_ChangeSuit::kSuitidFieldNumber;
#endif  // !_MSC_VER

Battle2Client_ChangeSuit::Battle2Client_ChangeSuit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Client_ChangeSuit::InitAsDefaultInstance() {
}

Battle2Client_ChangeSuit::Battle2Client_ChangeSuit(const Battle2Client_ChangeSuit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Client_ChangeSuit::SharedCtor() {
  _cached_size_ = 0;
  nid_ = 0u;
  suitid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Client_ChangeSuit::~Battle2Client_ChangeSuit() {
  SharedDtor();
}

void Battle2Client_ChangeSuit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Battle2Client_ChangeSuit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Client_ChangeSuit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Client_ChangeSuit_descriptor_;
}

const Battle2Client_ChangeSuit& Battle2Client_ChangeSuit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Client_ChangeSuit* Battle2Client_ChangeSuit::default_instance_ = NULL;

Battle2Client_ChangeSuit* Battle2Client_ChangeSuit::New() const {
  return new Battle2Client_ChangeSuit;
}

void Battle2Client_ChangeSuit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nid_ = 0u;
    suitid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Client_ChangeSuit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 nId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nid_)));
          set_has_nid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_suitid;
        break;
      }

      // required uint32 suitid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_suitid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &suitid_)));
          set_has_suitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Client_ChangeSuit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 nId = 1;
  if (has_nid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nid(), output);
  }

  // required uint32 suitid = 2;
  if (has_suitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->suitid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Client_ChangeSuit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 nId = 1;
  if (has_nid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nid(), target);
  }

  // required uint32 suitid = 2;
  if (has_suitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->suitid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Client_ChangeSuit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 nId = 1;
    if (has_nid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nid());
    }

    // required uint32 suitid = 2;
    if (has_suitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->suitid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Client_ChangeSuit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Client_ChangeSuit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Client_ChangeSuit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Client_ChangeSuit::MergeFrom(const Battle2Client_ChangeSuit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nid()) {
      set_nid(from.nid());
    }
    if (from.has_suitid()) {
      set_suitid(from.suitid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Client_ChangeSuit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Client_ChangeSuit::CopyFrom(const Battle2Client_ChangeSuit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Client_ChangeSuit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Battle2Client_ChangeSuit::Swap(Battle2Client_ChangeSuit* other) {
  if (other != this) {
    std::swap(nid_, other->nid_);
    std::swap(suitid_, other->suitid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Client_ChangeSuit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Client_ChangeSuit_descriptor_;
  metadata.reflection = Battle2Client_ChangeSuit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Client_ReconnectUnDoTrigger::kTriggeridFieldNumber;
#endif  // !_MSC_VER

Battle2Client_ReconnectUnDoTrigger::Battle2Client_ReconnectUnDoTrigger()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Client_ReconnectUnDoTrigger::InitAsDefaultInstance() {
}

Battle2Client_ReconnectUnDoTrigger::Battle2Client_ReconnectUnDoTrigger(const Battle2Client_ReconnectUnDoTrigger& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Client_ReconnectUnDoTrigger::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Client_ReconnectUnDoTrigger::~Battle2Client_ReconnectUnDoTrigger() {
  SharedDtor();
}

void Battle2Client_ReconnectUnDoTrigger::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Battle2Client_ReconnectUnDoTrigger::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Client_ReconnectUnDoTrigger::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Client_ReconnectUnDoTrigger_descriptor_;
}

const Battle2Client_ReconnectUnDoTrigger& Battle2Client_ReconnectUnDoTrigger::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Client_ReconnectUnDoTrigger* Battle2Client_ReconnectUnDoTrigger::default_instance_ = NULL;

Battle2Client_ReconnectUnDoTrigger* Battle2Client_ReconnectUnDoTrigger::New() const {
  return new Battle2Client_ReconnectUnDoTrigger;
}

void Battle2Client_ReconnectUnDoTrigger::Clear() {
  triggerid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Client_ReconnectUnDoTrigger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 triggerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_triggerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_triggerid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_triggerid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_triggerid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Client_ReconnectUnDoTrigger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 triggerid = 1;
  for (int i = 0; i < this->triggerid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->triggerid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Client_ReconnectUnDoTrigger::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 triggerid = 1;
  for (int i = 0; i < this->triggerid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->triggerid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Client_ReconnectUnDoTrigger::ByteSize() const {
  int total_size = 0;

  // repeated int32 triggerid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->triggerid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->triggerid(i));
    }
    total_size += 1 * this->triggerid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Client_ReconnectUnDoTrigger::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Client_ReconnectUnDoTrigger* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Client_ReconnectUnDoTrigger*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Client_ReconnectUnDoTrigger::MergeFrom(const Battle2Client_ReconnectUnDoTrigger& from) {
  GOOGLE_CHECK_NE(&from, this);
  triggerid_.MergeFrom(from.triggerid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Client_ReconnectUnDoTrigger::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Client_ReconnectUnDoTrigger::CopyFrom(const Battle2Client_ReconnectUnDoTrigger& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Client_ReconnectUnDoTrigger::IsInitialized() const {

  return true;
}

void Battle2Client_ReconnectUnDoTrigger::Swap(Battle2Client_ReconnectUnDoTrigger* other) {
  if (other != this) {
    triggerid_.Swap(&other->triggerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Client_ReconnectUnDoTrigger::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Client_ReconnectUnDoTrigger_descriptor_;
  metadata.reflection = Battle2Client_ReconnectUnDoTrigger_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Game2Battle_UpdatePlayerValue::kTypeFieldNumber;
const int Game2Battle_UpdatePlayerValue::kIValueFieldNumber;
const int Game2Battle_UpdatePlayerValue::kLlValueFieldNumber;
const int Game2Battle_UpdatePlayerValue::kSzValueFieldNumber;
#endif  // !_MSC_VER

Game2Battle_UpdatePlayerValue::Game2Battle_UpdatePlayerValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Game2Battle_UpdatePlayerValue::InitAsDefaultInstance() {
}

Game2Battle_UpdatePlayerValue::Game2Battle_UpdatePlayerValue(const Game2Battle_UpdatePlayerValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Game2Battle_UpdatePlayerValue::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ivalue_ = 0;
  llvalue_ = GOOGLE_LONGLONG(0);
  szvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Game2Battle_UpdatePlayerValue::~Game2Battle_UpdatePlayerValue() {
  SharedDtor();
}

void Game2Battle_UpdatePlayerValue::SharedDtor() {
  if (szvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete szvalue_;
  }
  if (this != default_instance_) {
  }
}

void Game2Battle_UpdatePlayerValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Game2Battle_UpdatePlayerValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Game2Battle_UpdatePlayerValue_descriptor_;
}

const Game2Battle_UpdatePlayerValue& Game2Battle_UpdatePlayerValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Game2Battle_UpdatePlayerValue* Game2Battle_UpdatePlayerValue::default_instance_ = NULL;

Game2Battle_UpdatePlayerValue* Game2Battle_UpdatePlayerValue::New() const {
  return new Game2Battle_UpdatePlayerValue;
}

void Game2Battle_UpdatePlayerValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    ivalue_ = 0;
    llvalue_ = GOOGLE_LONGLONG(0);
    if (has_szvalue()) {
      if (szvalue_ != &::google::protobuf::internal::kEmptyString) {
        szvalue_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Game2Battle_UpdatePlayerValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iValue;
        break;
      }

      // optional int32 iValue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ivalue_)));
          set_has_ivalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_llValue;
        break;
      }

      // optional int64 llValue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_llValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &llvalue_)));
          set_has_llvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_szValue;
        break;
      }

      // optional string szValue = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_szValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szvalue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->szvalue().data(), this->szvalue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Game2Battle_UpdatePlayerValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional int32 iValue = 2;
  if (has_ivalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ivalue(), output);
  }

  // optional int64 llValue = 3;
  if (has_llvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->llvalue(), output);
  }

  // optional string szValue = 4;
  if (has_szvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szvalue().data(), this->szvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->szvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Game2Battle_UpdatePlayerValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional int32 iValue = 2;
  if (has_ivalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ivalue(), target);
  }

  // optional int64 llValue = 3;
  if (has_llvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->llvalue(), target);
  }

  // optional string szValue = 4;
  if (has_szvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szvalue().data(), this->szvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->szvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Game2Battle_UpdatePlayerValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional int32 iValue = 2;
    if (has_ivalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ivalue());
    }

    // optional int64 llValue = 3;
    if (has_llvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->llvalue());
    }

    // optional string szValue = 4;
    if (has_szvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szvalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Game2Battle_UpdatePlayerValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Game2Battle_UpdatePlayerValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Game2Battle_UpdatePlayerValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Game2Battle_UpdatePlayerValue::MergeFrom(const Game2Battle_UpdatePlayerValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_ivalue()) {
      set_ivalue(from.ivalue());
    }
    if (from.has_llvalue()) {
      set_llvalue(from.llvalue());
    }
    if (from.has_szvalue()) {
      set_szvalue(from.szvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Game2Battle_UpdatePlayerValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Game2Battle_UpdatePlayerValue::CopyFrom(const Game2Battle_UpdatePlayerValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game2Battle_UpdatePlayerValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Game2Battle_UpdatePlayerValue::Swap(Game2Battle_UpdatePlayerValue* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(ivalue_, other->ivalue_);
    std::swap(llvalue_, other->llvalue_);
    std::swap(szvalue_, other->szvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Game2Battle_UpdatePlayerValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Game2Battle_UpdatePlayerValue_descriptor_;
  metadata.reflection = Game2Battle_UpdatePlayerValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Game_EnterScene::kMapidFieldNumber;
const int Battle2Game_EnterScene::kPtFieldNumber;
const int Battle2Game_EnterScene::kDirFieldNumber;
const int Battle2Game_EnterScene::kLayerFieldNumber;
const int Battle2Game_EnterScene::kIpFieldNumber;
const int Battle2Game_EnterScene::kPortFieldNumber;
#endif  // !_MSC_VER

Battle2Game_EnterScene::Battle2Game_EnterScene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Game_EnterScene::InitAsDefaultInstance() {
  pt_ = const_cast< ::proto::message::Point3D*>(&::proto::message::Point3D::default_instance());
}

Battle2Game_EnterScene::Battle2Game_EnterScene(const Battle2Game_EnterScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Game_EnterScene::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0;
  pt_ = NULL;
  dir_ = 0;
  layer_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Game_EnterScene::~Battle2Game_EnterScene() {
  SharedDtor();
}

void Battle2Game_EnterScene::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
    delete pt_;
  }
}

void Battle2Game_EnterScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Game_EnterScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Game_EnterScene_descriptor_;
}

const Battle2Game_EnterScene& Battle2Game_EnterScene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Game_EnterScene* Battle2Game_EnterScene::default_instance_ = NULL;

Battle2Game_EnterScene* Battle2Game_EnterScene::New() const {
  return new Battle2Game_EnterScene;
}

void Battle2Game_EnterScene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0;
    if (has_pt()) {
      if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
    }
    dir_ = 0;
    layer_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Game_EnterScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pt;
        break;
      }

      // required .proto.message.Point3D pt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_dir;
        break;
      }

      // required float dir = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_layer;
        break;
      }

      // required int32 layer = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ip;
        break;
      }

      // optional string ip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_port;
        break;
      }

      // optional int32 port = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Game_EnterScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mapid = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mapid(), output);
  }

  // required .proto.message.Point3D pt = 2;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pt(), output);
  }

  // required float dir = 3;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->dir(), output);
  }

  // required int32 layer = 4;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->layer(), output);
  }

  // optional string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->ip(), output);
  }

  // optional int32 port = 6;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Game_EnterScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mapid = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mapid(), target);
  }

  // required .proto.message.Point3D pt = 2;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pt(), target);
  }

  // required float dir = 3;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->dir(), target);
  }

  // required int32 layer = 4;
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->layer(), target);
  }

  // optional string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ip(), target);
  }

  // optional int32 port = 6;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Game_EnterScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mapid = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // required .proto.message.Point3D pt = 2;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

    // required float dir = 3;
    if (has_dir()) {
      total_size += 1 + 4;
    }

    // required int32 layer = 4;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layer());
    }

    // optional string ip = 5;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 6;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Game_EnterScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Game_EnterScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Game_EnterScene*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Game_EnterScene::MergeFrom(const Battle2Game_EnterScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_pt()) {
      mutable_pt()->::proto::message::Point3D::MergeFrom(from.pt());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_layer()) {
      set_layer(from.layer());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Game_EnterScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Game_EnterScene::CopyFrom(const Battle2Game_EnterScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Game_EnterScene::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Battle2Game_EnterScene::Swap(Battle2Game_EnterScene* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(pt_, other->pt_);
    std::swap(dir_, other->dir_);
    std::swap(layer_, other->layer_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Game_EnterScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Game_EnterScene_descriptor_;
  metadata.reflection = Battle2Game_EnterScene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Client_EnterScene::kMapidFieldNumber;
const int Battle2Client_EnterScene::kPtFieldNumber;
const int Battle2Client_EnterScene::kDirFieldNumber;
const int Battle2Client_EnterScene::kLayerFieldNumber;
#endif  // !_MSC_VER

Battle2Client_EnterScene::Battle2Client_EnterScene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Client_EnterScene::InitAsDefaultInstance() {
  pt_ = const_cast< ::proto::message::Point3D*>(&::proto::message::Point3D::default_instance());
}

Battle2Client_EnterScene::Battle2Client_EnterScene(const Battle2Client_EnterScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Client_EnterScene::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0;
  pt_ = NULL;
  dir_ = 0;
  layer_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Client_EnterScene::~Battle2Client_EnterScene() {
  SharedDtor();
}

void Battle2Client_EnterScene::SharedDtor() {
  if (this != default_instance_) {
    delete pt_;
  }
}

void Battle2Client_EnterScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Client_EnterScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Client_EnterScene_descriptor_;
}

const Battle2Client_EnterScene& Battle2Client_EnterScene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Client_EnterScene* Battle2Client_EnterScene::default_instance_ = NULL;

Battle2Client_EnterScene* Battle2Client_EnterScene::New() const {
  return new Battle2Client_EnterScene;
}

void Battle2Client_EnterScene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0;
    if (has_pt()) {
      if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
    }
    dir_ = 0;
    layer_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Client_EnterScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pt;
        break;
      }

      // required .proto.message.Point3D pt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_dir;
        break;
      }

      // required float dir = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_layer;
        break;
      }

      // required int32 layer = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Client_EnterScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mapid = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mapid(), output);
  }

  // required .proto.message.Point3D pt = 2;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pt(), output);
  }

  // required float dir = 3;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->dir(), output);
  }

  // required int32 layer = 4;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->layer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Client_EnterScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mapid = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mapid(), target);
  }

  // required .proto.message.Point3D pt = 2;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pt(), target);
  }

  // required float dir = 3;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->dir(), target);
  }

  // required int32 layer = 4;
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->layer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Client_EnterScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mapid = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // required .proto.message.Point3D pt = 2;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

    // required float dir = 3;
    if (has_dir()) {
      total_size += 1 + 4;
    }

    // required int32 layer = 4;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Client_EnterScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Client_EnterScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Client_EnterScene*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Client_EnterScene::MergeFrom(const Battle2Client_EnterScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_pt()) {
      mutable_pt()->::proto::message::Point3D::MergeFrom(from.pt());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_layer()) {
      set_layer(from.layer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Client_EnterScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Client_EnterScene::CopyFrom(const Battle2Client_EnterScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Client_EnterScene::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Battle2Client_EnterScene::Swap(Battle2Client_EnterScene* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(pt_, other->pt_);
    std::swap(dir_, other->dir_);
    std::swap(layer_, other->layer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Client_EnterScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Client_EnterScene_descriptor_;
  metadata.reflection = Battle2Client_EnterScene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Client2Battle_ClientLoadOK::kUuidFieldNumber;
const int Client2Battle_ClientLoadOK::kDungeonAssignIdFieldNumber;
#endif  // !_MSC_VER

Client2Battle_ClientLoadOK::Client2Battle_ClientLoadOK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Client2Battle_ClientLoadOK::InitAsDefaultInstance() {
}

Client2Battle_ClientLoadOK::Client2Battle_ClientLoadOK(const Client2Battle_ClientLoadOK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Client2Battle_ClientLoadOK::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = GOOGLE_ULONGLONG(0);
  dungeon_assign_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Client2Battle_ClientLoadOK::~Client2Battle_ClientLoadOK() {
  SharedDtor();
}

void Client2Battle_ClientLoadOK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Client2Battle_ClientLoadOK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Client2Battle_ClientLoadOK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Client2Battle_ClientLoadOK_descriptor_;
}

const Client2Battle_ClientLoadOK& Client2Battle_ClientLoadOK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Client2Battle_ClientLoadOK* Client2Battle_ClientLoadOK::default_instance_ = NULL;

Client2Battle_ClientLoadOK* Client2Battle_ClientLoadOK::New() const {
  return new Client2Battle_ClientLoadOK;
}

void Client2Battle_ClientLoadOK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uuid_ = GOOGLE_ULONGLONG(0);
    dungeon_assign_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Client2Battle_ClientLoadOK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dungeon_assign_id;
        break;
      }

      // optional uint32 dungeon_assign_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dungeon_assign_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dungeon_assign_id_)));
          set_has_dungeon_assign_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Client2Battle_ClientLoadOK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uuid(), output);
  }

  // optional uint32 dungeon_assign_id = 2;
  if (has_dungeon_assign_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dungeon_assign_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Client2Battle_ClientLoadOK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uuid(), target);
  }

  // optional uint32 dungeon_assign_id = 2;
  if (has_dungeon_assign_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dungeon_assign_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Client2Battle_ClientLoadOK::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional uint32 dungeon_assign_id = 2;
    if (has_dungeon_assign_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dungeon_assign_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Client2Battle_ClientLoadOK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Client2Battle_ClientLoadOK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Client2Battle_ClientLoadOK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Client2Battle_ClientLoadOK::MergeFrom(const Client2Battle_ClientLoadOK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_dungeon_assign_id()) {
      set_dungeon_assign_id(from.dungeon_assign_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Client2Battle_ClientLoadOK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Client2Battle_ClientLoadOK::CopyFrom(const Client2Battle_ClientLoadOK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Client2Battle_ClientLoadOK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Client2Battle_ClientLoadOK::Swap(Client2Battle_ClientLoadOK* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(dungeon_assign_id_, other->dungeon_assign_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Client2Battle_ClientLoadOK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Client2Battle_ClientLoadOK_descriptor_;
  metadata.reflection = Client2Battle_ClientLoadOK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Client2Battle_SyncMove::kPtFieldNumber;
const int Client2Battle_SyncMove::kDirFieldNumber;
const int Client2Battle_SyncMove::kArrivalFieldNumber;
const int Client2Battle_SyncMove::kObjTypeFieldNumber;
const int Client2Battle_SyncMove::kSpeedFieldNumber;
#endif  // !_MSC_VER

Client2Battle_SyncMove::Client2Battle_SyncMove()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Client2Battle_SyncMove::InitAsDefaultInstance() {
  pt_ = const_cast< ::proto::message::Point3D*>(&::proto::message::Point3D::default_instance());
}

Client2Battle_SyncMove::Client2Battle_SyncMove(const Client2Battle_SyncMove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Client2Battle_SyncMove::SharedCtor() {
  _cached_size_ = 0;
  pt_ = NULL;
  dir_ = 0;
  arrival_ = 0;
  objtype_ = 0;
  speed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Client2Battle_SyncMove::~Client2Battle_SyncMove() {
  SharedDtor();
}

void Client2Battle_SyncMove::SharedDtor() {
  if (this != default_instance_) {
    delete pt_;
  }
}

void Client2Battle_SyncMove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Client2Battle_SyncMove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Client2Battle_SyncMove_descriptor_;
}

const Client2Battle_SyncMove& Client2Battle_SyncMove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Client2Battle_SyncMove* Client2Battle_SyncMove::default_instance_ = NULL;

Client2Battle_SyncMove* Client2Battle_SyncMove::New() const {
  return new Client2Battle_SyncMove;
}

void Client2Battle_SyncMove::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pt()) {
      if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
    }
    dir_ = 0;
    arrival_ = 0;
    objtype_ = 0;
    speed_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Client2Battle_SyncMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.message.Point3D pt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_dir;
        break;
      }

      // required float dir = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_arrival;
        break;
      }

      // optional int32 arrival = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arrival:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arrival_)));
          set_has_arrival();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_objType;
        break;
      }

      // optional int32 objType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_objType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objtype_)));
          set_has_objtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_speed;
        break;
      }

      // optional float speed = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Client2Battle_SyncMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .proto.message.Point3D pt = 1;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pt(), output);
  }

  // required float dir = 2;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->dir(), output);
  }

  // optional int32 arrival = 3;
  if (has_arrival()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->arrival(), output);
  }

  // optional int32 objType = 4;
  if (has_objtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->objtype(), output);
  }

  // optional float speed = 5;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->speed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Client2Battle_SyncMove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .proto.message.Point3D pt = 1;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pt(), target);
  }

  // required float dir = 2;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->dir(), target);
  }

  // optional int32 arrival = 3;
  if (has_arrival()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->arrival(), target);
  }

  // optional int32 objType = 4;
  if (has_objtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->objtype(), target);
  }

  // optional float speed = 5;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->speed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Client2Battle_SyncMove::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto.message.Point3D pt = 1;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

    // required float dir = 2;
    if (has_dir()) {
      total_size += 1 + 4;
    }

    // optional int32 arrival = 3;
    if (has_arrival()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arrival());
    }

    // optional int32 objType = 4;
    if (has_objtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objtype());
    }

    // optional float speed = 5;
    if (has_speed()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Client2Battle_SyncMove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Client2Battle_SyncMove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Client2Battle_SyncMove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Client2Battle_SyncMove::MergeFrom(const Client2Battle_SyncMove& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pt()) {
      mutable_pt()->::proto::message::Point3D::MergeFrom(from.pt());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_arrival()) {
      set_arrival(from.arrival());
    }
    if (from.has_objtype()) {
      set_objtype(from.objtype());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Client2Battle_SyncMove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Client2Battle_SyncMove::CopyFrom(const Client2Battle_SyncMove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Client2Battle_SyncMove::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Client2Battle_SyncMove::Swap(Client2Battle_SyncMove* other) {
  if (other != this) {
    std::swap(pt_, other->pt_);
    std::swap(dir_, other->dir_);
    std::swap(arrival_, other->arrival_);
    std::swap(objtype_, other->objtype_);
    std::swap(speed_, other->speed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Client2Battle_SyncMove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Client2Battle_SyncMove_descriptor_;
  metadata.reflection = Client2Battle_SyncMove_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Client2Battle_GetMapBranch::Client2Battle_GetMapBranch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Client2Battle_GetMapBranch::InitAsDefaultInstance() {
}

Client2Battle_GetMapBranch::Client2Battle_GetMapBranch(const Client2Battle_GetMapBranch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Client2Battle_GetMapBranch::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Client2Battle_GetMapBranch::~Client2Battle_GetMapBranch() {
  SharedDtor();
}

void Client2Battle_GetMapBranch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Client2Battle_GetMapBranch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Client2Battle_GetMapBranch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Client2Battle_GetMapBranch_descriptor_;
}

const Client2Battle_GetMapBranch& Client2Battle_GetMapBranch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Client2Battle_GetMapBranch* Client2Battle_GetMapBranch::default_instance_ = NULL;

Client2Battle_GetMapBranch* Client2Battle_GetMapBranch::New() const {
  return new Client2Battle_GetMapBranch;
}

void Client2Battle_GetMapBranch::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Client2Battle_GetMapBranch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Client2Battle_GetMapBranch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Client2Battle_GetMapBranch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Client2Battle_GetMapBranch::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Client2Battle_GetMapBranch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Client2Battle_GetMapBranch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Client2Battle_GetMapBranch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Client2Battle_GetMapBranch::MergeFrom(const Client2Battle_GetMapBranch& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Client2Battle_GetMapBranch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Client2Battle_GetMapBranch::CopyFrom(const Client2Battle_GetMapBranch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Client2Battle_GetMapBranch::IsInitialized() const {

  return true;
}

void Client2Battle_GetMapBranch::Swap(Client2Battle_GetMapBranch* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Client2Battle_GetMapBranch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Client2Battle_GetMapBranch_descriptor_;
  metadata.reflection = Client2Battle_GetMapBranch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Client2Battle_ChangeBranch::kBranchIdFieldNumber;
#endif  // !_MSC_VER

Client2Battle_ChangeBranch::Client2Battle_ChangeBranch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Client2Battle_ChangeBranch::InitAsDefaultInstance() {
}

Client2Battle_ChangeBranch::Client2Battle_ChangeBranch(const Client2Battle_ChangeBranch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Client2Battle_ChangeBranch::SharedCtor() {
  _cached_size_ = 0;
  branchid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Client2Battle_ChangeBranch::~Client2Battle_ChangeBranch() {
  SharedDtor();
}

void Client2Battle_ChangeBranch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Client2Battle_ChangeBranch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Client2Battle_ChangeBranch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Client2Battle_ChangeBranch_descriptor_;
}

const Client2Battle_ChangeBranch& Client2Battle_ChangeBranch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Client2Battle_ChangeBranch* Client2Battle_ChangeBranch::default_instance_ = NULL;

Client2Battle_ChangeBranch* Client2Battle_ChangeBranch::New() const {
  return new Client2Battle_ChangeBranch;
}

void Client2Battle_ChangeBranch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    branchid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Client2Battle_ChangeBranch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 BranchId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &branchid_)));
          set_has_branchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Client2Battle_ChangeBranch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 BranchId = 1;
  if (has_branchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->branchid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Client2Battle_ChangeBranch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 BranchId = 1;
  if (has_branchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->branchid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Client2Battle_ChangeBranch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 BranchId = 1;
    if (has_branchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->branchid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Client2Battle_ChangeBranch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Client2Battle_ChangeBranch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Client2Battle_ChangeBranch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Client2Battle_ChangeBranch::MergeFrom(const Client2Battle_ChangeBranch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_branchid()) {
      set_branchid(from.branchid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Client2Battle_ChangeBranch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Client2Battle_ChangeBranch::CopyFrom(const Client2Battle_ChangeBranch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Client2Battle_ChangeBranch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Client2Battle_ChangeBranch::Swap(Client2Battle_ChangeBranch* other) {
  if (other != this) {
    std::swap(branchid_, other->branchid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Client2Battle_ChangeBranch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Client2Battle_ChangeBranch_descriptor_;
  metadata.reflection = Client2Battle_ChangeBranch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Client_SyncPlayerAppear::kUiObjIdFieldNumber;
const int Battle2Client_SyncPlayerAppear::kUiTypeFieldNumber;
const int Battle2Client_SyncPlayerAppear::kSPlyInfoFieldNumber;
const int Battle2Client_SyncPlayerAppear::kSBoatInfoFieldNumber;
const int Battle2Client_SyncPlayerAppear::kStatusFieldNumber;
const int Battle2Client_SyncPlayerAppear::kAttackModeFieldNumber;
#endif  // !_MSC_VER

Battle2Client_SyncPlayerAppear::Battle2Client_SyncPlayerAppear()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Client_SyncPlayerAppear::InitAsDefaultInstance() {
  splyinfo_ = const_cast< ::proto::message::BattlePlayerInfo*>(&::proto::message::BattlePlayerInfo::default_instance());
  sboatinfo_ = const_cast< ::proto::message::BattleBoatInfo*>(&::proto::message::BattleBoatInfo::default_instance());
}

Battle2Client_SyncPlayerAppear::Battle2Client_SyncPlayerAppear(const Battle2Client_SyncPlayerAppear& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Client_SyncPlayerAppear::SharedCtor() {
  _cached_size_ = 0;
  uiobjid_ = 0u;
  uitype_ = 0u;
  splyinfo_ = NULL;
  sboatinfo_ = NULL;
  status_ = GOOGLE_ULONGLONG(0);
  attack_mode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Client_SyncPlayerAppear::~Battle2Client_SyncPlayerAppear() {
  SharedDtor();
}

void Battle2Client_SyncPlayerAppear::SharedDtor() {
  if (this != default_instance_) {
    delete splyinfo_;
    delete sboatinfo_;
  }
}

void Battle2Client_SyncPlayerAppear::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Client_SyncPlayerAppear::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Client_SyncPlayerAppear_descriptor_;
}

const Battle2Client_SyncPlayerAppear& Battle2Client_SyncPlayerAppear::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Client_SyncPlayerAppear* Battle2Client_SyncPlayerAppear::default_instance_ = NULL;

Battle2Client_SyncPlayerAppear* Battle2Client_SyncPlayerAppear::New() const {
  return new Battle2Client_SyncPlayerAppear;
}

void Battle2Client_SyncPlayerAppear::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uiobjid_ = 0u;
    uitype_ = 0u;
    if (has_splyinfo()) {
      if (splyinfo_ != NULL) splyinfo_->::proto::message::BattlePlayerInfo::Clear();
    }
    if (has_sboatinfo()) {
      if (sboatinfo_ != NULL) sboatinfo_->::proto::message::BattleBoatInfo::Clear();
    }
    status_ = GOOGLE_ULONGLONG(0);
    attack_mode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Client_SyncPlayerAppear::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uiObjId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiobjid_)));
          set_has_uiobjid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiType;
        break;
      }

      // required uint32 uiType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uitype_)));
          set_has_uitype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sPlyInfo;
        break;
      }

      // required .proto.message.BattlePlayerInfo sPlyInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sPlyInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_splyinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sBoatInfo;
        break;
      }

      // optional .proto.message.BattleBoatInfo sBoatInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sBoatInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sboatinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Status;
        break;
      }

      // optional uint64 Status = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_attack_mode;
        break;
      }

      // optional uint32 attack_mode = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attack_mode_)));
          set_has_attack_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Client_SyncPlayerAppear::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uiObjId = 1;
  if (has_uiobjid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uiobjid(), output);
  }

  // required uint32 uiType = 2;
  if (has_uitype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uitype(), output);
  }

  // required .proto.message.BattlePlayerInfo sPlyInfo = 3;
  if (has_splyinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->splyinfo(), output);
  }

  // optional .proto.message.BattleBoatInfo sBoatInfo = 4;
  if (has_sboatinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->sboatinfo(), output);
  }

  // optional uint64 Status = 5;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->status(), output);
  }

  // optional uint32 attack_mode = 6;
  if (has_attack_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->attack_mode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Client_SyncPlayerAppear::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uiObjId = 1;
  if (has_uiobjid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uiobjid(), target);
  }

  // required uint32 uiType = 2;
  if (has_uitype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uitype(), target);
  }

  // required .proto.message.BattlePlayerInfo sPlyInfo = 3;
  if (has_splyinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->splyinfo(), target);
  }

  // optional .proto.message.BattleBoatInfo sBoatInfo = 4;
  if (has_sboatinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->sboatinfo(), target);
  }

  // optional uint64 Status = 5;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->status(), target);
  }

  // optional uint32 attack_mode = 6;
  if (has_attack_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->attack_mode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Client_SyncPlayerAppear::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uiObjId = 1;
    if (has_uiobjid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiobjid());
    }

    // required uint32 uiType = 2;
    if (has_uitype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uitype());
    }

    // required .proto.message.BattlePlayerInfo sPlyInfo = 3;
    if (has_splyinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->splyinfo());
    }

    // optional .proto.message.BattleBoatInfo sBoatInfo = 4;
    if (has_sboatinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sboatinfo());
    }

    // optional uint64 Status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->status());
    }

    // optional uint32 attack_mode = 6;
    if (has_attack_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attack_mode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Client_SyncPlayerAppear::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Client_SyncPlayerAppear* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Client_SyncPlayerAppear*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Client_SyncPlayerAppear::MergeFrom(const Battle2Client_SyncPlayerAppear& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uiobjid()) {
      set_uiobjid(from.uiobjid());
    }
    if (from.has_uitype()) {
      set_uitype(from.uitype());
    }
    if (from.has_splyinfo()) {
      mutable_splyinfo()->::proto::message::BattlePlayerInfo::MergeFrom(from.splyinfo());
    }
    if (from.has_sboatinfo()) {
      mutable_sboatinfo()->::proto::message::BattleBoatInfo::MergeFrom(from.sboatinfo());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_attack_mode()) {
      set_attack_mode(from.attack_mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Client_SyncPlayerAppear::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Client_SyncPlayerAppear::CopyFrom(const Battle2Client_SyncPlayerAppear& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Client_SyncPlayerAppear::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_splyinfo()) {
    if (!this->splyinfo().IsInitialized()) return false;
  }
  return true;
}

void Battle2Client_SyncPlayerAppear::Swap(Battle2Client_SyncPlayerAppear* other) {
  if (other != this) {
    std::swap(uiobjid_, other->uiobjid_);
    std::swap(uitype_, other->uitype_);
    std::swap(splyinfo_, other->splyinfo_);
    std::swap(sboatinfo_, other->sboatinfo_);
    std::swap(status_, other->status_);
    std::swap(attack_mode_, other->attack_mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Client_SyncPlayerAppear::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Client_SyncPlayerAppear_descriptor_;
  metadata.reflection = Battle2Client_SyncPlayerAppear_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Client_SyncObjDisappear::kUiObjIdFieldNumber;
const int Battle2Client_SyncObjDisappear::kUiObjTypeFieldNumber;
#endif  // !_MSC_VER

Battle2Client_SyncObjDisappear::Battle2Client_SyncObjDisappear()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Client_SyncObjDisappear::InitAsDefaultInstance() {
}

Battle2Client_SyncObjDisappear::Battle2Client_SyncObjDisappear(const Battle2Client_SyncObjDisappear& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Client_SyncObjDisappear::SharedCtor() {
  _cached_size_ = 0;
  uiobjid_ = 0u;
  uiobjtype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Client_SyncObjDisappear::~Battle2Client_SyncObjDisappear() {
  SharedDtor();
}

void Battle2Client_SyncObjDisappear::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Battle2Client_SyncObjDisappear::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Client_SyncObjDisappear::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Client_SyncObjDisappear_descriptor_;
}

const Battle2Client_SyncObjDisappear& Battle2Client_SyncObjDisappear::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Client_SyncObjDisappear* Battle2Client_SyncObjDisappear::default_instance_ = NULL;

Battle2Client_SyncObjDisappear* Battle2Client_SyncObjDisappear::New() const {
  return new Battle2Client_SyncObjDisappear;
}

void Battle2Client_SyncObjDisappear::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uiobjid_ = 0u;
    uiobjtype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Client_SyncObjDisappear::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uiObjId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiobjid_)));
          set_has_uiobjid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiObjType;
        break;
      }

      // required uint32 uiObjType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiObjType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiobjtype_)));
          set_has_uiobjtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Client_SyncObjDisappear::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uiObjId = 1;
  if (has_uiobjid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uiobjid(), output);
  }

  // required uint32 uiObjType = 2;
  if (has_uiobjtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uiobjtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Client_SyncObjDisappear::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uiObjId = 1;
  if (has_uiobjid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uiobjid(), target);
  }

  // required uint32 uiObjType = 2;
  if (has_uiobjtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uiobjtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Client_SyncObjDisappear::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uiObjId = 1;
    if (has_uiobjid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiobjid());
    }

    // required uint32 uiObjType = 2;
    if (has_uiobjtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiobjtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Client_SyncObjDisappear::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Client_SyncObjDisappear* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Client_SyncObjDisappear*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Client_SyncObjDisappear::MergeFrom(const Battle2Client_SyncObjDisappear& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uiobjid()) {
      set_uiobjid(from.uiobjid());
    }
    if (from.has_uiobjtype()) {
      set_uiobjtype(from.uiobjtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Client_SyncObjDisappear::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Client_SyncObjDisappear::CopyFrom(const Battle2Client_SyncObjDisappear& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Client_SyncObjDisappear::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Battle2Client_SyncObjDisappear::Swap(Battle2Client_SyncObjDisappear* other) {
  if (other != this) {
    std::swap(uiobjid_, other->uiobjid_);
    std::swap(uiobjtype_, other->uiobjtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Client_SyncObjDisappear::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Client_SyncObjDisappear_descriptor_;
  metadata.reflection = Battle2Client_SyncObjDisappear_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OwnerInfo::kPlayeridFieldNumber;
const int OwnerInfo::kNameFieldNumber;
const int OwnerInfo::kCareerFieldNumber;
const int OwnerInfo::kLevelFieldNumber;
const int OwnerInfo::kDhlevFieldNumber;
#endif  // !_MSC_VER

OwnerInfo::OwnerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OwnerInfo::InitAsDefaultInstance() {
}

OwnerInfo::OwnerInfo(const OwnerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OwnerInfo::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  career_ = 0u;
  level_ = 0u;
  dhlev_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OwnerInfo::~OwnerInfo() {
  SharedDtor();
}

void OwnerInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void OwnerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OwnerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OwnerInfo_descriptor_;
}

const OwnerInfo& OwnerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

OwnerInfo* OwnerInfo::default_instance_ = NULL;

OwnerInfo* OwnerInfo::New() const {
  return new OwnerInfo;
}

void OwnerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    career_ = 0u;
    level_ = 0u;
    dhlev_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OwnerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_career;
        break;
      }

      // optional uint32 career = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_career:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &career_)));
          set_has_career();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional uint32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dhlev;
        break;
      }

      // optional uint32 dhlev = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dhlev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dhlev_)));
          set_has_dhlev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OwnerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 career = 3;
  if (has_career()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->career(), output);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // optional uint32 dhlev = 5;
  if (has_dhlev()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->dhlev(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OwnerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 career = 3;
  if (has_career()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->career(), target);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // optional uint32 dhlev = 5;
  if (has_dhlev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->dhlev(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OwnerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 career = 3;
    if (has_career()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->career());
    }

    // optional uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 dhlev = 5;
    if (has_dhlev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dhlev());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OwnerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OwnerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OwnerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OwnerInfo::MergeFrom(const OwnerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_career()) {
      set_career(from.career());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_dhlev()) {
      set_dhlev(from.dhlev());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OwnerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OwnerInfo::CopyFrom(const OwnerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OwnerInfo::IsInitialized() const {

  return true;
}

void OwnerInfo::Swap(OwnerInfo* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(name_, other->name_);
    std::swap(career_, other->career_);
    std::swap(level_, other->level_);
    std::swap(dhlev_, other->dhlev_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OwnerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OwnerInfo_descriptor_;
  metadata.reflection = OwnerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Client_SyncMonsterAppear::kIDFieldNumber;
const int Battle2Client_SyncMonsterAppear::kProIDFieldNumber;
const int Battle2Client_SyncMonsterAppear::kPtFieldNumber;
const int Battle2Client_SyncMonsterAppear::kDirFieldNumber;
const int Battle2Client_SyncMonsterAppear::kVelocityFieldNumber;
const int Battle2Client_SyncMonsterAppear::kMaxHPFieldNumber;
const int Battle2Client_SyncMonsterAppear::kCurHPFieldNumber;
const int Battle2Client_SyncMonsterAppear::kMaxTpFieldNumber;
const int Battle2Client_SyncMonsterAppear::kCurTpFieldNumber;
const int Battle2Client_SyncMonsterAppear::kCmapFieldNumber;
const int Battle2Client_SyncMonsterAppear::kLayerFieldNumber;
const int Battle2Client_SyncMonsterAppear::kSBoatInfoFieldNumber;
const int Battle2Client_SyncMonsterAppear::kStatusFieldNumber;
const int Battle2Client_SyncMonsterAppear::kOwnerFieldNumber;
#endif  // !_MSC_VER

Battle2Client_SyncMonsterAppear::Battle2Client_SyncMonsterAppear()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Client_SyncMonsterAppear::InitAsDefaultInstance() {
  pt_ = const_cast< ::proto::message::Point3D*>(&::proto::message::Point3D::default_instance());
  sboatinfo_ = const_cast< ::proto::message::BattleBoatInfo*>(&::proto::message::BattleBoatInfo::default_instance());
  owner_ = const_cast< ::proto::message::OwnerInfo*>(&::proto::message::OwnerInfo::default_instance());
}

Battle2Client_SyncMonsterAppear::Battle2Client_SyncMonsterAppear(const Battle2Client_SyncMonsterAppear& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Client_SyncMonsterAppear::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  proid_ = 0u;
  pt_ = NULL;
  dir_ = 0;
  velocity_ = 0;
  maxhp_ = GOOGLE_LONGLONG(0);
  curhp_ = GOOGLE_LONGLONG(0);
  max_tp_ = 0;
  cur_tp_ = 0;
  cmap_ = 0;
  layer_ = 0;
  sboatinfo_ = NULL;
  status_ = GOOGLE_ULONGLONG(0);
  owner_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Client_SyncMonsterAppear::~Battle2Client_SyncMonsterAppear() {
  SharedDtor();
}

void Battle2Client_SyncMonsterAppear::SharedDtor() {
  if (this != default_instance_) {
    delete pt_;
    delete sboatinfo_;
    delete owner_;
  }
}

void Battle2Client_SyncMonsterAppear::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Client_SyncMonsterAppear::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Client_SyncMonsterAppear_descriptor_;
}

const Battle2Client_SyncMonsterAppear& Battle2Client_SyncMonsterAppear::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Client_SyncMonsterAppear* Battle2Client_SyncMonsterAppear::default_instance_ = NULL;

Battle2Client_SyncMonsterAppear* Battle2Client_SyncMonsterAppear::New() const {
  return new Battle2Client_SyncMonsterAppear;
}

void Battle2Client_SyncMonsterAppear::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    proid_ = 0u;
    if (has_pt()) {
      if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
    }
    dir_ = 0;
    velocity_ = 0;
    maxhp_ = GOOGLE_LONGLONG(0);
    curhp_ = GOOGLE_LONGLONG(0);
    max_tp_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    cur_tp_ = 0;
    cmap_ = 0;
    layer_ = 0;
    if (has_sboatinfo()) {
      if (sboatinfo_ != NULL) sboatinfo_->::proto::message::BattleBoatInfo::Clear();
    }
    status_ = GOOGLE_ULONGLONG(0);
    if (has_owner()) {
      if (owner_ != NULL) owner_->::proto::message::OwnerInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Client_SyncMonsterAppear::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ProID;
        break;
      }

      // required uint32 ProID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ProID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proid_)));
          set_has_proid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pt;
        break;
      }

      // required .proto.message.Point3D pt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_dir;
        break;
      }

      // required float dir = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Velocity;
        break;
      }

      // optional int32 Velocity = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Velocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &velocity_)));
          set_has_velocity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_MaxHP;
        break;
      }

      // optional int64 MaxHP = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_CurHP;
        break;
      }

      // optional int64 CurHP = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &curhp_)));
          set_has_curhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_max_tp;
        break;
      }

      // optional int32 max_tp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_tp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_tp_)));
          set_has_max_tp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_cur_tp;
        break;
      }

      // optional int32 cur_tp = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_tp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_tp_)));
          set_has_cur_tp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_cmap;
        break;
      }

      // optional int32 cmap = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmap_)));
          set_has_cmap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_layer;
        break;
      }

      // optional int32 layer = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_sBoatInfo;
        break;
      }

      // optional .proto.message.BattleBoatInfo sBoatInfo = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sBoatInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sboatinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_Status;
        break;
      }

      // optional uint64 Status = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_owner;
        break;
      }

      // optional .proto.message.OwnerInfo owner = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_owner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_owner()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Client_SyncMonsterAppear::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 ProID = 2;
  if (has_proid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->proid(), output);
  }

  // required .proto.message.Point3D pt = 3;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pt(), output);
  }

  // required float dir = 4;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->dir(), output);
  }

  // optional int32 Velocity = 5;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->velocity(), output);
  }

  // optional int64 MaxHP = 6;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->maxhp(), output);
  }

  // optional int64 CurHP = 7;
  if (has_curhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->curhp(), output);
  }

  // optional int32 max_tp = 8;
  if (has_max_tp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->max_tp(), output);
  }

  // optional int32 cur_tp = 9;
  if (has_cur_tp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->cur_tp(), output);
  }

  // optional int32 cmap = 10;
  if (has_cmap()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->cmap(), output);
  }

  // optional int32 layer = 11;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->layer(), output);
  }

  // optional .proto.message.BattleBoatInfo sBoatInfo = 12;
  if (has_sboatinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->sboatinfo(), output);
  }

  // optional uint64 Status = 13;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->status(), output);
  }

  // optional .proto.message.OwnerInfo owner = 14;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->owner(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Client_SyncMonsterAppear::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 ProID = 2;
  if (has_proid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->proid(), target);
  }

  // required .proto.message.Point3D pt = 3;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pt(), target);
  }

  // required float dir = 4;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->dir(), target);
  }

  // optional int32 Velocity = 5;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->velocity(), target);
  }

  // optional int64 MaxHP = 6;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->maxhp(), target);
  }

  // optional int64 CurHP = 7;
  if (has_curhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->curhp(), target);
  }

  // optional int32 max_tp = 8;
  if (has_max_tp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->max_tp(), target);
  }

  // optional int32 cur_tp = 9;
  if (has_cur_tp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->cur_tp(), target);
  }

  // optional int32 cmap = 10;
  if (has_cmap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->cmap(), target);
  }

  // optional int32 layer = 11;
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->layer(), target);
  }

  // optional .proto.message.BattleBoatInfo sBoatInfo = 12;
  if (has_sboatinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->sboatinfo(), target);
  }

  // optional uint64 Status = 13;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->status(), target);
  }

  // optional .proto.message.OwnerInfo owner = 14;
  if (has_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->owner(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Client_SyncMonsterAppear::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 ProID = 2;
    if (has_proid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->proid());
    }

    // required .proto.message.Point3D pt = 3;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

    // required float dir = 4;
    if (has_dir()) {
      total_size += 1 + 4;
    }

    // optional int32 Velocity = 5;
    if (has_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->velocity());
    }

    // optional int64 MaxHP = 6;
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->maxhp());
    }

    // optional int64 CurHP = 7;
    if (has_curhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->curhp());
    }

    // optional int32 max_tp = 8;
    if (has_max_tp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_tp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 cur_tp = 9;
    if (has_cur_tp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_tp());
    }

    // optional int32 cmap = 10;
    if (has_cmap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmap());
    }

    // optional int32 layer = 11;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layer());
    }

    // optional .proto.message.BattleBoatInfo sBoatInfo = 12;
    if (has_sboatinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sboatinfo());
    }

    // optional uint64 Status = 13;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->status());
    }

    // optional .proto.message.OwnerInfo owner = 14;
    if (has_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->owner());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Client_SyncMonsterAppear::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Client_SyncMonsterAppear* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Client_SyncMonsterAppear*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Client_SyncMonsterAppear::MergeFrom(const Battle2Client_SyncMonsterAppear& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_proid()) {
      set_proid(from.proid());
    }
    if (from.has_pt()) {
      mutable_pt()->::proto::message::Point3D::MergeFrom(from.pt());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_velocity()) {
      set_velocity(from.velocity());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
    if (from.has_curhp()) {
      set_curhp(from.curhp());
    }
    if (from.has_max_tp()) {
      set_max_tp(from.max_tp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cur_tp()) {
      set_cur_tp(from.cur_tp());
    }
    if (from.has_cmap()) {
      set_cmap(from.cmap());
    }
    if (from.has_layer()) {
      set_layer(from.layer());
    }
    if (from.has_sboatinfo()) {
      mutable_sboatinfo()->::proto::message::BattleBoatInfo::MergeFrom(from.sboatinfo());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_owner()) {
      mutable_owner()->::proto::message::OwnerInfo::MergeFrom(from.owner());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Client_SyncMonsterAppear::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Client_SyncMonsterAppear::CopyFrom(const Battle2Client_SyncMonsterAppear& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Client_SyncMonsterAppear::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Battle2Client_SyncMonsterAppear::Swap(Battle2Client_SyncMonsterAppear* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(proid_, other->proid_);
    std::swap(pt_, other->pt_);
    std::swap(dir_, other->dir_);
    std::swap(velocity_, other->velocity_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(curhp_, other->curhp_);
    std::swap(max_tp_, other->max_tp_);
    std::swap(cur_tp_, other->cur_tp_);
    std::swap(cmap_, other->cmap_);
    std::swap(layer_, other->layer_);
    std::swap(sboatinfo_, other->sboatinfo_);
    std::swap(status_, other->status_);
    std::swap(owner_, other->owner_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Client_SyncMonsterAppear::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Client_SyncMonsterAppear_descriptor_;
  metadata.reflection = Battle2Client_SyncMonsterAppear_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mercenarySkillCD::kNskillIDFieldNumber;
const int mercenarySkillCD::kNCDFieldNumber;
#endif  // !_MSC_VER

mercenarySkillCD::mercenarySkillCD()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mercenarySkillCD::InitAsDefaultInstance() {
}

mercenarySkillCD::mercenarySkillCD(const mercenarySkillCD& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mercenarySkillCD::SharedCtor() {
  _cached_size_ = 0;
  nskillid_ = 0;
  ncd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mercenarySkillCD::~mercenarySkillCD() {
  SharedDtor();
}

void mercenarySkillCD::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mercenarySkillCD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mercenarySkillCD::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mercenarySkillCD_descriptor_;
}

const mercenarySkillCD& mercenarySkillCD::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

mercenarySkillCD* mercenarySkillCD::default_instance_ = NULL;

mercenarySkillCD* mercenarySkillCD::New() const {
  return new mercenarySkillCD;
}

void mercenarySkillCD::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nskillid_ = 0;
    ncd_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mercenarySkillCD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nskillID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nskillid_)));
          set_has_nskillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nCD;
        break;
      }

      // required int32 nCD = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nCD:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncd_)));
          set_has_ncd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mercenarySkillCD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 nskillID = 1;
  if (has_nskillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nskillid(), output);
  }

  // required int32 nCD = 2;
  if (has_ncd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ncd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mercenarySkillCD::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 nskillID = 1;
  if (has_nskillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nskillid(), target);
  }

  // required int32 nCD = 2;
  if (has_ncd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ncd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mercenarySkillCD::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nskillID = 1;
    if (has_nskillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nskillid());
    }

    // required int32 nCD = 2;
    if (has_ncd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ncd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mercenarySkillCD::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mercenarySkillCD* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mercenarySkillCD*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mercenarySkillCD::MergeFrom(const mercenarySkillCD& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nskillid()) {
      set_nskillid(from.nskillid());
    }
    if (from.has_ncd()) {
      set_ncd(from.ncd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mercenarySkillCD::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mercenarySkillCD::CopyFrom(const mercenarySkillCD& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mercenarySkillCD::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void mercenarySkillCD::Swap(mercenarySkillCD* other) {
  if (other != this) {
    std::swap(nskillid_, other->nskillid_);
    std::swap(ncd_, other->ncd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mercenarySkillCD::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mercenarySkillCD_descriptor_;
  metadata.reflection = mercenarySkillCD_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Client_SyncMercenaryAppear::kUiObjIdFieldNumber;
const int Battle2Client_SyncMercenaryAppear::kUiTypeFieldNumber;
const int Battle2Client_SyncMercenaryAppear::kLordObjIdFieldNumber;
const int Battle2Client_SyncMercenaryAppear::kSMerInfoFieldNumber;
const int Battle2Client_SyncMercenaryAppear::kMerCDFieldNumber;
#endif  // !_MSC_VER

Battle2Client_SyncMercenaryAppear::Battle2Client_SyncMercenaryAppear()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Client_SyncMercenaryAppear::InitAsDefaultInstance() {
  smerinfo_ = const_cast< ::proto::message::BattleMercenaryInfo*>(&::proto::message::BattleMercenaryInfo::default_instance());
}

Battle2Client_SyncMercenaryAppear::Battle2Client_SyncMercenaryAppear(const Battle2Client_SyncMercenaryAppear& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Client_SyncMercenaryAppear::SharedCtor() {
  _cached_size_ = 0;
  uiobjid_ = 0u;
  uitype_ = 0u;
  lordobjid_ = 0u;
  smerinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Client_SyncMercenaryAppear::~Battle2Client_SyncMercenaryAppear() {
  SharedDtor();
}

void Battle2Client_SyncMercenaryAppear::SharedDtor() {
  if (this != default_instance_) {
    delete smerinfo_;
  }
}

void Battle2Client_SyncMercenaryAppear::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Client_SyncMercenaryAppear::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Client_SyncMercenaryAppear_descriptor_;
}

const Battle2Client_SyncMercenaryAppear& Battle2Client_SyncMercenaryAppear::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Client_SyncMercenaryAppear* Battle2Client_SyncMercenaryAppear::default_instance_ = NULL;

Battle2Client_SyncMercenaryAppear* Battle2Client_SyncMercenaryAppear::New() const {
  return new Battle2Client_SyncMercenaryAppear;
}

void Battle2Client_SyncMercenaryAppear::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uiobjid_ = 0u;
    uitype_ = 0u;
    lordobjid_ = 0u;
    if (has_smerinfo()) {
      if (smerinfo_ != NULL) smerinfo_->::proto::message::BattleMercenaryInfo::Clear();
    }
  }
  mercd_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Client_SyncMercenaryAppear::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uiObjId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiobjid_)));
          set_has_uiobjid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiType;
        break;
      }

      // required uint32 uiType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uitype_)));
          set_has_uitype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lordObjId;
        break;
      }

      // required uint32 lordObjId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lordObjId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lordobjid_)));
          set_has_lordobjid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sMerInfo;
        break;
      }

      // required .proto.message.BattleMercenaryInfo sMerInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sMerInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_smerinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_merCD;
        break;
      }

      // repeated .proto.message.mercenarySkillCD merCD = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_merCD:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mercd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_merCD;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Client_SyncMercenaryAppear::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uiObjId = 1;
  if (has_uiobjid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uiobjid(), output);
  }

  // required uint32 uiType = 2;
  if (has_uitype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uitype(), output);
  }

  // required uint32 lordObjId = 3;
  if (has_lordobjid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->lordobjid(), output);
  }

  // required .proto.message.BattleMercenaryInfo sMerInfo = 4;
  if (has_smerinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->smerinfo(), output);
  }

  // repeated .proto.message.mercenarySkillCD merCD = 5;
  for (int i = 0; i < this->mercd_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->mercd(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Client_SyncMercenaryAppear::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uiObjId = 1;
  if (has_uiobjid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uiobjid(), target);
  }

  // required uint32 uiType = 2;
  if (has_uitype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uitype(), target);
  }

  // required uint32 lordObjId = 3;
  if (has_lordobjid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->lordobjid(), target);
  }

  // required .proto.message.BattleMercenaryInfo sMerInfo = 4;
  if (has_smerinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->smerinfo(), target);
  }

  // repeated .proto.message.mercenarySkillCD merCD = 5;
  for (int i = 0; i < this->mercd_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->mercd(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Client_SyncMercenaryAppear::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uiObjId = 1;
    if (has_uiobjid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiobjid());
    }

    // required uint32 uiType = 2;
    if (has_uitype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uitype());
    }

    // required uint32 lordObjId = 3;
    if (has_lordobjid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lordobjid());
    }

    // required .proto.message.BattleMercenaryInfo sMerInfo = 4;
    if (has_smerinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->smerinfo());
    }

  }
  // repeated .proto.message.mercenarySkillCD merCD = 5;
  total_size += 1 * this->mercd_size();
  for (int i = 0; i < this->mercd_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mercd(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Client_SyncMercenaryAppear::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Client_SyncMercenaryAppear* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Client_SyncMercenaryAppear*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Client_SyncMercenaryAppear::MergeFrom(const Battle2Client_SyncMercenaryAppear& from) {
  GOOGLE_CHECK_NE(&from, this);
  mercd_.MergeFrom(from.mercd_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uiobjid()) {
      set_uiobjid(from.uiobjid());
    }
    if (from.has_uitype()) {
      set_uitype(from.uitype());
    }
    if (from.has_lordobjid()) {
      set_lordobjid(from.lordobjid());
    }
    if (from.has_smerinfo()) {
      mutable_smerinfo()->::proto::message::BattleMercenaryInfo::MergeFrom(from.smerinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Client_SyncMercenaryAppear::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Client_SyncMercenaryAppear::CopyFrom(const Battle2Client_SyncMercenaryAppear& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Client_SyncMercenaryAppear::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_smerinfo()) {
    if (!this->smerinfo().IsInitialized()) return false;
  }
  for (int i = 0; i < mercd_size(); i++) {
    if (!this->mercd(i).IsInitialized()) return false;
  }
  return true;
}

void Battle2Client_SyncMercenaryAppear::Swap(Battle2Client_SyncMercenaryAppear* other) {
  if (other != this) {
    std::swap(uiobjid_, other->uiobjid_);
    std::swap(uitype_, other->uitype_);
    std::swap(lordobjid_, other->lordobjid_);
    std::swap(smerinfo_, other->smerinfo_);
    mercd_.Swap(&other->mercd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Client_SyncMercenaryAppear::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Client_SyncMercenaryAppear_descriptor_;
  metadata.reflection = Battle2Client_SyncMercenaryAppear_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Client_SyncMove::kUiObjIdFieldNumber;
const int Battle2Client_SyncMove::kPtFieldNumber;
const int Battle2Client_SyncMove::kDirFieldNumber;
const int Battle2Client_SyncMove::kVelocityFieldNumber;
const int Battle2Client_SyncMove::kArrivalFieldNumber;
const int Battle2Client_SyncMove::kObjTypeFieldNumber;
const int Battle2Client_SyncMove::kTimestampFieldNumber;
#endif  // !_MSC_VER

Battle2Client_SyncMove::Battle2Client_SyncMove()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Client_SyncMove::InitAsDefaultInstance() {
  pt_ = const_cast< ::proto::message::Point3D*>(&::proto::message::Point3D::default_instance());
}

Battle2Client_SyncMove::Battle2Client_SyncMove(const Battle2Client_SyncMove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Client_SyncMove::SharedCtor() {
  _cached_size_ = 0;
  uiobjid_ = 0u;
  pt_ = NULL;
  dir_ = 0;
  velocity_ = 0;
  arrival_ = 0;
  objtype_ = 0;
  timestamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Client_SyncMove::~Battle2Client_SyncMove() {
  SharedDtor();
}

void Battle2Client_SyncMove::SharedDtor() {
  if (this != default_instance_) {
    delete pt_;
  }
}

void Battle2Client_SyncMove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Client_SyncMove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Client_SyncMove_descriptor_;
}

const Battle2Client_SyncMove& Battle2Client_SyncMove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Client_SyncMove* Battle2Client_SyncMove::default_instance_ = NULL;

Battle2Client_SyncMove* Battle2Client_SyncMove::New() const {
  return new Battle2Client_SyncMove;
}

void Battle2Client_SyncMove::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uiobjid_ = 0u;
    if (has_pt()) {
      if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
    }
    dir_ = 0;
    velocity_ = 0;
    arrival_ = 0;
    objtype_ = 0;
    timestamp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Client_SyncMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uiObjId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiobjid_)));
          set_has_uiobjid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pt;
        break;
      }

      // required .proto.message.Point3D pt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_dir;
        break;
      }

      // required float dir = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_velocity;
        break;
      }

      // required float velocity = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_velocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_)));
          set_has_velocity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_arrival;
        break;
      }

      // optional int32 arrival = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arrival:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arrival_)));
          set_has_arrival();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_objType;
        break;
      }

      // optional int32 objType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_objType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objtype_)));
          set_has_objtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_timestamp;
        break;
      }

      // optional uint64 timestamp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Client_SyncMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uiObjId = 1;
  if (has_uiobjid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uiobjid(), output);
  }

  // required .proto.message.Point3D pt = 2;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pt(), output);
  }

  // required float dir = 3;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->dir(), output);
  }

  // required float velocity = 4;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->velocity(), output);
  }

  // optional int32 arrival = 5;
  if (has_arrival()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->arrival(), output);
  }

  // optional int32 objType = 6;
  if (has_objtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->objtype(), output);
  }

  // optional uint64 timestamp = 7;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Client_SyncMove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uiObjId = 1;
  if (has_uiobjid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uiobjid(), target);
  }

  // required .proto.message.Point3D pt = 2;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pt(), target);
  }

  // required float dir = 3;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->dir(), target);
  }

  // required float velocity = 4;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->velocity(), target);
  }

  // optional int32 arrival = 5;
  if (has_arrival()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->arrival(), target);
  }

  // optional int32 objType = 6;
  if (has_objtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->objtype(), target);
  }

  // optional uint64 timestamp = 7;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Client_SyncMove::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uiObjId = 1;
    if (has_uiobjid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiobjid());
    }

    // required .proto.message.Point3D pt = 2;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

    // required float dir = 3;
    if (has_dir()) {
      total_size += 1 + 4;
    }

    // required float velocity = 4;
    if (has_velocity()) {
      total_size += 1 + 4;
    }

    // optional int32 arrival = 5;
    if (has_arrival()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arrival());
    }

    // optional int32 objType = 6;
    if (has_objtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objtype());
    }

    // optional uint64 timestamp = 7;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Client_SyncMove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Client_SyncMove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Client_SyncMove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Client_SyncMove::MergeFrom(const Battle2Client_SyncMove& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uiobjid()) {
      set_uiobjid(from.uiobjid());
    }
    if (from.has_pt()) {
      mutable_pt()->::proto::message::Point3D::MergeFrom(from.pt());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_velocity()) {
      set_velocity(from.velocity());
    }
    if (from.has_arrival()) {
      set_arrival(from.arrival());
    }
    if (from.has_objtype()) {
      set_objtype(from.objtype());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Client_SyncMove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Client_SyncMove::CopyFrom(const Battle2Client_SyncMove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Client_SyncMove::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Battle2Client_SyncMove::Swap(Battle2Client_SyncMove* other) {
  if (other != this) {
    std::swap(uiobjid_, other->uiobjid_);
    std::swap(pt_, other->pt_);
    std::swap(dir_, other->dir_);
    std::swap(velocity_, other->velocity_);
    std::swap(arrival_, other->arrival_);
    std::swap(objtype_, other->objtype_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Client_SyncMove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Client_SyncMove_descriptor_;
  metadata.reflection = Battle2Client_SyncMove_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Client2Battle_SpeelBegin::kLayerFieldNumber;
const int Client2Battle_SpeelBegin::kTriggerIdFieldNumber;
const int Client2Battle_SpeelBegin::kTriggerTypeFieldNumber;
#endif  // !_MSC_VER

Client2Battle_SpeelBegin::Client2Battle_SpeelBegin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Client2Battle_SpeelBegin::InitAsDefaultInstance() {
}

Client2Battle_SpeelBegin::Client2Battle_SpeelBegin(const Client2Battle_SpeelBegin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Client2Battle_SpeelBegin::SharedCtor() {
  _cached_size_ = 0;
  layer_ = 0u;
  triggerid_ = 0;
  triggertype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Client2Battle_SpeelBegin::~Client2Battle_SpeelBegin() {
  SharedDtor();
}

void Client2Battle_SpeelBegin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Client2Battle_SpeelBegin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Client2Battle_SpeelBegin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Client2Battle_SpeelBegin_descriptor_;
}

const Client2Battle_SpeelBegin& Client2Battle_SpeelBegin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Client2Battle_SpeelBegin* Client2Battle_SpeelBegin::default_instance_ = NULL;

Client2Battle_SpeelBegin* Client2Battle_SpeelBegin::New() const {
  return new Client2Battle_SpeelBegin;
}

void Client2Battle_SpeelBegin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    layer_ = 0u;
    triggerid_ = 0;
    triggertype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Client2Battle_SpeelBegin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Layer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_TriggerId;
        break;
      }

      // optional int32 TriggerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TriggerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &triggerid_)));
          set_has_triggerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_TriggerType;
        break;
      }

      // optional uint32 TriggerType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TriggerType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &triggertype_)));
          set_has_triggertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Client2Battle_SpeelBegin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Layer = 1;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->layer(), output);
  }

  // optional int32 TriggerId = 2;
  if (has_triggerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->triggerid(), output);
  }

  // optional uint32 TriggerType = 3;
  if (has_triggertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->triggertype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Client2Battle_SpeelBegin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 Layer = 1;
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->layer(), target);
  }

  // optional int32 TriggerId = 2;
  if (has_triggerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->triggerid(), target);
  }

  // optional uint32 TriggerType = 3;
  if (has_triggertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->triggertype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Client2Battle_SpeelBegin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Layer = 1;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layer());
    }

    // optional int32 TriggerId = 2;
    if (has_triggerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->triggerid());
    }

    // optional uint32 TriggerType = 3;
    if (has_triggertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->triggertype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Client2Battle_SpeelBegin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Client2Battle_SpeelBegin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Client2Battle_SpeelBegin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Client2Battle_SpeelBegin::MergeFrom(const Client2Battle_SpeelBegin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_layer()) {
      set_layer(from.layer());
    }
    if (from.has_triggerid()) {
      set_triggerid(from.triggerid());
    }
    if (from.has_triggertype()) {
      set_triggertype(from.triggertype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Client2Battle_SpeelBegin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Client2Battle_SpeelBegin::CopyFrom(const Client2Battle_SpeelBegin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Client2Battle_SpeelBegin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Client2Battle_SpeelBegin::Swap(Client2Battle_SpeelBegin* other) {
  if (other != this) {
    std::swap(layer_, other->layer_);
    std::swap(triggerid_, other->triggerid_);
    std::swap(triggertype_, other->triggertype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Client2Battle_SpeelBegin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Client2Battle_SpeelBegin_descriptor_;
  metadata.reflection = Client2Battle_SpeelBegin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Client2Battle_SpeelEnd::kPtFieldNumber;
#endif  // !_MSC_VER

Client2Battle_SpeelEnd::Client2Battle_SpeelEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Client2Battle_SpeelEnd::InitAsDefaultInstance() {
  pt_ = const_cast< ::proto::message::Point3D*>(&::proto::message::Point3D::default_instance());
}

Client2Battle_SpeelEnd::Client2Battle_SpeelEnd(const Client2Battle_SpeelEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Client2Battle_SpeelEnd::SharedCtor() {
  _cached_size_ = 0;
  pt_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Client2Battle_SpeelEnd::~Client2Battle_SpeelEnd() {
  SharedDtor();
}

void Client2Battle_SpeelEnd::SharedDtor() {
  if (this != default_instance_) {
    delete pt_;
  }
}

void Client2Battle_SpeelEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Client2Battle_SpeelEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Client2Battle_SpeelEnd_descriptor_;
}

const Client2Battle_SpeelEnd& Client2Battle_SpeelEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Client2Battle_SpeelEnd* Client2Battle_SpeelEnd::default_instance_ = NULL;

Client2Battle_SpeelEnd* Client2Battle_SpeelEnd::New() const {
  return new Client2Battle_SpeelEnd;
}

void Client2Battle_SpeelEnd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pt()) {
      if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Client2Battle_SpeelEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.message.Point3D pt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Client2Battle_SpeelEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .proto.message.Point3D pt = 1;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Client2Battle_SpeelEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .proto.message.Point3D pt = 1;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Client2Battle_SpeelEnd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto.message.Point3D pt = 1;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Client2Battle_SpeelEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Client2Battle_SpeelEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Client2Battle_SpeelEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Client2Battle_SpeelEnd::MergeFrom(const Client2Battle_SpeelEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pt()) {
      mutable_pt()->::proto::message::Point3D::MergeFrom(from.pt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Client2Battle_SpeelEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Client2Battle_SpeelEnd::CopyFrom(const Client2Battle_SpeelEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Client2Battle_SpeelEnd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Client2Battle_SpeelEnd::Swap(Client2Battle_SpeelEnd* other) {
  if (other != this) {
    std::swap(pt_, other->pt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Client2Battle_SpeelEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Client2Battle_SpeelEnd_descriptor_;
  metadata.reflection = Client2Battle_SpeelEnd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Client_SpeelBegin::kPlyIdFieldNumber;
const int Battle2Client_SpeelBegin::kLayerFieldNumber;
const int Battle2Client_SpeelBegin::kTriggerIdFieldNumber;
const int Battle2Client_SpeelBegin::kTriggerTypeFieldNumber;
#endif  // !_MSC_VER

Battle2Client_SpeelBegin::Battle2Client_SpeelBegin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Client_SpeelBegin::InitAsDefaultInstance() {
}

Battle2Client_SpeelBegin::Battle2Client_SpeelBegin(const Battle2Client_SpeelBegin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Client_SpeelBegin::SharedCtor() {
  _cached_size_ = 0;
  plyid_ = 0u;
  layer_ = 0u;
  triggerid_ = 0;
  triggertype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Client_SpeelBegin::~Battle2Client_SpeelBegin() {
  SharedDtor();
}

void Battle2Client_SpeelBegin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Battle2Client_SpeelBegin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Client_SpeelBegin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Client_SpeelBegin_descriptor_;
}

const Battle2Client_SpeelBegin& Battle2Client_SpeelBegin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Client_SpeelBegin* Battle2Client_SpeelBegin::default_instance_ = NULL;

Battle2Client_SpeelBegin* Battle2Client_SpeelBegin::New() const {
  return new Battle2Client_SpeelBegin;
}

void Battle2Client_SpeelBegin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    plyid_ = 0u;
    layer_ = 0u;
    triggerid_ = 0;
    triggertype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Client_SpeelBegin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 PlyId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plyid_)));
          set_has_plyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Layer;
        break;
      }

      // required uint32 Layer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_TriggerId;
        break;
      }

      // optional int32 TriggerId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TriggerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &triggerid_)));
          set_has_triggerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_TriggerType;
        break;
      }

      // optional uint32 TriggerType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TriggerType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &triggertype_)));
          set_has_triggertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Client_SpeelBegin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 PlyId = 1;
  if (has_plyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->plyid(), output);
  }

  // required uint32 Layer = 2;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->layer(), output);
  }

  // optional int32 TriggerId = 3;
  if (has_triggerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->triggerid(), output);
  }

  // optional uint32 TriggerType = 4;
  if (has_triggertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->triggertype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Client_SpeelBegin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 PlyId = 1;
  if (has_plyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->plyid(), target);
  }

  // required uint32 Layer = 2;
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->layer(), target);
  }

  // optional int32 TriggerId = 3;
  if (has_triggerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->triggerid(), target);
  }

  // optional uint32 TriggerType = 4;
  if (has_triggertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->triggertype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Client_SpeelBegin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 PlyId = 1;
    if (has_plyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->plyid());
    }

    // required uint32 Layer = 2;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layer());
    }

    // optional int32 TriggerId = 3;
    if (has_triggerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->triggerid());
    }

    // optional uint32 TriggerType = 4;
    if (has_triggertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->triggertype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Client_SpeelBegin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Client_SpeelBegin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Client_SpeelBegin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Client_SpeelBegin::MergeFrom(const Battle2Client_SpeelBegin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plyid()) {
      set_plyid(from.plyid());
    }
    if (from.has_layer()) {
      set_layer(from.layer());
    }
    if (from.has_triggerid()) {
      set_triggerid(from.triggerid());
    }
    if (from.has_triggertype()) {
      set_triggertype(from.triggertype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Client_SpeelBegin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Client_SpeelBegin::CopyFrom(const Battle2Client_SpeelBegin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Client_SpeelBegin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Battle2Client_SpeelBegin::Swap(Battle2Client_SpeelBegin* other) {
  if (other != this) {
    std::swap(plyid_, other->plyid_);
    std::swap(layer_, other->layer_);
    std::swap(triggerid_, other->triggerid_);
    std::swap(triggertype_, other->triggertype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Client_SpeelBegin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Client_SpeelBegin_descriptor_;
  metadata.reflection = Battle2Client_SpeelBegin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SceneBranchInfo::kBranchIdFieldNumber;
const int SceneBranchInfo::kPlayerNumFieldNumber;
const int SceneBranchInfo::kDisplyBranchIdFieldNumber;
#endif  // !_MSC_VER

SceneBranchInfo::SceneBranchInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SceneBranchInfo::InitAsDefaultInstance() {
}

SceneBranchInfo::SceneBranchInfo(const SceneBranchInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SceneBranchInfo::SharedCtor() {
  _cached_size_ = 0;
  branchid_ = 0;
  playernum_ = 0;
  displybranchid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SceneBranchInfo::~SceneBranchInfo() {
  SharedDtor();
}

void SceneBranchInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SceneBranchInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneBranchInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SceneBranchInfo_descriptor_;
}

const SceneBranchInfo& SceneBranchInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

SceneBranchInfo* SceneBranchInfo::default_instance_ = NULL;

SceneBranchInfo* SceneBranchInfo::New() const {
  return new SceneBranchInfo;
}

void SceneBranchInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    branchid_ = 0;
    playernum_ = 0;
    displybranchid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SceneBranchInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 BranchId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &branchid_)));
          set_has_branchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_PlayerNum;
        break;
      }

      // required int32 PlayerNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PlayerNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playernum_)));
          set_has_playernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_DisplyBranchId;
        break;
      }

      // optional int32 DisplyBranchId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DisplyBranchId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &displybranchid_)));
          set_has_displybranchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SceneBranchInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 BranchId = 1;
  if (has_branchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->branchid(), output);
  }

  // required int32 PlayerNum = 2;
  if (has_playernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->playernum(), output);
  }

  // optional int32 DisplyBranchId = 3;
  if (has_displybranchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->displybranchid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SceneBranchInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 BranchId = 1;
  if (has_branchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->branchid(), target);
  }

  // required int32 PlayerNum = 2;
  if (has_playernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->playernum(), target);
  }

  // optional int32 DisplyBranchId = 3;
  if (has_displybranchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->displybranchid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SceneBranchInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 BranchId = 1;
    if (has_branchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->branchid());
    }

    // required int32 PlayerNum = 2;
    if (has_playernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playernum());
    }

    // optional int32 DisplyBranchId = 3;
    if (has_displybranchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->displybranchid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneBranchInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SceneBranchInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SceneBranchInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SceneBranchInfo::MergeFrom(const SceneBranchInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_branchid()) {
      set_branchid(from.branchid());
    }
    if (from.has_playernum()) {
      set_playernum(from.playernum());
    }
    if (from.has_displybranchid()) {
      set_displybranchid(from.displybranchid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SceneBranchInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneBranchInfo::CopyFrom(const SceneBranchInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneBranchInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SceneBranchInfo::Swap(SceneBranchInfo* other) {
  if (other != this) {
    std::swap(branchid_, other->branchid_);
    std::swap(playernum_, other->playernum_);
    std::swap(displybranchid_, other->displybranchid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SceneBranchInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SceneBranchInfo_descriptor_;
  metadata.reflection = SceneBranchInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Client_GetMapBranch::kBranchListFieldNumber;
#endif  // !_MSC_VER

Battle2Client_GetMapBranch::Battle2Client_GetMapBranch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Client_GetMapBranch::InitAsDefaultInstance() {
}

Battle2Client_GetMapBranch::Battle2Client_GetMapBranch(const Battle2Client_GetMapBranch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Client_GetMapBranch::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Client_GetMapBranch::~Battle2Client_GetMapBranch() {
  SharedDtor();
}

void Battle2Client_GetMapBranch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Battle2Client_GetMapBranch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Client_GetMapBranch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Client_GetMapBranch_descriptor_;
}

const Battle2Client_GetMapBranch& Battle2Client_GetMapBranch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Client_GetMapBranch* Battle2Client_GetMapBranch::default_instance_ = NULL;

Battle2Client_GetMapBranch* Battle2Client_GetMapBranch::New() const {
  return new Battle2Client_GetMapBranch;
}

void Battle2Client_GetMapBranch::Clear() {
  branch_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Client_GetMapBranch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.SceneBranchInfo branch_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_branch_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_branch_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_branch_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Client_GetMapBranch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.SceneBranchInfo branch_list = 1;
  for (int i = 0; i < this->branch_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->branch_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Client_GetMapBranch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.SceneBranchInfo branch_list = 1;
  for (int i = 0; i < this->branch_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->branch_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Client_GetMapBranch::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.SceneBranchInfo branch_list = 1;
  total_size += 1 * this->branch_list_size();
  for (int i = 0; i < this->branch_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->branch_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Client_GetMapBranch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Client_GetMapBranch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Client_GetMapBranch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Client_GetMapBranch::MergeFrom(const Battle2Client_GetMapBranch& from) {
  GOOGLE_CHECK_NE(&from, this);
  branch_list_.MergeFrom(from.branch_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Client_GetMapBranch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Client_GetMapBranch::CopyFrom(const Battle2Client_GetMapBranch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Client_GetMapBranch::IsInitialized() const {

  for (int i = 0; i < branch_list_size(); i++) {
    if (!this->branch_list(i).IsInitialized()) return false;
  }
  return true;
}

void Battle2Client_GetMapBranch::Swap(Battle2Client_GetMapBranch* other) {
  if (other != this) {
    branch_list_.Swap(&other->branch_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Client_GetMapBranch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Client_GetMapBranch_descriptor_;
  metadata.reflection = Battle2Client_GetMapBranch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Client_ChangeBranch::kRtFieldNumber;
#endif  // !_MSC_VER

Battle2Client_ChangeBranch::Battle2Client_ChangeBranch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Client_ChangeBranch::InitAsDefaultInstance() {
}

Battle2Client_ChangeBranch::Battle2Client_ChangeBranch(const Battle2Client_ChangeBranch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Client_ChangeBranch::SharedCtor() {
  _cached_size_ = 0;
  rt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Client_ChangeBranch::~Battle2Client_ChangeBranch() {
  SharedDtor();
}

void Battle2Client_ChangeBranch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Battle2Client_ChangeBranch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Client_ChangeBranch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Client_ChangeBranch_descriptor_;
}

const Battle2Client_ChangeBranch& Battle2Client_ChangeBranch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Client_ChangeBranch* Battle2Client_ChangeBranch::default_instance_ = NULL;

Battle2Client_ChangeBranch* Battle2Client_ChangeBranch::New() const {
  return new Battle2Client_ChangeBranch;
}

void Battle2Client_ChangeBranch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Client_ChangeBranch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rt_)));
          set_has_rt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Client_ChangeBranch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rt = 1;
  if (has_rt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Client_ChangeBranch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 rt = 1;
  if (has_rt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Client_ChangeBranch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rt = 1;
    if (has_rt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Client_ChangeBranch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Client_ChangeBranch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Client_ChangeBranch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Client_ChangeBranch::MergeFrom(const Battle2Client_ChangeBranch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rt()) {
      set_rt(from.rt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Client_ChangeBranch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Client_ChangeBranch::CopyFrom(const Battle2Client_ChangeBranch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Client_ChangeBranch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Battle2Client_ChangeBranch::Swap(Battle2Client_ChangeBranch* other) {
  if (other != this) {
    std::swap(rt_, other->rt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Client_ChangeBranch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Client_ChangeBranch_descriptor_;
  metadata.reflection = Battle2Client_ChangeBranch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Client2Battle_ChangeMap::kUiMapIdFieldNumber;
#endif  // !_MSC_VER

Client2Battle_ChangeMap::Client2Battle_ChangeMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Client2Battle_ChangeMap::InitAsDefaultInstance() {
}

Client2Battle_ChangeMap::Client2Battle_ChangeMap(const Client2Battle_ChangeMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Client2Battle_ChangeMap::SharedCtor() {
  _cached_size_ = 0;
  uimapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Client2Battle_ChangeMap::~Client2Battle_ChangeMap() {
  SharedDtor();
}

void Client2Battle_ChangeMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Client2Battle_ChangeMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Client2Battle_ChangeMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Client2Battle_ChangeMap_descriptor_;
}

const Client2Battle_ChangeMap& Client2Battle_ChangeMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Client2Battle_ChangeMap* Client2Battle_ChangeMap::default_instance_ = NULL;

Client2Battle_ChangeMap* Client2Battle_ChangeMap::New() const {
  return new Client2Battle_ChangeMap;
}

void Client2Battle_ChangeMap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uimapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Client2Battle_ChangeMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uiMapId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uimapid_)));
          set_has_uimapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Client2Battle_ChangeMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uiMapId = 1;
  if (has_uimapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uimapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Client2Battle_ChangeMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uiMapId = 1;
  if (has_uimapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uimapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Client2Battle_ChangeMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uiMapId = 1;
    if (has_uimapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uimapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Client2Battle_ChangeMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Client2Battle_ChangeMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Client2Battle_ChangeMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Client2Battle_ChangeMap::MergeFrom(const Client2Battle_ChangeMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uimapid()) {
      set_uimapid(from.uimapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Client2Battle_ChangeMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Client2Battle_ChangeMap::CopyFrom(const Client2Battle_ChangeMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Client2Battle_ChangeMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Client2Battle_ChangeMap::Swap(Client2Battle_ChangeMap* other) {
  if (other != this) {
    std::swap(uimapid_, other->uimapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Client2Battle_ChangeMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Client2Battle_ChangeMap_descriptor_;
  metadata.reflection = Client2Battle_ChangeMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Client2Battle_SummonMercenary::Client2Battle_SummonMercenary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Client2Battle_SummonMercenary::InitAsDefaultInstance() {
}

Client2Battle_SummonMercenary::Client2Battle_SummonMercenary(const Client2Battle_SummonMercenary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Client2Battle_SummonMercenary::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Client2Battle_SummonMercenary::~Client2Battle_SummonMercenary() {
  SharedDtor();
}

void Client2Battle_SummonMercenary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Client2Battle_SummonMercenary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Client2Battle_SummonMercenary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Client2Battle_SummonMercenary_descriptor_;
}

const Client2Battle_SummonMercenary& Client2Battle_SummonMercenary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Client2Battle_SummonMercenary* Client2Battle_SummonMercenary::default_instance_ = NULL;

Client2Battle_SummonMercenary* Client2Battle_SummonMercenary::New() const {
  return new Client2Battle_SummonMercenary;
}

void Client2Battle_SummonMercenary::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Client2Battle_SummonMercenary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Client2Battle_SummonMercenary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Client2Battle_SummonMercenary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Client2Battle_SummonMercenary::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Client2Battle_SummonMercenary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Client2Battle_SummonMercenary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Client2Battle_SummonMercenary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Client2Battle_SummonMercenary::MergeFrom(const Client2Battle_SummonMercenary& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Client2Battle_SummonMercenary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Client2Battle_SummonMercenary::CopyFrom(const Client2Battle_SummonMercenary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Client2Battle_SummonMercenary::IsInitialized() const {

  return true;
}

void Client2Battle_SummonMercenary::Swap(Client2Battle_SummonMercenary* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Client2Battle_SummonMercenary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Client2Battle_SummonMercenary_descriptor_;
  metadata.reflection = Client2Battle_SummonMercenary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Client_CheckPosition::kNIdFieldNumber;
const int Battle2Client_CheckPosition::kPtFieldNumber;
const int Battle2Client_CheckPosition::kDirFieldNumber;
#endif  // !_MSC_VER

Battle2Client_CheckPosition::Battle2Client_CheckPosition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Client_CheckPosition::InitAsDefaultInstance() {
  pt_ = const_cast< ::proto::message::Point3D*>(&::proto::message::Point3D::default_instance());
}

Battle2Client_CheckPosition::Battle2Client_CheckPosition(const Battle2Client_CheckPosition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Client_CheckPosition::SharedCtor() {
  _cached_size_ = 0;
  nid_ = 0u;
  pt_ = NULL;
  dir_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Client_CheckPosition::~Battle2Client_CheckPosition() {
  SharedDtor();
}

void Battle2Client_CheckPosition::SharedDtor() {
  if (this != default_instance_) {
    delete pt_;
  }
}

void Battle2Client_CheckPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Client_CheckPosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Client_CheckPosition_descriptor_;
}

const Battle2Client_CheckPosition& Battle2Client_CheckPosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Client_CheckPosition* Battle2Client_CheckPosition::default_instance_ = NULL;

Battle2Client_CheckPosition* Battle2Client_CheckPosition::New() const {
  return new Battle2Client_CheckPosition;
}

void Battle2Client_CheckPosition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nid_ = 0u;
    if (has_pt()) {
      if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
    }
    dir_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Client_CheckPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 nId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nid_)));
          set_has_nid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pt;
        break;
      }

      // required .proto.message.Point3D pt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_dir;
        break;
      }

      // required float dir = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Client_CheckPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 nId = 1;
  if (has_nid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nid(), output);
  }

  // required .proto.message.Point3D pt = 2;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pt(), output);
  }

  // required float dir = 3;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->dir(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Client_CheckPosition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 nId = 1;
  if (has_nid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nid(), target);
  }

  // required .proto.message.Point3D pt = 2;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pt(), target);
  }

  // required float dir = 3;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->dir(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Client_CheckPosition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 nId = 1;
    if (has_nid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nid());
    }

    // required .proto.message.Point3D pt = 2;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

    // required float dir = 3;
    if (has_dir()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Client_CheckPosition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Client_CheckPosition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Client_CheckPosition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Client_CheckPosition::MergeFrom(const Battle2Client_CheckPosition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nid()) {
      set_nid(from.nid());
    }
    if (from.has_pt()) {
      mutable_pt()->::proto::message::Point3D::MergeFrom(from.pt());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Client_CheckPosition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Client_CheckPosition::CopyFrom(const Battle2Client_CheckPosition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Client_CheckPosition::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Battle2Client_CheckPosition::Swap(Battle2Client_CheckPosition* other) {
  if (other != this) {
    std::swap(nid_, other->nid_);
    std::swap(pt_, other->pt_);
    std::swap(dir_, other->dir_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Client_CheckPosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Client_CheckPosition_descriptor_;
  metadata.reflection = Battle2Client_CheckPosition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Client_MonsterStopMove::kNIdFieldNumber;
const int Battle2Client_MonsterStopMove::kPtFieldNumber;
const int Battle2Client_MonsterStopMove::kDirFieldNumber;
#endif  // !_MSC_VER

Battle2Client_MonsterStopMove::Battle2Client_MonsterStopMove()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Client_MonsterStopMove::InitAsDefaultInstance() {
  pt_ = const_cast< ::proto::message::Point3D*>(&::proto::message::Point3D::default_instance());
}

Battle2Client_MonsterStopMove::Battle2Client_MonsterStopMove(const Battle2Client_MonsterStopMove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Client_MonsterStopMove::SharedCtor() {
  _cached_size_ = 0;
  nid_ = 0u;
  pt_ = NULL;
  dir_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Client_MonsterStopMove::~Battle2Client_MonsterStopMove() {
  SharedDtor();
}

void Battle2Client_MonsterStopMove::SharedDtor() {
  if (this != default_instance_) {
    delete pt_;
  }
}

void Battle2Client_MonsterStopMove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Client_MonsterStopMove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Client_MonsterStopMove_descriptor_;
}

const Battle2Client_MonsterStopMove& Battle2Client_MonsterStopMove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Client_MonsterStopMove* Battle2Client_MonsterStopMove::default_instance_ = NULL;

Battle2Client_MonsterStopMove* Battle2Client_MonsterStopMove::New() const {
  return new Battle2Client_MonsterStopMove;
}

void Battle2Client_MonsterStopMove::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nid_ = 0u;
    if (has_pt()) {
      if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
    }
    dir_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Client_MonsterStopMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 nId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nid_)));
          set_has_nid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pt;
        break;
      }

      // required .proto.message.Point3D pt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_dir;
        break;
      }

      // required float dir = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Client_MonsterStopMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 nId = 1;
  if (has_nid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nid(), output);
  }

  // required .proto.message.Point3D pt = 2;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pt(), output);
  }

  // required float dir = 3;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->dir(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Client_MonsterStopMove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 nId = 1;
  if (has_nid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nid(), target);
  }

  // required .proto.message.Point3D pt = 2;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pt(), target);
  }

  // required float dir = 3;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->dir(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Client_MonsterStopMove::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 nId = 1;
    if (has_nid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nid());
    }

    // required .proto.message.Point3D pt = 2;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

    // required float dir = 3;
    if (has_dir()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Client_MonsterStopMove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Client_MonsterStopMove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Client_MonsterStopMove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Client_MonsterStopMove::MergeFrom(const Battle2Client_MonsterStopMove& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nid()) {
      set_nid(from.nid());
    }
    if (from.has_pt()) {
      mutable_pt()->::proto::message::Point3D::MergeFrom(from.pt());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Client_MonsterStopMove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Client_MonsterStopMove::CopyFrom(const Battle2Client_MonsterStopMove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Client_MonsterStopMove::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Battle2Client_MonsterStopMove::Swap(Battle2Client_MonsterStopMove* other) {
  if (other != this) {
    std::swap(nid_, other->nid_);
    std::swap(pt_, other->pt_);
    std::swap(dir_, other->dir_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Client_MonsterStopMove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Client_MonsterStopMove_descriptor_;
  metadata.reflection = Battle2Client_MonsterStopMove_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Client_TriggerEvent::kPlyIdFieldNumber;
const int Battle2Client_TriggerEvent::kTriggerTypeFieldNumber;
const int Battle2Client_TriggerEvent::kTriggerIdFieldNumber;
#endif  // !_MSC_VER

Battle2Client_TriggerEvent::Battle2Client_TriggerEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Client_TriggerEvent::InitAsDefaultInstance() {
}

Battle2Client_TriggerEvent::Battle2Client_TriggerEvent(const Battle2Client_TriggerEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Client_TriggerEvent::SharedCtor() {
  _cached_size_ = 0;
  plyid_ = 0u;
  triggertype_ = 0u;
  triggerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Client_TriggerEvent::~Battle2Client_TriggerEvent() {
  SharedDtor();
}

void Battle2Client_TriggerEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Battle2Client_TriggerEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Client_TriggerEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Client_TriggerEvent_descriptor_;
}

const Battle2Client_TriggerEvent& Battle2Client_TriggerEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Client_TriggerEvent* Battle2Client_TriggerEvent::default_instance_ = NULL;

Battle2Client_TriggerEvent* Battle2Client_TriggerEvent::New() const {
  return new Battle2Client_TriggerEvent;
}

void Battle2Client_TriggerEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    plyid_ = 0u;
    triggertype_ = 0u;
    triggerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Client_TriggerEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 PlyId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plyid_)));
          set_has_plyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_TriggerType;
        break;
      }

      // required uint32 TriggerType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TriggerType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &triggertype_)));
          set_has_triggertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_TriggerId;
        break;
      }

      // required uint32 TriggerId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TriggerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &triggerid_)));
          set_has_triggerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Client_TriggerEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 PlyId = 1;
  if (has_plyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->plyid(), output);
  }

  // required uint32 TriggerType = 2;
  if (has_triggertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->triggertype(), output);
  }

  // required uint32 TriggerId = 3;
  if (has_triggerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->triggerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Client_TriggerEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 PlyId = 1;
  if (has_plyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->plyid(), target);
  }

  // required uint32 TriggerType = 2;
  if (has_triggertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->triggertype(), target);
  }

  // required uint32 TriggerId = 3;
  if (has_triggerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->triggerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Client_TriggerEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 PlyId = 1;
    if (has_plyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->plyid());
    }

    // required uint32 TriggerType = 2;
    if (has_triggertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->triggertype());
    }

    // required uint32 TriggerId = 3;
    if (has_triggerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->triggerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Client_TriggerEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Client_TriggerEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Client_TriggerEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Client_TriggerEvent::MergeFrom(const Battle2Client_TriggerEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plyid()) {
      set_plyid(from.plyid());
    }
    if (from.has_triggertype()) {
      set_triggertype(from.triggertype());
    }
    if (from.has_triggerid()) {
      set_triggerid(from.triggerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Client_TriggerEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Client_TriggerEvent::CopyFrom(const Battle2Client_TriggerEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Client_TriggerEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Battle2Client_TriggerEvent::Swap(Battle2Client_TriggerEvent* other) {
  if (other != this) {
    std::swap(plyid_, other->plyid_);
    std::swap(triggertype_, other->triggertype_);
    std::swap(triggerid_, other->triggerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Client_TriggerEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Client_TriggerEvent_descriptor_;
  metadata.reflection = Battle2Client_TriggerEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Client_TriggerServerTips::kServerTipsIdFieldNumber;
const int Battle2Client_TriggerServerTips::kArgFieldNumber;
#endif  // !_MSC_VER

Battle2Client_TriggerServerTips::Battle2Client_TriggerServerTips()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Client_TriggerServerTips::InitAsDefaultInstance() {
}

Battle2Client_TriggerServerTips::Battle2Client_TriggerServerTips(const Battle2Client_TriggerServerTips& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Client_TriggerServerTips::SharedCtor() {
  _cached_size_ = 0;
  servertipsid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Client_TriggerServerTips::~Battle2Client_TriggerServerTips() {
  SharedDtor();
}

void Battle2Client_TriggerServerTips::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Battle2Client_TriggerServerTips::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Client_TriggerServerTips::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Client_TriggerServerTips_descriptor_;
}

const Battle2Client_TriggerServerTips& Battle2Client_TriggerServerTips::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Client_TriggerServerTips* Battle2Client_TriggerServerTips::default_instance_ = NULL;

Battle2Client_TriggerServerTips* Battle2Client_TriggerServerTips::New() const {
  return new Battle2Client_TriggerServerTips;
}

void Battle2Client_TriggerServerTips::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    servertipsid_ = 0u;
  }
  arg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Client_TriggerServerTips::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ServerTipsId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &servertipsid_)));
          set_has_servertipsid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_arg;
        break;
      }

      // repeated string arg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_arg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->arg(this->arg_size() - 1).data(),
            this->arg(this->arg_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_arg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Client_TriggerServerTips::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ServerTipsId = 1;
  if (has_servertipsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->servertipsid(), output);
  }

  // repeated string arg = 2;
  for (int i = 0; i < this->arg_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->arg(i).data(), this->arg(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->arg(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Client_TriggerServerTips::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ServerTipsId = 1;
  if (has_servertipsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->servertipsid(), target);
  }

  // repeated string arg = 2;
  for (int i = 0; i < this->arg_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->arg(i).data(), this->arg(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->arg(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Client_TriggerServerTips::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ServerTipsId = 1;
    if (has_servertipsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->servertipsid());
    }

  }
  // repeated string arg = 2;
  total_size += 1 * this->arg_size();
  for (int i = 0; i < this->arg_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->arg(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Client_TriggerServerTips::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Client_TriggerServerTips* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Client_TriggerServerTips*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Client_TriggerServerTips::MergeFrom(const Battle2Client_TriggerServerTips& from) {
  GOOGLE_CHECK_NE(&from, this);
  arg_.MergeFrom(from.arg_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_servertipsid()) {
      set_servertipsid(from.servertipsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Client_TriggerServerTips::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Client_TriggerServerTips::CopyFrom(const Battle2Client_TriggerServerTips& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Client_TriggerServerTips::IsInitialized() const {

  return true;
}

void Battle2Client_TriggerServerTips::Swap(Battle2Client_TriggerServerTips* other) {
  if (other != this) {
    std::swap(servertipsid_, other->servertipsid_);
    arg_.Swap(&other->arg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Client_TriggerServerTips::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Client_TriggerServerTips_descriptor_;
  metadata.reflection = Battle2Client_TriggerServerTips_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Client_ChangeTttle::kNIdFieldNumber;
const int Battle2Client_ChangeTttle::kTitleIDFieldNumber;
const int Battle2Client_ChangeTttle::kTitlenameFieldNumber;
const int Battle2Client_ChangeTttle::kIshideFieldNumber;
#endif  // !_MSC_VER

Battle2Client_ChangeTttle::Battle2Client_ChangeTttle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Client_ChangeTttle::InitAsDefaultInstance() {
}

Battle2Client_ChangeTttle::Battle2Client_ChangeTttle(const Battle2Client_ChangeTttle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Client_ChangeTttle::SharedCtor() {
  _cached_size_ = 0;
  nid_ = 0u;
  titleid_ = 0;
  titlename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ishide_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Client_ChangeTttle::~Battle2Client_ChangeTttle() {
  SharedDtor();
}

void Battle2Client_ChangeTttle::SharedDtor() {
  if (titlename_ != &::google::protobuf::internal::kEmptyString) {
    delete titlename_;
  }
  if (this != default_instance_) {
  }
}

void Battle2Client_ChangeTttle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Client_ChangeTttle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Client_ChangeTttle_descriptor_;
}

const Battle2Client_ChangeTttle& Battle2Client_ChangeTttle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Client_ChangeTttle* Battle2Client_ChangeTttle::default_instance_ = NULL;

Battle2Client_ChangeTttle* Battle2Client_ChangeTttle::New() const {
  return new Battle2Client_ChangeTttle;
}

void Battle2Client_ChangeTttle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nid_ = 0u;
    titleid_ = 0;
    if (has_titlename()) {
      if (titlename_ != &::google::protobuf::internal::kEmptyString) {
        titlename_->clear();
      }
    }
    ishide_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Client_ChangeTttle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 nId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nid_)));
          set_has_nid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_titleID;
        break;
      }

      // required int32 titleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_titleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &titleid_)));
          set_has_titleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_titlename;
        break;
      }

      // optional string titlename = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_titlename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_titlename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->titlename().data(), this->titlename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ishide;
        break;
      }

      // optional int32 ishide = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ishide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ishide_)));
          set_has_ishide();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Client_ChangeTttle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 nId = 1;
  if (has_nid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nid(), output);
  }

  // required int32 titleID = 2;
  if (has_titleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->titleid(), output);
  }

  // optional string titlename = 3;
  if (has_titlename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->titlename().data(), this->titlename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->titlename(), output);
  }

  // optional int32 ishide = 4;
  if (has_ishide()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ishide(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Client_ChangeTttle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 nId = 1;
  if (has_nid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nid(), target);
  }

  // required int32 titleID = 2;
  if (has_titleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->titleid(), target);
  }

  // optional string titlename = 3;
  if (has_titlename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->titlename().data(), this->titlename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->titlename(), target);
  }

  // optional int32 ishide = 4;
  if (has_ishide()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ishide(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Client_ChangeTttle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 nId = 1;
    if (has_nid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nid());
    }

    // required int32 titleID = 2;
    if (has_titleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->titleid());
    }

    // optional string titlename = 3;
    if (has_titlename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->titlename());
    }

    // optional int32 ishide = 4;
    if (has_ishide()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ishide());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Client_ChangeTttle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Client_ChangeTttle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Client_ChangeTttle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Client_ChangeTttle::MergeFrom(const Battle2Client_ChangeTttle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nid()) {
      set_nid(from.nid());
    }
    if (from.has_titleid()) {
      set_titleid(from.titleid());
    }
    if (from.has_titlename()) {
      set_titlename(from.titlename());
    }
    if (from.has_ishide()) {
      set_ishide(from.ishide());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Client_ChangeTttle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Client_ChangeTttle::CopyFrom(const Battle2Client_ChangeTttle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Client_ChangeTttle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Battle2Client_ChangeTttle::Swap(Battle2Client_ChangeTttle* other) {
  if (other != this) {
    std::swap(nid_, other->nid_);
    std::swap(titleid_, other->titleid_);
    std::swap(titlename_, other->titlename_);
    std::swap(ishide_, other->ishide_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Client_ChangeTttle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Client_ChangeTttle_descriptor_;
  metadata.reflection = Battle2Client_ChangeTttle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Client_ChangeEquip::kNIdFieldNumber;
const int Battle2Client_ChangeEquip::kEquipListFieldNumber;
#endif  // !_MSC_VER

Battle2Client_ChangeEquip::Battle2Client_ChangeEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Client_ChangeEquip::InitAsDefaultInstance() {
}

Battle2Client_ChangeEquip::Battle2Client_ChangeEquip(const Battle2Client_ChangeEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Client_ChangeEquip::SharedCtor() {
  _cached_size_ = 0;
  nid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Client_ChangeEquip::~Battle2Client_ChangeEquip() {
  SharedDtor();
}

void Battle2Client_ChangeEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Battle2Client_ChangeEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Client_ChangeEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Client_ChangeEquip_descriptor_;
}

const Battle2Client_ChangeEquip& Battle2Client_ChangeEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Client_ChangeEquip* Battle2Client_ChangeEquip::default_instance_ = NULL;

Battle2Client_ChangeEquip* Battle2Client_ChangeEquip::New() const {
  return new Battle2Client_ChangeEquip;
}

void Battle2Client_ChangeEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nid_ = 0u;
  }
  equip_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Client_ChangeEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 nId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nid_)));
          set_has_nid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_equip_list;
        break;
      }

      // repeated .proto.message.Equip equip_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_equip_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Client_ChangeEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 nId = 1;
  if (has_nid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nid(), output);
  }

  // repeated .proto.message.Equip equip_list = 2;
  for (int i = 0; i < this->equip_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equip_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Client_ChangeEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 nId = 1;
  if (has_nid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nid(), target);
  }

  // repeated .proto.message.Equip equip_list = 2;
  for (int i = 0; i < this->equip_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equip_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Client_ChangeEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 nId = 1;
    if (has_nid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nid());
    }

  }
  // repeated .proto.message.Equip equip_list = 2;
  total_size += 1 * this->equip_list_size();
  for (int i = 0; i < this->equip_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Client_ChangeEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Client_ChangeEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Client_ChangeEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Client_ChangeEquip::MergeFrom(const Battle2Client_ChangeEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_list_.MergeFrom(from.equip_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nid()) {
      set_nid(from.nid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Client_ChangeEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Client_ChangeEquip::CopyFrom(const Battle2Client_ChangeEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Client_ChangeEquip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Battle2Client_ChangeEquip::Swap(Battle2Client_ChangeEquip* other) {
  if (other != this) {
    std::swap(nid_, other->nid_);
    equip_list_.Swap(&other->equip_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Client_ChangeEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Client_ChangeEquip_descriptor_;
  metadata.reflection = Battle2Client_ChangeEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Client_ClientLoadOK::kBranchFieldNumber;
const int Battle2Client_ClientLoadOK::kInitTimeFieldNumber;
const int Battle2Client_ClientLoadOK::kDisplyBranchIdFieldNumber;
const int Battle2Client_ClientLoadOK::kReliveNumFieldNumber;
#endif  // !_MSC_VER

Battle2Client_ClientLoadOK::Battle2Client_ClientLoadOK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Client_ClientLoadOK::InitAsDefaultInstance() {
}

Battle2Client_ClientLoadOK::Battle2Client_ClientLoadOK(const Battle2Client_ClientLoadOK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Client_ClientLoadOK::SharedCtor() {
  _cached_size_ = 0;
  branch_ = 0;
  inittime_ = 0;
  displybranchid_ = 0;
  relivenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Client_ClientLoadOK::~Battle2Client_ClientLoadOK() {
  SharedDtor();
}

void Battle2Client_ClientLoadOK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Battle2Client_ClientLoadOK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Client_ClientLoadOK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Client_ClientLoadOK_descriptor_;
}

const Battle2Client_ClientLoadOK& Battle2Client_ClientLoadOK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Client_ClientLoadOK* Battle2Client_ClientLoadOK::default_instance_ = NULL;

Battle2Client_ClientLoadOK* Battle2Client_ClientLoadOK::New() const {
  return new Battle2Client_ClientLoadOK;
}

void Battle2Client_ClientLoadOK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    branch_ = 0;
    inittime_ = 0;
    displybranchid_ = 0;
    relivenum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Client_ClientLoadOK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Branch = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &branch_)));
          set_has_branch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_initTime;
        break;
      }

      // optional int32 initTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_initTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inittime_)));
          set_has_inittime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_DisplyBranchId;
        break;
      }

      // optional int32 DisplyBranchId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DisplyBranchId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &displybranchid_)));
          set_has_displybranchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_reliveNum;
        break;
      }

      // optional int32 reliveNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reliveNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &relivenum_)));
          set_has_relivenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Client_ClientLoadOK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Branch = 1;
  if (has_branch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->branch(), output);
  }

  // optional int32 initTime = 2;
  if (has_inittime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->inittime(), output);
  }

  // optional int32 DisplyBranchId = 3;
  if (has_displybranchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->displybranchid(), output);
  }

  // optional int32 reliveNum = 4;
  if (has_relivenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->relivenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Client_ClientLoadOK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Branch = 1;
  if (has_branch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->branch(), target);
  }

  // optional int32 initTime = 2;
  if (has_inittime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->inittime(), target);
  }

  // optional int32 DisplyBranchId = 3;
  if (has_displybranchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->displybranchid(), target);
  }

  // optional int32 reliveNum = 4;
  if (has_relivenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->relivenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Client_ClientLoadOK::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Branch = 1;
    if (has_branch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->branch());
    }

    // optional int32 initTime = 2;
    if (has_inittime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inittime());
    }

    // optional int32 DisplyBranchId = 3;
    if (has_displybranchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->displybranchid());
    }

    // optional int32 reliveNum = 4;
    if (has_relivenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->relivenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Client_ClientLoadOK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Client_ClientLoadOK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Client_ClientLoadOK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Client_ClientLoadOK::MergeFrom(const Battle2Client_ClientLoadOK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_branch()) {
      set_branch(from.branch());
    }
    if (from.has_inittime()) {
      set_inittime(from.inittime());
    }
    if (from.has_displybranchid()) {
      set_displybranchid(from.displybranchid());
    }
    if (from.has_relivenum()) {
      set_relivenum(from.relivenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Client_ClientLoadOK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Client_ClientLoadOK::CopyFrom(const Battle2Client_ClientLoadOK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Client_ClientLoadOK::IsInitialized() const {

  return true;
}

void Battle2Client_ClientLoadOK::Swap(Battle2Client_ClientLoadOK* other) {
  if (other != this) {
    std::swap(branch_, other->branch_);
    std::swap(inittime_, other->inittime_);
    std::swap(displybranchid_, other->displybranchid_);
    std::swap(relivenum_, other->relivenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Client_ClientLoadOK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Client_ClientLoadOK_descriptor_;
  metadata.reflection = Battle2Client_ClientLoadOK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Client2Battle__TriggerEvent::kTriggerTypeFieldNumber;
const int Client2Battle__TriggerEvent::kTriggerIdFieldNumber;
#endif  // !_MSC_VER

Client2Battle__TriggerEvent::Client2Battle__TriggerEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Client2Battle__TriggerEvent::InitAsDefaultInstance() {
}

Client2Battle__TriggerEvent::Client2Battle__TriggerEvent(const Client2Battle__TriggerEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Client2Battle__TriggerEvent::SharedCtor() {
  _cached_size_ = 0;
  triggertype_ = 0u;
  triggerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Client2Battle__TriggerEvent::~Client2Battle__TriggerEvent() {
  SharedDtor();
}

void Client2Battle__TriggerEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Client2Battle__TriggerEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Client2Battle__TriggerEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Client2Battle__TriggerEvent_descriptor_;
}

const Client2Battle__TriggerEvent& Client2Battle__TriggerEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Client2Battle__TriggerEvent* Client2Battle__TriggerEvent::default_instance_ = NULL;

Client2Battle__TriggerEvent* Client2Battle__TriggerEvent::New() const {
  return new Client2Battle__TriggerEvent;
}

void Client2Battle__TriggerEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    triggertype_ = 0u;
    triggerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Client2Battle__TriggerEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 TriggerType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &triggertype_)));
          set_has_triggertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_TriggerId;
        break;
      }

      // required uint32 TriggerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TriggerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &triggerid_)));
          set_has_triggerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Client2Battle__TriggerEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 TriggerType = 1;
  if (has_triggertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->triggertype(), output);
  }

  // required uint32 TriggerId = 2;
  if (has_triggerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->triggerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Client2Battle__TriggerEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 TriggerType = 1;
  if (has_triggertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->triggertype(), target);
  }

  // required uint32 TriggerId = 2;
  if (has_triggerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->triggerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Client2Battle__TriggerEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 TriggerType = 1;
    if (has_triggertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->triggertype());
    }

    // required uint32 TriggerId = 2;
    if (has_triggerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->triggerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Client2Battle__TriggerEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Client2Battle__TriggerEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Client2Battle__TriggerEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Client2Battle__TriggerEvent::MergeFrom(const Client2Battle__TriggerEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_triggertype()) {
      set_triggertype(from.triggertype());
    }
    if (from.has_triggerid()) {
      set_triggerid(from.triggerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Client2Battle__TriggerEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Client2Battle__TriggerEvent::CopyFrom(const Client2Battle__TriggerEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Client2Battle__TriggerEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Client2Battle__TriggerEvent::Swap(Client2Battle__TriggerEvent* other) {
  if (other != this) {
    std::swap(triggertype_, other->triggertype_);
    std::swap(triggerid_, other->triggerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Client2Battle__TriggerEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Client2Battle__TriggerEvent_descriptor_;
  metadata.reflection = Client2Battle__TriggerEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Game_AddDropItem::kUiGetWayFieldNumber;
const int Battle2Game_AddDropItem::kVecItemListFieldNumber;
const int Battle2Game_AddDropItem::kUiSendTipsFieldNumber;
#endif  // !_MSC_VER

Battle2Game_AddDropItem::Battle2Game_AddDropItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Game_AddDropItem::InitAsDefaultInstance() {
}

Battle2Game_AddDropItem::Battle2Game_AddDropItem(const Battle2Game_AddDropItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Game_AddDropItem::SharedCtor() {
  _cached_size_ = 0;
  uigetway_ = 0u;
  uisendtips_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Game_AddDropItem::~Battle2Game_AddDropItem() {
  SharedDtor();
}

void Battle2Game_AddDropItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Battle2Game_AddDropItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Game_AddDropItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Game_AddDropItem_descriptor_;
}

const Battle2Game_AddDropItem& Battle2Game_AddDropItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Game_AddDropItem* Battle2Game_AddDropItem::default_instance_ = NULL;

Battle2Game_AddDropItem* Battle2Game_AddDropItem::New() const {
  return new Battle2Game_AddDropItem;
}

void Battle2Game_AddDropItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uigetway_ = 0u;
    uisendtips_ = 0u;
  }
  vecitemlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Game_AddDropItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uiGetWay = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uigetway_)));
          set_has_uigetway();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_vecItemList;
        break;
      }

      // repeated .proto.message.IDNum vecItemList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vecItemList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vecitemlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_vecItemList;
        if (input->ExpectTag(24)) goto parse_uiSendTips;
        break;
      }

      // required uint32 uiSendTips = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiSendTips:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uisendtips_)));
          set_has_uisendtips();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Game_AddDropItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uiGetWay = 1;
  if (has_uigetway()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uigetway(), output);
  }

  // repeated .proto.message.IDNum vecItemList = 2;
  for (int i = 0; i < this->vecitemlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->vecitemlist(i), output);
  }

  // required uint32 uiSendTips = 3;
  if (has_uisendtips()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uisendtips(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Game_AddDropItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uiGetWay = 1;
  if (has_uigetway()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uigetway(), target);
  }

  // repeated .proto.message.IDNum vecItemList = 2;
  for (int i = 0; i < this->vecitemlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->vecitemlist(i), target);
  }

  // required uint32 uiSendTips = 3;
  if (has_uisendtips()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uisendtips(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Game_AddDropItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uiGetWay = 1;
    if (has_uigetway()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uigetway());
    }

    // required uint32 uiSendTips = 3;
    if (has_uisendtips()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uisendtips());
    }

  }
  // repeated .proto.message.IDNum vecItemList = 2;
  total_size += 1 * this->vecitemlist_size();
  for (int i = 0; i < this->vecitemlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vecitemlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Game_AddDropItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Game_AddDropItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Game_AddDropItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Game_AddDropItem::MergeFrom(const Battle2Game_AddDropItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  vecitemlist_.MergeFrom(from.vecitemlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uigetway()) {
      set_uigetway(from.uigetway());
    }
    if (from.has_uisendtips()) {
      set_uisendtips(from.uisendtips());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Game_AddDropItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Game_AddDropItem::CopyFrom(const Battle2Game_AddDropItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Game_AddDropItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void Battle2Game_AddDropItem::Swap(Battle2Game_AddDropItem* other) {
  if (other != this) {
    std::swap(uigetway_, other->uigetway_);
    vecitemlist_.Swap(&other->vecitemlist_);
    std::swap(uisendtips_, other->uisendtips_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Game_AddDropItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Game_AddDropItem_descriptor_;
  metadata.reflection = Battle2Game_AddDropItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Game_DungeonResult::kUiProIdFieldNumber;
const int Battle2Game_DungeonResult::kUiResultFieldNumber;
const int Battle2Game_DungeonResult::kUiGradeFieldNumber;
const int Battle2Game_DungeonResult::kUiPassTimeFieldNumber;
const int Battle2Game_DungeonResult::kUiBeAttTimesFieldNumber;
const int Battle2Game_DungeonResult::kUiRemainHPFieldNumber;
const int Battle2Game_DungeonResult::kUiNPCHPFieldNumber;
const int Battle2Game_DungeonResult::kUiDieTimesFieldNumber;
const int Battle2Game_DungeonResult::kUiNotComTaskFieldNumber;
const int Battle2Game_DungeonResult::kUleaderidFieldNumber;
#endif  // !_MSC_VER

Battle2Game_DungeonResult::Battle2Game_DungeonResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Game_DungeonResult::InitAsDefaultInstance() {
}

Battle2Game_DungeonResult::Battle2Game_DungeonResult(const Battle2Game_DungeonResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Game_DungeonResult::SharedCtor() {
  _cached_size_ = 0;
  uiproid_ = 0u;
  uiresult_ = 0u;
  uigrade_ = 0u;
  uipasstime_ = 0u;
  uibeatttimes_ = 0u;
  uiremainhp_ = 0u;
  uinpchp_ = 0u;
  uidietimes_ = 0u;
  uinotcomtask_ = 0u;
  uleaderid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Game_DungeonResult::~Battle2Game_DungeonResult() {
  SharedDtor();
}

void Battle2Game_DungeonResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Battle2Game_DungeonResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Game_DungeonResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Game_DungeonResult_descriptor_;
}

const Battle2Game_DungeonResult& Battle2Game_DungeonResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Game_DungeonResult* Battle2Game_DungeonResult::default_instance_ = NULL;

Battle2Game_DungeonResult* Battle2Game_DungeonResult::New() const {
  return new Battle2Game_DungeonResult;
}

void Battle2Game_DungeonResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uiproid_ = 0u;
    uiresult_ = 0u;
    uigrade_ = 0u;
    uipasstime_ = 0u;
    uibeatttimes_ = 0u;
    uiremainhp_ = 0u;
    uinpchp_ = 0u;
    uidietimes_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    uinotcomtask_ = 0u;
    uleaderid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Game_DungeonResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uiProId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiproid_)));
          set_has_uiproid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiResult;
        break;
      }

      // required uint32 uiResult = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiResult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiresult_)));
          set_has_uiresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uiGrade;
        break;
      }

      // optional uint32 uiGrade = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiGrade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uigrade_)));
          set_has_uigrade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uiPassTime;
        break;
      }

      // optional uint32 uiPassTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiPassTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uipasstime_)));
          set_has_uipasstime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_uiBeAttTimes;
        break;
      }

      // optional uint32 uiBeAttTimes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiBeAttTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uibeatttimes_)));
          set_has_uibeatttimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_uiRemainHP;
        break;
      }

      // optional uint32 uiRemainHP = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiRemainHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiremainhp_)));
          set_has_uiremainhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_uiNPCHP;
        break;
      }

      // optional uint32 uiNPCHP = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiNPCHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uinpchp_)));
          set_has_uinpchp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_uiDieTimes;
        break;
      }

      // optional uint32 uiDieTimes = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiDieTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uidietimes_)));
          set_has_uidietimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_uiNotComTask;
        break;
      }

      // optional uint32 uiNotComTask = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiNotComTask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uinotcomtask_)));
          set_has_uinotcomtask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_uleaderid;
        break;
      }

      // optional uint64 uleaderid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uleaderid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uleaderid_)));
          set_has_uleaderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Game_DungeonResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uiProId = 1;
  if (has_uiproid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uiproid(), output);
  }

  // required uint32 uiResult = 2;
  if (has_uiresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uiresult(), output);
  }

  // optional uint32 uiGrade = 3;
  if (has_uigrade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uigrade(), output);
  }

  // optional uint32 uiPassTime = 4;
  if (has_uipasstime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uipasstime(), output);
  }

  // optional uint32 uiBeAttTimes = 5;
  if (has_uibeatttimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->uibeatttimes(), output);
  }

  // optional uint32 uiRemainHP = 6;
  if (has_uiremainhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->uiremainhp(), output);
  }

  // optional uint32 uiNPCHP = 7;
  if (has_uinpchp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->uinpchp(), output);
  }

  // optional uint32 uiDieTimes = 8;
  if (has_uidietimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->uidietimes(), output);
  }

  // optional uint32 uiNotComTask = 9;
  if (has_uinotcomtask()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->uinotcomtask(), output);
  }

  // optional uint64 uleaderid = 10;
  if (has_uleaderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->uleaderid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Game_DungeonResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uiProId = 1;
  if (has_uiproid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uiproid(), target);
  }

  // required uint32 uiResult = 2;
  if (has_uiresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uiresult(), target);
  }

  // optional uint32 uiGrade = 3;
  if (has_uigrade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uigrade(), target);
  }

  // optional uint32 uiPassTime = 4;
  if (has_uipasstime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uipasstime(), target);
  }

  // optional uint32 uiBeAttTimes = 5;
  if (has_uibeatttimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->uibeatttimes(), target);
  }

  // optional uint32 uiRemainHP = 6;
  if (has_uiremainhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->uiremainhp(), target);
  }

  // optional uint32 uiNPCHP = 7;
  if (has_uinpchp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->uinpchp(), target);
  }

  // optional uint32 uiDieTimes = 8;
  if (has_uidietimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->uidietimes(), target);
  }

  // optional uint32 uiNotComTask = 9;
  if (has_uinotcomtask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->uinotcomtask(), target);
  }

  // optional uint64 uleaderid = 10;
  if (has_uleaderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->uleaderid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Game_DungeonResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uiProId = 1;
    if (has_uiproid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiproid());
    }

    // required uint32 uiResult = 2;
    if (has_uiresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiresult());
    }

    // optional uint32 uiGrade = 3;
    if (has_uigrade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uigrade());
    }

    // optional uint32 uiPassTime = 4;
    if (has_uipasstime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uipasstime());
    }

    // optional uint32 uiBeAttTimes = 5;
    if (has_uibeatttimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uibeatttimes());
    }

    // optional uint32 uiRemainHP = 6;
    if (has_uiremainhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiremainhp());
    }

    // optional uint32 uiNPCHP = 7;
    if (has_uinpchp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uinpchp());
    }

    // optional uint32 uiDieTimes = 8;
    if (has_uidietimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uidietimes());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 uiNotComTask = 9;
    if (has_uinotcomtask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uinotcomtask());
    }

    // optional uint64 uleaderid = 10;
    if (has_uleaderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uleaderid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Game_DungeonResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Game_DungeonResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Game_DungeonResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Game_DungeonResult::MergeFrom(const Battle2Game_DungeonResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uiproid()) {
      set_uiproid(from.uiproid());
    }
    if (from.has_uiresult()) {
      set_uiresult(from.uiresult());
    }
    if (from.has_uigrade()) {
      set_uigrade(from.uigrade());
    }
    if (from.has_uipasstime()) {
      set_uipasstime(from.uipasstime());
    }
    if (from.has_uibeatttimes()) {
      set_uibeatttimes(from.uibeatttimes());
    }
    if (from.has_uiremainhp()) {
      set_uiremainhp(from.uiremainhp());
    }
    if (from.has_uinpchp()) {
      set_uinpchp(from.uinpchp());
    }
    if (from.has_uidietimes()) {
      set_uidietimes(from.uidietimes());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_uinotcomtask()) {
      set_uinotcomtask(from.uinotcomtask());
    }
    if (from.has_uleaderid()) {
      set_uleaderid(from.uleaderid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Game_DungeonResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Game_DungeonResult::CopyFrom(const Battle2Game_DungeonResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Game_DungeonResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Battle2Game_DungeonResult::Swap(Battle2Game_DungeonResult* other) {
  if (other != this) {
    std::swap(uiproid_, other->uiproid_);
    std::swap(uiresult_, other->uiresult_);
    std::swap(uigrade_, other->uigrade_);
    std::swap(uipasstime_, other->uipasstime_);
    std::swap(uibeatttimes_, other->uibeatttimes_);
    std::swap(uiremainhp_, other->uiremainhp_);
    std::swap(uinpchp_, other->uinpchp_);
    std::swap(uidietimes_, other->uidietimes_);
    std::swap(uinotcomtask_, other->uinotcomtask_);
    std::swap(uleaderid_, other->uleaderid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Game_DungeonResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Game_DungeonResult_descriptor_;
  metadata.reflection = Battle2Game_DungeonResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameToBattle_PlayerDisconnect::kUiBackOnlineFieldNumber;
#endif  // !_MSC_VER

GameToBattle_PlayerDisconnect::GameToBattle_PlayerDisconnect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameToBattle_PlayerDisconnect::InitAsDefaultInstance() {
}

GameToBattle_PlayerDisconnect::GameToBattle_PlayerDisconnect(const GameToBattle_PlayerDisconnect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameToBattle_PlayerDisconnect::SharedCtor() {
  _cached_size_ = 0;
  uibackonline_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameToBattle_PlayerDisconnect::~GameToBattle_PlayerDisconnect() {
  SharedDtor();
}

void GameToBattle_PlayerDisconnect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameToBattle_PlayerDisconnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameToBattle_PlayerDisconnect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameToBattle_PlayerDisconnect_descriptor_;
}

const GameToBattle_PlayerDisconnect& GameToBattle_PlayerDisconnect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

GameToBattle_PlayerDisconnect* GameToBattle_PlayerDisconnect::default_instance_ = NULL;

GameToBattle_PlayerDisconnect* GameToBattle_PlayerDisconnect::New() const {
  return new GameToBattle_PlayerDisconnect;
}

void GameToBattle_PlayerDisconnect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uibackonline_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameToBattle_PlayerDisconnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uiBackOnline = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uibackonline_)));
          set_has_uibackonline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameToBattle_PlayerDisconnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uiBackOnline = 1;
  if (has_uibackonline()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uibackonline(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameToBattle_PlayerDisconnect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uiBackOnline = 1;
  if (has_uibackonline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uibackonline(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameToBattle_PlayerDisconnect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uiBackOnline = 1;
    if (has_uibackonline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uibackonline());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameToBattle_PlayerDisconnect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameToBattle_PlayerDisconnect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameToBattle_PlayerDisconnect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameToBattle_PlayerDisconnect::MergeFrom(const GameToBattle_PlayerDisconnect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uibackonline()) {
      set_uibackonline(from.uibackonline());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameToBattle_PlayerDisconnect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameToBattle_PlayerDisconnect::CopyFrom(const GameToBattle_PlayerDisconnect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameToBattle_PlayerDisconnect::IsInitialized() const {

  return true;
}

void GameToBattle_PlayerDisconnect::Swap(GameToBattle_PlayerDisconnect* other) {
  if (other != this) {
    std::swap(uibackonline_, other->uibackonline_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameToBattle_PlayerDisconnect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameToBattle_PlayerDisconnect_descriptor_;
  metadata.reflection = GameToBattle_PlayerDisconnect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Game_SyncMove::kUiSceneIdFieldNumber;
const int Battle2Game_SyncMove::kPtFieldNumber;
const int Battle2Game_SyncMove::kDirFieldNumber;
const int Battle2Game_SyncMove::kLayerFieldNumber;
const int Battle2Game_SyncMove::kBranchidFieldNumber;
#endif  // !_MSC_VER

Battle2Game_SyncMove::Battle2Game_SyncMove()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Game_SyncMove::InitAsDefaultInstance() {
  pt_ = const_cast< ::proto::message::Point3D*>(&::proto::message::Point3D::default_instance());
}

Battle2Game_SyncMove::Battle2Game_SyncMove(const Battle2Game_SyncMove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Game_SyncMove::SharedCtor() {
  _cached_size_ = 0;
  uisceneid_ = 0u;
  pt_ = NULL;
  dir_ = 0;
  layer_ = 0u;
  branchid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Game_SyncMove::~Battle2Game_SyncMove() {
  SharedDtor();
}

void Battle2Game_SyncMove::SharedDtor() {
  if (this != default_instance_) {
    delete pt_;
  }
}

void Battle2Game_SyncMove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Game_SyncMove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Game_SyncMove_descriptor_;
}

const Battle2Game_SyncMove& Battle2Game_SyncMove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Game_SyncMove* Battle2Game_SyncMove::default_instance_ = NULL;

Battle2Game_SyncMove* Battle2Game_SyncMove::New() const {
  return new Battle2Game_SyncMove;
}

void Battle2Game_SyncMove::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uisceneid_ = 0u;
    if (has_pt()) {
      if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
    }
    dir_ = 0;
    layer_ = 0u;
    branchid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Game_SyncMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uiSceneId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uisceneid_)));
          set_has_uisceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pt;
        break;
      }

      // required .proto.message.Point3D pt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_dir;
        break;
      }

      // required float dir = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_layer;
        break;
      }

      // required uint32 layer = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_branchid;
        break;
      }

      // optional uint32 branchid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_branchid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &branchid_)));
          set_has_branchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Game_SyncMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uiSceneId = 1;
  if (has_uisceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uisceneid(), output);
  }

  // required .proto.message.Point3D pt = 2;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pt(), output);
  }

  // required float dir = 3;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->dir(), output);
  }

  // required uint32 layer = 4;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->layer(), output);
  }

  // optional uint32 branchid = 5;
  if (has_branchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->branchid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Game_SyncMove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uiSceneId = 1;
  if (has_uisceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uisceneid(), target);
  }

  // required .proto.message.Point3D pt = 2;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pt(), target);
  }

  // required float dir = 3;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->dir(), target);
  }

  // required uint32 layer = 4;
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->layer(), target);
  }

  // optional uint32 branchid = 5;
  if (has_branchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->branchid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Game_SyncMove::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uiSceneId = 1;
    if (has_uisceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uisceneid());
    }

    // required .proto.message.Point3D pt = 2;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

    // required float dir = 3;
    if (has_dir()) {
      total_size += 1 + 4;
    }

    // required uint32 layer = 4;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layer());
    }

    // optional uint32 branchid = 5;
    if (has_branchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->branchid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Game_SyncMove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Game_SyncMove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Game_SyncMove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Game_SyncMove::MergeFrom(const Battle2Game_SyncMove& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uisceneid()) {
      set_uisceneid(from.uisceneid());
    }
    if (from.has_pt()) {
      mutable_pt()->::proto::message::Point3D::MergeFrom(from.pt());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_layer()) {
      set_layer(from.layer());
    }
    if (from.has_branchid()) {
      set_branchid(from.branchid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Game_SyncMove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Game_SyncMove::CopyFrom(const Battle2Game_SyncMove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Game_SyncMove::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Battle2Game_SyncMove::Swap(Battle2Game_SyncMove* other) {
  if (other != this) {
    std::swap(uisceneid_, other->uisceneid_);
    std::swap(pt_, other->pt_);
    std::swap(dir_, other->dir_);
    std::swap(layer_, other->layer_);
    std::swap(branchid_, other->branchid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Game_SyncMove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Game_SyncMove_descriptor_;
  metadata.reflection = Battle2Game_SyncMove_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Game_UpdateQuest::kUiQuestTypeFieldNumber;
const int Battle2Game_UpdateQuest::kUiTargetIdFieldNumber;
const int Battle2Game_UpdateQuest::kUiArgFieldNumber;
#endif  // !_MSC_VER

Battle2Game_UpdateQuest::Battle2Game_UpdateQuest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Game_UpdateQuest::InitAsDefaultInstance() {
}

Battle2Game_UpdateQuest::Battle2Game_UpdateQuest(const Battle2Game_UpdateQuest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Game_UpdateQuest::SharedCtor() {
  _cached_size_ = 0;
  uiquesttype_ = 0u;
  uitargetid_ = 0u;
  uiarg_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Game_UpdateQuest::~Battle2Game_UpdateQuest() {
  SharedDtor();
}

void Battle2Game_UpdateQuest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Battle2Game_UpdateQuest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Game_UpdateQuest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Game_UpdateQuest_descriptor_;
}

const Battle2Game_UpdateQuest& Battle2Game_UpdateQuest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Game_UpdateQuest* Battle2Game_UpdateQuest::default_instance_ = NULL;

Battle2Game_UpdateQuest* Battle2Game_UpdateQuest::New() const {
  return new Battle2Game_UpdateQuest;
}

void Battle2Game_UpdateQuest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uiquesttype_ = 0u;
    uitargetid_ = 0u;
    uiarg_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Game_UpdateQuest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uiQuestType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiquesttype_)));
          set_has_uiquesttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiTargetId;
        break;
      }

      // required uint32 uiTargetId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiTargetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uitargetid_)));
          set_has_uitargetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uiArg;
        break;
      }

      // required uint32 uiArg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiArg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiarg_)));
          set_has_uiarg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Game_UpdateQuest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uiQuestType = 1;
  if (has_uiquesttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uiquesttype(), output);
  }

  // required uint32 uiTargetId = 2;
  if (has_uitargetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uitargetid(), output);
  }

  // required uint32 uiArg = 3;
  if (has_uiarg()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uiarg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Game_UpdateQuest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uiQuestType = 1;
  if (has_uiquesttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uiquesttype(), target);
  }

  // required uint32 uiTargetId = 2;
  if (has_uitargetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uitargetid(), target);
  }

  // required uint32 uiArg = 3;
  if (has_uiarg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uiarg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Game_UpdateQuest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uiQuestType = 1;
    if (has_uiquesttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiquesttype());
    }

    // required uint32 uiTargetId = 2;
    if (has_uitargetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uitargetid());
    }

    // required uint32 uiArg = 3;
    if (has_uiarg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiarg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Game_UpdateQuest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Game_UpdateQuest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Game_UpdateQuest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Game_UpdateQuest::MergeFrom(const Battle2Game_UpdateQuest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uiquesttype()) {
      set_uiquesttype(from.uiquesttype());
    }
    if (from.has_uitargetid()) {
      set_uitargetid(from.uitargetid());
    }
    if (from.has_uiarg()) {
      set_uiarg(from.uiarg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Game_UpdateQuest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Game_UpdateQuest::CopyFrom(const Battle2Game_UpdateQuest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Game_UpdateQuest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Battle2Game_UpdateQuest::Swap(Battle2Game_UpdateQuest* other) {
  if (other != this) {
    std::swap(uiquesttype_, other->uiquesttype_);
    std::swap(uitargetid_, other->uitargetid_);
    std::swap(uiarg_, other->uiarg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Game_UpdateQuest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Game_UpdateQuest_descriptor_;
  metadata.reflection = Battle2Game_UpdateQuest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Game_TriggerQuest::kUiQuestIdFieldNumber;
const int Battle2Game_TriggerQuest::kUiQuestTypeFieldNumber;
#endif  // !_MSC_VER

Battle2Game_TriggerQuest::Battle2Game_TriggerQuest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Game_TriggerQuest::InitAsDefaultInstance() {
}

Battle2Game_TriggerQuest::Battle2Game_TriggerQuest(const Battle2Game_TriggerQuest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Game_TriggerQuest::SharedCtor() {
  _cached_size_ = 0;
  uiquestid_ = 0u;
  uiquesttype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Game_TriggerQuest::~Battle2Game_TriggerQuest() {
  SharedDtor();
}

void Battle2Game_TriggerQuest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Battle2Game_TriggerQuest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Game_TriggerQuest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Game_TriggerQuest_descriptor_;
}

const Battle2Game_TriggerQuest& Battle2Game_TriggerQuest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Game_TriggerQuest* Battle2Game_TriggerQuest::default_instance_ = NULL;

Battle2Game_TriggerQuest* Battle2Game_TriggerQuest::New() const {
  return new Battle2Game_TriggerQuest;
}

void Battle2Game_TriggerQuest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uiquestid_ = 0u;
    uiquesttype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Game_TriggerQuest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uiQuestId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiquestid_)));
          set_has_uiquestid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiQuestType;
        break;
      }

      // required uint32 uiQuestType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiQuestType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiquesttype_)));
          set_has_uiquesttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Game_TriggerQuest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uiQuestId = 1;
  if (has_uiquestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uiquestid(), output);
  }

  // required uint32 uiQuestType = 2;
  if (has_uiquesttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uiquesttype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Game_TriggerQuest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uiQuestId = 1;
  if (has_uiquestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uiquestid(), target);
  }

  // required uint32 uiQuestType = 2;
  if (has_uiquesttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uiquesttype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Game_TriggerQuest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uiQuestId = 1;
    if (has_uiquestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiquestid());
    }

    // required uint32 uiQuestType = 2;
    if (has_uiquesttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiquesttype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Game_TriggerQuest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Game_TriggerQuest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Game_TriggerQuest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Game_TriggerQuest::MergeFrom(const Battle2Game_TriggerQuest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uiquestid()) {
      set_uiquestid(from.uiquestid());
    }
    if (from.has_uiquesttype()) {
      set_uiquesttype(from.uiquesttype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Game_TriggerQuest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Game_TriggerQuest::CopyFrom(const Battle2Game_TriggerQuest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Game_TriggerQuest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Battle2Game_TriggerQuest::Swap(Battle2Game_TriggerQuest* other) {
  if (other != this) {
    std::swap(uiquestid_, other->uiquestid_);
    std::swap(uiquesttype_, other->uiquesttype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Game_TriggerQuest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Game_TriggerQuest_descriptor_;
  metadata.reflection = Battle2Game_TriggerQuest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Game_MonsterDie::kUiMonsterProIdFieldNumber;
const int Battle2Game_MonsterDie::kUiMonsterObjIdFieldNumber;
const int Battle2Game_MonsterDie::kPtFieldNumber;
#endif  // !_MSC_VER

Battle2Game_MonsterDie::Battle2Game_MonsterDie()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Game_MonsterDie::InitAsDefaultInstance() {
  pt_ = const_cast< ::proto::message::Point3D*>(&::proto::message::Point3D::default_instance());
}

Battle2Game_MonsterDie::Battle2Game_MonsterDie(const Battle2Game_MonsterDie& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Game_MonsterDie::SharedCtor() {
  _cached_size_ = 0;
  uimonsterproid_ = 0u;
  uimonsterobjid_ = 0u;
  pt_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Game_MonsterDie::~Battle2Game_MonsterDie() {
  SharedDtor();
}

void Battle2Game_MonsterDie::SharedDtor() {
  if (this != default_instance_) {
    delete pt_;
  }
}

void Battle2Game_MonsterDie::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Game_MonsterDie::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Game_MonsterDie_descriptor_;
}

const Battle2Game_MonsterDie& Battle2Game_MonsterDie::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Game_MonsterDie* Battle2Game_MonsterDie::default_instance_ = NULL;

Battle2Game_MonsterDie* Battle2Game_MonsterDie::New() const {
  return new Battle2Game_MonsterDie;
}

void Battle2Game_MonsterDie::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uimonsterproid_ = 0u;
    uimonsterobjid_ = 0u;
    if (has_pt()) {
      if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Game_MonsterDie::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uiMonsterProId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uimonsterproid_)));
          set_has_uimonsterproid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiMonsterObjId;
        break;
      }

      // required uint32 uiMonsterObjId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiMonsterObjId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uimonsterobjid_)));
          set_has_uimonsterobjid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pt;
        break;
      }

      // required .proto.message.Point3D pt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Game_MonsterDie::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uiMonsterProId = 1;
  if (has_uimonsterproid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uimonsterproid(), output);
  }

  // required uint32 uiMonsterObjId = 2;
  if (has_uimonsterobjid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uimonsterobjid(), output);
  }

  // required .proto.message.Point3D pt = 3;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Game_MonsterDie::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uiMonsterProId = 1;
  if (has_uimonsterproid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uimonsterproid(), target);
  }

  // required uint32 uiMonsterObjId = 2;
  if (has_uimonsterobjid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uimonsterobjid(), target);
  }

  // required .proto.message.Point3D pt = 3;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Game_MonsterDie::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uiMonsterProId = 1;
    if (has_uimonsterproid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uimonsterproid());
    }

    // required uint32 uiMonsterObjId = 2;
    if (has_uimonsterobjid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uimonsterobjid());
    }

    // required .proto.message.Point3D pt = 3;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Game_MonsterDie::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Game_MonsterDie* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Game_MonsterDie*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Game_MonsterDie::MergeFrom(const Battle2Game_MonsterDie& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uimonsterproid()) {
      set_uimonsterproid(from.uimonsterproid());
    }
    if (from.has_uimonsterobjid()) {
      set_uimonsterobjid(from.uimonsterobjid());
    }
    if (from.has_pt()) {
      mutable_pt()->::proto::message::Point3D::MergeFrom(from.pt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Game_MonsterDie::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Game_MonsterDie::CopyFrom(const Battle2Game_MonsterDie& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Game_MonsterDie::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Battle2Game_MonsterDie::Swap(Battle2Game_MonsterDie* other) {
  if (other != this) {
    std::swap(uimonsterproid_, other->uimonsterproid_);
    std::swap(uimonsterobjid_, other->uimonsterobjid_);
    std::swap(pt_, other->pt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Game_MonsterDie::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Game_MonsterDie_descriptor_;
  metadata.reflection = Battle2Game_MonsterDie_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Game_LeaveDungeon::kUiEndFieldNumber;
const int Battle2Game_LeaveDungeon::kUiAgainFieldNumber;
#endif  // !_MSC_VER

Battle2Game_LeaveDungeon::Battle2Game_LeaveDungeon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Game_LeaveDungeon::InitAsDefaultInstance() {
}

Battle2Game_LeaveDungeon::Battle2Game_LeaveDungeon(const Battle2Game_LeaveDungeon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Game_LeaveDungeon::SharedCtor() {
  _cached_size_ = 0;
  uiend_ = 0u;
  uiagain_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Game_LeaveDungeon::~Battle2Game_LeaveDungeon() {
  SharedDtor();
}

void Battle2Game_LeaveDungeon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Battle2Game_LeaveDungeon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Game_LeaveDungeon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Game_LeaveDungeon_descriptor_;
}

const Battle2Game_LeaveDungeon& Battle2Game_LeaveDungeon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Game_LeaveDungeon* Battle2Game_LeaveDungeon::default_instance_ = NULL;

Battle2Game_LeaveDungeon* Battle2Game_LeaveDungeon::New() const {
  return new Battle2Game_LeaveDungeon;
}

void Battle2Game_LeaveDungeon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uiend_ = 0u;
    uiagain_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Game_LeaveDungeon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uiEnd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiend_)));
          set_has_uiend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiAgain;
        break;
      }

      // required uint32 uiAgain = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiAgain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiagain_)));
          set_has_uiagain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Game_LeaveDungeon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uiEnd = 1;
  if (has_uiend()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uiend(), output);
  }

  // required uint32 uiAgain = 2;
  if (has_uiagain()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uiagain(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Game_LeaveDungeon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uiEnd = 1;
  if (has_uiend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uiend(), target);
  }

  // required uint32 uiAgain = 2;
  if (has_uiagain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uiagain(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Game_LeaveDungeon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uiEnd = 1;
    if (has_uiend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiend());
    }

    // required uint32 uiAgain = 2;
    if (has_uiagain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiagain());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Game_LeaveDungeon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Game_LeaveDungeon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Game_LeaveDungeon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Game_LeaveDungeon::MergeFrom(const Battle2Game_LeaveDungeon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uiend()) {
      set_uiend(from.uiend());
    }
    if (from.has_uiagain()) {
      set_uiagain(from.uiagain());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Game_LeaveDungeon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Game_LeaveDungeon::CopyFrom(const Battle2Game_LeaveDungeon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Game_LeaveDungeon::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Battle2Game_LeaveDungeon::Swap(Battle2Game_LeaveDungeon* other) {
  if (other != this) {
    std::swap(uiend_, other->uiend_);
    std::swap(uiagain_, other->uiagain_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Game_LeaveDungeon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Game_LeaveDungeon_descriptor_;
  metadata.reflection = Battle2Game_LeaveDungeon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Battle2Game_ChangeMapForceAwakenOff::Battle2Game_ChangeMapForceAwakenOff()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Game_ChangeMapForceAwakenOff::InitAsDefaultInstance() {
}

Battle2Game_ChangeMapForceAwakenOff::Battle2Game_ChangeMapForceAwakenOff(const Battle2Game_ChangeMapForceAwakenOff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Game_ChangeMapForceAwakenOff::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Game_ChangeMapForceAwakenOff::~Battle2Game_ChangeMapForceAwakenOff() {
  SharedDtor();
}

void Battle2Game_ChangeMapForceAwakenOff::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Battle2Game_ChangeMapForceAwakenOff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Game_ChangeMapForceAwakenOff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Game_ChangeMapForceAwakenOff_descriptor_;
}

const Battle2Game_ChangeMapForceAwakenOff& Battle2Game_ChangeMapForceAwakenOff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Game_ChangeMapForceAwakenOff* Battle2Game_ChangeMapForceAwakenOff::default_instance_ = NULL;

Battle2Game_ChangeMapForceAwakenOff* Battle2Game_ChangeMapForceAwakenOff::New() const {
  return new Battle2Game_ChangeMapForceAwakenOff;
}

void Battle2Game_ChangeMapForceAwakenOff::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Game_ChangeMapForceAwakenOff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Battle2Game_ChangeMapForceAwakenOff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Game_ChangeMapForceAwakenOff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Game_ChangeMapForceAwakenOff::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Game_ChangeMapForceAwakenOff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Game_ChangeMapForceAwakenOff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Game_ChangeMapForceAwakenOff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Game_ChangeMapForceAwakenOff::MergeFrom(const Battle2Game_ChangeMapForceAwakenOff& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Game_ChangeMapForceAwakenOff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Game_ChangeMapForceAwakenOff::CopyFrom(const Battle2Game_ChangeMapForceAwakenOff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Game_ChangeMapForceAwakenOff::IsInitialized() const {

  return true;
}

void Battle2Game_ChangeMapForceAwakenOff::Swap(Battle2Game_ChangeMapForceAwakenOff* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Game_ChangeMapForceAwakenOff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Game_ChangeMapForceAwakenOff_descriptor_;
  metadata.reflection = Battle2Game_ChangeMapForceAwakenOff_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Battle2Game_DieToChangeAwakenAndRide::Battle2Game_DieToChangeAwakenAndRide()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Game_DieToChangeAwakenAndRide::InitAsDefaultInstance() {
}

Battle2Game_DieToChangeAwakenAndRide::Battle2Game_DieToChangeAwakenAndRide(const Battle2Game_DieToChangeAwakenAndRide& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Game_DieToChangeAwakenAndRide::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Game_DieToChangeAwakenAndRide::~Battle2Game_DieToChangeAwakenAndRide() {
  SharedDtor();
}

void Battle2Game_DieToChangeAwakenAndRide::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Battle2Game_DieToChangeAwakenAndRide::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Game_DieToChangeAwakenAndRide::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Game_DieToChangeAwakenAndRide_descriptor_;
}

const Battle2Game_DieToChangeAwakenAndRide& Battle2Game_DieToChangeAwakenAndRide::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Game_DieToChangeAwakenAndRide* Battle2Game_DieToChangeAwakenAndRide::default_instance_ = NULL;

Battle2Game_DieToChangeAwakenAndRide* Battle2Game_DieToChangeAwakenAndRide::New() const {
  return new Battle2Game_DieToChangeAwakenAndRide;
}

void Battle2Game_DieToChangeAwakenAndRide::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Game_DieToChangeAwakenAndRide::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Battle2Game_DieToChangeAwakenAndRide::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Game_DieToChangeAwakenAndRide::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Game_DieToChangeAwakenAndRide::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Game_DieToChangeAwakenAndRide::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Game_DieToChangeAwakenAndRide* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Game_DieToChangeAwakenAndRide*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Game_DieToChangeAwakenAndRide::MergeFrom(const Battle2Game_DieToChangeAwakenAndRide& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Game_DieToChangeAwakenAndRide::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Game_DieToChangeAwakenAndRide::CopyFrom(const Battle2Game_DieToChangeAwakenAndRide& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Game_DieToChangeAwakenAndRide::IsInitialized() const {

  return true;
}

void Battle2Game_DieToChangeAwakenAndRide::Swap(Battle2Game_DieToChangeAwakenAndRide* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Game_DieToChangeAwakenAndRide::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Game_DieToChangeAwakenAndRide_descriptor_;
  metadata.reflection = Battle2Game_DieToChangeAwakenAndRide_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Battle2Game_SceneLoadOk::Battle2Game_SceneLoadOk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Game_SceneLoadOk::InitAsDefaultInstance() {
}

Battle2Game_SceneLoadOk::Battle2Game_SceneLoadOk(const Battle2Game_SceneLoadOk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Game_SceneLoadOk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Game_SceneLoadOk::~Battle2Game_SceneLoadOk() {
  SharedDtor();
}

void Battle2Game_SceneLoadOk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Battle2Game_SceneLoadOk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Game_SceneLoadOk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Game_SceneLoadOk_descriptor_;
}

const Battle2Game_SceneLoadOk& Battle2Game_SceneLoadOk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Game_SceneLoadOk* Battle2Game_SceneLoadOk::default_instance_ = NULL;

Battle2Game_SceneLoadOk* Battle2Game_SceneLoadOk::New() const {
  return new Battle2Game_SceneLoadOk;
}

void Battle2Game_SceneLoadOk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Game_SceneLoadOk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Battle2Game_SceneLoadOk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Game_SceneLoadOk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Game_SceneLoadOk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Game_SceneLoadOk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Game_SceneLoadOk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Game_SceneLoadOk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Game_SceneLoadOk::MergeFrom(const Battle2Game_SceneLoadOk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Game_SceneLoadOk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Game_SceneLoadOk::CopyFrom(const Battle2Game_SceneLoadOk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Game_SceneLoadOk::IsInitialized() const {

  return true;
}

void Battle2Game_SceneLoadOk::Swap(Battle2Game_SceneLoadOk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Game_SceneLoadOk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Game_SceneLoadOk_descriptor_;
  metadata.reflection = Battle2Game_SceneLoadOk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Game_MercenaryDieInfo::kUiMercenaryFieldNumber;
#endif  // !_MSC_VER

Battle2Game_MercenaryDieInfo::Battle2Game_MercenaryDieInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Game_MercenaryDieInfo::InitAsDefaultInstance() {
}

Battle2Game_MercenaryDieInfo::Battle2Game_MercenaryDieInfo(const Battle2Game_MercenaryDieInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Game_MercenaryDieInfo::SharedCtor() {
  _cached_size_ = 0;
  uimercenary_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Game_MercenaryDieInfo::~Battle2Game_MercenaryDieInfo() {
  SharedDtor();
}

void Battle2Game_MercenaryDieInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Battle2Game_MercenaryDieInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Game_MercenaryDieInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Game_MercenaryDieInfo_descriptor_;
}

const Battle2Game_MercenaryDieInfo& Battle2Game_MercenaryDieInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Game_MercenaryDieInfo* Battle2Game_MercenaryDieInfo::default_instance_ = NULL;

Battle2Game_MercenaryDieInfo* Battle2Game_MercenaryDieInfo::New() const {
  return new Battle2Game_MercenaryDieInfo;
}

void Battle2Game_MercenaryDieInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uimercenary_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Game_MercenaryDieInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uiMercenary = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uimercenary_)));
          set_has_uimercenary();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Game_MercenaryDieInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uiMercenary = 1;
  if (has_uimercenary()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uimercenary(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Game_MercenaryDieInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uiMercenary = 1;
  if (has_uimercenary()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uimercenary(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Game_MercenaryDieInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uiMercenary = 1;
    if (has_uimercenary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uimercenary());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Game_MercenaryDieInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Game_MercenaryDieInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Game_MercenaryDieInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Game_MercenaryDieInfo::MergeFrom(const Battle2Game_MercenaryDieInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uimercenary()) {
      set_uimercenary(from.uimercenary());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Game_MercenaryDieInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Game_MercenaryDieInfo::CopyFrom(const Battle2Game_MercenaryDieInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Game_MercenaryDieInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Battle2Game_MercenaryDieInfo::Swap(Battle2Game_MercenaryDieInfo* other) {
  if (other != this) {
    std::swap(uimercenary_, other->uimercenary_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Game_MercenaryDieInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Game_MercenaryDieInfo_descriptor_;
  metadata.reflection = Battle2Game_MercenaryDieInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Game2Battle_CheckTrigger::kUiTypeFieldNumber;
const int Game2Battle_CheckTrigger::kUiValueFieldNumber;
#endif  // !_MSC_VER

Game2Battle_CheckTrigger::Game2Battle_CheckTrigger()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Game2Battle_CheckTrigger::InitAsDefaultInstance() {
}

Game2Battle_CheckTrigger::Game2Battle_CheckTrigger(const Game2Battle_CheckTrigger& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Game2Battle_CheckTrigger::SharedCtor() {
  _cached_size_ = 0;
  uitype_ = 0u;
  uivalue_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Game2Battle_CheckTrigger::~Game2Battle_CheckTrigger() {
  SharedDtor();
}

void Game2Battle_CheckTrigger::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Game2Battle_CheckTrigger::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Game2Battle_CheckTrigger::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Game2Battle_CheckTrigger_descriptor_;
}

const Game2Battle_CheckTrigger& Game2Battle_CheckTrigger::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Game2Battle_CheckTrigger* Game2Battle_CheckTrigger::default_instance_ = NULL;

Game2Battle_CheckTrigger* Game2Battle_CheckTrigger::New() const {
  return new Game2Battle_CheckTrigger;
}

void Game2Battle_CheckTrigger::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uitype_ = 0u;
    uivalue_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Game2Battle_CheckTrigger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uiType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uitype_)));
          set_has_uitype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiValue;
        break;
      }

      // required uint32 uiValue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uivalue_)));
          set_has_uivalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Game2Battle_CheckTrigger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uiType = 1;
  if (has_uitype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uitype(), output);
  }

  // required uint32 uiValue = 2;
  if (has_uivalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uivalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Game2Battle_CheckTrigger::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uiType = 1;
  if (has_uitype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uitype(), target);
  }

  // required uint32 uiValue = 2;
  if (has_uivalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uivalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Game2Battle_CheckTrigger::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uiType = 1;
    if (has_uitype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uitype());
    }

    // required uint32 uiValue = 2;
    if (has_uivalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uivalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Game2Battle_CheckTrigger::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Game2Battle_CheckTrigger* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Game2Battle_CheckTrigger*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Game2Battle_CheckTrigger::MergeFrom(const Game2Battle_CheckTrigger& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uitype()) {
      set_uitype(from.uitype());
    }
    if (from.has_uivalue()) {
      set_uivalue(from.uivalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Game2Battle_CheckTrigger::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Game2Battle_CheckTrigger::CopyFrom(const Game2Battle_CheckTrigger& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game2Battle_CheckTrigger::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Game2Battle_CheckTrigger::Swap(Game2Battle_CheckTrigger* other) {
  if (other != this) {
    std::swap(uitype_, other->uitype_);
    std::swap(uivalue_, other->uivalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Game2Battle_CheckTrigger::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Game2Battle_CheckTrigger_descriptor_;
  metadata.reflection = Game2Battle_CheckTrigger_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Game2Battle_AddQuestTrigger::kUiQuestIdFieldNumber;
const int Game2Battle_AddQuestTrigger::kUiQuestTargetTypeFieldNumber;
const int Game2Battle_AddQuestTrigger::kUiTriggerIdFieldNumber;
const int Game2Battle_AddQuestTrigger::kUiTriggerNPCIdFieldNumber;
#endif  // !_MSC_VER

Game2Battle_AddQuestTrigger::Game2Battle_AddQuestTrigger()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Game2Battle_AddQuestTrigger::InitAsDefaultInstance() {
}

Game2Battle_AddQuestTrigger::Game2Battle_AddQuestTrigger(const Game2Battle_AddQuestTrigger& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Game2Battle_AddQuestTrigger::SharedCtor() {
  _cached_size_ = 0;
  uiquestid_ = 0u;
  uiquesttargettype_ = 0u;
  uitriggerid_ = 0u;
  uitriggernpcid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Game2Battle_AddQuestTrigger::~Game2Battle_AddQuestTrigger() {
  SharedDtor();
}

void Game2Battle_AddQuestTrigger::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Game2Battle_AddQuestTrigger::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Game2Battle_AddQuestTrigger::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Game2Battle_AddQuestTrigger_descriptor_;
}

const Game2Battle_AddQuestTrigger& Game2Battle_AddQuestTrigger::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Game2Battle_AddQuestTrigger* Game2Battle_AddQuestTrigger::default_instance_ = NULL;

Game2Battle_AddQuestTrigger* Game2Battle_AddQuestTrigger::New() const {
  return new Game2Battle_AddQuestTrigger;
}

void Game2Battle_AddQuestTrigger::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uiquestid_ = 0u;
    uiquesttargettype_ = 0u;
    uitriggerid_ = 0u;
    uitriggernpcid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Game2Battle_AddQuestTrigger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uiQuestId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiquestid_)));
          set_has_uiquestid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiQuestTargetType;
        break;
      }

      // required uint32 uiQuestTargetType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiQuestTargetType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiquesttargettype_)));
          set_has_uiquesttargettype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uiTriggerId;
        break;
      }

      // required uint32 uiTriggerId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiTriggerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uitriggerid_)));
          set_has_uitriggerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uiTriggerNPCId;
        break;
      }

      // required uint32 uiTriggerNPCId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiTriggerNPCId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uitriggernpcid_)));
          set_has_uitriggernpcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Game2Battle_AddQuestTrigger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uiQuestId = 1;
  if (has_uiquestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uiquestid(), output);
  }

  // required uint32 uiQuestTargetType = 2;
  if (has_uiquesttargettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uiquesttargettype(), output);
  }

  // required uint32 uiTriggerId = 3;
  if (has_uitriggerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uitriggerid(), output);
  }

  // required uint32 uiTriggerNPCId = 4;
  if (has_uitriggernpcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uitriggernpcid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Game2Battle_AddQuestTrigger::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uiQuestId = 1;
  if (has_uiquestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uiquestid(), target);
  }

  // required uint32 uiQuestTargetType = 2;
  if (has_uiquesttargettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uiquesttargettype(), target);
  }

  // required uint32 uiTriggerId = 3;
  if (has_uitriggerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uitriggerid(), target);
  }

  // required uint32 uiTriggerNPCId = 4;
  if (has_uitriggernpcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uitriggernpcid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Game2Battle_AddQuestTrigger::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uiQuestId = 1;
    if (has_uiquestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiquestid());
    }

    // required uint32 uiQuestTargetType = 2;
    if (has_uiquesttargettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiquesttargettype());
    }

    // required uint32 uiTriggerId = 3;
    if (has_uitriggerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uitriggerid());
    }

    // required uint32 uiTriggerNPCId = 4;
    if (has_uitriggernpcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uitriggernpcid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Game2Battle_AddQuestTrigger::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Game2Battle_AddQuestTrigger* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Game2Battle_AddQuestTrigger*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Game2Battle_AddQuestTrigger::MergeFrom(const Game2Battle_AddQuestTrigger& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uiquestid()) {
      set_uiquestid(from.uiquestid());
    }
    if (from.has_uiquesttargettype()) {
      set_uiquesttargettype(from.uiquesttargettype());
    }
    if (from.has_uitriggerid()) {
      set_uitriggerid(from.uitriggerid());
    }
    if (from.has_uitriggernpcid()) {
      set_uitriggernpcid(from.uitriggernpcid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Game2Battle_AddQuestTrigger::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Game2Battle_AddQuestTrigger::CopyFrom(const Game2Battle_AddQuestTrigger& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game2Battle_AddQuestTrigger::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Game2Battle_AddQuestTrigger::Swap(Game2Battle_AddQuestTrigger* other) {
  if (other != this) {
    std::swap(uiquestid_, other->uiquestid_);
    std::swap(uiquesttargettype_, other->uiquesttargettype_);
    std::swap(uitriggerid_, other->uitriggerid_);
    std::swap(uitriggernpcid_, other->uitriggernpcid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Game2Battle_AddQuestTrigger::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Game2Battle_AddQuestTrigger_descriptor_;
  metadata.reflection = Game2Battle_AddQuestTrigger_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Game2Battle_UpdateTask::kUiIdFieldNumber;
const int Game2Battle_UpdateTask::kUiValueFieldNumber;
#endif  // !_MSC_VER

Game2Battle_UpdateTask::Game2Battle_UpdateTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Game2Battle_UpdateTask::InitAsDefaultInstance() {
}

Game2Battle_UpdateTask::Game2Battle_UpdateTask(const Game2Battle_UpdateTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Game2Battle_UpdateTask::SharedCtor() {
  _cached_size_ = 0;
  uiid_ = 0u;
  uivalue_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Game2Battle_UpdateTask::~Game2Battle_UpdateTask() {
  SharedDtor();
}

void Game2Battle_UpdateTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Game2Battle_UpdateTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Game2Battle_UpdateTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Game2Battle_UpdateTask_descriptor_;
}

const Game2Battle_UpdateTask& Game2Battle_UpdateTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Game2Battle_UpdateTask* Game2Battle_UpdateTask::default_instance_ = NULL;

Game2Battle_UpdateTask* Game2Battle_UpdateTask::New() const {
  return new Game2Battle_UpdateTask;
}

void Game2Battle_UpdateTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uiid_ = 0u;
    uivalue_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Game2Battle_UpdateTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uiId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiid_)));
          set_has_uiid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiValue;
        break;
      }

      // required uint32 uiValue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uivalue_)));
          set_has_uivalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Game2Battle_UpdateTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uiId = 1;
  if (has_uiid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uiid(), output);
  }

  // required uint32 uiValue = 2;
  if (has_uivalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uivalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Game2Battle_UpdateTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uiId = 1;
  if (has_uiid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uiid(), target);
  }

  // required uint32 uiValue = 2;
  if (has_uivalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uivalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Game2Battle_UpdateTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uiId = 1;
    if (has_uiid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiid());
    }

    // required uint32 uiValue = 2;
    if (has_uivalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uivalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Game2Battle_UpdateTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Game2Battle_UpdateTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Game2Battle_UpdateTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Game2Battle_UpdateTask::MergeFrom(const Game2Battle_UpdateTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uiid()) {
      set_uiid(from.uiid());
    }
    if (from.has_uivalue()) {
      set_uivalue(from.uivalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Game2Battle_UpdateTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Game2Battle_UpdateTask::CopyFrom(const Game2Battle_UpdateTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game2Battle_UpdateTask::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Game2Battle_UpdateTask::Swap(Game2Battle_UpdateTask* other) {
  if (other != this) {
    std::swap(uiid_, other->uiid_);
    std::swap(uivalue_, other->uivalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Game2Battle_UpdateTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Game2Battle_UpdateTask_descriptor_;
  metadata.reflection = Game2Battle_UpdateTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Game2Battle_QuestNPCAddBuff::kNTriggerNPCIdFieldNumber;
const int Game2Battle_QuestNPCAddBuff::kUiTypeFieldNumber;
#endif  // !_MSC_VER

Game2Battle_QuestNPCAddBuff::Game2Battle_QuestNPCAddBuff()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Game2Battle_QuestNPCAddBuff::InitAsDefaultInstance() {
}

Game2Battle_QuestNPCAddBuff::Game2Battle_QuestNPCAddBuff(const Game2Battle_QuestNPCAddBuff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Game2Battle_QuestNPCAddBuff::SharedCtor() {
  _cached_size_ = 0;
  ntriggernpcid_ = 0u;
  uitype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Game2Battle_QuestNPCAddBuff::~Game2Battle_QuestNPCAddBuff() {
  SharedDtor();
}

void Game2Battle_QuestNPCAddBuff::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Game2Battle_QuestNPCAddBuff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Game2Battle_QuestNPCAddBuff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Game2Battle_QuestNPCAddBuff_descriptor_;
}

const Game2Battle_QuestNPCAddBuff& Game2Battle_QuestNPCAddBuff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Game2Battle_QuestNPCAddBuff* Game2Battle_QuestNPCAddBuff::default_instance_ = NULL;

Game2Battle_QuestNPCAddBuff* Game2Battle_QuestNPCAddBuff::New() const {
  return new Game2Battle_QuestNPCAddBuff;
}

void Game2Battle_QuestNPCAddBuff::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ntriggernpcid_ = 0u;
    uitype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Game2Battle_QuestNPCAddBuff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 nTriggerNPCId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ntriggernpcid_)));
          set_has_ntriggernpcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiType;
        break;
      }

      // required uint32 uiType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uitype_)));
          set_has_uitype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Game2Battle_QuestNPCAddBuff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 nTriggerNPCId = 1;
  if (has_ntriggernpcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ntriggernpcid(), output);
  }

  // required uint32 uiType = 2;
  if (has_uitype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uitype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Game2Battle_QuestNPCAddBuff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 nTriggerNPCId = 1;
  if (has_ntriggernpcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ntriggernpcid(), target);
  }

  // required uint32 uiType = 2;
  if (has_uitype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uitype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Game2Battle_QuestNPCAddBuff::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 nTriggerNPCId = 1;
    if (has_ntriggernpcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ntriggernpcid());
    }

    // required uint32 uiType = 2;
    if (has_uitype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uitype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Game2Battle_QuestNPCAddBuff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Game2Battle_QuestNPCAddBuff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Game2Battle_QuestNPCAddBuff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Game2Battle_QuestNPCAddBuff::MergeFrom(const Game2Battle_QuestNPCAddBuff& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ntriggernpcid()) {
      set_ntriggernpcid(from.ntriggernpcid());
    }
    if (from.has_uitype()) {
      set_uitype(from.uitype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Game2Battle_QuestNPCAddBuff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Game2Battle_QuestNPCAddBuff::CopyFrom(const Game2Battle_QuestNPCAddBuff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game2Battle_QuestNPCAddBuff::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Game2Battle_QuestNPCAddBuff::Swap(Game2Battle_QuestNPCAddBuff* other) {
  if (other != this) {
    std::swap(ntriggernpcid_, other->ntriggernpcid_);
    std::swap(uitype_, other->uitype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Game2Battle_QuestNPCAddBuff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Game2Battle_QuestNPCAddBuff_descriptor_;
  metadata.reflection = Game2Battle_QuestNPCAddBuff_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Client2Battle_GameStoryStart::kGameStoryIDFieldNumber;
const int Client2Battle_GameStoryStart::kNPCIDFieldNumber;
#endif  // !_MSC_VER

Client2Battle_GameStoryStart::Client2Battle_GameStoryStart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Client2Battle_GameStoryStart::InitAsDefaultInstance() {
}

Client2Battle_GameStoryStart::Client2Battle_GameStoryStart(const Client2Battle_GameStoryStart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Client2Battle_GameStoryStart::SharedCtor() {
  _cached_size_ = 0;
  gamestoryid_ = 0u;
  npcid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Client2Battle_GameStoryStart::~Client2Battle_GameStoryStart() {
  SharedDtor();
}

void Client2Battle_GameStoryStart::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Client2Battle_GameStoryStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Client2Battle_GameStoryStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Client2Battle_GameStoryStart_descriptor_;
}

const Client2Battle_GameStoryStart& Client2Battle_GameStoryStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Client2Battle_GameStoryStart* Client2Battle_GameStoryStart::default_instance_ = NULL;

Client2Battle_GameStoryStart* Client2Battle_GameStoryStart::New() const {
  return new Client2Battle_GameStoryStart;
}

void Client2Battle_GameStoryStart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gamestoryid_ = 0u;
    npcid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Client2Battle_GameStoryStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 GameStoryID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gamestoryid_)));
          set_has_gamestoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_NPCID;
        break;
      }

      // optional uint32 NPCID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NPCID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npcid_)));
          set_has_npcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Client2Battle_GameStoryStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 GameStoryID = 1;
  if (has_gamestoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gamestoryid(), output);
  }

  // optional uint32 NPCID = 2;
  if (has_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->npcid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Client2Battle_GameStoryStart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 GameStoryID = 1;
  if (has_gamestoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gamestoryid(), target);
  }

  // optional uint32 NPCID = 2;
  if (has_npcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->npcid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Client2Battle_GameStoryStart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 GameStoryID = 1;
    if (has_gamestoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gamestoryid());
    }

    // optional uint32 NPCID = 2;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npcid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Client2Battle_GameStoryStart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Client2Battle_GameStoryStart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Client2Battle_GameStoryStart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Client2Battle_GameStoryStart::MergeFrom(const Client2Battle_GameStoryStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gamestoryid()) {
      set_gamestoryid(from.gamestoryid());
    }
    if (from.has_npcid()) {
      set_npcid(from.npcid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Client2Battle_GameStoryStart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Client2Battle_GameStoryStart::CopyFrom(const Client2Battle_GameStoryStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Client2Battle_GameStoryStart::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Client2Battle_GameStoryStart::Swap(Client2Battle_GameStoryStart* other) {
  if (other != this) {
    std::swap(gamestoryid_, other->gamestoryid_);
    std::swap(npcid_, other->npcid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Client2Battle_GameStoryStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Client2Battle_GameStoryStart_descriptor_;
  metadata.reflection = Client2Battle_GameStoryStart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Client2Battle_GameStoryEnd::kGameStoryIDFieldNumber;
const int Client2Battle_GameStoryEnd::kNPCIDFieldNumber;
#endif  // !_MSC_VER

Client2Battle_GameStoryEnd::Client2Battle_GameStoryEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Client2Battle_GameStoryEnd::InitAsDefaultInstance() {
}

Client2Battle_GameStoryEnd::Client2Battle_GameStoryEnd(const Client2Battle_GameStoryEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Client2Battle_GameStoryEnd::SharedCtor() {
  _cached_size_ = 0;
  gamestoryid_ = 0u;
  npcid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Client2Battle_GameStoryEnd::~Client2Battle_GameStoryEnd() {
  SharedDtor();
}

void Client2Battle_GameStoryEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Client2Battle_GameStoryEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Client2Battle_GameStoryEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Client2Battle_GameStoryEnd_descriptor_;
}

const Client2Battle_GameStoryEnd& Client2Battle_GameStoryEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Client2Battle_GameStoryEnd* Client2Battle_GameStoryEnd::default_instance_ = NULL;

Client2Battle_GameStoryEnd* Client2Battle_GameStoryEnd::New() const {
  return new Client2Battle_GameStoryEnd;
}

void Client2Battle_GameStoryEnd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gamestoryid_ = 0u;
    npcid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Client2Battle_GameStoryEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 GameStoryID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gamestoryid_)));
          set_has_gamestoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_NPCID;
        break;
      }

      // optional uint32 NPCID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NPCID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npcid_)));
          set_has_npcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Client2Battle_GameStoryEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 GameStoryID = 1;
  if (has_gamestoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gamestoryid(), output);
  }

  // optional uint32 NPCID = 2;
  if (has_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->npcid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Client2Battle_GameStoryEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 GameStoryID = 1;
  if (has_gamestoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gamestoryid(), target);
  }

  // optional uint32 NPCID = 2;
  if (has_npcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->npcid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Client2Battle_GameStoryEnd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 GameStoryID = 1;
    if (has_gamestoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gamestoryid());
    }

    // optional uint32 NPCID = 2;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npcid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Client2Battle_GameStoryEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Client2Battle_GameStoryEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Client2Battle_GameStoryEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Client2Battle_GameStoryEnd::MergeFrom(const Client2Battle_GameStoryEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gamestoryid()) {
      set_gamestoryid(from.gamestoryid());
    }
    if (from.has_npcid()) {
      set_npcid(from.npcid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Client2Battle_GameStoryEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Client2Battle_GameStoryEnd::CopyFrom(const Client2Battle_GameStoryEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Client2Battle_GameStoryEnd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Client2Battle_GameStoryEnd::Swap(Client2Battle_GameStoryEnd* other) {
  if (other != this) {
    std::swap(gamestoryid_, other->gamestoryid_);
    std::swap(npcid_, other->npcid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Client2Battle_GameStoryEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Client2Battle_GameStoryEnd_descriptor_;
  metadata.reflection = Client2Battle_GameStoryEnd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Client2Battle_NPCStopAI::kNPCIDFieldNumber;
#endif  // !_MSC_VER

Client2Battle_NPCStopAI::Client2Battle_NPCStopAI()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Client2Battle_NPCStopAI::InitAsDefaultInstance() {
}

Client2Battle_NPCStopAI::Client2Battle_NPCStopAI(const Client2Battle_NPCStopAI& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Client2Battle_NPCStopAI::SharedCtor() {
  _cached_size_ = 0;
  npcid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Client2Battle_NPCStopAI::~Client2Battle_NPCStopAI() {
  SharedDtor();
}

void Client2Battle_NPCStopAI::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Client2Battle_NPCStopAI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Client2Battle_NPCStopAI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Client2Battle_NPCStopAI_descriptor_;
}

const Client2Battle_NPCStopAI& Client2Battle_NPCStopAI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Client2Battle_NPCStopAI* Client2Battle_NPCStopAI::default_instance_ = NULL;

Client2Battle_NPCStopAI* Client2Battle_NPCStopAI::New() const {
  return new Client2Battle_NPCStopAI;
}

void Client2Battle_NPCStopAI::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npcid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Client2Battle_NPCStopAI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 NPCID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npcid_)));
          set_has_npcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Client2Battle_NPCStopAI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 NPCID = 1;
  if (has_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->npcid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Client2Battle_NPCStopAI::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 NPCID = 1;
  if (has_npcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->npcid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Client2Battle_NPCStopAI::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 NPCID = 1;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npcid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Client2Battle_NPCStopAI::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Client2Battle_NPCStopAI* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Client2Battle_NPCStopAI*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Client2Battle_NPCStopAI::MergeFrom(const Client2Battle_NPCStopAI& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npcid()) {
      set_npcid(from.npcid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Client2Battle_NPCStopAI::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Client2Battle_NPCStopAI::CopyFrom(const Client2Battle_NPCStopAI& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Client2Battle_NPCStopAI::IsInitialized() const {

  return true;
}

void Client2Battle_NPCStopAI::Swap(Client2Battle_NPCStopAI* other) {
  if (other != this) {
    std::swap(npcid_, other->npcid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Client2Battle_NPCStopAI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Client2Battle_NPCStopAI_descriptor_;
  metadata.reflection = Client2Battle_NPCStopAI_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Client2Battle_NPCActiveAI::kNPCIDFieldNumber;
#endif  // !_MSC_VER

Client2Battle_NPCActiveAI::Client2Battle_NPCActiveAI()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Client2Battle_NPCActiveAI::InitAsDefaultInstance() {
}

Client2Battle_NPCActiveAI::Client2Battle_NPCActiveAI(const Client2Battle_NPCActiveAI& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Client2Battle_NPCActiveAI::SharedCtor() {
  _cached_size_ = 0;
  npcid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Client2Battle_NPCActiveAI::~Client2Battle_NPCActiveAI() {
  SharedDtor();
}

void Client2Battle_NPCActiveAI::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Client2Battle_NPCActiveAI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Client2Battle_NPCActiveAI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Client2Battle_NPCActiveAI_descriptor_;
}

const Client2Battle_NPCActiveAI& Client2Battle_NPCActiveAI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Client2Battle_NPCActiveAI* Client2Battle_NPCActiveAI::default_instance_ = NULL;

Client2Battle_NPCActiveAI* Client2Battle_NPCActiveAI::New() const {
  return new Client2Battle_NPCActiveAI;
}

void Client2Battle_NPCActiveAI::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npcid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Client2Battle_NPCActiveAI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 NPCID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npcid_)));
          set_has_npcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Client2Battle_NPCActiveAI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 NPCID = 1;
  if (has_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->npcid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Client2Battle_NPCActiveAI::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 NPCID = 1;
  if (has_npcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->npcid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Client2Battle_NPCActiveAI::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 NPCID = 1;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npcid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Client2Battle_NPCActiveAI::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Client2Battle_NPCActiveAI* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Client2Battle_NPCActiveAI*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Client2Battle_NPCActiveAI::MergeFrom(const Client2Battle_NPCActiveAI& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npcid()) {
      set_npcid(from.npcid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Client2Battle_NPCActiveAI::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Client2Battle_NPCActiveAI::CopyFrom(const Client2Battle_NPCActiveAI& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Client2Battle_NPCActiveAI::IsInitialized() const {

  return true;
}

void Client2Battle_NPCActiveAI::Swap(Client2Battle_NPCActiveAI* other) {
  if (other != this) {
    std::swap(npcid_, other->npcid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Client2Battle_NPCActiveAI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Client2Battle_NPCActiveAI_descriptor_;
  metadata.reflection = Client2Battle_NPCActiveAI_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Game_DungeonLoadOk::kUiProIdFieldNumber;
#endif  // !_MSC_VER

Battle2Game_DungeonLoadOk::Battle2Game_DungeonLoadOk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Game_DungeonLoadOk::InitAsDefaultInstance() {
}

Battle2Game_DungeonLoadOk::Battle2Game_DungeonLoadOk(const Battle2Game_DungeonLoadOk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Game_DungeonLoadOk::SharedCtor() {
  _cached_size_ = 0;
  uiproid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Game_DungeonLoadOk::~Battle2Game_DungeonLoadOk() {
  SharedDtor();
}

void Battle2Game_DungeonLoadOk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Battle2Game_DungeonLoadOk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Game_DungeonLoadOk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Game_DungeonLoadOk_descriptor_;
}

const Battle2Game_DungeonLoadOk& Battle2Game_DungeonLoadOk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Game_DungeonLoadOk* Battle2Game_DungeonLoadOk::default_instance_ = NULL;

Battle2Game_DungeonLoadOk* Battle2Game_DungeonLoadOk::New() const {
  return new Battle2Game_DungeonLoadOk;
}

void Battle2Game_DungeonLoadOk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uiproid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Game_DungeonLoadOk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uiProId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiproid_)));
          set_has_uiproid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Game_DungeonLoadOk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uiProId = 1;
  if (has_uiproid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uiproid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Game_DungeonLoadOk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uiProId = 1;
  if (has_uiproid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uiproid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Game_DungeonLoadOk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uiProId = 1;
    if (has_uiproid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiproid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Game_DungeonLoadOk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Game_DungeonLoadOk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Game_DungeonLoadOk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Game_DungeonLoadOk::MergeFrom(const Battle2Game_DungeonLoadOk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uiproid()) {
      set_uiproid(from.uiproid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Game_DungeonLoadOk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Game_DungeonLoadOk::CopyFrom(const Battle2Game_DungeonLoadOk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Game_DungeonLoadOk::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Battle2Game_DungeonLoadOk::Swap(Battle2Game_DungeonLoadOk* other) {
  if (other != this) {
    std::swap(uiproid_, other->uiproid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Game_DungeonLoadOk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Game_DungeonLoadOk_descriptor_;
  metadata.reflection = Battle2Game_DungeonLoadOk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Client2Battle_WolrdBossDorp_ItemList::kVecItemListFieldNumber;
#endif  // !_MSC_VER

Client2Battle_WolrdBossDorp_ItemList::Client2Battle_WolrdBossDorp_ItemList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Client2Battle_WolrdBossDorp_ItemList::InitAsDefaultInstance() {
}

Client2Battle_WolrdBossDorp_ItemList::Client2Battle_WolrdBossDorp_ItemList(const Client2Battle_WolrdBossDorp_ItemList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Client2Battle_WolrdBossDorp_ItemList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Client2Battle_WolrdBossDorp_ItemList::~Client2Battle_WolrdBossDorp_ItemList() {
  SharedDtor();
}

void Client2Battle_WolrdBossDorp_ItemList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Client2Battle_WolrdBossDorp_ItemList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Client2Battle_WolrdBossDorp_ItemList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Client2Battle_WolrdBossDorp_ItemList_descriptor_;
}

const Client2Battle_WolrdBossDorp_ItemList& Client2Battle_WolrdBossDorp_ItemList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Client2Battle_WolrdBossDorp_ItemList* Client2Battle_WolrdBossDorp_ItemList::default_instance_ = NULL;

Client2Battle_WolrdBossDorp_ItemList* Client2Battle_WolrdBossDorp_ItemList::New() const {
  return new Client2Battle_WolrdBossDorp_ItemList;
}

void Client2Battle_WolrdBossDorp_ItemList::Clear() {
  vecitemlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Client2Battle_WolrdBossDorp_ItemList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.IDNum vecItemList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vecItemList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vecitemlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_vecItemList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Client2Battle_WolrdBossDorp_ItemList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.IDNum vecItemList = 1;
  for (int i = 0; i < this->vecitemlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->vecitemlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Client2Battle_WolrdBossDorp_ItemList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.IDNum vecItemList = 1;
  for (int i = 0; i < this->vecitemlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->vecitemlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Client2Battle_WolrdBossDorp_ItemList::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.IDNum vecItemList = 1;
  total_size += 1 * this->vecitemlist_size();
  for (int i = 0; i < this->vecitemlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vecitemlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Client2Battle_WolrdBossDorp_ItemList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Client2Battle_WolrdBossDorp_ItemList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Client2Battle_WolrdBossDorp_ItemList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Client2Battle_WolrdBossDorp_ItemList::MergeFrom(const Client2Battle_WolrdBossDorp_ItemList& from) {
  GOOGLE_CHECK_NE(&from, this);
  vecitemlist_.MergeFrom(from.vecitemlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Client2Battle_WolrdBossDorp_ItemList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Client2Battle_WolrdBossDorp_ItemList::CopyFrom(const Client2Battle_WolrdBossDorp_ItemList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Client2Battle_WolrdBossDorp_ItemList::IsInitialized() const {

  return true;
}

void Client2Battle_WolrdBossDorp_ItemList::Swap(Client2Battle_WolrdBossDorp_ItemList* other) {
  if (other != this) {
    vecitemlist_.Swap(&other->vecitemlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Client2Battle_WolrdBossDorp_ItemList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Client2Battle_WolrdBossDorp_ItemList_descriptor_;
  metadata.reflection = Client2Battle_WolrdBossDorp_ItemList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Client2Battle_WorldBoss_HurtRankList::kUiBossTypeFieldNumber;
const int Client2Battle_WorldBoss_HurtRankList::kUiBossTableIdFieldNumber;
#endif  // !_MSC_VER

Client2Battle_WorldBoss_HurtRankList::Client2Battle_WorldBoss_HurtRankList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Client2Battle_WorldBoss_HurtRankList::InitAsDefaultInstance() {
}

Client2Battle_WorldBoss_HurtRankList::Client2Battle_WorldBoss_HurtRankList(const Client2Battle_WorldBoss_HurtRankList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Client2Battle_WorldBoss_HurtRankList::SharedCtor() {
  _cached_size_ = 0;
  uibosstype_ = 0u;
  uibosstableid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Client2Battle_WorldBoss_HurtRankList::~Client2Battle_WorldBoss_HurtRankList() {
  SharedDtor();
}

void Client2Battle_WorldBoss_HurtRankList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Client2Battle_WorldBoss_HurtRankList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Client2Battle_WorldBoss_HurtRankList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Client2Battle_WorldBoss_HurtRankList_descriptor_;
}

const Client2Battle_WorldBoss_HurtRankList& Client2Battle_WorldBoss_HurtRankList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Client2Battle_WorldBoss_HurtRankList* Client2Battle_WorldBoss_HurtRankList::default_instance_ = NULL;

Client2Battle_WorldBoss_HurtRankList* Client2Battle_WorldBoss_HurtRankList::New() const {
  return new Client2Battle_WorldBoss_HurtRankList;
}

void Client2Battle_WorldBoss_HurtRankList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uibosstype_ = 0u;
    uibosstableid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Client2Battle_WorldBoss_HurtRankList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uiBossType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uibosstype_)));
          set_has_uibosstype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiBossTableId;
        break;
      }

      // optional uint32 uiBossTableId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiBossTableId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uibosstableid_)));
          set_has_uibosstableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Client2Battle_WorldBoss_HurtRankList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uiBossType = 1;
  if (has_uibosstype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uibosstype(), output);
  }

  // optional uint32 uiBossTableId = 2;
  if (has_uibosstableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uibosstableid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Client2Battle_WorldBoss_HurtRankList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uiBossType = 1;
  if (has_uibosstype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uibosstype(), target);
  }

  // optional uint32 uiBossTableId = 2;
  if (has_uibosstableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uibosstableid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Client2Battle_WorldBoss_HurtRankList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uiBossType = 1;
    if (has_uibosstype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uibosstype());
    }

    // optional uint32 uiBossTableId = 2;
    if (has_uibosstableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uibosstableid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Client2Battle_WorldBoss_HurtRankList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Client2Battle_WorldBoss_HurtRankList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Client2Battle_WorldBoss_HurtRankList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Client2Battle_WorldBoss_HurtRankList::MergeFrom(const Client2Battle_WorldBoss_HurtRankList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uibosstype()) {
      set_uibosstype(from.uibosstype());
    }
    if (from.has_uibosstableid()) {
      set_uibosstableid(from.uibosstableid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Client2Battle_WorldBoss_HurtRankList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Client2Battle_WorldBoss_HurtRankList::CopyFrom(const Client2Battle_WorldBoss_HurtRankList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Client2Battle_WorldBoss_HurtRankList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Client2Battle_WorldBoss_HurtRankList::Swap(Client2Battle_WorldBoss_HurtRankList* other) {
  if (other != this) {
    std::swap(uibosstype_, other->uibosstype_);
    std::swap(uibosstableid_, other->uibosstableid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Client2Battle_WorldBoss_HurtRankList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Client2Battle_WorldBoss_HurtRankList_descriptor_;
  metadata.reflection = Client2Battle_WorldBoss_HurtRankList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Client_WolrdBoss_HurtRankList::kNamelistFieldNumber;
const int Battle2Client_WolrdBoss_HurtRankList::kHurttotalFieldNumber;
const int Battle2Client_WolrdBoss_HurtRankList::kSelfhurttotalFieldNumber;
const int Battle2Client_WolrdBoss_HurtRankList::kSelfrankFieldNumber;
const int Battle2Client_WolrdBoss_HurtRankList::kUiBossTypeFieldNumber;
const int Battle2Client_WolrdBoss_HurtRankList::kUiBossTableIdFieldNumber;
#endif  // !_MSC_VER

Battle2Client_WolrdBoss_HurtRankList::Battle2Client_WolrdBoss_HurtRankList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Client_WolrdBoss_HurtRankList::InitAsDefaultInstance() {
}

Battle2Client_WolrdBoss_HurtRankList::Battle2Client_WolrdBoss_HurtRankList(const Battle2Client_WolrdBoss_HurtRankList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Client_WolrdBoss_HurtRankList::SharedCtor() {
  _cached_size_ = 0;
  selfhurttotal_ = GOOGLE_ULONGLONG(0);
  selfrank_ = 0u;
  uibosstype_ = 0u;
  uibosstableid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Client_WolrdBoss_HurtRankList::~Battle2Client_WolrdBoss_HurtRankList() {
  SharedDtor();
}

void Battle2Client_WolrdBoss_HurtRankList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Battle2Client_WolrdBoss_HurtRankList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Client_WolrdBoss_HurtRankList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Client_WolrdBoss_HurtRankList_descriptor_;
}

const Battle2Client_WolrdBoss_HurtRankList& Battle2Client_WolrdBoss_HurtRankList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Client_WolrdBoss_HurtRankList* Battle2Client_WolrdBoss_HurtRankList::default_instance_ = NULL;

Battle2Client_WolrdBoss_HurtRankList* Battle2Client_WolrdBoss_HurtRankList::New() const {
  return new Battle2Client_WolrdBoss_HurtRankList;
}

void Battle2Client_WolrdBoss_HurtRankList::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    selfhurttotal_ = GOOGLE_ULONGLONG(0);
    selfrank_ = 0u;
    uibosstype_ = 0u;
    uibosstableid_ = 0u;
  }
  namelist_.Clear();
  hurttotal_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Client_WolrdBoss_HurtRankList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string namelist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_namelist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_namelist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->namelist(this->namelist_size() - 1).data(),
            this->namelist(this->namelist_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_namelist;
        if (input->ExpectTag(16)) goto parse_hurttotal;
        break;
      }

      // repeated uint64 hurttotal = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hurttotal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_hurttotal())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_hurttotal())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hurttotal;
        if (input->ExpectTag(24)) goto parse_selfhurttotal;
        break;
      }

      // required uint64 selfhurttotal = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selfhurttotal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &selfhurttotal_)));
          set_has_selfhurttotal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_selfrank;
        break;
      }

      // required uint32 selfrank = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selfrank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selfrank_)));
          set_has_selfrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_uiBossType;
        break;
      }

      // required uint32 uiBossType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiBossType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uibosstype_)));
          set_has_uibosstype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_uiBossTableId;
        break;
      }

      // optional uint32 uiBossTableId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiBossTableId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uibosstableid_)));
          set_has_uibosstableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Client_WolrdBoss_HurtRankList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string namelist = 1;
  for (int i = 0; i < this->namelist_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->namelist(i).data(), this->namelist(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->namelist(i), output);
  }

  // repeated uint64 hurttotal = 2;
  for (int i = 0; i < this->hurttotal_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->hurttotal(i), output);
  }

  // required uint64 selfhurttotal = 3;
  if (has_selfhurttotal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->selfhurttotal(), output);
  }

  // required uint32 selfrank = 4;
  if (has_selfrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->selfrank(), output);
  }

  // required uint32 uiBossType = 5;
  if (has_uibosstype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->uibosstype(), output);
  }

  // optional uint32 uiBossTableId = 6;
  if (has_uibosstableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->uibosstableid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Client_WolrdBoss_HurtRankList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string namelist = 1;
  for (int i = 0; i < this->namelist_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->namelist(i).data(), this->namelist(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->namelist(i), target);
  }

  // repeated uint64 hurttotal = 2;
  for (int i = 0; i < this->hurttotal_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->hurttotal(i), target);
  }

  // required uint64 selfhurttotal = 3;
  if (has_selfhurttotal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->selfhurttotal(), target);
  }

  // required uint32 selfrank = 4;
  if (has_selfrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->selfrank(), target);
  }

  // required uint32 uiBossType = 5;
  if (has_uibosstype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->uibosstype(), target);
  }

  // optional uint32 uiBossTableId = 6;
  if (has_uibosstableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->uibosstableid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Client_WolrdBoss_HurtRankList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required uint64 selfhurttotal = 3;
    if (has_selfhurttotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->selfhurttotal());
    }

    // required uint32 selfrank = 4;
    if (has_selfrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selfrank());
    }

    // required uint32 uiBossType = 5;
    if (has_uibosstype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uibosstype());
    }

    // optional uint32 uiBossTableId = 6;
    if (has_uibosstableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uibosstableid());
    }

  }
  // repeated string namelist = 1;
  total_size += 1 * this->namelist_size();
  for (int i = 0; i < this->namelist_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->namelist(i));
  }

  // repeated uint64 hurttotal = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->hurttotal_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->hurttotal(i));
    }
    total_size += 1 * this->hurttotal_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Client_WolrdBoss_HurtRankList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Client_WolrdBoss_HurtRankList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Client_WolrdBoss_HurtRankList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Client_WolrdBoss_HurtRankList::MergeFrom(const Battle2Client_WolrdBoss_HurtRankList& from) {
  GOOGLE_CHECK_NE(&from, this);
  namelist_.MergeFrom(from.namelist_);
  hurttotal_.MergeFrom(from.hurttotal_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_selfhurttotal()) {
      set_selfhurttotal(from.selfhurttotal());
    }
    if (from.has_selfrank()) {
      set_selfrank(from.selfrank());
    }
    if (from.has_uibosstype()) {
      set_uibosstype(from.uibosstype());
    }
    if (from.has_uibosstableid()) {
      set_uibosstableid(from.uibosstableid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Client_WolrdBoss_HurtRankList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Client_WolrdBoss_HurtRankList::CopyFrom(const Battle2Client_WolrdBoss_HurtRankList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Client_WolrdBoss_HurtRankList::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001c) != 0x0000001c) return false;

  return true;
}

void Battle2Client_WolrdBoss_HurtRankList::Swap(Battle2Client_WolrdBoss_HurtRankList* other) {
  if (other != this) {
    namelist_.Swap(&other->namelist_);
    hurttotal_.Swap(&other->hurttotal_);
    std::swap(selfhurttotal_, other->selfhurttotal_);
    std::swap(selfrank_, other->selfrank_);
    std::swap(uibosstype_, other->uibosstype_);
    std::swap(uibosstableid_, other->uibosstableid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Client_WolrdBoss_HurtRankList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Client_WolrdBoss_HurtRankList_descriptor_;
  metadata.reflection = Battle2Client_WolrdBoss_HurtRankList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WolrdBossSaleItem::kUiIndexFieldNumber;
const int WolrdBossSaleItem::kUiExpiryTimeFieldNumber;
const int WolrdBossSaleItem::kUiShareNumFieldNumber;
const int WolrdBossSaleItem::kUiPlayerNameFieldNumber;
const int WolrdBossSaleItem::kUiPlayerJobFieldNumber;
const int WolrdBossSaleItem::kUiPlayerLevelFieldNumber;
const int WolrdBossSaleItem::kUiPriceFieldNumber;
#endif  // !_MSC_VER

WolrdBossSaleItem::WolrdBossSaleItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WolrdBossSaleItem::InitAsDefaultInstance() {
}

WolrdBossSaleItem::WolrdBossSaleItem(const WolrdBossSaleItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WolrdBossSaleItem::SharedCtor() {
  _cached_size_ = 0;
  uiindex_ = 0u;
  uiexpirytime_ = 0u;
  uisharenum_ = 0u;
  uiplayername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uiplayerjob_ = 0u;
  uiplayerlevel_ = 0u;
  uiprice_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WolrdBossSaleItem::~WolrdBossSaleItem() {
  SharedDtor();
}

void WolrdBossSaleItem::SharedDtor() {
  if (uiplayername_ != &::google::protobuf::internal::kEmptyString) {
    delete uiplayername_;
  }
  if (this != default_instance_) {
  }
}

void WolrdBossSaleItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WolrdBossSaleItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WolrdBossSaleItem_descriptor_;
}

const WolrdBossSaleItem& WolrdBossSaleItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

WolrdBossSaleItem* WolrdBossSaleItem::default_instance_ = NULL;

WolrdBossSaleItem* WolrdBossSaleItem::New() const {
  return new WolrdBossSaleItem;
}

void WolrdBossSaleItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uiindex_ = 0u;
    uiexpirytime_ = 0u;
    uisharenum_ = 0u;
    if (has_uiplayername()) {
      if (uiplayername_ != &::google::protobuf::internal::kEmptyString) {
        uiplayername_->clear();
      }
    }
    uiplayerjob_ = 0u;
    uiplayerlevel_ = 0u;
    uiprice_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WolrdBossSaleItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uiIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiindex_)));
          set_has_uiindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiExpiryTime;
        break;
      }

      // required uint32 uiExpiryTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiExpiryTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiexpirytime_)));
          set_has_uiexpirytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uiShareNum;
        break;
      }

      // required uint32 uiShareNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiShareNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uisharenum_)));
          set_has_uisharenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_uiPlayerName;
        break;
      }

      // required string uiPlayerName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uiPlayerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uiplayername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uiplayername().data(), this->uiplayername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_uiPlayerJob;
        break;
      }

      // required uint32 uiPlayerJob = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiPlayerJob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiplayerjob_)));
          set_has_uiplayerjob();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_uiPlayerLevel;
        break;
      }

      // required uint32 uiPlayerLevel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiPlayerLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiplayerlevel_)));
          set_has_uiplayerlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_uiPrice;
        break;
      }

      // required uint32 uiPrice = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiprice_)));
          set_has_uiprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WolrdBossSaleItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uiIndex = 1;
  if (has_uiindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uiindex(), output);
  }

  // required uint32 uiExpiryTime = 2;
  if (has_uiexpirytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uiexpirytime(), output);
  }

  // required uint32 uiShareNum = 3;
  if (has_uisharenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uisharenum(), output);
  }

  // required string uiPlayerName = 4;
  if (has_uiplayername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uiplayername().data(), this->uiplayername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->uiplayername(), output);
  }

  // required uint32 uiPlayerJob = 5;
  if (has_uiplayerjob()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->uiplayerjob(), output);
  }

  // required uint32 uiPlayerLevel = 6;
  if (has_uiplayerlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->uiplayerlevel(), output);
  }

  // required uint32 uiPrice = 7;
  if (has_uiprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->uiprice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WolrdBossSaleItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uiIndex = 1;
  if (has_uiindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uiindex(), target);
  }

  // required uint32 uiExpiryTime = 2;
  if (has_uiexpirytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uiexpirytime(), target);
  }

  // required uint32 uiShareNum = 3;
  if (has_uisharenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uisharenum(), target);
  }

  // required string uiPlayerName = 4;
  if (has_uiplayername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uiplayername().data(), this->uiplayername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->uiplayername(), target);
  }

  // required uint32 uiPlayerJob = 5;
  if (has_uiplayerjob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->uiplayerjob(), target);
  }

  // required uint32 uiPlayerLevel = 6;
  if (has_uiplayerlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->uiplayerlevel(), target);
  }

  // required uint32 uiPrice = 7;
  if (has_uiprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->uiprice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WolrdBossSaleItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uiIndex = 1;
    if (has_uiindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiindex());
    }

    // required uint32 uiExpiryTime = 2;
    if (has_uiexpirytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiexpirytime());
    }

    // required uint32 uiShareNum = 3;
    if (has_uisharenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uisharenum());
    }

    // required string uiPlayerName = 4;
    if (has_uiplayername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uiplayername());
    }

    // required uint32 uiPlayerJob = 5;
    if (has_uiplayerjob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiplayerjob());
    }

    // required uint32 uiPlayerLevel = 6;
    if (has_uiplayerlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiplayerlevel());
    }

    // required uint32 uiPrice = 7;
    if (has_uiprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiprice());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WolrdBossSaleItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WolrdBossSaleItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WolrdBossSaleItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WolrdBossSaleItem::MergeFrom(const WolrdBossSaleItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uiindex()) {
      set_uiindex(from.uiindex());
    }
    if (from.has_uiexpirytime()) {
      set_uiexpirytime(from.uiexpirytime());
    }
    if (from.has_uisharenum()) {
      set_uisharenum(from.uisharenum());
    }
    if (from.has_uiplayername()) {
      set_uiplayername(from.uiplayername());
    }
    if (from.has_uiplayerjob()) {
      set_uiplayerjob(from.uiplayerjob());
    }
    if (from.has_uiplayerlevel()) {
      set_uiplayerlevel(from.uiplayerlevel());
    }
    if (from.has_uiprice()) {
      set_uiprice(from.uiprice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WolrdBossSaleItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WolrdBossSaleItem::CopyFrom(const WolrdBossSaleItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WolrdBossSaleItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void WolrdBossSaleItem::Swap(WolrdBossSaleItem* other) {
  if (other != this) {
    std::swap(uiindex_, other->uiindex_);
    std::swap(uiexpirytime_, other->uiexpirytime_);
    std::swap(uisharenum_, other->uisharenum_);
    std::swap(uiplayername_, other->uiplayername_);
    std::swap(uiplayerjob_, other->uiplayerjob_);
    std::swap(uiplayerlevel_, other->uiplayerlevel_);
    std::swap(uiprice_, other->uiprice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WolrdBossSaleItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WolrdBossSaleItem_descriptor_;
  metadata.reflection = WolrdBossSaleItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Client_WolrdBoss_DorpItemList::kVecItemListFieldNumber;
const int Battle2Client_WolrdBoss_DorpItemList::kSSaleItemFieldNumber;
#endif  // !_MSC_VER

Battle2Client_WolrdBoss_DorpItemList::Battle2Client_WolrdBoss_DorpItemList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Client_WolrdBoss_DorpItemList::InitAsDefaultInstance() {
  ssaleitem_ = const_cast< ::proto::message::WolrdBossSaleItem*>(&::proto::message::WolrdBossSaleItem::default_instance());
}

Battle2Client_WolrdBoss_DorpItemList::Battle2Client_WolrdBoss_DorpItemList(const Battle2Client_WolrdBoss_DorpItemList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Client_WolrdBoss_DorpItemList::SharedCtor() {
  _cached_size_ = 0;
  ssaleitem_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Client_WolrdBoss_DorpItemList::~Battle2Client_WolrdBoss_DorpItemList() {
  SharedDtor();
}

void Battle2Client_WolrdBoss_DorpItemList::SharedDtor() {
  if (this != default_instance_) {
    delete ssaleitem_;
  }
}

void Battle2Client_WolrdBoss_DorpItemList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Client_WolrdBoss_DorpItemList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Client_WolrdBoss_DorpItemList_descriptor_;
}

const Battle2Client_WolrdBoss_DorpItemList& Battle2Client_WolrdBoss_DorpItemList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Client_WolrdBoss_DorpItemList* Battle2Client_WolrdBoss_DorpItemList::default_instance_ = NULL;

Battle2Client_WolrdBoss_DorpItemList* Battle2Client_WolrdBoss_DorpItemList::New() const {
  return new Battle2Client_WolrdBoss_DorpItemList;
}

void Battle2Client_WolrdBoss_DorpItemList::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_ssaleitem()) {
      if (ssaleitem_ != NULL) ssaleitem_->::proto::message::WolrdBossSaleItem::Clear();
    }
  }
  vecitemlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Client_WolrdBoss_DorpItemList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.IDNum vecItemList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vecItemList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vecitemlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_vecItemList;
        if (input->ExpectTag(18)) goto parse_sSaleItem;
        break;
      }

      // required .proto.message.WolrdBossSaleItem sSaleItem = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sSaleItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ssaleitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Client_WolrdBoss_DorpItemList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.IDNum vecItemList = 1;
  for (int i = 0; i < this->vecitemlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->vecitemlist(i), output);
  }

  // required .proto.message.WolrdBossSaleItem sSaleItem = 2;
  if (has_ssaleitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ssaleitem(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Client_WolrdBoss_DorpItemList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.IDNum vecItemList = 1;
  for (int i = 0; i < this->vecitemlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->vecitemlist(i), target);
  }

  // required .proto.message.WolrdBossSaleItem sSaleItem = 2;
  if (has_ssaleitem()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ssaleitem(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Client_WolrdBoss_DorpItemList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .proto.message.WolrdBossSaleItem sSaleItem = 2;
    if (has_ssaleitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ssaleitem());
    }

  }
  // repeated .proto.message.IDNum vecItemList = 1;
  total_size += 1 * this->vecitemlist_size();
  for (int i = 0; i < this->vecitemlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vecitemlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Client_WolrdBoss_DorpItemList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Client_WolrdBoss_DorpItemList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Client_WolrdBoss_DorpItemList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Client_WolrdBoss_DorpItemList::MergeFrom(const Battle2Client_WolrdBoss_DorpItemList& from) {
  GOOGLE_CHECK_NE(&from, this);
  vecitemlist_.MergeFrom(from.vecitemlist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_ssaleitem()) {
      mutable_ssaleitem()->::proto::message::WolrdBossSaleItem::MergeFrom(from.ssaleitem());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Client_WolrdBoss_DorpItemList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Client_WolrdBoss_DorpItemList::CopyFrom(const Battle2Client_WolrdBoss_DorpItemList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Client_WolrdBoss_DorpItemList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (has_ssaleitem()) {
    if (!this->ssaleitem().IsInitialized()) return false;
  }
  return true;
}

void Battle2Client_WolrdBoss_DorpItemList::Swap(Battle2Client_WolrdBoss_DorpItemList* other) {
  if (other != this) {
    vecitemlist_.Swap(&other->vecitemlist_);
    std::swap(ssaleitem_, other->ssaleitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Client_WolrdBoss_DorpItemList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Client_WolrdBoss_DorpItemList_descriptor_;
  metadata.reflection = Battle2Client_WolrdBoss_DorpItemList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Client_WolrdBoss_SaleBid::kUiIndexFieldNumber;
const int Battle2Client_WolrdBoss_SaleBid::kUiPlayerNameFieldNumber;
const int Battle2Client_WolrdBoss_SaleBid::kUiPlayerJobFieldNumber;
const int Battle2Client_WolrdBoss_SaleBid::kUiPlayerLevelFieldNumber;
const int Battle2Client_WolrdBoss_SaleBid::kUiPriceFieldNumber;
const int Battle2Client_WolrdBoss_SaleBid::kUiExpiryTimeFieldNumber;
#endif  // !_MSC_VER

Battle2Client_WolrdBoss_SaleBid::Battle2Client_WolrdBoss_SaleBid()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Client_WolrdBoss_SaleBid::InitAsDefaultInstance() {
}

Battle2Client_WolrdBoss_SaleBid::Battle2Client_WolrdBoss_SaleBid(const Battle2Client_WolrdBoss_SaleBid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Client_WolrdBoss_SaleBid::SharedCtor() {
  _cached_size_ = 0;
  uiindex_ = 0u;
  uiplayername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uiplayerjob_ = 0u;
  uiplayerlevel_ = 0u;
  uiprice_ = 0u;
  uiexpirytime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Client_WolrdBoss_SaleBid::~Battle2Client_WolrdBoss_SaleBid() {
  SharedDtor();
}

void Battle2Client_WolrdBoss_SaleBid::SharedDtor() {
  if (uiplayername_ != &::google::protobuf::internal::kEmptyString) {
    delete uiplayername_;
  }
  if (this != default_instance_) {
  }
}

void Battle2Client_WolrdBoss_SaleBid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Client_WolrdBoss_SaleBid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Client_WolrdBoss_SaleBid_descriptor_;
}

const Battle2Client_WolrdBoss_SaleBid& Battle2Client_WolrdBoss_SaleBid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Client_WolrdBoss_SaleBid* Battle2Client_WolrdBoss_SaleBid::default_instance_ = NULL;

Battle2Client_WolrdBoss_SaleBid* Battle2Client_WolrdBoss_SaleBid::New() const {
  return new Battle2Client_WolrdBoss_SaleBid;
}

void Battle2Client_WolrdBoss_SaleBid::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uiindex_ = 0u;
    if (has_uiplayername()) {
      if (uiplayername_ != &::google::protobuf::internal::kEmptyString) {
        uiplayername_->clear();
      }
    }
    uiplayerjob_ = 0u;
    uiplayerlevel_ = 0u;
    uiprice_ = 0u;
    uiexpirytime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Client_WolrdBoss_SaleBid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uiIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiindex_)));
          set_has_uiindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uiPlayerName;
        break;
      }

      // required string uiPlayerName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uiPlayerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uiplayername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uiplayername().data(), this->uiplayername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uiPlayerJob;
        break;
      }

      // required uint32 uiPlayerJob = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiPlayerJob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiplayerjob_)));
          set_has_uiplayerjob();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uiPlayerLevel;
        break;
      }

      // required uint32 uiPlayerLevel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiPlayerLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiplayerlevel_)));
          set_has_uiplayerlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_uiPrice;
        break;
      }

      // required uint32 uiPrice = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiprice_)));
          set_has_uiprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_uiExpiryTime;
        break;
      }

      // optional uint32 uiExpiryTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiExpiryTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiexpirytime_)));
          set_has_uiexpirytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Client_WolrdBoss_SaleBid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uiIndex = 1;
  if (has_uiindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uiindex(), output);
  }

  // required string uiPlayerName = 2;
  if (has_uiplayername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uiplayername().data(), this->uiplayername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->uiplayername(), output);
  }

  // required uint32 uiPlayerJob = 3;
  if (has_uiplayerjob()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uiplayerjob(), output);
  }

  // required uint32 uiPlayerLevel = 4;
  if (has_uiplayerlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uiplayerlevel(), output);
  }

  // required uint32 uiPrice = 5;
  if (has_uiprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->uiprice(), output);
  }

  // optional uint32 uiExpiryTime = 6;
  if (has_uiexpirytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->uiexpirytime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Client_WolrdBoss_SaleBid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uiIndex = 1;
  if (has_uiindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uiindex(), target);
  }

  // required string uiPlayerName = 2;
  if (has_uiplayername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uiplayername().data(), this->uiplayername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uiplayername(), target);
  }

  // required uint32 uiPlayerJob = 3;
  if (has_uiplayerjob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uiplayerjob(), target);
  }

  // required uint32 uiPlayerLevel = 4;
  if (has_uiplayerlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uiplayerlevel(), target);
  }

  // required uint32 uiPrice = 5;
  if (has_uiprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->uiprice(), target);
  }

  // optional uint32 uiExpiryTime = 6;
  if (has_uiexpirytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->uiexpirytime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Client_WolrdBoss_SaleBid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uiIndex = 1;
    if (has_uiindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiindex());
    }

    // required string uiPlayerName = 2;
    if (has_uiplayername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uiplayername());
    }

    // required uint32 uiPlayerJob = 3;
    if (has_uiplayerjob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiplayerjob());
    }

    // required uint32 uiPlayerLevel = 4;
    if (has_uiplayerlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiplayerlevel());
    }

    // required uint32 uiPrice = 5;
    if (has_uiprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiprice());
    }

    // optional uint32 uiExpiryTime = 6;
    if (has_uiexpirytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiexpirytime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Client_WolrdBoss_SaleBid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Client_WolrdBoss_SaleBid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Client_WolrdBoss_SaleBid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Client_WolrdBoss_SaleBid::MergeFrom(const Battle2Client_WolrdBoss_SaleBid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uiindex()) {
      set_uiindex(from.uiindex());
    }
    if (from.has_uiplayername()) {
      set_uiplayername(from.uiplayername());
    }
    if (from.has_uiplayerjob()) {
      set_uiplayerjob(from.uiplayerjob());
    }
    if (from.has_uiplayerlevel()) {
      set_uiplayerlevel(from.uiplayerlevel());
    }
    if (from.has_uiprice()) {
      set_uiprice(from.uiprice());
    }
    if (from.has_uiexpirytime()) {
      set_uiexpirytime(from.uiexpirytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Client_WolrdBoss_SaleBid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Client_WolrdBoss_SaleBid::CopyFrom(const Battle2Client_WolrdBoss_SaleBid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Client_WolrdBoss_SaleBid::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void Battle2Client_WolrdBoss_SaleBid::Swap(Battle2Client_WolrdBoss_SaleBid* other) {
  if (other != this) {
    std::swap(uiindex_, other->uiindex_);
    std::swap(uiplayername_, other->uiplayername_);
    std::swap(uiplayerjob_, other->uiplayerjob_);
    std::swap(uiplayerlevel_, other->uiplayerlevel_);
    std::swap(uiprice_, other->uiprice_);
    std::swap(uiexpirytime_, other->uiexpirytime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Client_WolrdBoss_SaleBid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Client_WolrdBoss_SaleBid_descriptor_;
  metadata.reflection = Battle2Client_WolrdBoss_SaleBid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Client_WolrdBoss_SaleResult::kUiIndexFieldNumber;
const int Battle2Client_WolrdBoss_SaleResult::kUiPlayerNameFieldNumber;
const int Battle2Client_WolrdBoss_SaleResult::kUiPlayerJobFieldNumber;
const int Battle2Client_WolrdBoss_SaleResult::kUiPlayerLevelFieldNumber;
const int Battle2Client_WolrdBoss_SaleResult::kUiPriceFieldNumber;
#endif  // !_MSC_VER

Battle2Client_WolrdBoss_SaleResult::Battle2Client_WolrdBoss_SaleResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Client_WolrdBoss_SaleResult::InitAsDefaultInstance() {
}

Battle2Client_WolrdBoss_SaleResult::Battle2Client_WolrdBoss_SaleResult(const Battle2Client_WolrdBoss_SaleResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Client_WolrdBoss_SaleResult::SharedCtor() {
  _cached_size_ = 0;
  uiindex_ = 0u;
  uiplayername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uiplayerjob_ = 0u;
  uiplayerlevel_ = 0u;
  uiprice_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Client_WolrdBoss_SaleResult::~Battle2Client_WolrdBoss_SaleResult() {
  SharedDtor();
}

void Battle2Client_WolrdBoss_SaleResult::SharedDtor() {
  if (uiplayername_ != &::google::protobuf::internal::kEmptyString) {
    delete uiplayername_;
  }
  if (this != default_instance_) {
  }
}

void Battle2Client_WolrdBoss_SaleResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Client_WolrdBoss_SaleResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Client_WolrdBoss_SaleResult_descriptor_;
}

const Battle2Client_WolrdBoss_SaleResult& Battle2Client_WolrdBoss_SaleResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Client_WolrdBoss_SaleResult* Battle2Client_WolrdBoss_SaleResult::default_instance_ = NULL;

Battle2Client_WolrdBoss_SaleResult* Battle2Client_WolrdBoss_SaleResult::New() const {
  return new Battle2Client_WolrdBoss_SaleResult;
}

void Battle2Client_WolrdBoss_SaleResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uiindex_ = 0u;
    if (has_uiplayername()) {
      if (uiplayername_ != &::google::protobuf::internal::kEmptyString) {
        uiplayername_->clear();
      }
    }
    uiplayerjob_ = 0u;
    uiplayerlevel_ = 0u;
    uiprice_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Client_WolrdBoss_SaleResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uiIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiindex_)));
          set_has_uiindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uiPlayerName;
        break;
      }

      // optional string uiPlayerName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uiPlayerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uiplayername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uiplayername().data(), this->uiplayername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uiPlayerJob;
        break;
      }

      // optional uint32 uiPlayerJob = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiPlayerJob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiplayerjob_)));
          set_has_uiplayerjob();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uiPlayerLevel;
        break;
      }

      // optional uint32 uiPlayerLevel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiPlayerLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiplayerlevel_)));
          set_has_uiplayerlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_uiPrice;
        break;
      }

      // optional uint32 uiPrice = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiprice_)));
          set_has_uiprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Client_WolrdBoss_SaleResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uiIndex = 1;
  if (has_uiindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uiindex(), output);
  }

  // optional string uiPlayerName = 2;
  if (has_uiplayername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uiplayername().data(), this->uiplayername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->uiplayername(), output);
  }

  // optional uint32 uiPlayerJob = 3;
  if (has_uiplayerjob()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uiplayerjob(), output);
  }

  // optional uint32 uiPlayerLevel = 4;
  if (has_uiplayerlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uiplayerlevel(), output);
  }

  // optional uint32 uiPrice = 5;
  if (has_uiprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->uiprice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Client_WolrdBoss_SaleResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uiIndex = 1;
  if (has_uiindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uiindex(), target);
  }

  // optional string uiPlayerName = 2;
  if (has_uiplayername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uiplayername().data(), this->uiplayername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uiplayername(), target);
  }

  // optional uint32 uiPlayerJob = 3;
  if (has_uiplayerjob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uiplayerjob(), target);
  }

  // optional uint32 uiPlayerLevel = 4;
  if (has_uiplayerlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uiplayerlevel(), target);
  }

  // optional uint32 uiPrice = 5;
  if (has_uiprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->uiprice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Client_WolrdBoss_SaleResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uiIndex = 1;
    if (has_uiindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiindex());
    }

    // optional string uiPlayerName = 2;
    if (has_uiplayername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uiplayername());
    }

    // optional uint32 uiPlayerJob = 3;
    if (has_uiplayerjob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiplayerjob());
    }

    // optional uint32 uiPlayerLevel = 4;
    if (has_uiplayerlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiplayerlevel());
    }

    // optional uint32 uiPrice = 5;
    if (has_uiprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiprice());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Client_WolrdBoss_SaleResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Client_WolrdBoss_SaleResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Client_WolrdBoss_SaleResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Client_WolrdBoss_SaleResult::MergeFrom(const Battle2Client_WolrdBoss_SaleResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uiindex()) {
      set_uiindex(from.uiindex());
    }
    if (from.has_uiplayername()) {
      set_uiplayername(from.uiplayername());
    }
    if (from.has_uiplayerjob()) {
      set_uiplayerjob(from.uiplayerjob());
    }
    if (from.has_uiplayerlevel()) {
      set_uiplayerlevel(from.uiplayerlevel());
    }
    if (from.has_uiprice()) {
      set_uiprice(from.uiprice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Client_WolrdBoss_SaleResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Client_WolrdBoss_SaleResult::CopyFrom(const Battle2Client_WolrdBoss_SaleResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Client_WolrdBoss_SaleResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Battle2Client_WolrdBoss_SaleResult::Swap(Battle2Client_WolrdBoss_SaleResult* other) {
  if (other != this) {
    std::swap(uiindex_, other->uiindex_);
    std::swap(uiplayername_, other->uiplayername_);
    std::swap(uiplayerjob_, other->uiplayerjob_);
    std::swap(uiplayerlevel_, other->uiplayerlevel_);
    std::swap(uiprice_, other->uiprice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Client_WolrdBoss_SaleResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Client_WolrdBoss_SaleResult_descriptor_;
  metadata.reflection = Battle2Client_WolrdBoss_SaleResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Game_WolrdBoss_SaleResult::kItemFieldNumber;
#endif  // !_MSC_VER

Battle2Game_WolrdBoss_SaleResult::Battle2Game_WolrdBoss_SaleResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Game_WolrdBoss_SaleResult::InitAsDefaultInstance() {
  item_ = const_cast< ::proto::message::WolrdBossSaledItem*>(&::proto::message::WolrdBossSaledItem::default_instance());
}

Battle2Game_WolrdBoss_SaleResult::Battle2Game_WolrdBoss_SaleResult(const Battle2Game_WolrdBoss_SaleResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Game_WolrdBoss_SaleResult::SharedCtor() {
  _cached_size_ = 0;
  item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Game_WolrdBoss_SaleResult::~Battle2Game_WolrdBoss_SaleResult() {
  SharedDtor();
}

void Battle2Game_WolrdBoss_SaleResult::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

void Battle2Game_WolrdBoss_SaleResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Game_WolrdBoss_SaleResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Game_WolrdBoss_SaleResult_descriptor_;
}

const Battle2Game_WolrdBoss_SaleResult& Battle2Game_WolrdBoss_SaleResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Game_WolrdBoss_SaleResult* Battle2Game_WolrdBoss_SaleResult::default_instance_ = NULL;

Battle2Game_WolrdBoss_SaleResult* Battle2Game_WolrdBoss_SaleResult::New() const {
  return new Battle2Game_WolrdBoss_SaleResult;
}

void Battle2Game_WolrdBoss_SaleResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_item()) {
      if (item_ != NULL) item_->::proto::message::WolrdBossSaledItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Game_WolrdBoss_SaleResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.message.WolrdBossSaledItem item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Game_WolrdBoss_SaleResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.message.WolrdBossSaledItem item = 1;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Game_WolrdBoss_SaleResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.message.WolrdBossSaledItem item = 1;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Game_WolrdBoss_SaleResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.message.WolrdBossSaledItem item = 1;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Game_WolrdBoss_SaleResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Game_WolrdBoss_SaleResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Game_WolrdBoss_SaleResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Game_WolrdBoss_SaleResult::MergeFrom(const Battle2Game_WolrdBoss_SaleResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item()) {
      mutable_item()->::proto::message::WolrdBossSaledItem::MergeFrom(from.item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Game_WolrdBoss_SaleResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Game_WolrdBoss_SaleResult::CopyFrom(const Battle2Game_WolrdBoss_SaleResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Game_WolrdBoss_SaleResult::IsInitialized() const {

  return true;
}

void Battle2Game_WolrdBoss_SaleResult::Swap(Battle2Game_WolrdBoss_SaleResult* other) {
  if (other != this) {
    std::swap(item_, other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Game_WolrdBoss_SaleResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Game_WolrdBoss_SaleResult_descriptor_;
  metadata.reflection = Battle2Game_WolrdBoss_SaleResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Game_SendMail::kUiSendToFieldNumber;
const int Battle2Game_SendMail::kUiModeFieldNumber;
const int Battle2Game_SendMail::kUiArgFieldNumber;
const int Battle2Game_SendMail::kSzArgFieldNumber;
const int Battle2Game_SendMail::kVecItemListFieldNumber;
const int Battle2Game_SendMail::kUiOptFieldNumber;
#endif  // !_MSC_VER

Battle2Game_SendMail::Battle2Game_SendMail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Game_SendMail::InitAsDefaultInstance() {
}

Battle2Game_SendMail::Battle2Game_SendMail(const Battle2Game_SendMail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Game_SendMail::SharedCtor() {
  _cached_size_ = 0;
  uisendto_ = GOOGLE_ULONGLONG(0);
  uimode_ = 0u;
  uiarg_ = 0u;
  szarg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uiopt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Game_SendMail::~Battle2Game_SendMail() {
  SharedDtor();
}

void Battle2Game_SendMail::SharedDtor() {
  if (szarg_ != &::google::protobuf::internal::kEmptyString) {
    delete szarg_;
  }
  if (this != default_instance_) {
  }
}

void Battle2Game_SendMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Game_SendMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Game_SendMail_descriptor_;
}

const Battle2Game_SendMail& Battle2Game_SendMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Game_SendMail* Battle2Game_SendMail::default_instance_ = NULL;

Battle2Game_SendMail* Battle2Game_SendMail::New() const {
  return new Battle2Game_SendMail;
}

void Battle2Game_SendMail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uisendto_ = GOOGLE_ULONGLONG(0);
    uimode_ = 0u;
    uiarg_ = 0u;
    if (has_szarg()) {
      if (szarg_ != &::google::protobuf::internal::kEmptyString) {
        szarg_->clear();
      }
    }
    uiopt_ = 0u;
  }
  vecitemlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Game_SendMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 uiSendTo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uisendto_)));
          set_has_uisendto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiMode;
        break;
      }

      // required uint32 uiMode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uimode_)));
          set_has_uimode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uiArg;
        break;
      }

      // required uint32 uiArg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiArg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiarg_)));
          set_has_uiarg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_szArg;
        break;
      }

      // optional string szArg = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_szArg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szarg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->szarg().data(), this->szarg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_vecItemList;
        break;
      }

      // repeated .proto.message.IDNum vecItemList = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vecItemList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vecitemlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_vecItemList;
        if (input->ExpectTag(48)) goto parse_uiOpt;
        break;
      }

      // optional uint32 uiOpt = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiOpt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiopt_)));
          set_has_uiopt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Game_SendMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 uiSendTo = 1;
  if (has_uisendto()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uisendto(), output);
  }

  // required uint32 uiMode = 2;
  if (has_uimode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uimode(), output);
  }

  // required uint32 uiArg = 3;
  if (has_uiarg()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uiarg(), output);
  }

  // optional string szArg = 4;
  if (has_szarg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szarg().data(), this->szarg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->szarg(), output);
  }

  // repeated .proto.message.IDNum vecItemList = 5;
  for (int i = 0; i < this->vecitemlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->vecitemlist(i), output);
  }

  // optional uint32 uiOpt = 6;
  if (has_uiopt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->uiopt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Game_SendMail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 uiSendTo = 1;
  if (has_uisendto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uisendto(), target);
  }

  // required uint32 uiMode = 2;
  if (has_uimode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uimode(), target);
  }

  // required uint32 uiArg = 3;
  if (has_uiarg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uiarg(), target);
  }

  // optional string szArg = 4;
  if (has_szarg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szarg().data(), this->szarg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->szarg(), target);
  }

  // repeated .proto.message.IDNum vecItemList = 5;
  for (int i = 0; i < this->vecitemlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->vecitemlist(i), target);
  }

  // optional uint32 uiOpt = 6;
  if (has_uiopt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->uiopt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Game_SendMail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 uiSendTo = 1;
    if (has_uisendto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uisendto());
    }

    // required uint32 uiMode = 2;
    if (has_uimode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uimode());
    }

    // required uint32 uiArg = 3;
    if (has_uiarg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiarg());
    }

    // optional string szArg = 4;
    if (has_szarg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szarg());
    }

    // optional uint32 uiOpt = 6;
    if (has_uiopt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiopt());
    }

  }
  // repeated .proto.message.IDNum vecItemList = 5;
  total_size += 1 * this->vecitemlist_size();
  for (int i = 0; i < this->vecitemlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vecitemlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Game_SendMail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Game_SendMail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Game_SendMail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Game_SendMail::MergeFrom(const Battle2Game_SendMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  vecitemlist_.MergeFrom(from.vecitemlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uisendto()) {
      set_uisendto(from.uisendto());
    }
    if (from.has_uimode()) {
      set_uimode(from.uimode());
    }
    if (from.has_uiarg()) {
      set_uiarg(from.uiarg());
    }
    if (from.has_szarg()) {
      set_szarg(from.szarg());
    }
    if (from.has_uiopt()) {
      set_uiopt(from.uiopt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Game_SendMail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Game_SendMail::CopyFrom(const Battle2Game_SendMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Game_SendMail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Battle2Game_SendMail::Swap(Battle2Game_SendMail* other) {
  if (other != this) {
    std::swap(uisendto_, other->uisendto_);
    std::swap(uimode_, other->uimode_);
    std::swap(uiarg_, other->uiarg_);
    std::swap(szarg_, other->szarg_);
    vecitemlist_.Swap(&other->vecitemlist_);
    std::swap(uiopt_, other->uiopt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Game_SendMail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Game_SendMail_descriptor_;
  metadata.reflection = Battle2Game_SendMail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Game_WolrdBoss_HpChange::kUiBossTypeFieldNumber;
const int Battle2Game_WolrdBoss_HpChange::kUiHpFieldNumber;
const int Battle2Game_WolrdBoss_HpChange::kUiBossTableIdFieldNumber;
#endif  // !_MSC_VER

Battle2Game_WolrdBoss_HpChange::Battle2Game_WolrdBoss_HpChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Game_WolrdBoss_HpChange::InitAsDefaultInstance() {
}

Battle2Game_WolrdBoss_HpChange::Battle2Game_WolrdBoss_HpChange(const Battle2Game_WolrdBoss_HpChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Game_WolrdBoss_HpChange::SharedCtor() {
  _cached_size_ = 0;
  uibosstype_ = 0u;
  uihp_ = GOOGLE_ULONGLONG(0);
  uibosstableid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Game_WolrdBoss_HpChange::~Battle2Game_WolrdBoss_HpChange() {
  SharedDtor();
}

void Battle2Game_WolrdBoss_HpChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Battle2Game_WolrdBoss_HpChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Game_WolrdBoss_HpChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Game_WolrdBoss_HpChange_descriptor_;
}

const Battle2Game_WolrdBoss_HpChange& Battle2Game_WolrdBoss_HpChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Game_WolrdBoss_HpChange* Battle2Game_WolrdBoss_HpChange::default_instance_ = NULL;

Battle2Game_WolrdBoss_HpChange* Battle2Game_WolrdBoss_HpChange::New() const {
  return new Battle2Game_WolrdBoss_HpChange;
}

void Battle2Game_WolrdBoss_HpChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uibosstype_ = 0u;
    uihp_ = GOOGLE_ULONGLONG(0);
    uibosstableid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Game_WolrdBoss_HpChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uiBossType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uibosstype_)));
          set_has_uibosstype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiHp;
        break;
      }

      // required uint64 uiHp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uihp_)));
          set_has_uihp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uiBossTableId;
        break;
      }

      // optional uint32 uiBossTableId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiBossTableId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uibosstableid_)));
          set_has_uibosstableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Game_WolrdBoss_HpChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uiBossType = 1;
  if (has_uibosstype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uibosstype(), output);
  }

  // required uint64 uiHp = 2;
  if (has_uihp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uihp(), output);
  }

  // optional uint32 uiBossTableId = 3;
  if (has_uibosstableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uibosstableid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Game_WolrdBoss_HpChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uiBossType = 1;
  if (has_uibosstype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uibosstype(), target);
  }

  // required uint64 uiHp = 2;
  if (has_uihp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uihp(), target);
  }

  // optional uint32 uiBossTableId = 3;
  if (has_uibosstableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uibosstableid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Game_WolrdBoss_HpChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uiBossType = 1;
    if (has_uibosstype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uibosstype());
    }

    // required uint64 uiHp = 2;
    if (has_uihp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uihp());
    }

    // optional uint32 uiBossTableId = 3;
    if (has_uibosstableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uibosstableid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Game_WolrdBoss_HpChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Game_WolrdBoss_HpChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Game_WolrdBoss_HpChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Game_WolrdBoss_HpChange::MergeFrom(const Battle2Game_WolrdBoss_HpChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uibosstype()) {
      set_uibosstype(from.uibosstype());
    }
    if (from.has_uihp()) {
      set_uihp(from.uihp());
    }
    if (from.has_uibosstableid()) {
      set_uibosstableid(from.uibosstableid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Game_WolrdBoss_HpChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Game_WolrdBoss_HpChange::CopyFrom(const Battle2Game_WolrdBoss_HpChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Game_WolrdBoss_HpChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Battle2Game_WolrdBoss_HpChange::Swap(Battle2Game_WolrdBoss_HpChange* other) {
  if (other != this) {
    std::swap(uibosstype_, other->uibosstype_);
    std::swap(uihp_, other->uihp_);
    std::swap(uibosstableid_, other->uibosstableid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Game_WolrdBoss_HpChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Game_WolrdBoss_HpChange_descriptor_;
  metadata.reflection = Battle2Game_WolrdBoss_HpChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Client_WolrdBoss_HpChange::kUiBossTypeFieldNumber;
const int Battle2Client_WolrdBoss_HpChange::kUiHpFieldNumber;
const int Battle2Client_WolrdBoss_HpChange::kUiBossTableIdFieldNumber;
#endif  // !_MSC_VER

Battle2Client_WolrdBoss_HpChange::Battle2Client_WolrdBoss_HpChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Client_WolrdBoss_HpChange::InitAsDefaultInstance() {
}

Battle2Client_WolrdBoss_HpChange::Battle2Client_WolrdBoss_HpChange(const Battle2Client_WolrdBoss_HpChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Client_WolrdBoss_HpChange::SharedCtor() {
  _cached_size_ = 0;
  uibosstype_ = 0u;
  uihp_ = GOOGLE_ULONGLONG(0);
  uibosstableid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Client_WolrdBoss_HpChange::~Battle2Client_WolrdBoss_HpChange() {
  SharedDtor();
}

void Battle2Client_WolrdBoss_HpChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Battle2Client_WolrdBoss_HpChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Client_WolrdBoss_HpChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Client_WolrdBoss_HpChange_descriptor_;
}

const Battle2Client_WolrdBoss_HpChange& Battle2Client_WolrdBoss_HpChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Client_WolrdBoss_HpChange* Battle2Client_WolrdBoss_HpChange::default_instance_ = NULL;

Battle2Client_WolrdBoss_HpChange* Battle2Client_WolrdBoss_HpChange::New() const {
  return new Battle2Client_WolrdBoss_HpChange;
}

void Battle2Client_WolrdBoss_HpChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uibosstype_ = 0u;
    uihp_ = GOOGLE_ULONGLONG(0);
    uibosstableid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Client_WolrdBoss_HpChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uiBossType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uibosstype_)));
          set_has_uibosstype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiHp;
        break;
      }

      // required uint64 uiHp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uihp_)));
          set_has_uihp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uiBossTableId;
        break;
      }

      // optional uint32 uiBossTableId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiBossTableId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uibosstableid_)));
          set_has_uibosstableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Client_WolrdBoss_HpChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uiBossType = 1;
  if (has_uibosstype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uibosstype(), output);
  }

  // required uint64 uiHp = 2;
  if (has_uihp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uihp(), output);
  }

  // optional uint32 uiBossTableId = 3;
  if (has_uibosstableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uibosstableid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Client_WolrdBoss_HpChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uiBossType = 1;
  if (has_uibosstype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uibosstype(), target);
  }

  // required uint64 uiHp = 2;
  if (has_uihp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uihp(), target);
  }

  // optional uint32 uiBossTableId = 3;
  if (has_uibosstableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uibosstableid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Client_WolrdBoss_HpChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uiBossType = 1;
    if (has_uibosstype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uibosstype());
    }

    // required uint64 uiHp = 2;
    if (has_uihp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uihp());
    }

    // optional uint32 uiBossTableId = 3;
    if (has_uibosstableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uibosstableid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Client_WolrdBoss_HpChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Client_WolrdBoss_HpChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Client_WolrdBoss_HpChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Client_WolrdBoss_HpChange::MergeFrom(const Battle2Client_WolrdBoss_HpChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uibosstype()) {
      set_uibosstype(from.uibosstype());
    }
    if (from.has_uihp()) {
      set_uihp(from.uihp());
    }
    if (from.has_uibosstableid()) {
      set_uibosstableid(from.uibosstableid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Client_WolrdBoss_HpChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Client_WolrdBoss_HpChange::CopyFrom(const Battle2Client_WolrdBoss_HpChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Client_WolrdBoss_HpChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Battle2Client_WolrdBoss_HpChange::Swap(Battle2Client_WolrdBoss_HpChange* other) {
  if (other != this) {
    std::swap(uibosstype_, other->uibosstype_);
    std::swap(uihp_, other->uihp_);
    std::swap(uibosstableid_, other->uibosstableid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Client_WolrdBoss_HpChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Client_WolrdBoss_HpChange_descriptor_;
  metadata.reflection = Battle2Client_WolrdBoss_HpChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Game2Battle_AddCurHp::kUiHpFieldNumber;
#endif  // !_MSC_VER

Game2Battle_AddCurHp::Game2Battle_AddCurHp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Game2Battle_AddCurHp::InitAsDefaultInstance() {
}

Game2Battle_AddCurHp::Game2Battle_AddCurHp(const Game2Battle_AddCurHp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Game2Battle_AddCurHp::SharedCtor() {
  _cached_size_ = 0;
  uihp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Game2Battle_AddCurHp::~Game2Battle_AddCurHp() {
  SharedDtor();
}

void Game2Battle_AddCurHp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Game2Battle_AddCurHp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Game2Battle_AddCurHp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Game2Battle_AddCurHp_descriptor_;
}

const Game2Battle_AddCurHp& Game2Battle_AddCurHp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Game2Battle_AddCurHp* Game2Battle_AddCurHp::default_instance_ = NULL;

Game2Battle_AddCurHp* Game2Battle_AddCurHp::New() const {
  return new Game2Battle_AddCurHp;
}

void Game2Battle_AddCurHp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uihp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Game2Battle_AddCurHp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uiHp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uihp_)));
          set_has_uihp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Game2Battle_AddCurHp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uiHp = 1;
  if (has_uihp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uihp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Game2Battle_AddCurHp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uiHp = 1;
  if (has_uihp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uihp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Game2Battle_AddCurHp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uiHp = 1;
    if (has_uihp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uihp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Game2Battle_AddCurHp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Game2Battle_AddCurHp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Game2Battle_AddCurHp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Game2Battle_AddCurHp::MergeFrom(const Game2Battle_AddCurHp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uihp()) {
      set_uihp(from.uihp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Game2Battle_AddCurHp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Game2Battle_AddCurHp::CopyFrom(const Game2Battle_AddCurHp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game2Battle_AddCurHp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Game2Battle_AddCurHp::Swap(Game2Battle_AddCurHp* other) {
  if (other != this) {
    std::swap(uihp_, other->uihp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Game2Battle_AddCurHp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Game2Battle_AddCurHp_descriptor_;
  metadata.reflection = Game2Battle_AddCurHp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Game2Battle_AddBuff::kUiBuffIdFieldNumber;
const int Game2Battle_AddBuff::kUiQualityFieldNumber;
#endif  // !_MSC_VER

Game2Battle_AddBuff::Game2Battle_AddBuff()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Game2Battle_AddBuff::InitAsDefaultInstance() {
}

Game2Battle_AddBuff::Game2Battle_AddBuff(const Game2Battle_AddBuff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Game2Battle_AddBuff::SharedCtor() {
  _cached_size_ = 0;
  uibuffid_ = 0u;
  uiquality_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Game2Battle_AddBuff::~Game2Battle_AddBuff() {
  SharedDtor();
}

void Game2Battle_AddBuff::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Game2Battle_AddBuff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Game2Battle_AddBuff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Game2Battle_AddBuff_descriptor_;
}

const Game2Battle_AddBuff& Game2Battle_AddBuff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Game2Battle_AddBuff* Game2Battle_AddBuff::default_instance_ = NULL;

Game2Battle_AddBuff* Game2Battle_AddBuff::New() const {
  return new Game2Battle_AddBuff;
}

void Game2Battle_AddBuff::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uibuffid_ = 0u;
    uiquality_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Game2Battle_AddBuff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uiBuffId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uibuffid_)));
          set_has_uibuffid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiQuality;
        break;
      }

      // required uint32 uiQuality = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiQuality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiquality_)));
          set_has_uiquality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Game2Battle_AddBuff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uiBuffId = 1;
  if (has_uibuffid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uibuffid(), output);
  }

  // required uint32 uiQuality = 2;
  if (has_uiquality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uiquality(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Game2Battle_AddBuff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uiBuffId = 1;
  if (has_uibuffid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uibuffid(), target);
  }

  // required uint32 uiQuality = 2;
  if (has_uiquality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uiquality(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Game2Battle_AddBuff::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uiBuffId = 1;
    if (has_uibuffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uibuffid());
    }

    // required uint32 uiQuality = 2;
    if (has_uiquality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiquality());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Game2Battle_AddBuff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Game2Battle_AddBuff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Game2Battle_AddBuff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Game2Battle_AddBuff::MergeFrom(const Game2Battle_AddBuff& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uibuffid()) {
      set_uibuffid(from.uibuffid());
    }
    if (from.has_uiquality()) {
      set_uiquality(from.uiquality());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Game2Battle_AddBuff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Game2Battle_AddBuff::CopyFrom(const Game2Battle_AddBuff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game2Battle_AddBuff::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Game2Battle_AddBuff::Swap(Game2Battle_AddBuff* other) {
  if (other != this) {
    std::swap(uibuffid_, other->uibuffid_);
    std::swap(uiquality_, other->uiquality_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Game2Battle_AddBuff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Game2Battle_AddBuff_descriptor_;
  metadata.reflection = Game2Battle_AddBuff_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Client2Battle_WorldBoss_SaledItem::kUiIndexFieldNumber;
#endif  // !_MSC_VER

Client2Battle_WorldBoss_SaledItem::Client2Battle_WorldBoss_SaledItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Client2Battle_WorldBoss_SaledItem::InitAsDefaultInstance() {
}

Client2Battle_WorldBoss_SaledItem::Client2Battle_WorldBoss_SaledItem(const Client2Battle_WorldBoss_SaledItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Client2Battle_WorldBoss_SaledItem::SharedCtor() {
  _cached_size_ = 0;
  uiindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Client2Battle_WorldBoss_SaledItem::~Client2Battle_WorldBoss_SaledItem() {
  SharedDtor();
}

void Client2Battle_WorldBoss_SaledItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Client2Battle_WorldBoss_SaledItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Client2Battle_WorldBoss_SaledItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Client2Battle_WorldBoss_SaledItem_descriptor_;
}

const Client2Battle_WorldBoss_SaledItem& Client2Battle_WorldBoss_SaledItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Client2Battle_WorldBoss_SaledItem* Client2Battle_WorldBoss_SaledItem::default_instance_ = NULL;

Client2Battle_WorldBoss_SaledItem* Client2Battle_WorldBoss_SaledItem::New() const {
  return new Client2Battle_WorldBoss_SaledItem;
}

void Client2Battle_WorldBoss_SaledItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uiindex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Client2Battle_WorldBoss_SaledItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uiIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiindex_)));
          set_has_uiindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Client2Battle_WorldBoss_SaledItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uiIndex = 1;
  if (has_uiindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uiindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Client2Battle_WorldBoss_SaledItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uiIndex = 1;
  if (has_uiindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uiindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Client2Battle_WorldBoss_SaledItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uiIndex = 1;
    if (has_uiindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Client2Battle_WorldBoss_SaledItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Client2Battle_WorldBoss_SaledItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Client2Battle_WorldBoss_SaledItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Client2Battle_WorldBoss_SaledItem::MergeFrom(const Client2Battle_WorldBoss_SaledItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uiindex()) {
      set_uiindex(from.uiindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Client2Battle_WorldBoss_SaledItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Client2Battle_WorldBoss_SaledItem::CopyFrom(const Client2Battle_WorldBoss_SaledItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Client2Battle_WorldBoss_SaledItem::IsInitialized() const {

  return true;
}

void Client2Battle_WorldBoss_SaledItem::Swap(Client2Battle_WorldBoss_SaledItem* other) {
  if (other != this) {
    std::swap(uiindex_, other->uiindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Client2Battle_WorldBoss_SaledItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Client2Battle_WorldBoss_SaledItem_descriptor_;
  metadata.reflection = Client2Battle_WorldBoss_SaledItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Client_WorldBoss_SaledItem::kSItemFieldNumber;
#endif  // !_MSC_VER

Battle2Client_WorldBoss_SaledItem::Battle2Client_WorldBoss_SaledItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Client_WorldBoss_SaledItem::InitAsDefaultInstance() {
  sitem_ = const_cast< ::proto::message::WolrdBossSaleItem*>(&::proto::message::WolrdBossSaleItem::default_instance());
}

Battle2Client_WorldBoss_SaledItem::Battle2Client_WorldBoss_SaledItem(const Battle2Client_WorldBoss_SaledItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Client_WorldBoss_SaledItem::SharedCtor() {
  _cached_size_ = 0;
  sitem_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Client_WorldBoss_SaledItem::~Battle2Client_WorldBoss_SaledItem() {
  SharedDtor();
}

void Battle2Client_WorldBoss_SaledItem::SharedDtor() {
  if (this != default_instance_) {
    delete sitem_;
  }
}

void Battle2Client_WorldBoss_SaledItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Client_WorldBoss_SaledItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Client_WorldBoss_SaledItem_descriptor_;
}

const Battle2Client_WorldBoss_SaledItem& Battle2Client_WorldBoss_SaledItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Client_WorldBoss_SaledItem* Battle2Client_WorldBoss_SaledItem::default_instance_ = NULL;

Battle2Client_WorldBoss_SaledItem* Battle2Client_WorldBoss_SaledItem::New() const {
  return new Battle2Client_WorldBoss_SaledItem;
}

void Battle2Client_WorldBoss_SaledItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sitem()) {
      if (sitem_ != NULL) sitem_->::proto::message::WolrdBossSaleItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Client_WorldBoss_SaledItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.message.WolrdBossSaleItem sItem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Client_WorldBoss_SaledItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.message.WolrdBossSaleItem sItem = 1;
  if (has_sitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sitem(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Client_WorldBoss_SaledItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.message.WolrdBossSaleItem sItem = 1;
  if (has_sitem()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sitem(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Client_WorldBoss_SaledItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.message.WolrdBossSaleItem sItem = 1;
    if (has_sitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sitem());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Client_WorldBoss_SaledItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Client_WorldBoss_SaledItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Client_WorldBoss_SaledItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Client_WorldBoss_SaledItem::MergeFrom(const Battle2Client_WorldBoss_SaledItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sitem()) {
      mutable_sitem()->::proto::message::WolrdBossSaleItem::MergeFrom(from.sitem());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Client_WorldBoss_SaledItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Client_WorldBoss_SaledItem::CopyFrom(const Battle2Client_WorldBoss_SaledItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Client_WorldBoss_SaledItem::IsInitialized() const {

  if (has_sitem()) {
    if (!this->sitem().IsInitialized()) return false;
  }
  return true;
}

void Battle2Client_WorldBoss_SaledItem::Swap(Battle2Client_WorldBoss_SaledItem* other) {
  if (other != this) {
    std::swap(sitem_, other->sitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Client_WorldBoss_SaledItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Client_WorldBoss_SaledItem_descriptor_;
  metadata.reflection = Battle2Client_WorldBoss_SaledItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Client_SyncDropItemAppear::kUiObjIdFieldNumber;
const int Battle2Client_SyncDropItemAppear::kUiTypeFieldNumber;
const int Battle2Client_SyncDropItemAppear::kPtFieldNumber;
const int Battle2Client_SyncDropItemAppear::kVecItemIdFieldNumber;
const int Battle2Client_SyncDropItemAppear::kUiOwnerIdFieldNumber;
const int Battle2Client_SyncDropItemAppear::kNameFieldNumber;
#endif  // !_MSC_VER

Battle2Client_SyncDropItemAppear::Battle2Client_SyncDropItemAppear()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Client_SyncDropItemAppear::InitAsDefaultInstance() {
  pt_ = const_cast< ::proto::message::Point3D*>(&::proto::message::Point3D::default_instance());
}

Battle2Client_SyncDropItemAppear::Battle2Client_SyncDropItemAppear(const Battle2Client_SyncDropItemAppear& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Client_SyncDropItemAppear::SharedCtor() {
  _cached_size_ = 0;
  uiobjid_ = 0u;
  uitype_ = 0u;
  pt_ = NULL;
  uiownerid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Client_SyncDropItemAppear::~Battle2Client_SyncDropItemAppear() {
  SharedDtor();
}

void Battle2Client_SyncDropItemAppear::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete pt_;
  }
}

void Battle2Client_SyncDropItemAppear::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Client_SyncDropItemAppear::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Client_SyncDropItemAppear_descriptor_;
}

const Battle2Client_SyncDropItemAppear& Battle2Client_SyncDropItemAppear::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Client_SyncDropItemAppear* Battle2Client_SyncDropItemAppear::default_instance_ = NULL;

Battle2Client_SyncDropItemAppear* Battle2Client_SyncDropItemAppear::New() const {
  return new Battle2Client_SyncDropItemAppear;
}

void Battle2Client_SyncDropItemAppear::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uiobjid_ = 0u;
    uitype_ = 0u;
    if (has_pt()) {
      if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
    }
    uiownerid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  vecitemid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Client_SyncDropItemAppear::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uiObjId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiobjid_)));
          set_has_uiobjid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiType;
        break;
      }

      // required uint32 uiType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uitype_)));
          set_has_uitype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pt;
        break;
      }

      // required .proto.message.Point3D pt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_vecItemId;
        break;
      }

      // repeated .proto.message.IDNum vecItemId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vecItemId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vecitemid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_vecItemId;
        if (input->ExpectTag(40)) goto parse_uiOwnerId;
        break;
      }

      // required uint64 uiOwnerId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiOwnerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uiownerid_)));
          set_has_uiownerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_name;
        break;
      }

      // optional string name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Client_SyncDropItemAppear::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uiObjId = 1;
  if (has_uiobjid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uiobjid(), output);
  }

  // required uint32 uiType = 2;
  if (has_uitype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uitype(), output);
  }

  // required .proto.message.Point3D pt = 3;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pt(), output);
  }

  // repeated .proto.message.IDNum vecItemId = 4;
  for (int i = 0; i < this->vecitemid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->vecitemid(i), output);
  }

  // required uint64 uiOwnerId = 5;
  if (has_uiownerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->uiownerid(), output);
  }

  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Client_SyncDropItemAppear::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uiObjId = 1;
  if (has_uiobjid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uiobjid(), target);
  }

  // required uint32 uiType = 2;
  if (has_uitype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uitype(), target);
  }

  // required .proto.message.Point3D pt = 3;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pt(), target);
  }

  // repeated .proto.message.IDNum vecItemId = 4;
  for (int i = 0; i < this->vecitemid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->vecitemid(i), target);
  }

  // required uint64 uiOwnerId = 5;
  if (has_uiownerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->uiownerid(), target);
  }

  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Client_SyncDropItemAppear::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uiObjId = 1;
    if (has_uiobjid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiobjid());
    }

    // required uint32 uiType = 2;
    if (has_uitype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uitype());
    }

    // required .proto.message.Point3D pt = 3;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

    // required uint64 uiOwnerId = 5;
    if (has_uiownerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uiownerid());
    }

    // optional string name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .proto.message.IDNum vecItemId = 4;
  total_size += 1 * this->vecitemid_size();
  for (int i = 0; i < this->vecitemid_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vecitemid(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Client_SyncDropItemAppear::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Client_SyncDropItemAppear* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Client_SyncDropItemAppear*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Client_SyncDropItemAppear::MergeFrom(const Battle2Client_SyncDropItemAppear& from) {
  GOOGLE_CHECK_NE(&from, this);
  vecitemid_.MergeFrom(from.vecitemid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uiobjid()) {
      set_uiobjid(from.uiobjid());
    }
    if (from.has_uitype()) {
      set_uitype(from.uitype());
    }
    if (from.has_pt()) {
      mutable_pt()->::proto::message::Point3D::MergeFrom(from.pt());
    }
    if (from.has_uiownerid()) {
      set_uiownerid(from.uiownerid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Client_SyncDropItemAppear::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Client_SyncDropItemAppear::CopyFrom(const Battle2Client_SyncDropItemAppear& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Client_SyncDropItemAppear::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;

  return true;
}

void Battle2Client_SyncDropItemAppear::Swap(Battle2Client_SyncDropItemAppear* other) {
  if (other != this) {
    std::swap(uiobjid_, other->uiobjid_);
    std::swap(uitype_, other->uitype_);
    std::swap(pt_, other->pt_);
    vecitemid_.Swap(&other->vecitemid_);
    std::swap(uiownerid_, other->uiownerid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Client_SyncDropItemAppear::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Client_SyncDropItemAppear_descriptor_;
  metadata.reflection = Battle2Client_SyncDropItemAppear_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Client_TicketBoss_DropItem::kUiBossTableIdFieldNumber;
const int Battle2Client_TicketBoss_DropItem::kVecItemListFieldNumber;
#endif  // !_MSC_VER

Battle2Client_TicketBoss_DropItem::Battle2Client_TicketBoss_DropItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Client_TicketBoss_DropItem::InitAsDefaultInstance() {
}

Battle2Client_TicketBoss_DropItem::Battle2Client_TicketBoss_DropItem(const Battle2Client_TicketBoss_DropItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Client_TicketBoss_DropItem::SharedCtor() {
  _cached_size_ = 0;
  uibosstableid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Client_TicketBoss_DropItem::~Battle2Client_TicketBoss_DropItem() {
  SharedDtor();
}

void Battle2Client_TicketBoss_DropItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Battle2Client_TicketBoss_DropItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Client_TicketBoss_DropItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Client_TicketBoss_DropItem_descriptor_;
}

const Battle2Client_TicketBoss_DropItem& Battle2Client_TicketBoss_DropItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Client_TicketBoss_DropItem* Battle2Client_TicketBoss_DropItem::default_instance_ = NULL;

Battle2Client_TicketBoss_DropItem* Battle2Client_TicketBoss_DropItem::New() const {
  return new Battle2Client_TicketBoss_DropItem;
}

void Battle2Client_TicketBoss_DropItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uibosstableid_ = 0u;
  }
  vecitemlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Client_TicketBoss_DropItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uiBossTableId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uibosstableid_)));
          set_has_uibosstableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_vecItemList;
        break;
      }

      // repeated .proto.message.Battle2Client_SyncDropItemAppear vecItemList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vecItemList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vecitemlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_vecItemList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Client_TicketBoss_DropItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uiBossTableId = 1;
  if (has_uibosstableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uibosstableid(), output);
  }

  // repeated .proto.message.Battle2Client_SyncDropItemAppear vecItemList = 2;
  for (int i = 0; i < this->vecitemlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->vecitemlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Client_TicketBoss_DropItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uiBossTableId = 1;
  if (has_uibosstableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uibosstableid(), target);
  }

  // repeated .proto.message.Battle2Client_SyncDropItemAppear vecItemList = 2;
  for (int i = 0; i < this->vecitemlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->vecitemlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Client_TicketBoss_DropItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uiBossTableId = 1;
    if (has_uibosstableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uibosstableid());
    }

  }
  // repeated .proto.message.Battle2Client_SyncDropItemAppear vecItemList = 2;
  total_size += 1 * this->vecitemlist_size();
  for (int i = 0; i < this->vecitemlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vecitemlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Client_TicketBoss_DropItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Client_TicketBoss_DropItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Client_TicketBoss_DropItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Client_TicketBoss_DropItem::MergeFrom(const Battle2Client_TicketBoss_DropItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  vecitemlist_.MergeFrom(from.vecitemlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uibosstableid()) {
      set_uibosstableid(from.uibosstableid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Client_TicketBoss_DropItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Client_TicketBoss_DropItem::CopyFrom(const Battle2Client_TicketBoss_DropItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Client_TicketBoss_DropItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < vecitemlist_size(); i++) {
    if (!this->vecitemlist(i).IsInitialized()) return false;
  }
  return true;
}

void Battle2Client_TicketBoss_DropItem::Swap(Battle2Client_TicketBoss_DropItem* other) {
  if (other != this) {
    std::swap(uibosstableid_, other->uibosstableid_);
    vecitemlist_.Swap(&other->vecitemlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Client_TicketBoss_DropItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Client_TicketBoss_DropItem_descriptor_;
  metadata.reflection = Battle2Client_TicketBoss_DropItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Client_SyncDropItemChange::kUiObjIdFieldNumber;
const int Battle2Client_SyncDropItemChange::kIItemIndexFieldNumber;
const int Battle2Client_SyncDropItemChange::kUiOwnerIdFieldNumber;
const int Battle2Client_SyncDropItemChange::kUiTakeObjIdFieldNumber;
#endif  // !_MSC_VER

Battle2Client_SyncDropItemChange::Battle2Client_SyncDropItemChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Client_SyncDropItemChange::InitAsDefaultInstance() {
}

Battle2Client_SyncDropItemChange::Battle2Client_SyncDropItemChange(const Battle2Client_SyncDropItemChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Client_SyncDropItemChange::SharedCtor() {
  _cached_size_ = 0;
  uiobjid_ = 0u;
  iitemindex_ = 0;
  uiownerid_ = GOOGLE_ULONGLONG(0);
  uitakeobjid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Client_SyncDropItemChange::~Battle2Client_SyncDropItemChange() {
  SharedDtor();
}

void Battle2Client_SyncDropItemChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Battle2Client_SyncDropItemChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Client_SyncDropItemChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Client_SyncDropItemChange_descriptor_;
}

const Battle2Client_SyncDropItemChange& Battle2Client_SyncDropItemChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Client_SyncDropItemChange* Battle2Client_SyncDropItemChange::default_instance_ = NULL;

Battle2Client_SyncDropItemChange* Battle2Client_SyncDropItemChange::New() const {
  return new Battle2Client_SyncDropItemChange;
}

void Battle2Client_SyncDropItemChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uiobjid_ = 0u;
    iitemindex_ = 0;
    uiownerid_ = GOOGLE_ULONGLONG(0);
    uitakeobjid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Client_SyncDropItemChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uiObjId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiobjid_)));
          set_has_uiobjid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iItemIndex;
        break;
      }

      // required int32 iItemIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iItemIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iitemindex_)));
          set_has_iitemindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uiOwnerId;
        break;
      }

      // required uint64 uiOwnerId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiOwnerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uiownerid_)));
          set_has_uiownerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uiTakeObjId;
        break;
      }

      // required uint32 uiTakeObjId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiTakeObjId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uitakeobjid_)));
          set_has_uitakeobjid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Client_SyncDropItemChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uiObjId = 1;
  if (has_uiobjid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uiobjid(), output);
  }

  // required int32 iItemIndex = 2;
  if (has_iitemindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->iitemindex(), output);
  }

  // required uint64 uiOwnerId = 3;
  if (has_uiownerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->uiownerid(), output);
  }

  // required uint32 uiTakeObjId = 4;
  if (has_uitakeobjid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uitakeobjid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Client_SyncDropItemChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uiObjId = 1;
  if (has_uiobjid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uiobjid(), target);
  }

  // required int32 iItemIndex = 2;
  if (has_iitemindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->iitemindex(), target);
  }

  // required uint64 uiOwnerId = 3;
  if (has_uiownerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->uiownerid(), target);
  }

  // required uint32 uiTakeObjId = 4;
  if (has_uitakeobjid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uitakeobjid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Client_SyncDropItemChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uiObjId = 1;
    if (has_uiobjid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiobjid());
    }

    // required int32 iItemIndex = 2;
    if (has_iitemindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iitemindex());
    }

    // required uint64 uiOwnerId = 3;
    if (has_uiownerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uiownerid());
    }

    // required uint32 uiTakeObjId = 4;
    if (has_uitakeobjid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uitakeobjid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Client_SyncDropItemChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Client_SyncDropItemChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Client_SyncDropItemChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Client_SyncDropItemChange::MergeFrom(const Battle2Client_SyncDropItemChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uiobjid()) {
      set_uiobjid(from.uiobjid());
    }
    if (from.has_iitemindex()) {
      set_iitemindex(from.iitemindex());
    }
    if (from.has_uiownerid()) {
      set_uiownerid(from.uiownerid());
    }
    if (from.has_uitakeobjid()) {
      set_uitakeobjid(from.uitakeobjid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Client_SyncDropItemChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Client_SyncDropItemChange::CopyFrom(const Battle2Client_SyncDropItemChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Client_SyncDropItemChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Battle2Client_SyncDropItemChange::Swap(Battle2Client_SyncDropItemChange* other) {
  if (other != this) {
    std::swap(uiobjid_, other->uiobjid_);
    std::swap(iitemindex_, other->iitemindex_);
    std::swap(uiownerid_, other->uiownerid_);
    std::swap(uitakeobjid_, other->uitakeobjid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Client_SyncDropItemChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Client_SyncDropItemChange_descriptor_;
  metadata.reflection = Battle2Client_SyncDropItemChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Client2Battle_Ping::Client2Battle_Ping()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Client2Battle_Ping::InitAsDefaultInstance() {
}

Client2Battle_Ping::Client2Battle_Ping(const Client2Battle_Ping& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Client2Battle_Ping::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Client2Battle_Ping::~Client2Battle_Ping() {
  SharedDtor();
}

void Client2Battle_Ping::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Client2Battle_Ping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Client2Battle_Ping::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Client2Battle_Ping_descriptor_;
}

const Client2Battle_Ping& Client2Battle_Ping::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Client2Battle_Ping* Client2Battle_Ping::default_instance_ = NULL;

Client2Battle_Ping* Client2Battle_Ping::New() const {
  return new Client2Battle_Ping;
}

void Client2Battle_Ping::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Client2Battle_Ping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Client2Battle_Ping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Client2Battle_Ping::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Client2Battle_Ping::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Client2Battle_Ping::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Client2Battle_Ping* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Client2Battle_Ping*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Client2Battle_Ping::MergeFrom(const Client2Battle_Ping& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Client2Battle_Ping::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Client2Battle_Ping::CopyFrom(const Client2Battle_Ping& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Client2Battle_Ping::IsInitialized() const {

  return true;
}

void Client2Battle_Ping::Swap(Client2Battle_Ping* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Client2Battle_Ping::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Client2Battle_Ping_descriptor_;
  metadata.reflection = Client2Battle_Ping_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Client_Ping::kTimestampFieldNumber;
#endif  // !_MSC_VER

Battle2Client_Ping::Battle2Client_Ping()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Client_Ping::InitAsDefaultInstance() {
}

Battle2Client_Ping::Battle2Client_Ping(const Battle2Client_Ping& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Client_Ping::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Client_Ping::~Battle2Client_Ping() {
  SharedDtor();
}

void Battle2Client_Ping::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Battle2Client_Ping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Client_Ping::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Client_Ping_descriptor_;
}

const Battle2Client_Ping& Battle2Client_Ping::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Client_Ping* Battle2Client_Ping::default_instance_ = NULL;

Battle2Client_Ping* Battle2Client_Ping::New() const {
  return new Battle2Client_Ping;
}

void Battle2Client_Ping::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Client_Ping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Client_Ping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Client_Ping::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Client_Ping::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Client_Ping::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Client_Ping* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Client_Ping*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Client_Ping::MergeFrom(const Battle2Client_Ping& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Client_Ping::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Client_Ping::CopyFrom(const Battle2Client_Ping& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Client_Ping::IsInitialized() const {

  return true;
}

void Battle2Client_Ping::Swap(Battle2Client_Ping* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Client_Ping::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Client_Ping_descriptor_;
  metadata.reflection = Battle2Client_Ping_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Game2Battle_CreateMonster::kProIDFieldNumber;
const int Game2Battle_CreateMonster::kPtFieldNumber;
const int Game2Battle_CreateMonster::kDirFieldNumber;
const int Game2Battle_CreateMonster::kLayerFieldNumber;
const int Game2Battle_CreateMonster::kFromFieldNumber;
#endif  // !_MSC_VER

Game2Battle_CreateMonster::Game2Battle_CreateMonster()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Game2Battle_CreateMonster::InitAsDefaultInstance() {
  pt_ = const_cast< ::proto::message::Point3D*>(&::proto::message::Point3D::default_instance());
}

Game2Battle_CreateMonster::Game2Battle_CreateMonster(const Game2Battle_CreateMonster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Game2Battle_CreateMonster::SharedCtor() {
  _cached_size_ = 0;
  proid_ = 0u;
  pt_ = NULL;
  dir_ = 0;
  layer_ = 0;
  from_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Game2Battle_CreateMonster::~Game2Battle_CreateMonster() {
  SharedDtor();
}

void Game2Battle_CreateMonster::SharedDtor() {
  if (this != default_instance_) {
    delete pt_;
  }
}

void Game2Battle_CreateMonster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Game2Battle_CreateMonster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Game2Battle_CreateMonster_descriptor_;
}

const Game2Battle_CreateMonster& Game2Battle_CreateMonster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Game2Battle_CreateMonster* Game2Battle_CreateMonster::default_instance_ = NULL;

Game2Battle_CreateMonster* Game2Battle_CreateMonster::New() const {
  return new Game2Battle_CreateMonster;
}

void Game2Battle_CreateMonster::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proid_ = 0u;
    if (has_pt()) {
      if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
    }
    dir_ = 0;
    layer_ = 0;
    from_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Game2Battle_CreateMonster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ProID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proid_)));
          set_has_proid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pt;
        break;
      }

      // optional .proto.message.Point3D pt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_dir;
        break;
      }

      // optional float dir = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_layer;
        break;
      }

      // optional int32 layer = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_from;
        break;
      }

      // optional int32 from = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &from_)));
          set_has_from();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Game2Battle_CreateMonster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ProID = 1;
  if (has_proid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->proid(), output);
  }

  // optional .proto.message.Point3D pt = 2;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pt(), output);
  }

  // optional float dir = 3;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->dir(), output);
  }

  // optional int32 layer = 4;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->layer(), output);
  }

  // optional int32 from = 5;
  if (has_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->from(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Game2Battle_CreateMonster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ProID = 1;
  if (has_proid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->proid(), target);
  }

  // optional .proto.message.Point3D pt = 2;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pt(), target);
  }

  // optional float dir = 3;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->dir(), target);
  }

  // optional int32 layer = 4;
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->layer(), target);
  }

  // optional int32 from = 5;
  if (has_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->from(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Game2Battle_CreateMonster::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ProID = 1;
    if (has_proid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->proid());
    }

    // optional .proto.message.Point3D pt = 2;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

    // optional float dir = 3;
    if (has_dir()) {
      total_size += 1 + 4;
    }

    // optional int32 layer = 4;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layer());
    }

    // optional int32 from = 5;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->from());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Game2Battle_CreateMonster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Game2Battle_CreateMonster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Game2Battle_CreateMonster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Game2Battle_CreateMonster::MergeFrom(const Game2Battle_CreateMonster& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proid()) {
      set_proid(from.proid());
    }
    if (from.has_pt()) {
      mutable_pt()->::proto::message::Point3D::MergeFrom(from.pt());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_layer()) {
      set_layer(from.layer());
    }
    if (from.has_from()) {
      set_from(from.from());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Game2Battle_CreateMonster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Game2Battle_CreateMonster::CopyFrom(const Game2Battle_CreateMonster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game2Battle_CreateMonster::IsInitialized() const {

  return true;
}

void Game2Battle_CreateMonster::Swap(Game2Battle_CreateMonster* other) {
  if (other != this) {
    std::swap(proid_, other->proid_);
    std::swap(pt_, other->pt_);
    std::swap(dir_, other->dir_);
    std::swap(layer_, other->layer_);
    std::swap(from_, other->from_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Game2Battle_CreateMonster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Game2Battle_CreateMonster_descriptor_;
  metadata.reflection = Game2Battle_CreateMonster_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Client2Battle_ChangeAttackMode::kUiAttackModeFieldNumber;
#endif  // !_MSC_VER

Client2Battle_ChangeAttackMode::Client2Battle_ChangeAttackMode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Client2Battle_ChangeAttackMode::InitAsDefaultInstance() {
}

Client2Battle_ChangeAttackMode::Client2Battle_ChangeAttackMode(const Client2Battle_ChangeAttackMode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Client2Battle_ChangeAttackMode::SharedCtor() {
  _cached_size_ = 0;
  uiattackmode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Client2Battle_ChangeAttackMode::~Client2Battle_ChangeAttackMode() {
  SharedDtor();
}

void Client2Battle_ChangeAttackMode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Client2Battle_ChangeAttackMode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Client2Battle_ChangeAttackMode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Client2Battle_ChangeAttackMode_descriptor_;
}

const Client2Battle_ChangeAttackMode& Client2Battle_ChangeAttackMode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Client2Battle_ChangeAttackMode* Client2Battle_ChangeAttackMode::default_instance_ = NULL;

Client2Battle_ChangeAttackMode* Client2Battle_ChangeAttackMode::New() const {
  return new Client2Battle_ChangeAttackMode;
}

void Client2Battle_ChangeAttackMode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uiattackmode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Client2Battle_ChangeAttackMode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uiAttackMode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiattackmode_)));
          set_has_uiattackmode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Client2Battle_ChangeAttackMode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uiAttackMode = 1;
  if (has_uiattackmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uiattackmode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Client2Battle_ChangeAttackMode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uiAttackMode = 1;
  if (has_uiattackmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uiattackmode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Client2Battle_ChangeAttackMode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uiAttackMode = 1;
    if (has_uiattackmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiattackmode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Client2Battle_ChangeAttackMode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Client2Battle_ChangeAttackMode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Client2Battle_ChangeAttackMode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Client2Battle_ChangeAttackMode::MergeFrom(const Client2Battle_ChangeAttackMode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uiattackmode()) {
      set_uiattackmode(from.uiattackmode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Client2Battle_ChangeAttackMode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Client2Battle_ChangeAttackMode::CopyFrom(const Client2Battle_ChangeAttackMode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Client2Battle_ChangeAttackMode::IsInitialized() const {

  return true;
}

void Client2Battle_ChangeAttackMode::Swap(Client2Battle_ChangeAttackMode* other) {
  if (other != this) {
    std::swap(uiattackmode_, other->uiattackmode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Client2Battle_ChangeAttackMode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Client2Battle_ChangeAttackMode_descriptor_;
  metadata.reflection = Client2Battle_ChangeAttackMode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Client2Battle_Transfer::kUiTransferTableIdFieldNumber;
#endif  // !_MSC_VER

Client2Battle_Transfer::Client2Battle_Transfer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Client2Battle_Transfer::InitAsDefaultInstance() {
}

Client2Battle_Transfer::Client2Battle_Transfer(const Client2Battle_Transfer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Client2Battle_Transfer::SharedCtor() {
  _cached_size_ = 0;
  uitransfertableid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Client2Battle_Transfer::~Client2Battle_Transfer() {
  SharedDtor();
}

void Client2Battle_Transfer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Client2Battle_Transfer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Client2Battle_Transfer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Client2Battle_Transfer_descriptor_;
}

const Client2Battle_Transfer& Client2Battle_Transfer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Client2Battle_Transfer* Client2Battle_Transfer::default_instance_ = NULL;

Client2Battle_Transfer* Client2Battle_Transfer::New() const {
  return new Client2Battle_Transfer;
}

void Client2Battle_Transfer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uitransfertableid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Client2Battle_Transfer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uiTransferTableId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uitransfertableid_)));
          set_has_uitransfertableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Client2Battle_Transfer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uiTransferTableId = 1;
  if (has_uitransfertableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uitransfertableid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Client2Battle_Transfer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uiTransferTableId = 1;
  if (has_uitransfertableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uitransfertableid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Client2Battle_Transfer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uiTransferTableId = 1;
    if (has_uitransfertableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uitransfertableid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Client2Battle_Transfer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Client2Battle_Transfer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Client2Battle_Transfer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Client2Battle_Transfer::MergeFrom(const Client2Battle_Transfer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uitransfertableid()) {
      set_uitransfertableid(from.uitransfertableid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Client2Battle_Transfer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Client2Battle_Transfer::CopyFrom(const Client2Battle_Transfer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Client2Battle_Transfer::IsInitialized() const {

  return true;
}

void Client2Battle_Transfer::Swap(Client2Battle_Transfer* other) {
  if (other != this) {
    std::swap(uitransfertableid_, other->uitransfertableid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Client2Battle_Transfer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Client2Battle_Transfer_descriptor_;
  metadata.reflection = Client2Battle_Transfer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Client_Anchor::kUiObjIdFieldNumber;
#endif  // !_MSC_VER

Battle2Client_Anchor::Battle2Client_Anchor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Client_Anchor::InitAsDefaultInstance() {
}

Battle2Client_Anchor::Battle2Client_Anchor(const Battle2Client_Anchor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Client_Anchor::SharedCtor() {
  _cached_size_ = 0;
  uiobjid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Client_Anchor::~Battle2Client_Anchor() {
  SharedDtor();
}

void Battle2Client_Anchor::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Battle2Client_Anchor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Client_Anchor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Client_Anchor_descriptor_;
}

const Battle2Client_Anchor& Battle2Client_Anchor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Client_Anchor* Battle2Client_Anchor::default_instance_ = NULL;

Battle2Client_Anchor* Battle2Client_Anchor::New() const {
  return new Battle2Client_Anchor;
}

void Battle2Client_Anchor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uiobjid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Client_Anchor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uiObjId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiobjid_)));
          set_has_uiobjid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Client_Anchor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uiObjId = 1;
  if (has_uiobjid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uiobjid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Client_Anchor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uiObjId = 1;
  if (has_uiobjid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uiobjid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Client_Anchor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uiObjId = 1;
    if (has_uiobjid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiobjid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Client_Anchor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Client_Anchor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Client_Anchor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Client_Anchor::MergeFrom(const Battle2Client_Anchor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uiobjid()) {
      set_uiobjid(from.uiobjid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Client_Anchor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Client_Anchor::CopyFrom(const Battle2Client_Anchor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Client_Anchor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Battle2Client_Anchor::Swap(Battle2Client_Anchor* other) {
  if (other != this) {
    std::swap(uiobjid_, other->uiobjid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Client_Anchor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Client_Anchor_descriptor_;
  metadata.reflection = Battle2Client_Anchor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Client_UpdateHeadInfo::kInfoFieldNumber;
#endif  // !_MSC_VER

Battle2Client_UpdateHeadInfo::Battle2Client_UpdateHeadInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Client_UpdateHeadInfo::InitAsDefaultInstance() {
  info_ = const_cast< ::proto::message::BattleSingleHeadInfo*>(&::proto::message::BattleSingleHeadInfo::default_instance());
}

Battle2Client_UpdateHeadInfo::Battle2Client_UpdateHeadInfo(const Battle2Client_UpdateHeadInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Client_UpdateHeadInfo::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Client_UpdateHeadInfo::~Battle2Client_UpdateHeadInfo() {
  SharedDtor();
}

void Battle2Client_UpdateHeadInfo::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void Battle2Client_UpdateHeadInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Client_UpdateHeadInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Client_UpdateHeadInfo_descriptor_;
}

const Battle2Client_UpdateHeadInfo& Battle2Client_UpdateHeadInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Client_UpdateHeadInfo* Battle2Client_UpdateHeadInfo::default_instance_ = NULL;

Battle2Client_UpdateHeadInfo* Battle2Client_UpdateHeadInfo::New() const {
  return new Battle2Client_UpdateHeadInfo;
}

void Battle2Client_UpdateHeadInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::proto::message::BattleSingleHeadInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Client_UpdateHeadInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.message.BattleSingleHeadInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Client_UpdateHeadInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.message.BattleSingleHeadInfo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Client_UpdateHeadInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.message.BattleSingleHeadInfo info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Client_UpdateHeadInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.message.BattleSingleHeadInfo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Client_UpdateHeadInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Client_UpdateHeadInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Client_UpdateHeadInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Client_UpdateHeadInfo::MergeFrom(const Battle2Client_UpdateHeadInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::proto::message::BattleSingleHeadInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Client_UpdateHeadInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Client_UpdateHeadInfo::CopyFrom(const Battle2Client_UpdateHeadInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Client_UpdateHeadInfo::IsInitialized() const {

  return true;
}

void Battle2Client_UpdateHeadInfo::Swap(Battle2Client_UpdateHeadInfo* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Client_UpdateHeadInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Client_UpdateHeadInfo_descriptor_;
  metadata.reflection = Battle2Client_UpdateHeadInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Client_UpdateMercenaryRank::kUiObjIdFieldNumber;
const int Battle2Client_UpdateMercenaryRank::kRankingFieldNumber;
#endif  // !_MSC_VER

Battle2Client_UpdateMercenaryRank::Battle2Client_UpdateMercenaryRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Client_UpdateMercenaryRank::InitAsDefaultInstance() {
}

Battle2Client_UpdateMercenaryRank::Battle2Client_UpdateMercenaryRank(const Battle2Client_UpdateMercenaryRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Client_UpdateMercenaryRank::SharedCtor() {
  _cached_size_ = 0;
  uiobjid_ = 0u;
  ranking_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Client_UpdateMercenaryRank::~Battle2Client_UpdateMercenaryRank() {
  SharedDtor();
}

void Battle2Client_UpdateMercenaryRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Battle2Client_UpdateMercenaryRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Client_UpdateMercenaryRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Client_UpdateMercenaryRank_descriptor_;
}

const Battle2Client_UpdateMercenaryRank& Battle2Client_UpdateMercenaryRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Client_UpdateMercenaryRank* Battle2Client_UpdateMercenaryRank::default_instance_ = NULL;

Battle2Client_UpdateMercenaryRank* Battle2Client_UpdateMercenaryRank::New() const {
  return new Battle2Client_UpdateMercenaryRank;
}

void Battle2Client_UpdateMercenaryRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uiobjid_ = 0u;
    ranking_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Client_UpdateMercenaryRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uiObjId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiobjid_)));
          set_has_uiobjid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ranking;
        break;
      }

      // optional int32 ranking = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ranking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranking_)));
          set_has_ranking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Client_UpdateMercenaryRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uiObjId = 1;
  if (has_uiobjid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uiobjid(), output);
  }

  // optional int32 ranking = 2;
  if (has_ranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ranking(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Client_UpdateMercenaryRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uiObjId = 1;
  if (has_uiobjid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uiobjid(), target);
  }

  // optional int32 ranking = 2;
  if (has_ranking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ranking(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Client_UpdateMercenaryRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uiObjId = 1;
    if (has_uiobjid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiobjid());
    }

    // optional int32 ranking = 2;
    if (has_ranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranking());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Client_UpdateMercenaryRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Client_UpdateMercenaryRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Client_UpdateMercenaryRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Client_UpdateMercenaryRank::MergeFrom(const Battle2Client_UpdateMercenaryRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uiobjid()) {
      set_uiobjid(from.uiobjid());
    }
    if (from.has_ranking()) {
      set_ranking(from.ranking());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Client_UpdateMercenaryRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Client_UpdateMercenaryRank::CopyFrom(const Battle2Client_UpdateMercenaryRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Client_UpdateMercenaryRank::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Battle2Client_UpdateMercenaryRank::Swap(Battle2Client_UpdateMercenaryRank* other) {
  if (other != this) {
    std::swap(uiobjid_, other->uiobjid_);
    std::swap(ranking_, other->ranking_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Client_UpdateMercenaryRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Client_UpdateMercenaryRank_descriptor_;
  metadata.reflection = Battle2Client_UpdateMercenaryRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Client_TriggerRadius::kUiTriggerIdFieldNumber;
const int Battle2Client_TriggerRadius::kPtFieldNumber;
const int Battle2Client_TriggerRadius::kFRadiusFieldNumber;
#endif  // !_MSC_VER

Battle2Client_TriggerRadius::Battle2Client_TriggerRadius()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Client_TriggerRadius::InitAsDefaultInstance() {
  pt_ = const_cast< ::proto::message::Point3D*>(&::proto::message::Point3D::default_instance());
}

Battle2Client_TriggerRadius::Battle2Client_TriggerRadius(const Battle2Client_TriggerRadius& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Client_TriggerRadius::SharedCtor() {
  _cached_size_ = 0;
  uitriggerid_ = 0u;
  pt_ = NULL;
  fradius_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Client_TriggerRadius::~Battle2Client_TriggerRadius() {
  SharedDtor();
}

void Battle2Client_TriggerRadius::SharedDtor() {
  if (this != default_instance_) {
    delete pt_;
  }
}

void Battle2Client_TriggerRadius::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Client_TriggerRadius::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Client_TriggerRadius_descriptor_;
}

const Battle2Client_TriggerRadius& Battle2Client_TriggerRadius::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Client_TriggerRadius* Battle2Client_TriggerRadius::default_instance_ = NULL;

Battle2Client_TriggerRadius* Battle2Client_TriggerRadius::New() const {
  return new Battle2Client_TriggerRadius;
}

void Battle2Client_TriggerRadius::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uitriggerid_ = 0u;
    if (has_pt()) {
      if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
    }
    fradius_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Client_TriggerRadius::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uiTriggerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uitriggerid_)));
          set_has_uitriggerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pt;
        break;
      }

      // optional .proto.message.Point3D pt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_fRadius;
        break;
      }

      // optional float fRadius = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fRadius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fradius_)));
          set_has_fradius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Client_TriggerRadius::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uiTriggerId = 1;
  if (has_uitriggerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uitriggerid(), output);
  }

  // optional .proto.message.Point3D pt = 2;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pt(), output);
  }

  // optional float fRadius = 3;
  if (has_fradius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->fradius(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Client_TriggerRadius::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uiTriggerId = 1;
  if (has_uitriggerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uitriggerid(), target);
  }

  // optional .proto.message.Point3D pt = 2;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pt(), target);
  }

  // optional float fRadius = 3;
  if (has_fradius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->fradius(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Client_TriggerRadius::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uiTriggerId = 1;
    if (has_uitriggerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uitriggerid());
    }

    // optional .proto.message.Point3D pt = 2;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

    // optional float fRadius = 3;
    if (has_fradius()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Client_TriggerRadius::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Client_TriggerRadius* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Client_TriggerRadius*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Client_TriggerRadius::MergeFrom(const Battle2Client_TriggerRadius& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uitriggerid()) {
      set_uitriggerid(from.uitriggerid());
    }
    if (from.has_pt()) {
      mutable_pt()->::proto::message::Point3D::MergeFrom(from.pt());
    }
    if (from.has_fradius()) {
      set_fradius(from.fradius());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Client_TriggerRadius::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Client_TriggerRadius::CopyFrom(const Battle2Client_TriggerRadius& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Client_TriggerRadius::IsInitialized() const {

  return true;
}

void Battle2Client_TriggerRadius::Swap(Battle2Client_TriggerRadius* other) {
  if (other != this) {
    std::swap(uitriggerid_, other->uitriggerid_);
    std::swap(pt_, other->pt_);
    std::swap(fradius_, other->fradius_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Client_TriggerRadius::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Client_TriggerRadius_descriptor_;
  metadata.reflection = Battle2Client_TriggerRadius_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Client_ScenePlayerNum::kUiSceneIdFieldNumber;
const int Battle2Client_ScenePlayerNum::kUiCurNumFieldNumber;
const int Battle2Client_ScenePlayerNum::kUiMaxNumFieldNumber;
#endif  // !_MSC_VER

Battle2Client_ScenePlayerNum::Battle2Client_ScenePlayerNum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Client_ScenePlayerNum::InitAsDefaultInstance() {
}

Battle2Client_ScenePlayerNum::Battle2Client_ScenePlayerNum(const Battle2Client_ScenePlayerNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Client_ScenePlayerNum::SharedCtor() {
  _cached_size_ = 0;
  uisceneid_ = 0u;
  uicurnum_ = 0u;
  uimaxnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Client_ScenePlayerNum::~Battle2Client_ScenePlayerNum() {
  SharedDtor();
}

void Battle2Client_ScenePlayerNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Battle2Client_ScenePlayerNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Client_ScenePlayerNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Client_ScenePlayerNum_descriptor_;
}

const Battle2Client_ScenePlayerNum& Battle2Client_ScenePlayerNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Client_ScenePlayerNum* Battle2Client_ScenePlayerNum::default_instance_ = NULL;

Battle2Client_ScenePlayerNum* Battle2Client_ScenePlayerNum::New() const {
  return new Battle2Client_ScenePlayerNum;
}

void Battle2Client_ScenePlayerNum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uisceneid_ = 0u;
    uicurnum_ = 0u;
    uimaxnum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Client_ScenePlayerNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uiSceneId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uisceneid_)));
          set_has_uisceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiCurNum;
        break;
      }

      // optional uint32 uiCurNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiCurNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uicurnum_)));
          set_has_uicurnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uiMaxNum;
        break;
      }

      // optional uint32 uiMaxNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiMaxNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uimaxnum_)));
          set_has_uimaxnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Client_ScenePlayerNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uiSceneId = 1;
  if (has_uisceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uisceneid(), output);
  }

  // optional uint32 uiCurNum = 2;
  if (has_uicurnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uicurnum(), output);
  }

  // optional uint32 uiMaxNum = 3;
  if (has_uimaxnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uimaxnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Client_ScenePlayerNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uiSceneId = 1;
  if (has_uisceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uisceneid(), target);
  }

  // optional uint32 uiCurNum = 2;
  if (has_uicurnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uicurnum(), target);
  }

  // optional uint32 uiMaxNum = 3;
  if (has_uimaxnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uimaxnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Client_ScenePlayerNum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uiSceneId = 1;
    if (has_uisceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uisceneid());
    }

    // optional uint32 uiCurNum = 2;
    if (has_uicurnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uicurnum());
    }

    // optional uint32 uiMaxNum = 3;
    if (has_uimaxnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uimaxnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Client_ScenePlayerNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Client_ScenePlayerNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Client_ScenePlayerNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Client_ScenePlayerNum::MergeFrom(const Battle2Client_ScenePlayerNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uisceneid()) {
      set_uisceneid(from.uisceneid());
    }
    if (from.has_uicurnum()) {
      set_uicurnum(from.uicurnum());
    }
    if (from.has_uimaxnum()) {
      set_uimaxnum(from.uimaxnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Client_ScenePlayerNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Client_ScenePlayerNum::CopyFrom(const Battle2Client_ScenePlayerNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Client_ScenePlayerNum::IsInitialized() const {

  return true;
}

void Battle2Client_ScenePlayerNum::Swap(Battle2Client_ScenePlayerNum* other) {
  if (other != this) {
    std::swap(uisceneid_, other->uisceneid_);
    std::swap(uicurnum_, other->uicurnum_);
    std::swap(uimaxnum_, other->uimaxnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Client_ScenePlayerNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Client_ScenePlayerNum_descriptor_;
  metadata.reflection = Battle2Client_ScenePlayerNum_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Client_GradeDataChanged::kGradeFieldNumber;
const int Battle2Client_GradeDataChanged::kDataFieldNumber;
#endif  // !_MSC_VER

Battle2Client_GradeDataChanged::Battle2Client_GradeDataChanged()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Client_GradeDataChanged::InitAsDefaultInstance() {
  data_ = const_cast< ::proto::message::IDNum*>(&::proto::message::IDNum::default_instance());
}

Battle2Client_GradeDataChanged::Battle2Client_GradeDataChanged(const Battle2Client_GradeDataChanged& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Client_GradeDataChanged::SharedCtor() {
  _cached_size_ = 0;
  grade_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Client_GradeDataChanged::~Battle2Client_GradeDataChanged() {
  SharedDtor();
}

void Battle2Client_GradeDataChanged::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void Battle2Client_GradeDataChanged::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Client_GradeDataChanged::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Client_GradeDataChanged_descriptor_;
}

const Battle2Client_GradeDataChanged& Battle2Client_GradeDataChanged::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Client_GradeDataChanged* Battle2Client_GradeDataChanged::default_instance_ = NULL;

Battle2Client_GradeDataChanged* Battle2Client_GradeDataChanged::New() const {
  return new Battle2Client_GradeDataChanged;
}

void Battle2Client_GradeDataChanged::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    grade_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::proto::message::IDNum::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Client_GradeDataChanged::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 grade = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .proto.message.IDNum data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Client_GradeDataChanged::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 grade = 1;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->grade(), output);
  }

  // optional .proto.message.IDNum data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Client_GradeDataChanged::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 grade = 1;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->grade(), target);
  }

  // optional .proto.message.IDNum data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Client_GradeDataChanged::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 grade = 1;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

    // optional .proto.message.IDNum data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Client_GradeDataChanged::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Client_GradeDataChanged* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Client_GradeDataChanged*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Client_GradeDataChanged::MergeFrom(const Battle2Client_GradeDataChanged& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_data()) {
      mutable_data()->::proto::message::IDNum::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Client_GradeDataChanged::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Client_GradeDataChanged::CopyFrom(const Battle2Client_GradeDataChanged& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Client_GradeDataChanged::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Battle2Client_GradeDataChanged::Swap(Battle2Client_GradeDataChanged* other) {
  if (other != this) {
    std::swap(grade_, other->grade_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Client_GradeDataChanged::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Client_GradeDataChanged_descriptor_;
  metadata.reflection = Battle2Client_GradeDataChanged_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Client_SyncMonsterOnwer::kMonsteridFieldNumber;
const int Battle2Client_SyncMonsterOnwer::kOwnerFieldNumber;
#endif  // !_MSC_VER

Battle2Client_SyncMonsterOnwer::Battle2Client_SyncMonsterOnwer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Client_SyncMonsterOnwer::InitAsDefaultInstance() {
  owner_ = const_cast< ::proto::message::OwnerInfo*>(&::proto::message::OwnerInfo::default_instance());
}

Battle2Client_SyncMonsterOnwer::Battle2Client_SyncMonsterOnwer(const Battle2Client_SyncMonsterOnwer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Client_SyncMonsterOnwer::SharedCtor() {
  _cached_size_ = 0;
  monsterid_ = 0u;
  owner_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Client_SyncMonsterOnwer::~Battle2Client_SyncMonsterOnwer() {
  SharedDtor();
}

void Battle2Client_SyncMonsterOnwer::SharedDtor() {
  if (this != default_instance_) {
    delete owner_;
  }
}

void Battle2Client_SyncMonsterOnwer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Client_SyncMonsterOnwer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Client_SyncMonsterOnwer_descriptor_;
}

const Battle2Client_SyncMonsterOnwer& Battle2Client_SyncMonsterOnwer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Client_SyncMonsterOnwer* Battle2Client_SyncMonsterOnwer::default_instance_ = NULL;

Battle2Client_SyncMonsterOnwer* Battle2Client_SyncMonsterOnwer::New() const {
  return new Battle2Client_SyncMonsterOnwer;
}

void Battle2Client_SyncMonsterOnwer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    monsterid_ = 0u;
    if (has_owner()) {
      if (owner_ != NULL) owner_->::proto::message::OwnerInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Client_SyncMonsterOnwer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 monsterid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monsterid_)));
          set_has_monsterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_owner;
        break;
      }

      // optional .proto.message.OwnerInfo owner = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_owner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_owner()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Client_SyncMonsterOnwer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 monsterid = 1;
  if (has_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->monsterid(), output);
  }

  // optional .proto.message.OwnerInfo owner = 2;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->owner(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Client_SyncMonsterOnwer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 monsterid = 1;
  if (has_monsterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->monsterid(), target);
  }

  // optional .proto.message.OwnerInfo owner = 2;
  if (has_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->owner(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Client_SyncMonsterOnwer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 monsterid = 1;
    if (has_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monsterid());
    }

    // optional .proto.message.OwnerInfo owner = 2;
    if (has_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->owner());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Client_SyncMonsterOnwer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Client_SyncMonsterOnwer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Client_SyncMonsterOnwer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Client_SyncMonsterOnwer::MergeFrom(const Battle2Client_SyncMonsterOnwer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_monsterid()) {
      set_monsterid(from.monsterid());
    }
    if (from.has_owner()) {
      mutable_owner()->::proto::message::OwnerInfo::MergeFrom(from.owner());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Client_SyncMonsterOnwer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Client_SyncMonsterOnwer::CopyFrom(const Battle2Client_SyncMonsterOnwer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Client_SyncMonsterOnwer::IsInitialized() const {

  return true;
}

void Battle2Client_SyncMonsterOnwer::Swap(Battle2Client_SyncMonsterOnwer* other) {
  if (other != this) {
    std::swap(monsterid_, other->monsterid_);
    std::swap(owner_, other->owner_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Client_SyncMonsterOnwer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Client_SyncMonsterOnwer_descriptor_;
  metadata.reflection = Battle2Client_SyncMonsterOnwer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Client_SafeAreaStatus::kStatusFieldNumber;
#endif  // !_MSC_VER

Battle2Client_SafeAreaStatus::Battle2Client_SafeAreaStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Client_SafeAreaStatus::InitAsDefaultInstance() {
}

Battle2Client_SafeAreaStatus::Battle2Client_SafeAreaStatus(const Battle2Client_SafeAreaStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Client_SafeAreaStatus::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Client_SafeAreaStatus::~Battle2Client_SafeAreaStatus() {
  SharedDtor();
}

void Battle2Client_SafeAreaStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Battle2Client_SafeAreaStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Client_SafeAreaStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Client_SafeAreaStatus_descriptor_;
}

const Battle2Client_SafeAreaStatus& Battle2Client_SafeAreaStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Client_SafeAreaStatus* Battle2Client_SafeAreaStatus::default_instance_ = NULL;

Battle2Client_SafeAreaStatus* Battle2Client_SafeAreaStatus::New() const {
  return new Battle2Client_SafeAreaStatus;
}

void Battle2Client_SafeAreaStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Client_SafeAreaStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Client_SafeAreaStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Client_SafeAreaStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Client_SafeAreaStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Client_SafeAreaStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Client_SafeAreaStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Client_SafeAreaStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Client_SafeAreaStatus::MergeFrom(const Battle2Client_SafeAreaStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Client_SafeAreaStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Client_SafeAreaStatus::CopyFrom(const Battle2Client_SafeAreaStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Client_SafeAreaStatus::IsInitialized() const {

  return true;
}

void Battle2Client_SafeAreaStatus::Swap(Battle2Client_SafeAreaStatus* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Client_SafeAreaStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Client_SafeAreaStatus_descriptor_;
  metadata.reflection = Battle2Client_SafeAreaStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Client_ServerMove::kPtFieldNumber;
const int Battle2Client_ServerMove::kDirFieldNumber;
const int Battle2Client_ServerMove::kSpeedFieldNumber;
#endif  // !_MSC_VER

Battle2Client_ServerMove::Battle2Client_ServerMove()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Client_ServerMove::InitAsDefaultInstance() {
  pt_ = const_cast< ::proto::message::Point3D*>(&::proto::message::Point3D::default_instance());
}

Battle2Client_ServerMove::Battle2Client_ServerMove(const Battle2Client_ServerMove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Client_ServerMove::SharedCtor() {
  _cached_size_ = 0;
  pt_ = NULL;
  dir_ = 0;
  speed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Client_ServerMove::~Battle2Client_ServerMove() {
  SharedDtor();
}

void Battle2Client_ServerMove::SharedDtor() {
  if (this != default_instance_) {
    delete pt_;
  }
}

void Battle2Client_ServerMove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Client_ServerMove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Client_ServerMove_descriptor_;
}

const Battle2Client_ServerMove& Battle2Client_ServerMove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Client_ServerMove* Battle2Client_ServerMove::default_instance_ = NULL;

Battle2Client_ServerMove* Battle2Client_ServerMove::New() const {
  return new Battle2Client_ServerMove;
}

void Battle2Client_ServerMove::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pt()) {
      if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
    }
    dir_ = 0;
    speed_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Client_ServerMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.message.Point3D pt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_dir;
        break;
      }

      // required float dir = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_speed;
        break;
      }

      // optional float speed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Client_ServerMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .proto.message.Point3D pt = 1;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pt(), output);
  }

  // required float dir = 2;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->dir(), output);
  }

  // optional float speed = 3;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->speed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Client_ServerMove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .proto.message.Point3D pt = 1;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pt(), target);
  }

  // required float dir = 2;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->dir(), target);
  }

  // optional float speed = 3;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->speed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Client_ServerMove::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto.message.Point3D pt = 1;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

    // required float dir = 2;
    if (has_dir()) {
      total_size += 1 + 4;
    }

    // optional float speed = 3;
    if (has_speed()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Client_ServerMove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Client_ServerMove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Client_ServerMove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Client_ServerMove::MergeFrom(const Battle2Client_ServerMove& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pt()) {
      mutable_pt()->::proto::message::Point3D::MergeFrom(from.pt());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Client_ServerMove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Client_ServerMove::CopyFrom(const Battle2Client_ServerMove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Client_ServerMove::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Battle2Client_ServerMove::Swap(Battle2Client_ServerMove* other) {
  if (other != this) {
    std::swap(pt_, other->pt_);
    std::swap(dir_, other->dir_);
    std::swap(speed_, other->speed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Client_ServerMove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Client_ServerMove_descriptor_;
  metadata.reflection = Battle2Client_ServerMove_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Client_PlayerDie::kKillerNameFieldNumber;
#endif  // !_MSC_VER

Battle2Client_PlayerDie::Battle2Client_PlayerDie()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Client_PlayerDie::InitAsDefaultInstance() {
}

Battle2Client_PlayerDie::Battle2Client_PlayerDie(const Battle2Client_PlayerDie& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Client_PlayerDie::SharedCtor() {
  _cached_size_ = 0;
  killername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Client_PlayerDie::~Battle2Client_PlayerDie() {
  SharedDtor();
}

void Battle2Client_PlayerDie::SharedDtor() {
  if (killername_ != &::google::protobuf::internal::kEmptyString) {
    delete killername_;
  }
  if (this != default_instance_) {
  }
}

void Battle2Client_PlayerDie::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Client_PlayerDie::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Client_PlayerDie_descriptor_;
}

const Battle2Client_PlayerDie& Battle2Client_PlayerDie::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Client_PlayerDie* Battle2Client_PlayerDie::default_instance_ = NULL;

Battle2Client_PlayerDie* Battle2Client_PlayerDie::New() const {
  return new Battle2Client_PlayerDie;
}

void Battle2Client_PlayerDie::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_killername()) {
      if (killername_ != &::google::protobuf::internal::kEmptyString) {
        killername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Client_PlayerDie::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string killerName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_killername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->killername().data(), this->killername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Client_PlayerDie::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string killerName = 1;
  if (has_killername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->killername().data(), this->killername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->killername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Client_PlayerDie::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string killerName = 1;
  if (has_killername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->killername().data(), this->killername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->killername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Client_PlayerDie::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string killerName = 1;
    if (has_killername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->killername());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Client_PlayerDie::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Client_PlayerDie* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Client_PlayerDie*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Client_PlayerDie::MergeFrom(const Battle2Client_PlayerDie& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_killername()) {
      set_killername(from.killername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Client_PlayerDie::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Client_PlayerDie::CopyFrom(const Battle2Client_PlayerDie& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Client_PlayerDie::IsInitialized() const {

  return true;
}

void Battle2Client_PlayerDie::Swap(Battle2Client_PlayerDie* other) {
  if (other != this) {
    std::swap(killername_, other->killername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Client_PlayerDie::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Client_PlayerDie_descriptor_;
  metadata.reflection = Battle2Client_PlayerDie_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Client_MonsterCountChanged::kCountFieldNumber;
const int Battle2Client_MonsterCountChanged::kMonstersFieldNumber;
#endif  // !_MSC_VER

Battle2Client_MonsterCountChanged::Battle2Client_MonsterCountChanged()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Client_MonsterCountChanged::InitAsDefaultInstance() {
}

Battle2Client_MonsterCountChanged::Battle2Client_MonsterCountChanged(const Battle2Client_MonsterCountChanged& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Client_MonsterCountChanged::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Client_MonsterCountChanged::~Battle2Client_MonsterCountChanged() {
  SharedDtor();
}

void Battle2Client_MonsterCountChanged::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Battle2Client_MonsterCountChanged::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Client_MonsterCountChanged::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Client_MonsterCountChanged_descriptor_;
}

const Battle2Client_MonsterCountChanged& Battle2Client_MonsterCountChanged::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Client_MonsterCountChanged* Battle2Client_MonsterCountChanged::default_instance_ = NULL;

Battle2Client_MonsterCountChanged* Battle2Client_MonsterCountChanged::New() const {
  return new Battle2Client_MonsterCountChanged;
}

void Battle2Client_MonsterCountChanged::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0u;
  }
  monsters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Client_MonsterCountChanged::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_monsters;
        break;
      }

      // repeated .proto.message.IDNum monsters = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monsters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_monsters;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Client_MonsterCountChanged::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }

  // repeated .proto.message.IDNum monsters = 2;
  for (int i = 0; i < this->monsters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->monsters(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Client_MonsterCountChanged::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count(), target);
  }

  // repeated .proto.message.IDNum monsters = 2;
  for (int i = 0; i < this->monsters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->monsters(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Client_MonsterCountChanged::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  // repeated .proto.message.IDNum monsters = 2;
  total_size += 1 * this->monsters_size();
  for (int i = 0; i < this->monsters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsters(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Client_MonsterCountChanged::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Client_MonsterCountChanged* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Client_MonsterCountChanged*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Client_MonsterCountChanged::MergeFrom(const Battle2Client_MonsterCountChanged& from) {
  GOOGLE_CHECK_NE(&from, this);
  monsters_.MergeFrom(from.monsters_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Client_MonsterCountChanged::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Client_MonsterCountChanged::CopyFrom(const Battle2Client_MonsterCountChanged& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Client_MonsterCountChanged::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Battle2Client_MonsterCountChanged::Swap(Battle2Client_MonsterCountChanged* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    monsters_.Swap(&other->monsters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Client_MonsterCountChanged::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Client_MonsterCountChanged_descriptor_;
  metadata.reflection = Battle2Client_MonsterCountChanged_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Client_AckTBPlayerInfo::kIdFieldNumber;
const int Battle2Client_AckTBPlayerInfo::kJointimeFieldNumber;
const int Battle2Client_AckTBPlayerInfo::kOvertimeFieldNumber;
#endif  // !_MSC_VER

Battle2Client_AckTBPlayerInfo::Battle2Client_AckTBPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Client_AckTBPlayerInfo::InitAsDefaultInstance() {
}

Battle2Client_AckTBPlayerInfo::Battle2Client_AckTBPlayerInfo(const Battle2Client_AckTBPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Client_AckTBPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  jointime_ = 0u;
  overtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Client_AckTBPlayerInfo::~Battle2Client_AckTBPlayerInfo() {
  SharedDtor();
}

void Battle2Client_AckTBPlayerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Battle2Client_AckTBPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Client_AckTBPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Client_AckTBPlayerInfo_descriptor_;
}

const Battle2Client_AckTBPlayerInfo& Battle2Client_AckTBPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Client_AckTBPlayerInfo* Battle2Client_AckTBPlayerInfo::default_instance_ = NULL;

Battle2Client_AckTBPlayerInfo* Battle2Client_AckTBPlayerInfo::New() const {
  return new Battle2Client_AckTBPlayerInfo;
}

void Battle2Client_AckTBPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    jointime_ = 0u;
    overtime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Client_AckTBPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_jointime;
        break;
      }

      // optional uint32 jointime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jointime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jointime_)));
          set_has_jointime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_overtime;
        break;
      }

      // optional uint32 overtime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_overtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &overtime_)));
          set_has_overtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Client_AckTBPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 jointime = 2;
  if (has_jointime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->jointime(), output);
  }

  // optional uint32 overtime = 3;
  if (has_overtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->overtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Client_AckTBPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 jointime = 2;
  if (has_jointime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->jointime(), target);
  }

  // optional uint32 overtime = 3;
  if (has_overtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->overtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Client_AckTBPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 jointime = 2;
    if (has_jointime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jointime());
    }

    // optional uint32 overtime = 3;
    if (has_overtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->overtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Client_AckTBPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Client_AckTBPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Client_AckTBPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Client_AckTBPlayerInfo::MergeFrom(const Battle2Client_AckTBPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_jointime()) {
      set_jointime(from.jointime());
    }
    if (from.has_overtime()) {
      set_overtime(from.overtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Client_AckTBPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Client_AckTBPlayerInfo::CopyFrom(const Battle2Client_AckTBPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Client_AckTBPlayerInfo::IsInitialized() const {

  return true;
}

void Battle2Client_AckTBPlayerInfo::Swap(Battle2Client_AckTBPlayerInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(jointime_, other->jointime_);
    std::swap(overtime_, other->overtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Client_AckTBPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Client_AckTBPlayerInfo_descriptor_;
  metadata.reflection = Battle2Client_AckTBPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Client_SyncSceneObjDisappear::kObjsFieldNumber;
#endif  // !_MSC_VER

Battle2Client_SyncSceneObjDisappear::Battle2Client_SyncSceneObjDisappear()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Client_SyncSceneObjDisappear::InitAsDefaultInstance() {
}

Battle2Client_SyncSceneObjDisappear::Battle2Client_SyncSceneObjDisappear(const Battle2Client_SyncSceneObjDisappear& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Client_SyncSceneObjDisappear::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Client_SyncSceneObjDisappear::~Battle2Client_SyncSceneObjDisappear() {
  SharedDtor();
}

void Battle2Client_SyncSceneObjDisappear::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Battle2Client_SyncSceneObjDisappear::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Client_SyncSceneObjDisappear::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Client_SyncSceneObjDisappear_descriptor_;
}

const Battle2Client_SyncSceneObjDisappear& Battle2Client_SyncSceneObjDisappear::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Client_SyncSceneObjDisappear* Battle2Client_SyncSceneObjDisappear::default_instance_ = NULL;

Battle2Client_SyncSceneObjDisappear* Battle2Client_SyncSceneObjDisappear::New() const {
  return new Battle2Client_SyncSceneObjDisappear;
}

void Battle2Client_SyncSceneObjDisappear::Clear() {
  objs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Client_SyncSceneObjDisappear::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.Battle2Client_SyncObjDisappear objs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_objs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_objs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_objs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Client_SyncSceneObjDisappear::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.Battle2Client_SyncObjDisappear objs = 1;
  for (int i = 0; i < this->objs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->objs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Client_SyncSceneObjDisappear::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.Battle2Client_SyncObjDisappear objs = 1;
  for (int i = 0; i < this->objs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->objs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Client_SyncSceneObjDisappear::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.Battle2Client_SyncObjDisappear objs = 1;
  total_size += 1 * this->objs_size();
  for (int i = 0; i < this->objs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->objs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Client_SyncSceneObjDisappear::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Client_SyncSceneObjDisappear* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Client_SyncSceneObjDisappear*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Client_SyncSceneObjDisappear::MergeFrom(const Battle2Client_SyncSceneObjDisappear& from) {
  GOOGLE_CHECK_NE(&from, this);
  objs_.MergeFrom(from.objs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Client_SyncSceneObjDisappear::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Client_SyncSceneObjDisappear::CopyFrom(const Battle2Client_SyncSceneObjDisappear& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Client_SyncSceneObjDisappear::IsInitialized() const {

  for (int i = 0; i < objs_size(); i++) {
    if (!this->objs(i).IsInitialized()) return false;
  }
  return true;
}

void Battle2Client_SyncSceneObjDisappear::Swap(Battle2Client_SyncSceneObjDisappear* other) {
  if (other != this) {
    objs_.Swap(&other->objs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Client_SyncSceneObjDisappear::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Client_SyncSceneObjDisappear_descriptor_;
  metadata.reflection = Battle2Client_SyncSceneObjDisappear_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Client_SyncSceneObjAppear::kMonstersFieldNumber;
const int Battle2Client_SyncSceneObjAppear::kPlayersFieldNumber;
const int Battle2Client_SyncSceneObjAppear::kDropItemsFieldNumber;
const int Battle2Client_SyncSceneObjAppear::kMercenarysFieldNumber;
#endif  // !_MSC_VER

Battle2Client_SyncSceneObjAppear::Battle2Client_SyncSceneObjAppear()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Client_SyncSceneObjAppear::InitAsDefaultInstance() {
}

Battle2Client_SyncSceneObjAppear::Battle2Client_SyncSceneObjAppear(const Battle2Client_SyncSceneObjAppear& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Client_SyncSceneObjAppear::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Client_SyncSceneObjAppear::~Battle2Client_SyncSceneObjAppear() {
  SharedDtor();
}

void Battle2Client_SyncSceneObjAppear::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Battle2Client_SyncSceneObjAppear::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Client_SyncSceneObjAppear::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Client_SyncSceneObjAppear_descriptor_;
}

const Battle2Client_SyncSceneObjAppear& Battle2Client_SyncSceneObjAppear::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Battle2Client_SyncSceneObjAppear* Battle2Client_SyncSceneObjAppear::default_instance_ = NULL;

Battle2Client_SyncSceneObjAppear* Battle2Client_SyncSceneObjAppear::New() const {
  return new Battle2Client_SyncSceneObjAppear;
}

void Battle2Client_SyncSceneObjAppear::Clear() {
  monsters_.Clear();
  players_.Clear();
  drop_items_.Clear();
  mercenarys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Client_SyncSceneObjAppear::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.Battle2Client_SyncMonsterAppear monsters = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monsters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_monsters;
        if (input->ExpectTag(18)) goto parse_players;
        break;
      }

      // repeated .proto.message.Battle2Client_SyncPlayerAppear players = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_players;
        if (input->ExpectTag(26)) goto parse_drop_items;
        break;
      }

      // repeated .proto.message.Battle2Client_SyncDropItemAppear drop_items = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_drop_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_drop_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_drop_items;
        if (input->ExpectTag(34)) goto parse_mercenarys;
        break;
      }

      // repeated .proto.message.Battle2Client_SyncMercenaryAppear mercenarys = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mercenarys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mercenarys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_mercenarys;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Client_SyncSceneObjAppear::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.Battle2Client_SyncMonsterAppear monsters = 1;
  for (int i = 0; i < this->monsters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->monsters(i), output);
  }

  // repeated .proto.message.Battle2Client_SyncPlayerAppear players = 2;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->players(i), output);
  }

  // repeated .proto.message.Battle2Client_SyncDropItemAppear drop_items = 3;
  for (int i = 0; i < this->drop_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->drop_items(i), output);
  }

  // repeated .proto.message.Battle2Client_SyncMercenaryAppear mercenarys = 4;
  for (int i = 0; i < this->mercenarys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->mercenarys(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Client_SyncSceneObjAppear::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.Battle2Client_SyncMonsterAppear monsters = 1;
  for (int i = 0; i < this->monsters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->monsters(i), target);
  }

  // repeated .proto.message.Battle2Client_SyncPlayerAppear players = 2;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->players(i), target);
  }

  // repeated .proto.message.Battle2Client_SyncDropItemAppear drop_items = 3;
  for (int i = 0; i < this->drop_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->drop_items(i), target);
  }

  // repeated .proto.message.Battle2Client_SyncMercenaryAppear mercenarys = 4;
  for (int i = 0; i < this->mercenarys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->mercenarys(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Client_SyncSceneObjAppear::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.Battle2Client_SyncMonsterAppear monsters = 1;
  total_size += 1 * this->monsters_size();
  for (int i = 0; i < this->monsters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsters(i));
  }

  // repeated .proto.message.Battle2Client_SyncPlayerAppear players = 2;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  // repeated .proto.message.Battle2Client_SyncDropItemAppear drop_items = 3;
  total_size += 1 * this->drop_items_size();
  for (int i = 0; i < this->drop_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->drop_items(i));
  }

  // repeated .proto.message.Battle2Client_SyncMercenaryAppear mercenarys = 4;
  total_size += 1 * this->mercenarys_size();
  for (int i = 0; i < this->mercenarys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mercenarys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Client_SyncSceneObjAppear::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Client_SyncSceneObjAppear* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Client_SyncSceneObjAppear*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Client_SyncSceneObjAppear::MergeFrom(const Battle2Client_SyncSceneObjAppear& from) {
  GOOGLE_CHECK_NE(&from, this);
  monsters_.MergeFrom(from.monsters_);
  players_.MergeFrom(from.players_);
  drop_items_.MergeFrom(from.drop_items_);
  mercenarys_.MergeFrom(from.mercenarys_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Client_SyncSceneObjAppear::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Client_SyncSceneObjAppear::CopyFrom(const Battle2Client_SyncSceneObjAppear& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Client_SyncSceneObjAppear::IsInitialized() const {

  for (int i = 0; i < monsters_size(); i++) {
    if (!this->monsters(i).IsInitialized()) return false;
  }
  for (int i = 0; i < players_size(); i++) {
    if (!this->players(i).IsInitialized()) return false;
  }
  for (int i = 0; i < drop_items_size(); i++) {
    if (!this->drop_items(i).IsInitialized()) return false;
  }
  for (int i = 0; i < mercenarys_size(); i++) {
    if (!this->mercenarys(i).IsInitialized()) return false;
  }
  return true;
}

void Battle2Client_SyncSceneObjAppear::Swap(Battle2Client_SyncSceneObjAppear* other) {
  if (other != this) {
    monsters_.Swap(&other->monsters_);
    players_.Swap(&other->players_);
    drop_items_.Swap(&other->drop_items_);
    mercenarys_.Swap(&other->mercenarys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Client_SyncSceneObjAppear::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Client_SyncSceneObjAppear_descriptor_;
  metadata.reflection = Battle2Client_SyncSceneObjAppear_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

// @@protoc_insertion_point(global_scope)
