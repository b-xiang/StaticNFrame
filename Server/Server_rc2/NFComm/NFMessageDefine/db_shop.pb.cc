// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db_shop.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "db_shop.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

namespace {

const ::google::protobuf::Descriptor* ShopInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShopInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBShopItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBShopItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBShopIntegral_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBShopIntegral_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_db_5fshop_2eproto() {
  protobuf_AddDesc_db_5fshop_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "db_shop.proto");
  GOOGLE_CHECK(file != NULL);
  ShopInfo_descriptor_ = file->message_type(0);
  static const int ShopInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopInfo, shop_item_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopInfo, mall_item_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopInfo, integral_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopInfo, fastbuy_time_),
  };
  ShopInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShopInfo_descriptor_,
      ShopInfo::default_instance_,
      ShopInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShopInfo));
  DBShopItem_descriptor_ = file->message_type(1);
  static const int DBShopItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBShopItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBShopItem, buy_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBShopItem, sell_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBShopItem, price_),
  };
  DBShopItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBShopItem_descriptor_,
      DBShopItem::default_instance_,
      DBShopItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBShopItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBShopItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBShopItem));
  DBShopIntegral_descriptor_ = file->message_type(2);
  static const int DBShopIntegral_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBShopIntegral, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBShopIntegral, buy_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBShopIntegral, price_),
  };
  DBShopIntegral_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBShopIntegral_descriptor_,
      DBShopIntegral::default_instance_,
      DBShopIntegral_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBShopIntegral, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBShopIntegral, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBShopIntegral));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_db_5fshop_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShopInfo_descriptor_, &ShopInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBShopItem_descriptor_, &DBShopItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBShopIntegral_descriptor_, &DBShopIntegral::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_db_5fshop_2eproto() {
  delete ShopInfo::default_instance_;
  delete ShopInfo_reflection_;
  delete DBShopItem::default_instance_;
  delete DBShopItem_reflection_;
  delete DBShopIntegral::default_instance_;
  delete DBShopIntegral_reflection_;
}

void protobuf_AddDesc_db_5fshop_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::message::protobuf_AddDesc_shop_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rdb_shop.proto\022\rproto.message\032\nshop.pro"
    "to\"\327\001\n\010ShopInfo\0222\n\016shop_item_list\030\003 \003(\0132"
    "\032.proto.message.ShopItemBuy\0222\n\016mall_item"
    "_list\030\004 \003(\0132\032.proto.message.MallItemBuy\022"
    "1\n\rintegral_item\030\005 \003(\0132\032.proto.message.M"
    "allItemBuy\0220\n\014fastbuy_time\030\006 \003(\0132\032.proto"
    ".message.MallItemBuy\"N\n\nDBShopItem\022\n\n\002id"
    "\030\001 \001(\005\022\021\n\tbuy_times\030\002 \001(\005\022\022\n\nsell_times\030"
    "\003 \001(\005\022\r\n\005price\030\004 \001(\005\">\n\016DBShopIntegral\022\n"
    "\n\002id\030\001 \001(\005\022\021\n\tbuy_times\030\002 \001(\005\022\r\n\005price\030\003"
    " \001(\005B\017\n\rproto.message", 421);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "db_shop.proto", &protobuf_RegisterTypes);
  ShopInfo::default_instance_ = new ShopInfo();
  DBShopItem::default_instance_ = new DBShopItem();
  DBShopIntegral::default_instance_ = new DBShopIntegral();
  ShopInfo::default_instance_->InitAsDefaultInstance();
  DBShopItem::default_instance_->InitAsDefaultInstance();
  DBShopIntegral::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_db_5fshop_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_db_5fshop_2eproto {
  StaticDescriptorInitializer_db_5fshop_2eproto() {
    protobuf_AddDesc_db_5fshop_2eproto();
  }
} static_descriptor_initializer_db_5fshop_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ShopInfo::kShopItemListFieldNumber;
const int ShopInfo::kMallItemListFieldNumber;
const int ShopInfo::kIntegralItemFieldNumber;
const int ShopInfo::kFastbuyTimeFieldNumber;
#endif  // !_MSC_VER

ShopInfo::ShopInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShopInfo::InitAsDefaultInstance() {
}

ShopInfo::ShopInfo(const ShopInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShopInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopInfo::~ShopInfo() {
  SharedDtor();
}

void ShopInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShopInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShopInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShopInfo_descriptor_;
}

const ShopInfo& ShopInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5fshop_2eproto();
  return *default_instance_;
}

ShopInfo* ShopInfo::default_instance_ = NULL;

ShopInfo* ShopInfo::New() const {
  return new ShopInfo;
}

void ShopInfo::Clear() {
  shop_item_list_.Clear();
  mall_item_list_.Clear();
  integral_item_.Clear();
  fastbuy_time_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShopInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.ShopItemBuy shop_item_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shop_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shop_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_shop_item_list;
        if (input->ExpectTag(34)) goto parse_mall_item_list;
        break;
      }

      // repeated .proto.message.MallItemBuy mall_item_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mall_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mall_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_mall_item_list;
        if (input->ExpectTag(42)) goto parse_integral_item;
        break;
      }

      // repeated .proto.message.MallItemBuy integral_item = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_integral_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_integral_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_integral_item;
        if (input->ExpectTag(50)) goto parse_fastbuy_time;
        break;
      }

      // repeated .proto.message.MallItemBuy fastbuy_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fastbuy_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fastbuy_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_fastbuy_time;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShopInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.ShopItemBuy shop_item_list = 3;
  for (int i = 0; i < this->shop_item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->shop_item_list(i), output);
  }

  // repeated .proto.message.MallItemBuy mall_item_list = 4;
  for (int i = 0; i < this->mall_item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->mall_item_list(i), output);
  }

  // repeated .proto.message.MallItemBuy integral_item = 5;
  for (int i = 0; i < this->integral_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->integral_item(i), output);
  }

  // repeated .proto.message.MallItemBuy fastbuy_time = 6;
  for (int i = 0; i < this->fastbuy_time_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->fastbuy_time(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShopInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.ShopItemBuy shop_item_list = 3;
  for (int i = 0; i < this->shop_item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->shop_item_list(i), target);
  }

  // repeated .proto.message.MallItemBuy mall_item_list = 4;
  for (int i = 0; i < this->mall_item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->mall_item_list(i), target);
  }

  // repeated .proto.message.MallItemBuy integral_item = 5;
  for (int i = 0; i < this->integral_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->integral_item(i), target);
  }

  // repeated .proto.message.MallItemBuy fastbuy_time = 6;
  for (int i = 0; i < this->fastbuy_time_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->fastbuy_time(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShopInfo::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.ShopItemBuy shop_item_list = 3;
  total_size += 1 * this->shop_item_list_size();
  for (int i = 0; i < this->shop_item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shop_item_list(i));
  }

  // repeated .proto.message.MallItemBuy mall_item_list = 4;
  total_size += 1 * this->mall_item_list_size();
  for (int i = 0; i < this->mall_item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mall_item_list(i));
  }

  // repeated .proto.message.MallItemBuy integral_item = 5;
  total_size += 1 * this->integral_item_size();
  for (int i = 0; i < this->integral_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->integral_item(i));
  }

  // repeated .proto.message.MallItemBuy fastbuy_time = 6;
  total_size += 1 * this->fastbuy_time_size();
  for (int i = 0; i < this->fastbuy_time_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fastbuy_time(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShopInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShopInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShopInfo::MergeFrom(const ShopInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  shop_item_list_.MergeFrom(from.shop_item_list_);
  mall_item_list_.MergeFrom(from.mall_item_list_);
  integral_item_.MergeFrom(from.integral_item_);
  fastbuy_time_.MergeFrom(from.fastbuy_time_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShopInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShopInfo::CopyFrom(const ShopInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopInfo::IsInitialized() const {

  return true;
}

void ShopInfo::Swap(ShopInfo* other) {
  if (other != this) {
    shop_item_list_.Swap(&other->shop_item_list_);
    mall_item_list_.Swap(&other->mall_item_list_);
    integral_item_.Swap(&other->integral_item_);
    fastbuy_time_.Swap(&other->fastbuy_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShopInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShopInfo_descriptor_;
  metadata.reflection = ShopInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBShopItem::kIdFieldNumber;
const int DBShopItem::kBuyTimesFieldNumber;
const int DBShopItem::kSellTimesFieldNumber;
const int DBShopItem::kPriceFieldNumber;
#endif  // !_MSC_VER

DBShopItem::DBShopItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DBShopItem::InitAsDefaultInstance() {
}

DBShopItem::DBShopItem(const DBShopItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DBShopItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  buy_times_ = 0;
  sell_times_ = 0;
  price_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBShopItem::~DBShopItem() {
  SharedDtor();
}

void DBShopItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBShopItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBShopItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBShopItem_descriptor_;
}

const DBShopItem& DBShopItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5fshop_2eproto();
  return *default_instance_;
}

DBShopItem* DBShopItem::default_instance_ = NULL;

DBShopItem* DBShopItem::New() const {
  return new DBShopItem;
}

void DBShopItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    buy_times_ = 0;
    sell_times_ = 0;
    price_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBShopItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buy_times;
        break;
      }

      // optional int32 buy_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_times_)));
          set_has_buy_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sell_times;
        break;
      }

      // optional int32 sell_times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sell_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sell_times_)));
          set_has_sell_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_price;
        break;
      }

      // optional int32 price = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DBShopItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 buy_times = 2;
  if (has_buy_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->buy_times(), output);
  }

  // optional int32 sell_times = 3;
  if (has_sell_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sell_times(), output);
  }

  // optional int32 price = 4;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->price(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DBShopItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 buy_times = 2;
  if (has_buy_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->buy_times(), target);
  }

  // optional int32 sell_times = 3;
  if (has_sell_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sell_times(), target);
  }

  // optional int32 price = 4;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->price(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DBShopItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 buy_times = 2;
    if (has_buy_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_times());
    }

    // optional int32 sell_times = 3;
    if (has_sell_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sell_times());
    }

    // optional int32 price = 4;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBShopItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBShopItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBShopItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBShopItem::MergeFrom(const DBShopItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_buy_times()) {
      set_buy_times(from.buy_times());
    }
    if (from.has_sell_times()) {
      set_sell_times(from.sell_times());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBShopItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBShopItem::CopyFrom(const DBShopItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBShopItem::IsInitialized() const {

  return true;
}

void DBShopItem::Swap(DBShopItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(buy_times_, other->buy_times_);
    std::swap(sell_times_, other->sell_times_);
    std::swap(price_, other->price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBShopItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBShopItem_descriptor_;
  metadata.reflection = DBShopItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBShopIntegral::kIdFieldNumber;
const int DBShopIntegral::kBuyTimesFieldNumber;
const int DBShopIntegral::kPriceFieldNumber;
#endif  // !_MSC_VER

DBShopIntegral::DBShopIntegral()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DBShopIntegral::InitAsDefaultInstance() {
}

DBShopIntegral::DBShopIntegral(const DBShopIntegral& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DBShopIntegral::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  buy_times_ = 0;
  price_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBShopIntegral::~DBShopIntegral() {
  SharedDtor();
}

void DBShopIntegral::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBShopIntegral::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBShopIntegral::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBShopIntegral_descriptor_;
}

const DBShopIntegral& DBShopIntegral::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5fshop_2eproto();
  return *default_instance_;
}

DBShopIntegral* DBShopIntegral::default_instance_ = NULL;

DBShopIntegral* DBShopIntegral::New() const {
  return new DBShopIntegral;
}

void DBShopIntegral::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    buy_times_ = 0;
    price_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBShopIntegral::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buy_times;
        break;
      }

      // optional int32 buy_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_times_)));
          set_has_buy_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_price;
        break;
      }

      // optional int32 price = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DBShopIntegral::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 buy_times = 2;
  if (has_buy_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->buy_times(), output);
  }

  // optional int32 price = 3;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->price(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DBShopIntegral::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 buy_times = 2;
  if (has_buy_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->buy_times(), target);
  }

  // optional int32 price = 3;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->price(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DBShopIntegral::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 buy_times = 2;
    if (has_buy_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_times());
    }

    // optional int32 price = 3;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBShopIntegral::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBShopIntegral* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBShopIntegral*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBShopIntegral::MergeFrom(const DBShopIntegral& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_buy_times()) {
      set_buy_times(from.buy_times());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBShopIntegral::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBShopIntegral::CopyFrom(const DBShopIntegral& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBShopIntegral::IsInitialized() const {

  return true;
}

void DBShopIntegral::Swap(DBShopIntegral* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(buy_times_, other->buy_times_);
    std::swap(price_, other->price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBShopIntegral::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBShopIntegral_descriptor_;
  metadata.reflection = DBShopIntegral_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

// @@protoc_insertion_point(global_scope)
