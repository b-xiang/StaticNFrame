// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: godweapon.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "godweapon.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

namespace {

const ::google::protobuf::Descriptor* ProtoGodWeaponCellInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoGodWeaponCellInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoGodWeaponAllCellInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoGodWeaponAllCellInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodWeapon_CS_GetGodWeaponInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodWeapon_CS_GetGodWeaponInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodWeapon_SC_GetGodWeaponInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodWeapon_SC_GetGodWeaponInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodWeapon_SC_UpdateSingleGodWeaponInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodWeapon_SC_UpdateSingleGodWeaponInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodWeapon_CS_OperaCell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodWeapon_CS_OperaCell_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodWeapon_SC_OperaCell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodWeapon_SC_OperaCell_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_godweapon_2eproto() {
  protobuf_AddDesc_godweapon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "godweapon.proto");
  GOOGLE_CHECK(file != NULL);
  ProtoGodWeaponCellInfo_descriptor_ = file->message_type(0);
  static const int ProtoGodWeaponCellInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoGodWeaponCellInfo, cellid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoGodWeaponCellInfo, isactive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoGodWeaponCellInfo, isuse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoGodWeaponCellInfo, godweaponid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoGodWeaponCellInfo, strlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoGodWeaponCellInfo, luckyvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoGodWeaponCellInfo, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoGodWeaponCellInfo, activetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoGodWeaponCellInfo, activenowvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoGodWeaponCellInfo, eatfoodid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoGodWeaponCellInfo, eatfoodnum_),
  };
  ProtoGodWeaponCellInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoGodWeaponCellInfo_descriptor_,
      ProtoGodWeaponCellInfo::default_instance_,
      ProtoGodWeaponCellInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoGodWeaponCellInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoGodWeaponCellInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoGodWeaponCellInfo));
  ProtoGodWeaponAllCellInfo_descriptor_ = file->message_type(1);
  static const int ProtoGodWeaponAllCellInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoGodWeaponAllCellInfo, allinfo_),
  };
  ProtoGodWeaponAllCellInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoGodWeaponAllCellInfo_descriptor_,
      ProtoGodWeaponAllCellInfo::default_instance_,
      ProtoGodWeaponAllCellInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoGodWeaponAllCellInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoGodWeaponAllCellInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoGodWeaponAllCellInfo));
  GodWeapon_CS_GetGodWeaponInfo_descriptor_ = file->message_type(2);
  static const int GodWeapon_CS_GetGodWeaponInfo_offsets_[1] = {
  };
  GodWeapon_CS_GetGodWeaponInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodWeapon_CS_GetGodWeaponInfo_descriptor_,
      GodWeapon_CS_GetGodWeaponInfo::default_instance_,
      GodWeapon_CS_GetGodWeaponInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodWeapon_CS_GetGodWeaponInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodWeapon_CS_GetGodWeaponInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodWeapon_CS_GetGodWeaponInfo));
  GodWeapon_SC_GetGodWeaponInfo_descriptor_ = file->message_type(3);
  static const int GodWeapon_SC_GetGodWeaponInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodWeapon_SC_GetGodWeaponInfo, infolist_),
  };
  GodWeapon_SC_GetGodWeaponInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodWeapon_SC_GetGodWeaponInfo_descriptor_,
      GodWeapon_SC_GetGodWeaponInfo::default_instance_,
      GodWeapon_SC_GetGodWeaponInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodWeapon_SC_GetGodWeaponInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodWeapon_SC_GetGodWeaponInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodWeapon_SC_GetGodWeaponInfo));
  GodWeapon_SC_UpdateSingleGodWeaponInfo_descriptor_ = file->message_type(4);
  static const int GodWeapon_SC_UpdateSingleGodWeaponInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodWeapon_SC_UpdateSingleGodWeaponInfo, info_),
  };
  GodWeapon_SC_UpdateSingleGodWeaponInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodWeapon_SC_UpdateSingleGodWeaponInfo_descriptor_,
      GodWeapon_SC_UpdateSingleGodWeaponInfo::default_instance_,
      GodWeapon_SC_UpdateSingleGodWeaponInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodWeapon_SC_UpdateSingleGodWeaponInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodWeapon_SC_UpdateSingleGodWeaponInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodWeapon_SC_UpdateSingleGodWeaponInfo));
  GodWeapon_CS_OperaCell_descriptor_ = file->message_type(5);
  static const int GodWeapon_CS_OperaCell_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodWeapon_CS_OperaCell, cellid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodWeapon_CS_OperaCell, operatype_),
  };
  GodWeapon_CS_OperaCell_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodWeapon_CS_OperaCell_descriptor_,
      GodWeapon_CS_OperaCell::default_instance_,
      GodWeapon_CS_OperaCell_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodWeapon_CS_OperaCell, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodWeapon_CS_OperaCell, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodWeapon_CS_OperaCell));
  GodWeapon_SC_OperaCell_descriptor_ = file->message_type(6);
  static const int GodWeapon_SC_OperaCell_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodWeapon_SC_OperaCell, ret_),
  };
  GodWeapon_SC_OperaCell_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodWeapon_SC_OperaCell_descriptor_,
      GodWeapon_SC_OperaCell::default_instance_,
      GodWeapon_SC_OperaCell_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodWeapon_SC_OperaCell, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodWeapon_SC_OperaCell, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodWeapon_SC_OperaCell));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_godweapon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoGodWeaponCellInfo_descriptor_, &ProtoGodWeaponCellInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoGodWeaponAllCellInfo_descriptor_, &ProtoGodWeaponAllCellInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodWeapon_CS_GetGodWeaponInfo_descriptor_, &GodWeapon_CS_GetGodWeaponInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodWeapon_SC_GetGodWeaponInfo_descriptor_, &GodWeapon_SC_GetGodWeaponInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodWeapon_SC_UpdateSingleGodWeaponInfo_descriptor_, &GodWeapon_SC_UpdateSingleGodWeaponInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodWeapon_CS_OperaCell_descriptor_, &GodWeapon_CS_OperaCell::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodWeapon_SC_OperaCell_descriptor_, &GodWeapon_SC_OperaCell::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_godweapon_2eproto() {
  delete ProtoGodWeaponCellInfo::default_instance_;
  delete ProtoGodWeaponCellInfo_reflection_;
  delete ProtoGodWeaponAllCellInfo::default_instance_;
  delete ProtoGodWeaponAllCellInfo_reflection_;
  delete GodWeapon_CS_GetGodWeaponInfo::default_instance_;
  delete GodWeapon_CS_GetGodWeaponInfo_reflection_;
  delete GodWeapon_SC_GetGodWeaponInfo::default_instance_;
  delete GodWeapon_SC_GetGodWeaponInfo_reflection_;
  delete GodWeapon_SC_UpdateSingleGodWeaponInfo::default_instance_;
  delete GodWeapon_SC_UpdateSingleGodWeaponInfo_reflection_;
  delete GodWeapon_CS_OperaCell::default_instance_;
  delete GodWeapon_CS_OperaCell_reflection_;
  delete GodWeapon_SC_OperaCell::default_instance_;
  delete GodWeapon_SC_OperaCell_reflection_;
}

void protobuf_AddDesc_godweapon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::message::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017godweapon.proto\022\rproto.message\032\014common"
    ".proto\"\345\001\n\026ProtoGodWeaponCellInfo\022\016\n\006cel"
    "lId\030\001 \002(\r\022\020\n\010isActive\030\002 \002(\010\022\r\n\005isUse\030\003 \001"
    "(\010\022\023\n\013godweaponId\030\004 \001(\r\022\r\n\005strLv\030\005 \001(\r\022\022"
    "\n\nluckyValue\030\006 \001(\r\022\017\n\007skillId\030\007 \001(\r\022\022\n\na"
    "ctiveType\030\010 \001(\r\022\026\n\016activeNowValue\030\t \001(\r\022"
    "\021\n\teatFoodId\030\n \001(\r\022\022\n\neatFoodNum\030\013 \001(\r\"S"
    "\n\031ProtoGodWeaponAllCellInfo\0226\n\007allInfo\030\001"
    " \003(\0132%.proto.message.ProtoGodWeaponCellI"
    "nfo\"\037\n\035GodWeapon_CS_GetGodWeaponInfo\"X\n\035"
    "GodWeapon_SC_GetGodWeaponInfo\0227\n\010infoLis"
    "t\030\001 \003(\0132%.proto.message.ProtoGodWeaponCe"
    "llInfo\"]\n&GodWeapon_SC_UpdateSingleGodWe"
    "aponInfo\0223\n\004info\030\001 \001(\0132%.proto.message.P"
    "rotoGodWeaponCellInfo\";\n\026GodWeapon_CS_Op"
    "eraCell\022\016\n\006cellId\030\001 \002(\r\022\021\n\toperaType\030\002 \002"
    "(\r\"%\n\026GodWeapon_SC_OperaCell\022\013\n\003ret\030\001 \002("
    "\005B\017\n\rproto.message", 698);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "godweapon.proto", &protobuf_RegisterTypes);
  ProtoGodWeaponCellInfo::default_instance_ = new ProtoGodWeaponCellInfo();
  ProtoGodWeaponAllCellInfo::default_instance_ = new ProtoGodWeaponAllCellInfo();
  GodWeapon_CS_GetGodWeaponInfo::default_instance_ = new GodWeapon_CS_GetGodWeaponInfo();
  GodWeapon_SC_GetGodWeaponInfo::default_instance_ = new GodWeapon_SC_GetGodWeaponInfo();
  GodWeapon_SC_UpdateSingleGodWeaponInfo::default_instance_ = new GodWeapon_SC_UpdateSingleGodWeaponInfo();
  GodWeapon_CS_OperaCell::default_instance_ = new GodWeapon_CS_OperaCell();
  GodWeapon_SC_OperaCell::default_instance_ = new GodWeapon_SC_OperaCell();
  ProtoGodWeaponCellInfo::default_instance_->InitAsDefaultInstance();
  ProtoGodWeaponAllCellInfo::default_instance_->InitAsDefaultInstance();
  GodWeapon_CS_GetGodWeaponInfo::default_instance_->InitAsDefaultInstance();
  GodWeapon_SC_GetGodWeaponInfo::default_instance_->InitAsDefaultInstance();
  GodWeapon_SC_UpdateSingleGodWeaponInfo::default_instance_->InitAsDefaultInstance();
  GodWeapon_CS_OperaCell::default_instance_->InitAsDefaultInstance();
  GodWeapon_SC_OperaCell::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_godweapon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_godweapon_2eproto {
  StaticDescriptorInitializer_godweapon_2eproto() {
    protobuf_AddDesc_godweapon_2eproto();
  }
} static_descriptor_initializer_godweapon_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ProtoGodWeaponCellInfo::kCellIdFieldNumber;
const int ProtoGodWeaponCellInfo::kIsActiveFieldNumber;
const int ProtoGodWeaponCellInfo::kIsUseFieldNumber;
const int ProtoGodWeaponCellInfo::kGodweaponIdFieldNumber;
const int ProtoGodWeaponCellInfo::kStrLvFieldNumber;
const int ProtoGodWeaponCellInfo::kLuckyValueFieldNumber;
const int ProtoGodWeaponCellInfo::kSkillIdFieldNumber;
const int ProtoGodWeaponCellInfo::kActiveTypeFieldNumber;
const int ProtoGodWeaponCellInfo::kActiveNowValueFieldNumber;
const int ProtoGodWeaponCellInfo::kEatFoodIdFieldNumber;
const int ProtoGodWeaponCellInfo::kEatFoodNumFieldNumber;
#endif  // !_MSC_VER

ProtoGodWeaponCellInfo::ProtoGodWeaponCellInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoGodWeaponCellInfo::InitAsDefaultInstance() {
}

ProtoGodWeaponCellInfo::ProtoGodWeaponCellInfo(const ProtoGodWeaponCellInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoGodWeaponCellInfo::SharedCtor() {
  _cached_size_ = 0;
  cellid_ = 0u;
  isactive_ = false;
  isuse_ = false;
  godweaponid_ = 0u;
  strlv_ = 0u;
  luckyvalue_ = 0u;
  skillid_ = 0u;
  activetype_ = 0u;
  activenowvalue_ = 0u;
  eatfoodid_ = 0u;
  eatfoodnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoGodWeaponCellInfo::~ProtoGodWeaponCellInfo() {
  SharedDtor();
}

void ProtoGodWeaponCellInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoGodWeaponCellInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoGodWeaponCellInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoGodWeaponCellInfo_descriptor_;
}

const ProtoGodWeaponCellInfo& ProtoGodWeaponCellInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_godweapon_2eproto();
  return *default_instance_;
}

ProtoGodWeaponCellInfo* ProtoGodWeaponCellInfo::default_instance_ = NULL;

ProtoGodWeaponCellInfo* ProtoGodWeaponCellInfo::New() const {
  return new ProtoGodWeaponCellInfo;
}

void ProtoGodWeaponCellInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cellid_ = 0u;
    isactive_ = false;
    isuse_ = false;
    godweaponid_ = 0u;
    strlv_ = 0u;
    luckyvalue_ = 0u;
    skillid_ = 0u;
    activetype_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    activenowvalue_ = 0u;
    eatfoodid_ = 0u;
    eatfoodnum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoGodWeaponCellInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cellId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cellid_)));
          set_has_cellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isActive;
        break;
      }

      // required bool isActive = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isActive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isactive_)));
          set_has_isactive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isUse;
        break;
      }

      // optional bool isUse = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isUse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isuse_)));
          set_has_isuse();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_godweaponId;
        break;
      }

      // optional uint32 godweaponId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_godweaponId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &godweaponid_)));
          set_has_godweaponid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_strLv;
        break;
      }

      // optional uint32 strLv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strlv_)));
          set_has_strlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_luckyValue;
        break;
      }

      // optional uint32 luckyValue = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_luckyValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &luckyvalue_)));
          set_has_luckyvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_skillId;
        break;
      }

      // optional uint32 skillId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_activeType;
        break;
      }

      // optional uint32 activeType = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activeType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activetype_)));
          set_has_activetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_activeNowValue;
        break;
      }

      // optional uint32 activeNowValue = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activeNowValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activenowvalue_)));
          set_has_activenowvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_eatFoodId;
        break;
      }

      // optional uint32 eatFoodId = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eatFoodId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eatfoodid_)));
          set_has_eatfoodid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_eatFoodNum;
        break;
      }

      // optional uint32 eatFoodNum = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eatFoodNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eatfoodnum_)));
          set_has_eatfoodnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoGodWeaponCellInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 cellId = 1;
  if (has_cellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cellid(), output);
  }

  // required bool isActive = 2;
  if (has_isactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isactive(), output);
  }

  // optional bool isUse = 3;
  if (has_isuse()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isuse(), output);
  }

  // optional uint32 godweaponId = 4;
  if (has_godweaponid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->godweaponid(), output);
  }

  // optional uint32 strLv = 5;
  if (has_strlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->strlv(), output);
  }

  // optional uint32 luckyValue = 6;
  if (has_luckyvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->luckyvalue(), output);
  }

  // optional uint32 skillId = 7;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->skillid(), output);
  }

  // optional uint32 activeType = 8;
  if (has_activetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->activetype(), output);
  }

  // optional uint32 activeNowValue = 9;
  if (has_activenowvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->activenowvalue(), output);
  }

  // optional uint32 eatFoodId = 10;
  if (has_eatfoodid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->eatfoodid(), output);
  }

  // optional uint32 eatFoodNum = 11;
  if (has_eatfoodnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->eatfoodnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoGodWeaponCellInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 cellId = 1;
  if (has_cellid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cellid(), target);
  }

  // required bool isActive = 2;
  if (has_isactive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isactive(), target);
  }

  // optional bool isUse = 3;
  if (has_isuse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isuse(), target);
  }

  // optional uint32 godweaponId = 4;
  if (has_godweaponid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->godweaponid(), target);
  }

  // optional uint32 strLv = 5;
  if (has_strlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->strlv(), target);
  }

  // optional uint32 luckyValue = 6;
  if (has_luckyvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->luckyvalue(), target);
  }

  // optional uint32 skillId = 7;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->skillid(), target);
  }

  // optional uint32 activeType = 8;
  if (has_activetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->activetype(), target);
  }

  // optional uint32 activeNowValue = 9;
  if (has_activenowvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->activenowvalue(), target);
  }

  // optional uint32 eatFoodId = 10;
  if (has_eatfoodid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->eatfoodid(), target);
  }

  // optional uint32 eatFoodNum = 11;
  if (has_eatfoodnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->eatfoodnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoGodWeaponCellInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cellId = 1;
    if (has_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cellid());
    }

    // required bool isActive = 2;
    if (has_isactive()) {
      total_size += 1 + 1;
    }

    // optional bool isUse = 3;
    if (has_isuse()) {
      total_size += 1 + 1;
    }

    // optional uint32 godweaponId = 4;
    if (has_godweaponid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->godweaponid());
    }

    // optional uint32 strLv = 5;
    if (has_strlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strlv());
    }

    // optional uint32 luckyValue = 6;
    if (has_luckyvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->luckyvalue());
    }

    // optional uint32 skillId = 7;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

    // optional uint32 activeType = 8;
    if (has_activetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activetype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 activeNowValue = 9;
    if (has_activenowvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activenowvalue());
    }

    // optional uint32 eatFoodId = 10;
    if (has_eatfoodid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eatfoodid());
    }

    // optional uint32 eatFoodNum = 11;
    if (has_eatfoodnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eatfoodnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoGodWeaponCellInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoGodWeaponCellInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoGodWeaponCellInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoGodWeaponCellInfo::MergeFrom(const ProtoGodWeaponCellInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cellid()) {
      set_cellid(from.cellid());
    }
    if (from.has_isactive()) {
      set_isactive(from.isactive());
    }
    if (from.has_isuse()) {
      set_isuse(from.isuse());
    }
    if (from.has_godweaponid()) {
      set_godweaponid(from.godweaponid());
    }
    if (from.has_strlv()) {
      set_strlv(from.strlv());
    }
    if (from.has_luckyvalue()) {
      set_luckyvalue(from.luckyvalue());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_activetype()) {
      set_activetype(from.activetype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_activenowvalue()) {
      set_activenowvalue(from.activenowvalue());
    }
    if (from.has_eatfoodid()) {
      set_eatfoodid(from.eatfoodid());
    }
    if (from.has_eatfoodnum()) {
      set_eatfoodnum(from.eatfoodnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoGodWeaponCellInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoGodWeaponCellInfo::CopyFrom(const ProtoGodWeaponCellInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoGodWeaponCellInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ProtoGodWeaponCellInfo::Swap(ProtoGodWeaponCellInfo* other) {
  if (other != this) {
    std::swap(cellid_, other->cellid_);
    std::swap(isactive_, other->isactive_);
    std::swap(isuse_, other->isuse_);
    std::swap(godweaponid_, other->godweaponid_);
    std::swap(strlv_, other->strlv_);
    std::swap(luckyvalue_, other->luckyvalue_);
    std::swap(skillid_, other->skillid_);
    std::swap(activetype_, other->activetype_);
    std::swap(activenowvalue_, other->activenowvalue_);
    std::swap(eatfoodid_, other->eatfoodid_);
    std::swap(eatfoodnum_, other->eatfoodnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoGodWeaponCellInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoGodWeaponCellInfo_descriptor_;
  metadata.reflection = ProtoGodWeaponCellInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoGodWeaponAllCellInfo::kAllInfoFieldNumber;
#endif  // !_MSC_VER

ProtoGodWeaponAllCellInfo::ProtoGodWeaponAllCellInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoGodWeaponAllCellInfo::InitAsDefaultInstance() {
}

ProtoGodWeaponAllCellInfo::ProtoGodWeaponAllCellInfo(const ProtoGodWeaponAllCellInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoGodWeaponAllCellInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoGodWeaponAllCellInfo::~ProtoGodWeaponAllCellInfo() {
  SharedDtor();
}

void ProtoGodWeaponAllCellInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoGodWeaponAllCellInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoGodWeaponAllCellInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoGodWeaponAllCellInfo_descriptor_;
}

const ProtoGodWeaponAllCellInfo& ProtoGodWeaponAllCellInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_godweapon_2eproto();
  return *default_instance_;
}

ProtoGodWeaponAllCellInfo* ProtoGodWeaponAllCellInfo::default_instance_ = NULL;

ProtoGodWeaponAllCellInfo* ProtoGodWeaponAllCellInfo::New() const {
  return new ProtoGodWeaponAllCellInfo;
}

void ProtoGodWeaponAllCellInfo::Clear() {
  allinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoGodWeaponAllCellInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.ProtoGodWeaponCellInfo allInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_allInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_allinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_allInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoGodWeaponAllCellInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.ProtoGodWeaponCellInfo allInfo = 1;
  for (int i = 0; i < this->allinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->allinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoGodWeaponAllCellInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.ProtoGodWeaponCellInfo allInfo = 1;
  for (int i = 0; i < this->allinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->allinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoGodWeaponAllCellInfo::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.ProtoGodWeaponCellInfo allInfo = 1;
  total_size += 1 * this->allinfo_size();
  for (int i = 0; i < this->allinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->allinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoGodWeaponAllCellInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoGodWeaponAllCellInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoGodWeaponAllCellInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoGodWeaponAllCellInfo::MergeFrom(const ProtoGodWeaponAllCellInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  allinfo_.MergeFrom(from.allinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoGodWeaponAllCellInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoGodWeaponAllCellInfo::CopyFrom(const ProtoGodWeaponAllCellInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoGodWeaponAllCellInfo::IsInitialized() const {

  for (int i = 0; i < allinfo_size(); i++) {
    if (!this->allinfo(i).IsInitialized()) return false;
  }
  return true;
}

void ProtoGodWeaponAllCellInfo::Swap(ProtoGodWeaponAllCellInfo* other) {
  if (other != this) {
    allinfo_.Swap(&other->allinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoGodWeaponAllCellInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoGodWeaponAllCellInfo_descriptor_;
  metadata.reflection = ProtoGodWeaponAllCellInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GodWeapon_CS_GetGodWeaponInfo::GodWeapon_CS_GetGodWeaponInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodWeapon_CS_GetGodWeaponInfo::InitAsDefaultInstance() {
}

GodWeapon_CS_GetGodWeaponInfo::GodWeapon_CS_GetGodWeaponInfo(const GodWeapon_CS_GetGodWeaponInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodWeapon_CS_GetGodWeaponInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodWeapon_CS_GetGodWeaponInfo::~GodWeapon_CS_GetGodWeaponInfo() {
  SharedDtor();
}

void GodWeapon_CS_GetGodWeaponInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodWeapon_CS_GetGodWeaponInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodWeapon_CS_GetGodWeaponInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodWeapon_CS_GetGodWeaponInfo_descriptor_;
}

const GodWeapon_CS_GetGodWeaponInfo& GodWeapon_CS_GetGodWeaponInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_godweapon_2eproto();
  return *default_instance_;
}

GodWeapon_CS_GetGodWeaponInfo* GodWeapon_CS_GetGodWeaponInfo::default_instance_ = NULL;

GodWeapon_CS_GetGodWeaponInfo* GodWeapon_CS_GetGodWeaponInfo::New() const {
  return new GodWeapon_CS_GetGodWeaponInfo;
}

void GodWeapon_CS_GetGodWeaponInfo::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodWeapon_CS_GetGodWeaponInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GodWeapon_CS_GetGodWeaponInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodWeapon_CS_GetGodWeaponInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodWeapon_CS_GetGodWeaponInfo::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodWeapon_CS_GetGodWeaponInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodWeapon_CS_GetGodWeaponInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodWeapon_CS_GetGodWeaponInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodWeapon_CS_GetGodWeaponInfo::MergeFrom(const GodWeapon_CS_GetGodWeaponInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodWeapon_CS_GetGodWeaponInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodWeapon_CS_GetGodWeaponInfo::CopyFrom(const GodWeapon_CS_GetGodWeaponInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodWeapon_CS_GetGodWeaponInfo::IsInitialized() const {

  return true;
}

void GodWeapon_CS_GetGodWeaponInfo::Swap(GodWeapon_CS_GetGodWeaponInfo* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodWeapon_CS_GetGodWeaponInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodWeapon_CS_GetGodWeaponInfo_descriptor_;
  metadata.reflection = GodWeapon_CS_GetGodWeaponInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodWeapon_SC_GetGodWeaponInfo::kInfoListFieldNumber;
#endif  // !_MSC_VER

GodWeapon_SC_GetGodWeaponInfo::GodWeapon_SC_GetGodWeaponInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodWeapon_SC_GetGodWeaponInfo::InitAsDefaultInstance() {
}

GodWeapon_SC_GetGodWeaponInfo::GodWeapon_SC_GetGodWeaponInfo(const GodWeapon_SC_GetGodWeaponInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodWeapon_SC_GetGodWeaponInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodWeapon_SC_GetGodWeaponInfo::~GodWeapon_SC_GetGodWeaponInfo() {
  SharedDtor();
}

void GodWeapon_SC_GetGodWeaponInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodWeapon_SC_GetGodWeaponInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodWeapon_SC_GetGodWeaponInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodWeapon_SC_GetGodWeaponInfo_descriptor_;
}

const GodWeapon_SC_GetGodWeaponInfo& GodWeapon_SC_GetGodWeaponInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_godweapon_2eproto();
  return *default_instance_;
}

GodWeapon_SC_GetGodWeaponInfo* GodWeapon_SC_GetGodWeaponInfo::default_instance_ = NULL;

GodWeapon_SC_GetGodWeaponInfo* GodWeapon_SC_GetGodWeaponInfo::New() const {
  return new GodWeapon_SC_GetGodWeaponInfo;
}

void GodWeapon_SC_GetGodWeaponInfo::Clear() {
  infolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodWeapon_SC_GetGodWeaponInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.ProtoGodWeaponCellInfo infoList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infoList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodWeapon_SC_GetGodWeaponInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.ProtoGodWeaponCellInfo infoList = 1;
  for (int i = 0; i < this->infolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infolist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodWeapon_SC_GetGodWeaponInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.ProtoGodWeaponCellInfo infoList = 1;
  for (int i = 0; i < this->infolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infolist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodWeapon_SC_GetGodWeaponInfo::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.ProtoGodWeaponCellInfo infoList = 1;
  total_size += 1 * this->infolist_size();
  for (int i = 0; i < this->infolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infolist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodWeapon_SC_GetGodWeaponInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodWeapon_SC_GetGodWeaponInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodWeapon_SC_GetGodWeaponInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodWeapon_SC_GetGodWeaponInfo::MergeFrom(const GodWeapon_SC_GetGodWeaponInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  infolist_.MergeFrom(from.infolist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodWeapon_SC_GetGodWeaponInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodWeapon_SC_GetGodWeaponInfo::CopyFrom(const GodWeapon_SC_GetGodWeaponInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodWeapon_SC_GetGodWeaponInfo::IsInitialized() const {

  for (int i = 0; i < infolist_size(); i++) {
    if (!this->infolist(i).IsInitialized()) return false;
  }
  return true;
}

void GodWeapon_SC_GetGodWeaponInfo::Swap(GodWeapon_SC_GetGodWeaponInfo* other) {
  if (other != this) {
    infolist_.Swap(&other->infolist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodWeapon_SC_GetGodWeaponInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodWeapon_SC_GetGodWeaponInfo_descriptor_;
  metadata.reflection = GodWeapon_SC_GetGodWeaponInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodWeapon_SC_UpdateSingleGodWeaponInfo::kInfoFieldNumber;
#endif  // !_MSC_VER

GodWeapon_SC_UpdateSingleGodWeaponInfo::GodWeapon_SC_UpdateSingleGodWeaponInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodWeapon_SC_UpdateSingleGodWeaponInfo::InitAsDefaultInstance() {
  info_ = const_cast< ::proto::message::ProtoGodWeaponCellInfo*>(&::proto::message::ProtoGodWeaponCellInfo::default_instance());
}

GodWeapon_SC_UpdateSingleGodWeaponInfo::GodWeapon_SC_UpdateSingleGodWeaponInfo(const GodWeapon_SC_UpdateSingleGodWeaponInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodWeapon_SC_UpdateSingleGodWeaponInfo::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodWeapon_SC_UpdateSingleGodWeaponInfo::~GodWeapon_SC_UpdateSingleGodWeaponInfo() {
  SharedDtor();
}

void GodWeapon_SC_UpdateSingleGodWeaponInfo::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void GodWeapon_SC_UpdateSingleGodWeaponInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodWeapon_SC_UpdateSingleGodWeaponInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodWeapon_SC_UpdateSingleGodWeaponInfo_descriptor_;
}

const GodWeapon_SC_UpdateSingleGodWeaponInfo& GodWeapon_SC_UpdateSingleGodWeaponInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_godweapon_2eproto();
  return *default_instance_;
}

GodWeapon_SC_UpdateSingleGodWeaponInfo* GodWeapon_SC_UpdateSingleGodWeaponInfo::default_instance_ = NULL;

GodWeapon_SC_UpdateSingleGodWeaponInfo* GodWeapon_SC_UpdateSingleGodWeaponInfo::New() const {
  return new GodWeapon_SC_UpdateSingleGodWeaponInfo;
}

void GodWeapon_SC_UpdateSingleGodWeaponInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::proto::message::ProtoGodWeaponCellInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodWeapon_SC_UpdateSingleGodWeaponInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.message.ProtoGodWeaponCellInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodWeapon_SC_UpdateSingleGodWeaponInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.message.ProtoGodWeaponCellInfo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodWeapon_SC_UpdateSingleGodWeaponInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.message.ProtoGodWeaponCellInfo info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodWeapon_SC_UpdateSingleGodWeaponInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.message.ProtoGodWeaponCellInfo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodWeapon_SC_UpdateSingleGodWeaponInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodWeapon_SC_UpdateSingleGodWeaponInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodWeapon_SC_UpdateSingleGodWeaponInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodWeapon_SC_UpdateSingleGodWeaponInfo::MergeFrom(const GodWeapon_SC_UpdateSingleGodWeaponInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::proto::message::ProtoGodWeaponCellInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodWeapon_SC_UpdateSingleGodWeaponInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodWeapon_SC_UpdateSingleGodWeaponInfo::CopyFrom(const GodWeapon_SC_UpdateSingleGodWeaponInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodWeapon_SC_UpdateSingleGodWeaponInfo::IsInitialized() const {

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void GodWeapon_SC_UpdateSingleGodWeaponInfo::Swap(GodWeapon_SC_UpdateSingleGodWeaponInfo* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodWeapon_SC_UpdateSingleGodWeaponInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodWeapon_SC_UpdateSingleGodWeaponInfo_descriptor_;
  metadata.reflection = GodWeapon_SC_UpdateSingleGodWeaponInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodWeapon_CS_OperaCell::kCellIdFieldNumber;
const int GodWeapon_CS_OperaCell::kOperaTypeFieldNumber;
#endif  // !_MSC_VER

GodWeapon_CS_OperaCell::GodWeapon_CS_OperaCell()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodWeapon_CS_OperaCell::InitAsDefaultInstance() {
}

GodWeapon_CS_OperaCell::GodWeapon_CS_OperaCell(const GodWeapon_CS_OperaCell& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodWeapon_CS_OperaCell::SharedCtor() {
  _cached_size_ = 0;
  cellid_ = 0u;
  operatype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodWeapon_CS_OperaCell::~GodWeapon_CS_OperaCell() {
  SharedDtor();
}

void GodWeapon_CS_OperaCell::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodWeapon_CS_OperaCell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodWeapon_CS_OperaCell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodWeapon_CS_OperaCell_descriptor_;
}

const GodWeapon_CS_OperaCell& GodWeapon_CS_OperaCell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_godweapon_2eproto();
  return *default_instance_;
}

GodWeapon_CS_OperaCell* GodWeapon_CS_OperaCell::default_instance_ = NULL;

GodWeapon_CS_OperaCell* GodWeapon_CS_OperaCell::New() const {
  return new GodWeapon_CS_OperaCell;
}

void GodWeapon_CS_OperaCell::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cellid_ = 0u;
    operatype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodWeapon_CS_OperaCell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cellId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cellid_)));
          set_has_cellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_operaType;
        break;
      }

      // required uint32 operaType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operaType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operatype_)));
          set_has_operatype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodWeapon_CS_OperaCell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 cellId = 1;
  if (has_cellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cellid(), output);
  }

  // required uint32 operaType = 2;
  if (has_operatype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->operatype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodWeapon_CS_OperaCell::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 cellId = 1;
  if (has_cellid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cellid(), target);
  }

  // required uint32 operaType = 2;
  if (has_operatype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->operatype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodWeapon_CS_OperaCell::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cellId = 1;
    if (has_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cellid());
    }

    // required uint32 operaType = 2;
    if (has_operatype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operatype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodWeapon_CS_OperaCell::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodWeapon_CS_OperaCell* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodWeapon_CS_OperaCell*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodWeapon_CS_OperaCell::MergeFrom(const GodWeapon_CS_OperaCell& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cellid()) {
      set_cellid(from.cellid());
    }
    if (from.has_operatype()) {
      set_operatype(from.operatype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodWeapon_CS_OperaCell::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodWeapon_CS_OperaCell::CopyFrom(const GodWeapon_CS_OperaCell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodWeapon_CS_OperaCell::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GodWeapon_CS_OperaCell::Swap(GodWeapon_CS_OperaCell* other) {
  if (other != this) {
    std::swap(cellid_, other->cellid_);
    std::swap(operatype_, other->operatype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodWeapon_CS_OperaCell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodWeapon_CS_OperaCell_descriptor_;
  metadata.reflection = GodWeapon_CS_OperaCell_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodWeapon_SC_OperaCell::kRetFieldNumber;
#endif  // !_MSC_VER

GodWeapon_SC_OperaCell::GodWeapon_SC_OperaCell()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodWeapon_SC_OperaCell::InitAsDefaultInstance() {
}

GodWeapon_SC_OperaCell::GodWeapon_SC_OperaCell(const GodWeapon_SC_OperaCell& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodWeapon_SC_OperaCell::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodWeapon_SC_OperaCell::~GodWeapon_SC_OperaCell() {
  SharedDtor();
}

void GodWeapon_SC_OperaCell::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodWeapon_SC_OperaCell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodWeapon_SC_OperaCell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodWeapon_SC_OperaCell_descriptor_;
}

const GodWeapon_SC_OperaCell& GodWeapon_SC_OperaCell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_godweapon_2eproto();
  return *default_instance_;
}

GodWeapon_SC_OperaCell* GodWeapon_SC_OperaCell::default_instance_ = NULL;

GodWeapon_SC_OperaCell* GodWeapon_SC_OperaCell::New() const {
  return new GodWeapon_SC_OperaCell;
}

void GodWeapon_SC_OperaCell::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodWeapon_SC_OperaCell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodWeapon_SC_OperaCell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodWeapon_SC_OperaCell::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodWeapon_SC_OperaCell::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodWeapon_SC_OperaCell::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodWeapon_SC_OperaCell* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodWeapon_SC_OperaCell*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodWeapon_SC_OperaCell::MergeFrom(const GodWeapon_SC_OperaCell& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodWeapon_SC_OperaCell::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodWeapon_SC_OperaCell::CopyFrom(const GodWeapon_SC_OperaCell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodWeapon_SC_OperaCell::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GodWeapon_SC_OperaCell::Swap(GodWeapon_SC_OperaCell* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodWeapon_SC_OperaCell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodWeapon_SC_OperaCell_descriptor_;
  metadata.reflection = GodWeapon_SC_OperaCell_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

// @@protoc_insertion_point(global_scope)
