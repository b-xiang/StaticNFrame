// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rank.proto

#ifndef PROTOBUF_rank_2eproto__INCLUDED
#define PROTOBUF_rank_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "item.pb.h"
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rank_2eproto();
void protobuf_AssignDesc_rank_2eproto();
void protobuf_ShutdownFile_rank_2eproto();

class RankDataCopy;
class RankFirstBody;
class RewardRecord;
class ActivityRank;
class ActivityRankList;
class SaveActivityRank;
class AuxData;
class RankDBData;
class RankDBList;
class SaveRankData;
class Rank_CS_GetRankInfo;
class Rank_SC_GetRankInfo;
class Rank_CS_ReqActivityReward;
class Rank_CS_ReqRankRewardData;
class Rank_SC_AckRankRewardData;
class Rank_SC_AckPvPSignRankFirst;

enum eRankType {
  eRankType_PlayerLevel = 1,
  eRankType_PlayerCombat = 2,
  eRankType_EquipCombat = 3,
  eRankType_Ride = 4,
  eRankType_Pet = 5,
  eRankType_Mercenary = 6,
  eRankType_Boat = 7,
  eRankType_Constellation = 8,
  eRankType_Achievement = 9,
  eRankType_Chivalry = 10,
  eRankType_Guild = 11,
  eRankType_GuildDevote = 12,
  eRankType_OffBattle = 13,
  eRankType_Ladder_Single = 14,
  eRankType_Battle_Score = 15,
  eRankType_Battle_HeadHunting = 16,
  eRankType_Battle_DemonHunting = 17,
  eRankType_Battle_GuardGoddess = 18,
  eRankType_Awaken = 19,
  eRankType_ReCharge = 20,
  eRankType_GodWeapon = 21,
  eRankType_GuildBoom = 22,
  eRankType_GuildBoss = 23,
  eRankType_Pet1 = 101,
  eRankType_Pet2 = 102,
  eRankType_Pet3 = 103,
  eRankType_Pet4 = 104,
  eRankType_Pet5 = 105,
  eRankType_Pet6 = 106,
  eRankType_Pet7 = 107,
  eRankType_Pet8 = 108,
  eRankType_Pet9 = 109,
  eRankType_Mercen1 = 201,
  eRankType_Mercen2 = 202,
  eRankType_Mercen3 = 203,
  eRankType_Mercen4 = 204,
  eRankType_Mercen5 = 205,
  eRankType_Mercen6 = 206,
  eRankType_Mercen7 = 207,
  eRankType_Mercen8 = 208,
  eRankType_Mercen9 = 209
};
bool eRankType_IsValid(int value);
const eRankType eRankType_MIN = eRankType_PlayerLevel;
const eRankType eRankType_MAX = eRankType_Mercen9;
const int eRankType_ARRAYSIZE = eRankType_MAX + 1;

const ::google::protobuf::EnumDescriptor* eRankType_descriptor();
inline const ::std::string& eRankType_Name(eRankType value) {
  return ::google::protobuf::internal::NameOfEnum(
    eRankType_descriptor(), value);
}
inline bool eRankType_Parse(
    const ::std::string& name, eRankType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eRankType>(
    eRankType_descriptor(), name, value);
}
// ===================================================================

class RankDataCopy : public ::google::protobuf::Message {
 public:
  RankDataCopy();
  virtual ~RankDataCopy();

  RankDataCopy(const RankDataCopy& from);

  inline RankDataCopy& operator=(const RankDataCopy& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RankDataCopy& default_instance();

  void Swap(RankDataCopy* other);

  // implements Message ----------------------------------------------

  RankDataCopy* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RankDataCopy& from);
  void MergeFrom(const RankDataCopy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ranking = 1;
  inline bool has_ranking() const;
  inline void clear_ranking();
  static const int kRankingFieldNumber = 1;
  inline ::google::protobuf::uint32 ranking() const;
  inline void set_ranking(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.RankDataCopy)
 private:
  inline void set_has_ranking();
  inline void clear_has_ranking();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 ranking_;
  ::google::protobuf::uint32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_rank_2eproto();
  friend void protobuf_AssignDesc_rank_2eproto();
  friend void protobuf_ShutdownFile_rank_2eproto();

  void InitAsDefaultInstance();
  static RankDataCopy* default_instance_;
};
// -------------------------------------------------------------------

class RankFirstBody : public ::google::protobuf::Message {
 public:
  RankFirstBody();
  virtual ~RankFirstBody();

  RankFirstBody(const RankFirstBody& from);

  inline RankFirstBody& operator=(const RankFirstBody& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RankFirstBody& default_instance();

  void Swap(RankFirstBody* other);

  // implements Message ----------------------------------------------

  RankFirstBody* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RankFirstBody& from);
  void MergeFrom(const RankFirstBody& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string firstname = 1;
  inline bool has_firstname() const;
  inline void clear_firstname();
  static const int kFirstnameFieldNumber = 1;
  inline const ::std::string& firstname() const;
  inline void set_firstname(const ::std::string& value);
  inline void set_firstname(const char* value);
  inline void set_firstname(const char* value, size_t size);
  inline ::std::string* mutable_firstname();
  inline ::std::string* release_firstname();
  inline void set_allocated_firstname(::std::string* firstname);

  // optional uint32 skinid = 2;
  inline bool has_skinid() const;
  inline void clear_skinid();
  static const int kSkinidFieldNumber = 2;
  inline ::google::protobuf::uint32 skinid() const;
  inline void set_skinid(::google::protobuf::uint32 value);

  // optional uint32 suitid = 3;
  inline bool has_suitid() const;
  inline void clear_suitid();
  static const int kSuitidFieldNumber = 3;
  inline ::google::protobuf::uint32 suitid() const;
  inline void set_suitid(::google::protobuf::uint32 value);

  // optional uint32 weaponid = 4;
  inline bool has_weaponid() const;
  inline void clear_weaponid();
  static const int kWeaponidFieldNumber = 4;
  inline ::google::protobuf::uint32 weaponid() const;
  inline void set_weaponid(::google::protobuf::uint32 value);

  // optional uint32 weaponskin = 5;
  inline bool has_weaponskin() const;
  inline void clear_weaponskin();
  static const int kWeaponskinFieldNumber = 5;
  inline ::google::protobuf::uint32 weaponskin() const;
  inline void set_weaponskin(::google::protobuf::uint32 value);

  // optional uint32 showid = 6;
  inline bool has_showid() const;
  inline void clear_showid();
  static const int kShowidFieldNumber = 6;
  inline ::google::protobuf::uint32 showid() const;
  inline void set_showid(::google::protobuf::uint32 value);

  // optional uint32 career = 7;
  inline bool has_career() const;
  inline void clear_career();
  static const int kCareerFieldNumber = 7;
  inline ::google::protobuf::uint32 career() const;
  inline void set_career(::google::protobuf::uint32 value);

  // optional uint64 playerid = 8;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 8;
  inline ::google::protobuf::uint64 playerid() const;
  inline void set_playerid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.message.RankFirstBody)
 private:
  inline void set_has_firstname();
  inline void clear_has_firstname();
  inline void set_has_skinid();
  inline void clear_has_skinid();
  inline void set_has_suitid();
  inline void clear_has_suitid();
  inline void set_has_weaponid();
  inline void clear_has_weaponid();
  inline void set_has_weaponskin();
  inline void clear_has_weaponskin();
  inline void set_has_showid();
  inline void clear_has_showid();
  inline void set_has_career();
  inline void clear_has_career();
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* firstname_;
  ::google::protobuf::uint32 skinid_;
  ::google::protobuf::uint32 suitid_;
  ::google::protobuf::uint32 weaponid_;
  ::google::protobuf::uint32 weaponskin_;
  ::google::protobuf::uint32 showid_;
  ::google::protobuf::uint32 career_;
  ::google::protobuf::uint64 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_rank_2eproto();
  friend void protobuf_AssignDesc_rank_2eproto();
  friend void protobuf_ShutdownFile_rank_2eproto();

  void InitAsDefaultInstance();
  static RankFirstBody* default_instance_;
};
// -------------------------------------------------------------------

class RewardRecord : public ::google::protobuf::Message {
 public:
  RewardRecord();
  virtual ~RewardRecord();

  RewardRecord(const RewardRecord& from);

  inline RewardRecord& operator=(const RewardRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RewardRecord& default_instance();

  void Swap(RewardRecord* other);

  // implements Message ----------------------------------------------

  RewardRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RewardRecord& from);
  void MergeFrom(const RewardRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 condition = 1;
  inline bool has_condition() const;
  inline void clear_condition();
  static const int kConditionFieldNumber = 1;
  inline ::google::protobuf::uint32 condition() const;
  inline void set_condition(::google::protobuf::uint32 value);

  // optional int32 counts = 2;
  inline bool has_counts() const;
  inline void clear_counts();
  static const int kCountsFieldNumber = 2;
  inline ::google::protobuf::int32 counts() const;
  inline void set_counts(::google::protobuf::int32 value);

  // repeated uint64 playerid = 3;
  inline int playerid_size() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 3;
  inline ::google::protobuf::uint64 playerid(int index) const;
  inline void set_playerid(int index, ::google::protobuf::uint64 value);
  inline void add_playerid(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      playerid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_playerid();

  // optional bool isget = 4;
  inline bool has_isget() const;
  inline void clear_isget();
  static const int kIsgetFieldNumber = 4;
  inline bool isget() const;
  inline void set_isget(bool value);

  // @@protoc_insertion_point(class_scope:proto.message.RewardRecord)
 private:
  inline void set_has_condition();
  inline void clear_has_condition();
  inline void set_has_counts();
  inline void clear_has_counts();
  inline void set_has_isget();
  inline void clear_has_isget();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 condition_;
  ::google::protobuf::int32 counts_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > playerid_;
  bool isget_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_rank_2eproto();
  friend void protobuf_AssignDesc_rank_2eproto();
  friend void protobuf_ShutdownFile_rank_2eproto();

  void InitAsDefaultInstance();
  static RewardRecord* default_instance_;
};
// -------------------------------------------------------------------

class ActivityRank : public ::google::protobuf::Message {
 public:
  ActivityRank();
  virtual ~ActivityRank();

  ActivityRank(const ActivityRank& from);

  inline ActivityRank& operator=(const ActivityRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActivityRank& default_instance();

  void Swap(ActivityRank* other);

  // implements Message ----------------------------------------------

  ActivityRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActivityRank& from);
  void MergeFrom(const ActivityRank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ranktype = 1;
  inline bool has_ranktype() const;
  inline void clear_ranktype();
  static const int kRanktypeFieldNumber = 1;
  inline ::google::protobuf::uint32 ranktype() const;
  inline void set_ranktype(::google::protobuf::uint32 value);

  // repeated .proto.message.RewardRecord reward = 2;
  inline int reward_size() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 2;
  inline const ::proto::message::RewardRecord& reward(int index) const;
  inline ::proto::message::RewardRecord* mutable_reward(int index);
  inline ::proto::message::RewardRecord* add_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::RewardRecord >&
      reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::RewardRecord >*
      mutable_reward();

  // optional .proto.message.RankFirstBody first = 3;
  inline bool has_first() const;
  inline void clear_first();
  static const int kFirstFieldNumber = 3;
  inline const ::proto::message::RankFirstBody& first() const;
  inline ::proto::message::RankFirstBody* mutable_first();
  inline ::proto::message::RankFirstBody* release_first();
  inline void set_allocated_first(::proto::message::RankFirstBody* first);

  // optional uint32 isOver = 4;
  inline bool has_isover() const;
  inline void clear_isover();
  static const int kIsOverFieldNumber = 4;
  inline ::google::protobuf::uint32 isover() const;
  inline void set_isover(::google::protobuf::uint32 value);

  // repeated .proto.message.RankDataCopy copy = 5;
  inline int copy_size() const;
  inline void clear_copy();
  static const int kCopyFieldNumber = 5;
  inline const ::proto::message::RankDataCopy& copy(int index) const;
  inline ::proto::message::RankDataCopy* mutable_copy(int index);
  inline ::proto::message::RankDataCopy* add_copy();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::RankDataCopy >&
      copy() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::RankDataCopy >*
      mutable_copy();

  // @@protoc_insertion_point(class_scope:proto.message.ActivityRank)
 private:
  inline void set_has_ranktype();
  inline void clear_has_ranktype();
  inline void set_has_first();
  inline void clear_has_first();
  inline void set_has_isover();
  inline void clear_has_isover();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::message::RewardRecord > reward_;
  ::google::protobuf::uint32 ranktype_;
  ::google::protobuf::uint32 isover_;
  ::proto::message::RankFirstBody* first_;
  ::google::protobuf::RepeatedPtrField< ::proto::message::RankDataCopy > copy_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_rank_2eproto();
  friend void protobuf_AssignDesc_rank_2eproto();
  friend void protobuf_ShutdownFile_rank_2eproto();

  void InitAsDefaultInstance();
  static ActivityRank* default_instance_;
};
// -------------------------------------------------------------------

class ActivityRankList : public ::google::protobuf::Message {
 public:
  ActivityRankList();
  virtual ~ActivityRankList();

  ActivityRankList(const ActivityRankList& from);

  inline ActivityRankList& operator=(const ActivityRankList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActivityRankList& default_instance();

  void Swap(ActivityRankList* other);

  // implements Message ----------------------------------------------

  ActivityRankList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActivityRankList& from);
  void MergeFrom(const ActivityRankList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.message.ActivityRank data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::proto::message::ActivityRank& data(int index) const;
  inline ::proto::message::ActivityRank* mutable_data(int index);
  inline ::proto::message::ActivityRank* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::ActivityRank >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::ActivityRank >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:proto.message.ActivityRankList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::message::ActivityRank > data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_rank_2eproto();
  friend void protobuf_AssignDesc_rank_2eproto();
  friend void protobuf_ShutdownFile_rank_2eproto();

  void InitAsDefaultInstance();
  static ActivityRankList* default_instance_;
};
// -------------------------------------------------------------------

class SaveActivityRank : public ::google::protobuf::Message {
 public:
  SaveActivityRank();
  virtual ~SaveActivityRank();

  SaveActivityRank(const SaveActivityRank& from);

  inline SaveActivityRank& operator=(const SaveActivityRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SaveActivityRank& default_instance();

  void Swap(SaveActivityRank* other);

  // implements Message ----------------------------------------------

  SaveActivityRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SaveActivityRank& from);
  void MergeFrom(const SaveActivityRank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.message.ActivityRankList content = 1;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 1;
  inline const ::proto::message::ActivityRankList& content() const;
  inline ::proto::message::ActivityRankList* mutable_content();
  inline ::proto::message::ActivityRankList* release_content();
  inline void set_allocated_content(::proto::message::ActivityRankList* content);

  // @@protoc_insertion_point(class_scope:proto.message.SaveActivityRank)
 private:
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::message::ActivityRankList* content_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_rank_2eproto();
  friend void protobuf_AssignDesc_rank_2eproto();
  friend void protobuf_ShutdownFile_rank_2eproto();

  void InitAsDefaultInstance();
  static SaveActivityRank* default_instance_;
};
// -------------------------------------------------------------------

class AuxData : public ::google::protobuf::Message {
 public:
  AuxData();
  virtual ~AuxData();

  AuxData(const AuxData& from);

  inline AuxData& operator=(const AuxData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuxData& default_instance();

  void Swap(AuxData* other);

  // implements Message ----------------------------------------------

  AuxData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuxData& from);
  void MergeFrom(const AuxData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 exid = 1;
  inline bool has_exid() const;
  inline void clear_exid();
  static const int kExidFieldNumber = 1;
  inline ::google::protobuf::uint32 exid() const;
  inline void set_exid(::google::protobuf::uint32 value);

  // optional uint32 fitvalue = 2;
  inline bool has_fitvalue() const;
  inline void clear_fitvalue();
  static const int kFitvalueFieldNumber = 2;
  inline ::google::protobuf::uint32 fitvalue() const;
  inline void set_fitvalue(::google::protobuf::uint32 value);

  // repeated uint32 equiplist = 3;
  inline int equiplist_size() const;
  inline void clear_equiplist();
  static const int kEquiplistFieldNumber = 3;
  inline ::google::protobuf::uint32 equiplist(int index) const;
  inline void set_equiplist(int index, ::google::protobuf::uint32 value);
  inline void add_equiplist(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      equiplist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_equiplist();

  // repeated uint32 skilllist = 4;
  inline int skilllist_size() const;
  inline void clear_skilllist();
  static const int kSkilllistFieldNumber = 4;
  inline ::google::protobuf::uint32 skilllist(int index) const;
  inline void set_skilllist(int index, ::google::protobuf::uint32 value);
  inline void add_skilllist(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      skilllist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_skilllist();

  // repeated uint32 skilllev = 5;
  inline int skilllev_size() const;
  inline void clear_skilllev();
  static const int kSkilllevFieldNumber = 5;
  inline ::google::protobuf::uint32 skilllev(int index) const;
  inline void set_skilllev(int index, ::google::protobuf::uint32 value);
  inline void add_skilllev(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      skilllev() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_skilllev();

  // @@protoc_insertion_point(class_scope:proto.message.AuxData)
 private:
  inline void set_has_exid();
  inline void clear_has_exid();
  inline void set_has_fitvalue();
  inline void clear_has_fitvalue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 exid_;
  ::google::protobuf::uint32 fitvalue_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > equiplist_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > skilllist_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > skilllev_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_rank_2eproto();
  friend void protobuf_AssignDesc_rank_2eproto();
  friend void protobuf_ShutdownFile_rank_2eproto();

  void InitAsDefaultInstance();
  static AuxData* default_instance_;
};
// -------------------------------------------------------------------

class RankDBData : public ::google::protobuf::Message {
 public:
  RankDBData();
  virtual ~RankDBData();

  RankDBData(const RankDBData& from);

  inline RankDBData& operator=(const RankDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RankDBData& default_instance();

  void Swap(RankDBData* other);

  // implements Message ----------------------------------------------

  RankDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RankDBData& from);
  void MergeFrom(const RankDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional string charname = 2;
  inline bool has_charname() const;
  inline void clear_charname();
  static const int kCharnameFieldNumber = 2;
  inline const ::std::string& charname() const;
  inline void set_charname(const ::std::string& value);
  inline void set_charname(const char* value);
  inline void set_charname(const char* value, size_t size);
  inline ::std::string* mutable_charname();
  inline ::std::string* release_charname();
  inline void set_allocated_charname(::std::string* charname);

  // optional int32 rank_ranking = 4;
  inline bool has_rank_ranking() const;
  inline void clear_rank_ranking();
  static const int kRankRankingFieldNumber = 4;
  inline ::google::protobuf::int32 rank_ranking() const;
  inline void set_rank_ranking(::google::protobuf::int32 value);

  // optional uint64 updatetime = 5;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdatetimeFieldNumber = 5;
  inline ::google::protobuf::uint64 updatetime() const;
  inline void set_updatetime(::google::protobuf::uint64 value);

  // optional int32 rank_value = 6;
  inline bool has_rank_value() const;
  inline void clear_rank_value();
  static const int kRankValueFieldNumber = 6;
  inline ::google::protobuf::int32 rank_value() const;
  inline void set_rank_value(::google::protobuf::int32 value);

  // optional uint64 guildid = 7;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildidFieldNumber = 7;
  inline ::google::protobuf::uint64 guildid() const;
  inline void set_guildid(::google::protobuf::uint64 value);

  // optional string guildname = 8;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildnameFieldNumber = 8;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  inline void set_allocated_guildname(::std::string* guildname);

  // optional uint32 career = 9;
  inline bool has_career() const;
  inline void clear_career();
  static const int kCareerFieldNumber = 9;
  inline ::google::protobuf::uint32 career() const;
  inline void set_career(::google::protobuf::uint32 value);

  // optional uint32 dhlev = 10;
  inline bool has_dhlev() const;
  inline void clear_dhlev();
  static const int kDhlevFieldNumber = 10;
  inline ::google::protobuf::uint32 dhlev() const;
  inline void set_dhlev(::google::protobuf::uint32 value);

  // optional uint32 fightval = 11;
  inline bool has_fightval() const;
  inline void clear_fightval();
  static const int kFightvalFieldNumber = 11;
  inline ::google::protobuf::uint32 fightval() const;
  inline void set_fightval(::google::protobuf::uint32 value);

  // optional uint32 skinid = 12;
  inline bool has_skinid() const;
  inline void clear_skinid();
  static const int kSkinidFieldNumber = 12;
  inline ::google::protobuf::uint32 skinid() const;
  inline void set_skinid(::google::protobuf::uint32 value);

  // optional uint32 weaponskin = 13;
  inline bool has_weaponskin() const;
  inline void clear_weaponskin();
  static const int kWeaponskinFieldNumber = 13;
  inline ::google::protobuf::uint32 weaponskin() const;
  inline void set_weaponskin(::google::protobuf::uint32 value);

  // repeated uint32 equiplist = 14;
  inline int equiplist_size() const;
  inline void clear_equiplist();
  static const int kEquiplistFieldNumber = 14;
  inline ::google::protobuf::uint32 equiplist(int index) const;
  inline void set_equiplist(int index, ::google::protobuf::uint32 value);
  inline void add_equiplist(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      equiplist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_equiplist();

  // optional uint32 suitid = 15;
  inline bool has_suitid() const;
  inline void clear_suitid();
  static const int kSuitidFieldNumber = 15;
  inline ::google::protobuf::uint32 suitid() const;
  inline void set_suitid(::google::protobuf::uint32 value);

  // repeated .proto.message.AuxData datalist = 16;
  inline int datalist_size() const;
  inline void clear_datalist();
  static const int kDatalistFieldNumber = 16;
  inline const ::proto::message::AuxData& datalist(int index) const;
  inline ::proto::message::AuxData* mutable_datalist(int index);
  inline ::proto::message::AuxData* add_datalist();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::AuxData >&
      datalist() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::AuxData >*
      mutable_datalist();

  // @@protoc_insertion_point(class_scope:proto.message.RankDBData)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_charname();
  inline void clear_has_charname();
  inline void set_has_rank_ranking();
  inline void clear_has_rank_ranking();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  inline void set_has_rank_value();
  inline void clear_has_rank_value();
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_guildname();
  inline void clear_has_guildname();
  inline void set_has_career();
  inline void clear_has_career();
  inline void set_has_dhlev();
  inline void clear_has_dhlev();
  inline void set_has_fightval();
  inline void clear_has_fightval();
  inline void set_has_skinid();
  inline void clear_has_skinid();
  inline void set_has_weaponskin();
  inline void clear_has_weaponskin();
  inline void set_has_suitid();
  inline void clear_has_suitid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 charid_;
  ::std::string* charname_;
  ::google::protobuf::uint64 updatetime_;
  ::google::protobuf::int32 rank_ranking_;
  ::google::protobuf::int32 rank_value_;
  ::google::protobuf::uint64 guildid_;
  ::std::string* guildname_;
  ::google::protobuf::uint32 career_;
  ::google::protobuf::uint32 dhlev_;
  ::google::protobuf::uint32 fightval_;
  ::google::protobuf::uint32 skinid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > equiplist_;
  ::google::protobuf::uint32 weaponskin_;
  ::google::protobuf::uint32 suitid_;
  ::google::protobuf::RepeatedPtrField< ::proto::message::AuxData > datalist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  friend void  protobuf_AddDesc_rank_2eproto();
  friend void protobuf_AssignDesc_rank_2eproto();
  friend void protobuf_ShutdownFile_rank_2eproto();

  void InitAsDefaultInstance();
  static RankDBData* default_instance_;
};
// -------------------------------------------------------------------

class RankDBList : public ::google::protobuf::Message {
 public:
  RankDBList();
  virtual ~RankDBList();

  RankDBList(const RankDBList& from);

  inline RankDBList& operator=(const RankDBList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RankDBList& default_instance();

  void Swap(RankDBList* other);

  // implements Message ----------------------------------------------

  RankDBList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RankDBList& from);
  void MergeFrom(const RankDBList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.message.RankDBData datas = 1;
  inline int datas_size() const;
  inline void clear_datas();
  static const int kDatasFieldNumber = 1;
  inline const ::proto::message::RankDBData& datas(int index) const;
  inline ::proto::message::RankDBData* mutable_datas(int index);
  inline ::proto::message::RankDBData* add_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::RankDBData >&
      datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::RankDBData >*
      mutable_datas();

  // @@protoc_insertion_point(class_scope:proto.message.RankDBList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::message::RankDBData > datas_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_rank_2eproto();
  friend void protobuf_AssignDesc_rank_2eproto();
  friend void protobuf_ShutdownFile_rank_2eproto();

  void InitAsDefaultInstance();
  static RankDBList* default_instance_;
};
// -------------------------------------------------------------------

class SaveRankData : public ::google::protobuf::Message {
 public:
  SaveRankData();
  virtual ~SaveRankData();

  SaveRankData(const SaveRankData& from);

  inline SaveRankData& operator=(const SaveRankData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SaveRankData& default_instance();

  void Swap(SaveRankData* other);

  // implements Message ----------------------------------------------

  SaveRankData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SaveRankData& from);
  void MergeFrom(const SaveRankData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 rank_id = 1;
  inline bool has_rank_id() const;
  inline void clear_rank_id();
  static const int kRankIdFieldNumber = 1;
  inline ::google::protobuf::int32 rank_id() const;
  inline void set_rank_id(::google::protobuf::int32 value);

  // optional int32 rank_type = 2;
  inline bool has_rank_type() const;
  inline void clear_rank_type();
  static const int kRankTypeFieldNumber = 2;
  inline ::google::protobuf::int32 rank_type() const;
  inline void set_rank_type(::google::protobuf::int32 value);

  // optional .proto.message.RankDBList rank_datas = 3;
  inline bool has_rank_datas() const;
  inline void clear_rank_datas();
  static const int kRankDatasFieldNumber = 3;
  inline const ::proto::message::RankDBList& rank_datas() const;
  inline ::proto::message::RankDBList* mutable_rank_datas();
  inline ::proto::message::RankDBList* release_rank_datas();
  inline void set_allocated_rank_datas(::proto::message::RankDBList* rank_datas);

  // optional uint64 resettime = 4;
  inline bool has_resettime() const;
  inline void clear_resettime();
  static const int kResettimeFieldNumber = 4;
  inline ::google::protobuf::uint64 resettime() const;
  inline void set_resettime(::google::protobuf::uint64 value);

  // optional .proto.message.RankFirstBody first = 5;
  inline bool has_first() const;
  inline void clear_first();
  static const int kFirstFieldNumber = 5;
  inline const ::proto::message::RankFirstBody& first() const;
  inline ::proto::message::RankFirstBody* mutable_first();
  inline ::proto::message::RankFirstBody* release_first();
  inline void set_allocated_first(::proto::message::RankFirstBody* first);

  // @@protoc_insertion_point(class_scope:proto.message.SaveRankData)
 private:
  inline void set_has_rank_id();
  inline void clear_has_rank_id();
  inline void set_has_rank_type();
  inline void clear_has_rank_type();
  inline void set_has_rank_datas();
  inline void clear_has_rank_datas();
  inline void set_has_resettime();
  inline void clear_has_resettime();
  inline void set_has_first();
  inline void clear_has_first();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 rank_id_;
  ::google::protobuf::int32 rank_type_;
  ::proto::message::RankDBList* rank_datas_;
  ::google::protobuf::uint64 resettime_;
  ::proto::message::RankFirstBody* first_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_rank_2eproto();
  friend void protobuf_AssignDesc_rank_2eproto();
  friend void protobuf_ShutdownFile_rank_2eproto();

  void InitAsDefaultInstance();
  static SaveRankData* default_instance_;
};
// -------------------------------------------------------------------

class Rank_CS_GetRankInfo : public ::google::protobuf::Message {
 public:
  Rank_CS_GetRankInfo();
  virtual ~Rank_CS_GetRankInfo();

  Rank_CS_GetRankInfo(const Rank_CS_GetRankInfo& from);

  inline Rank_CS_GetRankInfo& operator=(const Rank_CS_GetRankInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Rank_CS_GetRankInfo& default_instance();

  void Swap(Rank_CS_GetRankInfo* other);

  // implements Message ----------------------------------------------

  Rank_CS_GetRankInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Rank_CS_GetRankInfo& from);
  void MergeFrom(const Rank_CS_GetRankInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .proto.message.eRankType rank_type = 1;
  inline bool has_rank_type() const;
  inline void clear_rank_type();
  static const int kRankTypeFieldNumber = 1;
  inline ::proto::message::eRankType rank_type() const;
  inline void set_rank_type(::proto::message::eRankType value);

  // optional int32 ranking_start = 2;
  inline bool has_ranking_start() const;
  inline void clear_ranking_start();
  static const int kRankingStartFieldNumber = 2;
  inline ::google::protobuf::int32 ranking_start() const;
  inline void set_ranking_start(::google::protobuf::int32 value);

  // optional int32 rankint_end = 3;
  inline bool has_rankint_end() const;
  inline void clear_rankint_end();
  static const int kRankintEndFieldNumber = 3;
  inline ::google::protobuf::int32 rankint_end() const;
  inline void set_rankint_end(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Rank_CS_GetRankInfo)
 private:
  inline void set_has_rank_type();
  inline void clear_has_rank_type();
  inline void set_has_ranking_start();
  inline void clear_has_ranking_start();
  inline void set_has_rankint_end();
  inline void clear_has_rankint_end();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int rank_type_;
  ::google::protobuf::int32 ranking_start_;
  ::google::protobuf::int32 rankint_end_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_rank_2eproto();
  friend void protobuf_AssignDesc_rank_2eproto();
  friend void protobuf_ShutdownFile_rank_2eproto();

  void InitAsDefaultInstance();
  static Rank_CS_GetRankInfo* default_instance_;
};
// -------------------------------------------------------------------

class Rank_SC_GetRankInfo : public ::google::protobuf::Message {
 public:
  Rank_SC_GetRankInfo();
  virtual ~Rank_SC_GetRankInfo();

  Rank_SC_GetRankInfo(const Rank_SC_GetRankInfo& from);

  inline Rank_SC_GetRankInfo& operator=(const Rank_SC_GetRankInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Rank_SC_GetRankInfo& default_instance();

  void Swap(Rank_SC_GetRankInfo* other);

  // implements Message ----------------------------------------------

  Rank_SC_GetRankInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Rank_SC_GetRankInfo& from);
  void MergeFrom(const Rank_SC_GetRankInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .proto.message.eRankType rank_type = 1;
  inline bool has_rank_type() const;
  inline void clear_rank_type();
  static const int kRankTypeFieldNumber = 1;
  inline ::proto::message::eRankType rank_type() const;
  inline void set_rank_type(::proto::message::eRankType value);

  // optional int32 total_num = 2;
  inline bool has_total_num() const;
  inline void clear_total_num();
  static const int kTotalNumFieldNumber = 2;
  inline ::google::protobuf::int32 total_num() const;
  inline void set_total_num(::google::protobuf::int32 value);

  // repeated .proto.message.RankDBData rank_list = 3;
  inline int rank_list_size() const;
  inline void clear_rank_list();
  static const int kRankListFieldNumber = 3;
  inline const ::proto::message::RankDBData& rank_list(int index) const;
  inline ::proto::message::RankDBData* mutable_rank_list(int index);
  inline ::proto::message::RankDBData* add_rank_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::RankDBData >&
      rank_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::RankDBData >*
      mutable_rank_list();

  // optional .proto.message.RankDBData rank_self = 4;
  inline bool has_rank_self() const;
  inline void clear_rank_self();
  static const int kRankSelfFieldNumber = 4;
  inline const ::proto::message::RankDBData& rank_self() const;
  inline ::proto::message::RankDBData* mutable_rank_self();
  inline ::proto::message::RankDBData* release_rank_self();
  inline void set_allocated_rank_self(::proto::message::RankDBData* rank_self);

  // @@protoc_insertion_point(class_scope:proto.message.Rank_SC_GetRankInfo)
 private:
  inline void set_has_rank_type();
  inline void clear_has_rank_type();
  inline void set_has_total_num();
  inline void clear_has_total_num();
  inline void set_has_rank_self();
  inline void clear_has_rank_self();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int rank_type_;
  ::google::protobuf::int32 total_num_;
  ::google::protobuf::RepeatedPtrField< ::proto::message::RankDBData > rank_list_;
  ::proto::message::RankDBData* rank_self_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_rank_2eproto();
  friend void protobuf_AssignDesc_rank_2eproto();
  friend void protobuf_ShutdownFile_rank_2eproto();

  void InitAsDefaultInstance();
  static Rank_SC_GetRankInfo* default_instance_;
};
// -------------------------------------------------------------------

class Rank_CS_ReqActivityReward : public ::google::protobuf::Message {
 public:
  Rank_CS_ReqActivityReward();
  virtual ~Rank_CS_ReqActivityReward();

  Rank_CS_ReqActivityReward(const Rank_CS_ReqActivityReward& from);

  inline Rank_CS_ReqActivityReward& operator=(const Rank_CS_ReqActivityReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Rank_CS_ReqActivityReward& default_instance();

  void Swap(Rank_CS_ReqActivityReward* other);

  // implements Message ----------------------------------------------

  Rank_CS_ReqActivityReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Rank_CS_ReqActivityReward& from);
  void MergeFrom(const Rank_CS_ReqActivityReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 conditionid = 1;
  inline bool has_conditionid() const;
  inline void clear_conditionid();
  static const int kConditionidFieldNumber = 1;
  inline ::google::protobuf::uint32 conditionid() const;
  inline void set_conditionid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Rank_CS_ReqActivityReward)
 private:
  inline void set_has_conditionid();
  inline void clear_has_conditionid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 conditionid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_rank_2eproto();
  friend void protobuf_AssignDesc_rank_2eproto();
  friend void protobuf_ShutdownFile_rank_2eproto();

  void InitAsDefaultInstance();
  static Rank_CS_ReqActivityReward* default_instance_;
};
// -------------------------------------------------------------------

class Rank_CS_ReqRankRewardData : public ::google::protobuf::Message {
 public:
  Rank_CS_ReqRankRewardData();
  virtual ~Rank_CS_ReqRankRewardData();

  Rank_CS_ReqRankRewardData(const Rank_CS_ReqRankRewardData& from);

  inline Rank_CS_ReqRankRewardData& operator=(const Rank_CS_ReqRankRewardData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Rank_CS_ReqRankRewardData& default_instance();

  void Swap(Rank_CS_ReqRankRewardData* other);

  // implements Message ----------------------------------------------

  Rank_CS_ReqRankRewardData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Rank_CS_ReqRankRewardData& from);
  void MergeFrom(const Rank_CS_ReqRankRewardData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ranktype = 1;
  inline bool has_ranktype() const;
  inline void clear_ranktype();
  static const int kRanktypeFieldNumber = 1;
  inline ::google::protobuf::uint32 ranktype() const;
  inline void set_ranktype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Rank_CS_ReqRankRewardData)
 private:
  inline void set_has_ranktype();
  inline void clear_has_ranktype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 ranktype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_rank_2eproto();
  friend void protobuf_AssignDesc_rank_2eproto();
  friend void protobuf_ShutdownFile_rank_2eproto();

  void InitAsDefaultInstance();
  static Rank_CS_ReqRankRewardData* default_instance_;
};
// -------------------------------------------------------------------

class Rank_SC_AckRankRewardData : public ::google::protobuf::Message {
 public:
  Rank_SC_AckRankRewardData();
  virtual ~Rank_SC_AckRankRewardData();

  Rank_SC_AckRankRewardData(const Rank_SC_AckRankRewardData& from);

  inline Rank_SC_AckRankRewardData& operator=(const Rank_SC_AckRankRewardData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Rank_SC_AckRankRewardData& default_instance();

  void Swap(Rank_SC_AckRankRewardData* other);

  // implements Message ----------------------------------------------

  Rank_SC_AckRankRewardData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Rank_SC_AckRankRewardData& from);
  void MergeFrom(const Rank_SC_AckRankRewardData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.message.ActivityRank rankdata = 1;
  inline bool has_rankdata() const;
  inline void clear_rankdata();
  static const int kRankdataFieldNumber = 1;
  inline const ::proto::message::ActivityRank& rankdata() const;
  inline ::proto::message::ActivityRank* mutable_rankdata();
  inline ::proto::message::ActivityRank* release_rankdata();
  inline void set_allocated_rankdata(::proto::message::ActivityRank* rankdata);

  // @@protoc_insertion_point(class_scope:proto.message.Rank_SC_AckRankRewardData)
 private:
  inline void set_has_rankdata();
  inline void clear_has_rankdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::message::ActivityRank* rankdata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_rank_2eproto();
  friend void protobuf_AssignDesc_rank_2eproto();
  friend void protobuf_ShutdownFile_rank_2eproto();

  void InitAsDefaultInstance();
  static Rank_SC_AckRankRewardData* default_instance_;
};
// -------------------------------------------------------------------

class Rank_SC_AckPvPSignRankFirst : public ::google::protobuf::Message {
 public:
  Rank_SC_AckPvPSignRankFirst();
  virtual ~Rank_SC_AckPvPSignRankFirst();

  Rank_SC_AckPvPSignRankFirst(const Rank_SC_AckPvPSignRankFirst& from);

  inline Rank_SC_AckPvPSignRankFirst& operator=(const Rank_SC_AckPvPSignRankFirst& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Rank_SC_AckPvPSignRankFirst& default_instance();

  void Swap(Rank_SC_AckPvPSignRankFirst* other);

  // implements Message ----------------------------------------------

  Rank_SC_AckPvPSignRankFirst* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Rank_SC_AckPvPSignRankFirst& from);
  void MergeFrom(const Rank_SC_AckPvPSignRankFirst& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.message.RankFirstBody data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::proto::message::RankFirstBody& data() const;
  inline ::proto::message::RankFirstBody* mutable_data();
  inline ::proto::message::RankFirstBody* release_data();
  inline void set_allocated_data(::proto::message::RankFirstBody* data);

  // @@protoc_insertion_point(class_scope:proto.message.Rank_SC_AckPvPSignRankFirst)
 private:
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::message::RankFirstBody* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_rank_2eproto();
  friend void protobuf_AssignDesc_rank_2eproto();
  friend void protobuf_ShutdownFile_rank_2eproto();

  void InitAsDefaultInstance();
  static Rank_SC_AckPvPSignRankFirst* default_instance_;
};
// ===================================================================


// ===================================================================

// RankDataCopy

// optional uint32 ranking = 1;
inline bool RankDataCopy::has_ranking() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RankDataCopy::set_has_ranking() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RankDataCopy::clear_has_ranking() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RankDataCopy::clear_ranking() {
  ranking_ = 0u;
  clear_has_ranking();
}
inline ::google::protobuf::uint32 RankDataCopy::ranking() const {
  return ranking_;
}
inline void RankDataCopy::set_ranking(::google::protobuf::uint32 value) {
  set_has_ranking();
  ranking_ = value;
}

// optional string name = 2;
inline bool RankDataCopy::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RankDataCopy::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RankDataCopy::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RankDataCopy::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RankDataCopy::name() const {
  return *name_;
}
inline void RankDataCopy::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RankDataCopy::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RankDataCopy::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RankDataCopy::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* RankDataCopy::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RankDataCopy::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 value = 3;
inline bool RankDataCopy::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RankDataCopy::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RankDataCopy::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RankDataCopy::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 RankDataCopy::value() const {
  return value_;
}
inline void RankDataCopy::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// RankFirstBody

// optional string firstname = 1;
inline bool RankFirstBody::has_firstname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RankFirstBody::set_has_firstname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RankFirstBody::clear_has_firstname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RankFirstBody::clear_firstname() {
  if (firstname_ != &::google::protobuf::internal::kEmptyString) {
    firstname_->clear();
  }
  clear_has_firstname();
}
inline const ::std::string& RankFirstBody::firstname() const {
  return *firstname_;
}
inline void RankFirstBody::set_firstname(const ::std::string& value) {
  set_has_firstname();
  if (firstname_ == &::google::protobuf::internal::kEmptyString) {
    firstname_ = new ::std::string;
  }
  firstname_->assign(value);
}
inline void RankFirstBody::set_firstname(const char* value) {
  set_has_firstname();
  if (firstname_ == &::google::protobuf::internal::kEmptyString) {
    firstname_ = new ::std::string;
  }
  firstname_->assign(value);
}
inline void RankFirstBody::set_firstname(const char* value, size_t size) {
  set_has_firstname();
  if (firstname_ == &::google::protobuf::internal::kEmptyString) {
    firstname_ = new ::std::string;
  }
  firstname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RankFirstBody::mutable_firstname() {
  set_has_firstname();
  if (firstname_ == &::google::protobuf::internal::kEmptyString) {
    firstname_ = new ::std::string;
  }
  return firstname_;
}
inline ::std::string* RankFirstBody::release_firstname() {
  clear_has_firstname();
  if (firstname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = firstname_;
    firstname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RankFirstBody::set_allocated_firstname(::std::string* firstname) {
  if (firstname_ != &::google::protobuf::internal::kEmptyString) {
    delete firstname_;
  }
  if (firstname) {
    set_has_firstname();
    firstname_ = firstname;
  } else {
    clear_has_firstname();
    firstname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 skinid = 2;
inline bool RankFirstBody::has_skinid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RankFirstBody::set_has_skinid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RankFirstBody::clear_has_skinid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RankFirstBody::clear_skinid() {
  skinid_ = 0u;
  clear_has_skinid();
}
inline ::google::protobuf::uint32 RankFirstBody::skinid() const {
  return skinid_;
}
inline void RankFirstBody::set_skinid(::google::protobuf::uint32 value) {
  set_has_skinid();
  skinid_ = value;
}

// optional uint32 suitid = 3;
inline bool RankFirstBody::has_suitid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RankFirstBody::set_has_suitid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RankFirstBody::clear_has_suitid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RankFirstBody::clear_suitid() {
  suitid_ = 0u;
  clear_has_suitid();
}
inline ::google::protobuf::uint32 RankFirstBody::suitid() const {
  return suitid_;
}
inline void RankFirstBody::set_suitid(::google::protobuf::uint32 value) {
  set_has_suitid();
  suitid_ = value;
}

// optional uint32 weaponid = 4;
inline bool RankFirstBody::has_weaponid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RankFirstBody::set_has_weaponid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RankFirstBody::clear_has_weaponid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RankFirstBody::clear_weaponid() {
  weaponid_ = 0u;
  clear_has_weaponid();
}
inline ::google::protobuf::uint32 RankFirstBody::weaponid() const {
  return weaponid_;
}
inline void RankFirstBody::set_weaponid(::google::protobuf::uint32 value) {
  set_has_weaponid();
  weaponid_ = value;
}

// optional uint32 weaponskin = 5;
inline bool RankFirstBody::has_weaponskin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RankFirstBody::set_has_weaponskin() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RankFirstBody::clear_has_weaponskin() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RankFirstBody::clear_weaponskin() {
  weaponskin_ = 0u;
  clear_has_weaponskin();
}
inline ::google::protobuf::uint32 RankFirstBody::weaponskin() const {
  return weaponskin_;
}
inline void RankFirstBody::set_weaponskin(::google::protobuf::uint32 value) {
  set_has_weaponskin();
  weaponskin_ = value;
}

// optional uint32 showid = 6;
inline bool RankFirstBody::has_showid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RankFirstBody::set_has_showid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RankFirstBody::clear_has_showid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RankFirstBody::clear_showid() {
  showid_ = 0u;
  clear_has_showid();
}
inline ::google::protobuf::uint32 RankFirstBody::showid() const {
  return showid_;
}
inline void RankFirstBody::set_showid(::google::protobuf::uint32 value) {
  set_has_showid();
  showid_ = value;
}

// optional uint32 career = 7;
inline bool RankFirstBody::has_career() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RankFirstBody::set_has_career() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RankFirstBody::clear_has_career() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RankFirstBody::clear_career() {
  career_ = 0u;
  clear_has_career();
}
inline ::google::protobuf::uint32 RankFirstBody::career() const {
  return career_;
}
inline void RankFirstBody::set_career(::google::protobuf::uint32 value) {
  set_has_career();
  career_ = value;
}

// optional uint64 playerid = 8;
inline bool RankFirstBody::has_playerid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RankFirstBody::set_has_playerid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RankFirstBody::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RankFirstBody::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::uint64 RankFirstBody::playerid() const {
  return playerid_;
}
inline void RankFirstBody::set_playerid(::google::protobuf::uint64 value) {
  set_has_playerid();
  playerid_ = value;
}

// -------------------------------------------------------------------

// RewardRecord

// optional uint32 condition = 1;
inline bool RewardRecord::has_condition() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RewardRecord::set_has_condition() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RewardRecord::clear_has_condition() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RewardRecord::clear_condition() {
  condition_ = 0u;
  clear_has_condition();
}
inline ::google::protobuf::uint32 RewardRecord::condition() const {
  return condition_;
}
inline void RewardRecord::set_condition(::google::protobuf::uint32 value) {
  set_has_condition();
  condition_ = value;
}

// optional int32 counts = 2;
inline bool RewardRecord::has_counts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RewardRecord::set_has_counts() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RewardRecord::clear_has_counts() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RewardRecord::clear_counts() {
  counts_ = 0;
  clear_has_counts();
}
inline ::google::protobuf::int32 RewardRecord::counts() const {
  return counts_;
}
inline void RewardRecord::set_counts(::google::protobuf::int32 value) {
  set_has_counts();
  counts_ = value;
}

// repeated uint64 playerid = 3;
inline int RewardRecord::playerid_size() const {
  return playerid_.size();
}
inline void RewardRecord::clear_playerid() {
  playerid_.Clear();
}
inline ::google::protobuf::uint64 RewardRecord::playerid(int index) const {
  return playerid_.Get(index);
}
inline void RewardRecord::set_playerid(int index, ::google::protobuf::uint64 value) {
  playerid_.Set(index, value);
}
inline void RewardRecord::add_playerid(::google::protobuf::uint64 value) {
  playerid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
RewardRecord::playerid() const {
  return playerid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
RewardRecord::mutable_playerid() {
  return &playerid_;
}

// optional bool isget = 4;
inline bool RewardRecord::has_isget() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RewardRecord::set_has_isget() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RewardRecord::clear_has_isget() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RewardRecord::clear_isget() {
  isget_ = false;
  clear_has_isget();
}
inline bool RewardRecord::isget() const {
  return isget_;
}
inline void RewardRecord::set_isget(bool value) {
  set_has_isget();
  isget_ = value;
}

// -------------------------------------------------------------------

// ActivityRank

// optional uint32 ranktype = 1;
inline bool ActivityRank::has_ranktype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivityRank::set_has_ranktype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActivityRank::clear_has_ranktype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActivityRank::clear_ranktype() {
  ranktype_ = 0u;
  clear_has_ranktype();
}
inline ::google::protobuf::uint32 ActivityRank::ranktype() const {
  return ranktype_;
}
inline void ActivityRank::set_ranktype(::google::protobuf::uint32 value) {
  set_has_ranktype();
  ranktype_ = value;
}

// repeated .proto.message.RewardRecord reward = 2;
inline int ActivityRank::reward_size() const {
  return reward_.size();
}
inline void ActivityRank::clear_reward() {
  reward_.Clear();
}
inline const ::proto::message::RewardRecord& ActivityRank::reward(int index) const {
  return reward_.Get(index);
}
inline ::proto::message::RewardRecord* ActivityRank::mutable_reward(int index) {
  return reward_.Mutable(index);
}
inline ::proto::message::RewardRecord* ActivityRank::add_reward() {
  return reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::RewardRecord >&
ActivityRank::reward() const {
  return reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::RewardRecord >*
ActivityRank::mutable_reward() {
  return &reward_;
}

// optional .proto.message.RankFirstBody first = 3;
inline bool ActivityRank::has_first() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActivityRank::set_has_first() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ActivityRank::clear_has_first() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ActivityRank::clear_first() {
  if (first_ != NULL) first_->::proto::message::RankFirstBody::Clear();
  clear_has_first();
}
inline const ::proto::message::RankFirstBody& ActivityRank::first() const {
  return first_ != NULL ? *first_ : *default_instance_->first_;
}
inline ::proto::message::RankFirstBody* ActivityRank::mutable_first() {
  set_has_first();
  if (first_ == NULL) first_ = new ::proto::message::RankFirstBody;
  return first_;
}
inline ::proto::message::RankFirstBody* ActivityRank::release_first() {
  clear_has_first();
  ::proto::message::RankFirstBody* temp = first_;
  first_ = NULL;
  return temp;
}
inline void ActivityRank::set_allocated_first(::proto::message::RankFirstBody* first) {
  delete first_;
  first_ = first;
  if (first) {
    set_has_first();
  } else {
    clear_has_first();
  }
}

// optional uint32 isOver = 4;
inline bool ActivityRank::has_isover() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ActivityRank::set_has_isover() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ActivityRank::clear_has_isover() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ActivityRank::clear_isover() {
  isover_ = 0u;
  clear_has_isover();
}
inline ::google::protobuf::uint32 ActivityRank::isover() const {
  return isover_;
}
inline void ActivityRank::set_isover(::google::protobuf::uint32 value) {
  set_has_isover();
  isover_ = value;
}

// repeated .proto.message.RankDataCopy copy = 5;
inline int ActivityRank::copy_size() const {
  return copy_.size();
}
inline void ActivityRank::clear_copy() {
  copy_.Clear();
}
inline const ::proto::message::RankDataCopy& ActivityRank::copy(int index) const {
  return copy_.Get(index);
}
inline ::proto::message::RankDataCopy* ActivityRank::mutable_copy(int index) {
  return copy_.Mutable(index);
}
inline ::proto::message::RankDataCopy* ActivityRank::add_copy() {
  return copy_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::RankDataCopy >&
ActivityRank::copy() const {
  return copy_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::RankDataCopy >*
ActivityRank::mutable_copy() {
  return &copy_;
}

// -------------------------------------------------------------------

// ActivityRankList

// repeated .proto.message.ActivityRank data = 1;
inline int ActivityRankList::data_size() const {
  return data_.size();
}
inline void ActivityRankList::clear_data() {
  data_.Clear();
}
inline const ::proto::message::ActivityRank& ActivityRankList::data(int index) const {
  return data_.Get(index);
}
inline ::proto::message::ActivityRank* ActivityRankList::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::proto::message::ActivityRank* ActivityRankList::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::ActivityRank >&
ActivityRankList::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::ActivityRank >*
ActivityRankList::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// SaveActivityRank

// optional .proto.message.ActivityRankList content = 1;
inline bool SaveActivityRank::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SaveActivityRank::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SaveActivityRank::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SaveActivityRank::clear_content() {
  if (content_ != NULL) content_->::proto::message::ActivityRankList::Clear();
  clear_has_content();
}
inline const ::proto::message::ActivityRankList& SaveActivityRank::content() const {
  return content_ != NULL ? *content_ : *default_instance_->content_;
}
inline ::proto::message::ActivityRankList* SaveActivityRank::mutable_content() {
  set_has_content();
  if (content_ == NULL) content_ = new ::proto::message::ActivityRankList;
  return content_;
}
inline ::proto::message::ActivityRankList* SaveActivityRank::release_content() {
  clear_has_content();
  ::proto::message::ActivityRankList* temp = content_;
  content_ = NULL;
  return temp;
}
inline void SaveActivityRank::set_allocated_content(::proto::message::ActivityRankList* content) {
  delete content_;
  content_ = content;
  if (content) {
    set_has_content();
  } else {
    clear_has_content();
  }
}

// -------------------------------------------------------------------

// AuxData

// optional uint32 exid = 1;
inline bool AuxData::has_exid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuxData::set_has_exid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuxData::clear_has_exid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuxData::clear_exid() {
  exid_ = 0u;
  clear_has_exid();
}
inline ::google::protobuf::uint32 AuxData::exid() const {
  return exid_;
}
inline void AuxData::set_exid(::google::protobuf::uint32 value) {
  set_has_exid();
  exid_ = value;
}

// optional uint32 fitvalue = 2;
inline bool AuxData::has_fitvalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AuxData::set_has_fitvalue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AuxData::clear_has_fitvalue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AuxData::clear_fitvalue() {
  fitvalue_ = 0u;
  clear_has_fitvalue();
}
inline ::google::protobuf::uint32 AuxData::fitvalue() const {
  return fitvalue_;
}
inline void AuxData::set_fitvalue(::google::protobuf::uint32 value) {
  set_has_fitvalue();
  fitvalue_ = value;
}

// repeated uint32 equiplist = 3;
inline int AuxData::equiplist_size() const {
  return equiplist_.size();
}
inline void AuxData::clear_equiplist() {
  equiplist_.Clear();
}
inline ::google::protobuf::uint32 AuxData::equiplist(int index) const {
  return equiplist_.Get(index);
}
inline void AuxData::set_equiplist(int index, ::google::protobuf::uint32 value) {
  equiplist_.Set(index, value);
}
inline void AuxData::add_equiplist(::google::protobuf::uint32 value) {
  equiplist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
AuxData::equiplist() const {
  return equiplist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
AuxData::mutable_equiplist() {
  return &equiplist_;
}

// repeated uint32 skilllist = 4;
inline int AuxData::skilllist_size() const {
  return skilllist_.size();
}
inline void AuxData::clear_skilllist() {
  skilllist_.Clear();
}
inline ::google::protobuf::uint32 AuxData::skilllist(int index) const {
  return skilllist_.Get(index);
}
inline void AuxData::set_skilllist(int index, ::google::protobuf::uint32 value) {
  skilllist_.Set(index, value);
}
inline void AuxData::add_skilllist(::google::protobuf::uint32 value) {
  skilllist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
AuxData::skilllist() const {
  return skilllist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
AuxData::mutable_skilllist() {
  return &skilllist_;
}

// repeated uint32 skilllev = 5;
inline int AuxData::skilllev_size() const {
  return skilllev_.size();
}
inline void AuxData::clear_skilllev() {
  skilllev_.Clear();
}
inline ::google::protobuf::uint32 AuxData::skilllev(int index) const {
  return skilllev_.Get(index);
}
inline void AuxData::set_skilllev(int index, ::google::protobuf::uint32 value) {
  skilllev_.Set(index, value);
}
inline void AuxData::add_skilllev(::google::protobuf::uint32 value) {
  skilllev_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
AuxData::skilllev() const {
  return skilllev_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
AuxData::mutable_skilllev() {
  return &skilllev_;
}

// -------------------------------------------------------------------

// RankDBData

// optional uint64 charid = 1;
inline bool RankDBData::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RankDBData::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RankDBData::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RankDBData::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 RankDBData::charid() const {
  return charid_;
}
inline void RankDBData::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
}

// optional string charname = 2;
inline bool RankDBData::has_charname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RankDBData::set_has_charname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RankDBData::clear_has_charname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RankDBData::clear_charname() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    charname_->clear();
  }
  clear_has_charname();
}
inline const ::std::string& RankDBData::charname() const {
  return *charname_;
}
inline void RankDBData::set_charname(const ::std::string& value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
}
inline void RankDBData::set_charname(const char* value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
}
inline void RankDBData::set_charname(const char* value, size_t size) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RankDBData::mutable_charname() {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  return charname_;
}
inline ::std::string* RankDBData::release_charname() {
  clear_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = charname_;
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RankDBData::set_allocated_charname(::std::string* charname) {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (charname) {
    set_has_charname();
    charname_ = charname;
  } else {
    clear_has_charname();
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 rank_ranking = 4;
inline bool RankDBData::has_rank_ranking() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RankDBData::set_has_rank_ranking() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RankDBData::clear_has_rank_ranking() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RankDBData::clear_rank_ranking() {
  rank_ranking_ = 0;
  clear_has_rank_ranking();
}
inline ::google::protobuf::int32 RankDBData::rank_ranking() const {
  return rank_ranking_;
}
inline void RankDBData::set_rank_ranking(::google::protobuf::int32 value) {
  set_has_rank_ranking();
  rank_ranking_ = value;
}

// optional uint64 updatetime = 5;
inline bool RankDBData::has_updatetime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RankDBData::set_has_updatetime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RankDBData::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RankDBData::clear_updatetime() {
  updatetime_ = GOOGLE_ULONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::uint64 RankDBData::updatetime() const {
  return updatetime_;
}
inline void RankDBData::set_updatetime(::google::protobuf::uint64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// optional int32 rank_value = 6;
inline bool RankDBData::has_rank_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RankDBData::set_has_rank_value() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RankDBData::clear_has_rank_value() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RankDBData::clear_rank_value() {
  rank_value_ = 0;
  clear_has_rank_value();
}
inline ::google::protobuf::int32 RankDBData::rank_value() const {
  return rank_value_;
}
inline void RankDBData::set_rank_value(::google::protobuf::int32 value) {
  set_has_rank_value();
  rank_value_ = value;
}

// optional uint64 guildid = 7;
inline bool RankDBData::has_guildid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RankDBData::set_has_guildid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RankDBData::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RankDBData::clear_guildid() {
  guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildid();
}
inline ::google::protobuf::uint64 RankDBData::guildid() const {
  return guildid_;
}
inline void RankDBData::set_guildid(::google::protobuf::uint64 value) {
  set_has_guildid();
  guildid_ = value;
}

// optional string guildname = 8;
inline bool RankDBData::has_guildname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RankDBData::set_has_guildname() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RankDBData::clear_has_guildname() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RankDBData::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    guildname_->clear();
  }
  clear_has_guildname();
}
inline const ::std::string& RankDBData::guildname() const {
  return *guildname_;
}
inline void RankDBData::set_guildname(const ::std::string& value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void RankDBData::set_guildname(const char* value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void RankDBData::set_guildname(const char* value, size_t size) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RankDBData::mutable_guildname() {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  return guildname_;
}
inline ::std::string* RankDBData::release_guildname() {
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RankDBData::set_allocated_guildname(::std::string* guildname) {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (guildname) {
    set_has_guildname();
    guildname_ = guildname;
  } else {
    clear_has_guildname();
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 career = 9;
inline bool RankDBData::has_career() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RankDBData::set_has_career() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RankDBData::clear_has_career() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RankDBData::clear_career() {
  career_ = 0u;
  clear_has_career();
}
inline ::google::protobuf::uint32 RankDBData::career() const {
  return career_;
}
inline void RankDBData::set_career(::google::protobuf::uint32 value) {
  set_has_career();
  career_ = value;
}

// optional uint32 dhlev = 10;
inline bool RankDBData::has_dhlev() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RankDBData::set_has_dhlev() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RankDBData::clear_has_dhlev() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RankDBData::clear_dhlev() {
  dhlev_ = 0u;
  clear_has_dhlev();
}
inline ::google::protobuf::uint32 RankDBData::dhlev() const {
  return dhlev_;
}
inline void RankDBData::set_dhlev(::google::protobuf::uint32 value) {
  set_has_dhlev();
  dhlev_ = value;
}

// optional uint32 fightval = 11;
inline bool RankDBData::has_fightval() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RankDBData::set_has_fightval() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RankDBData::clear_has_fightval() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RankDBData::clear_fightval() {
  fightval_ = 0u;
  clear_has_fightval();
}
inline ::google::protobuf::uint32 RankDBData::fightval() const {
  return fightval_;
}
inline void RankDBData::set_fightval(::google::protobuf::uint32 value) {
  set_has_fightval();
  fightval_ = value;
}

// optional uint32 skinid = 12;
inline bool RankDBData::has_skinid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RankDBData::set_has_skinid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RankDBData::clear_has_skinid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RankDBData::clear_skinid() {
  skinid_ = 0u;
  clear_has_skinid();
}
inline ::google::protobuf::uint32 RankDBData::skinid() const {
  return skinid_;
}
inline void RankDBData::set_skinid(::google::protobuf::uint32 value) {
  set_has_skinid();
  skinid_ = value;
}

// optional uint32 weaponskin = 13;
inline bool RankDBData::has_weaponskin() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RankDBData::set_has_weaponskin() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RankDBData::clear_has_weaponskin() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RankDBData::clear_weaponskin() {
  weaponskin_ = 0u;
  clear_has_weaponskin();
}
inline ::google::protobuf::uint32 RankDBData::weaponskin() const {
  return weaponskin_;
}
inline void RankDBData::set_weaponskin(::google::protobuf::uint32 value) {
  set_has_weaponskin();
  weaponskin_ = value;
}

// repeated uint32 equiplist = 14;
inline int RankDBData::equiplist_size() const {
  return equiplist_.size();
}
inline void RankDBData::clear_equiplist() {
  equiplist_.Clear();
}
inline ::google::protobuf::uint32 RankDBData::equiplist(int index) const {
  return equiplist_.Get(index);
}
inline void RankDBData::set_equiplist(int index, ::google::protobuf::uint32 value) {
  equiplist_.Set(index, value);
}
inline void RankDBData::add_equiplist(::google::protobuf::uint32 value) {
  equiplist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
RankDBData::equiplist() const {
  return equiplist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
RankDBData::mutable_equiplist() {
  return &equiplist_;
}

// optional uint32 suitid = 15;
inline bool RankDBData::has_suitid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RankDBData::set_has_suitid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RankDBData::clear_has_suitid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RankDBData::clear_suitid() {
  suitid_ = 0u;
  clear_has_suitid();
}
inline ::google::protobuf::uint32 RankDBData::suitid() const {
  return suitid_;
}
inline void RankDBData::set_suitid(::google::protobuf::uint32 value) {
  set_has_suitid();
  suitid_ = value;
}

// repeated .proto.message.AuxData datalist = 16;
inline int RankDBData::datalist_size() const {
  return datalist_.size();
}
inline void RankDBData::clear_datalist() {
  datalist_.Clear();
}
inline const ::proto::message::AuxData& RankDBData::datalist(int index) const {
  return datalist_.Get(index);
}
inline ::proto::message::AuxData* RankDBData::mutable_datalist(int index) {
  return datalist_.Mutable(index);
}
inline ::proto::message::AuxData* RankDBData::add_datalist() {
  return datalist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::AuxData >&
RankDBData::datalist() const {
  return datalist_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::AuxData >*
RankDBData::mutable_datalist() {
  return &datalist_;
}

// -------------------------------------------------------------------

// RankDBList

// repeated .proto.message.RankDBData datas = 1;
inline int RankDBList::datas_size() const {
  return datas_.size();
}
inline void RankDBList::clear_datas() {
  datas_.Clear();
}
inline const ::proto::message::RankDBData& RankDBList::datas(int index) const {
  return datas_.Get(index);
}
inline ::proto::message::RankDBData* RankDBList::mutable_datas(int index) {
  return datas_.Mutable(index);
}
inline ::proto::message::RankDBData* RankDBList::add_datas() {
  return datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::RankDBData >&
RankDBList::datas() const {
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::RankDBData >*
RankDBList::mutable_datas() {
  return &datas_;
}

// -------------------------------------------------------------------

// SaveRankData

// optional int32 rank_id = 1;
inline bool SaveRankData::has_rank_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SaveRankData::set_has_rank_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SaveRankData::clear_has_rank_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SaveRankData::clear_rank_id() {
  rank_id_ = 0;
  clear_has_rank_id();
}
inline ::google::protobuf::int32 SaveRankData::rank_id() const {
  return rank_id_;
}
inline void SaveRankData::set_rank_id(::google::protobuf::int32 value) {
  set_has_rank_id();
  rank_id_ = value;
}

// optional int32 rank_type = 2;
inline bool SaveRankData::has_rank_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SaveRankData::set_has_rank_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SaveRankData::clear_has_rank_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SaveRankData::clear_rank_type() {
  rank_type_ = 0;
  clear_has_rank_type();
}
inline ::google::protobuf::int32 SaveRankData::rank_type() const {
  return rank_type_;
}
inline void SaveRankData::set_rank_type(::google::protobuf::int32 value) {
  set_has_rank_type();
  rank_type_ = value;
}

// optional .proto.message.RankDBList rank_datas = 3;
inline bool SaveRankData::has_rank_datas() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SaveRankData::set_has_rank_datas() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SaveRankData::clear_has_rank_datas() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SaveRankData::clear_rank_datas() {
  if (rank_datas_ != NULL) rank_datas_->::proto::message::RankDBList::Clear();
  clear_has_rank_datas();
}
inline const ::proto::message::RankDBList& SaveRankData::rank_datas() const {
  return rank_datas_ != NULL ? *rank_datas_ : *default_instance_->rank_datas_;
}
inline ::proto::message::RankDBList* SaveRankData::mutable_rank_datas() {
  set_has_rank_datas();
  if (rank_datas_ == NULL) rank_datas_ = new ::proto::message::RankDBList;
  return rank_datas_;
}
inline ::proto::message::RankDBList* SaveRankData::release_rank_datas() {
  clear_has_rank_datas();
  ::proto::message::RankDBList* temp = rank_datas_;
  rank_datas_ = NULL;
  return temp;
}
inline void SaveRankData::set_allocated_rank_datas(::proto::message::RankDBList* rank_datas) {
  delete rank_datas_;
  rank_datas_ = rank_datas;
  if (rank_datas) {
    set_has_rank_datas();
  } else {
    clear_has_rank_datas();
  }
}

// optional uint64 resettime = 4;
inline bool SaveRankData::has_resettime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SaveRankData::set_has_resettime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SaveRankData::clear_has_resettime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SaveRankData::clear_resettime() {
  resettime_ = GOOGLE_ULONGLONG(0);
  clear_has_resettime();
}
inline ::google::protobuf::uint64 SaveRankData::resettime() const {
  return resettime_;
}
inline void SaveRankData::set_resettime(::google::protobuf::uint64 value) {
  set_has_resettime();
  resettime_ = value;
}

// optional .proto.message.RankFirstBody first = 5;
inline bool SaveRankData::has_first() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SaveRankData::set_has_first() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SaveRankData::clear_has_first() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SaveRankData::clear_first() {
  if (first_ != NULL) first_->::proto::message::RankFirstBody::Clear();
  clear_has_first();
}
inline const ::proto::message::RankFirstBody& SaveRankData::first() const {
  return first_ != NULL ? *first_ : *default_instance_->first_;
}
inline ::proto::message::RankFirstBody* SaveRankData::mutable_first() {
  set_has_first();
  if (first_ == NULL) first_ = new ::proto::message::RankFirstBody;
  return first_;
}
inline ::proto::message::RankFirstBody* SaveRankData::release_first() {
  clear_has_first();
  ::proto::message::RankFirstBody* temp = first_;
  first_ = NULL;
  return temp;
}
inline void SaveRankData::set_allocated_first(::proto::message::RankFirstBody* first) {
  delete first_;
  first_ = first;
  if (first) {
    set_has_first();
  } else {
    clear_has_first();
  }
}

// -------------------------------------------------------------------

// Rank_CS_GetRankInfo

// required .proto.message.eRankType rank_type = 1;
inline bool Rank_CS_GetRankInfo::has_rank_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Rank_CS_GetRankInfo::set_has_rank_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Rank_CS_GetRankInfo::clear_has_rank_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Rank_CS_GetRankInfo::clear_rank_type() {
  rank_type_ = 1;
  clear_has_rank_type();
}
inline ::proto::message::eRankType Rank_CS_GetRankInfo::rank_type() const {
  return static_cast< ::proto::message::eRankType >(rank_type_);
}
inline void Rank_CS_GetRankInfo::set_rank_type(::proto::message::eRankType value) {
  assert(::proto::message::eRankType_IsValid(value));
  set_has_rank_type();
  rank_type_ = value;
}

// optional int32 ranking_start = 2;
inline bool Rank_CS_GetRankInfo::has_ranking_start() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Rank_CS_GetRankInfo::set_has_ranking_start() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Rank_CS_GetRankInfo::clear_has_ranking_start() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Rank_CS_GetRankInfo::clear_ranking_start() {
  ranking_start_ = 0;
  clear_has_ranking_start();
}
inline ::google::protobuf::int32 Rank_CS_GetRankInfo::ranking_start() const {
  return ranking_start_;
}
inline void Rank_CS_GetRankInfo::set_ranking_start(::google::protobuf::int32 value) {
  set_has_ranking_start();
  ranking_start_ = value;
}

// optional int32 rankint_end = 3;
inline bool Rank_CS_GetRankInfo::has_rankint_end() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Rank_CS_GetRankInfo::set_has_rankint_end() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Rank_CS_GetRankInfo::clear_has_rankint_end() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Rank_CS_GetRankInfo::clear_rankint_end() {
  rankint_end_ = 0;
  clear_has_rankint_end();
}
inline ::google::protobuf::int32 Rank_CS_GetRankInfo::rankint_end() const {
  return rankint_end_;
}
inline void Rank_CS_GetRankInfo::set_rankint_end(::google::protobuf::int32 value) {
  set_has_rankint_end();
  rankint_end_ = value;
}

// -------------------------------------------------------------------

// Rank_SC_GetRankInfo

// required .proto.message.eRankType rank_type = 1;
inline bool Rank_SC_GetRankInfo::has_rank_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Rank_SC_GetRankInfo::set_has_rank_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Rank_SC_GetRankInfo::clear_has_rank_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Rank_SC_GetRankInfo::clear_rank_type() {
  rank_type_ = 1;
  clear_has_rank_type();
}
inline ::proto::message::eRankType Rank_SC_GetRankInfo::rank_type() const {
  return static_cast< ::proto::message::eRankType >(rank_type_);
}
inline void Rank_SC_GetRankInfo::set_rank_type(::proto::message::eRankType value) {
  assert(::proto::message::eRankType_IsValid(value));
  set_has_rank_type();
  rank_type_ = value;
}

// optional int32 total_num = 2;
inline bool Rank_SC_GetRankInfo::has_total_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Rank_SC_GetRankInfo::set_has_total_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Rank_SC_GetRankInfo::clear_has_total_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Rank_SC_GetRankInfo::clear_total_num() {
  total_num_ = 0;
  clear_has_total_num();
}
inline ::google::protobuf::int32 Rank_SC_GetRankInfo::total_num() const {
  return total_num_;
}
inline void Rank_SC_GetRankInfo::set_total_num(::google::protobuf::int32 value) {
  set_has_total_num();
  total_num_ = value;
}

// repeated .proto.message.RankDBData rank_list = 3;
inline int Rank_SC_GetRankInfo::rank_list_size() const {
  return rank_list_.size();
}
inline void Rank_SC_GetRankInfo::clear_rank_list() {
  rank_list_.Clear();
}
inline const ::proto::message::RankDBData& Rank_SC_GetRankInfo::rank_list(int index) const {
  return rank_list_.Get(index);
}
inline ::proto::message::RankDBData* Rank_SC_GetRankInfo::mutable_rank_list(int index) {
  return rank_list_.Mutable(index);
}
inline ::proto::message::RankDBData* Rank_SC_GetRankInfo::add_rank_list() {
  return rank_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::RankDBData >&
Rank_SC_GetRankInfo::rank_list() const {
  return rank_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::RankDBData >*
Rank_SC_GetRankInfo::mutable_rank_list() {
  return &rank_list_;
}

// optional .proto.message.RankDBData rank_self = 4;
inline bool Rank_SC_GetRankInfo::has_rank_self() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Rank_SC_GetRankInfo::set_has_rank_self() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Rank_SC_GetRankInfo::clear_has_rank_self() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Rank_SC_GetRankInfo::clear_rank_self() {
  if (rank_self_ != NULL) rank_self_->::proto::message::RankDBData::Clear();
  clear_has_rank_self();
}
inline const ::proto::message::RankDBData& Rank_SC_GetRankInfo::rank_self() const {
  return rank_self_ != NULL ? *rank_self_ : *default_instance_->rank_self_;
}
inline ::proto::message::RankDBData* Rank_SC_GetRankInfo::mutable_rank_self() {
  set_has_rank_self();
  if (rank_self_ == NULL) rank_self_ = new ::proto::message::RankDBData;
  return rank_self_;
}
inline ::proto::message::RankDBData* Rank_SC_GetRankInfo::release_rank_self() {
  clear_has_rank_self();
  ::proto::message::RankDBData* temp = rank_self_;
  rank_self_ = NULL;
  return temp;
}
inline void Rank_SC_GetRankInfo::set_allocated_rank_self(::proto::message::RankDBData* rank_self) {
  delete rank_self_;
  rank_self_ = rank_self;
  if (rank_self) {
    set_has_rank_self();
  } else {
    clear_has_rank_self();
  }
}

// -------------------------------------------------------------------

// Rank_CS_ReqActivityReward

// optional uint32 conditionid = 1;
inline bool Rank_CS_ReqActivityReward::has_conditionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Rank_CS_ReqActivityReward::set_has_conditionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Rank_CS_ReqActivityReward::clear_has_conditionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Rank_CS_ReqActivityReward::clear_conditionid() {
  conditionid_ = 0u;
  clear_has_conditionid();
}
inline ::google::protobuf::uint32 Rank_CS_ReqActivityReward::conditionid() const {
  return conditionid_;
}
inline void Rank_CS_ReqActivityReward::set_conditionid(::google::protobuf::uint32 value) {
  set_has_conditionid();
  conditionid_ = value;
}

// -------------------------------------------------------------------

// Rank_CS_ReqRankRewardData

// optional uint32 ranktype = 1;
inline bool Rank_CS_ReqRankRewardData::has_ranktype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Rank_CS_ReqRankRewardData::set_has_ranktype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Rank_CS_ReqRankRewardData::clear_has_ranktype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Rank_CS_ReqRankRewardData::clear_ranktype() {
  ranktype_ = 0u;
  clear_has_ranktype();
}
inline ::google::protobuf::uint32 Rank_CS_ReqRankRewardData::ranktype() const {
  return ranktype_;
}
inline void Rank_CS_ReqRankRewardData::set_ranktype(::google::protobuf::uint32 value) {
  set_has_ranktype();
  ranktype_ = value;
}

// -------------------------------------------------------------------

// Rank_SC_AckRankRewardData

// optional .proto.message.ActivityRank rankdata = 1;
inline bool Rank_SC_AckRankRewardData::has_rankdata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Rank_SC_AckRankRewardData::set_has_rankdata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Rank_SC_AckRankRewardData::clear_has_rankdata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Rank_SC_AckRankRewardData::clear_rankdata() {
  if (rankdata_ != NULL) rankdata_->::proto::message::ActivityRank::Clear();
  clear_has_rankdata();
}
inline const ::proto::message::ActivityRank& Rank_SC_AckRankRewardData::rankdata() const {
  return rankdata_ != NULL ? *rankdata_ : *default_instance_->rankdata_;
}
inline ::proto::message::ActivityRank* Rank_SC_AckRankRewardData::mutable_rankdata() {
  set_has_rankdata();
  if (rankdata_ == NULL) rankdata_ = new ::proto::message::ActivityRank;
  return rankdata_;
}
inline ::proto::message::ActivityRank* Rank_SC_AckRankRewardData::release_rankdata() {
  clear_has_rankdata();
  ::proto::message::ActivityRank* temp = rankdata_;
  rankdata_ = NULL;
  return temp;
}
inline void Rank_SC_AckRankRewardData::set_allocated_rankdata(::proto::message::ActivityRank* rankdata) {
  delete rankdata_;
  rankdata_ = rankdata;
  if (rankdata) {
    set_has_rankdata();
  } else {
    clear_has_rankdata();
  }
}

// -------------------------------------------------------------------

// Rank_SC_AckPvPSignRankFirst

// optional .proto.message.RankFirstBody data = 1;
inline bool Rank_SC_AckPvPSignRankFirst::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Rank_SC_AckPvPSignRankFirst::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Rank_SC_AckPvPSignRankFirst::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Rank_SC_AckPvPSignRankFirst::clear_data() {
  if (data_ != NULL) data_->::proto::message::RankFirstBody::Clear();
  clear_has_data();
}
inline const ::proto::message::RankFirstBody& Rank_SC_AckPvPSignRankFirst::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::proto::message::RankFirstBody* Rank_SC_AckPvPSignRankFirst::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::proto::message::RankFirstBody;
  return data_;
}
inline ::proto::message::RankFirstBody* Rank_SC_AckPvPSignRankFirst::release_data() {
  clear_has_data();
  ::proto::message::RankFirstBody* temp = data_;
  data_ = NULL;
  return temp;
}
inline void Rank_SC_AckPvPSignRankFirst::set_allocated_data(::proto::message::RankFirstBody* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::message::eRankType>() {
  return ::proto::message::eRankType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rank_2eproto__INCLUDED
