// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: awaken.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "awaken.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

namespace {

const ::google::protobuf::Descriptor* ProtoAwakenTalentInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoAwakenTalentInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoAwakenCellInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoAwakenCellInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoAwakenAllCellInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoAwakenAllCellInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Awaken_CS_FroceTransEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Awaken_CS_FroceTransEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* Awaken_SC_FroceTransEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Awaken_SC_FroceTransEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* Awaken_CS_GetAwakenInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Awaken_CS_GetAwakenInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Awaken_SC_GetAwakenInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Awaken_SC_GetAwakenInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Awaken_CS_Upgrade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Awaken_CS_Upgrade_reflection_ = NULL;
const ::google::protobuf::Descriptor* Awaken_SC_Upgrade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Awaken_SC_Upgrade_reflection_ = NULL;
const ::google::protobuf::Descriptor* Awaken_CS_ResetTalent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Awaken_CS_ResetTalent_reflection_ = NULL;
const ::google::protobuf::Descriptor* Awaken_SC_ResetTalent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Awaken_SC_ResetTalent_reflection_ = NULL;
const ::google::protobuf::Descriptor* Awaken_CS_UpgTalent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Awaken_CS_UpgTalent_reflection_ = NULL;
const ::google::protobuf::Descriptor* Awaken_SC_UpgTalent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Awaken_SC_UpgTalent_reflection_ = NULL;
const ::google::protobuf::Descriptor* Awaken_CS_UpgSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Awaken_CS_UpgSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* Awaken_SC_UpgSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Awaken_SC_UpgSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* Awaken_CS_Transform_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Awaken_CS_Transform_reflection_ = NULL;
const ::google::protobuf::Descriptor* Awaken_SC_Transform_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Awaken_SC_Transform_reflection_ = NULL;
const ::google::protobuf::Descriptor* Awaken_CS_SkillOpen_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Awaken_CS_SkillOpen_reflection_ = NULL;
const ::google::protobuf::Descriptor* Awaken_SC_SkillOpen_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Awaken_SC_SkillOpen_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_awaken_2eproto() {
  protobuf_AddDesc_awaken_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "awaken.proto");
  GOOGLE_CHECK(file != NULL);
  ProtoAwakenTalentInfo_descriptor_ = file->message_type(0);
  static const int ProtoAwakenTalentInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAwakenTalentInfo, talentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAwakenTalentInfo, talenttype_),
  };
  ProtoAwakenTalentInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoAwakenTalentInfo_descriptor_,
      ProtoAwakenTalentInfo::default_instance_,
      ProtoAwakenTalentInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAwakenTalentInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAwakenTalentInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoAwakenTalentInfo));
  ProtoAwakenCellInfo_descriptor_ = file->message_type(1);
  static const int ProtoAwakenCellInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAwakenCellInfo, awakenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAwakenCellInfo, strlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAwakenCellInfo, luckyvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAwakenCellInfo, ntalentpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAwakenCellInfo, usedtalentpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAwakenCellInfo, telentinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAwakenCellInfo, nskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAwakenCellInfo, skillbooks_),
  };
  ProtoAwakenCellInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoAwakenCellInfo_descriptor_,
      ProtoAwakenCellInfo::default_instance_,
      ProtoAwakenCellInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAwakenCellInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAwakenCellInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoAwakenCellInfo));
  ProtoAwakenAllCellInfo_descriptor_ = file->message_type(2);
  static const int ProtoAwakenAllCellInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAwakenAllCellInfo, allinfo_),
  };
  ProtoAwakenAllCellInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoAwakenAllCellInfo_descriptor_,
      ProtoAwakenAllCellInfo::default_instance_,
      ProtoAwakenAllCellInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAwakenAllCellInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAwakenAllCellInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoAwakenAllCellInfo));
  Awaken_CS_FroceTransEnd_descriptor_ = file->message_type(3);
  static const int Awaken_CS_FroceTransEnd_offsets_[1] = {
  };
  Awaken_CS_FroceTransEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Awaken_CS_FroceTransEnd_descriptor_,
      Awaken_CS_FroceTransEnd::default_instance_,
      Awaken_CS_FroceTransEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Awaken_CS_FroceTransEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Awaken_CS_FroceTransEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Awaken_CS_FroceTransEnd));
  Awaken_SC_FroceTransEnd_descriptor_ = file->message_type(4);
  static const int Awaken_SC_FroceTransEnd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Awaken_SC_FroceTransEnd, ret_),
  };
  Awaken_SC_FroceTransEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Awaken_SC_FroceTransEnd_descriptor_,
      Awaken_SC_FroceTransEnd::default_instance_,
      Awaken_SC_FroceTransEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Awaken_SC_FroceTransEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Awaken_SC_FroceTransEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Awaken_SC_FroceTransEnd));
  Awaken_CS_GetAwakenInfo_descriptor_ = file->message_type(5);
  static const int Awaken_CS_GetAwakenInfo_offsets_[1] = {
  };
  Awaken_CS_GetAwakenInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Awaken_CS_GetAwakenInfo_descriptor_,
      Awaken_CS_GetAwakenInfo::default_instance_,
      Awaken_CS_GetAwakenInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Awaken_CS_GetAwakenInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Awaken_CS_GetAwakenInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Awaken_CS_GetAwakenInfo));
  Awaken_SC_GetAwakenInfo_descriptor_ = file->message_type(6);
  static const int Awaken_SC_GetAwakenInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Awaken_SC_GetAwakenInfo, infolist_),
  };
  Awaken_SC_GetAwakenInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Awaken_SC_GetAwakenInfo_descriptor_,
      Awaken_SC_GetAwakenInfo::default_instance_,
      Awaken_SC_GetAwakenInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Awaken_SC_GetAwakenInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Awaken_SC_GetAwakenInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Awaken_SC_GetAwakenInfo));
  Awaken_CS_Upgrade_descriptor_ = file->message_type(7);
  static const int Awaken_CS_Upgrade_offsets_[1] = {
  };
  Awaken_CS_Upgrade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Awaken_CS_Upgrade_descriptor_,
      Awaken_CS_Upgrade::default_instance_,
      Awaken_CS_Upgrade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Awaken_CS_Upgrade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Awaken_CS_Upgrade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Awaken_CS_Upgrade));
  Awaken_SC_Upgrade_descriptor_ = file->message_type(8);
  static const int Awaken_SC_Upgrade_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Awaken_SC_Upgrade, ret_),
  };
  Awaken_SC_Upgrade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Awaken_SC_Upgrade_descriptor_,
      Awaken_SC_Upgrade::default_instance_,
      Awaken_SC_Upgrade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Awaken_SC_Upgrade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Awaken_SC_Upgrade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Awaken_SC_Upgrade));
  Awaken_CS_ResetTalent_descriptor_ = file->message_type(9);
  static const int Awaken_CS_ResetTalent_offsets_[1] = {
  };
  Awaken_CS_ResetTalent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Awaken_CS_ResetTalent_descriptor_,
      Awaken_CS_ResetTalent::default_instance_,
      Awaken_CS_ResetTalent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Awaken_CS_ResetTalent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Awaken_CS_ResetTalent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Awaken_CS_ResetTalent));
  Awaken_SC_ResetTalent_descriptor_ = file->message_type(10);
  static const int Awaken_SC_ResetTalent_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Awaken_SC_ResetTalent, ret_),
  };
  Awaken_SC_ResetTalent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Awaken_SC_ResetTalent_descriptor_,
      Awaken_SC_ResetTalent::default_instance_,
      Awaken_SC_ResetTalent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Awaken_SC_ResetTalent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Awaken_SC_ResetTalent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Awaken_SC_ResetTalent));
  Awaken_CS_UpgTalent_descriptor_ = file->message_type(11);
  static const int Awaken_CS_UpgTalent_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Awaken_CS_UpgTalent, talenttype_),
  };
  Awaken_CS_UpgTalent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Awaken_CS_UpgTalent_descriptor_,
      Awaken_CS_UpgTalent::default_instance_,
      Awaken_CS_UpgTalent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Awaken_CS_UpgTalent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Awaken_CS_UpgTalent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Awaken_CS_UpgTalent));
  Awaken_SC_UpgTalent_descriptor_ = file->message_type(12);
  static const int Awaken_SC_UpgTalent_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Awaken_SC_UpgTalent, ret_),
  };
  Awaken_SC_UpgTalent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Awaken_SC_UpgTalent_descriptor_,
      Awaken_SC_UpgTalent::default_instance_,
      Awaken_SC_UpgTalent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Awaken_SC_UpgTalent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Awaken_SC_UpgTalent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Awaken_SC_UpgTalent));
  Awaken_CS_UpgSkill_descriptor_ = file->message_type(13);
  static const int Awaken_CS_UpgSkill_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Awaken_CS_UpgSkill, skillid_),
  };
  Awaken_CS_UpgSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Awaken_CS_UpgSkill_descriptor_,
      Awaken_CS_UpgSkill::default_instance_,
      Awaken_CS_UpgSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Awaken_CS_UpgSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Awaken_CS_UpgSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Awaken_CS_UpgSkill));
  Awaken_SC_UpgSkill_descriptor_ = file->message_type(14);
  static const int Awaken_SC_UpgSkill_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Awaken_SC_UpgSkill, ret_),
  };
  Awaken_SC_UpgSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Awaken_SC_UpgSkill_descriptor_,
      Awaken_SC_UpgSkill::default_instance_,
      Awaken_SC_UpgSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Awaken_SC_UpgSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Awaken_SC_UpgSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Awaken_SC_UpgSkill));
  Awaken_CS_Transform_descriptor_ = file->message_type(15);
  static const int Awaken_CS_Transform_offsets_[1] = {
  };
  Awaken_CS_Transform_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Awaken_CS_Transform_descriptor_,
      Awaken_CS_Transform::default_instance_,
      Awaken_CS_Transform_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Awaken_CS_Transform, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Awaken_CS_Transform, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Awaken_CS_Transform));
  Awaken_SC_Transform_descriptor_ = file->message_type(16);
  static const int Awaken_SC_Transform_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Awaken_SC_Transform, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Awaken_SC_Transform, awakenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Awaken_SC_Transform, status_),
  };
  Awaken_SC_Transform_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Awaken_SC_Transform_descriptor_,
      Awaken_SC_Transform::default_instance_,
      Awaken_SC_Transform_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Awaken_SC_Transform, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Awaken_SC_Transform, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Awaken_SC_Transform));
  Awaken_CS_SkillOpen_descriptor_ = file->message_type(17);
  static const int Awaken_CS_SkillOpen_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Awaken_CS_SkillOpen, bookitemid_),
  };
  Awaken_CS_SkillOpen_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Awaken_CS_SkillOpen_descriptor_,
      Awaken_CS_SkillOpen::default_instance_,
      Awaken_CS_SkillOpen_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Awaken_CS_SkillOpen, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Awaken_CS_SkillOpen, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Awaken_CS_SkillOpen));
  Awaken_SC_SkillOpen_descriptor_ = file->message_type(18);
  static const int Awaken_SC_SkillOpen_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Awaken_SC_SkillOpen, ret_),
  };
  Awaken_SC_SkillOpen_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Awaken_SC_SkillOpen_descriptor_,
      Awaken_SC_SkillOpen::default_instance_,
      Awaken_SC_SkillOpen_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Awaken_SC_SkillOpen, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Awaken_SC_SkillOpen, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Awaken_SC_SkillOpen));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_awaken_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoAwakenTalentInfo_descriptor_, &ProtoAwakenTalentInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoAwakenCellInfo_descriptor_, &ProtoAwakenCellInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoAwakenAllCellInfo_descriptor_, &ProtoAwakenAllCellInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Awaken_CS_FroceTransEnd_descriptor_, &Awaken_CS_FroceTransEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Awaken_SC_FroceTransEnd_descriptor_, &Awaken_SC_FroceTransEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Awaken_CS_GetAwakenInfo_descriptor_, &Awaken_CS_GetAwakenInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Awaken_SC_GetAwakenInfo_descriptor_, &Awaken_SC_GetAwakenInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Awaken_CS_Upgrade_descriptor_, &Awaken_CS_Upgrade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Awaken_SC_Upgrade_descriptor_, &Awaken_SC_Upgrade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Awaken_CS_ResetTalent_descriptor_, &Awaken_CS_ResetTalent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Awaken_SC_ResetTalent_descriptor_, &Awaken_SC_ResetTalent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Awaken_CS_UpgTalent_descriptor_, &Awaken_CS_UpgTalent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Awaken_SC_UpgTalent_descriptor_, &Awaken_SC_UpgTalent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Awaken_CS_UpgSkill_descriptor_, &Awaken_CS_UpgSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Awaken_SC_UpgSkill_descriptor_, &Awaken_SC_UpgSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Awaken_CS_Transform_descriptor_, &Awaken_CS_Transform::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Awaken_SC_Transform_descriptor_, &Awaken_SC_Transform::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Awaken_CS_SkillOpen_descriptor_, &Awaken_CS_SkillOpen::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Awaken_SC_SkillOpen_descriptor_, &Awaken_SC_SkillOpen::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_awaken_2eproto() {
  delete ProtoAwakenTalentInfo::default_instance_;
  delete ProtoAwakenTalentInfo_reflection_;
  delete ProtoAwakenCellInfo::default_instance_;
  delete ProtoAwakenCellInfo_reflection_;
  delete ProtoAwakenAllCellInfo::default_instance_;
  delete ProtoAwakenAllCellInfo_reflection_;
  delete Awaken_CS_FroceTransEnd::default_instance_;
  delete Awaken_CS_FroceTransEnd_reflection_;
  delete Awaken_SC_FroceTransEnd::default_instance_;
  delete Awaken_SC_FroceTransEnd_reflection_;
  delete Awaken_CS_GetAwakenInfo::default_instance_;
  delete Awaken_CS_GetAwakenInfo_reflection_;
  delete Awaken_SC_GetAwakenInfo::default_instance_;
  delete Awaken_SC_GetAwakenInfo_reflection_;
  delete Awaken_CS_Upgrade::default_instance_;
  delete Awaken_CS_Upgrade_reflection_;
  delete Awaken_SC_Upgrade::default_instance_;
  delete Awaken_SC_Upgrade_reflection_;
  delete Awaken_CS_ResetTalent::default_instance_;
  delete Awaken_CS_ResetTalent_reflection_;
  delete Awaken_SC_ResetTalent::default_instance_;
  delete Awaken_SC_ResetTalent_reflection_;
  delete Awaken_CS_UpgTalent::default_instance_;
  delete Awaken_CS_UpgTalent_reflection_;
  delete Awaken_SC_UpgTalent::default_instance_;
  delete Awaken_SC_UpgTalent_reflection_;
  delete Awaken_CS_UpgSkill::default_instance_;
  delete Awaken_CS_UpgSkill_reflection_;
  delete Awaken_SC_UpgSkill::default_instance_;
  delete Awaken_SC_UpgSkill_reflection_;
  delete Awaken_CS_Transform::default_instance_;
  delete Awaken_CS_Transform_reflection_;
  delete Awaken_SC_Transform::default_instance_;
  delete Awaken_SC_Transform_reflection_;
  delete Awaken_CS_SkillOpen::default_instance_;
  delete Awaken_CS_SkillOpen_reflection_;
  delete Awaken_SC_SkillOpen::default_instance_;
  delete Awaken_SC_SkillOpen_reflection_;
}

void protobuf_AddDesc_awaken_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::message::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014awaken.proto\022\rproto.message\032\014common.pr"
    "oto\"=\n\025ProtoAwakenTalentInfo\022\020\n\010talentId"
    "\030\001 \001(\r\022\022\n\ntalentType\030\002 \001(\r\"\327\001\n\023ProtoAwak"
    "enCellInfo\022\020\n\010awakenId\030\001 \001(\r\022\r\n\005strLv\030\002 "
    "\001(\r\022\022\n\nluckyValue\030\003 \001(\r\022\024\n\014nTalentPoint\030"
    "\004 \001(\r\022\027\n\017UsedTalentPoint\030\005 \001(\r\0228\n\ntelent"
    "Info\030\006 \003(\0132$.proto.message.ProtoAwakenTa"
    "lentInfo\022\016\n\006nSkill\030\007 \003(\005\022\022\n\nskillbooks\030\010"
    " \003(\r\"M\n\026ProtoAwakenAllCellInfo\0223\n\007allInf"
    "o\030\001 \001(\0132\".proto.message.ProtoAwakenCellI"
    "nfo\"\031\n\027Awaken_CS_FroceTransEnd\"&\n\027Awaken"
    "_SC_FroceTransEnd\022\013\n\003ret\030\001 \001(\005\"\031\n\027Awaken"
    "_CS_GetAwakenInfo\"O\n\027Awaken_SC_GetAwaken"
    "Info\0224\n\010infoList\030\001 \001(\0132\".proto.message.P"
    "rotoAwakenCellInfo\"\023\n\021Awaken_CS_Upgrade\""
    " \n\021Awaken_SC_Upgrade\022\013\n\003ret\030\001 \001(\r\"\027\n\025Awa"
    "ken_CS_ResetTalent\"$\n\025Awaken_SC_ResetTal"
    "ent\022\013\n\003ret\030\001 \001(\r\")\n\023Awaken_CS_UpgTalent\022"
    "\022\n\ntalentType\030\001 \001(\r\"\"\n\023Awaken_SC_UpgTale"
    "nt\022\013\n\003ret\030\001 \001(\r\"%\n\022Awaken_CS_UpgSkill\022\017\n"
    "\007skillid\030\001 \002(\005\"!\n\022Awaken_SC_UpgSkill\022\013\n\003"
    "ret\030\001 \002(\005\"\025\n\023Awaken_CS_Transform\"D\n\023Awak"
    "en_SC_Transform\022\013\n\003ret\030\001 \002(\005\022\020\n\010awakenId"
    "\030\002 \001(\r\022\016\n\006status\030\003 \001(\010\")\n\023Awaken_CS_Skil"
    "lOpen\022\022\n\nbookItemId\030\001 \001(\r\"\"\n\023Awaken_SC_S"
    "killOpen\022\013\n\003ret\030\001 \002(\005B\017\n\rproto.message", 1038);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "awaken.proto", &protobuf_RegisterTypes);
  ProtoAwakenTalentInfo::default_instance_ = new ProtoAwakenTalentInfo();
  ProtoAwakenCellInfo::default_instance_ = new ProtoAwakenCellInfo();
  ProtoAwakenAllCellInfo::default_instance_ = new ProtoAwakenAllCellInfo();
  Awaken_CS_FroceTransEnd::default_instance_ = new Awaken_CS_FroceTransEnd();
  Awaken_SC_FroceTransEnd::default_instance_ = new Awaken_SC_FroceTransEnd();
  Awaken_CS_GetAwakenInfo::default_instance_ = new Awaken_CS_GetAwakenInfo();
  Awaken_SC_GetAwakenInfo::default_instance_ = new Awaken_SC_GetAwakenInfo();
  Awaken_CS_Upgrade::default_instance_ = new Awaken_CS_Upgrade();
  Awaken_SC_Upgrade::default_instance_ = new Awaken_SC_Upgrade();
  Awaken_CS_ResetTalent::default_instance_ = new Awaken_CS_ResetTalent();
  Awaken_SC_ResetTalent::default_instance_ = new Awaken_SC_ResetTalent();
  Awaken_CS_UpgTalent::default_instance_ = new Awaken_CS_UpgTalent();
  Awaken_SC_UpgTalent::default_instance_ = new Awaken_SC_UpgTalent();
  Awaken_CS_UpgSkill::default_instance_ = new Awaken_CS_UpgSkill();
  Awaken_SC_UpgSkill::default_instance_ = new Awaken_SC_UpgSkill();
  Awaken_CS_Transform::default_instance_ = new Awaken_CS_Transform();
  Awaken_SC_Transform::default_instance_ = new Awaken_SC_Transform();
  Awaken_CS_SkillOpen::default_instance_ = new Awaken_CS_SkillOpen();
  Awaken_SC_SkillOpen::default_instance_ = new Awaken_SC_SkillOpen();
  ProtoAwakenTalentInfo::default_instance_->InitAsDefaultInstance();
  ProtoAwakenCellInfo::default_instance_->InitAsDefaultInstance();
  ProtoAwakenAllCellInfo::default_instance_->InitAsDefaultInstance();
  Awaken_CS_FroceTransEnd::default_instance_->InitAsDefaultInstance();
  Awaken_SC_FroceTransEnd::default_instance_->InitAsDefaultInstance();
  Awaken_CS_GetAwakenInfo::default_instance_->InitAsDefaultInstance();
  Awaken_SC_GetAwakenInfo::default_instance_->InitAsDefaultInstance();
  Awaken_CS_Upgrade::default_instance_->InitAsDefaultInstance();
  Awaken_SC_Upgrade::default_instance_->InitAsDefaultInstance();
  Awaken_CS_ResetTalent::default_instance_->InitAsDefaultInstance();
  Awaken_SC_ResetTalent::default_instance_->InitAsDefaultInstance();
  Awaken_CS_UpgTalent::default_instance_->InitAsDefaultInstance();
  Awaken_SC_UpgTalent::default_instance_->InitAsDefaultInstance();
  Awaken_CS_UpgSkill::default_instance_->InitAsDefaultInstance();
  Awaken_SC_UpgSkill::default_instance_->InitAsDefaultInstance();
  Awaken_CS_Transform::default_instance_->InitAsDefaultInstance();
  Awaken_SC_Transform::default_instance_->InitAsDefaultInstance();
  Awaken_CS_SkillOpen::default_instance_->InitAsDefaultInstance();
  Awaken_SC_SkillOpen::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_awaken_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_awaken_2eproto {
  StaticDescriptorInitializer_awaken_2eproto() {
    protobuf_AddDesc_awaken_2eproto();
  }
} static_descriptor_initializer_awaken_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ProtoAwakenTalentInfo::kTalentIdFieldNumber;
const int ProtoAwakenTalentInfo::kTalentTypeFieldNumber;
#endif  // !_MSC_VER

ProtoAwakenTalentInfo::ProtoAwakenTalentInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoAwakenTalentInfo::InitAsDefaultInstance() {
}

ProtoAwakenTalentInfo::ProtoAwakenTalentInfo(const ProtoAwakenTalentInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoAwakenTalentInfo::SharedCtor() {
  _cached_size_ = 0;
  talentid_ = 0u;
  talenttype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoAwakenTalentInfo::~ProtoAwakenTalentInfo() {
  SharedDtor();
}

void ProtoAwakenTalentInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoAwakenTalentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoAwakenTalentInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoAwakenTalentInfo_descriptor_;
}

const ProtoAwakenTalentInfo& ProtoAwakenTalentInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_awaken_2eproto();
  return *default_instance_;
}

ProtoAwakenTalentInfo* ProtoAwakenTalentInfo::default_instance_ = NULL;

ProtoAwakenTalentInfo* ProtoAwakenTalentInfo::New() const {
  return new ProtoAwakenTalentInfo;
}

void ProtoAwakenTalentInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    talentid_ = 0u;
    talenttype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoAwakenTalentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 talentId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &talentid_)));
          set_has_talentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_talentType;
        break;
      }

      // optional uint32 talentType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_talentType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &talenttype_)));
          set_has_talenttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoAwakenTalentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 talentId = 1;
  if (has_talentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->talentid(), output);
  }

  // optional uint32 talentType = 2;
  if (has_talenttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->talenttype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoAwakenTalentInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 talentId = 1;
  if (has_talentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->talentid(), target);
  }

  // optional uint32 talentType = 2;
  if (has_talenttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->talenttype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoAwakenTalentInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 talentId = 1;
    if (has_talentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->talentid());
    }

    // optional uint32 talentType = 2;
    if (has_talenttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->talenttype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoAwakenTalentInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoAwakenTalentInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoAwakenTalentInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoAwakenTalentInfo::MergeFrom(const ProtoAwakenTalentInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_talentid()) {
      set_talentid(from.talentid());
    }
    if (from.has_talenttype()) {
      set_talenttype(from.talenttype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoAwakenTalentInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoAwakenTalentInfo::CopyFrom(const ProtoAwakenTalentInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoAwakenTalentInfo::IsInitialized() const {

  return true;
}

void ProtoAwakenTalentInfo::Swap(ProtoAwakenTalentInfo* other) {
  if (other != this) {
    std::swap(talentid_, other->talentid_);
    std::swap(talenttype_, other->talenttype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoAwakenTalentInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoAwakenTalentInfo_descriptor_;
  metadata.reflection = ProtoAwakenTalentInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoAwakenCellInfo::kAwakenIdFieldNumber;
const int ProtoAwakenCellInfo::kStrLvFieldNumber;
const int ProtoAwakenCellInfo::kLuckyValueFieldNumber;
const int ProtoAwakenCellInfo::kNTalentPointFieldNumber;
const int ProtoAwakenCellInfo::kUsedTalentPointFieldNumber;
const int ProtoAwakenCellInfo::kTelentInfoFieldNumber;
const int ProtoAwakenCellInfo::kNSkillFieldNumber;
const int ProtoAwakenCellInfo::kSkillbooksFieldNumber;
#endif  // !_MSC_VER

ProtoAwakenCellInfo::ProtoAwakenCellInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoAwakenCellInfo::InitAsDefaultInstance() {
}

ProtoAwakenCellInfo::ProtoAwakenCellInfo(const ProtoAwakenCellInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoAwakenCellInfo::SharedCtor() {
  _cached_size_ = 0;
  awakenid_ = 0u;
  strlv_ = 0u;
  luckyvalue_ = 0u;
  ntalentpoint_ = 0u;
  usedtalentpoint_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoAwakenCellInfo::~ProtoAwakenCellInfo() {
  SharedDtor();
}

void ProtoAwakenCellInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoAwakenCellInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoAwakenCellInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoAwakenCellInfo_descriptor_;
}

const ProtoAwakenCellInfo& ProtoAwakenCellInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_awaken_2eproto();
  return *default_instance_;
}

ProtoAwakenCellInfo* ProtoAwakenCellInfo::default_instance_ = NULL;

ProtoAwakenCellInfo* ProtoAwakenCellInfo::New() const {
  return new ProtoAwakenCellInfo;
}

void ProtoAwakenCellInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    awakenid_ = 0u;
    strlv_ = 0u;
    luckyvalue_ = 0u;
    ntalentpoint_ = 0u;
    usedtalentpoint_ = 0u;
  }
  telentinfo_.Clear();
  nskill_.Clear();
  skillbooks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoAwakenCellInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 awakenId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &awakenid_)));
          set_has_awakenid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_strLv;
        break;
      }

      // optional uint32 strLv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strlv_)));
          set_has_strlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_luckyValue;
        break;
      }

      // optional uint32 luckyValue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_luckyValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &luckyvalue_)));
          set_has_luckyvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nTalentPoint;
        break;
      }

      // optional uint32 nTalentPoint = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nTalentPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ntalentpoint_)));
          set_has_ntalentpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_UsedTalentPoint;
        break;
      }

      // optional uint32 UsedTalentPoint = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UsedTalentPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usedtalentpoint_)));
          set_has_usedtalentpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_telentInfo;
        break;
      }

      // repeated .proto.message.ProtoAwakenTalentInfo telentInfo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_telentInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_telentinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_telentInfo;
        if (input->ExpectTag(56)) goto parse_nSkill;
        break;
      }

      // repeated int32 nSkill = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nSkill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_nskill())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_nskill())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_nSkill;
        if (input->ExpectTag(64)) goto parse_skillbooks;
        break;
      }

      // repeated uint32 skillbooks = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillbooks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_skillbooks())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_skillbooks())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_skillbooks;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoAwakenCellInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 awakenId = 1;
  if (has_awakenid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->awakenid(), output);
  }

  // optional uint32 strLv = 2;
  if (has_strlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->strlv(), output);
  }

  // optional uint32 luckyValue = 3;
  if (has_luckyvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->luckyvalue(), output);
  }

  // optional uint32 nTalentPoint = 4;
  if (has_ntalentpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ntalentpoint(), output);
  }

  // optional uint32 UsedTalentPoint = 5;
  if (has_usedtalentpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->usedtalentpoint(), output);
  }

  // repeated .proto.message.ProtoAwakenTalentInfo telentInfo = 6;
  for (int i = 0; i < this->telentinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->telentinfo(i), output);
  }

  // repeated int32 nSkill = 7;
  for (int i = 0; i < this->nskill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->nskill(i), output);
  }

  // repeated uint32 skillbooks = 8;
  for (int i = 0; i < this->skillbooks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->skillbooks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoAwakenCellInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 awakenId = 1;
  if (has_awakenid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->awakenid(), target);
  }

  // optional uint32 strLv = 2;
  if (has_strlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->strlv(), target);
  }

  // optional uint32 luckyValue = 3;
  if (has_luckyvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->luckyvalue(), target);
  }

  // optional uint32 nTalentPoint = 4;
  if (has_ntalentpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ntalentpoint(), target);
  }

  // optional uint32 UsedTalentPoint = 5;
  if (has_usedtalentpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->usedtalentpoint(), target);
  }

  // repeated .proto.message.ProtoAwakenTalentInfo telentInfo = 6;
  for (int i = 0; i < this->telentinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->telentinfo(i), target);
  }

  // repeated int32 nSkill = 7;
  for (int i = 0; i < this->nskill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->nskill(i), target);
  }

  // repeated uint32 skillbooks = 8;
  for (int i = 0; i < this->skillbooks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->skillbooks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoAwakenCellInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 awakenId = 1;
    if (has_awakenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->awakenid());
    }

    // optional uint32 strLv = 2;
    if (has_strlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strlv());
    }

    // optional uint32 luckyValue = 3;
    if (has_luckyvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->luckyvalue());
    }

    // optional uint32 nTalentPoint = 4;
    if (has_ntalentpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ntalentpoint());
    }

    // optional uint32 UsedTalentPoint = 5;
    if (has_usedtalentpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usedtalentpoint());
    }

  }
  // repeated .proto.message.ProtoAwakenTalentInfo telentInfo = 6;
  total_size += 1 * this->telentinfo_size();
  for (int i = 0; i < this->telentinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->telentinfo(i));
  }

  // repeated int32 nSkill = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->nskill_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->nskill(i));
    }
    total_size += 1 * this->nskill_size() + data_size;
  }

  // repeated uint32 skillbooks = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->skillbooks_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->skillbooks(i));
    }
    total_size += 1 * this->skillbooks_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoAwakenCellInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoAwakenCellInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoAwakenCellInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoAwakenCellInfo::MergeFrom(const ProtoAwakenCellInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  telentinfo_.MergeFrom(from.telentinfo_);
  nskill_.MergeFrom(from.nskill_);
  skillbooks_.MergeFrom(from.skillbooks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_awakenid()) {
      set_awakenid(from.awakenid());
    }
    if (from.has_strlv()) {
      set_strlv(from.strlv());
    }
    if (from.has_luckyvalue()) {
      set_luckyvalue(from.luckyvalue());
    }
    if (from.has_ntalentpoint()) {
      set_ntalentpoint(from.ntalentpoint());
    }
    if (from.has_usedtalentpoint()) {
      set_usedtalentpoint(from.usedtalentpoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoAwakenCellInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoAwakenCellInfo::CopyFrom(const ProtoAwakenCellInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoAwakenCellInfo::IsInitialized() const {

  return true;
}

void ProtoAwakenCellInfo::Swap(ProtoAwakenCellInfo* other) {
  if (other != this) {
    std::swap(awakenid_, other->awakenid_);
    std::swap(strlv_, other->strlv_);
    std::swap(luckyvalue_, other->luckyvalue_);
    std::swap(ntalentpoint_, other->ntalentpoint_);
    std::swap(usedtalentpoint_, other->usedtalentpoint_);
    telentinfo_.Swap(&other->telentinfo_);
    nskill_.Swap(&other->nskill_);
    skillbooks_.Swap(&other->skillbooks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoAwakenCellInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoAwakenCellInfo_descriptor_;
  metadata.reflection = ProtoAwakenCellInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoAwakenAllCellInfo::kAllInfoFieldNumber;
#endif  // !_MSC_VER

ProtoAwakenAllCellInfo::ProtoAwakenAllCellInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoAwakenAllCellInfo::InitAsDefaultInstance() {
  allinfo_ = const_cast< ::proto::message::ProtoAwakenCellInfo*>(&::proto::message::ProtoAwakenCellInfo::default_instance());
}

ProtoAwakenAllCellInfo::ProtoAwakenAllCellInfo(const ProtoAwakenAllCellInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoAwakenAllCellInfo::SharedCtor() {
  _cached_size_ = 0;
  allinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoAwakenAllCellInfo::~ProtoAwakenAllCellInfo() {
  SharedDtor();
}

void ProtoAwakenAllCellInfo::SharedDtor() {
  if (this != default_instance_) {
    delete allinfo_;
  }
}

void ProtoAwakenAllCellInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoAwakenAllCellInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoAwakenAllCellInfo_descriptor_;
}

const ProtoAwakenAllCellInfo& ProtoAwakenAllCellInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_awaken_2eproto();
  return *default_instance_;
}

ProtoAwakenAllCellInfo* ProtoAwakenAllCellInfo::default_instance_ = NULL;

ProtoAwakenAllCellInfo* ProtoAwakenAllCellInfo::New() const {
  return new ProtoAwakenAllCellInfo;
}

void ProtoAwakenAllCellInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_allinfo()) {
      if (allinfo_ != NULL) allinfo_->::proto::message::ProtoAwakenCellInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoAwakenAllCellInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.message.ProtoAwakenCellInfo allInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_allinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoAwakenAllCellInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.message.ProtoAwakenCellInfo allInfo = 1;
  if (has_allinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->allinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoAwakenAllCellInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.message.ProtoAwakenCellInfo allInfo = 1;
  if (has_allinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->allinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoAwakenAllCellInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.message.ProtoAwakenCellInfo allInfo = 1;
    if (has_allinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->allinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoAwakenAllCellInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoAwakenAllCellInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoAwakenAllCellInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoAwakenAllCellInfo::MergeFrom(const ProtoAwakenAllCellInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_allinfo()) {
      mutable_allinfo()->::proto::message::ProtoAwakenCellInfo::MergeFrom(from.allinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoAwakenAllCellInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoAwakenAllCellInfo::CopyFrom(const ProtoAwakenAllCellInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoAwakenAllCellInfo::IsInitialized() const {

  return true;
}

void ProtoAwakenAllCellInfo::Swap(ProtoAwakenAllCellInfo* other) {
  if (other != this) {
    std::swap(allinfo_, other->allinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoAwakenAllCellInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoAwakenAllCellInfo_descriptor_;
  metadata.reflection = ProtoAwakenAllCellInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Awaken_CS_FroceTransEnd::Awaken_CS_FroceTransEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Awaken_CS_FroceTransEnd::InitAsDefaultInstance() {
}

Awaken_CS_FroceTransEnd::Awaken_CS_FroceTransEnd(const Awaken_CS_FroceTransEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Awaken_CS_FroceTransEnd::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Awaken_CS_FroceTransEnd::~Awaken_CS_FroceTransEnd() {
  SharedDtor();
}

void Awaken_CS_FroceTransEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Awaken_CS_FroceTransEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Awaken_CS_FroceTransEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Awaken_CS_FroceTransEnd_descriptor_;
}

const Awaken_CS_FroceTransEnd& Awaken_CS_FroceTransEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_awaken_2eproto();
  return *default_instance_;
}

Awaken_CS_FroceTransEnd* Awaken_CS_FroceTransEnd::default_instance_ = NULL;

Awaken_CS_FroceTransEnd* Awaken_CS_FroceTransEnd::New() const {
  return new Awaken_CS_FroceTransEnd;
}

void Awaken_CS_FroceTransEnd::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Awaken_CS_FroceTransEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Awaken_CS_FroceTransEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Awaken_CS_FroceTransEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Awaken_CS_FroceTransEnd::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Awaken_CS_FroceTransEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Awaken_CS_FroceTransEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Awaken_CS_FroceTransEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Awaken_CS_FroceTransEnd::MergeFrom(const Awaken_CS_FroceTransEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Awaken_CS_FroceTransEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Awaken_CS_FroceTransEnd::CopyFrom(const Awaken_CS_FroceTransEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Awaken_CS_FroceTransEnd::IsInitialized() const {

  return true;
}

void Awaken_CS_FroceTransEnd::Swap(Awaken_CS_FroceTransEnd* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Awaken_CS_FroceTransEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Awaken_CS_FroceTransEnd_descriptor_;
  metadata.reflection = Awaken_CS_FroceTransEnd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Awaken_SC_FroceTransEnd::kRetFieldNumber;
#endif  // !_MSC_VER

Awaken_SC_FroceTransEnd::Awaken_SC_FroceTransEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Awaken_SC_FroceTransEnd::InitAsDefaultInstance() {
}

Awaken_SC_FroceTransEnd::Awaken_SC_FroceTransEnd(const Awaken_SC_FroceTransEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Awaken_SC_FroceTransEnd::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Awaken_SC_FroceTransEnd::~Awaken_SC_FroceTransEnd() {
  SharedDtor();
}

void Awaken_SC_FroceTransEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Awaken_SC_FroceTransEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Awaken_SC_FroceTransEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Awaken_SC_FroceTransEnd_descriptor_;
}

const Awaken_SC_FroceTransEnd& Awaken_SC_FroceTransEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_awaken_2eproto();
  return *default_instance_;
}

Awaken_SC_FroceTransEnd* Awaken_SC_FroceTransEnd::default_instance_ = NULL;

Awaken_SC_FroceTransEnd* Awaken_SC_FroceTransEnd::New() const {
  return new Awaken_SC_FroceTransEnd;
}

void Awaken_SC_FroceTransEnd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Awaken_SC_FroceTransEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Awaken_SC_FroceTransEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Awaken_SC_FroceTransEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Awaken_SC_FroceTransEnd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Awaken_SC_FroceTransEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Awaken_SC_FroceTransEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Awaken_SC_FroceTransEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Awaken_SC_FroceTransEnd::MergeFrom(const Awaken_SC_FroceTransEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Awaken_SC_FroceTransEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Awaken_SC_FroceTransEnd::CopyFrom(const Awaken_SC_FroceTransEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Awaken_SC_FroceTransEnd::IsInitialized() const {

  return true;
}

void Awaken_SC_FroceTransEnd::Swap(Awaken_SC_FroceTransEnd* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Awaken_SC_FroceTransEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Awaken_SC_FroceTransEnd_descriptor_;
  metadata.reflection = Awaken_SC_FroceTransEnd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Awaken_CS_GetAwakenInfo::Awaken_CS_GetAwakenInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Awaken_CS_GetAwakenInfo::InitAsDefaultInstance() {
}

Awaken_CS_GetAwakenInfo::Awaken_CS_GetAwakenInfo(const Awaken_CS_GetAwakenInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Awaken_CS_GetAwakenInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Awaken_CS_GetAwakenInfo::~Awaken_CS_GetAwakenInfo() {
  SharedDtor();
}

void Awaken_CS_GetAwakenInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Awaken_CS_GetAwakenInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Awaken_CS_GetAwakenInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Awaken_CS_GetAwakenInfo_descriptor_;
}

const Awaken_CS_GetAwakenInfo& Awaken_CS_GetAwakenInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_awaken_2eproto();
  return *default_instance_;
}

Awaken_CS_GetAwakenInfo* Awaken_CS_GetAwakenInfo::default_instance_ = NULL;

Awaken_CS_GetAwakenInfo* Awaken_CS_GetAwakenInfo::New() const {
  return new Awaken_CS_GetAwakenInfo;
}

void Awaken_CS_GetAwakenInfo::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Awaken_CS_GetAwakenInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Awaken_CS_GetAwakenInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Awaken_CS_GetAwakenInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Awaken_CS_GetAwakenInfo::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Awaken_CS_GetAwakenInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Awaken_CS_GetAwakenInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Awaken_CS_GetAwakenInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Awaken_CS_GetAwakenInfo::MergeFrom(const Awaken_CS_GetAwakenInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Awaken_CS_GetAwakenInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Awaken_CS_GetAwakenInfo::CopyFrom(const Awaken_CS_GetAwakenInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Awaken_CS_GetAwakenInfo::IsInitialized() const {

  return true;
}

void Awaken_CS_GetAwakenInfo::Swap(Awaken_CS_GetAwakenInfo* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Awaken_CS_GetAwakenInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Awaken_CS_GetAwakenInfo_descriptor_;
  metadata.reflection = Awaken_CS_GetAwakenInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Awaken_SC_GetAwakenInfo::kInfoListFieldNumber;
#endif  // !_MSC_VER

Awaken_SC_GetAwakenInfo::Awaken_SC_GetAwakenInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Awaken_SC_GetAwakenInfo::InitAsDefaultInstance() {
  infolist_ = const_cast< ::proto::message::ProtoAwakenCellInfo*>(&::proto::message::ProtoAwakenCellInfo::default_instance());
}

Awaken_SC_GetAwakenInfo::Awaken_SC_GetAwakenInfo(const Awaken_SC_GetAwakenInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Awaken_SC_GetAwakenInfo::SharedCtor() {
  _cached_size_ = 0;
  infolist_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Awaken_SC_GetAwakenInfo::~Awaken_SC_GetAwakenInfo() {
  SharedDtor();
}

void Awaken_SC_GetAwakenInfo::SharedDtor() {
  if (this != default_instance_) {
    delete infolist_;
  }
}

void Awaken_SC_GetAwakenInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Awaken_SC_GetAwakenInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Awaken_SC_GetAwakenInfo_descriptor_;
}

const Awaken_SC_GetAwakenInfo& Awaken_SC_GetAwakenInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_awaken_2eproto();
  return *default_instance_;
}

Awaken_SC_GetAwakenInfo* Awaken_SC_GetAwakenInfo::default_instance_ = NULL;

Awaken_SC_GetAwakenInfo* Awaken_SC_GetAwakenInfo::New() const {
  return new Awaken_SC_GetAwakenInfo;
}

void Awaken_SC_GetAwakenInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_infolist()) {
      if (infolist_ != NULL) infolist_->::proto::message::ProtoAwakenCellInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Awaken_SC_GetAwakenInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.message.ProtoAwakenCellInfo infoList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_infolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Awaken_SC_GetAwakenInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.message.ProtoAwakenCellInfo infoList = 1;
  if (has_infolist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infolist(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Awaken_SC_GetAwakenInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.message.ProtoAwakenCellInfo infoList = 1;
  if (has_infolist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infolist(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Awaken_SC_GetAwakenInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.message.ProtoAwakenCellInfo infoList = 1;
    if (has_infolist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->infolist());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Awaken_SC_GetAwakenInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Awaken_SC_GetAwakenInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Awaken_SC_GetAwakenInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Awaken_SC_GetAwakenInfo::MergeFrom(const Awaken_SC_GetAwakenInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_infolist()) {
      mutable_infolist()->::proto::message::ProtoAwakenCellInfo::MergeFrom(from.infolist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Awaken_SC_GetAwakenInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Awaken_SC_GetAwakenInfo::CopyFrom(const Awaken_SC_GetAwakenInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Awaken_SC_GetAwakenInfo::IsInitialized() const {

  return true;
}

void Awaken_SC_GetAwakenInfo::Swap(Awaken_SC_GetAwakenInfo* other) {
  if (other != this) {
    std::swap(infolist_, other->infolist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Awaken_SC_GetAwakenInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Awaken_SC_GetAwakenInfo_descriptor_;
  metadata.reflection = Awaken_SC_GetAwakenInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Awaken_CS_Upgrade::Awaken_CS_Upgrade()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Awaken_CS_Upgrade::InitAsDefaultInstance() {
}

Awaken_CS_Upgrade::Awaken_CS_Upgrade(const Awaken_CS_Upgrade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Awaken_CS_Upgrade::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Awaken_CS_Upgrade::~Awaken_CS_Upgrade() {
  SharedDtor();
}

void Awaken_CS_Upgrade::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Awaken_CS_Upgrade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Awaken_CS_Upgrade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Awaken_CS_Upgrade_descriptor_;
}

const Awaken_CS_Upgrade& Awaken_CS_Upgrade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_awaken_2eproto();
  return *default_instance_;
}

Awaken_CS_Upgrade* Awaken_CS_Upgrade::default_instance_ = NULL;

Awaken_CS_Upgrade* Awaken_CS_Upgrade::New() const {
  return new Awaken_CS_Upgrade;
}

void Awaken_CS_Upgrade::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Awaken_CS_Upgrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Awaken_CS_Upgrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Awaken_CS_Upgrade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Awaken_CS_Upgrade::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Awaken_CS_Upgrade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Awaken_CS_Upgrade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Awaken_CS_Upgrade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Awaken_CS_Upgrade::MergeFrom(const Awaken_CS_Upgrade& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Awaken_CS_Upgrade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Awaken_CS_Upgrade::CopyFrom(const Awaken_CS_Upgrade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Awaken_CS_Upgrade::IsInitialized() const {

  return true;
}

void Awaken_CS_Upgrade::Swap(Awaken_CS_Upgrade* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Awaken_CS_Upgrade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Awaken_CS_Upgrade_descriptor_;
  metadata.reflection = Awaken_CS_Upgrade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Awaken_SC_Upgrade::kRetFieldNumber;
#endif  // !_MSC_VER

Awaken_SC_Upgrade::Awaken_SC_Upgrade()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Awaken_SC_Upgrade::InitAsDefaultInstance() {
}

Awaken_SC_Upgrade::Awaken_SC_Upgrade(const Awaken_SC_Upgrade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Awaken_SC_Upgrade::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Awaken_SC_Upgrade::~Awaken_SC_Upgrade() {
  SharedDtor();
}

void Awaken_SC_Upgrade::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Awaken_SC_Upgrade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Awaken_SC_Upgrade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Awaken_SC_Upgrade_descriptor_;
}

const Awaken_SC_Upgrade& Awaken_SC_Upgrade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_awaken_2eproto();
  return *default_instance_;
}

Awaken_SC_Upgrade* Awaken_SC_Upgrade::default_instance_ = NULL;

Awaken_SC_Upgrade* Awaken_SC_Upgrade::New() const {
  return new Awaken_SC_Upgrade;
}

void Awaken_SC_Upgrade::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Awaken_SC_Upgrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Awaken_SC_Upgrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Awaken_SC_Upgrade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Awaken_SC_Upgrade::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Awaken_SC_Upgrade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Awaken_SC_Upgrade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Awaken_SC_Upgrade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Awaken_SC_Upgrade::MergeFrom(const Awaken_SC_Upgrade& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Awaken_SC_Upgrade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Awaken_SC_Upgrade::CopyFrom(const Awaken_SC_Upgrade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Awaken_SC_Upgrade::IsInitialized() const {

  return true;
}

void Awaken_SC_Upgrade::Swap(Awaken_SC_Upgrade* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Awaken_SC_Upgrade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Awaken_SC_Upgrade_descriptor_;
  metadata.reflection = Awaken_SC_Upgrade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Awaken_CS_ResetTalent::Awaken_CS_ResetTalent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Awaken_CS_ResetTalent::InitAsDefaultInstance() {
}

Awaken_CS_ResetTalent::Awaken_CS_ResetTalent(const Awaken_CS_ResetTalent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Awaken_CS_ResetTalent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Awaken_CS_ResetTalent::~Awaken_CS_ResetTalent() {
  SharedDtor();
}

void Awaken_CS_ResetTalent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Awaken_CS_ResetTalent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Awaken_CS_ResetTalent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Awaken_CS_ResetTalent_descriptor_;
}

const Awaken_CS_ResetTalent& Awaken_CS_ResetTalent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_awaken_2eproto();
  return *default_instance_;
}

Awaken_CS_ResetTalent* Awaken_CS_ResetTalent::default_instance_ = NULL;

Awaken_CS_ResetTalent* Awaken_CS_ResetTalent::New() const {
  return new Awaken_CS_ResetTalent;
}

void Awaken_CS_ResetTalent::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Awaken_CS_ResetTalent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Awaken_CS_ResetTalent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Awaken_CS_ResetTalent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Awaken_CS_ResetTalent::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Awaken_CS_ResetTalent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Awaken_CS_ResetTalent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Awaken_CS_ResetTalent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Awaken_CS_ResetTalent::MergeFrom(const Awaken_CS_ResetTalent& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Awaken_CS_ResetTalent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Awaken_CS_ResetTalent::CopyFrom(const Awaken_CS_ResetTalent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Awaken_CS_ResetTalent::IsInitialized() const {

  return true;
}

void Awaken_CS_ResetTalent::Swap(Awaken_CS_ResetTalent* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Awaken_CS_ResetTalent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Awaken_CS_ResetTalent_descriptor_;
  metadata.reflection = Awaken_CS_ResetTalent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Awaken_SC_ResetTalent::kRetFieldNumber;
#endif  // !_MSC_VER

Awaken_SC_ResetTalent::Awaken_SC_ResetTalent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Awaken_SC_ResetTalent::InitAsDefaultInstance() {
}

Awaken_SC_ResetTalent::Awaken_SC_ResetTalent(const Awaken_SC_ResetTalent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Awaken_SC_ResetTalent::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Awaken_SC_ResetTalent::~Awaken_SC_ResetTalent() {
  SharedDtor();
}

void Awaken_SC_ResetTalent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Awaken_SC_ResetTalent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Awaken_SC_ResetTalent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Awaken_SC_ResetTalent_descriptor_;
}

const Awaken_SC_ResetTalent& Awaken_SC_ResetTalent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_awaken_2eproto();
  return *default_instance_;
}

Awaken_SC_ResetTalent* Awaken_SC_ResetTalent::default_instance_ = NULL;

Awaken_SC_ResetTalent* Awaken_SC_ResetTalent::New() const {
  return new Awaken_SC_ResetTalent;
}

void Awaken_SC_ResetTalent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Awaken_SC_ResetTalent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Awaken_SC_ResetTalent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Awaken_SC_ResetTalent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Awaken_SC_ResetTalent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Awaken_SC_ResetTalent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Awaken_SC_ResetTalent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Awaken_SC_ResetTalent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Awaken_SC_ResetTalent::MergeFrom(const Awaken_SC_ResetTalent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Awaken_SC_ResetTalent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Awaken_SC_ResetTalent::CopyFrom(const Awaken_SC_ResetTalent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Awaken_SC_ResetTalent::IsInitialized() const {

  return true;
}

void Awaken_SC_ResetTalent::Swap(Awaken_SC_ResetTalent* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Awaken_SC_ResetTalent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Awaken_SC_ResetTalent_descriptor_;
  metadata.reflection = Awaken_SC_ResetTalent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Awaken_CS_UpgTalent::kTalentTypeFieldNumber;
#endif  // !_MSC_VER

Awaken_CS_UpgTalent::Awaken_CS_UpgTalent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Awaken_CS_UpgTalent::InitAsDefaultInstance() {
}

Awaken_CS_UpgTalent::Awaken_CS_UpgTalent(const Awaken_CS_UpgTalent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Awaken_CS_UpgTalent::SharedCtor() {
  _cached_size_ = 0;
  talenttype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Awaken_CS_UpgTalent::~Awaken_CS_UpgTalent() {
  SharedDtor();
}

void Awaken_CS_UpgTalent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Awaken_CS_UpgTalent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Awaken_CS_UpgTalent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Awaken_CS_UpgTalent_descriptor_;
}

const Awaken_CS_UpgTalent& Awaken_CS_UpgTalent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_awaken_2eproto();
  return *default_instance_;
}

Awaken_CS_UpgTalent* Awaken_CS_UpgTalent::default_instance_ = NULL;

Awaken_CS_UpgTalent* Awaken_CS_UpgTalent::New() const {
  return new Awaken_CS_UpgTalent;
}

void Awaken_CS_UpgTalent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    talenttype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Awaken_CS_UpgTalent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 talentType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &talenttype_)));
          set_has_talenttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Awaken_CS_UpgTalent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 talentType = 1;
  if (has_talenttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->talenttype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Awaken_CS_UpgTalent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 talentType = 1;
  if (has_talenttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->talenttype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Awaken_CS_UpgTalent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 talentType = 1;
    if (has_talenttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->talenttype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Awaken_CS_UpgTalent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Awaken_CS_UpgTalent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Awaken_CS_UpgTalent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Awaken_CS_UpgTalent::MergeFrom(const Awaken_CS_UpgTalent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_talenttype()) {
      set_talenttype(from.talenttype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Awaken_CS_UpgTalent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Awaken_CS_UpgTalent::CopyFrom(const Awaken_CS_UpgTalent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Awaken_CS_UpgTalent::IsInitialized() const {

  return true;
}

void Awaken_CS_UpgTalent::Swap(Awaken_CS_UpgTalent* other) {
  if (other != this) {
    std::swap(talenttype_, other->talenttype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Awaken_CS_UpgTalent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Awaken_CS_UpgTalent_descriptor_;
  metadata.reflection = Awaken_CS_UpgTalent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Awaken_SC_UpgTalent::kRetFieldNumber;
#endif  // !_MSC_VER

Awaken_SC_UpgTalent::Awaken_SC_UpgTalent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Awaken_SC_UpgTalent::InitAsDefaultInstance() {
}

Awaken_SC_UpgTalent::Awaken_SC_UpgTalent(const Awaken_SC_UpgTalent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Awaken_SC_UpgTalent::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Awaken_SC_UpgTalent::~Awaken_SC_UpgTalent() {
  SharedDtor();
}

void Awaken_SC_UpgTalent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Awaken_SC_UpgTalent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Awaken_SC_UpgTalent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Awaken_SC_UpgTalent_descriptor_;
}

const Awaken_SC_UpgTalent& Awaken_SC_UpgTalent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_awaken_2eproto();
  return *default_instance_;
}

Awaken_SC_UpgTalent* Awaken_SC_UpgTalent::default_instance_ = NULL;

Awaken_SC_UpgTalent* Awaken_SC_UpgTalent::New() const {
  return new Awaken_SC_UpgTalent;
}

void Awaken_SC_UpgTalent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Awaken_SC_UpgTalent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Awaken_SC_UpgTalent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Awaken_SC_UpgTalent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Awaken_SC_UpgTalent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Awaken_SC_UpgTalent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Awaken_SC_UpgTalent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Awaken_SC_UpgTalent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Awaken_SC_UpgTalent::MergeFrom(const Awaken_SC_UpgTalent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Awaken_SC_UpgTalent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Awaken_SC_UpgTalent::CopyFrom(const Awaken_SC_UpgTalent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Awaken_SC_UpgTalent::IsInitialized() const {

  return true;
}

void Awaken_SC_UpgTalent::Swap(Awaken_SC_UpgTalent* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Awaken_SC_UpgTalent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Awaken_SC_UpgTalent_descriptor_;
  metadata.reflection = Awaken_SC_UpgTalent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Awaken_CS_UpgSkill::kSkillidFieldNumber;
#endif  // !_MSC_VER

Awaken_CS_UpgSkill::Awaken_CS_UpgSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Awaken_CS_UpgSkill::InitAsDefaultInstance() {
}

Awaken_CS_UpgSkill::Awaken_CS_UpgSkill(const Awaken_CS_UpgSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Awaken_CS_UpgSkill::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Awaken_CS_UpgSkill::~Awaken_CS_UpgSkill() {
  SharedDtor();
}

void Awaken_CS_UpgSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Awaken_CS_UpgSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Awaken_CS_UpgSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Awaken_CS_UpgSkill_descriptor_;
}

const Awaken_CS_UpgSkill& Awaken_CS_UpgSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_awaken_2eproto();
  return *default_instance_;
}

Awaken_CS_UpgSkill* Awaken_CS_UpgSkill::default_instance_ = NULL;

Awaken_CS_UpgSkill* Awaken_CS_UpgSkill::New() const {
  return new Awaken_CS_UpgSkill;
}

void Awaken_CS_UpgSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Awaken_CS_UpgSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 skillid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Awaken_CS_UpgSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 skillid = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skillid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Awaken_CS_UpgSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 skillid = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skillid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Awaken_CS_UpgSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 skillid = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Awaken_CS_UpgSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Awaken_CS_UpgSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Awaken_CS_UpgSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Awaken_CS_UpgSkill::MergeFrom(const Awaken_CS_UpgSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Awaken_CS_UpgSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Awaken_CS_UpgSkill::CopyFrom(const Awaken_CS_UpgSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Awaken_CS_UpgSkill::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Awaken_CS_UpgSkill::Swap(Awaken_CS_UpgSkill* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Awaken_CS_UpgSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Awaken_CS_UpgSkill_descriptor_;
  metadata.reflection = Awaken_CS_UpgSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Awaken_SC_UpgSkill::kRetFieldNumber;
#endif  // !_MSC_VER

Awaken_SC_UpgSkill::Awaken_SC_UpgSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Awaken_SC_UpgSkill::InitAsDefaultInstance() {
}

Awaken_SC_UpgSkill::Awaken_SC_UpgSkill(const Awaken_SC_UpgSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Awaken_SC_UpgSkill::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Awaken_SC_UpgSkill::~Awaken_SC_UpgSkill() {
  SharedDtor();
}

void Awaken_SC_UpgSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Awaken_SC_UpgSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Awaken_SC_UpgSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Awaken_SC_UpgSkill_descriptor_;
}

const Awaken_SC_UpgSkill& Awaken_SC_UpgSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_awaken_2eproto();
  return *default_instance_;
}

Awaken_SC_UpgSkill* Awaken_SC_UpgSkill::default_instance_ = NULL;

Awaken_SC_UpgSkill* Awaken_SC_UpgSkill::New() const {
  return new Awaken_SC_UpgSkill;
}

void Awaken_SC_UpgSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Awaken_SC_UpgSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Awaken_SC_UpgSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Awaken_SC_UpgSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Awaken_SC_UpgSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Awaken_SC_UpgSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Awaken_SC_UpgSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Awaken_SC_UpgSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Awaken_SC_UpgSkill::MergeFrom(const Awaken_SC_UpgSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Awaken_SC_UpgSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Awaken_SC_UpgSkill::CopyFrom(const Awaken_SC_UpgSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Awaken_SC_UpgSkill::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Awaken_SC_UpgSkill::Swap(Awaken_SC_UpgSkill* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Awaken_SC_UpgSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Awaken_SC_UpgSkill_descriptor_;
  metadata.reflection = Awaken_SC_UpgSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Awaken_CS_Transform::Awaken_CS_Transform()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Awaken_CS_Transform::InitAsDefaultInstance() {
}

Awaken_CS_Transform::Awaken_CS_Transform(const Awaken_CS_Transform& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Awaken_CS_Transform::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Awaken_CS_Transform::~Awaken_CS_Transform() {
  SharedDtor();
}

void Awaken_CS_Transform::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Awaken_CS_Transform::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Awaken_CS_Transform::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Awaken_CS_Transform_descriptor_;
}

const Awaken_CS_Transform& Awaken_CS_Transform::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_awaken_2eproto();
  return *default_instance_;
}

Awaken_CS_Transform* Awaken_CS_Transform::default_instance_ = NULL;

Awaken_CS_Transform* Awaken_CS_Transform::New() const {
  return new Awaken_CS_Transform;
}

void Awaken_CS_Transform::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Awaken_CS_Transform::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Awaken_CS_Transform::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Awaken_CS_Transform::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Awaken_CS_Transform::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Awaken_CS_Transform::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Awaken_CS_Transform* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Awaken_CS_Transform*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Awaken_CS_Transform::MergeFrom(const Awaken_CS_Transform& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Awaken_CS_Transform::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Awaken_CS_Transform::CopyFrom(const Awaken_CS_Transform& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Awaken_CS_Transform::IsInitialized() const {

  return true;
}

void Awaken_CS_Transform::Swap(Awaken_CS_Transform* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Awaken_CS_Transform::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Awaken_CS_Transform_descriptor_;
  metadata.reflection = Awaken_CS_Transform_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Awaken_SC_Transform::kRetFieldNumber;
const int Awaken_SC_Transform::kAwakenIdFieldNumber;
const int Awaken_SC_Transform::kStatusFieldNumber;
#endif  // !_MSC_VER

Awaken_SC_Transform::Awaken_SC_Transform()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Awaken_SC_Transform::InitAsDefaultInstance() {
}

Awaken_SC_Transform::Awaken_SC_Transform(const Awaken_SC_Transform& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Awaken_SC_Transform::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  awakenid_ = 0u;
  status_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Awaken_SC_Transform::~Awaken_SC_Transform() {
  SharedDtor();
}

void Awaken_SC_Transform::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Awaken_SC_Transform::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Awaken_SC_Transform::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Awaken_SC_Transform_descriptor_;
}

const Awaken_SC_Transform& Awaken_SC_Transform::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_awaken_2eproto();
  return *default_instance_;
}

Awaken_SC_Transform* Awaken_SC_Transform::default_instance_ = NULL;

Awaken_SC_Transform* Awaken_SC_Transform::New() const {
  return new Awaken_SC_Transform;
}

void Awaken_SC_Transform::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    awakenid_ = 0u;
    status_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Awaken_SC_Transform::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_awakenId;
        break;
      }

      // optional uint32 awakenId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awakenId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &awakenid_)));
          set_has_awakenid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional bool status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Awaken_SC_Transform::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional uint32 awakenId = 2;
  if (has_awakenid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->awakenid(), output);
  }

  // optional bool status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Awaken_SC_Transform::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional uint32 awakenId = 2;
  if (has_awakenid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->awakenid(), target);
  }

  // optional bool status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Awaken_SC_Transform::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional uint32 awakenId = 2;
    if (has_awakenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->awakenid());
    }

    // optional bool status = 3;
    if (has_status()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Awaken_SC_Transform::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Awaken_SC_Transform* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Awaken_SC_Transform*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Awaken_SC_Transform::MergeFrom(const Awaken_SC_Transform& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_awakenid()) {
      set_awakenid(from.awakenid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Awaken_SC_Transform::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Awaken_SC_Transform::CopyFrom(const Awaken_SC_Transform& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Awaken_SC_Transform::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Awaken_SC_Transform::Swap(Awaken_SC_Transform* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(awakenid_, other->awakenid_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Awaken_SC_Transform::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Awaken_SC_Transform_descriptor_;
  metadata.reflection = Awaken_SC_Transform_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Awaken_CS_SkillOpen::kBookItemIdFieldNumber;
#endif  // !_MSC_VER

Awaken_CS_SkillOpen::Awaken_CS_SkillOpen()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Awaken_CS_SkillOpen::InitAsDefaultInstance() {
}

Awaken_CS_SkillOpen::Awaken_CS_SkillOpen(const Awaken_CS_SkillOpen& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Awaken_CS_SkillOpen::SharedCtor() {
  _cached_size_ = 0;
  bookitemid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Awaken_CS_SkillOpen::~Awaken_CS_SkillOpen() {
  SharedDtor();
}

void Awaken_CS_SkillOpen::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Awaken_CS_SkillOpen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Awaken_CS_SkillOpen::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Awaken_CS_SkillOpen_descriptor_;
}

const Awaken_CS_SkillOpen& Awaken_CS_SkillOpen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_awaken_2eproto();
  return *default_instance_;
}

Awaken_CS_SkillOpen* Awaken_CS_SkillOpen::default_instance_ = NULL;

Awaken_CS_SkillOpen* Awaken_CS_SkillOpen::New() const {
  return new Awaken_CS_SkillOpen;
}

void Awaken_CS_SkillOpen::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bookitemid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Awaken_CS_SkillOpen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bookItemId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bookitemid_)));
          set_has_bookitemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Awaken_CS_SkillOpen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bookItemId = 1;
  if (has_bookitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bookitemid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Awaken_CS_SkillOpen::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bookItemId = 1;
  if (has_bookitemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bookitemid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Awaken_CS_SkillOpen::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bookItemId = 1;
    if (has_bookitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bookitemid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Awaken_CS_SkillOpen::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Awaken_CS_SkillOpen* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Awaken_CS_SkillOpen*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Awaken_CS_SkillOpen::MergeFrom(const Awaken_CS_SkillOpen& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bookitemid()) {
      set_bookitemid(from.bookitemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Awaken_CS_SkillOpen::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Awaken_CS_SkillOpen::CopyFrom(const Awaken_CS_SkillOpen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Awaken_CS_SkillOpen::IsInitialized() const {

  return true;
}

void Awaken_CS_SkillOpen::Swap(Awaken_CS_SkillOpen* other) {
  if (other != this) {
    std::swap(bookitemid_, other->bookitemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Awaken_CS_SkillOpen::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Awaken_CS_SkillOpen_descriptor_;
  metadata.reflection = Awaken_CS_SkillOpen_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Awaken_SC_SkillOpen::kRetFieldNumber;
#endif  // !_MSC_VER

Awaken_SC_SkillOpen::Awaken_SC_SkillOpen()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Awaken_SC_SkillOpen::InitAsDefaultInstance() {
}

Awaken_SC_SkillOpen::Awaken_SC_SkillOpen(const Awaken_SC_SkillOpen& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Awaken_SC_SkillOpen::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Awaken_SC_SkillOpen::~Awaken_SC_SkillOpen() {
  SharedDtor();
}

void Awaken_SC_SkillOpen::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Awaken_SC_SkillOpen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Awaken_SC_SkillOpen::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Awaken_SC_SkillOpen_descriptor_;
}

const Awaken_SC_SkillOpen& Awaken_SC_SkillOpen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_awaken_2eproto();
  return *default_instance_;
}

Awaken_SC_SkillOpen* Awaken_SC_SkillOpen::default_instance_ = NULL;

Awaken_SC_SkillOpen* Awaken_SC_SkillOpen::New() const {
  return new Awaken_SC_SkillOpen;
}

void Awaken_SC_SkillOpen::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Awaken_SC_SkillOpen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Awaken_SC_SkillOpen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Awaken_SC_SkillOpen::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Awaken_SC_SkillOpen::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Awaken_SC_SkillOpen::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Awaken_SC_SkillOpen* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Awaken_SC_SkillOpen*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Awaken_SC_SkillOpen::MergeFrom(const Awaken_SC_SkillOpen& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Awaken_SC_SkillOpen::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Awaken_SC_SkillOpen::CopyFrom(const Awaken_SC_SkillOpen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Awaken_SC_SkillOpen::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Awaken_SC_SkillOpen::Swap(Awaken_SC_SkillOpen* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Awaken_SC_SkillOpen::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Awaken_SC_SkillOpen_descriptor_;
  metadata.reflection = Awaken_SC_SkillOpen_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

// @@protoc_insertion_point(global_scope)
