// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: battle2game.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "battle2game.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

namespace {

const ::google::protobuf::Descriptor* EnterTowerToBat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterTowerToBat_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildInfoToBat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildInfoToBat_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillInfoToBat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillInfoToBat_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillPosChangeToBat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillPosChangeToBat_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerDataToBat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerDataToBat_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillValueToGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillValueToGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateDataToGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateDataToGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* SecneLoadOK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SecneLoadOK_reflection_ = NULL;
const ::google::protobuf::Descriptor* BackToCityBorn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BackToCityBorn_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_battle2game_2eproto() {
  protobuf_AddDesc_battle2game_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "battle2game.proto");
  GOOGLE_CHECK(file != NULL);
  EnterTowerToBat_descriptor_ = file->message_type(0);
  static const int EnterTowerToBat_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterTowerToBat, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterTowerToBat, floor40_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterTowerToBat, pastime40_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterTowerToBat, floor60_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterTowerToBat, pastime60_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterTowerToBat, buffid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterTowerToBat, flownum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterTowerToBat, levtime_),
  };
  EnterTowerToBat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterTowerToBat_descriptor_,
      EnterTowerToBat::default_instance_,
      EnterTowerToBat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterTowerToBat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterTowerToBat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterTowerToBat));
  GuildInfoToBat_descriptor_ = file->message_type(1);
  static const int GuildInfoToBat_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfoToBat, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfoToBat, guildname_),
  };
  GuildInfoToBat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildInfoToBat_descriptor_,
      GuildInfoToBat::default_instance_,
      GuildInfoToBat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfoToBat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfoToBat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildInfoToBat));
  SkillInfoToBat_descriptor_ = file->message_type(2);
  static const int SkillInfoToBat_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfoToBat, old_skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfoToBat, newskill_),
  };
  SkillInfoToBat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillInfoToBat_descriptor_,
      SkillInfoToBat::default_instance_,
      SkillInfoToBat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfoToBat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfoToBat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillInfoToBat));
  SkillPosChangeToBat_descriptor_ = file->message_type(3);
  static const int SkillPosChangeToBat_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillPosChangeToBat, c1_skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillPosChangeToBat, c1_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillPosChangeToBat, c2_skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillPosChangeToBat, c2_pos_),
  };
  SkillPosChangeToBat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillPosChangeToBat_descriptor_,
      SkillPosChangeToBat::default_instance_,
      SkillPosChangeToBat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillPosChangeToBat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillPosChangeToBat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillPosChangeToBat));
  PlayerDataToBat_descriptor_ = file->message_type(4);
  static const int PlayerDataToBat_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDataToBat, attvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDataToBat, attprecent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDataToBat, currlev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDataToBat, dhlev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDataToBat, baseequip_),
  };
  PlayerDataToBat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerDataToBat_descriptor_,
      PlayerDataToBat::default_instance_,
      PlayerDataToBat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDataToBat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDataToBat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerDataToBat));
  SkillValueToGame_descriptor_ = file->message_type(5);
  static const int SkillValueToGame_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillValueToGame, skillid_),
  };
  SkillValueToGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillValueToGame_descriptor_,
      SkillValueToGame::default_instance_,
      SkillValueToGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillValueToGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillValueToGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillValueToGame));
  UpdateDataToGame_descriptor_ = file->message_type(6);
  static const int UpdateDataToGame_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDataToGame, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDataToGame, type_),
  };
  UpdateDataToGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateDataToGame_descriptor_,
      UpdateDataToGame::default_instance_,
      UpdateDataToGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDataToGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDataToGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateDataToGame));
  SecneLoadOK_descriptor_ = file->message_type(7);
  static const int SecneLoadOK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecneLoadOK, mapid_),
  };
  SecneLoadOK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SecneLoadOK_descriptor_,
      SecneLoadOK::default_instance_,
      SecneLoadOK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecneLoadOK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecneLoadOK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SecneLoadOK));
  BackToCityBorn_descriptor_ = file->message_type(8);
  static const int BackToCityBorn_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackToCityBorn, mapid_),
  };
  BackToCityBorn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BackToCityBorn_descriptor_,
      BackToCityBorn::default_instance_,
      BackToCityBorn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackToCityBorn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackToCityBorn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BackToCityBorn));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_battle2game_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterTowerToBat_descriptor_, &EnterTowerToBat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildInfoToBat_descriptor_, &GuildInfoToBat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillInfoToBat_descriptor_, &SkillInfoToBat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillPosChangeToBat_descriptor_, &SkillPosChangeToBat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerDataToBat_descriptor_, &PlayerDataToBat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillValueToGame_descriptor_, &SkillValueToGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateDataToGame_descriptor_, &UpdateDataToGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SecneLoadOK_descriptor_, &SecneLoadOK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BackToCityBorn_descriptor_, &BackToCityBorn::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_battle2game_2eproto() {
  delete EnterTowerToBat::default_instance_;
  delete EnterTowerToBat_reflection_;
  delete GuildInfoToBat::default_instance_;
  delete GuildInfoToBat_reflection_;
  delete SkillInfoToBat::default_instance_;
  delete SkillInfoToBat_reflection_;
  delete SkillPosChangeToBat::default_instance_;
  delete SkillPosChangeToBat_reflection_;
  delete PlayerDataToBat::default_instance_;
  delete PlayerDataToBat_reflection_;
  delete SkillValueToGame::default_instance_;
  delete SkillValueToGame_reflection_;
  delete UpdateDataToGame::default_instance_;
  delete UpdateDataToGame_reflection_;
  delete SecneLoadOK::default_instance_;
  delete SecneLoadOK_reflection_;
  delete BackToCityBorn::default_instance_;
  delete BackToCityBorn_reflection_;
}

void protobuf_AddDesc_battle2game_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::message::protobuf_AddDesc_common_2eproto();
  ::proto::message::protobuf_AddDesc_battle_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021battle2game.proto\022\rproto.message\032\014comm"
    "on.proto\032\014battle.proto\"\232\001\n\017EnterTowerToB"
    "at\022\r\n\005times\030\001 \001(\005\022\017\n\007floor40\030\002 \003(\005\022\021\n\tpa"
    "stime40\030\003 \003(\005\022\017\n\007floor60\030\004 \003(\005\022\021\n\tpastim"
    "e60\030\005 \003(\005\022\016\n\006buffid\030\006 \001(\005\022\017\n\007flownum\030\007 \001"
    "(\005\022\017\n\007levtime\030\010 \001(\005\"4\n\016GuildInfoToBat\022\017\n"
    "\007guildid\030\001 \001(\004\022\021\n\tguildname\030\002 \001(\t\"T\n\016Ski"
    "llInfoToBat\022\023\n\013old_skillid\030\001 \001(\005\022-\n\010news"
    "kill\030\002 \001(\0132\033.proto.message.BatSkillInfo\""
    "]\n\023SkillPosChangeToBat\022\022\n\nc1_skillid\030\001 \001"
    "(\r\022\016\n\006c1_pos\030\002 \001(\r\022\022\n\nc2_skillid\030\003 \001(\r\022\016"
    "\n\006c2_pos\030\004 \001(\r\"j\n\017PlayerDataToBat\022\020\n\010att"
    "value\030\001 \003(\005\022\022\n\nattprecent\030\002 \003(\005\022\017\n\007currl"
    "ev\030\003 \001(\005\022\r\n\005dhlev\030\004 \001(\r\022\021\n\tbaseequip\030\005 \001"
    "(\r\"#\n\020SkillValueToGame\022\017\n\007skillid\030\001 \001(\r\""
    "/\n\020UpdateDataToGame\022\r\n\005value\030\001 \003(\005\022\014\n\004ty"
    "pe\030\002 \003(\005\"\034\n\013SecneLoadOK\022\r\n\005mapid\030\001 \001(\r\"\037"
    "\n\016BackToCityBorn\022\r\n\005mapid\030\001 \001(\rB\017\n\rproto"
    ".message", 728);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "battle2game.proto", &protobuf_RegisterTypes);
  EnterTowerToBat::default_instance_ = new EnterTowerToBat();
  GuildInfoToBat::default_instance_ = new GuildInfoToBat();
  SkillInfoToBat::default_instance_ = new SkillInfoToBat();
  SkillPosChangeToBat::default_instance_ = new SkillPosChangeToBat();
  PlayerDataToBat::default_instance_ = new PlayerDataToBat();
  SkillValueToGame::default_instance_ = new SkillValueToGame();
  UpdateDataToGame::default_instance_ = new UpdateDataToGame();
  SecneLoadOK::default_instance_ = new SecneLoadOK();
  BackToCityBorn::default_instance_ = new BackToCityBorn();
  EnterTowerToBat::default_instance_->InitAsDefaultInstance();
  GuildInfoToBat::default_instance_->InitAsDefaultInstance();
  SkillInfoToBat::default_instance_->InitAsDefaultInstance();
  SkillPosChangeToBat::default_instance_->InitAsDefaultInstance();
  PlayerDataToBat::default_instance_->InitAsDefaultInstance();
  SkillValueToGame::default_instance_->InitAsDefaultInstance();
  UpdateDataToGame::default_instance_->InitAsDefaultInstance();
  SecneLoadOK::default_instance_->InitAsDefaultInstance();
  BackToCityBorn::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_battle2game_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_battle2game_2eproto {
  StaticDescriptorInitializer_battle2game_2eproto() {
    protobuf_AddDesc_battle2game_2eproto();
  }
} static_descriptor_initializer_battle2game_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int EnterTowerToBat::kTimesFieldNumber;
const int EnterTowerToBat::kFloor40FieldNumber;
const int EnterTowerToBat::kPastime40FieldNumber;
const int EnterTowerToBat::kFloor60FieldNumber;
const int EnterTowerToBat::kPastime60FieldNumber;
const int EnterTowerToBat::kBuffidFieldNumber;
const int EnterTowerToBat::kFlownumFieldNumber;
const int EnterTowerToBat::kLevtimeFieldNumber;
#endif  // !_MSC_VER

EnterTowerToBat::EnterTowerToBat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnterTowerToBat::InitAsDefaultInstance() {
}

EnterTowerToBat::EnterTowerToBat(const EnterTowerToBat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnterTowerToBat::SharedCtor() {
  _cached_size_ = 0;
  times_ = 0;
  buffid_ = 0;
  flownum_ = 0;
  levtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterTowerToBat::~EnterTowerToBat() {
  SharedDtor();
}

void EnterTowerToBat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnterTowerToBat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterTowerToBat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterTowerToBat_descriptor_;
}

const EnterTowerToBat& EnterTowerToBat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle2game_2eproto();
  return *default_instance_;
}

EnterTowerToBat* EnterTowerToBat::default_instance_ = NULL;

EnterTowerToBat* EnterTowerToBat::New() const {
  return new EnterTowerToBat;
}

void EnterTowerToBat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    times_ = 0;
    buffid_ = 0;
    flownum_ = 0;
    levtime_ = 0;
  }
  floor40_.Clear();
  pastime40_.Clear();
  floor60_.Clear();
  pastime60_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterTowerToBat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 times = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_floor40;
        break;
      }

      // repeated int32 floor40 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_floor40:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_floor40())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_floor40())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_floor40;
        if (input->ExpectTag(24)) goto parse_pastime40;
        break;
      }

      // repeated int32 pastime40 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pastime40:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_pastime40())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pastime40())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pastime40;
        if (input->ExpectTag(32)) goto parse_floor60;
        break;
      }

      // repeated int32 floor60 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_floor60:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_floor60())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_floor60())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_floor60;
        if (input->ExpectTag(40)) goto parse_pastime60;
        break;
      }

      // repeated int32 pastime60 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pastime60:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_pastime60())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pastime60())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_pastime60;
        if (input->ExpectTag(48)) goto parse_buffid;
        break;
      }

      // optional int32 buffid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buffid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buffid_)));
          set_has_buffid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_flownum;
        break;
      }

      // optional int32 flownum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flownum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flownum_)));
          set_has_flownum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_levtime;
        break;
      }

      // optional int32 levtime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_levtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &levtime_)));
          set_has_levtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnterTowerToBat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 times = 1;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->times(), output);
  }

  // repeated int32 floor40 = 2;
  for (int i = 0; i < this->floor40_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->floor40(i), output);
  }

  // repeated int32 pastime40 = 3;
  for (int i = 0; i < this->pastime40_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->pastime40(i), output);
  }

  // repeated int32 floor60 = 4;
  for (int i = 0; i < this->floor60_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->floor60(i), output);
  }

  // repeated int32 pastime60 = 5;
  for (int i = 0; i < this->pastime60_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->pastime60(i), output);
  }

  // optional int32 buffid = 6;
  if (has_buffid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->buffid(), output);
  }

  // optional int32 flownum = 7;
  if (has_flownum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->flownum(), output);
  }

  // optional int32 levtime = 8;
  if (has_levtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->levtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnterTowerToBat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 times = 1;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->times(), target);
  }

  // repeated int32 floor40 = 2;
  for (int i = 0; i < this->floor40_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->floor40(i), target);
  }

  // repeated int32 pastime40 = 3;
  for (int i = 0; i < this->pastime40_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->pastime40(i), target);
  }

  // repeated int32 floor60 = 4;
  for (int i = 0; i < this->floor60_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->floor60(i), target);
  }

  // repeated int32 pastime60 = 5;
  for (int i = 0; i < this->pastime60_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->pastime60(i), target);
  }

  // optional int32 buffid = 6;
  if (has_buffid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->buffid(), target);
  }

  // optional int32 flownum = 7;
  if (has_flownum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->flownum(), target);
  }

  // optional int32 levtime = 8;
  if (has_levtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->levtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnterTowerToBat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 times = 1;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

    // optional int32 buffid = 6;
    if (has_buffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buffid());
    }

    // optional int32 flownum = 7;
    if (has_flownum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flownum());
    }

    // optional int32 levtime = 8;
    if (has_levtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->levtime());
    }

  }
  // repeated int32 floor40 = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->floor40_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->floor40(i));
    }
    total_size += 1 * this->floor40_size() + data_size;
  }

  // repeated int32 pastime40 = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->pastime40_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pastime40(i));
    }
    total_size += 1 * this->pastime40_size() + data_size;
  }

  // repeated int32 floor60 = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->floor60_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->floor60(i));
    }
    total_size += 1 * this->floor60_size() + data_size;
  }

  // repeated int32 pastime60 = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->pastime60_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pastime60(i));
    }
    total_size += 1 * this->pastime60_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterTowerToBat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterTowerToBat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterTowerToBat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterTowerToBat::MergeFrom(const EnterTowerToBat& from) {
  GOOGLE_CHECK_NE(&from, this);
  floor40_.MergeFrom(from.floor40_);
  pastime40_.MergeFrom(from.pastime40_);
  floor60_.MergeFrom(from.floor60_);
  pastime60_.MergeFrom(from.pastime60_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_buffid()) {
      set_buffid(from.buffid());
    }
    if (from.has_flownum()) {
      set_flownum(from.flownum());
    }
    if (from.has_levtime()) {
      set_levtime(from.levtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterTowerToBat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterTowerToBat::CopyFrom(const EnterTowerToBat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterTowerToBat::IsInitialized() const {

  return true;
}

void EnterTowerToBat::Swap(EnterTowerToBat* other) {
  if (other != this) {
    std::swap(times_, other->times_);
    floor40_.Swap(&other->floor40_);
    pastime40_.Swap(&other->pastime40_);
    floor60_.Swap(&other->floor60_);
    pastime60_.Swap(&other->pastime60_);
    std::swap(buffid_, other->buffid_);
    std::swap(flownum_, other->flownum_);
    std::swap(levtime_, other->levtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterTowerToBat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterTowerToBat_descriptor_;
  metadata.reflection = EnterTowerToBat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildInfoToBat::kGuildidFieldNumber;
const int GuildInfoToBat::kGuildnameFieldNumber;
#endif  // !_MSC_VER

GuildInfoToBat::GuildInfoToBat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildInfoToBat::InitAsDefaultInstance() {
}

GuildInfoToBat::GuildInfoToBat(const GuildInfoToBat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildInfoToBat::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildInfoToBat::~GuildInfoToBat() {
  SharedDtor();
}

void GuildInfoToBat::SharedDtor() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (this != default_instance_) {
  }
}

void GuildInfoToBat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildInfoToBat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildInfoToBat_descriptor_;
}

const GuildInfoToBat& GuildInfoToBat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle2game_2eproto();
  return *default_instance_;
}

GuildInfoToBat* GuildInfoToBat::default_instance_ = NULL;

GuildInfoToBat* GuildInfoToBat::New() const {
  return new GuildInfoToBat;
}

void GuildInfoToBat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid_ = GOOGLE_ULONGLONG(0);
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildInfoToBat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 guildid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_guildname;
        break;
      }

      // optional string guildname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildInfoToBat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 guildid = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guildid(), output);
  }

  // optional string guildname = 2;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->guildname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildInfoToBat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 guildid = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guildid(), target);
  }

  // optional string guildname = 2;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->guildname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildInfoToBat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 guildid = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional string guildname = 2;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildInfoToBat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildInfoToBat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildInfoToBat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildInfoToBat::MergeFrom(const GuildInfoToBat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildInfoToBat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildInfoToBat::CopyFrom(const GuildInfoToBat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildInfoToBat::IsInitialized() const {

  return true;
}

void GuildInfoToBat::Swap(GuildInfoToBat* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(guildname_, other->guildname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildInfoToBat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildInfoToBat_descriptor_;
  metadata.reflection = GuildInfoToBat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillInfoToBat::kOldSkillidFieldNumber;
const int SkillInfoToBat::kNewskillFieldNumber;
#endif  // !_MSC_VER

SkillInfoToBat::SkillInfoToBat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillInfoToBat::InitAsDefaultInstance() {
  newskill_ = const_cast< ::proto::message::BatSkillInfo*>(&::proto::message::BatSkillInfo::default_instance());
}

SkillInfoToBat::SkillInfoToBat(const SkillInfoToBat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillInfoToBat::SharedCtor() {
  _cached_size_ = 0;
  old_skillid_ = 0;
  newskill_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillInfoToBat::~SkillInfoToBat() {
  SharedDtor();
}

void SkillInfoToBat::SharedDtor() {
  if (this != default_instance_) {
    delete newskill_;
  }
}

void SkillInfoToBat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillInfoToBat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillInfoToBat_descriptor_;
}

const SkillInfoToBat& SkillInfoToBat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle2game_2eproto();
  return *default_instance_;
}

SkillInfoToBat* SkillInfoToBat::default_instance_ = NULL;

SkillInfoToBat* SkillInfoToBat::New() const {
  return new SkillInfoToBat;
}

void SkillInfoToBat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    old_skillid_ = 0;
    if (has_newskill()) {
      if (newskill_ != NULL) newskill_->::proto::message::BatSkillInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillInfoToBat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 old_skillid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &old_skillid_)));
          set_has_old_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_newskill;
        break;
      }

      // optional .proto.message.BatSkillInfo newskill = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newskill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newskill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillInfoToBat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 old_skillid = 1;
  if (has_old_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->old_skillid(), output);
  }

  // optional .proto.message.BatSkillInfo newskill = 2;
  if (has_newskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->newskill(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillInfoToBat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 old_skillid = 1;
  if (has_old_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->old_skillid(), target);
  }

  // optional .proto.message.BatSkillInfo newskill = 2;
  if (has_newskill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->newskill(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillInfoToBat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 old_skillid = 1;
    if (has_old_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->old_skillid());
    }

    // optional .proto.message.BatSkillInfo newskill = 2;
    if (has_newskill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->newskill());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillInfoToBat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillInfoToBat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillInfoToBat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillInfoToBat::MergeFrom(const SkillInfoToBat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_old_skillid()) {
      set_old_skillid(from.old_skillid());
    }
    if (from.has_newskill()) {
      mutable_newskill()->::proto::message::BatSkillInfo::MergeFrom(from.newskill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillInfoToBat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillInfoToBat::CopyFrom(const SkillInfoToBat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillInfoToBat::IsInitialized() const {

  return true;
}

void SkillInfoToBat::Swap(SkillInfoToBat* other) {
  if (other != this) {
    std::swap(old_skillid_, other->old_skillid_);
    std::swap(newskill_, other->newskill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillInfoToBat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillInfoToBat_descriptor_;
  metadata.reflection = SkillInfoToBat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillPosChangeToBat::kC1SkillidFieldNumber;
const int SkillPosChangeToBat::kC1PosFieldNumber;
const int SkillPosChangeToBat::kC2SkillidFieldNumber;
const int SkillPosChangeToBat::kC2PosFieldNumber;
#endif  // !_MSC_VER

SkillPosChangeToBat::SkillPosChangeToBat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillPosChangeToBat::InitAsDefaultInstance() {
}

SkillPosChangeToBat::SkillPosChangeToBat(const SkillPosChangeToBat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillPosChangeToBat::SharedCtor() {
  _cached_size_ = 0;
  c1_skillid_ = 0u;
  c1_pos_ = 0u;
  c2_skillid_ = 0u;
  c2_pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillPosChangeToBat::~SkillPosChangeToBat() {
  SharedDtor();
}

void SkillPosChangeToBat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillPosChangeToBat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillPosChangeToBat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillPosChangeToBat_descriptor_;
}

const SkillPosChangeToBat& SkillPosChangeToBat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle2game_2eproto();
  return *default_instance_;
}

SkillPosChangeToBat* SkillPosChangeToBat::default_instance_ = NULL;

SkillPosChangeToBat* SkillPosChangeToBat::New() const {
  return new SkillPosChangeToBat;
}

void SkillPosChangeToBat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    c1_skillid_ = 0u;
    c1_pos_ = 0u;
    c2_skillid_ = 0u;
    c2_pos_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillPosChangeToBat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 c1_skillid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &c1_skillid_)));
          set_has_c1_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_c1_pos;
        break;
      }

      // optional uint32 c1_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_c1_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &c1_pos_)));
          set_has_c1_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_c2_skillid;
        break;
      }

      // optional uint32 c2_skillid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_c2_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &c2_skillid_)));
          set_has_c2_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_c2_pos;
        break;
      }

      // optional uint32 c2_pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_c2_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &c2_pos_)));
          set_has_c2_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillPosChangeToBat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 c1_skillid = 1;
  if (has_c1_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->c1_skillid(), output);
  }

  // optional uint32 c1_pos = 2;
  if (has_c1_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->c1_pos(), output);
  }

  // optional uint32 c2_skillid = 3;
  if (has_c2_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->c2_skillid(), output);
  }

  // optional uint32 c2_pos = 4;
  if (has_c2_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->c2_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillPosChangeToBat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 c1_skillid = 1;
  if (has_c1_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->c1_skillid(), target);
  }

  // optional uint32 c1_pos = 2;
  if (has_c1_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->c1_pos(), target);
  }

  // optional uint32 c2_skillid = 3;
  if (has_c2_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->c2_skillid(), target);
  }

  // optional uint32 c2_pos = 4;
  if (has_c2_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->c2_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillPosChangeToBat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 c1_skillid = 1;
    if (has_c1_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->c1_skillid());
    }

    // optional uint32 c1_pos = 2;
    if (has_c1_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->c1_pos());
    }

    // optional uint32 c2_skillid = 3;
    if (has_c2_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->c2_skillid());
    }

    // optional uint32 c2_pos = 4;
    if (has_c2_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->c2_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillPosChangeToBat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillPosChangeToBat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillPosChangeToBat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillPosChangeToBat::MergeFrom(const SkillPosChangeToBat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_c1_skillid()) {
      set_c1_skillid(from.c1_skillid());
    }
    if (from.has_c1_pos()) {
      set_c1_pos(from.c1_pos());
    }
    if (from.has_c2_skillid()) {
      set_c2_skillid(from.c2_skillid());
    }
    if (from.has_c2_pos()) {
      set_c2_pos(from.c2_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillPosChangeToBat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillPosChangeToBat::CopyFrom(const SkillPosChangeToBat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillPosChangeToBat::IsInitialized() const {

  return true;
}

void SkillPosChangeToBat::Swap(SkillPosChangeToBat* other) {
  if (other != this) {
    std::swap(c1_skillid_, other->c1_skillid_);
    std::swap(c1_pos_, other->c1_pos_);
    std::swap(c2_skillid_, other->c2_skillid_);
    std::swap(c2_pos_, other->c2_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillPosChangeToBat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillPosChangeToBat_descriptor_;
  metadata.reflection = SkillPosChangeToBat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerDataToBat::kAttvalueFieldNumber;
const int PlayerDataToBat::kAttprecentFieldNumber;
const int PlayerDataToBat::kCurrlevFieldNumber;
const int PlayerDataToBat::kDhlevFieldNumber;
const int PlayerDataToBat::kBaseequipFieldNumber;
#endif  // !_MSC_VER

PlayerDataToBat::PlayerDataToBat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerDataToBat::InitAsDefaultInstance() {
}

PlayerDataToBat::PlayerDataToBat(const PlayerDataToBat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerDataToBat::SharedCtor() {
  _cached_size_ = 0;
  currlev_ = 0;
  dhlev_ = 0u;
  baseequip_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerDataToBat::~PlayerDataToBat() {
  SharedDtor();
}

void PlayerDataToBat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerDataToBat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerDataToBat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerDataToBat_descriptor_;
}

const PlayerDataToBat& PlayerDataToBat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle2game_2eproto();
  return *default_instance_;
}

PlayerDataToBat* PlayerDataToBat::default_instance_ = NULL;

PlayerDataToBat* PlayerDataToBat::New() const {
  return new PlayerDataToBat;
}

void PlayerDataToBat::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    currlev_ = 0;
    dhlev_ = 0u;
    baseequip_ = 0u;
  }
  attvalue_.Clear();
  attprecent_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerDataToBat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 attvalue = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_attvalue())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_attvalue())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_attvalue;
        if (input->ExpectTag(16)) goto parse_attprecent;
        break;
      }

      // repeated int32 attprecent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attprecent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_attprecent())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_attprecent())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attprecent;
        if (input->ExpectTag(24)) goto parse_currlev;
        break;
      }

      // optional int32 currlev = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currlev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currlev_)));
          set_has_currlev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dhlev;
        break;
      }

      // optional uint32 dhlev = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dhlev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dhlev_)));
          set_has_dhlev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_baseequip;
        break;
      }

      // optional uint32 baseequip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baseequip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &baseequip_)));
          set_has_baseequip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerDataToBat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 attvalue = 1;
  for (int i = 0; i < this->attvalue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->attvalue(i), output);
  }

  // repeated int32 attprecent = 2;
  for (int i = 0; i < this->attprecent_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->attprecent(i), output);
  }

  // optional int32 currlev = 3;
  if (has_currlev()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->currlev(), output);
  }

  // optional uint32 dhlev = 4;
  if (has_dhlev()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dhlev(), output);
  }

  // optional uint32 baseequip = 5;
  if (has_baseequip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->baseequip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerDataToBat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 attvalue = 1;
  for (int i = 0; i < this->attvalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->attvalue(i), target);
  }

  // repeated int32 attprecent = 2;
  for (int i = 0; i < this->attprecent_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->attprecent(i), target);
  }

  // optional int32 currlev = 3;
  if (has_currlev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->currlev(), target);
  }

  // optional uint32 dhlev = 4;
  if (has_dhlev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dhlev(), target);
  }

  // optional uint32 baseequip = 5;
  if (has_baseequip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->baseequip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerDataToBat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional int32 currlev = 3;
    if (has_currlev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currlev());
    }

    // optional uint32 dhlev = 4;
    if (has_dhlev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dhlev());
    }

    // optional uint32 baseequip = 5;
    if (has_baseequip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->baseequip());
    }

  }
  // repeated int32 attvalue = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->attvalue_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->attvalue(i));
    }
    total_size += 1 * this->attvalue_size() + data_size;
  }

  // repeated int32 attprecent = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->attprecent_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->attprecent(i));
    }
    total_size += 1 * this->attprecent_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerDataToBat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerDataToBat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerDataToBat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerDataToBat::MergeFrom(const PlayerDataToBat& from) {
  GOOGLE_CHECK_NE(&from, this);
  attvalue_.MergeFrom(from.attvalue_);
  attprecent_.MergeFrom(from.attprecent_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_currlev()) {
      set_currlev(from.currlev());
    }
    if (from.has_dhlev()) {
      set_dhlev(from.dhlev());
    }
    if (from.has_baseequip()) {
      set_baseequip(from.baseequip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerDataToBat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerDataToBat::CopyFrom(const PlayerDataToBat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerDataToBat::IsInitialized() const {

  return true;
}

void PlayerDataToBat::Swap(PlayerDataToBat* other) {
  if (other != this) {
    attvalue_.Swap(&other->attvalue_);
    attprecent_.Swap(&other->attprecent_);
    std::swap(currlev_, other->currlev_);
    std::swap(dhlev_, other->dhlev_);
    std::swap(baseequip_, other->baseequip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerDataToBat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerDataToBat_descriptor_;
  metadata.reflection = PlayerDataToBat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillValueToGame::kSkillidFieldNumber;
#endif  // !_MSC_VER

SkillValueToGame::SkillValueToGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillValueToGame::InitAsDefaultInstance() {
}

SkillValueToGame::SkillValueToGame(const SkillValueToGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillValueToGame::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillValueToGame::~SkillValueToGame() {
  SharedDtor();
}

void SkillValueToGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillValueToGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillValueToGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillValueToGame_descriptor_;
}

const SkillValueToGame& SkillValueToGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle2game_2eproto();
  return *default_instance_;
}

SkillValueToGame* SkillValueToGame::default_instance_ = NULL;

SkillValueToGame* SkillValueToGame::New() const {
  return new SkillValueToGame;
}

void SkillValueToGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillValueToGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 skillid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillValueToGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 skillid = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillValueToGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 skillid = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skillid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillValueToGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 skillid = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillValueToGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillValueToGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillValueToGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillValueToGame::MergeFrom(const SkillValueToGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillValueToGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillValueToGame::CopyFrom(const SkillValueToGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillValueToGame::IsInitialized() const {

  return true;
}

void SkillValueToGame::Swap(SkillValueToGame* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillValueToGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillValueToGame_descriptor_;
  metadata.reflection = SkillValueToGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateDataToGame::kValueFieldNumber;
const int UpdateDataToGame::kTypeFieldNumber;
#endif  // !_MSC_VER

UpdateDataToGame::UpdateDataToGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateDataToGame::InitAsDefaultInstance() {
}

UpdateDataToGame::UpdateDataToGame(const UpdateDataToGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateDataToGame::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateDataToGame::~UpdateDataToGame() {
  SharedDtor();
}

void UpdateDataToGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateDataToGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateDataToGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateDataToGame_descriptor_;
}

const UpdateDataToGame& UpdateDataToGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle2game_2eproto();
  return *default_instance_;
}

UpdateDataToGame* UpdateDataToGame::default_instance_ = NULL;

UpdateDataToGame* UpdateDataToGame::New() const {
  return new UpdateDataToGame;
}

void UpdateDataToGame::Clear() {
  value_.Clear();
  type_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateDataToGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_value;
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // repeated int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_type())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateDataToGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->value(i), output);
  }

  // repeated int32 type = 2;
  for (int i = 0; i < this->type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->type(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateDataToGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->value(i), target);
  }

  // repeated int32 type = 2;
  for (int i = 0; i < this->type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->type(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateDataToGame::ByteSize() const {
  int total_size = 0;

  // repeated int32 value = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->value(i));
    }
    total_size += 1 * this->value_size() + data_size;
  }

  // repeated int32 type = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->type(i));
    }
    total_size += 1 * this->type_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateDataToGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateDataToGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateDataToGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateDataToGame::MergeFrom(const UpdateDataToGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  type_.MergeFrom(from.type_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateDataToGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateDataToGame::CopyFrom(const UpdateDataToGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateDataToGame::IsInitialized() const {

  return true;
}

void UpdateDataToGame::Swap(UpdateDataToGame* other) {
  if (other != this) {
    value_.Swap(&other->value_);
    type_.Swap(&other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateDataToGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateDataToGame_descriptor_;
  metadata.reflection = UpdateDataToGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SecneLoadOK::kMapidFieldNumber;
#endif  // !_MSC_VER

SecneLoadOK::SecneLoadOK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SecneLoadOK::InitAsDefaultInstance() {
}

SecneLoadOK::SecneLoadOK(const SecneLoadOK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SecneLoadOK::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SecneLoadOK::~SecneLoadOK() {
  SharedDtor();
}

void SecneLoadOK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SecneLoadOK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SecneLoadOK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SecneLoadOK_descriptor_;
}

const SecneLoadOK& SecneLoadOK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle2game_2eproto();
  return *default_instance_;
}

SecneLoadOK* SecneLoadOK::default_instance_ = NULL;

SecneLoadOK* SecneLoadOK::New() const {
  return new SecneLoadOK;
}

void SecneLoadOK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SecneLoadOK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SecneLoadOK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 mapid = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SecneLoadOK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 mapid = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SecneLoadOK::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mapid = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SecneLoadOK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SecneLoadOK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SecneLoadOK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SecneLoadOK::MergeFrom(const SecneLoadOK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SecneLoadOK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecneLoadOK::CopyFrom(const SecneLoadOK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecneLoadOK::IsInitialized() const {

  return true;
}

void SecneLoadOK::Swap(SecneLoadOK* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SecneLoadOK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SecneLoadOK_descriptor_;
  metadata.reflection = SecneLoadOK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BackToCityBorn::kMapidFieldNumber;
#endif  // !_MSC_VER

BackToCityBorn::BackToCityBorn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BackToCityBorn::InitAsDefaultInstance() {
}

BackToCityBorn::BackToCityBorn(const BackToCityBorn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BackToCityBorn::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BackToCityBorn::~BackToCityBorn() {
  SharedDtor();
}

void BackToCityBorn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BackToCityBorn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BackToCityBorn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BackToCityBorn_descriptor_;
}

const BackToCityBorn& BackToCityBorn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle2game_2eproto();
  return *default_instance_;
}

BackToCityBorn* BackToCityBorn::default_instance_ = NULL;

BackToCityBorn* BackToCityBorn::New() const {
  return new BackToCityBorn;
}

void BackToCityBorn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BackToCityBorn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BackToCityBorn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 mapid = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BackToCityBorn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 mapid = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BackToCityBorn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mapid = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BackToCityBorn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BackToCityBorn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BackToCityBorn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BackToCityBorn::MergeFrom(const BackToCityBorn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BackToCityBorn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BackToCityBorn::CopyFrom(const BackToCityBorn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackToCityBorn::IsInitialized() const {

  return true;
}

void BackToCityBorn::Swap(BackToCityBorn* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BackToCityBorn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BackToCityBorn_descriptor_;
  metadata.reflection = BackToCityBorn_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

// @@protoc_insertion_point(global_scope)
