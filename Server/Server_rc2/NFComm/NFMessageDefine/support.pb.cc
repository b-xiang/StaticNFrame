// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: support.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "support.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

namespace {

const ::google::protobuf::Descriptor* SupportData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SupportData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Support_CS_QuerySupportData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Support_CS_QuerySupportData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Support_SC_UpdateSupportData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Support_SC_UpdateSupportData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PointData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PointData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_support_2eproto() {
  protobuf_AddDesc_support_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "support.proto");
  GOOGLE_CHECK(file != NULL);
  SupportData_descriptor_ = file->message_type(0);
  static const int SupportData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupportData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupportData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupportData, progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupportData, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupportData, textname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupportData, textdesc_),
  };
  SupportData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SupportData_descriptor_,
      SupportData::default_instance_,
      SupportData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupportData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupportData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SupportData));
  Support_CS_QuerySupportData_descriptor_ = file->message_type(1);
  static const int Support_CS_QuerySupportData_offsets_[1] = {
  };
  Support_CS_QuerySupportData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Support_CS_QuerySupportData_descriptor_,
      Support_CS_QuerySupportData::default_instance_,
      Support_CS_QuerySupportData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Support_CS_QuerySupportData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Support_CS_QuerySupportData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Support_CS_QuerySupportData));
  Support_SC_UpdateSupportData_descriptor_ = file->message_type(2);
  static const int Support_SC_UpdateSupportData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Support_SC_UpdateSupportData, data_),
  };
  Support_SC_UpdateSupportData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Support_SC_UpdateSupportData_descriptor_,
      Support_SC_UpdateSupportData::default_instance_,
      Support_SC_UpdateSupportData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Support_SC_UpdateSupportData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Support_SC_UpdateSupportData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Support_SC_UpdateSupportData));
  PointData_descriptor_ = file->message_type(3);
  static const int PointData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointData, lastupdatetick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointData, todattotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointData, begintick_),
  };
  PointData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PointData_descriptor_,
      PointData::default_instance_,
      PointData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PointData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_support_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SupportData_descriptor_, &SupportData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Support_CS_QuerySupportData_descriptor_, &Support_CS_QuerySupportData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Support_SC_UpdateSupportData_descriptor_, &Support_SC_UpdateSupportData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PointData_descriptor_, &PointData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_support_2eproto() {
  delete SupportData::default_instance_;
  delete SupportData_reflection_;
  delete Support_CS_QuerySupportData::default_instance_;
  delete Support_CS_QuerySupportData_reflection_;
  delete Support_SC_UpdateSupportData::default_instance_;
  delete Support_SC_UpdateSupportData_reflection_;
  delete PointData::default_instance_;
  delete PointData_reflection_;
}

void protobuf_AddDesc_support_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rsupport.proto\022\rproto.message\"l\n\013Suppor"
    "tData\022\n\n\002ID\030\001 \002(\r\022\014\n\004type\030\002 \002(\r\022\020\n\010progr"
    "ess\030\003 \002(\r\022\r\n\005limit\030\004 \002(\r\022\020\n\010textname\030\005 \001"
    "(\r\022\020\n\010textdesc\030\006 \001(\r\"\035\n\033Support_CS_Query"
    "SupportData\"H\n\034Support_SC_UpdateSupportD"
    "ata\022(\n\004data\030\001 \003(\0132\032.proto.message.Suppor"
    "tData\"V\n\tPointData\022\n\n\002ID\030\001 \002(\r\022\026\n\016lastUp"
    "dateTick\030\002 \002(\004\022\022\n\ntodatTotal\030\003 \002(\r\022\021\n\tbe"
    "ginTick\030\004 \002(\004B\017\n\rproto.message", 350);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "support.proto", &protobuf_RegisterTypes);
  SupportData::default_instance_ = new SupportData();
  Support_CS_QuerySupportData::default_instance_ = new Support_CS_QuerySupportData();
  Support_SC_UpdateSupportData::default_instance_ = new Support_SC_UpdateSupportData();
  PointData::default_instance_ = new PointData();
  SupportData::default_instance_->InitAsDefaultInstance();
  Support_CS_QuerySupportData::default_instance_->InitAsDefaultInstance();
  Support_SC_UpdateSupportData::default_instance_->InitAsDefaultInstance();
  PointData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_support_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_support_2eproto {
  StaticDescriptorInitializer_support_2eproto() {
    protobuf_AddDesc_support_2eproto();
  }
} static_descriptor_initializer_support_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SupportData::kIDFieldNumber;
const int SupportData::kTypeFieldNumber;
const int SupportData::kProgressFieldNumber;
const int SupportData::kLimitFieldNumber;
const int SupportData::kTextnameFieldNumber;
const int SupportData::kTextdescFieldNumber;
#endif  // !_MSC_VER

SupportData::SupportData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SupportData::InitAsDefaultInstance() {
}

SupportData::SupportData(const SupportData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SupportData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  type_ = 0u;
  progress_ = 0u;
  limit_ = 0u;
  textname_ = 0u;
  textdesc_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SupportData::~SupportData() {
  SharedDtor();
}

void SupportData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SupportData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SupportData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SupportData_descriptor_;
}

const SupportData& SupportData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_support_2eproto();
  return *default_instance_;
}

SupportData* SupportData::default_instance_ = NULL;

SupportData* SupportData::New() const {
  return new SupportData;
}

void SupportData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    type_ = 0u;
    progress_ = 0u;
    limit_ = 0u;
    textname_ = 0u;
    textdesc_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SupportData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_progress;
        break;
      }

      // required uint32 progress = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &progress_)));
          set_has_progress();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_limit;
        break;
      }

      // required uint32 limit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_textname;
        break;
      }

      // optional uint32 textname = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_textname:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &textname_)));
          set_has_textname();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_textdesc;
        break;
      }

      // optional uint32 textdesc = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_textdesc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &textdesc_)));
          set_has_textdesc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SupportData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // required uint32 progress = 3;
  if (has_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->progress(), output);
  }

  // required uint32 limit = 4;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->limit(), output);
  }

  // optional uint32 textname = 5;
  if (has_textname()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->textname(), output);
  }

  // optional uint32 textdesc = 6;
  if (has_textdesc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->textdesc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SupportData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // required uint32 progress = 3;
  if (has_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->progress(), target);
  }

  // required uint32 limit = 4;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->limit(), target);
  }

  // optional uint32 textname = 5;
  if (has_textname()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->textname(), target);
  }

  // optional uint32 textdesc = 6;
  if (has_textdesc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->textdesc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SupportData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 progress = 3;
    if (has_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->progress());
    }

    // required uint32 limit = 4;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit());
    }

    // optional uint32 textname = 5;
    if (has_textname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->textname());
    }

    // optional uint32 textdesc = 6;
    if (has_textdesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->textdesc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SupportData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SupportData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SupportData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SupportData::MergeFrom(const SupportData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_progress()) {
      set_progress(from.progress());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
    if (from.has_textname()) {
      set_textname(from.textname());
    }
    if (from.has_textdesc()) {
      set_textdesc(from.textdesc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SupportData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SupportData::CopyFrom(const SupportData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SupportData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SupportData::Swap(SupportData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(progress_, other->progress_);
    std::swap(limit_, other->limit_);
    std::swap(textname_, other->textname_);
    std::swap(textdesc_, other->textdesc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SupportData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SupportData_descriptor_;
  metadata.reflection = SupportData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Support_CS_QuerySupportData::Support_CS_QuerySupportData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Support_CS_QuerySupportData::InitAsDefaultInstance() {
}

Support_CS_QuerySupportData::Support_CS_QuerySupportData(const Support_CS_QuerySupportData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Support_CS_QuerySupportData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Support_CS_QuerySupportData::~Support_CS_QuerySupportData() {
  SharedDtor();
}

void Support_CS_QuerySupportData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Support_CS_QuerySupportData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Support_CS_QuerySupportData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Support_CS_QuerySupportData_descriptor_;
}

const Support_CS_QuerySupportData& Support_CS_QuerySupportData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_support_2eproto();
  return *default_instance_;
}

Support_CS_QuerySupportData* Support_CS_QuerySupportData::default_instance_ = NULL;

Support_CS_QuerySupportData* Support_CS_QuerySupportData::New() const {
  return new Support_CS_QuerySupportData;
}

void Support_CS_QuerySupportData::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Support_CS_QuerySupportData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Support_CS_QuerySupportData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Support_CS_QuerySupportData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Support_CS_QuerySupportData::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Support_CS_QuerySupportData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Support_CS_QuerySupportData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Support_CS_QuerySupportData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Support_CS_QuerySupportData::MergeFrom(const Support_CS_QuerySupportData& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Support_CS_QuerySupportData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Support_CS_QuerySupportData::CopyFrom(const Support_CS_QuerySupportData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Support_CS_QuerySupportData::IsInitialized() const {

  return true;
}

void Support_CS_QuerySupportData::Swap(Support_CS_QuerySupportData* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Support_CS_QuerySupportData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Support_CS_QuerySupportData_descriptor_;
  metadata.reflection = Support_CS_QuerySupportData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Support_SC_UpdateSupportData::kDataFieldNumber;
#endif  // !_MSC_VER

Support_SC_UpdateSupportData::Support_SC_UpdateSupportData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Support_SC_UpdateSupportData::InitAsDefaultInstance() {
}

Support_SC_UpdateSupportData::Support_SC_UpdateSupportData(const Support_SC_UpdateSupportData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Support_SC_UpdateSupportData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Support_SC_UpdateSupportData::~Support_SC_UpdateSupportData() {
  SharedDtor();
}

void Support_SC_UpdateSupportData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Support_SC_UpdateSupportData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Support_SC_UpdateSupportData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Support_SC_UpdateSupportData_descriptor_;
}

const Support_SC_UpdateSupportData& Support_SC_UpdateSupportData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_support_2eproto();
  return *default_instance_;
}

Support_SC_UpdateSupportData* Support_SC_UpdateSupportData::default_instance_ = NULL;

Support_SC_UpdateSupportData* Support_SC_UpdateSupportData::New() const {
  return new Support_SC_UpdateSupportData;
}

void Support_SC_UpdateSupportData::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Support_SC_UpdateSupportData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.SupportData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Support_SC_UpdateSupportData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.SupportData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Support_SC_UpdateSupportData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.SupportData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Support_SC_UpdateSupportData::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.SupportData data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Support_SC_UpdateSupportData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Support_SC_UpdateSupportData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Support_SC_UpdateSupportData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Support_SC_UpdateSupportData::MergeFrom(const Support_SC_UpdateSupportData& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Support_SC_UpdateSupportData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Support_SC_UpdateSupportData::CopyFrom(const Support_SC_UpdateSupportData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Support_SC_UpdateSupportData::IsInitialized() const {

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void Support_SC_UpdateSupportData::Swap(Support_SC_UpdateSupportData* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Support_SC_UpdateSupportData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Support_SC_UpdateSupportData_descriptor_;
  metadata.reflection = Support_SC_UpdateSupportData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PointData::kIDFieldNumber;
const int PointData::kLastUpdateTickFieldNumber;
const int PointData::kTodatTotalFieldNumber;
const int PointData::kBeginTickFieldNumber;
#endif  // !_MSC_VER

PointData::PointData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PointData::InitAsDefaultInstance() {
}

PointData::PointData(const PointData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PointData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  lastupdatetick_ = GOOGLE_ULONGLONG(0);
  todattotal_ = 0u;
  begintick_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PointData::~PointData() {
  SharedDtor();
}

void PointData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PointData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PointData_descriptor_;
}

const PointData& PointData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_support_2eproto();
  return *default_instance_;
}

PointData* PointData::default_instance_ = NULL;

PointData* PointData::New() const {
  return new PointData;
}

void PointData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    lastupdatetick_ = GOOGLE_ULONGLONG(0);
    todattotal_ = 0u;
    begintick_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PointData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lastUpdateTick;
        break;
      }

      // required uint64 lastUpdateTick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastUpdateTick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastupdatetick_)));
          set_has_lastupdatetick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_todatTotal;
        break;
      }

      // required uint32 todatTotal = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_todatTotal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &todattotal_)));
          set_has_todattotal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_beginTick;
        break;
      }

      // required uint64 beginTick = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beginTick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &begintick_)));
          set_has_begintick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PointData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint64 lastUpdateTick = 2;
  if (has_lastupdatetick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->lastupdatetick(), output);
  }

  // required uint32 todatTotal = 3;
  if (has_todattotal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->todattotal(), output);
  }

  // required uint64 beginTick = 4;
  if (has_begintick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->begintick(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PointData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint64 lastUpdateTick = 2;
  if (has_lastupdatetick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->lastupdatetick(), target);
  }

  // required uint32 todatTotal = 3;
  if (has_todattotal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->todattotal(), target);
  }

  // required uint64 beginTick = 4;
  if (has_begintick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->begintick(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PointData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint64 lastUpdateTick = 2;
    if (has_lastupdatetick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastupdatetick());
    }

    // required uint32 todatTotal = 3;
    if (has_todattotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->todattotal());
    }

    // required uint64 beginTick = 4;
    if (has_begintick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->begintick());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PointData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PointData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PointData::MergeFrom(const PointData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_lastupdatetick()) {
      set_lastupdatetick(from.lastupdatetick());
    }
    if (from.has_todattotal()) {
      set_todattotal(from.todattotal());
    }
    if (from.has_begintick()) {
      set_begintick(from.begintick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PointData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointData::CopyFrom(const PointData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void PointData::Swap(PointData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(lastupdatetick_, other->lastupdatetick_);
    std::swap(todattotal_, other->todattotal_);
    std::swap(begintick_, other->begintick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PointData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PointData_descriptor_;
  metadata.reflection = PointData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

// @@protoc_insertion_point(global_scope)
