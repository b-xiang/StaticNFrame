// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dungeon.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dungeon.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

namespace {

const ::google::protobuf::Descriptor* Dungeon_SC_EnterDungeon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dungeon_SC_EnterDungeon_reflection_ = NULL;
const ::google::protobuf::Descriptor* Dungeon_CS_EnterDungeonOK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dungeon_CS_EnterDungeonOK_reflection_ = NULL;
const ::google::protobuf::Descriptor* Dungeon_SC_Story_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dungeon_SC_Story_reflection_ = NULL;
const ::google::protobuf::Descriptor* Dungeon_SC_Customs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dungeon_SC_Customs_reflection_ = NULL;
const ::google::protobuf::Descriptor* Dungeon_CS_RequestEnterDungeon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dungeon_CS_RequestEnterDungeon_reflection_ = NULL;
const ::google::protobuf::Descriptor* Game2Battle_RequestEnterDungeon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Game2Battle_RequestEnterDungeon_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Game_AckEnterDungeon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Game_AckEnterDungeon_reflection_ = NULL;
const ::google::protobuf::Descriptor* Dungeon_SC_RequestEnterDungeon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dungeon_SC_RequestEnterDungeon_reflection_ = NULL;
const ::google::protobuf::Descriptor* Dungeon_CS_PassStory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dungeon_CS_PassStory_reflection_ = NULL;
const ::google::protobuf::Descriptor* Dungeon_CS_LeaveDungeon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dungeon_CS_LeaveDungeon_reflection_ = NULL;
const ::google::protobuf::Descriptor* DungeonGrade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DungeonGrade_reflection_ = NULL;
const ::google::protobuf::Descriptor* RewardItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RewardItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Dungeon_SC_Result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dungeon_SC_Result_reflection_ = NULL;
const ::google::protobuf::Descriptor* Dungeon_CS_RequestEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dungeon_CS_RequestEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* Dungeon_CS_Relive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dungeon_CS_Relive_reflection_ = NULL;
const ::google::protobuf::Descriptor* Dungeon_SC_MonsterNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dungeon_SC_MonsterNum_reflection_ = NULL;
const ::google::protobuf::Descriptor* Dungeon_SC_ChangeCamp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dungeon_SC_ChangeCamp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Dungeon_SC_PretendStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dungeon_SC_PretendStart_reflection_ = NULL;
const ::google::protobuf::Descriptor* Dungeon_SC_PretendEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dungeon_SC_PretendEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* PassDungeon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PassDungeon_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrialInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrialInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SingleStoryDungeon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleStoryDungeon_reflection_ = NULL;
const ::google::protobuf::Descriptor* Dungeon_CS_GetDungeonInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dungeon_CS_GetDungeonInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Dungeon_CS_RequestEnterDungeonAgain_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dungeon_CS_RequestEnterDungeonAgain_reflection_ = NULL;
const ::google::protobuf::Descriptor* Dungeon_SC_GetDungeonInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dungeon_SC_GetDungeonInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Dungeon_SC_ChangeDungeonScene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dungeon_SC_ChangeDungeonScene_reflection_ = NULL;
const ::google::protobuf::Descriptor* Dungeon_CS_ChangeDungeonSceneOK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dungeon_CS_ChangeDungeonSceneOK_reflection_ = NULL;
const ::google::protobuf::Descriptor* Dungeon_CS_StarUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dungeon_CS_StarUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Dungeon_SC_StarUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dungeon_SC_StarUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Dungeon_CS_Sweep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dungeon_CS_Sweep_reflection_ = NULL;
const ::google::protobuf::Descriptor* Dungeon_SC_Sweep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dungeon_SC_Sweep_reflection_ = NULL;
const ::google::protobuf::Descriptor* Game2Battle_CreateDungeon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Game2Battle_CreateDungeon_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Game_CreateDungeon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Game_CreateDungeon_reflection_ = NULL;
const ::google::protobuf::Descriptor* Dungeon_SC_TimerStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dungeon_SC_TimerStart_reflection_ = NULL;
const ::google::protobuf::Descriptor* Dungeon_CS_TakeGradeSReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dungeon_CS_TakeGradeSReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Dungeon_SC_TakeGradeSReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dungeon_SC_TakeGradeSReward_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_dungeon_2eproto() {
  protobuf_AddDesc_dungeon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dungeon.proto");
  GOOGLE_CHECK(file != NULL);
  Dungeon_SC_EnterDungeon_descriptor_ = file->message_type(0);
  static const int Dungeon_SC_EnterDungeon_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_EnterDungeon, dungeonid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_EnterDungeon, pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_EnterDungeon, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_EnterDungeon, dungeonproid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_EnterDungeon, layer_),
  };
  Dungeon_SC_EnterDungeon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Dungeon_SC_EnterDungeon_descriptor_,
      Dungeon_SC_EnterDungeon::default_instance_,
      Dungeon_SC_EnterDungeon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_EnterDungeon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_EnterDungeon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Dungeon_SC_EnterDungeon));
  Dungeon_CS_EnterDungeonOK_descriptor_ = file->message_type(1);
  static const int Dungeon_CS_EnterDungeonOK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_CS_EnterDungeonOK, dungeonid_),
  };
  Dungeon_CS_EnterDungeonOK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Dungeon_CS_EnterDungeonOK_descriptor_,
      Dungeon_CS_EnterDungeonOK::default_instance_,
      Dungeon_CS_EnterDungeonOK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_CS_EnterDungeonOK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_CS_EnterDungeonOK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Dungeon_CS_EnterDungeonOK));
  Dungeon_SC_Story_descriptor_ = file->message_type(2);
  static const int Dungeon_SC_Story_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_Story, storyid_),
  };
  Dungeon_SC_Story_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Dungeon_SC_Story_descriptor_,
      Dungeon_SC_Story::default_instance_,
      Dungeon_SC_Story_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_Story, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_Story, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Dungeon_SC_Story));
  Dungeon_SC_Customs_descriptor_ = file->message_type(3);
  static const int Dungeon_SC_Customs_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_Customs, customsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_Customs, type_),
  };
  Dungeon_SC_Customs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Dungeon_SC_Customs_descriptor_,
      Dungeon_SC_Customs::default_instance_,
      Dungeon_SC_Customs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_Customs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_Customs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Dungeon_SC_Customs));
  Dungeon_CS_RequestEnterDungeon_descriptor_ = file->message_type(4);
  static const int Dungeon_CS_RequestEnterDungeon_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_CS_RequestEnterDungeon, dungeonproid_),
  };
  Dungeon_CS_RequestEnterDungeon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Dungeon_CS_RequestEnterDungeon_descriptor_,
      Dungeon_CS_RequestEnterDungeon::default_instance_,
      Dungeon_CS_RequestEnterDungeon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_CS_RequestEnterDungeon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_CS_RequestEnterDungeon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Dungeon_CS_RequestEnterDungeon));
  Game2Battle_RequestEnterDungeon_descriptor_ = file->message_type(5);
  static const int Game2Battle_RequestEnterDungeon_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_RequestEnterDungeon, dungeonproid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_RequestEnterDungeon, uifirst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_RequestEnterDungeon, uiagain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_RequestEnterDungeon, dungeonassignid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_RequestEnterDungeon, splyinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_RequestEnterDungeon, sboatinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_RequestEnterDungeon, uibattlelink_),
  };
  Game2Battle_RequestEnterDungeon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Game2Battle_RequestEnterDungeon_descriptor_,
      Game2Battle_RequestEnterDungeon::default_instance_,
      Game2Battle_RequestEnterDungeon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_RequestEnterDungeon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_RequestEnterDungeon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Game2Battle_RequestEnterDungeon));
  Battle2Game_AckEnterDungeon_descriptor_ = file->message_type(6);
  static const int Battle2Game_AckEnterDungeon_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_AckEnterDungeon, dungeonid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_AckEnterDungeon, pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_AckEnterDungeon, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_AckEnterDungeon, dungeonproid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_AckEnterDungeon, layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_AckEnterDungeon, result_),
  };
  Battle2Game_AckEnterDungeon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Game_AckEnterDungeon_descriptor_,
      Battle2Game_AckEnterDungeon::default_instance_,
      Battle2Game_AckEnterDungeon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_AckEnterDungeon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_AckEnterDungeon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Game_AckEnterDungeon));
  Dungeon_SC_RequestEnterDungeon_descriptor_ = file->message_type(7);
  static const int Dungeon_SC_RequestEnterDungeon_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_RequestEnterDungeon, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_RequestEnterDungeon, charname_list_),
  };
  Dungeon_SC_RequestEnterDungeon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Dungeon_SC_RequestEnterDungeon_descriptor_,
      Dungeon_SC_RequestEnterDungeon::default_instance_,
      Dungeon_SC_RequestEnterDungeon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_RequestEnterDungeon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_RequestEnterDungeon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Dungeon_SC_RequestEnterDungeon));
  Dungeon_CS_PassStory_descriptor_ = file->message_type(8);
  static const int Dungeon_CS_PassStory_offsets_[1] = {
  };
  Dungeon_CS_PassStory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Dungeon_CS_PassStory_descriptor_,
      Dungeon_CS_PassStory::default_instance_,
      Dungeon_CS_PassStory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_CS_PassStory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_CS_PassStory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Dungeon_CS_PassStory));
  Dungeon_CS_LeaveDungeon_descriptor_ = file->message_type(9);
  static const int Dungeon_CS_LeaveDungeon_offsets_[1] = {
  };
  Dungeon_CS_LeaveDungeon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Dungeon_CS_LeaveDungeon_descriptor_,
      Dungeon_CS_LeaveDungeon::default_instance_,
      Dungeon_CS_LeaveDungeon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_CS_LeaveDungeon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_CS_LeaveDungeon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Dungeon_CS_LeaveDungeon));
  DungeonGrade_descriptor_ = file->message_type(10);
  static const int DungeonGrade_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonGrade, gtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonGrade, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonGrade, grade_),
  };
  DungeonGrade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DungeonGrade_descriptor_,
      DungeonGrade::default_instance_,
      DungeonGrade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonGrade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonGrade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DungeonGrade));
  RewardItem_descriptor_ = file->message_type(11);
  static const int RewardItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardItem, num_),
  };
  RewardItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RewardItem_descriptor_,
      RewardItem::default_instance_,
      RewardItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RewardItem));
  Dungeon_SC_Result_descriptor_ = file->message_type(12);
  static const int Dungeon_SC_Result_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_Result, rt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_Result, dungeon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_Result, total_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_Result, grade_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_Result, item_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_Result, extra_list_),
  };
  Dungeon_SC_Result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Dungeon_SC_Result_descriptor_,
      Dungeon_SC_Result::default_instance_,
      Dungeon_SC_Result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_Result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_Result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Dungeon_SC_Result));
  Dungeon_CS_RequestEvent_descriptor_ = file->message_type(13);
  static const int Dungeon_CS_RequestEvent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_CS_RequestEvent, rt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_CS_RequestEvent, value_),
  };
  Dungeon_CS_RequestEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Dungeon_CS_RequestEvent_descriptor_,
      Dungeon_CS_RequestEvent::default_instance_,
      Dungeon_CS_RequestEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_CS_RequestEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_CS_RequestEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Dungeon_CS_RequestEvent));
  Dungeon_CS_Relive_descriptor_ = file->message_type(14);
  static const int Dungeon_CS_Relive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_CS_Relive, type_),
  };
  Dungeon_CS_Relive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Dungeon_CS_Relive_descriptor_,
      Dungeon_CS_Relive::default_instance_,
      Dungeon_CS_Relive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_CS_Relive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_CS_Relive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Dungeon_CS_Relive));
  Dungeon_SC_MonsterNum_descriptor_ = file->message_type(15);
  static const int Dungeon_SC_MonsterNum_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_MonsterNum, monsternum_),
  };
  Dungeon_SC_MonsterNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Dungeon_SC_MonsterNum_descriptor_,
      Dungeon_SC_MonsterNum::default_instance_,
      Dungeon_SC_MonsterNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_MonsterNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_MonsterNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Dungeon_SC_MonsterNum));
  Dungeon_SC_ChangeCamp_descriptor_ = file->message_type(16);
  static const int Dungeon_SC_ChangeCamp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_ChangeCamp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_ChangeCamp, camp_),
  };
  Dungeon_SC_ChangeCamp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Dungeon_SC_ChangeCamp_descriptor_,
      Dungeon_SC_ChangeCamp::default_instance_,
      Dungeon_SC_ChangeCamp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_ChangeCamp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_ChangeCamp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Dungeon_SC_ChangeCamp));
  Dungeon_SC_PretendStart_descriptor_ = file->message_type(17);
  static const int Dungeon_SC_PretendStart_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_PretendStart, camp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_PretendStart, bodyid_),
  };
  Dungeon_SC_PretendStart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Dungeon_SC_PretendStart_descriptor_,
      Dungeon_SC_PretendStart::default_instance_,
      Dungeon_SC_PretendStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_PretendStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_PretendStart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Dungeon_SC_PretendStart));
  Dungeon_SC_PretendEnd_descriptor_ = file->message_type(18);
  static const int Dungeon_SC_PretendEnd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_PretendEnd, camp_),
  };
  Dungeon_SC_PretendEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Dungeon_SC_PretendEnd_descriptor_,
      Dungeon_SC_PretendEnd::default_instance_,
      Dungeon_SC_PretendEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_PretendEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_PretendEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Dungeon_SC_PretendEnd));
  PassDungeon_descriptor_ = file->message_type(19);
  static const int PassDungeon_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassDungeon, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassDungeon, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassDungeon, reward_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassDungeon, enter_times_),
  };
  PassDungeon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PassDungeon_descriptor_,
      PassDungeon::default_instance_,
      PassDungeon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassDungeon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassDungeon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PassDungeon));
  TrialInfo_descriptor_ = file->message_type(20);
  static const int TrialInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrialInfo, uisweep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrialInfo, uicurfloor_),
  };
  TrialInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrialInfo_descriptor_,
      TrialInfo::default_instance_,
      TrialInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrialInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrialInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrialInfo));
  SingleStoryDungeon_descriptor_ = file->message_type(21);
  static const int SingleStoryDungeon_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleStoryDungeon, open_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleStoryDungeon, pass_list_),
  };
  SingleStoryDungeon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SingleStoryDungeon_descriptor_,
      SingleStoryDungeon::default_instance_,
      SingleStoryDungeon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleStoryDungeon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleStoryDungeon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SingleStoryDungeon));
  Dungeon_CS_GetDungeonInfo_descriptor_ = file->message_type(22);
  static const int Dungeon_CS_GetDungeonInfo_offsets_[1] = {
  };
  Dungeon_CS_GetDungeonInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Dungeon_CS_GetDungeonInfo_descriptor_,
      Dungeon_CS_GetDungeonInfo::default_instance_,
      Dungeon_CS_GetDungeonInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_CS_GetDungeonInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_CS_GetDungeonInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Dungeon_CS_GetDungeonInfo));
  Dungeon_CS_RequestEnterDungeonAgain_descriptor_ = file->message_type(23);
  static const int Dungeon_CS_RequestEnterDungeonAgain_offsets_[1] = {
  };
  Dungeon_CS_RequestEnterDungeonAgain_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Dungeon_CS_RequestEnterDungeonAgain_descriptor_,
      Dungeon_CS_RequestEnterDungeonAgain::default_instance_,
      Dungeon_CS_RequestEnterDungeonAgain_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_CS_RequestEnterDungeonAgain, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_CS_RequestEnterDungeonAgain, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Dungeon_CS_RequestEnterDungeonAgain));
  Dungeon_SC_GetDungeonInfo_descriptor_ = file->message_type(24);
  static const int Dungeon_SC_GetDungeonInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_GetDungeonInfo, single_ordinary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_GetDungeonInfo, single_elite_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_GetDungeonInfo, trial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_GetDungeonInfo, material_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_GetDungeonInfo, single_trial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_GetDungeonInfo, other_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_GetDungeonInfo, grade_s_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_GetDungeonInfo, grade_s_rewardtimes_),
  };
  Dungeon_SC_GetDungeonInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Dungeon_SC_GetDungeonInfo_descriptor_,
      Dungeon_SC_GetDungeonInfo::default_instance_,
      Dungeon_SC_GetDungeonInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_GetDungeonInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_GetDungeonInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Dungeon_SC_GetDungeonInfo));
  Dungeon_SC_ChangeDungeonScene_descriptor_ = file->message_type(25);
  static const int Dungeon_SC_ChangeDungeonScene_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_ChangeDungeonScene, dungeon_scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_ChangeDungeonScene, pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_ChangeDungeonScene, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_ChangeDungeonScene, layer_),
  };
  Dungeon_SC_ChangeDungeonScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Dungeon_SC_ChangeDungeonScene_descriptor_,
      Dungeon_SC_ChangeDungeonScene::default_instance_,
      Dungeon_SC_ChangeDungeonScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_ChangeDungeonScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_ChangeDungeonScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Dungeon_SC_ChangeDungeonScene));
  Dungeon_CS_ChangeDungeonSceneOK_descriptor_ = file->message_type(26);
  static const int Dungeon_CS_ChangeDungeonSceneOK_offsets_[1] = {
  };
  Dungeon_CS_ChangeDungeonSceneOK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Dungeon_CS_ChangeDungeonSceneOK_descriptor_,
      Dungeon_CS_ChangeDungeonSceneOK::default_instance_,
      Dungeon_CS_ChangeDungeonSceneOK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_CS_ChangeDungeonSceneOK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_CS_ChangeDungeonSceneOK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Dungeon_CS_ChangeDungeonSceneOK));
  Dungeon_CS_StarUp_descriptor_ = file->message_type(27);
  static const int Dungeon_CS_StarUp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_CS_StarUp, id_),
  };
  Dungeon_CS_StarUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Dungeon_CS_StarUp_descriptor_,
      Dungeon_CS_StarUp::default_instance_,
      Dungeon_CS_StarUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_CS_StarUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_CS_StarUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Dungeon_CS_StarUp));
  Dungeon_SC_StarUp_descriptor_ = file->message_type(28);
  static const int Dungeon_SC_StarUp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_StarUp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_StarUp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_StarUp, grade_),
  };
  Dungeon_SC_StarUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Dungeon_SC_StarUp_descriptor_,
      Dungeon_SC_StarUp::default_instance_,
      Dungeon_SC_StarUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_StarUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_StarUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Dungeon_SC_StarUp));
  Dungeon_CS_Sweep_descriptor_ = file->message_type(29);
  static const int Dungeon_CS_Sweep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_CS_Sweep, id_),
  };
  Dungeon_CS_Sweep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Dungeon_CS_Sweep_descriptor_,
      Dungeon_CS_Sweep::default_instance_,
      Dungeon_CS_Sweep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_CS_Sweep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_CS_Sweep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Dungeon_CS_Sweep));
  Dungeon_SC_Sweep_descriptor_ = file->message_type(30);
  static const int Dungeon_SC_Sweep_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_Sweep, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_Sweep, dungeon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_Sweep, item_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_Sweep, extra_list_),
  };
  Dungeon_SC_Sweep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Dungeon_SC_Sweep_descriptor_,
      Dungeon_SC_Sweep::default_instance_,
      Dungeon_SC_Sweep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_Sweep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_Sweep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Dungeon_SC_Sweep));
  Game2Battle_CreateDungeon_descriptor_ = file->message_type(31);
  static const int Game2Battle_CreateDungeon_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_CreateDungeon, uidungeonid_),
  };
  Game2Battle_CreateDungeon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Game2Battle_CreateDungeon_descriptor_,
      Game2Battle_CreateDungeon::default_instance_,
      Game2Battle_CreateDungeon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_CreateDungeon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2Battle_CreateDungeon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Game2Battle_CreateDungeon));
  Battle2Game_CreateDungeon_descriptor_ = file->message_type(32);
  static const int Battle2Game_CreateDungeon_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_CreateDungeon, uidungeonid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_CreateDungeon, uidungeonassignid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_CreateDungeon, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_CreateDungeon, port_),
  };
  Battle2Game_CreateDungeon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Game_CreateDungeon_descriptor_,
      Battle2Game_CreateDungeon::default_instance_,
      Battle2Game_CreateDungeon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_CreateDungeon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Game_CreateDungeon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Game_CreateDungeon));
  Dungeon_SC_TimerStart_descriptor_ = file->message_type(33);
  static const int Dungeon_SC_TimerStart_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_TimerStart, dungeon_scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_TimerStart, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_TimerStart, port_),
  };
  Dungeon_SC_TimerStart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Dungeon_SC_TimerStart_descriptor_,
      Dungeon_SC_TimerStart::default_instance_,
      Dungeon_SC_TimerStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_TimerStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_TimerStart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Dungeon_SC_TimerStart));
  Dungeon_CS_TakeGradeSReward_descriptor_ = file->message_type(34);
  static const int Dungeon_CS_TakeGradeSReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_CS_TakeGradeSReward, index_),
  };
  Dungeon_CS_TakeGradeSReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Dungeon_CS_TakeGradeSReward_descriptor_,
      Dungeon_CS_TakeGradeSReward::default_instance_,
      Dungeon_CS_TakeGradeSReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_CS_TakeGradeSReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_CS_TakeGradeSReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Dungeon_CS_TakeGradeSReward));
  Dungeon_SC_TakeGradeSReward_descriptor_ = file->message_type(35);
  static const int Dungeon_SC_TakeGradeSReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_TakeGradeSReward, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_TakeGradeSReward, result_),
  };
  Dungeon_SC_TakeGradeSReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Dungeon_SC_TakeGradeSReward_descriptor_,
      Dungeon_SC_TakeGradeSReward::default_instance_,
      Dungeon_SC_TakeGradeSReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_TakeGradeSReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dungeon_SC_TakeGradeSReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Dungeon_SC_TakeGradeSReward));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dungeon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Dungeon_SC_EnterDungeon_descriptor_, &Dungeon_SC_EnterDungeon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Dungeon_CS_EnterDungeonOK_descriptor_, &Dungeon_CS_EnterDungeonOK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Dungeon_SC_Story_descriptor_, &Dungeon_SC_Story::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Dungeon_SC_Customs_descriptor_, &Dungeon_SC_Customs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Dungeon_CS_RequestEnterDungeon_descriptor_, &Dungeon_CS_RequestEnterDungeon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Game2Battle_RequestEnterDungeon_descriptor_, &Game2Battle_RequestEnterDungeon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Game_AckEnterDungeon_descriptor_, &Battle2Game_AckEnterDungeon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Dungeon_SC_RequestEnterDungeon_descriptor_, &Dungeon_SC_RequestEnterDungeon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Dungeon_CS_PassStory_descriptor_, &Dungeon_CS_PassStory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Dungeon_CS_LeaveDungeon_descriptor_, &Dungeon_CS_LeaveDungeon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DungeonGrade_descriptor_, &DungeonGrade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RewardItem_descriptor_, &RewardItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Dungeon_SC_Result_descriptor_, &Dungeon_SC_Result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Dungeon_CS_RequestEvent_descriptor_, &Dungeon_CS_RequestEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Dungeon_CS_Relive_descriptor_, &Dungeon_CS_Relive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Dungeon_SC_MonsterNum_descriptor_, &Dungeon_SC_MonsterNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Dungeon_SC_ChangeCamp_descriptor_, &Dungeon_SC_ChangeCamp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Dungeon_SC_PretendStart_descriptor_, &Dungeon_SC_PretendStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Dungeon_SC_PretendEnd_descriptor_, &Dungeon_SC_PretendEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PassDungeon_descriptor_, &PassDungeon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrialInfo_descriptor_, &TrialInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SingleStoryDungeon_descriptor_, &SingleStoryDungeon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Dungeon_CS_GetDungeonInfo_descriptor_, &Dungeon_CS_GetDungeonInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Dungeon_CS_RequestEnterDungeonAgain_descriptor_, &Dungeon_CS_RequestEnterDungeonAgain::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Dungeon_SC_GetDungeonInfo_descriptor_, &Dungeon_SC_GetDungeonInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Dungeon_SC_ChangeDungeonScene_descriptor_, &Dungeon_SC_ChangeDungeonScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Dungeon_CS_ChangeDungeonSceneOK_descriptor_, &Dungeon_CS_ChangeDungeonSceneOK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Dungeon_CS_StarUp_descriptor_, &Dungeon_CS_StarUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Dungeon_SC_StarUp_descriptor_, &Dungeon_SC_StarUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Dungeon_CS_Sweep_descriptor_, &Dungeon_CS_Sweep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Dungeon_SC_Sweep_descriptor_, &Dungeon_SC_Sweep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Game2Battle_CreateDungeon_descriptor_, &Game2Battle_CreateDungeon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Game_CreateDungeon_descriptor_, &Battle2Game_CreateDungeon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Dungeon_SC_TimerStart_descriptor_, &Dungeon_SC_TimerStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Dungeon_CS_TakeGradeSReward_descriptor_, &Dungeon_CS_TakeGradeSReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Dungeon_SC_TakeGradeSReward_descriptor_, &Dungeon_SC_TakeGradeSReward::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dungeon_2eproto() {
  delete Dungeon_SC_EnterDungeon::default_instance_;
  delete Dungeon_SC_EnterDungeon_reflection_;
  delete Dungeon_CS_EnterDungeonOK::default_instance_;
  delete Dungeon_CS_EnterDungeonOK_reflection_;
  delete Dungeon_SC_Story::default_instance_;
  delete Dungeon_SC_Story_reflection_;
  delete Dungeon_SC_Customs::default_instance_;
  delete Dungeon_SC_Customs_reflection_;
  delete Dungeon_CS_RequestEnterDungeon::default_instance_;
  delete Dungeon_CS_RequestEnterDungeon_reflection_;
  delete Game2Battle_RequestEnterDungeon::default_instance_;
  delete Game2Battle_RequestEnterDungeon_reflection_;
  delete Battle2Game_AckEnterDungeon::default_instance_;
  delete Battle2Game_AckEnterDungeon_reflection_;
  delete Dungeon_SC_RequestEnterDungeon::default_instance_;
  delete Dungeon_SC_RequestEnterDungeon_reflection_;
  delete Dungeon_CS_PassStory::default_instance_;
  delete Dungeon_CS_PassStory_reflection_;
  delete Dungeon_CS_LeaveDungeon::default_instance_;
  delete Dungeon_CS_LeaveDungeon_reflection_;
  delete DungeonGrade::default_instance_;
  delete DungeonGrade_reflection_;
  delete RewardItem::default_instance_;
  delete RewardItem_reflection_;
  delete Dungeon_SC_Result::default_instance_;
  delete Dungeon_SC_Result_reflection_;
  delete Dungeon_CS_RequestEvent::default_instance_;
  delete Dungeon_CS_RequestEvent_reflection_;
  delete Dungeon_CS_Relive::default_instance_;
  delete Dungeon_CS_Relive_reflection_;
  delete Dungeon_SC_MonsterNum::default_instance_;
  delete Dungeon_SC_MonsterNum_reflection_;
  delete Dungeon_SC_ChangeCamp::default_instance_;
  delete Dungeon_SC_ChangeCamp_reflection_;
  delete Dungeon_SC_PretendStart::default_instance_;
  delete Dungeon_SC_PretendStart_reflection_;
  delete Dungeon_SC_PretendEnd::default_instance_;
  delete Dungeon_SC_PretendEnd_reflection_;
  delete PassDungeon::default_instance_;
  delete PassDungeon_reflection_;
  delete TrialInfo::default_instance_;
  delete TrialInfo_reflection_;
  delete SingleStoryDungeon::default_instance_;
  delete SingleStoryDungeon_reflection_;
  delete Dungeon_CS_GetDungeonInfo::default_instance_;
  delete Dungeon_CS_GetDungeonInfo_reflection_;
  delete Dungeon_CS_RequestEnterDungeonAgain::default_instance_;
  delete Dungeon_CS_RequestEnterDungeonAgain_reflection_;
  delete Dungeon_SC_GetDungeonInfo::default_instance_;
  delete Dungeon_SC_GetDungeonInfo_reflection_;
  delete Dungeon_SC_ChangeDungeonScene::default_instance_;
  delete Dungeon_SC_ChangeDungeonScene_reflection_;
  delete Dungeon_CS_ChangeDungeonSceneOK::default_instance_;
  delete Dungeon_CS_ChangeDungeonSceneOK_reflection_;
  delete Dungeon_CS_StarUp::default_instance_;
  delete Dungeon_CS_StarUp_reflection_;
  delete Dungeon_SC_StarUp::default_instance_;
  delete Dungeon_SC_StarUp_reflection_;
  delete Dungeon_CS_Sweep::default_instance_;
  delete Dungeon_CS_Sweep_reflection_;
  delete Dungeon_SC_Sweep::default_instance_;
  delete Dungeon_SC_Sweep_reflection_;
  delete Game2Battle_CreateDungeon::default_instance_;
  delete Game2Battle_CreateDungeon_reflection_;
  delete Battle2Game_CreateDungeon::default_instance_;
  delete Battle2Game_CreateDungeon_reflection_;
  delete Dungeon_SC_TimerStart::default_instance_;
  delete Dungeon_SC_TimerStart_reflection_;
  delete Dungeon_CS_TakeGradeSReward::default_instance_;
  delete Dungeon_CS_TakeGradeSReward_reflection_;
  delete Dungeon_SC_TakeGradeSReward::default_instance_;
  delete Dungeon_SC_TakeGradeSReward_reflection_;
}

void protobuf_AddDesc_dungeon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::message::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rdungeon.proto\022\rproto.message\032\014common.p"
    "roto\"\202\001\n\027Dungeon_SC_EnterDungeon\022\021\n\tDung"
    "eonID\030\001 \002(\r\022\"\n\002Pt\030\002 \001(\0132\026.proto.message."
    "Point3D\022\013\n\003Dir\030\003 \001(\002\022\024\n\014DungeonProId\030\004 \001"
    "(\r\022\r\n\005Layer\030\005 \001(\r\".\n\031Dungeon_CS_EnterDun"
    "geonOK\022\021\n\tDungeonID\030\001 \002(\r\"#\n\020Dungeon_SC_"
    "Story\022\017\n\007StoryID\030\001 \002(\r\"5\n\022Dungeon_SC_Cus"
    "toms\022\021\n\tCustomsID\030\001 \002(\r\022\014\n\004Type\030\002 \002(\005\"6\n"
    "\036Dungeon_CS_RequestEnterDungeon\022\024\n\014Dunge"
    "onProId\030\001 \001(\r\"\355\001\n\037Game2Battle_RequestEnt"
    "erDungeon\022\024\n\014DungeonProId\030\001 \001(\r\022\017\n\007uiFir"
    "st\030\002 \001(\r\022\017\n\007uiAgain\030\003 \001(\r\022\027\n\017DungeonAssi"
    "gnId\030\004 \001(\r\0221\n\010sPlyInfo\030\005 \002(\0132\037.proto.mes"
    "sage.BattlePlayerInfo\0220\n\tsBoatInfo\030\006 \001(\013"
    "2\035.proto.message.BattleBoatInfo\022\024\n\014uiBat"
    "tleLink\030\007 \001(\r\"\226\001\n\033Battle2Game_AckEnterDu"
    "ngeon\022\021\n\tDungeonID\030\001 \002(\r\022\"\n\002Pt\030\002 \001(\0132\026.p"
    "roto.message.Point3D\022\013\n\003Dir\030\003 \001(\002\022\024\n\014Dun"
    "geonProId\030\004 \001(\r\022\r\n\005Layer\030\005 \001(\r\022\016\n\006result"
    "\030\006 \001(\005\"G\n\036Dungeon_SC_RequestEnterDungeon"
    "\022\016\n\006result\030\001 \001(\005\022\025\n\rcharname_list\030\002 \003(\t\""
    "\026\n\024Dungeon_CS_PassStory\"\031\n\027Dungeon_CS_Le"
    "aveDungeon\";\n\014DungeonGrade\022\r\n\005gtype\030\001 \001("
    "\005\022\r\n\005value\030\002 \001(\005\022\r\n\005grade\030\003 \001(\005\"%\n\nRewar"
    "dItem\022\n\n\002id\030\001 \001(\005\022\013\n\003num\030\002 \001(\005\"\326\001\n\021Dunge"
    "on_SC_Result\022\n\n\002rt\030\001 \002(\r\022\022\n\ndungeon_id\030\002"
    " \001(\005\022\023\n\013total_grade\030\003 \002(\005\022/\n\ngrade_list\030"
    "\004 \003(\0132\033.proto.message.DungeonGrade\022,\n\tit"
    "em_list\030\005 \003(\0132\031.proto.message.RewardItem"
    "\022-\n\nextra_list\030\006 \003(\0132\031.proto.message.Rew"
    "ardItem\"4\n\027Dungeon_CS_RequestEvent\022\n\n\002rt"
    "\030\001 \001(\r\022\r\n\005value\030\002 \001(\r\"!\n\021Dungeon_CS_Reli"
    "ve\022\014\n\004type\030\001 \002(\r\"+\n\025Dungeon_SC_MonsterNu"
    "m\022\022\n\nMonsterNum\030\001 \002(\005\"1\n\025Dungeon_SC_Chan"
    "geCamp\022\n\n\002ID\030\001 \002(\r\022\014\n\004camp\030\002 \001(\005\"7\n\027Dung"
    "eon_SC_PretendStart\022\014\n\004camp\030\001 \002(\005\022\016\n\006bod"
    "yId\030\002 \001(\r\"%\n\025Dungeon_SC_PretendEnd\022\014\n\004ca"
    "mp\030\001 \002(\005\"S\n\013PassDungeon\022\n\n\002id\030\001 \001(\005\022\r\n\005g"
    "rade\030\002 \001(\005\022\024\n\014reward_times\030\003 \001(\005\022\023\n\013ente"
    "r_times\030\004 \001(\005\"0\n\tTrialInfo\022\017\n\007uiSweep\030\001 "
    "\001(\r\022\022\n\nuiCurFloor\030\002 \001(\r\"T\n\022SingleStoryDu"
    "ngeon\022\017\n\007open_id\030\001 \001(\005\022-\n\tpass_list\030\002 \003("
    "\0132\032.proto.message.PassDungeon\"\033\n\031Dungeon"
    "_CS_GetDungeonInfo\"%\n#Dungeon_CS_Request"
    "EnterDungeonAgain\"\232\003\n\031Dungeon_SC_GetDung"
    "eonInfo\022:\n\017single_ordinary\030\001 \001(\0132!.proto"
    ".message.SingleStoryDungeon\0227\n\014single_el"
    "ite\030\002 \001(\0132!.proto.message.SingleStoryDun"
    "geon\0220\n\005Trial\030\003 \001(\0132!.proto.message.Sing"
    "leStoryDungeon\0221\n\rmaterial_list\030\004 \003(\0132\032."
    "proto.message.PassDungeon\022.\n\014single_tria"
    "l\030\005 \003(\0132\030.proto.message.TrialInfo\022)\n\005oth"
    "er\030\006 \003(\0132\032.proto.message.PassDungeon\022\025\n\r"
    "grade_S_count\030\007 \001(\r\0221\n\023grade_S_rewardtim"
    "es\030\010 \003(\0132\024.proto.message.IDNum\"y\n\035Dungeo"
    "n_SC_ChangeDungeonScene\022\030\n\020dungeon_scene"
    "_id\030\001 \001(\r\022\"\n\002Pt\030\002 \001(\0132\026.proto.message.Po"
    "int3D\022\013\n\003Dir\030\003 \001(\002\022\r\n\005Layer\030\004 \001(\r\"!\n\037Dun"
    "geon_CS_ChangeDungeonSceneOK\"\037\n\021Dungeon_"
    "CS_StarUp\022\n\n\002id\030\001 \001(\005\">\n\021Dungeon_SC_Star"
    "Up\022\016\n\006result\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\022\r\n\005grade\030"
    "\003 \002(\005\"\036\n\020Dungeon_CS_Sweep\022\n\n\002id\030\001 \001(\005\"\223\001"
    "\n\020Dungeon_SC_Sweep\022\016\n\006result\030\001 \001(\005\022\022\n\ndu"
    "ngeon_id\030\002 \001(\005\022,\n\titem_list\030\003 \003(\0132\031.prot"
    "o.message.RewardItem\022-\n\nextra_list\030\004 \003(\013"
    "2\031.proto.message.RewardItem\"0\n\031Game2Batt"
    "le_CreateDungeon\022\023\n\013uiDungeonId\030\001 \001(\r\"e\n"
    "\031Battle2Game_CreateDungeon\022\023\n\013uiDungeonI"
    "d\030\001 \001(\r\022\031\n\021uiDungeonAssignId\030\002 \001(\r\022\n\n\002ip"
    "\030\003 \001(\t\022\014\n\004port\030\004 \001(\005\"K\n\025Dungeon_SC_Timer"
    "Start\022\030\n\020dungeon_scene_id\030\001 \001(\r\022\n\n\002ip\030\002 "
    "\001(\t\022\014\n\004port\030\003 \001(\005\",\n\033Dungeon_CS_TakeGrad"
    "eSReward\022\r\n\005index\030\001 \001(\r\"<\n\033Dungeon_SC_Ta"
    "keGradeSReward\022\r\n\005index\030\001 \001(\r\022\016\n\006result\030"
    "\002 \001(\rB\017\n\rproto.message", 2982);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dungeon.proto", &protobuf_RegisterTypes);
  Dungeon_SC_EnterDungeon::default_instance_ = new Dungeon_SC_EnterDungeon();
  Dungeon_CS_EnterDungeonOK::default_instance_ = new Dungeon_CS_EnterDungeonOK();
  Dungeon_SC_Story::default_instance_ = new Dungeon_SC_Story();
  Dungeon_SC_Customs::default_instance_ = new Dungeon_SC_Customs();
  Dungeon_CS_RequestEnterDungeon::default_instance_ = new Dungeon_CS_RequestEnterDungeon();
  Game2Battle_RequestEnterDungeon::default_instance_ = new Game2Battle_RequestEnterDungeon();
  Battle2Game_AckEnterDungeon::default_instance_ = new Battle2Game_AckEnterDungeon();
  Dungeon_SC_RequestEnterDungeon::default_instance_ = new Dungeon_SC_RequestEnterDungeon();
  Dungeon_CS_PassStory::default_instance_ = new Dungeon_CS_PassStory();
  Dungeon_CS_LeaveDungeon::default_instance_ = new Dungeon_CS_LeaveDungeon();
  DungeonGrade::default_instance_ = new DungeonGrade();
  RewardItem::default_instance_ = new RewardItem();
  Dungeon_SC_Result::default_instance_ = new Dungeon_SC_Result();
  Dungeon_CS_RequestEvent::default_instance_ = new Dungeon_CS_RequestEvent();
  Dungeon_CS_Relive::default_instance_ = new Dungeon_CS_Relive();
  Dungeon_SC_MonsterNum::default_instance_ = new Dungeon_SC_MonsterNum();
  Dungeon_SC_ChangeCamp::default_instance_ = new Dungeon_SC_ChangeCamp();
  Dungeon_SC_PretendStart::default_instance_ = new Dungeon_SC_PretendStart();
  Dungeon_SC_PretendEnd::default_instance_ = new Dungeon_SC_PretendEnd();
  PassDungeon::default_instance_ = new PassDungeon();
  TrialInfo::default_instance_ = new TrialInfo();
  SingleStoryDungeon::default_instance_ = new SingleStoryDungeon();
  Dungeon_CS_GetDungeonInfo::default_instance_ = new Dungeon_CS_GetDungeonInfo();
  Dungeon_CS_RequestEnterDungeonAgain::default_instance_ = new Dungeon_CS_RequestEnterDungeonAgain();
  Dungeon_SC_GetDungeonInfo::default_instance_ = new Dungeon_SC_GetDungeonInfo();
  Dungeon_SC_ChangeDungeonScene::default_instance_ = new Dungeon_SC_ChangeDungeonScene();
  Dungeon_CS_ChangeDungeonSceneOK::default_instance_ = new Dungeon_CS_ChangeDungeonSceneOK();
  Dungeon_CS_StarUp::default_instance_ = new Dungeon_CS_StarUp();
  Dungeon_SC_StarUp::default_instance_ = new Dungeon_SC_StarUp();
  Dungeon_CS_Sweep::default_instance_ = new Dungeon_CS_Sweep();
  Dungeon_SC_Sweep::default_instance_ = new Dungeon_SC_Sweep();
  Game2Battle_CreateDungeon::default_instance_ = new Game2Battle_CreateDungeon();
  Battle2Game_CreateDungeon::default_instance_ = new Battle2Game_CreateDungeon();
  Dungeon_SC_TimerStart::default_instance_ = new Dungeon_SC_TimerStart();
  Dungeon_CS_TakeGradeSReward::default_instance_ = new Dungeon_CS_TakeGradeSReward();
  Dungeon_SC_TakeGradeSReward::default_instance_ = new Dungeon_SC_TakeGradeSReward();
  Dungeon_SC_EnterDungeon::default_instance_->InitAsDefaultInstance();
  Dungeon_CS_EnterDungeonOK::default_instance_->InitAsDefaultInstance();
  Dungeon_SC_Story::default_instance_->InitAsDefaultInstance();
  Dungeon_SC_Customs::default_instance_->InitAsDefaultInstance();
  Dungeon_CS_RequestEnterDungeon::default_instance_->InitAsDefaultInstance();
  Game2Battle_RequestEnterDungeon::default_instance_->InitAsDefaultInstance();
  Battle2Game_AckEnterDungeon::default_instance_->InitAsDefaultInstance();
  Dungeon_SC_RequestEnterDungeon::default_instance_->InitAsDefaultInstance();
  Dungeon_CS_PassStory::default_instance_->InitAsDefaultInstance();
  Dungeon_CS_LeaveDungeon::default_instance_->InitAsDefaultInstance();
  DungeonGrade::default_instance_->InitAsDefaultInstance();
  RewardItem::default_instance_->InitAsDefaultInstance();
  Dungeon_SC_Result::default_instance_->InitAsDefaultInstance();
  Dungeon_CS_RequestEvent::default_instance_->InitAsDefaultInstance();
  Dungeon_CS_Relive::default_instance_->InitAsDefaultInstance();
  Dungeon_SC_MonsterNum::default_instance_->InitAsDefaultInstance();
  Dungeon_SC_ChangeCamp::default_instance_->InitAsDefaultInstance();
  Dungeon_SC_PretendStart::default_instance_->InitAsDefaultInstance();
  Dungeon_SC_PretendEnd::default_instance_->InitAsDefaultInstance();
  PassDungeon::default_instance_->InitAsDefaultInstance();
  TrialInfo::default_instance_->InitAsDefaultInstance();
  SingleStoryDungeon::default_instance_->InitAsDefaultInstance();
  Dungeon_CS_GetDungeonInfo::default_instance_->InitAsDefaultInstance();
  Dungeon_CS_RequestEnterDungeonAgain::default_instance_->InitAsDefaultInstance();
  Dungeon_SC_GetDungeonInfo::default_instance_->InitAsDefaultInstance();
  Dungeon_SC_ChangeDungeonScene::default_instance_->InitAsDefaultInstance();
  Dungeon_CS_ChangeDungeonSceneOK::default_instance_->InitAsDefaultInstance();
  Dungeon_CS_StarUp::default_instance_->InitAsDefaultInstance();
  Dungeon_SC_StarUp::default_instance_->InitAsDefaultInstance();
  Dungeon_CS_Sweep::default_instance_->InitAsDefaultInstance();
  Dungeon_SC_Sweep::default_instance_->InitAsDefaultInstance();
  Game2Battle_CreateDungeon::default_instance_->InitAsDefaultInstance();
  Battle2Game_CreateDungeon::default_instance_->InitAsDefaultInstance();
  Dungeon_SC_TimerStart::default_instance_->InitAsDefaultInstance();
  Dungeon_CS_TakeGradeSReward::default_instance_->InitAsDefaultInstance();
  Dungeon_SC_TakeGradeSReward::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dungeon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dungeon_2eproto {
  StaticDescriptorInitializer_dungeon_2eproto() {
    protobuf_AddDesc_dungeon_2eproto();
  }
} static_descriptor_initializer_dungeon_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Dungeon_SC_EnterDungeon::kDungeonIDFieldNumber;
const int Dungeon_SC_EnterDungeon::kPtFieldNumber;
const int Dungeon_SC_EnterDungeon::kDirFieldNumber;
const int Dungeon_SC_EnterDungeon::kDungeonProIdFieldNumber;
const int Dungeon_SC_EnterDungeon::kLayerFieldNumber;
#endif  // !_MSC_VER

Dungeon_SC_EnterDungeon::Dungeon_SC_EnterDungeon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Dungeon_SC_EnterDungeon::InitAsDefaultInstance() {
  pt_ = const_cast< ::proto::message::Point3D*>(&::proto::message::Point3D::default_instance());
}

Dungeon_SC_EnterDungeon::Dungeon_SC_EnterDungeon(const Dungeon_SC_EnterDungeon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Dungeon_SC_EnterDungeon::SharedCtor() {
  _cached_size_ = 0;
  dungeonid_ = 0u;
  pt_ = NULL;
  dir_ = 0;
  dungeonproid_ = 0u;
  layer_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dungeon_SC_EnterDungeon::~Dungeon_SC_EnterDungeon() {
  SharedDtor();
}

void Dungeon_SC_EnterDungeon::SharedDtor() {
  if (this != default_instance_) {
    delete pt_;
  }
}

void Dungeon_SC_EnterDungeon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dungeon_SC_EnterDungeon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dungeon_SC_EnterDungeon_descriptor_;
}

const Dungeon_SC_EnterDungeon& Dungeon_SC_EnterDungeon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dungeon_2eproto();
  return *default_instance_;
}

Dungeon_SC_EnterDungeon* Dungeon_SC_EnterDungeon::default_instance_ = NULL;

Dungeon_SC_EnterDungeon* Dungeon_SC_EnterDungeon::New() const {
  return new Dungeon_SC_EnterDungeon;
}

void Dungeon_SC_EnterDungeon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dungeonid_ = 0u;
    if (has_pt()) {
      if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
    }
    dir_ = 0;
    dungeonproid_ = 0u;
    layer_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Dungeon_SC_EnterDungeon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 DungeonID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dungeonid_)));
          set_has_dungeonid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Pt;
        break;
      }

      // optional .proto.message.Point3D Pt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Pt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_Dir;
        break;
      }

      // optional float Dir = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_DungeonProId;
        break;
      }

      // optional uint32 DungeonProId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DungeonProId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dungeonproid_)));
          set_has_dungeonproid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Layer;
        break;
      }

      // optional uint32 Layer = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Dungeon_SC_EnterDungeon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 DungeonID = 1;
  if (has_dungeonid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dungeonid(), output);
  }

  // optional .proto.message.Point3D Pt = 2;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pt(), output);
  }

  // optional float Dir = 3;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->dir(), output);
  }

  // optional uint32 DungeonProId = 4;
  if (has_dungeonproid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dungeonproid(), output);
  }

  // optional uint32 Layer = 5;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->layer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Dungeon_SC_EnterDungeon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 DungeonID = 1;
  if (has_dungeonid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dungeonid(), target);
  }

  // optional .proto.message.Point3D Pt = 2;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pt(), target);
  }

  // optional float Dir = 3;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->dir(), target);
  }

  // optional uint32 DungeonProId = 4;
  if (has_dungeonproid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dungeonproid(), target);
  }

  // optional uint32 Layer = 5;
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->layer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Dungeon_SC_EnterDungeon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 DungeonID = 1;
    if (has_dungeonid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dungeonid());
    }

    // optional .proto.message.Point3D Pt = 2;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

    // optional float Dir = 3;
    if (has_dir()) {
      total_size += 1 + 4;
    }

    // optional uint32 DungeonProId = 4;
    if (has_dungeonproid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dungeonproid());
    }

    // optional uint32 Layer = 5;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dungeon_SC_EnterDungeon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Dungeon_SC_EnterDungeon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Dungeon_SC_EnterDungeon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Dungeon_SC_EnterDungeon::MergeFrom(const Dungeon_SC_EnterDungeon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dungeonid()) {
      set_dungeonid(from.dungeonid());
    }
    if (from.has_pt()) {
      mutable_pt()->::proto::message::Point3D::MergeFrom(from.pt());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_dungeonproid()) {
      set_dungeonproid(from.dungeonproid());
    }
    if (from.has_layer()) {
      set_layer(from.layer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Dungeon_SC_EnterDungeon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dungeon_SC_EnterDungeon::CopyFrom(const Dungeon_SC_EnterDungeon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dungeon_SC_EnterDungeon::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Dungeon_SC_EnterDungeon::Swap(Dungeon_SC_EnterDungeon* other) {
  if (other != this) {
    std::swap(dungeonid_, other->dungeonid_);
    std::swap(pt_, other->pt_);
    std::swap(dir_, other->dir_);
    std::swap(dungeonproid_, other->dungeonproid_);
    std::swap(layer_, other->layer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Dungeon_SC_EnterDungeon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dungeon_SC_EnterDungeon_descriptor_;
  metadata.reflection = Dungeon_SC_EnterDungeon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Dungeon_CS_EnterDungeonOK::kDungeonIDFieldNumber;
#endif  // !_MSC_VER

Dungeon_CS_EnterDungeonOK::Dungeon_CS_EnterDungeonOK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Dungeon_CS_EnterDungeonOK::InitAsDefaultInstance() {
}

Dungeon_CS_EnterDungeonOK::Dungeon_CS_EnterDungeonOK(const Dungeon_CS_EnterDungeonOK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Dungeon_CS_EnterDungeonOK::SharedCtor() {
  _cached_size_ = 0;
  dungeonid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dungeon_CS_EnterDungeonOK::~Dungeon_CS_EnterDungeonOK() {
  SharedDtor();
}

void Dungeon_CS_EnterDungeonOK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Dungeon_CS_EnterDungeonOK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dungeon_CS_EnterDungeonOK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dungeon_CS_EnterDungeonOK_descriptor_;
}

const Dungeon_CS_EnterDungeonOK& Dungeon_CS_EnterDungeonOK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dungeon_2eproto();
  return *default_instance_;
}

Dungeon_CS_EnterDungeonOK* Dungeon_CS_EnterDungeonOK::default_instance_ = NULL;

Dungeon_CS_EnterDungeonOK* Dungeon_CS_EnterDungeonOK::New() const {
  return new Dungeon_CS_EnterDungeonOK;
}

void Dungeon_CS_EnterDungeonOK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dungeonid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Dungeon_CS_EnterDungeonOK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 DungeonID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dungeonid_)));
          set_has_dungeonid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Dungeon_CS_EnterDungeonOK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 DungeonID = 1;
  if (has_dungeonid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dungeonid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Dungeon_CS_EnterDungeonOK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 DungeonID = 1;
  if (has_dungeonid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dungeonid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Dungeon_CS_EnterDungeonOK::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 DungeonID = 1;
    if (has_dungeonid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dungeonid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dungeon_CS_EnterDungeonOK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Dungeon_CS_EnterDungeonOK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Dungeon_CS_EnterDungeonOK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Dungeon_CS_EnterDungeonOK::MergeFrom(const Dungeon_CS_EnterDungeonOK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dungeonid()) {
      set_dungeonid(from.dungeonid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Dungeon_CS_EnterDungeonOK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dungeon_CS_EnterDungeonOK::CopyFrom(const Dungeon_CS_EnterDungeonOK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dungeon_CS_EnterDungeonOK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Dungeon_CS_EnterDungeonOK::Swap(Dungeon_CS_EnterDungeonOK* other) {
  if (other != this) {
    std::swap(dungeonid_, other->dungeonid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Dungeon_CS_EnterDungeonOK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dungeon_CS_EnterDungeonOK_descriptor_;
  metadata.reflection = Dungeon_CS_EnterDungeonOK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Dungeon_SC_Story::kStoryIDFieldNumber;
#endif  // !_MSC_VER

Dungeon_SC_Story::Dungeon_SC_Story()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Dungeon_SC_Story::InitAsDefaultInstance() {
}

Dungeon_SC_Story::Dungeon_SC_Story(const Dungeon_SC_Story& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Dungeon_SC_Story::SharedCtor() {
  _cached_size_ = 0;
  storyid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dungeon_SC_Story::~Dungeon_SC_Story() {
  SharedDtor();
}

void Dungeon_SC_Story::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Dungeon_SC_Story::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dungeon_SC_Story::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dungeon_SC_Story_descriptor_;
}

const Dungeon_SC_Story& Dungeon_SC_Story::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dungeon_2eproto();
  return *default_instance_;
}

Dungeon_SC_Story* Dungeon_SC_Story::default_instance_ = NULL;

Dungeon_SC_Story* Dungeon_SC_Story::New() const {
  return new Dungeon_SC_Story;
}

void Dungeon_SC_Story::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    storyid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Dungeon_SC_Story::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 StoryID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &storyid_)));
          set_has_storyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Dungeon_SC_Story::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 StoryID = 1;
  if (has_storyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->storyid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Dungeon_SC_Story::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 StoryID = 1;
  if (has_storyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->storyid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Dungeon_SC_Story::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 StoryID = 1;
    if (has_storyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->storyid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dungeon_SC_Story::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Dungeon_SC_Story* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Dungeon_SC_Story*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Dungeon_SC_Story::MergeFrom(const Dungeon_SC_Story& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_storyid()) {
      set_storyid(from.storyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Dungeon_SC_Story::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dungeon_SC_Story::CopyFrom(const Dungeon_SC_Story& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dungeon_SC_Story::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Dungeon_SC_Story::Swap(Dungeon_SC_Story* other) {
  if (other != this) {
    std::swap(storyid_, other->storyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Dungeon_SC_Story::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dungeon_SC_Story_descriptor_;
  metadata.reflection = Dungeon_SC_Story_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Dungeon_SC_Customs::kCustomsIDFieldNumber;
const int Dungeon_SC_Customs::kTypeFieldNumber;
#endif  // !_MSC_VER

Dungeon_SC_Customs::Dungeon_SC_Customs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Dungeon_SC_Customs::InitAsDefaultInstance() {
}

Dungeon_SC_Customs::Dungeon_SC_Customs(const Dungeon_SC_Customs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Dungeon_SC_Customs::SharedCtor() {
  _cached_size_ = 0;
  customsid_ = 0u;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dungeon_SC_Customs::~Dungeon_SC_Customs() {
  SharedDtor();
}

void Dungeon_SC_Customs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Dungeon_SC_Customs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dungeon_SC_Customs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dungeon_SC_Customs_descriptor_;
}

const Dungeon_SC_Customs& Dungeon_SC_Customs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dungeon_2eproto();
  return *default_instance_;
}

Dungeon_SC_Customs* Dungeon_SC_Customs::default_instance_ = NULL;

Dungeon_SC_Customs* Dungeon_SC_Customs::New() const {
  return new Dungeon_SC_Customs;
}

void Dungeon_SC_Customs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    customsid_ = 0u;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Dungeon_SC_Customs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 CustomsID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &customsid_)));
          set_has_customsid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Type;
        break;
      }

      // required int32 Type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Dungeon_SC_Customs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 CustomsID = 1;
  if (has_customsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->customsid(), output);
  }

  // required int32 Type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Dungeon_SC_Customs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 CustomsID = 1;
  if (has_customsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->customsid(), target);
  }

  // required int32 Type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Dungeon_SC_Customs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 CustomsID = 1;
    if (has_customsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->customsid());
    }

    // required int32 Type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dungeon_SC_Customs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Dungeon_SC_Customs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Dungeon_SC_Customs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Dungeon_SC_Customs::MergeFrom(const Dungeon_SC_Customs& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_customsid()) {
      set_customsid(from.customsid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Dungeon_SC_Customs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dungeon_SC_Customs::CopyFrom(const Dungeon_SC_Customs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dungeon_SC_Customs::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Dungeon_SC_Customs::Swap(Dungeon_SC_Customs* other) {
  if (other != this) {
    std::swap(customsid_, other->customsid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Dungeon_SC_Customs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dungeon_SC_Customs_descriptor_;
  metadata.reflection = Dungeon_SC_Customs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Dungeon_CS_RequestEnterDungeon::kDungeonProIdFieldNumber;
#endif  // !_MSC_VER

Dungeon_CS_RequestEnterDungeon::Dungeon_CS_RequestEnterDungeon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Dungeon_CS_RequestEnterDungeon::InitAsDefaultInstance() {
}

Dungeon_CS_RequestEnterDungeon::Dungeon_CS_RequestEnterDungeon(const Dungeon_CS_RequestEnterDungeon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Dungeon_CS_RequestEnterDungeon::SharedCtor() {
  _cached_size_ = 0;
  dungeonproid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dungeon_CS_RequestEnterDungeon::~Dungeon_CS_RequestEnterDungeon() {
  SharedDtor();
}

void Dungeon_CS_RequestEnterDungeon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Dungeon_CS_RequestEnterDungeon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dungeon_CS_RequestEnterDungeon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dungeon_CS_RequestEnterDungeon_descriptor_;
}

const Dungeon_CS_RequestEnterDungeon& Dungeon_CS_RequestEnterDungeon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dungeon_2eproto();
  return *default_instance_;
}

Dungeon_CS_RequestEnterDungeon* Dungeon_CS_RequestEnterDungeon::default_instance_ = NULL;

Dungeon_CS_RequestEnterDungeon* Dungeon_CS_RequestEnterDungeon::New() const {
  return new Dungeon_CS_RequestEnterDungeon;
}

void Dungeon_CS_RequestEnterDungeon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dungeonproid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Dungeon_CS_RequestEnterDungeon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 DungeonProId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dungeonproid_)));
          set_has_dungeonproid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Dungeon_CS_RequestEnterDungeon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 DungeonProId = 1;
  if (has_dungeonproid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dungeonproid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Dungeon_CS_RequestEnterDungeon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 DungeonProId = 1;
  if (has_dungeonproid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dungeonproid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Dungeon_CS_RequestEnterDungeon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 DungeonProId = 1;
    if (has_dungeonproid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dungeonproid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dungeon_CS_RequestEnterDungeon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Dungeon_CS_RequestEnterDungeon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Dungeon_CS_RequestEnterDungeon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Dungeon_CS_RequestEnterDungeon::MergeFrom(const Dungeon_CS_RequestEnterDungeon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dungeonproid()) {
      set_dungeonproid(from.dungeonproid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Dungeon_CS_RequestEnterDungeon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dungeon_CS_RequestEnterDungeon::CopyFrom(const Dungeon_CS_RequestEnterDungeon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dungeon_CS_RequestEnterDungeon::IsInitialized() const {

  return true;
}

void Dungeon_CS_RequestEnterDungeon::Swap(Dungeon_CS_RequestEnterDungeon* other) {
  if (other != this) {
    std::swap(dungeonproid_, other->dungeonproid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Dungeon_CS_RequestEnterDungeon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dungeon_CS_RequestEnterDungeon_descriptor_;
  metadata.reflection = Dungeon_CS_RequestEnterDungeon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Game2Battle_RequestEnterDungeon::kDungeonProIdFieldNumber;
const int Game2Battle_RequestEnterDungeon::kUiFirstFieldNumber;
const int Game2Battle_RequestEnterDungeon::kUiAgainFieldNumber;
const int Game2Battle_RequestEnterDungeon::kDungeonAssignIdFieldNumber;
const int Game2Battle_RequestEnterDungeon::kSPlyInfoFieldNumber;
const int Game2Battle_RequestEnterDungeon::kSBoatInfoFieldNumber;
const int Game2Battle_RequestEnterDungeon::kUiBattleLinkFieldNumber;
#endif  // !_MSC_VER

Game2Battle_RequestEnterDungeon::Game2Battle_RequestEnterDungeon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Game2Battle_RequestEnterDungeon::InitAsDefaultInstance() {
  splyinfo_ = const_cast< ::proto::message::BattlePlayerInfo*>(&::proto::message::BattlePlayerInfo::default_instance());
  sboatinfo_ = const_cast< ::proto::message::BattleBoatInfo*>(&::proto::message::BattleBoatInfo::default_instance());
}

Game2Battle_RequestEnterDungeon::Game2Battle_RequestEnterDungeon(const Game2Battle_RequestEnterDungeon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Game2Battle_RequestEnterDungeon::SharedCtor() {
  _cached_size_ = 0;
  dungeonproid_ = 0u;
  uifirst_ = 0u;
  uiagain_ = 0u;
  dungeonassignid_ = 0u;
  splyinfo_ = NULL;
  sboatinfo_ = NULL;
  uibattlelink_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Game2Battle_RequestEnterDungeon::~Game2Battle_RequestEnterDungeon() {
  SharedDtor();
}

void Game2Battle_RequestEnterDungeon::SharedDtor() {
  if (this != default_instance_) {
    delete splyinfo_;
    delete sboatinfo_;
  }
}

void Game2Battle_RequestEnterDungeon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Game2Battle_RequestEnterDungeon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Game2Battle_RequestEnterDungeon_descriptor_;
}

const Game2Battle_RequestEnterDungeon& Game2Battle_RequestEnterDungeon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dungeon_2eproto();
  return *default_instance_;
}

Game2Battle_RequestEnterDungeon* Game2Battle_RequestEnterDungeon::default_instance_ = NULL;

Game2Battle_RequestEnterDungeon* Game2Battle_RequestEnterDungeon::New() const {
  return new Game2Battle_RequestEnterDungeon;
}

void Game2Battle_RequestEnterDungeon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dungeonproid_ = 0u;
    uifirst_ = 0u;
    uiagain_ = 0u;
    dungeonassignid_ = 0u;
    if (has_splyinfo()) {
      if (splyinfo_ != NULL) splyinfo_->::proto::message::BattlePlayerInfo::Clear();
    }
    if (has_sboatinfo()) {
      if (sboatinfo_ != NULL) sboatinfo_->::proto::message::BattleBoatInfo::Clear();
    }
    uibattlelink_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Game2Battle_RequestEnterDungeon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 DungeonProId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dungeonproid_)));
          set_has_dungeonproid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiFirst;
        break;
      }

      // optional uint32 uiFirst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiFirst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uifirst_)));
          set_has_uifirst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uiAgain;
        break;
      }

      // optional uint32 uiAgain = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiAgain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiagain_)));
          set_has_uiagain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_DungeonAssignId;
        break;
      }

      // optional uint32 DungeonAssignId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DungeonAssignId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dungeonassignid_)));
          set_has_dungeonassignid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_sPlyInfo;
        break;
      }

      // required .proto.message.BattlePlayerInfo sPlyInfo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sPlyInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_splyinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_sBoatInfo;
        break;
      }

      // optional .proto.message.BattleBoatInfo sBoatInfo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sBoatInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sboatinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_uiBattleLink;
        break;
      }

      // optional uint32 uiBattleLink = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiBattleLink:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uibattlelink_)));
          set_has_uibattlelink();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Game2Battle_RequestEnterDungeon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 DungeonProId = 1;
  if (has_dungeonproid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dungeonproid(), output);
  }

  // optional uint32 uiFirst = 2;
  if (has_uifirst()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uifirst(), output);
  }

  // optional uint32 uiAgain = 3;
  if (has_uiagain()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uiagain(), output);
  }

  // optional uint32 DungeonAssignId = 4;
  if (has_dungeonassignid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dungeonassignid(), output);
  }

  // required .proto.message.BattlePlayerInfo sPlyInfo = 5;
  if (has_splyinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->splyinfo(), output);
  }

  // optional .proto.message.BattleBoatInfo sBoatInfo = 6;
  if (has_sboatinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->sboatinfo(), output);
  }

  // optional uint32 uiBattleLink = 7;
  if (has_uibattlelink()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->uibattlelink(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Game2Battle_RequestEnterDungeon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 DungeonProId = 1;
  if (has_dungeonproid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dungeonproid(), target);
  }

  // optional uint32 uiFirst = 2;
  if (has_uifirst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uifirst(), target);
  }

  // optional uint32 uiAgain = 3;
  if (has_uiagain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uiagain(), target);
  }

  // optional uint32 DungeonAssignId = 4;
  if (has_dungeonassignid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dungeonassignid(), target);
  }

  // required .proto.message.BattlePlayerInfo sPlyInfo = 5;
  if (has_splyinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->splyinfo(), target);
  }

  // optional .proto.message.BattleBoatInfo sBoatInfo = 6;
  if (has_sboatinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->sboatinfo(), target);
  }

  // optional uint32 uiBattleLink = 7;
  if (has_uibattlelink()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->uibattlelink(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Game2Battle_RequestEnterDungeon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 DungeonProId = 1;
    if (has_dungeonproid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dungeonproid());
    }

    // optional uint32 uiFirst = 2;
    if (has_uifirst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uifirst());
    }

    // optional uint32 uiAgain = 3;
    if (has_uiagain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiagain());
    }

    // optional uint32 DungeonAssignId = 4;
    if (has_dungeonassignid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dungeonassignid());
    }

    // required .proto.message.BattlePlayerInfo sPlyInfo = 5;
    if (has_splyinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->splyinfo());
    }

    // optional .proto.message.BattleBoatInfo sBoatInfo = 6;
    if (has_sboatinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sboatinfo());
    }

    // optional uint32 uiBattleLink = 7;
    if (has_uibattlelink()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uibattlelink());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Game2Battle_RequestEnterDungeon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Game2Battle_RequestEnterDungeon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Game2Battle_RequestEnterDungeon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Game2Battle_RequestEnterDungeon::MergeFrom(const Game2Battle_RequestEnterDungeon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dungeonproid()) {
      set_dungeonproid(from.dungeonproid());
    }
    if (from.has_uifirst()) {
      set_uifirst(from.uifirst());
    }
    if (from.has_uiagain()) {
      set_uiagain(from.uiagain());
    }
    if (from.has_dungeonassignid()) {
      set_dungeonassignid(from.dungeonassignid());
    }
    if (from.has_splyinfo()) {
      mutable_splyinfo()->::proto::message::BattlePlayerInfo::MergeFrom(from.splyinfo());
    }
    if (from.has_sboatinfo()) {
      mutable_sboatinfo()->::proto::message::BattleBoatInfo::MergeFrom(from.sboatinfo());
    }
    if (from.has_uibattlelink()) {
      set_uibattlelink(from.uibattlelink());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Game2Battle_RequestEnterDungeon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Game2Battle_RequestEnterDungeon::CopyFrom(const Game2Battle_RequestEnterDungeon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game2Battle_RequestEnterDungeon::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;

  if (has_splyinfo()) {
    if (!this->splyinfo().IsInitialized()) return false;
  }
  return true;
}

void Game2Battle_RequestEnterDungeon::Swap(Game2Battle_RequestEnterDungeon* other) {
  if (other != this) {
    std::swap(dungeonproid_, other->dungeonproid_);
    std::swap(uifirst_, other->uifirst_);
    std::swap(uiagain_, other->uiagain_);
    std::swap(dungeonassignid_, other->dungeonassignid_);
    std::swap(splyinfo_, other->splyinfo_);
    std::swap(sboatinfo_, other->sboatinfo_);
    std::swap(uibattlelink_, other->uibattlelink_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Game2Battle_RequestEnterDungeon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Game2Battle_RequestEnterDungeon_descriptor_;
  metadata.reflection = Game2Battle_RequestEnterDungeon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Game_AckEnterDungeon::kDungeonIDFieldNumber;
const int Battle2Game_AckEnterDungeon::kPtFieldNumber;
const int Battle2Game_AckEnterDungeon::kDirFieldNumber;
const int Battle2Game_AckEnterDungeon::kDungeonProIdFieldNumber;
const int Battle2Game_AckEnterDungeon::kLayerFieldNumber;
const int Battle2Game_AckEnterDungeon::kResultFieldNumber;
#endif  // !_MSC_VER

Battle2Game_AckEnterDungeon::Battle2Game_AckEnterDungeon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Game_AckEnterDungeon::InitAsDefaultInstance() {
  pt_ = const_cast< ::proto::message::Point3D*>(&::proto::message::Point3D::default_instance());
}

Battle2Game_AckEnterDungeon::Battle2Game_AckEnterDungeon(const Battle2Game_AckEnterDungeon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Game_AckEnterDungeon::SharedCtor() {
  _cached_size_ = 0;
  dungeonid_ = 0u;
  pt_ = NULL;
  dir_ = 0;
  dungeonproid_ = 0u;
  layer_ = 0u;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Game_AckEnterDungeon::~Battle2Game_AckEnterDungeon() {
  SharedDtor();
}

void Battle2Game_AckEnterDungeon::SharedDtor() {
  if (this != default_instance_) {
    delete pt_;
  }
}

void Battle2Game_AckEnterDungeon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Game_AckEnterDungeon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Game_AckEnterDungeon_descriptor_;
}

const Battle2Game_AckEnterDungeon& Battle2Game_AckEnterDungeon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dungeon_2eproto();
  return *default_instance_;
}

Battle2Game_AckEnterDungeon* Battle2Game_AckEnterDungeon::default_instance_ = NULL;

Battle2Game_AckEnterDungeon* Battle2Game_AckEnterDungeon::New() const {
  return new Battle2Game_AckEnterDungeon;
}

void Battle2Game_AckEnterDungeon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dungeonid_ = 0u;
    if (has_pt()) {
      if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
    }
    dir_ = 0;
    dungeonproid_ = 0u;
    layer_ = 0u;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Game_AckEnterDungeon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 DungeonID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dungeonid_)));
          set_has_dungeonid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Pt;
        break;
      }

      // optional .proto.message.Point3D Pt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Pt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_Dir;
        break;
      }

      // optional float Dir = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_DungeonProId;
        break;
      }

      // optional uint32 DungeonProId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DungeonProId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dungeonproid_)));
          set_has_dungeonproid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Layer;
        break;
      }

      // optional uint32 Layer = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_result;
        break;
      }

      // optional int32 result = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Game_AckEnterDungeon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 DungeonID = 1;
  if (has_dungeonid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dungeonid(), output);
  }

  // optional .proto.message.Point3D Pt = 2;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pt(), output);
  }

  // optional float Dir = 3;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->dir(), output);
  }

  // optional uint32 DungeonProId = 4;
  if (has_dungeonproid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dungeonproid(), output);
  }

  // optional uint32 Layer = 5;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->layer(), output);
  }

  // optional int32 result = 6;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Game_AckEnterDungeon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 DungeonID = 1;
  if (has_dungeonid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dungeonid(), target);
  }

  // optional .proto.message.Point3D Pt = 2;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pt(), target);
  }

  // optional float Dir = 3;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->dir(), target);
  }

  // optional uint32 DungeonProId = 4;
  if (has_dungeonproid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dungeonproid(), target);
  }

  // optional uint32 Layer = 5;
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->layer(), target);
  }

  // optional int32 result = 6;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Game_AckEnterDungeon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 DungeonID = 1;
    if (has_dungeonid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dungeonid());
    }

    // optional .proto.message.Point3D Pt = 2;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

    // optional float Dir = 3;
    if (has_dir()) {
      total_size += 1 + 4;
    }

    // optional uint32 DungeonProId = 4;
    if (has_dungeonproid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dungeonproid());
    }

    // optional uint32 Layer = 5;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layer());
    }

    // optional int32 result = 6;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Game_AckEnterDungeon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Game_AckEnterDungeon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Game_AckEnterDungeon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Game_AckEnterDungeon::MergeFrom(const Battle2Game_AckEnterDungeon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dungeonid()) {
      set_dungeonid(from.dungeonid());
    }
    if (from.has_pt()) {
      mutable_pt()->::proto::message::Point3D::MergeFrom(from.pt());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_dungeonproid()) {
      set_dungeonproid(from.dungeonproid());
    }
    if (from.has_layer()) {
      set_layer(from.layer());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Game_AckEnterDungeon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Game_AckEnterDungeon::CopyFrom(const Battle2Game_AckEnterDungeon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Game_AckEnterDungeon::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Battle2Game_AckEnterDungeon::Swap(Battle2Game_AckEnterDungeon* other) {
  if (other != this) {
    std::swap(dungeonid_, other->dungeonid_);
    std::swap(pt_, other->pt_);
    std::swap(dir_, other->dir_);
    std::swap(dungeonproid_, other->dungeonproid_);
    std::swap(layer_, other->layer_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Game_AckEnterDungeon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Game_AckEnterDungeon_descriptor_;
  metadata.reflection = Battle2Game_AckEnterDungeon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Dungeon_SC_RequestEnterDungeon::kResultFieldNumber;
const int Dungeon_SC_RequestEnterDungeon::kCharnameListFieldNumber;
#endif  // !_MSC_VER

Dungeon_SC_RequestEnterDungeon::Dungeon_SC_RequestEnterDungeon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Dungeon_SC_RequestEnterDungeon::InitAsDefaultInstance() {
}

Dungeon_SC_RequestEnterDungeon::Dungeon_SC_RequestEnterDungeon(const Dungeon_SC_RequestEnterDungeon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Dungeon_SC_RequestEnterDungeon::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dungeon_SC_RequestEnterDungeon::~Dungeon_SC_RequestEnterDungeon() {
  SharedDtor();
}

void Dungeon_SC_RequestEnterDungeon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Dungeon_SC_RequestEnterDungeon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dungeon_SC_RequestEnterDungeon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dungeon_SC_RequestEnterDungeon_descriptor_;
}

const Dungeon_SC_RequestEnterDungeon& Dungeon_SC_RequestEnterDungeon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dungeon_2eproto();
  return *default_instance_;
}

Dungeon_SC_RequestEnterDungeon* Dungeon_SC_RequestEnterDungeon::default_instance_ = NULL;

Dungeon_SC_RequestEnterDungeon* Dungeon_SC_RequestEnterDungeon::New() const {
  return new Dungeon_SC_RequestEnterDungeon;
}

void Dungeon_SC_RequestEnterDungeon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  charname_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Dungeon_SC_RequestEnterDungeon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_charname_list;
        break;
      }

      // repeated string charname_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charname_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_charname_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->charname_list(this->charname_list_size() - 1).data(),
            this->charname_list(this->charname_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_charname_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Dungeon_SC_RequestEnterDungeon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated string charname_list = 2;
  for (int i = 0; i < this->charname_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->charname_list(i).data(), this->charname_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->charname_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Dungeon_SC_RequestEnterDungeon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated string charname_list = 2;
  for (int i = 0; i < this->charname_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname_list(i).data(), this->charname_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->charname_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Dungeon_SC_RequestEnterDungeon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated string charname_list = 2;
  total_size += 1 * this->charname_list_size();
  for (int i = 0; i < this->charname_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->charname_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dungeon_SC_RequestEnterDungeon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Dungeon_SC_RequestEnterDungeon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Dungeon_SC_RequestEnterDungeon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Dungeon_SC_RequestEnterDungeon::MergeFrom(const Dungeon_SC_RequestEnterDungeon& from) {
  GOOGLE_CHECK_NE(&from, this);
  charname_list_.MergeFrom(from.charname_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Dungeon_SC_RequestEnterDungeon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dungeon_SC_RequestEnterDungeon::CopyFrom(const Dungeon_SC_RequestEnterDungeon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dungeon_SC_RequestEnterDungeon::IsInitialized() const {

  return true;
}

void Dungeon_SC_RequestEnterDungeon::Swap(Dungeon_SC_RequestEnterDungeon* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    charname_list_.Swap(&other->charname_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Dungeon_SC_RequestEnterDungeon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dungeon_SC_RequestEnterDungeon_descriptor_;
  metadata.reflection = Dungeon_SC_RequestEnterDungeon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Dungeon_CS_PassStory::Dungeon_CS_PassStory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Dungeon_CS_PassStory::InitAsDefaultInstance() {
}

Dungeon_CS_PassStory::Dungeon_CS_PassStory(const Dungeon_CS_PassStory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Dungeon_CS_PassStory::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dungeon_CS_PassStory::~Dungeon_CS_PassStory() {
  SharedDtor();
}

void Dungeon_CS_PassStory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Dungeon_CS_PassStory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dungeon_CS_PassStory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dungeon_CS_PassStory_descriptor_;
}

const Dungeon_CS_PassStory& Dungeon_CS_PassStory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dungeon_2eproto();
  return *default_instance_;
}

Dungeon_CS_PassStory* Dungeon_CS_PassStory::default_instance_ = NULL;

Dungeon_CS_PassStory* Dungeon_CS_PassStory::New() const {
  return new Dungeon_CS_PassStory;
}

void Dungeon_CS_PassStory::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Dungeon_CS_PassStory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Dungeon_CS_PassStory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Dungeon_CS_PassStory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Dungeon_CS_PassStory::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dungeon_CS_PassStory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Dungeon_CS_PassStory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Dungeon_CS_PassStory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Dungeon_CS_PassStory::MergeFrom(const Dungeon_CS_PassStory& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Dungeon_CS_PassStory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dungeon_CS_PassStory::CopyFrom(const Dungeon_CS_PassStory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dungeon_CS_PassStory::IsInitialized() const {

  return true;
}

void Dungeon_CS_PassStory::Swap(Dungeon_CS_PassStory* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Dungeon_CS_PassStory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dungeon_CS_PassStory_descriptor_;
  metadata.reflection = Dungeon_CS_PassStory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Dungeon_CS_LeaveDungeon::Dungeon_CS_LeaveDungeon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Dungeon_CS_LeaveDungeon::InitAsDefaultInstance() {
}

Dungeon_CS_LeaveDungeon::Dungeon_CS_LeaveDungeon(const Dungeon_CS_LeaveDungeon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Dungeon_CS_LeaveDungeon::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dungeon_CS_LeaveDungeon::~Dungeon_CS_LeaveDungeon() {
  SharedDtor();
}

void Dungeon_CS_LeaveDungeon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Dungeon_CS_LeaveDungeon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dungeon_CS_LeaveDungeon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dungeon_CS_LeaveDungeon_descriptor_;
}

const Dungeon_CS_LeaveDungeon& Dungeon_CS_LeaveDungeon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dungeon_2eproto();
  return *default_instance_;
}

Dungeon_CS_LeaveDungeon* Dungeon_CS_LeaveDungeon::default_instance_ = NULL;

Dungeon_CS_LeaveDungeon* Dungeon_CS_LeaveDungeon::New() const {
  return new Dungeon_CS_LeaveDungeon;
}

void Dungeon_CS_LeaveDungeon::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Dungeon_CS_LeaveDungeon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Dungeon_CS_LeaveDungeon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Dungeon_CS_LeaveDungeon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Dungeon_CS_LeaveDungeon::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dungeon_CS_LeaveDungeon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Dungeon_CS_LeaveDungeon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Dungeon_CS_LeaveDungeon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Dungeon_CS_LeaveDungeon::MergeFrom(const Dungeon_CS_LeaveDungeon& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Dungeon_CS_LeaveDungeon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dungeon_CS_LeaveDungeon::CopyFrom(const Dungeon_CS_LeaveDungeon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dungeon_CS_LeaveDungeon::IsInitialized() const {

  return true;
}

void Dungeon_CS_LeaveDungeon::Swap(Dungeon_CS_LeaveDungeon* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Dungeon_CS_LeaveDungeon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dungeon_CS_LeaveDungeon_descriptor_;
  metadata.reflection = Dungeon_CS_LeaveDungeon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DungeonGrade::kGtypeFieldNumber;
const int DungeonGrade::kValueFieldNumber;
const int DungeonGrade::kGradeFieldNumber;
#endif  // !_MSC_VER

DungeonGrade::DungeonGrade()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DungeonGrade::InitAsDefaultInstance() {
}

DungeonGrade::DungeonGrade(const DungeonGrade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DungeonGrade::SharedCtor() {
  _cached_size_ = 0;
  gtype_ = 0;
  value_ = 0;
  grade_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DungeonGrade::~DungeonGrade() {
  SharedDtor();
}

void DungeonGrade::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DungeonGrade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonGrade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DungeonGrade_descriptor_;
}

const DungeonGrade& DungeonGrade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dungeon_2eproto();
  return *default_instance_;
}

DungeonGrade* DungeonGrade::default_instance_ = NULL;

DungeonGrade* DungeonGrade::New() const {
  return new DungeonGrade;
}

void DungeonGrade::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gtype_ = 0;
    value_ = 0;
    grade_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DungeonGrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gtype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gtype_)));
          set_has_gtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_grade;
        break;
      }

      // optional int32 grade = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DungeonGrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gtype = 1;
  if (has_gtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gtype(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  // optional int32 grade = 3;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->grade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DungeonGrade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 gtype = 1;
  if (has_gtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gtype(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  // optional int32 grade = 3;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->grade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DungeonGrade::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gtype = 1;
    if (has_gtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gtype());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

    // optional int32 grade = 3;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonGrade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DungeonGrade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DungeonGrade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DungeonGrade::MergeFrom(const DungeonGrade& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gtype()) {
      set_gtype(from.gtype());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DungeonGrade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonGrade::CopyFrom(const DungeonGrade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonGrade::IsInitialized() const {

  return true;
}

void DungeonGrade::Swap(DungeonGrade* other) {
  if (other != this) {
    std::swap(gtype_, other->gtype_);
    std::swap(value_, other->value_);
    std::swap(grade_, other->grade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DungeonGrade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DungeonGrade_descriptor_;
  metadata.reflection = DungeonGrade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RewardItem::kIdFieldNumber;
const int RewardItem::kNumFieldNumber;
#endif  // !_MSC_VER

RewardItem::RewardItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RewardItem::InitAsDefaultInstance() {
}

RewardItem::RewardItem(const RewardItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RewardItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RewardItem::~RewardItem() {
  SharedDtor();
}

void RewardItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RewardItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RewardItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RewardItem_descriptor_;
}

const RewardItem& RewardItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dungeon_2eproto();
  return *default_instance_;
}

RewardItem* RewardItem::default_instance_ = NULL;

RewardItem* RewardItem::New() const {
  return new RewardItem;
}

void RewardItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RewardItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RewardItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RewardItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RewardItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewardItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RewardItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RewardItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RewardItem::MergeFrom(const RewardItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RewardItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardItem::CopyFrom(const RewardItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardItem::IsInitialized() const {

  return true;
}

void RewardItem::Swap(RewardItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RewardItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RewardItem_descriptor_;
  metadata.reflection = RewardItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Dungeon_SC_Result::kRtFieldNumber;
const int Dungeon_SC_Result::kDungeonIdFieldNumber;
const int Dungeon_SC_Result::kTotalGradeFieldNumber;
const int Dungeon_SC_Result::kGradeListFieldNumber;
const int Dungeon_SC_Result::kItemListFieldNumber;
const int Dungeon_SC_Result::kExtraListFieldNumber;
#endif  // !_MSC_VER

Dungeon_SC_Result::Dungeon_SC_Result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Dungeon_SC_Result::InitAsDefaultInstance() {
}

Dungeon_SC_Result::Dungeon_SC_Result(const Dungeon_SC_Result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Dungeon_SC_Result::SharedCtor() {
  _cached_size_ = 0;
  rt_ = 0u;
  dungeon_id_ = 0;
  total_grade_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dungeon_SC_Result::~Dungeon_SC_Result() {
  SharedDtor();
}

void Dungeon_SC_Result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Dungeon_SC_Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dungeon_SC_Result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dungeon_SC_Result_descriptor_;
}

const Dungeon_SC_Result& Dungeon_SC_Result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dungeon_2eproto();
  return *default_instance_;
}

Dungeon_SC_Result* Dungeon_SC_Result::default_instance_ = NULL;

Dungeon_SC_Result* Dungeon_SC_Result::New() const {
  return new Dungeon_SC_Result;
}

void Dungeon_SC_Result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rt_ = 0u;
    dungeon_id_ = 0;
    total_grade_ = 0;
  }
  grade_list_.Clear();
  item_list_.Clear();
  extra_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Dungeon_SC_Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rt_)));
          set_has_rt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dungeon_id;
        break;
      }

      // optional int32 dungeon_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dungeon_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dungeon_id_)));
          set_has_dungeon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_total_grade;
        break;
      }

      // required int32 total_grade = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_grade_)));
          set_has_total_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_grade_list;
        break;
      }

      // repeated .proto.message.DungeonGrade grade_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_grade_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_grade_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_grade_list;
        if (input->ExpectTag(42)) goto parse_item_list;
        break;
      }

      // repeated .proto.message.RewardItem item_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_item_list;
        if (input->ExpectTag(50)) goto parse_extra_list;
        break;
      }

      // repeated .proto.message.RewardItem extra_list = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extra_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_extra_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_extra_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Dungeon_SC_Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 rt = 1;
  if (has_rt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rt(), output);
  }

  // optional int32 dungeon_id = 2;
  if (has_dungeon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dungeon_id(), output);
  }

  // required int32 total_grade = 3;
  if (has_total_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->total_grade(), output);
  }

  // repeated .proto.message.DungeonGrade grade_list = 4;
  for (int i = 0; i < this->grade_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->grade_list(i), output);
  }

  // repeated .proto.message.RewardItem item_list = 5;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->item_list(i), output);
  }

  // repeated .proto.message.RewardItem extra_list = 6;
  for (int i = 0; i < this->extra_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->extra_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Dungeon_SC_Result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 rt = 1;
  if (has_rt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rt(), target);
  }

  // optional int32 dungeon_id = 2;
  if (has_dungeon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dungeon_id(), target);
  }

  // required int32 total_grade = 3;
  if (has_total_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->total_grade(), target);
  }

  // repeated .proto.message.DungeonGrade grade_list = 4;
  for (int i = 0; i < this->grade_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->grade_list(i), target);
  }

  // repeated .proto.message.RewardItem item_list = 5;
  for (int i = 0; i < this->item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->item_list(i), target);
  }

  // repeated .proto.message.RewardItem extra_list = 6;
  for (int i = 0; i < this->extra_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->extra_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Dungeon_SC_Result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rt = 1;
    if (has_rt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rt());
    }

    // optional int32 dungeon_id = 2;
    if (has_dungeon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dungeon_id());
    }

    // required int32 total_grade = 3;
    if (has_total_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_grade());
    }

  }
  // repeated .proto.message.DungeonGrade grade_list = 4;
  total_size += 1 * this->grade_list_size();
  for (int i = 0; i < this->grade_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->grade_list(i));
  }

  // repeated .proto.message.RewardItem item_list = 5;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }

  // repeated .proto.message.RewardItem extra_list = 6;
  total_size += 1 * this->extra_list_size();
  for (int i = 0; i < this->extra_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->extra_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dungeon_SC_Result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Dungeon_SC_Result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Dungeon_SC_Result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Dungeon_SC_Result::MergeFrom(const Dungeon_SC_Result& from) {
  GOOGLE_CHECK_NE(&from, this);
  grade_list_.MergeFrom(from.grade_list_);
  item_list_.MergeFrom(from.item_list_);
  extra_list_.MergeFrom(from.extra_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rt()) {
      set_rt(from.rt());
    }
    if (from.has_dungeon_id()) {
      set_dungeon_id(from.dungeon_id());
    }
    if (from.has_total_grade()) {
      set_total_grade(from.total_grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Dungeon_SC_Result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dungeon_SC_Result::CopyFrom(const Dungeon_SC_Result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dungeon_SC_Result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void Dungeon_SC_Result::Swap(Dungeon_SC_Result* other) {
  if (other != this) {
    std::swap(rt_, other->rt_);
    std::swap(dungeon_id_, other->dungeon_id_);
    std::swap(total_grade_, other->total_grade_);
    grade_list_.Swap(&other->grade_list_);
    item_list_.Swap(&other->item_list_);
    extra_list_.Swap(&other->extra_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Dungeon_SC_Result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dungeon_SC_Result_descriptor_;
  metadata.reflection = Dungeon_SC_Result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Dungeon_CS_RequestEvent::kRtFieldNumber;
const int Dungeon_CS_RequestEvent::kValueFieldNumber;
#endif  // !_MSC_VER

Dungeon_CS_RequestEvent::Dungeon_CS_RequestEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Dungeon_CS_RequestEvent::InitAsDefaultInstance() {
}

Dungeon_CS_RequestEvent::Dungeon_CS_RequestEvent(const Dungeon_CS_RequestEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Dungeon_CS_RequestEvent::SharedCtor() {
  _cached_size_ = 0;
  rt_ = 0u;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dungeon_CS_RequestEvent::~Dungeon_CS_RequestEvent() {
  SharedDtor();
}

void Dungeon_CS_RequestEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Dungeon_CS_RequestEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dungeon_CS_RequestEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dungeon_CS_RequestEvent_descriptor_;
}

const Dungeon_CS_RequestEvent& Dungeon_CS_RequestEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dungeon_2eproto();
  return *default_instance_;
}

Dungeon_CS_RequestEvent* Dungeon_CS_RequestEvent::default_instance_ = NULL;

Dungeon_CS_RequestEvent* Dungeon_CS_RequestEvent::New() const {
  return new Dungeon_CS_RequestEvent;
}

void Dungeon_CS_RequestEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rt_ = 0u;
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Dungeon_CS_RequestEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rt_)));
          set_has_rt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional uint32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Dungeon_CS_RequestEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rt = 1;
  if (has_rt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rt(), output);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Dungeon_CS_RequestEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rt = 1;
  if (has_rt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rt(), target);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Dungeon_CS_RequestEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rt = 1;
    if (has_rt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rt());
    }

    // optional uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dungeon_CS_RequestEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Dungeon_CS_RequestEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Dungeon_CS_RequestEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Dungeon_CS_RequestEvent::MergeFrom(const Dungeon_CS_RequestEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rt()) {
      set_rt(from.rt());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Dungeon_CS_RequestEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dungeon_CS_RequestEvent::CopyFrom(const Dungeon_CS_RequestEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dungeon_CS_RequestEvent::IsInitialized() const {

  return true;
}

void Dungeon_CS_RequestEvent::Swap(Dungeon_CS_RequestEvent* other) {
  if (other != this) {
    std::swap(rt_, other->rt_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Dungeon_CS_RequestEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dungeon_CS_RequestEvent_descriptor_;
  metadata.reflection = Dungeon_CS_RequestEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Dungeon_CS_Relive::kTypeFieldNumber;
#endif  // !_MSC_VER

Dungeon_CS_Relive::Dungeon_CS_Relive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Dungeon_CS_Relive::InitAsDefaultInstance() {
}

Dungeon_CS_Relive::Dungeon_CS_Relive(const Dungeon_CS_Relive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Dungeon_CS_Relive::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dungeon_CS_Relive::~Dungeon_CS_Relive() {
  SharedDtor();
}

void Dungeon_CS_Relive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Dungeon_CS_Relive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dungeon_CS_Relive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dungeon_CS_Relive_descriptor_;
}

const Dungeon_CS_Relive& Dungeon_CS_Relive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dungeon_2eproto();
  return *default_instance_;
}

Dungeon_CS_Relive* Dungeon_CS_Relive::default_instance_ = NULL;

Dungeon_CS_Relive* Dungeon_CS_Relive::New() const {
  return new Dungeon_CS_Relive;
}

void Dungeon_CS_Relive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Dungeon_CS_Relive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Dungeon_CS_Relive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Dungeon_CS_Relive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Dungeon_CS_Relive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dungeon_CS_Relive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Dungeon_CS_Relive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Dungeon_CS_Relive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Dungeon_CS_Relive::MergeFrom(const Dungeon_CS_Relive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Dungeon_CS_Relive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dungeon_CS_Relive::CopyFrom(const Dungeon_CS_Relive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dungeon_CS_Relive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Dungeon_CS_Relive::Swap(Dungeon_CS_Relive* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Dungeon_CS_Relive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dungeon_CS_Relive_descriptor_;
  metadata.reflection = Dungeon_CS_Relive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Dungeon_SC_MonsterNum::kMonsterNumFieldNumber;
#endif  // !_MSC_VER

Dungeon_SC_MonsterNum::Dungeon_SC_MonsterNum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Dungeon_SC_MonsterNum::InitAsDefaultInstance() {
}

Dungeon_SC_MonsterNum::Dungeon_SC_MonsterNum(const Dungeon_SC_MonsterNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Dungeon_SC_MonsterNum::SharedCtor() {
  _cached_size_ = 0;
  monsternum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dungeon_SC_MonsterNum::~Dungeon_SC_MonsterNum() {
  SharedDtor();
}

void Dungeon_SC_MonsterNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Dungeon_SC_MonsterNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dungeon_SC_MonsterNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dungeon_SC_MonsterNum_descriptor_;
}

const Dungeon_SC_MonsterNum& Dungeon_SC_MonsterNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dungeon_2eproto();
  return *default_instance_;
}

Dungeon_SC_MonsterNum* Dungeon_SC_MonsterNum::default_instance_ = NULL;

Dungeon_SC_MonsterNum* Dungeon_SC_MonsterNum::New() const {
  return new Dungeon_SC_MonsterNum;
}

void Dungeon_SC_MonsterNum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    monsternum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Dungeon_SC_MonsterNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 MonsterNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monsternum_)));
          set_has_monsternum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Dungeon_SC_MonsterNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 MonsterNum = 1;
  if (has_monsternum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->monsternum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Dungeon_SC_MonsterNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 MonsterNum = 1;
  if (has_monsternum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->monsternum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Dungeon_SC_MonsterNum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 MonsterNum = 1;
    if (has_monsternum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monsternum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dungeon_SC_MonsterNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Dungeon_SC_MonsterNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Dungeon_SC_MonsterNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Dungeon_SC_MonsterNum::MergeFrom(const Dungeon_SC_MonsterNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_monsternum()) {
      set_monsternum(from.monsternum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Dungeon_SC_MonsterNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dungeon_SC_MonsterNum::CopyFrom(const Dungeon_SC_MonsterNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dungeon_SC_MonsterNum::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Dungeon_SC_MonsterNum::Swap(Dungeon_SC_MonsterNum* other) {
  if (other != this) {
    std::swap(monsternum_, other->monsternum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Dungeon_SC_MonsterNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dungeon_SC_MonsterNum_descriptor_;
  metadata.reflection = Dungeon_SC_MonsterNum_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Dungeon_SC_ChangeCamp::kIDFieldNumber;
const int Dungeon_SC_ChangeCamp::kCampFieldNumber;
#endif  // !_MSC_VER

Dungeon_SC_ChangeCamp::Dungeon_SC_ChangeCamp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Dungeon_SC_ChangeCamp::InitAsDefaultInstance() {
}

Dungeon_SC_ChangeCamp::Dungeon_SC_ChangeCamp(const Dungeon_SC_ChangeCamp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Dungeon_SC_ChangeCamp::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  camp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dungeon_SC_ChangeCamp::~Dungeon_SC_ChangeCamp() {
  SharedDtor();
}

void Dungeon_SC_ChangeCamp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Dungeon_SC_ChangeCamp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dungeon_SC_ChangeCamp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dungeon_SC_ChangeCamp_descriptor_;
}

const Dungeon_SC_ChangeCamp& Dungeon_SC_ChangeCamp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dungeon_2eproto();
  return *default_instance_;
}

Dungeon_SC_ChangeCamp* Dungeon_SC_ChangeCamp::default_instance_ = NULL;

Dungeon_SC_ChangeCamp* Dungeon_SC_ChangeCamp::New() const {
  return new Dungeon_SC_ChangeCamp;
}

void Dungeon_SC_ChangeCamp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    camp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Dungeon_SC_ChangeCamp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_camp;
        break;
      }

      // optional int32 camp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_camp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camp_)));
          set_has_camp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Dungeon_SC_ChangeCamp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional int32 camp = 2;
  if (has_camp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->camp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Dungeon_SC_ChangeCamp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional int32 camp = 2;
  if (has_camp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->camp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Dungeon_SC_ChangeCamp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional int32 camp = 2;
    if (has_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dungeon_SC_ChangeCamp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Dungeon_SC_ChangeCamp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Dungeon_SC_ChangeCamp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Dungeon_SC_ChangeCamp::MergeFrom(const Dungeon_SC_ChangeCamp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_camp()) {
      set_camp(from.camp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Dungeon_SC_ChangeCamp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dungeon_SC_ChangeCamp::CopyFrom(const Dungeon_SC_ChangeCamp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dungeon_SC_ChangeCamp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Dungeon_SC_ChangeCamp::Swap(Dungeon_SC_ChangeCamp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(camp_, other->camp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Dungeon_SC_ChangeCamp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dungeon_SC_ChangeCamp_descriptor_;
  metadata.reflection = Dungeon_SC_ChangeCamp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Dungeon_SC_PretendStart::kCampFieldNumber;
const int Dungeon_SC_PretendStart::kBodyIdFieldNumber;
#endif  // !_MSC_VER

Dungeon_SC_PretendStart::Dungeon_SC_PretendStart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Dungeon_SC_PretendStart::InitAsDefaultInstance() {
}

Dungeon_SC_PretendStart::Dungeon_SC_PretendStart(const Dungeon_SC_PretendStart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Dungeon_SC_PretendStart::SharedCtor() {
  _cached_size_ = 0;
  camp_ = 0;
  bodyid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dungeon_SC_PretendStart::~Dungeon_SC_PretendStart() {
  SharedDtor();
}

void Dungeon_SC_PretendStart::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Dungeon_SC_PretendStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dungeon_SC_PretendStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dungeon_SC_PretendStart_descriptor_;
}

const Dungeon_SC_PretendStart& Dungeon_SC_PretendStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dungeon_2eproto();
  return *default_instance_;
}

Dungeon_SC_PretendStart* Dungeon_SC_PretendStart::default_instance_ = NULL;

Dungeon_SC_PretendStart* Dungeon_SC_PretendStart::New() const {
  return new Dungeon_SC_PretendStart;
}

void Dungeon_SC_PretendStart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    camp_ = 0;
    bodyid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Dungeon_SC_PretendStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 camp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camp_)));
          set_has_camp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bodyId;
        break;
      }

      // optional uint32 bodyId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bodyId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bodyid_)));
          set_has_bodyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Dungeon_SC_PretendStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 camp = 1;
  if (has_camp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->camp(), output);
  }

  // optional uint32 bodyId = 2;
  if (has_bodyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bodyid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Dungeon_SC_PretendStart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 camp = 1;
  if (has_camp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->camp(), target);
  }

  // optional uint32 bodyId = 2;
  if (has_bodyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bodyid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Dungeon_SC_PretendStart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 camp = 1;
    if (has_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camp());
    }

    // optional uint32 bodyId = 2;
    if (has_bodyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bodyid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dungeon_SC_PretendStart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Dungeon_SC_PretendStart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Dungeon_SC_PretendStart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Dungeon_SC_PretendStart::MergeFrom(const Dungeon_SC_PretendStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_camp()) {
      set_camp(from.camp());
    }
    if (from.has_bodyid()) {
      set_bodyid(from.bodyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Dungeon_SC_PretendStart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dungeon_SC_PretendStart::CopyFrom(const Dungeon_SC_PretendStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dungeon_SC_PretendStart::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Dungeon_SC_PretendStart::Swap(Dungeon_SC_PretendStart* other) {
  if (other != this) {
    std::swap(camp_, other->camp_);
    std::swap(bodyid_, other->bodyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Dungeon_SC_PretendStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dungeon_SC_PretendStart_descriptor_;
  metadata.reflection = Dungeon_SC_PretendStart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Dungeon_SC_PretendEnd::kCampFieldNumber;
#endif  // !_MSC_VER

Dungeon_SC_PretendEnd::Dungeon_SC_PretendEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Dungeon_SC_PretendEnd::InitAsDefaultInstance() {
}

Dungeon_SC_PretendEnd::Dungeon_SC_PretendEnd(const Dungeon_SC_PretendEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Dungeon_SC_PretendEnd::SharedCtor() {
  _cached_size_ = 0;
  camp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dungeon_SC_PretendEnd::~Dungeon_SC_PretendEnd() {
  SharedDtor();
}

void Dungeon_SC_PretendEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Dungeon_SC_PretendEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dungeon_SC_PretendEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dungeon_SC_PretendEnd_descriptor_;
}

const Dungeon_SC_PretendEnd& Dungeon_SC_PretendEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dungeon_2eproto();
  return *default_instance_;
}

Dungeon_SC_PretendEnd* Dungeon_SC_PretendEnd::default_instance_ = NULL;

Dungeon_SC_PretendEnd* Dungeon_SC_PretendEnd::New() const {
  return new Dungeon_SC_PretendEnd;
}

void Dungeon_SC_PretendEnd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    camp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Dungeon_SC_PretendEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 camp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camp_)));
          set_has_camp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Dungeon_SC_PretendEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 camp = 1;
  if (has_camp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->camp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Dungeon_SC_PretendEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 camp = 1;
  if (has_camp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->camp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Dungeon_SC_PretendEnd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 camp = 1;
    if (has_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dungeon_SC_PretendEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Dungeon_SC_PretendEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Dungeon_SC_PretendEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Dungeon_SC_PretendEnd::MergeFrom(const Dungeon_SC_PretendEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_camp()) {
      set_camp(from.camp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Dungeon_SC_PretendEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dungeon_SC_PretendEnd::CopyFrom(const Dungeon_SC_PretendEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dungeon_SC_PretendEnd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Dungeon_SC_PretendEnd::Swap(Dungeon_SC_PretendEnd* other) {
  if (other != this) {
    std::swap(camp_, other->camp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Dungeon_SC_PretendEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dungeon_SC_PretendEnd_descriptor_;
  metadata.reflection = Dungeon_SC_PretendEnd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PassDungeon::kIdFieldNumber;
const int PassDungeon::kGradeFieldNumber;
const int PassDungeon::kRewardTimesFieldNumber;
const int PassDungeon::kEnterTimesFieldNumber;
#endif  // !_MSC_VER

PassDungeon::PassDungeon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PassDungeon::InitAsDefaultInstance() {
}

PassDungeon::PassDungeon(const PassDungeon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PassDungeon::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  grade_ = 0;
  reward_times_ = 0;
  enter_times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PassDungeon::~PassDungeon() {
  SharedDtor();
}

void PassDungeon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PassDungeon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PassDungeon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PassDungeon_descriptor_;
}

const PassDungeon& PassDungeon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dungeon_2eproto();
  return *default_instance_;
}

PassDungeon* PassDungeon::default_instance_ = NULL;

PassDungeon* PassDungeon::New() const {
  return new PassDungeon;
}

void PassDungeon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    grade_ = 0;
    reward_times_ = 0;
    enter_times_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PassDungeon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_grade;
        break;
      }

      // optional int32 grade = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reward_times;
        break;
      }

      // optional int32 reward_times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_times_)));
          set_has_reward_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_enter_times;
        break;
      }

      // optional int32 enter_times = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enter_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enter_times_)));
          set_has_enter_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PassDungeon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 grade = 2;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->grade(), output);
  }

  // optional int32 reward_times = 3;
  if (has_reward_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->reward_times(), output);
  }

  // optional int32 enter_times = 4;
  if (has_enter_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->enter_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PassDungeon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 grade = 2;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->grade(), target);
  }

  // optional int32 reward_times = 3;
  if (has_reward_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->reward_times(), target);
  }

  // optional int32 enter_times = 4;
  if (has_enter_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->enter_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PassDungeon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 grade = 2;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

    // optional int32 reward_times = 3;
    if (has_reward_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_times());
    }

    // optional int32 enter_times = 4;
    if (has_enter_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enter_times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PassDungeon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PassDungeon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PassDungeon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PassDungeon::MergeFrom(const PassDungeon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_reward_times()) {
      set_reward_times(from.reward_times());
    }
    if (from.has_enter_times()) {
      set_enter_times(from.enter_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PassDungeon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PassDungeon::CopyFrom(const PassDungeon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PassDungeon::IsInitialized() const {

  return true;
}

void PassDungeon::Swap(PassDungeon* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(grade_, other->grade_);
    std::swap(reward_times_, other->reward_times_);
    std::swap(enter_times_, other->enter_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PassDungeon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PassDungeon_descriptor_;
  metadata.reflection = PassDungeon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrialInfo::kUiSweepFieldNumber;
const int TrialInfo::kUiCurFloorFieldNumber;
#endif  // !_MSC_VER

TrialInfo::TrialInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrialInfo::InitAsDefaultInstance() {
}

TrialInfo::TrialInfo(const TrialInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrialInfo::SharedCtor() {
  _cached_size_ = 0;
  uisweep_ = 0u;
  uicurfloor_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrialInfo::~TrialInfo() {
  SharedDtor();
}

void TrialInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrialInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrialInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrialInfo_descriptor_;
}

const TrialInfo& TrialInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dungeon_2eproto();
  return *default_instance_;
}

TrialInfo* TrialInfo::default_instance_ = NULL;

TrialInfo* TrialInfo::New() const {
  return new TrialInfo;
}

void TrialInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uisweep_ = 0u;
    uicurfloor_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrialInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uiSweep = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uisweep_)));
          set_has_uisweep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiCurFloor;
        break;
      }

      // optional uint32 uiCurFloor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiCurFloor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uicurfloor_)));
          set_has_uicurfloor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrialInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uiSweep = 1;
  if (has_uisweep()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uisweep(), output);
  }

  // optional uint32 uiCurFloor = 2;
  if (has_uicurfloor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uicurfloor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrialInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uiSweep = 1;
  if (has_uisweep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uisweep(), target);
  }

  // optional uint32 uiCurFloor = 2;
  if (has_uicurfloor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uicurfloor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrialInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uiSweep = 1;
    if (has_uisweep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uisweep());
    }

    // optional uint32 uiCurFloor = 2;
    if (has_uicurfloor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uicurfloor());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrialInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrialInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrialInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrialInfo::MergeFrom(const TrialInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uisweep()) {
      set_uisweep(from.uisweep());
    }
    if (from.has_uicurfloor()) {
      set_uicurfloor(from.uicurfloor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrialInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrialInfo::CopyFrom(const TrialInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrialInfo::IsInitialized() const {

  return true;
}

void TrialInfo::Swap(TrialInfo* other) {
  if (other != this) {
    std::swap(uisweep_, other->uisweep_);
    std::swap(uicurfloor_, other->uicurfloor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrialInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrialInfo_descriptor_;
  metadata.reflection = TrialInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SingleStoryDungeon::kOpenIdFieldNumber;
const int SingleStoryDungeon::kPassListFieldNumber;
#endif  // !_MSC_VER

SingleStoryDungeon::SingleStoryDungeon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SingleStoryDungeon::InitAsDefaultInstance() {
}

SingleStoryDungeon::SingleStoryDungeon(const SingleStoryDungeon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SingleStoryDungeon::SharedCtor() {
  _cached_size_ = 0;
  open_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleStoryDungeon::~SingleStoryDungeon() {
  SharedDtor();
}

void SingleStoryDungeon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SingleStoryDungeon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleStoryDungeon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleStoryDungeon_descriptor_;
}

const SingleStoryDungeon& SingleStoryDungeon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dungeon_2eproto();
  return *default_instance_;
}

SingleStoryDungeon* SingleStoryDungeon::default_instance_ = NULL;

SingleStoryDungeon* SingleStoryDungeon::New() const {
  return new SingleStoryDungeon;
}

void SingleStoryDungeon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    open_id_ = 0;
  }
  pass_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SingleStoryDungeon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 open_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_id_)));
          set_has_open_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pass_list;
        break;
      }

      // repeated .proto.message.PassDungeon pass_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pass_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pass_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pass_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SingleStoryDungeon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 open_id = 1;
  if (has_open_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->open_id(), output);
  }

  // repeated .proto.message.PassDungeon pass_list = 2;
  for (int i = 0; i < this->pass_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pass_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SingleStoryDungeon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 open_id = 1;
  if (has_open_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->open_id(), target);
  }

  // repeated .proto.message.PassDungeon pass_list = 2;
  for (int i = 0; i < this->pass_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pass_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SingleStoryDungeon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 open_id = 1;
    if (has_open_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->open_id());
    }

  }
  // repeated .proto.message.PassDungeon pass_list = 2;
  total_size += 1 * this->pass_list_size();
  for (int i = 0; i < this->pass_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pass_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleStoryDungeon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SingleStoryDungeon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SingleStoryDungeon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleStoryDungeon::MergeFrom(const SingleStoryDungeon& from) {
  GOOGLE_CHECK_NE(&from, this);
  pass_list_.MergeFrom(from.pass_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_open_id()) {
      set_open_id(from.open_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SingleStoryDungeon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleStoryDungeon::CopyFrom(const SingleStoryDungeon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleStoryDungeon::IsInitialized() const {

  return true;
}

void SingleStoryDungeon::Swap(SingleStoryDungeon* other) {
  if (other != this) {
    std::swap(open_id_, other->open_id_);
    pass_list_.Swap(&other->pass_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SingleStoryDungeon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SingleStoryDungeon_descriptor_;
  metadata.reflection = SingleStoryDungeon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Dungeon_CS_GetDungeonInfo::Dungeon_CS_GetDungeonInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Dungeon_CS_GetDungeonInfo::InitAsDefaultInstance() {
}

Dungeon_CS_GetDungeonInfo::Dungeon_CS_GetDungeonInfo(const Dungeon_CS_GetDungeonInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Dungeon_CS_GetDungeonInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dungeon_CS_GetDungeonInfo::~Dungeon_CS_GetDungeonInfo() {
  SharedDtor();
}

void Dungeon_CS_GetDungeonInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Dungeon_CS_GetDungeonInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dungeon_CS_GetDungeonInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dungeon_CS_GetDungeonInfo_descriptor_;
}

const Dungeon_CS_GetDungeonInfo& Dungeon_CS_GetDungeonInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dungeon_2eproto();
  return *default_instance_;
}

Dungeon_CS_GetDungeonInfo* Dungeon_CS_GetDungeonInfo::default_instance_ = NULL;

Dungeon_CS_GetDungeonInfo* Dungeon_CS_GetDungeonInfo::New() const {
  return new Dungeon_CS_GetDungeonInfo;
}

void Dungeon_CS_GetDungeonInfo::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Dungeon_CS_GetDungeonInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Dungeon_CS_GetDungeonInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Dungeon_CS_GetDungeonInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Dungeon_CS_GetDungeonInfo::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dungeon_CS_GetDungeonInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Dungeon_CS_GetDungeonInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Dungeon_CS_GetDungeonInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Dungeon_CS_GetDungeonInfo::MergeFrom(const Dungeon_CS_GetDungeonInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Dungeon_CS_GetDungeonInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dungeon_CS_GetDungeonInfo::CopyFrom(const Dungeon_CS_GetDungeonInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dungeon_CS_GetDungeonInfo::IsInitialized() const {

  return true;
}

void Dungeon_CS_GetDungeonInfo::Swap(Dungeon_CS_GetDungeonInfo* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Dungeon_CS_GetDungeonInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dungeon_CS_GetDungeonInfo_descriptor_;
  metadata.reflection = Dungeon_CS_GetDungeonInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Dungeon_CS_RequestEnterDungeonAgain::Dungeon_CS_RequestEnterDungeonAgain()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Dungeon_CS_RequestEnterDungeonAgain::InitAsDefaultInstance() {
}

Dungeon_CS_RequestEnterDungeonAgain::Dungeon_CS_RequestEnterDungeonAgain(const Dungeon_CS_RequestEnterDungeonAgain& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Dungeon_CS_RequestEnterDungeonAgain::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dungeon_CS_RequestEnterDungeonAgain::~Dungeon_CS_RequestEnterDungeonAgain() {
  SharedDtor();
}

void Dungeon_CS_RequestEnterDungeonAgain::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Dungeon_CS_RequestEnterDungeonAgain::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dungeon_CS_RequestEnterDungeonAgain::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dungeon_CS_RequestEnterDungeonAgain_descriptor_;
}

const Dungeon_CS_RequestEnterDungeonAgain& Dungeon_CS_RequestEnterDungeonAgain::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dungeon_2eproto();
  return *default_instance_;
}

Dungeon_CS_RequestEnterDungeonAgain* Dungeon_CS_RequestEnterDungeonAgain::default_instance_ = NULL;

Dungeon_CS_RequestEnterDungeonAgain* Dungeon_CS_RequestEnterDungeonAgain::New() const {
  return new Dungeon_CS_RequestEnterDungeonAgain;
}

void Dungeon_CS_RequestEnterDungeonAgain::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Dungeon_CS_RequestEnterDungeonAgain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Dungeon_CS_RequestEnterDungeonAgain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Dungeon_CS_RequestEnterDungeonAgain::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Dungeon_CS_RequestEnterDungeonAgain::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dungeon_CS_RequestEnterDungeonAgain::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Dungeon_CS_RequestEnterDungeonAgain* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Dungeon_CS_RequestEnterDungeonAgain*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Dungeon_CS_RequestEnterDungeonAgain::MergeFrom(const Dungeon_CS_RequestEnterDungeonAgain& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Dungeon_CS_RequestEnterDungeonAgain::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dungeon_CS_RequestEnterDungeonAgain::CopyFrom(const Dungeon_CS_RequestEnterDungeonAgain& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dungeon_CS_RequestEnterDungeonAgain::IsInitialized() const {

  return true;
}

void Dungeon_CS_RequestEnterDungeonAgain::Swap(Dungeon_CS_RequestEnterDungeonAgain* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Dungeon_CS_RequestEnterDungeonAgain::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dungeon_CS_RequestEnterDungeonAgain_descriptor_;
  metadata.reflection = Dungeon_CS_RequestEnterDungeonAgain_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Dungeon_SC_GetDungeonInfo::kSingleOrdinaryFieldNumber;
const int Dungeon_SC_GetDungeonInfo::kSingleEliteFieldNumber;
const int Dungeon_SC_GetDungeonInfo::kTrialFieldNumber;
const int Dungeon_SC_GetDungeonInfo::kMaterialListFieldNumber;
const int Dungeon_SC_GetDungeonInfo::kSingleTrialFieldNumber;
const int Dungeon_SC_GetDungeonInfo::kOtherFieldNumber;
const int Dungeon_SC_GetDungeonInfo::kGradeSCountFieldNumber;
const int Dungeon_SC_GetDungeonInfo::kGradeSRewardtimesFieldNumber;
#endif  // !_MSC_VER

Dungeon_SC_GetDungeonInfo::Dungeon_SC_GetDungeonInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Dungeon_SC_GetDungeonInfo::InitAsDefaultInstance() {
  single_ordinary_ = const_cast< ::proto::message::SingleStoryDungeon*>(&::proto::message::SingleStoryDungeon::default_instance());
  single_elite_ = const_cast< ::proto::message::SingleStoryDungeon*>(&::proto::message::SingleStoryDungeon::default_instance());
  trial_ = const_cast< ::proto::message::SingleStoryDungeon*>(&::proto::message::SingleStoryDungeon::default_instance());
}

Dungeon_SC_GetDungeonInfo::Dungeon_SC_GetDungeonInfo(const Dungeon_SC_GetDungeonInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Dungeon_SC_GetDungeonInfo::SharedCtor() {
  _cached_size_ = 0;
  single_ordinary_ = NULL;
  single_elite_ = NULL;
  trial_ = NULL;
  grade_s_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dungeon_SC_GetDungeonInfo::~Dungeon_SC_GetDungeonInfo() {
  SharedDtor();
}

void Dungeon_SC_GetDungeonInfo::SharedDtor() {
  if (this != default_instance_) {
    delete single_ordinary_;
    delete single_elite_;
    delete trial_;
  }
}

void Dungeon_SC_GetDungeonInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dungeon_SC_GetDungeonInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dungeon_SC_GetDungeonInfo_descriptor_;
}

const Dungeon_SC_GetDungeonInfo& Dungeon_SC_GetDungeonInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dungeon_2eproto();
  return *default_instance_;
}

Dungeon_SC_GetDungeonInfo* Dungeon_SC_GetDungeonInfo::default_instance_ = NULL;

Dungeon_SC_GetDungeonInfo* Dungeon_SC_GetDungeonInfo::New() const {
  return new Dungeon_SC_GetDungeonInfo;
}

void Dungeon_SC_GetDungeonInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_single_ordinary()) {
      if (single_ordinary_ != NULL) single_ordinary_->::proto::message::SingleStoryDungeon::Clear();
    }
    if (has_single_elite()) {
      if (single_elite_ != NULL) single_elite_->::proto::message::SingleStoryDungeon::Clear();
    }
    if (has_trial()) {
      if (trial_ != NULL) trial_->::proto::message::SingleStoryDungeon::Clear();
    }
    grade_s_count_ = 0u;
  }
  material_list_.Clear();
  single_trial_.Clear();
  other_.Clear();
  grade_s_rewardtimes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Dungeon_SC_GetDungeonInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.message.SingleStoryDungeon single_ordinary = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_single_ordinary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_single_elite;
        break;
      }

      // optional .proto.message.SingleStoryDungeon single_elite = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_single_elite:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_single_elite()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Trial;
        break;
      }

      // optional .proto.message.SingleStoryDungeon Trial = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Trial:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trial()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_material_list;
        break;
      }

      // repeated .proto.message.PassDungeon material_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_material_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_material_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_material_list;
        if (input->ExpectTag(42)) goto parse_single_trial;
        break;
      }

      // repeated .proto.message.TrialInfo single_trial = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_single_trial:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_single_trial()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_single_trial;
        if (input->ExpectTag(50)) goto parse_other;
        break;
      }

      // repeated .proto.message.PassDungeon other = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_other:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_other()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_other;
        if (input->ExpectTag(56)) goto parse_grade_S_count;
        break;
      }

      // optional uint32 grade_S_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade_S_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grade_s_count_)));
          set_has_grade_s_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_grade_S_rewardtimes;
        break;
      }

      // repeated .proto.message.IDNum grade_S_rewardtimes = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_grade_S_rewardtimes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_grade_s_rewardtimes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_grade_S_rewardtimes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Dungeon_SC_GetDungeonInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.message.SingleStoryDungeon single_ordinary = 1;
  if (has_single_ordinary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->single_ordinary(), output);
  }

  // optional .proto.message.SingleStoryDungeon single_elite = 2;
  if (has_single_elite()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->single_elite(), output);
  }

  // optional .proto.message.SingleStoryDungeon Trial = 3;
  if (has_trial()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->trial(), output);
  }

  // repeated .proto.message.PassDungeon material_list = 4;
  for (int i = 0; i < this->material_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->material_list(i), output);
  }

  // repeated .proto.message.TrialInfo single_trial = 5;
  for (int i = 0; i < this->single_trial_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->single_trial(i), output);
  }

  // repeated .proto.message.PassDungeon other = 6;
  for (int i = 0; i < this->other_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->other(i), output);
  }

  // optional uint32 grade_S_count = 7;
  if (has_grade_s_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->grade_s_count(), output);
  }

  // repeated .proto.message.IDNum grade_S_rewardtimes = 8;
  for (int i = 0; i < this->grade_s_rewardtimes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->grade_s_rewardtimes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Dungeon_SC_GetDungeonInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.message.SingleStoryDungeon single_ordinary = 1;
  if (has_single_ordinary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->single_ordinary(), target);
  }

  // optional .proto.message.SingleStoryDungeon single_elite = 2;
  if (has_single_elite()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->single_elite(), target);
  }

  // optional .proto.message.SingleStoryDungeon Trial = 3;
  if (has_trial()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->trial(), target);
  }

  // repeated .proto.message.PassDungeon material_list = 4;
  for (int i = 0; i < this->material_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->material_list(i), target);
  }

  // repeated .proto.message.TrialInfo single_trial = 5;
  for (int i = 0; i < this->single_trial_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->single_trial(i), target);
  }

  // repeated .proto.message.PassDungeon other = 6;
  for (int i = 0; i < this->other_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->other(i), target);
  }

  // optional uint32 grade_S_count = 7;
  if (has_grade_s_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->grade_s_count(), target);
  }

  // repeated .proto.message.IDNum grade_S_rewardtimes = 8;
  for (int i = 0; i < this->grade_s_rewardtimes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->grade_s_rewardtimes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Dungeon_SC_GetDungeonInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.message.SingleStoryDungeon single_ordinary = 1;
    if (has_single_ordinary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->single_ordinary());
    }

    // optional .proto.message.SingleStoryDungeon single_elite = 2;
    if (has_single_elite()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->single_elite());
    }

    // optional .proto.message.SingleStoryDungeon Trial = 3;
    if (has_trial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trial());
    }

    // optional uint32 grade_S_count = 7;
    if (has_grade_s_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grade_s_count());
    }

  }
  // repeated .proto.message.PassDungeon material_list = 4;
  total_size += 1 * this->material_list_size();
  for (int i = 0; i < this->material_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->material_list(i));
  }

  // repeated .proto.message.TrialInfo single_trial = 5;
  total_size += 1 * this->single_trial_size();
  for (int i = 0; i < this->single_trial_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->single_trial(i));
  }

  // repeated .proto.message.PassDungeon other = 6;
  total_size += 1 * this->other_size();
  for (int i = 0; i < this->other_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->other(i));
  }

  // repeated .proto.message.IDNum grade_S_rewardtimes = 8;
  total_size += 1 * this->grade_s_rewardtimes_size();
  for (int i = 0; i < this->grade_s_rewardtimes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->grade_s_rewardtimes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dungeon_SC_GetDungeonInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Dungeon_SC_GetDungeonInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Dungeon_SC_GetDungeonInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Dungeon_SC_GetDungeonInfo::MergeFrom(const Dungeon_SC_GetDungeonInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  material_list_.MergeFrom(from.material_list_);
  single_trial_.MergeFrom(from.single_trial_);
  other_.MergeFrom(from.other_);
  grade_s_rewardtimes_.MergeFrom(from.grade_s_rewardtimes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_single_ordinary()) {
      mutable_single_ordinary()->::proto::message::SingleStoryDungeon::MergeFrom(from.single_ordinary());
    }
    if (from.has_single_elite()) {
      mutable_single_elite()->::proto::message::SingleStoryDungeon::MergeFrom(from.single_elite());
    }
    if (from.has_trial()) {
      mutable_trial()->::proto::message::SingleStoryDungeon::MergeFrom(from.trial());
    }
    if (from.has_grade_s_count()) {
      set_grade_s_count(from.grade_s_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Dungeon_SC_GetDungeonInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dungeon_SC_GetDungeonInfo::CopyFrom(const Dungeon_SC_GetDungeonInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dungeon_SC_GetDungeonInfo::IsInitialized() const {

  return true;
}

void Dungeon_SC_GetDungeonInfo::Swap(Dungeon_SC_GetDungeonInfo* other) {
  if (other != this) {
    std::swap(single_ordinary_, other->single_ordinary_);
    std::swap(single_elite_, other->single_elite_);
    std::swap(trial_, other->trial_);
    material_list_.Swap(&other->material_list_);
    single_trial_.Swap(&other->single_trial_);
    other_.Swap(&other->other_);
    std::swap(grade_s_count_, other->grade_s_count_);
    grade_s_rewardtimes_.Swap(&other->grade_s_rewardtimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Dungeon_SC_GetDungeonInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dungeon_SC_GetDungeonInfo_descriptor_;
  metadata.reflection = Dungeon_SC_GetDungeonInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Dungeon_SC_ChangeDungeonScene::kDungeonSceneIdFieldNumber;
const int Dungeon_SC_ChangeDungeonScene::kPtFieldNumber;
const int Dungeon_SC_ChangeDungeonScene::kDirFieldNumber;
const int Dungeon_SC_ChangeDungeonScene::kLayerFieldNumber;
#endif  // !_MSC_VER

Dungeon_SC_ChangeDungeonScene::Dungeon_SC_ChangeDungeonScene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Dungeon_SC_ChangeDungeonScene::InitAsDefaultInstance() {
  pt_ = const_cast< ::proto::message::Point3D*>(&::proto::message::Point3D::default_instance());
}

Dungeon_SC_ChangeDungeonScene::Dungeon_SC_ChangeDungeonScene(const Dungeon_SC_ChangeDungeonScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Dungeon_SC_ChangeDungeonScene::SharedCtor() {
  _cached_size_ = 0;
  dungeon_scene_id_ = 0u;
  pt_ = NULL;
  dir_ = 0;
  layer_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dungeon_SC_ChangeDungeonScene::~Dungeon_SC_ChangeDungeonScene() {
  SharedDtor();
}

void Dungeon_SC_ChangeDungeonScene::SharedDtor() {
  if (this != default_instance_) {
    delete pt_;
  }
}

void Dungeon_SC_ChangeDungeonScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dungeon_SC_ChangeDungeonScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dungeon_SC_ChangeDungeonScene_descriptor_;
}

const Dungeon_SC_ChangeDungeonScene& Dungeon_SC_ChangeDungeonScene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dungeon_2eproto();
  return *default_instance_;
}

Dungeon_SC_ChangeDungeonScene* Dungeon_SC_ChangeDungeonScene::default_instance_ = NULL;

Dungeon_SC_ChangeDungeonScene* Dungeon_SC_ChangeDungeonScene::New() const {
  return new Dungeon_SC_ChangeDungeonScene;
}

void Dungeon_SC_ChangeDungeonScene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dungeon_scene_id_ = 0u;
    if (has_pt()) {
      if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
    }
    dir_ = 0;
    layer_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Dungeon_SC_ChangeDungeonScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dungeon_scene_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dungeon_scene_id_)));
          set_has_dungeon_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Pt;
        break;
      }

      // optional .proto.message.Point3D Pt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Pt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_Dir;
        break;
      }

      // optional float Dir = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Layer;
        break;
      }

      // optional uint32 Layer = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Dungeon_SC_ChangeDungeonScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 dungeon_scene_id = 1;
  if (has_dungeon_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dungeon_scene_id(), output);
  }

  // optional .proto.message.Point3D Pt = 2;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pt(), output);
  }

  // optional float Dir = 3;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->dir(), output);
  }

  // optional uint32 Layer = 4;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->layer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Dungeon_SC_ChangeDungeonScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 dungeon_scene_id = 1;
  if (has_dungeon_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dungeon_scene_id(), target);
  }

  // optional .proto.message.Point3D Pt = 2;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pt(), target);
  }

  // optional float Dir = 3;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->dir(), target);
  }

  // optional uint32 Layer = 4;
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->layer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Dungeon_SC_ChangeDungeonScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 dungeon_scene_id = 1;
    if (has_dungeon_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dungeon_scene_id());
    }

    // optional .proto.message.Point3D Pt = 2;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

    // optional float Dir = 3;
    if (has_dir()) {
      total_size += 1 + 4;
    }

    // optional uint32 Layer = 4;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dungeon_SC_ChangeDungeonScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Dungeon_SC_ChangeDungeonScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Dungeon_SC_ChangeDungeonScene*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Dungeon_SC_ChangeDungeonScene::MergeFrom(const Dungeon_SC_ChangeDungeonScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dungeon_scene_id()) {
      set_dungeon_scene_id(from.dungeon_scene_id());
    }
    if (from.has_pt()) {
      mutable_pt()->::proto::message::Point3D::MergeFrom(from.pt());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_layer()) {
      set_layer(from.layer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Dungeon_SC_ChangeDungeonScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dungeon_SC_ChangeDungeonScene::CopyFrom(const Dungeon_SC_ChangeDungeonScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dungeon_SC_ChangeDungeonScene::IsInitialized() const {

  return true;
}

void Dungeon_SC_ChangeDungeonScene::Swap(Dungeon_SC_ChangeDungeonScene* other) {
  if (other != this) {
    std::swap(dungeon_scene_id_, other->dungeon_scene_id_);
    std::swap(pt_, other->pt_);
    std::swap(dir_, other->dir_);
    std::swap(layer_, other->layer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Dungeon_SC_ChangeDungeonScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dungeon_SC_ChangeDungeonScene_descriptor_;
  metadata.reflection = Dungeon_SC_ChangeDungeonScene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Dungeon_CS_ChangeDungeonSceneOK::Dungeon_CS_ChangeDungeonSceneOK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Dungeon_CS_ChangeDungeonSceneOK::InitAsDefaultInstance() {
}

Dungeon_CS_ChangeDungeonSceneOK::Dungeon_CS_ChangeDungeonSceneOK(const Dungeon_CS_ChangeDungeonSceneOK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Dungeon_CS_ChangeDungeonSceneOK::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dungeon_CS_ChangeDungeonSceneOK::~Dungeon_CS_ChangeDungeonSceneOK() {
  SharedDtor();
}

void Dungeon_CS_ChangeDungeonSceneOK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Dungeon_CS_ChangeDungeonSceneOK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dungeon_CS_ChangeDungeonSceneOK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dungeon_CS_ChangeDungeonSceneOK_descriptor_;
}

const Dungeon_CS_ChangeDungeonSceneOK& Dungeon_CS_ChangeDungeonSceneOK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dungeon_2eproto();
  return *default_instance_;
}

Dungeon_CS_ChangeDungeonSceneOK* Dungeon_CS_ChangeDungeonSceneOK::default_instance_ = NULL;

Dungeon_CS_ChangeDungeonSceneOK* Dungeon_CS_ChangeDungeonSceneOK::New() const {
  return new Dungeon_CS_ChangeDungeonSceneOK;
}

void Dungeon_CS_ChangeDungeonSceneOK::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Dungeon_CS_ChangeDungeonSceneOK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Dungeon_CS_ChangeDungeonSceneOK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Dungeon_CS_ChangeDungeonSceneOK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Dungeon_CS_ChangeDungeonSceneOK::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dungeon_CS_ChangeDungeonSceneOK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Dungeon_CS_ChangeDungeonSceneOK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Dungeon_CS_ChangeDungeonSceneOK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Dungeon_CS_ChangeDungeonSceneOK::MergeFrom(const Dungeon_CS_ChangeDungeonSceneOK& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Dungeon_CS_ChangeDungeonSceneOK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dungeon_CS_ChangeDungeonSceneOK::CopyFrom(const Dungeon_CS_ChangeDungeonSceneOK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dungeon_CS_ChangeDungeonSceneOK::IsInitialized() const {

  return true;
}

void Dungeon_CS_ChangeDungeonSceneOK::Swap(Dungeon_CS_ChangeDungeonSceneOK* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Dungeon_CS_ChangeDungeonSceneOK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dungeon_CS_ChangeDungeonSceneOK_descriptor_;
  metadata.reflection = Dungeon_CS_ChangeDungeonSceneOK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Dungeon_CS_StarUp::kIdFieldNumber;
#endif  // !_MSC_VER

Dungeon_CS_StarUp::Dungeon_CS_StarUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Dungeon_CS_StarUp::InitAsDefaultInstance() {
}

Dungeon_CS_StarUp::Dungeon_CS_StarUp(const Dungeon_CS_StarUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Dungeon_CS_StarUp::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dungeon_CS_StarUp::~Dungeon_CS_StarUp() {
  SharedDtor();
}

void Dungeon_CS_StarUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Dungeon_CS_StarUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dungeon_CS_StarUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dungeon_CS_StarUp_descriptor_;
}

const Dungeon_CS_StarUp& Dungeon_CS_StarUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dungeon_2eproto();
  return *default_instance_;
}

Dungeon_CS_StarUp* Dungeon_CS_StarUp::default_instance_ = NULL;

Dungeon_CS_StarUp* Dungeon_CS_StarUp::New() const {
  return new Dungeon_CS_StarUp;
}

void Dungeon_CS_StarUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Dungeon_CS_StarUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Dungeon_CS_StarUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Dungeon_CS_StarUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Dungeon_CS_StarUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dungeon_CS_StarUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Dungeon_CS_StarUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Dungeon_CS_StarUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Dungeon_CS_StarUp::MergeFrom(const Dungeon_CS_StarUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Dungeon_CS_StarUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dungeon_CS_StarUp::CopyFrom(const Dungeon_CS_StarUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dungeon_CS_StarUp::IsInitialized() const {

  return true;
}

void Dungeon_CS_StarUp::Swap(Dungeon_CS_StarUp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Dungeon_CS_StarUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dungeon_CS_StarUp_descriptor_;
  metadata.reflection = Dungeon_CS_StarUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Dungeon_SC_StarUp::kResultFieldNumber;
const int Dungeon_SC_StarUp::kIdFieldNumber;
const int Dungeon_SC_StarUp::kGradeFieldNumber;
#endif  // !_MSC_VER

Dungeon_SC_StarUp::Dungeon_SC_StarUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Dungeon_SC_StarUp::InitAsDefaultInstance() {
}

Dungeon_SC_StarUp::Dungeon_SC_StarUp(const Dungeon_SC_StarUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Dungeon_SC_StarUp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  id_ = 0;
  grade_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dungeon_SC_StarUp::~Dungeon_SC_StarUp() {
  SharedDtor();
}

void Dungeon_SC_StarUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Dungeon_SC_StarUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dungeon_SC_StarUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dungeon_SC_StarUp_descriptor_;
}

const Dungeon_SC_StarUp& Dungeon_SC_StarUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dungeon_2eproto();
  return *default_instance_;
}

Dungeon_SC_StarUp* Dungeon_SC_StarUp::default_instance_ = NULL;

Dungeon_SC_StarUp* Dungeon_SC_StarUp::New() const {
  return new Dungeon_SC_StarUp;
}

void Dungeon_SC_StarUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    id_ = 0;
    grade_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Dungeon_SC_StarUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_grade;
        break;
      }

      // required int32 grade = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Dungeon_SC_StarUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // required int32 grade = 3;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->grade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Dungeon_SC_StarUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // required int32 grade = 3;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->grade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Dungeon_SC_StarUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 grade = 3;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dungeon_SC_StarUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Dungeon_SC_StarUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Dungeon_SC_StarUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Dungeon_SC_StarUp::MergeFrom(const Dungeon_SC_StarUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Dungeon_SC_StarUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dungeon_SC_StarUp::CopyFrom(const Dungeon_SC_StarUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dungeon_SC_StarUp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void Dungeon_SC_StarUp::Swap(Dungeon_SC_StarUp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(id_, other->id_);
    std::swap(grade_, other->grade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Dungeon_SC_StarUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dungeon_SC_StarUp_descriptor_;
  metadata.reflection = Dungeon_SC_StarUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Dungeon_CS_Sweep::kIdFieldNumber;
#endif  // !_MSC_VER

Dungeon_CS_Sweep::Dungeon_CS_Sweep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Dungeon_CS_Sweep::InitAsDefaultInstance() {
}

Dungeon_CS_Sweep::Dungeon_CS_Sweep(const Dungeon_CS_Sweep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Dungeon_CS_Sweep::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dungeon_CS_Sweep::~Dungeon_CS_Sweep() {
  SharedDtor();
}

void Dungeon_CS_Sweep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Dungeon_CS_Sweep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dungeon_CS_Sweep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dungeon_CS_Sweep_descriptor_;
}

const Dungeon_CS_Sweep& Dungeon_CS_Sweep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dungeon_2eproto();
  return *default_instance_;
}

Dungeon_CS_Sweep* Dungeon_CS_Sweep::default_instance_ = NULL;

Dungeon_CS_Sweep* Dungeon_CS_Sweep::New() const {
  return new Dungeon_CS_Sweep;
}

void Dungeon_CS_Sweep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Dungeon_CS_Sweep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Dungeon_CS_Sweep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Dungeon_CS_Sweep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Dungeon_CS_Sweep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dungeon_CS_Sweep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Dungeon_CS_Sweep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Dungeon_CS_Sweep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Dungeon_CS_Sweep::MergeFrom(const Dungeon_CS_Sweep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Dungeon_CS_Sweep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dungeon_CS_Sweep::CopyFrom(const Dungeon_CS_Sweep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dungeon_CS_Sweep::IsInitialized() const {

  return true;
}

void Dungeon_CS_Sweep::Swap(Dungeon_CS_Sweep* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Dungeon_CS_Sweep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dungeon_CS_Sweep_descriptor_;
  metadata.reflection = Dungeon_CS_Sweep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Dungeon_SC_Sweep::kResultFieldNumber;
const int Dungeon_SC_Sweep::kDungeonIdFieldNumber;
const int Dungeon_SC_Sweep::kItemListFieldNumber;
const int Dungeon_SC_Sweep::kExtraListFieldNumber;
#endif  // !_MSC_VER

Dungeon_SC_Sweep::Dungeon_SC_Sweep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Dungeon_SC_Sweep::InitAsDefaultInstance() {
}

Dungeon_SC_Sweep::Dungeon_SC_Sweep(const Dungeon_SC_Sweep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Dungeon_SC_Sweep::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  dungeon_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dungeon_SC_Sweep::~Dungeon_SC_Sweep() {
  SharedDtor();
}

void Dungeon_SC_Sweep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Dungeon_SC_Sweep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dungeon_SC_Sweep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dungeon_SC_Sweep_descriptor_;
}

const Dungeon_SC_Sweep& Dungeon_SC_Sweep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dungeon_2eproto();
  return *default_instance_;
}

Dungeon_SC_Sweep* Dungeon_SC_Sweep::default_instance_ = NULL;

Dungeon_SC_Sweep* Dungeon_SC_Sweep::New() const {
  return new Dungeon_SC_Sweep;
}

void Dungeon_SC_Sweep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    dungeon_id_ = 0;
  }
  item_list_.Clear();
  extra_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Dungeon_SC_Sweep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dungeon_id;
        break;
      }

      // optional int32 dungeon_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dungeon_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dungeon_id_)));
          set_has_dungeon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item_list;
        break;
      }

      // repeated .proto.message.RewardItem item_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item_list;
        if (input->ExpectTag(34)) goto parse_extra_list;
        break;
      }

      // repeated .proto.message.RewardItem extra_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extra_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_extra_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_extra_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Dungeon_SC_Sweep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 dungeon_id = 2;
  if (has_dungeon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dungeon_id(), output);
  }

  // repeated .proto.message.RewardItem item_list = 3;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item_list(i), output);
  }

  // repeated .proto.message.RewardItem extra_list = 4;
  for (int i = 0; i < this->extra_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->extra_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Dungeon_SC_Sweep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 dungeon_id = 2;
  if (has_dungeon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dungeon_id(), target);
  }

  // repeated .proto.message.RewardItem item_list = 3;
  for (int i = 0; i < this->item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item_list(i), target);
  }

  // repeated .proto.message.RewardItem extra_list = 4;
  for (int i = 0; i < this->extra_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->extra_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Dungeon_SC_Sweep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 dungeon_id = 2;
    if (has_dungeon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dungeon_id());
    }

  }
  // repeated .proto.message.RewardItem item_list = 3;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }

  // repeated .proto.message.RewardItem extra_list = 4;
  total_size += 1 * this->extra_list_size();
  for (int i = 0; i < this->extra_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->extra_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dungeon_SC_Sweep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Dungeon_SC_Sweep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Dungeon_SC_Sweep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Dungeon_SC_Sweep::MergeFrom(const Dungeon_SC_Sweep& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_list_.MergeFrom(from.item_list_);
  extra_list_.MergeFrom(from.extra_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_dungeon_id()) {
      set_dungeon_id(from.dungeon_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Dungeon_SC_Sweep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dungeon_SC_Sweep::CopyFrom(const Dungeon_SC_Sweep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dungeon_SC_Sweep::IsInitialized() const {

  return true;
}

void Dungeon_SC_Sweep::Swap(Dungeon_SC_Sweep* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(dungeon_id_, other->dungeon_id_);
    item_list_.Swap(&other->item_list_);
    extra_list_.Swap(&other->extra_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Dungeon_SC_Sweep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dungeon_SC_Sweep_descriptor_;
  metadata.reflection = Dungeon_SC_Sweep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Game2Battle_CreateDungeon::kUiDungeonIdFieldNumber;
#endif  // !_MSC_VER

Game2Battle_CreateDungeon::Game2Battle_CreateDungeon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Game2Battle_CreateDungeon::InitAsDefaultInstance() {
}

Game2Battle_CreateDungeon::Game2Battle_CreateDungeon(const Game2Battle_CreateDungeon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Game2Battle_CreateDungeon::SharedCtor() {
  _cached_size_ = 0;
  uidungeonid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Game2Battle_CreateDungeon::~Game2Battle_CreateDungeon() {
  SharedDtor();
}

void Game2Battle_CreateDungeon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Game2Battle_CreateDungeon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Game2Battle_CreateDungeon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Game2Battle_CreateDungeon_descriptor_;
}

const Game2Battle_CreateDungeon& Game2Battle_CreateDungeon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dungeon_2eproto();
  return *default_instance_;
}

Game2Battle_CreateDungeon* Game2Battle_CreateDungeon::default_instance_ = NULL;

Game2Battle_CreateDungeon* Game2Battle_CreateDungeon::New() const {
  return new Game2Battle_CreateDungeon;
}

void Game2Battle_CreateDungeon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uidungeonid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Game2Battle_CreateDungeon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uiDungeonId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uidungeonid_)));
          set_has_uidungeonid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Game2Battle_CreateDungeon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uiDungeonId = 1;
  if (has_uidungeonid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uidungeonid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Game2Battle_CreateDungeon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uiDungeonId = 1;
  if (has_uidungeonid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uidungeonid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Game2Battle_CreateDungeon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uiDungeonId = 1;
    if (has_uidungeonid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uidungeonid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Game2Battle_CreateDungeon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Game2Battle_CreateDungeon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Game2Battle_CreateDungeon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Game2Battle_CreateDungeon::MergeFrom(const Game2Battle_CreateDungeon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uidungeonid()) {
      set_uidungeonid(from.uidungeonid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Game2Battle_CreateDungeon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Game2Battle_CreateDungeon::CopyFrom(const Game2Battle_CreateDungeon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game2Battle_CreateDungeon::IsInitialized() const {

  return true;
}

void Game2Battle_CreateDungeon::Swap(Game2Battle_CreateDungeon* other) {
  if (other != this) {
    std::swap(uidungeonid_, other->uidungeonid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Game2Battle_CreateDungeon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Game2Battle_CreateDungeon_descriptor_;
  metadata.reflection = Game2Battle_CreateDungeon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Game_CreateDungeon::kUiDungeonIdFieldNumber;
const int Battle2Game_CreateDungeon::kUiDungeonAssignIdFieldNumber;
const int Battle2Game_CreateDungeon::kIpFieldNumber;
const int Battle2Game_CreateDungeon::kPortFieldNumber;
#endif  // !_MSC_VER

Battle2Game_CreateDungeon::Battle2Game_CreateDungeon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Game_CreateDungeon::InitAsDefaultInstance() {
}

Battle2Game_CreateDungeon::Battle2Game_CreateDungeon(const Battle2Game_CreateDungeon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Game_CreateDungeon::SharedCtor() {
  _cached_size_ = 0;
  uidungeonid_ = 0u;
  uidungeonassignid_ = 0u;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Game_CreateDungeon::~Battle2Game_CreateDungeon() {
  SharedDtor();
}

void Battle2Game_CreateDungeon::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void Battle2Game_CreateDungeon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Game_CreateDungeon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Game_CreateDungeon_descriptor_;
}

const Battle2Game_CreateDungeon& Battle2Game_CreateDungeon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dungeon_2eproto();
  return *default_instance_;
}

Battle2Game_CreateDungeon* Battle2Game_CreateDungeon::default_instance_ = NULL;

Battle2Game_CreateDungeon* Battle2Game_CreateDungeon::New() const {
  return new Battle2Game_CreateDungeon;
}

void Battle2Game_CreateDungeon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uidungeonid_ = 0u;
    uidungeonassignid_ = 0u;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Game_CreateDungeon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uiDungeonId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uidungeonid_)));
          set_has_uidungeonid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiDungeonAssignId;
        break;
      }

      // optional uint32 uiDungeonAssignId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiDungeonAssignId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uidungeonassignid_)));
          set_has_uidungeonassignid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // optional string ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_port;
        break;
      }

      // optional int32 port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Game_CreateDungeon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uiDungeonId = 1;
  if (has_uidungeonid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uidungeonid(), output);
  }

  // optional uint32 uiDungeonAssignId = 2;
  if (has_uidungeonassignid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uidungeonassignid(), output);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ip(), output);
  }

  // optional int32 port = 4;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Game_CreateDungeon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uiDungeonId = 1;
  if (has_uidungeonid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uidungeonid(), target);
  }

  // optional uint32 uiDungeonAssignId = 2;
  if (has_uidungeonassignid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uidungeonassignid(), target);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // optional int32 port = 4;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Game_CreateDungeon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uiDungeonId = 1;
    if (has_uidungeonid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uidungeonid());
    }

    // optional uint32 uiDungeonAssignId = 2;
    if (has_uidungeonassignid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uidungeonassignid());
    }

    // optional string ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 4;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Game_CreateDungeon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Game_CreateDungeon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Game_CreateDungeon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Game_CreateDungeon::MergeFrom(const Battle2Game_CreateDungeon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uidungeonid()) {
      set_uidungeonid(from.uidungeonid());
    }
    if (from.has_uidungeonassignid()) {
      set_uidungeonassignid(from.uidungeonassignid());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Game_CreateDungeon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Game_CreateDungeon::CopyFrom(const Battle2Game_CreateDungeon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Game_CreateDungeon::IsInitialized() const {

  return true;
}

void Battle2Game_CreateDungeon::Swap(Battle2Game_CreateDungeon* other) {
  if (other != this) {
    std::swap(uidungeonid_, other->uidungeonid_);
    std::swap(uidungeonassignid_, other->uidungeonassignid_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Game_CreateDungeon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Game_CreateDungeon_descriptor_;
  metadata.reflection = Battle2Game_CreateDungeon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Dungeon_SC_TimerStart::kDungeonSceneIdFieldNumber;
const int Dungeon_SC_TimerStart::kIpFieldNumber;
const int Dungeon_SC_TimerStart::kPortFieldNumber;
#endif  // !_MSC_VER

Dungeon_SC_TimerStart::Dungeon_SC_TimerStart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Dungeon_SC_TimerStart::InitAsDefaultInstance() {
}

Dungeon_SC_TimerStart::Dungeon_SC_TimerStart(const Dungeon_SC_TimerStart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Dungeon_SC_TimerStart::SharedCtor() {
  _cached_size_ = 0;
  dungeon_scene_id_ = 0u;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dungeon_SC_TimerStart::~Dungeon_SC_TimerStart() {
  SharedDtor();
}

void Dungeon_SC_TimerStart::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void Dungeon_SC_TimerStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dungeon_SC_TimerStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dungeon_SC_TimerStart_descriptor_;
}

const Dungeon_SC_TimerStart& Dungeon_SC_TimerStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dungeon_2eproto();
  return *default_instance_;
}

Dungeon_SC_TimerStart* Dungeon_SC_TimerStart::default_instance_ = NULL;

Dungeon_SC_TimerStart* Dungeon_SC_TimerStart::New() const {
  return new Dungeon_SC_TimerStart;
}

void Dungeon_SC_TimerStart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dungeon_scene_id_ = 0u;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Dungeon_SC_TimerStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dungeon_scene_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dungeon_scene_id_)));
          set_has_dungeon_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // optional string ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // optional int32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Dungeon_SC_TimerStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 dungeon_scene_id = 1;
  if (has_dungeon_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dungeon_scene_id(), output);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip(), output);
  }

  // optional int32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Dungeon_SC_TimerStart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 dungeon_scene_id = 1;
  if (has_dungeon_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dungeon_scene_id(), target);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // optional int32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Dungeon_SC_TimerStart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 dungeon_scene_id = 1;
    if (has_dungeon_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dungeon_scene_id());
    }

    // optional string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dungeon_SC_TimerStart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Dungeon_SC_TimerStart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Dungeon_SC_TimerStart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Dungeon_SC_TimerStart::MergeFrom(const Dungeon_SC_TimerStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dungeon_scene_id()) {
      set_dungeon_scene_id(from.dungeon_scene_id());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Dungeon_SC_TimerStart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dungeon_SC_TimerStart::CopyFrom(const Dungeon_SC_TimerStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dungeon_SC_TimerStart::IsInitialized() const {

  return true;
}

void Dungeon_SC_TimerStart::Swap(Dungeon_SC_TimerStart* other) {
  if (other != this) {
    std::swap(dungeon_scene_id_, other->dungeon_scene_id_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Dungeon_SC_TimerStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dungeon_SC_TimerStart_descriptor_;
  metadata.reflection = Dungeon_SC_TimerStart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Dungeon_CS_TakeGradeSReward::kIndexFieldNumber;
#endif  // !_MSC_VER

Dungeon_CS_TakeGradeSReward::Dungeon_CS_TakeGradeSReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Dungeon_CS_TakeGradeSReward::InitAsDefaultInstance() {
}

Dungeon_CS_TakeGradeSReward::Dungeon_CS_TakeGradeSReward(const Dungeon_CS_TakeGradeSReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Dungeon_CS_TakeGradeSReward::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dungeon_CS_TakeGradeSReward::~Dungeon_CS_TakeGradeSReward() {
  SharedDtor();
}

void Dungeon_CS_TakeGradeSReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Dungeon_CS_TakeGradeSReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dungeon_CS_TakeGradeSReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dungeon_CS_TakeGradeSReward_descriptor_;
}

const Dungeon_CS_TakeGradeSReward& Dungeon_CS_TakeGradeSReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dungeon_2eproto();
  return *default_instance_;
}

Dungeon_CS_TakeGradeSReward* Dungeon_CS_TakeGradeSReward::default_instance_ = NULL;

Dungeon_CS_TakeGradeSReward* Dungeon_CS_TakeGradeSReward::New() const {
  return new Dungeon_CS_TakeGradeSReward;
}

void Dungeon_CS_TakeGradeSReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Dungeon_CS_TakeGradeSReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Dungeon_CS_TakeGradeSReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Dungeon_CS_TakeGradeSReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Dungeon_CS_TakeGradeSReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dungeon_CS_TakeGradeSReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Dungeon_CS_TakeGradeSReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Dungeon_CS_TakeGradeSReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Dungeon_CS_TakeGradeSReward::MergeFrom(const Dungeon_CS_TakeGradeSReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Dungeon_CS_TakeGradeSReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dungeon_CS_TakeGradeSReward::CopyFrom(const Dungeon_CS_TakeGradeSReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dungeon_CS_TakeGradeSReward::IsInitialized() const {

  return true;
}

void Dungeon_CS_TakeGradeSReward::Swap(Dungeon_CS_TakeGradeSReward* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Dungeon_CS_TakeGradeSReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dungeon_CS_TakeGradeSReward_descriptor_;
  metadata.reflection = Dungeon_CS_TakeGradeSReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Dungeon_SC_TakeGradeSReward::kIndexFieldNumber;
const int Dungeon_SC_TakeGradeSReward::kResultFieldNumber;
#endif  // !_MSC_VER

Dungeon_SC_TakeGradeSReward::Dungeon_SC_TakeGradeSReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Dungeon_SC_TakeGradeSReward::InitAsDefaultInstance() {
}

Dungeon_SC_TakeGradeSReward::Dungeon_SC_TakeGradeSReward(const Dungeon_SC_TakeGradeSReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Dungeon_SC_TakeGradeSReward::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dungeon_SC_TakeGradeSReward::~Dungeon_SC_TakeGradeSReward() {
  SharedDtor();
}

void Dungeon_SC_TakeGradeSReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Dungeon_SC_TakeGradeSReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dungeon_SC_TakeGradeSReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dungeon_SC_TakeGradeSReward_descriptor_;
}

const Dungeon_SC_TakeGradeSReward& Dungeon_SC_TakeGradeSReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dungeon_2eproto();
  return *default_instance_;
}

Dungeon_SC_TakeGradeSReward* Dungeon_SC_TakeGradeSReward::default_instance_ = NULL;

Dungeon_SC_TakeGradeSReward* Dungeon_SC_TakeGradeSReward::New() const {
  return new Dungeon_SC_TakeGradeSReward;
}

void Dungeon_SC_TakeGradeSReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Dungeon_SC_TakeGradeSReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional uint32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Dungeon_SC_TakeGradeSReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // optional uint32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Dungeon_SC_TakeGradeSReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // optional uint32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Dungeon_SC_TakeGradeSReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional uint32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dungeon_SC_TakeGradeSReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Dungeon_SC_TakeGradeSReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Dungeon_SC_TakeGradeSReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Dungeon_SC_TakeGradeSReward::MergeFrom(const Dungeon_SC_TakeGradeSReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Dungeon_SC_TakeGradeSReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dungeon_SC_TakeGradeSReward::CopyFrom(const Dungeon_SC_TakeGradeSReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dungeon_SC_TakeGradeSReward::IsInitialized() const {

  return true;
}

void Dungeon_SC_TakeGradeSReward::Swap(Dungeon_SC_TakeGradeSReward* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Dungeon_SC_TakeGradeSReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dungeon_SC_TakeGradeSReward_descriptor_;
  metadata.reflection = Dungeon_SC_TakeGradeSReward_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

// @@protoc_insertion_point(global_scope)
