// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: boat.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "boat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

namespace {

const ::google::protobuf::Descriptor* SkinInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkinInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BoatAllData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BoatAllData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Boat_CS_GetBoatInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Boat_CS_GetBoatInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Boat_SC_GetBoatInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Boat_SC_GetBoatInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Boat_CS_UpBoat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Boat_CS_UpBoat_reflection_ = NULL;
const ::google::protobuf::Descriptor* Boat_SC_UpBoatResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Boat_SC_UpBoatResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* Boat_CS_SkinChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Boat_CS_SkinChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* Boat_SC_SkinChangeResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Boat_SC_SkinChangeResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* Boat_CS_UpBoatPart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Boat_CS_UpBoatPart_reflection_ = NULL;
const ::google::protobuf::Descriptor* Boat_SC_UpBoatPartResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Boat_SC_UpBoatPartResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* Boat_CS_ActiveFashion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Boat_CS_ActiveFashion_reflection_ = NULL;
const ::google::protobuf::Descriptor* Boat_SC_ActiveFashionResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Boat_SC_ActiveFashionResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* Boat_SC_UpdateBoatInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Boat_SC_UpdateBoatInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_boat_2eproto() {
  protobuf_AddDesc_boat_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "boat.proto");
  GOOGLE_CHECK(file != NULL);
  SkinInfo_descriptor_ = file->message_type(0);
  static const int SkinInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkinInfo, skinid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkinInfo, validitytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkinInfo, attid_),
  };
  SkinInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkinInfo_descriptor_,
      SkinInfo::default_instance_,
      SkinInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkinInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkinInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkinInfo));
  BoatAllData_descriptor_ = file->message_type(1);
  static const int BoatAllData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoatAllData, boatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoatAllData, lucky_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoatAllData, uptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoatAllData, skinonid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoatAllData, skinlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoatAllData, partid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoatAllData, landskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoatAllData, seaskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoatAllData, isactive_),
  };
  BoatAllData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BoatAllData_descriptor_,
      BoatAllData::default_instance_,
      BoatAllData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoatAllData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoatAllData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BoatAllData));
  Boat_CS_GetBoatInfo_descriptor_ = file->message_type(2);
  static const int Boat_CS_GetBoatInfo_offsets_[1] = {
  };
  Boat_CS_GetBoatInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Boat_CS_GetBoatInfo_descriptor_,
      Boat_CS_GetBoatInfo::default_instance_,
      Boat_CS_GetBoatInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Boat_CS_GetBoatInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Boat_CS_GetBoatInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Boat_CS_GetBoatInfo));
  Boat_SC_GetBoatInfo_descriptor_ = file->message_type(3);
  static const int Boat_SC_GetBoatInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Boat_SC_GetBoatInfo, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Boat_SC_GetBoatInfo, data_),
  };
  Boat_SC_GetBoatInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Boat_SC_GetBoatInfo_descriptor_,
      Boat_SC_GetBoatInfo::default_instance_,
      Boat_SC_GetBoatInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Boat_SC_GetBoatInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Boat_SC_GetBoatInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Boat_SC_GetBoatInfo));
  Boat_CS_UpBoat_descriptor_ = file->message_type(4);
  static const int Boat_CS_UpBoat_offsets_[1] = {
  };
  Boat_CS_UpBoat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Boat_CS_UpBoat_descriptor_,
      Boat_CS_UpBoat::default_instance_,
      Boat_CS_UpBoat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Boat_CS_UpBoat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Boat_CS_UpBoat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Boat_CS_UpBoat));
  Boat_SC_UpBoatResult_descriptor_ = file->message_type(5);
  static const int Boat_SC_UpBoatResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Boat_SC_UpBoatResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Boat_SC_UpBoatResult, lucky_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Boat_SC_UpBoatResult, boatid_),
  };
  Boat_SC_UpBoatResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Boat_SC_UpBoatResult_descriptor_,
      Boat_SC_UpBoatResult::default_instance_,
      Boat_SC_UpBoatResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Boat_SC_UpBoatResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Boat_SC_UpBoatResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Boat_SC_UpBoatResult));
  Boat_CS_SkinChange_descriptor_ = file->message_type(6);
  static const int Boat_CS_SkinChange_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Boat_CS_SkinChange, skinid_),
  };
  Boat_CS_SkinChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Boat_CS_SkinChange_descriptor_,
      Boat_CS_SkinChange::default_instance_,
      Boat_CS_SkinChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Boat_CS_SkinChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Boat_CS_SkinChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Boat_CS_SkinChange));
  Boat_SC_SkinChangeResult_descriptor_ = file->message_type(7);
  static const int Boat_SC_SkinChangeResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Boat_SC_SkinChangeResult, result_),
  };
  Boat_SC_SkinChangeResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Boat_SC_SkinChangeResult_descriptor_,
      Boat_SC_SkinChangeResult::default_instance_,
      Boat_SC_SkinChangeResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Boat_SC_SkinChangeResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Boat_SC_SkinChangeResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Boat_SC_SkinChangeResult));
  Boat_CS_UpBoatPart_descriptor_ = file->message_type(8);
  static const int Boat_CS_UpBoatPart_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Boat_CS_UpBoatPart, partid_),
  };
  Boat_CS_UpBoatPart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Boat_CS_UpBoatPart_descriptor_,
      Boat_CS_UpBoatPart::default_instance_,
      Boat_CS_UpBoatPart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Boat_CS_UpBoatPart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Boat_CS_UpBoatPart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Boat_CS_UpBoatPart));
  Boat_SC_UpBoatPartResult_descriptor_ = file->message_type(9);
  static const int Boat_SC_UpBoatPartResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Boat_SC_UpBoatPartResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Boat_SC_UpBoatPartResult, partid_),
  };
  Boat_SC_UpBoatPartResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Boat_SC_UpBoatPartResult_descriptor_,
      Boat_SC_UpBoatPartResult::default_instance_,
      Boat_SC_UpBoatPartResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Boat_SC_UpBoatPartResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Boat_SC_UpBoatPartResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Boat_SC_UpBoatPartResult));
  Boat_CS_ActiveFashion_descriptor_ = file->message_type(10);
  static const int Boat_CS_ActiveFashion_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Boat_CS_ActiveFashion, skinid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Boat_CS_ActiveFashion, timetype_),
  };
  Boat_CS_ActiveFashion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Boat_CS_ActiveFashion_descriptor_,
      Boat_CS_ActiveFashion::default_instance_,
      Boat_CS_ActiveFashion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Boat_CS_ActiveFashion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Boat_CS_ActiveFashion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Boat_CS_ActiveFashion));
  Boat_SC_ActiveFashionResult_descriptor_ = file->message_type(11);
  static const int Boat_SC_ActiveFashionResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Boat_SC_ActiveFashionResult, result_),
  };
  Boat_SC_ActiveFashionResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Boat_SC_ActiveFashionResult_descriptor_,
      Boat_SC_ActiveFashionResult::default_instance_,
      Boat_SC_ActiveFashionResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Boat_SC_ActiveFashionResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Boat_SC_ActiveFashionResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Boat_SC_ActiveFashionResult));
  Boat_SC_UpdateBoatInfo_descriptor_ = file->message_type(12);
  static const int Boat_SC_UpdateBoatInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Boat_SC_UpdateBoatInfo, data_),
  };
  Boat_SC_UpdateBoatInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Boat_SC_UpdateBoatInfo_descriptor_,
      Boat_SC_UpdateBoatInfo::default_instance_,
      Boat_SC_UpdateBoatInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Boat_SC_UpdateBoatInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Boat_SC_UpdateBoatInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Boat_SC_UpdateBoatInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_boat_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkinInfo_descriptor_, &SkinInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BoatAllData_descriptor_, &BoatAllData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Boat_CS_GetBoatInfo_descriptor_, &Boat_CS_GetBoatInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Boat_SC_GetBoatInfo_descriptor_, &Boat_SC_GetBoatInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Boat_CS_UpBoat_descriptor_, &Boat_CS_UpBoat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Boat_SC_UpBoatResult_descriptor_, &Boat_SC_UpBoatResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Boat_CS_SkinChange_descriptor_, &Boat_CS_SkinChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Boat_SC_SkinChangeResult_descriptor_, &Boat_SC_SkinChangeResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Boat_CS_UpBoatPart_descriptor_, &Boat_CS_UpBoatPart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Boat_SC_UpBoatPartResult_descriptor_, &Boat_SC_UpBoatPartResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Boat_CS_ActiveFashion_descriptor_, &Boat_CS_ActiveFashion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Boat_SC_ActiveFashionResult_descriptor_, &Boat_SC_ActiveFashionResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Boat_SC_UpdateBoatInfo_descriptor_, &Boat_SC_UpdateBoatInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_boat_2eproto() {
  delete SkinInfo::default_instance_;
  delete SkinInfo_reflection_;
  delete BoatAllData::default_instance_;
  delete BoatAllData_reflection_;
  delete Boat_CS_GetBoatInfo::default_instance_;
  delete Boat_CS_GetBoatInfo_reflection_;
  delete Boat_SC_GetBoatInfo::default_instance_;
  delete Boat_SC_GetBoatInfo_reflection_;
  delete Boat_CS_UpBoat::default_instance_;
  delete Boat_CS_UpBoat_reflection_;
  delete Boat_SC_UpBoatResult::default_instance_;
  delete Boat_SC_UpBoatResult_reflection_;
  delete Boat_CS_SkinChange::default_instance_;
  delete Boat_CS_SkinChange_reflection_;
  delete Boat_SC_SkinChangeResult::default_instance_;
  delete Boat_SC_SkinChangeResult_reflection_;
  delete Boat_CS_UpBoatPart::default_instance_;
  delete Boat_CS_UpBoatPart_reflection_;
  delete Boat_SC_UpBoatPartResult::default_instance_;
  delete Boat_SC_UpBoatPartResult_reflection_;
  delete Boat_CS_ActiveFashion::default_instance_;
  delete Boat_CS_ActiveFashion_reflection_;
  delete Boat_SC_ActiveFashionResult::default_instance_;
  delete Boat_SC_ActiveFashionResult_reflection_;
  delete Boat_SC_UpdateBoatInfo::default_instance_;
  delete Boat_SC_UpdateBoatInfo_reflection_;
}

void protobuf_AddDesc_boat_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::message::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nboat.proto\022\rproto.message\032\014common.prot"
    "o\"\?\n\010SkinInfo\022\016\n\006skinid\030\001 \002(\005\022\024\n\014validit"
    "ytime\030\002 \002(\003\022\r\n\005attid\030\003 \001(\r\"\300\001\n\013BoatAllDa"
    "ta\022\016\n\006boatid\030\001 \001(\005\022\r\n\005lucky\030\002 \001(\005\022\016\n\006upt"
    "ime\030\003 \001(\004\022\020\n\010skinonid\030\004 \001(\005\022)\n\010skinlist\030"
    "\005 \003(\0132\027.proto.message.SkinInfo\022\016\n\006partid"
    "\030\006 \003(\005\022\021\n\tlandskill\030\007 \003(\005\022\020\n\010seaskill\030\010 "
    "\003(\005\022\020\n\010isActive\030\t \001(\010\"\025\n\023Boat_CS_GetBoat"
    "Info\"O\n\023Boat_SC_GetBoatInfo\022\016\n\006result\030\001 "
    "\001(\005\022(\n\004data\030\002 \001(\0132\032.proto.message.BoatAl"
    "lData\"\020\n\016Boat_CS_UpBoat\"E\n\024Boat_SC_UpBoa"
    "tResult\022\016\n\006result\030\001 \001(\005\022\r\n\005lucky\030\002 \001(\005\022\016"
    "\n\006boatid\030\003 \001(\005\"$\n\022Boat_CS_SkinChange\022\016\n\006"
    "skinid\030\001 \001(\005\"*\n\030Boat_SC_SkinChangeResult"
    "\022\016\n\006result\030\001 \001(\005\"$\n\022Boat_CS_UpBoatPart\022\016"
    "\n\006partid\030\001 \001(\005\":\n\030Boat_SC_UpBoatPartResu"
    "lt\022\016\n\006result\030\001 \001(\005\022\016\n\006partid\030\002 \001(\005\"9\n\025Bo"
    "at_CS_ActiveFashion\022\016\n\006skinid\030\001 \001(\005\022\020\n\010t"
    "imetype\030\002 \001(\005\"-\n\033Boat_SC_ActiveFashionRe"
    "sult\022\016\n\006result\030\001 \001(\005\"B\n\026Boat_SC_UpdateBo"
    "atInfo\022(\n\004data\030\001 \001(\0132\032.proto.message.Boa"
    "tAllData", 848);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "boat.proto", &protobuf_RegisterTypes);
  SkinInfo::default_instance_ = new SkinInfo();
  BoatAllData::default_instance_ = new BoatAllData();
  Boat_CS_GetBoatInfo::default_instance_ = new Boat_CS_GetBoatInfo();
  Boat_SC_GetBoatInfo::default_instance_ = new Boat_SC_GetBoatInfo();
  Boat_CS_UpBoat::default_instance_ = new Boat_CS_UpBoat();
  Boat_SC_UpBoatResult::default_instance_ = new Boat_SC_UpBoatResult();
  Boat_CS_SkinChange::default_instance_ = new Boat_CS_SkinChange();
  Boat_SC_SkinChangeResult::default_instance_ = new Boat_SC_SkinChangeResult();
  Boat_CS_UpBoatPart::default_instance_ = new Boat_CS_UpBoatPart();
  Boat_SC_UpBoatPartResult::default_instance_ = new Boat_SC_UpBoatPartResult();
  Boat_CS_ActiveFashion::default_instance_ = new Boat_CS_ActiveFashion();
  Boat_SC_ActiveFashionResult::default_instance_ = new Boat_SC_ActiveFashionResult();
  Boat_SC_UpdateBoatInfo::default_instance_ = new Boat_SC_UpdateBoatInfo();
  SkinInfo::default_instance_->InitAsDefaultInstance();
  BoatAllData::default_instance_->InitAsDefaultInstance();
  Boat_CS_GetBoatInfo::default_instance_->InitAsDefaultInstance();
  Boat_SC_GetBoatInfo::default_instance_->InitAsDefaultInstance();
  Boat_CS_UpBoat::default_instance_->InitAsDefaultInstance();
  Boat_SC_UpBoatResult::default_instance_->InitAsDefaultInstance();
  Boat_CS_SkinChange::default_instance_->InitAsDefaultInstance();
  Boat_SC_SkinChangeResult::default_instance_->InitAsDefaultInstance();
  Boat_CS_UpBoatPart::default_instance_->InitAsDefaultInstance();
  Boat_SC_UpBoatPartResult::default_instance_->InitAsDefaultInstance();
  Boat_CS_ActiveFashion::default_instance_->InitAsDefaultInstance();
  Boat_SC_ActiveFashionResult::default_instance_->InitAsDefaultInstance();
  Boat_SC_UpdateBoatInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_boat_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_boat_2eproto {
  StaticDescriptorInitializer_boat_2eproto() {
    protobuf_AddDesc_boat_2eproto();
  }
} static_descriptor_initializer_boat_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SkinInfo::kSkinidFieldNumber;
const int SkinInfo::kValiditytimeFieldNumber;
const int SkinInfo::kAttidFieldNumber;
#endif  // !_MSC_VER

SkinInfo::SkinInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkinInfo::InitAsDefaultInstance() {
}

SkinInfo::SkinInfo(const SkinInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkinInfo::SharedCtor() {
  _cached_size_ = 0;
  skinid_ = 0;
  validitytime_ = GOOGLE_LONGLONG(0);
  attid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkinInfo::~SkinInfo() {
  SharedDtor();
}

void SkinInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkinInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkinInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkinInfo_descriptor_;
}

const SkinInfo& SkinInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_boat_2eproto();
  return *default_instance_;
}

SkinInfo* SkinInfo::default_instance_ = NULL;

SkinInfo* SkinInfo::New() const {
  return new SkinInfo;
}

void SkinInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skinid_ = 0;
    validitytime_ = GOOGLE_LONGLONG(0);
    attid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkinInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 skinid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skinid_)));
          set_has_skinid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_validitytime;
        break;
      }

      // required int64 validitytime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_validitytime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &validitytime_)));
          set_has_validitytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_attid;
        break;
      }

      // optional uint32 attid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attid_)));
          set_has_attid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkinInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 skinid = 1;
  if (has_skinid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skinid(), output);
  }

  // required int64 validitytime = 2;
  if (has_validitytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->validitytime(), output);
  }

  // optional uint32 attid = 3;
  if (has_attid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->attid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkinInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 skinid = 1;
  if (has_skinid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skinid(), target);
  }

  // required int64 validitytime = 2;
  if (has_validitytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->validitytime(), target);
  }

  // optional uint32 attid = 3;
  if (has_attid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->attid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkinInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 skinid = 1;
    if (has_skinid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skinid());
    }

    // required int64 validitytime = 2;
    if (has_validitytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->validitytime());
    }

    // optional uint32 attid = 3;
    if (has_attid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkinInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkinInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkinInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkinInfo::MergeFrom(const SkinInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skinid()) {
      set_skinid(from.skinid());
    }
    if (from.has_validitytime()) {
      set_validitytime(from.validitytime());
    }
    if (from.has_attid()) {
      set_attid(from.attid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkinInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkinInfo::CopyFrom(const SkinInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkinInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SkinInfo::Swap(SkinInfo* other) {
  if (other != this) {
    std::swap(skinid_, other->skinid_);
    std::swap(validitytime_, other->validitytime_);
    std::swap(attid_, other->attid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkinInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkinInfo_descriptor_;
  metadata.reflection = SkinInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BoatAllData::kBoatidFieldNumber;
const int BoatAllData::kLuckyFieldNumber;
const int BoatAllData::kUptimeFieldNumber;
const int BoatAllData::kSkinonidFieldNumber;
const int BoatAllData::kSkinlistFieldNumber;
const int BoatAllData::kPartidFieldNumber;
const int BoatAllData::kLandskillFieldNumber;
const int BoatAllData::kSeaskillFieldNumber;
const int BoatAllData::kIsActiveFieldNumber;
#endif  // !_MSC_VER

BoatAllData::BoatAllData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BoatAllData::InitAsDefaultInstance() {
}

BoatAllData::BoatAllData(const BoatAllData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BoatAllData::SharedCtor() {
  _cached_size_ = 0;
  boatid_ = 0;
  lucky_ = 0;
  uptime_ = GOOGLE_ULONGLONG(0);
  skinonid_ = 0;
  isactive_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BoatAllData::~BoatAllData() {
  SharedDtor();
}

void BoatAllData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BoatAllData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoatAllData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BoatAllData_descriptor_;
}

const BoatAllData& BoatAllData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_boat_2eproto();
  return *default_instance_;
}

BoatAllData* BoatAllData::default_instance_ = NULL;

BoatAllData* BoatAllData::New() const {
  return new BoatAllData;
}

void BoatAllData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    boatid_ = 0;
    lucky_ = 0;
    uptime_ = GOOGLE_ULONGLONG(0);
    skinonid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    isactive_ = false;
  }
  skinlist_.Clear();
  partid_.Clear();
  landskill_.Clear();
  seaskill_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BoatAllData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 boatid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boatid_)));
          set_has_boatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lucky;
        break;
      }

      // optional int32 lucky = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lucky:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lucky_)));
          set_has_lucky();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uptime;
        break;
      }

      // optional uint64 uptime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uptime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uptime_)));
          set_has_uptime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_skinonid;
        break;
      }

      // optional int32 skinonid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skinonid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skinonid_)));
          set_has_skinonid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_skinlist;
        break;
      }

      // repeated .proto.message.SkinInfo skinlist = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skinlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skinlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_skinlist;
        if (input->ExpectTag(48)) goto parse_partid;
        break;
      }

      // repeated int32 partid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_partid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_partid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_partid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_partid;
        if (input->ExpectTag(56)) goto parse_landskill;
        break;
      }

      // repeated int32 landskill = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_landskill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_landskill())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_landskill())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_landskill;
        if (input->ExpectTag(64)) goto parse_seaskill;
        break;
      }

      // repeated int32 seaskill = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seaskill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_seaskill())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_seaskill())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_seaskill;
        if (input->ExpectTag(72)) goto parse_isActive;
        break;
      }

      // optional bool isActive = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isActive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isactive_)));
          set_has_isactive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BoatAllData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 boatid = 1;
  if (has_boatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->boatid(), output);
  }

  // optional int32 lucky = 2;
  if (has_lucky()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lucky(), output);
  }

  // optional uint64 uptime = 3;
  if (has_uptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->uptime(), output);
  }

  // optional int32 skinonid = 4;
  if (has_skinonid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->skinonid(), output);
  }

  // repeated .proto.message.SkinInfo skinlist = 5;
  for (int i = 0; i < this->skinlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->skinlist(i), output);
  }

  // repeated int32 partid = 6;
  for (int i = 0; i < this->partid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->partid(i), output);
  }

  // repeated int32 landskill = 7;
  for (int i = 0; i < this->landskill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->landskill(i), output);
  }

  // repeated int32 seaskill = 8;
  for (int i = 0; i < this->seaskill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->seaskill(i), output);
  }

  // optional bool isActive = 9;
  if (has_isactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->isactive(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BoatAllData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 boatid = 1;
  if (has_boatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->boatid(), target);
  }

  // optional int32 lucky = 2;
  if (has_lucky()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lucky(), target);
  }

  // optional uint64 uptime = 3;
  if (has_uptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->uptime(), target);
  }

  // optional int32 skinonid = 4;
  if (has_skinonid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->skinonid(), target);
  }

  // repeated .proto.message.SkinInfo skinlist = 5;
  for (int i = 0; i < this->skinlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->skinlist(i), target);
  }

  // repeated int32 partid = 6;
  for (int i = 0; i < this->partid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->partid(i), target);
  }

  // repeated int32 landskill = 7;
  for (int i = 0; i < this->landskill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->landskill(i), target);
  }

  // repeated int32 seaskill = 8;
  for (int i = 0; i < this->seaskill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->seaskill(i), target);
  }

  // optional bool isActive = 9;
  if (has_isactive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->isactive(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BoatAllData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 boatid = 1;
    if (has_boatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boatid());
    }

    // optional int32 lucky = 2;
    if (has_lucky()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lucky());
    }

    // optional uint64 uptime = 3;
    if (has_uptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uptime());
    }

    // optional int32 skinonid = 4;
    if (has_skinonid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skinonid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool isActive = 9;
    if (has_isactive()) {
      total_size += 1 + 1;
    }

  }
  // repeated .proto.message.SkinInfo skinlist = 5;
  total_size += 1 * this->skinlist_size();
  for (int i = 0; i < this->skinlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skinlist(i));
  }

  // repeated int32 partid = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->partid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->partid(i));
    }
    total_size += 1 * this->partid_size() + data_size;
  }

  // repeated int32 landskill = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->landskill_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->landskill(i));
    }
    total_size += 1 * this->landskill_size() + data_size;
  }

  // repeated int32 seaskill = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->seaskill_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->seaskill(i));
    }
    total_size += 1 * this->seaskill_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoatAllData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BoatAllData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BoatAllData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BoatAllData::MergeFrom(const BoatAllData& from) {
  GOOGLE_CHECK_NE(&from, this);
  skinlist_.MergeFrom(from.skinlist_);
  partid_.MergeFrom(from.partid_);
  landskill_.MergeFrom(from.landskill_);
  seaskill_.MergeFrom(from.seaskill_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_boatid()) {
      set_boatid(from.boatid());
    }
    if (from.has_lucky()) {
      set_lucky(from.lucky());
    }
    if (from.has_uptime()) {
      set_uptime(from.uptime());
    }
    if (from.has_skinonid()) {
      set_skinonid(from.skinonid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_isactive()) {
      set_isactive(from.isactive());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BoatAllData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoatAllData::CopyFrom(const BoatAllData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoatAllData::IsInitialized() const {

  for (int i = 0; i < skinlist_size(); i++) {
    if (!this->skinlist(i).IsInitialized()) return false;
  }
  return true;
}

void BoatAllData::Swap(BoatAllData* other) {
  if (other != this) {
    std::swap(boatid_, other->boatid_);
    std::swap(lucky_, other->lucky_);
    std::swap(uptime_, other->uptime_);
    std::swap(skinonid_, other->skinonid_);
    skinlist_.Swap(&other->skinlist_);
    partid_.Swap(&other->partid_);
    landskill_.Swap(&other->landskill_);
    seaskill_.Swap(&other->seaskill_);
    std::swap(isactive_, other->isactive_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BoatAllData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BoatAllData_descriptor_;
  metadata.reflection = BoatAllData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Boat_CS_GetBoatInfo::Boat_CS_GetBoatInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Boat_CS_GetBoatInfo::InitAsDefaultInstance() {
}

Boat_CS_GetBoatInfo::Boat_CS_GetBoatInfo(const Boat_CS_GetBoatInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Boat_CS_GetBoatInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Boat_CS_GetBoatInfo::~Boat_CS_GetBoatInfo() {
  SharedDtor();
}

void Boat_CS_GetBoatInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Boat_CS_GetBoatInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Boat_CS_GetBoatInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Boat_CS_GetBoatInfo_descriptor_;
}

const Boat_CS_GetBoatInfo& Boat_CS_GetBoatInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_boat_2eproto();
  return *default_instance_;
}

Boat_CS_GetBoatInfo* Boat_CS_GetBoatInfo::default_instance_ = NULL;

Boat_CS_GetBoatInfo* Boat_CS_GetBoatInfo::New() const {
  return new Boat_CS_GetBoatInfo;
}

void Boat_CS_GetBoatInfo::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Boat_CS_GetBoatInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Boat_CS_GetBoatInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Boat_CS_GetBoatInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Boat_CS_GetBoatInfo::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Boat_CS_GetBoatInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Boat_CS_GetBoatInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Boat_CS_GetBoatInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Boat_CS_GetBoatInfo::MergeFrom(const Boat_CS_GetBoatInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Boat_CS_GetBoatInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Boat_CS_GetBoatInfo::CopyFrom(const Boat_CS_GetBoatInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Boat_CS_GetBoatInfo::IsInitialized() const {

  return true;
}

void Boat_CS_GetBoatInfo::Swap(Boat_CS_GetBoatInfo* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Boat_CS_GetBoatInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Boat_CS_GetBoatInfo_descriptor_;
  metadata.reflection = Boat_CS_GetBoatInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Boat_SC_GetBoatInfo::kResultFieldNumber;
const int Boat_SC_GetBoatInfo::kDataFieldNumber;
#endif  // !_MSC_VER

Boat_SC_GetBoatInfo::Boat_SC_GetBoatInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Boat_SC_GetBoatInfo::InitAsDefaultInstance() {
  data_ = const_cast< ::proto::message::BoatAllData*>(&::proto::message::BoatAllData::default_instance());
}

Boat_SC_GetBoatInfo::Boat_SC_GetBoatInfo(const Boat_SC_GetBoatInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Boat_SC_GetBoatInfo::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Boat_SC_GetBoatInfo::~Boat_SC_GetBoatInfo() {
  SharedDtor();
}

void Boat_SC_GetBoatInfo::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void Boat_SC_GetBoatInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Boat_SC_GetBoatInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Boat_SC_GetBoatInfo_descriptor_;
}

const Boat_SC_GetBoatInfo& Boat_SC_GetBoatInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_boat_2eproto();
  return *default_instance_;
}

Boat_SC_GetBoatInfo* Boat_SC_GetBoatInfo::default_instance_ = NULL;

Boat_SC_GetBoatInfo* Boat_SC_GetBoatInfo::New() const {
  return new Boat_SC_GetBoatInfo;
}

void Boat_SC_GetBoatInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::proto::message::BoatAllData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Boat_SC_GetBoatInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .proto.message.BoatAllData data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Boat_SC_GetBoatInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .proto.message.BoatAllData data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Boat_SC_GetBoatInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .proto.message.BoatAllData data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Boat_SC_GetBoatInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .proto.message.BoatAllData data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Boat_SC_GetBoatInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Boat_SC_GetBoatInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Boat_SC_GetBoatInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Boat_SC_GetBoatInfo::MergeFrom(const Boat_SC_GetBoatInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_data()) {
      mutable_data()->::proto::message::BoatAllData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Boat_SC_GetBoatInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Boat_SC_GetBoatInfo::CopyFrom(const Boat_SC_GetBoatInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Boat_SC_GetBoatInfo::IsInitialized() const {

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void Boat_SC_GetBoatInfo::Swap(Boat_SC_GetBoatInfo* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Boat_SC_GetBoatInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Boat_SC_GetBoatInfo_descriptor_;
  metadata.reflection = Boat_SC_GetBoatInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Boat_CS_UpBoat::Boat_CS_UpBoat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Boat_CS_UpBoat::InitAsDefaultInstance() {
}

Boat_CS_UpBoat::Boat_CS_UpBoat(const Boat_CS_UpBoat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Boat_CS_UpBoat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Boat_CS_UpBoat::~Boat_CS_UpBoat() {
  SharedDtor();
}

void Boat_CS_UpBoat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Boat_CS_UpBoat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Boat_CS_UpBoat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Boat_CS_UpBoat_descriptor_;
}

const Boat_CS_UpBoat& Boat_CS_UpBoat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_boat_2eproto();
  return *default_instance_;
}

Boat_CS_UpBoat* Boat_CS_UpBoat::default_instance_ = NULL;

Boat_CS_UpBoat* Boat_CS_UpBoat::New() const {
  return new Boat_CS_UpBoat;
}

void Boat_CS_UpBoat::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Boat_CS_UpBoat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Boat_CS_UpBoat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Boat_CS_UpBoat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Boat_CS_UpBoat::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Boat_CS_UpBoat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Boat_CS_UpBoat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Boat_CS_UpBoat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Boat_CS_UpBoat::MergeFrom(const Boat_CS_UpBoat& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Boat_CS_UpBoat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Boat_CS_UpBoat::CopyFrom(const Boat_CS_UpBoat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Boat_CS_UpBoat::IsInitialized() const {

  return true;
}

void Boat_CS_UpBoat::Swap(Boat_CS_UpBoat* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Boat_CS_UpBoat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Boat_CS_UpBoat_descriptor_;
  metadata.reflection = Boat_CS_UpBoat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Boat_SC_UpBoatResult::kResultFieldNumber;
const int Boat_SC_UpBoatResult::kLuckyFieldNumber;
const int Boat_SC_UpBoatResult::kBoatidFieldNumber;
#endif  // !_MSC_VER

Boat_SC_UpBoatResult::Boat_SC_UpBoatResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Boat_SC_UpBoatResult::InitAsDefaultInstance() {
}

Boat_SC_UpBoatResult::Boat_SC_UpBoatResult(const Boat_SC_UpBoatResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Boat_SC_UpBoatResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  lucky_ = 0;
  boatid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Boat_SC_UpBoatResult::~Boat_SC_UpBoatResult() {
  SharedDtor();
}

void Boat_SC_UpBoatResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Boat_SC_UpBoatResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Boat_SC_UpBoatResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Boat_SC_UpBoatResult_descriptor_;
}

const Boat_SC_UpBoatResult& Boat_SC_UpBoatResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_boat_2eproto();
  return *default_instance_;
}

Boat_SC_UpBoatResult* Boat_SC_UpBoatResult::default_instance_ = NULL;

Boat_SC_UpBoatResult* Boat_SC_UpBoatResult::New() const {
  return new Boat_SC_UpBoatResult;
}

void Boat_SC_UpBoatResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    lucky_ = 0;
    boatid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Boat_SC_UpBoatResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lucky;
        break;
      }

      // optional int32 lucky = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lucky:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lucky_)));
          set_has_lucky();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_boatid;
        break;
      }

      // optional int32 boatid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boatid_)));
          set_has_boatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Boat_SC_UpBoatResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 lucky = 2;
  if (has_lucky()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lucky(), output);
  }

  // optional int32 boatid = 3;
  if (has_boatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->boatid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Boat_SC_UpBoatResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 lucky = 2;
  if (has_lucky()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lucky(), target);
  }

  // optional int32 boatid = 3;
  if (has_boatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->boatid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Boat_SC_UpBoatResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 lucky = 2;
    if (has_lucky()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lucky());
    }

    // optional int32 boatid = 3;
    if (has_boatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boatid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Boat_SC_UpBoatResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Boat_SC_UpBoatResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Boat_SC_UpBoatResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Boat_SC_UpBoatResult::MergeFrom(const Boat_SC_UpBoatResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_lucky()) {
      set_lucky(from.lucky());
    }
    if (from.has_boatid()) {
      set_boatid(from.boatid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Boat_SC_UpBoatResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Boat_SC_UpBoatResult::CopyFrom(const Boat_SC_UpBoatResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Boat_SC_UpBoatResult::IsInitialized() const {

  return true;
}

void Boat_SC_UpBoatResult::Swap(Boat_SC_UpBoatResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(lucky_, other->lucky_);
    std::swap(boatid_, other->boatid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Boat_SC_UpBoatResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Boat_SC_UpBoatResult_descriptor_;
  metadata.reflection = Boat_SC_UpBoatResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Boat_CS_SkinChange::kSkinidFieldNumber;
#endif  // !_MSC_VER

Boat_CS_SkinChange::Boat_CS_SkinChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Boat_CS_SkinChange::InitAsDefaultInstance() {
}

Boat_CS_SkinChange::Boat_CS_SkinChange(const Boat_CS_SkinChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Boat_CS_SkinChange::SharedCtor() {
  _cached_size_ = 0;
  skinid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Boat_CS_SkinChange::~Boat_CS_SkinChange() {
  SharedDtor();
}

void Boat_CS_SkinChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Boat_CS_SkinChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Boat_CS_SkinChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Boat_CS_SkinChange_descriptor_;
}

const Boat_CS_SkinChange& Boat_CS_SkinChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_boat_2eproto();
  return *default_instance_;
}

Boat_CS_SkinChange* Boat_CS_SkinChange::default_instance_ = NULL;

Boat_CS_SkinChange* Boat_CS_SkinChange::New() const {
  return new Boat_CS_SkinChange;
}

void Boat_CS_SkinChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skinid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Boat_CS_SkinChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 skinid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skinid_)));
          set_has_skinid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Boat_CS_SkinChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 skinid = 1;
  if (has_skinid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skinid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Boat_CS_SkinChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 skinid = 1;
  if (has_skinid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skinid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Boat_CS_SkinChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 skinid = 1;
    if (has_skinid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skinid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Boat_CS_SkinChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Boat_CS_SkinChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Boat_CS_SkinChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Boat_CS_SkinChange::MergeFrom(const Boat_CS_SkinChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skinid()) {
      set_skinid(from.skinid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Boat_CS_SkinChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Boat_CS_SkinChange::CopyFrom(const Boat_CS_SkinChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Boat_CS_SkinChange::IsInitialized() const {

  return true;
}

void Boat_CS_SkinChange::Swap(Boat_CS_SkinChange* other) {
  if (other != this) {
    std::swap(skinid_, other->skinid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Boat_CS_SkinChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Boat_CS_SkinChange_descriptor_;
  metadata.reflection = Boat_CS_SkinChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Boat_SC_SkinChangeResult::kResultFieldNumber;
#endif  // !_MSC_VER

Boat_SC_SkinChangeResult::Boat_SC_SkinChangeResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Boat_SC_SkinChangeResult::InitAsDefaultInstance() {
}

Boat_SC_SkinChangeResult::Boat_SC_SkinChangeResult(const Boat_SC_SkinChangeResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Boat_SC_SkinChangeResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Boat_SC_SkinChangeResult::~Boat_SC_SkinChangeResult() {
  SharedDtor();
}

void Boat_SC_SkinChangeResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Boat_SC_SkinChangeResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Boat_SC_SkinChangeResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Boat_SC_SkinChangeResult_descriptor_;
}

const Boat_SC_SkinChangeResult& Boat_SC_SkinChangeResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_boat_2eproto();
  return *default_instance_;
}

Boat_SC_SkinChangeResult* Boat_SC_SkinChangeResult::default_instance_ = NULL;

Boat_SC_SkinChangeResult* Boat_SC_SkinChangeResult::New() const {
  return new Boat_SC_SkinChangeResult;
}

void Boat_SC_SkinChangeResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Boat_SC_SkinChangeResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Boat_SC_SkinChangeResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Boat_SC_SkinChangeResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Boat_SC_SkinChangeResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Boat_SC_SkinChangeResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Boat_SC_SkinChangeResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Boat_SC_SkinChangeResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Boat_SC_SkinChangeResult::MergeFrom(const Boat_SC_SkinChangeResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Boat_SC_SkinChangeResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Boat_SC_SkinChangeResult::CopyFrom(const Boat_SC_SkinChangeResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Boat_SC_SkinChangeResult::IsInitialized() const {

  return true;
}

void Boat_SC_SkinChangeResult::Swap(Boat_SC_SkinChangeResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Boat_SC_SkinChangeResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Boat_SC_SkinChangeResult_descriptor_;
  metadata.reflection = Boat_SC_SkinChangeResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Boat_CS_UpBoatPart::kPartidFieldNumber;
#endif  // !_MSC_VER

Boat_CS_UpBoatPart::Boat_CS_UpBoatPart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Boat_CS_UpBoatPart::InitAsDefaultInstance() {
}

Boat_CS_UpBoatPart::Boat_CS_UpBoatPart(const Boat_CS_UpBoatPart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Boat_CS_UpBoatPart::SharedCtor() {
  _cached_size_ = 0;
  partid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Boat_CS_UpBoatPart::~Boat_CS_UpBoatPart() {
  SharedDtor();
}

void Boat_CS_UpBoatPart::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Boat_CS_UpBoatPart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Boat_CS_UpBoatPart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Boat_CS_UpBoatPart_descriptor_;
}

const Boat_CS_UpBoatPart& Boat_CS_UpBoatPart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_boat_2eproto();
  return *default_instance_;
}

Boat_CS_UpBoatPart* Boat_CS_UpBoatPart::default_instance_ = NULL;

Boat_CS_UpBoatPart* Boat_CS_UpBoatPart::New() const {
  return new Boat_CS_UpBoatPart;
}

void Boat_CS_UpBoatPart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    partid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Boat_CS_UpBoatPart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 partid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &partid_)));
          set_has_partid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Boat_CS_UpBoatPart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 partid = 1;
  if (has_partid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->partid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Boat_CS_UpBoatPart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 partid = 1;
  if (has_partid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->partid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Boat_CS_UpBoatPart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 partid = 1;
    if (has_partid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->partid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Boat_CS_UpBoatPart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Boat_CS_UpBoatPart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Boat_CS_UpBoatPart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Boat_CS_UpBoatPart::MergeFrom(const Boat_CS_UpBoatPart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_partid()) {
      set_partid(from.partid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Boat_CS_UpBoatPart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Boat_CS_UpBoatPart::CopyFrom(const Boat_CS_UpBoatPart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Boat_CS_UpBoatPart::IsInitialized() const {

  return true;
}

void Boat_CS_UpBoatPart::Swap(Boat_CS_UpBoatPart* other) {
  if (other != this) {
    std::swap(partid_, other->partid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Boat_CS_UpBoatPart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Boat_CS_UpBoatPart_descriptor_;
  metadata.reflection = Boat_CS_UpBoatPart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Boat_SC_UpBoatPartResult::kResultFieldNumber;
const int Boat_SC_UpBoatPartResult::kPartidFieldNumber;
#endif  // !_MSC_VER

Boat_SC_UpBoatPartResult::Boat_SC_UpBoatPartResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Boat_SC_UpBoatPartResult::InitAsDefaultInstance() {
}

Boat_SC_UpBoatPartResult::Boat_SC_UpBoatPartResult(const Boat_SC_UpBoatPartResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Boat_SC_UpBoatPartResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  partid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Boat_SC_UpBoatPartResult::~Boat_SC_UpBoatPartResult() {
  SharedDtor();
}

void Boat_SC_UpBoatPartResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Boat_SC_UpBoatPartResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Boat_SC_UpBoatPartResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Boat_SC_UpBoatPartResult_descriptor_;
}

const Boat_SC_UpBoatPartResult& Boat_SC_UpBoatPartResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_boat_2eproto();
  return *default_instance_;
}

Boat_SC_UpBoatPartResult* Boat_SC_UpBoatPartResult::default_instance_ = NULL;

Boat_SC_UpBoatPartResult* Boat_SC_UpBoatPartResult::New() const {
  return new Boat_SC_UpBoatPartResult;
}

void Boat_SC_UpBoatPartResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    partid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Boat_SC_UpBoatPartResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_partid;
        break;
      }

      // optional int32 partid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_partid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &partid_)));
          set_has_partid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Boat_SC_UpBoatPartResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 partid = 2;
  if (has_partid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->partid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Boat_SC_UpBoatPartResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 partid = 2;
  if (has_partid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->partid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Boat_SC_UpBoatPartResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 partid = 2;
    if (has_partid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->partid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Boat_SC_UpBoatPartResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Boat_SC_UpBoatPartResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Boat_SC_UpBoatPartResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Boat_SC_UpBoatPartResult::MergeFrom(const Boat_SC_UpBoatPartResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_partid()) {
      set_partid(from.partid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Boat_SC_UpBoatPartResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Boat_SC_UpBoatPartResult::CopyFrom(const Boat_SC_UpBoatPartResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Boat_SC_UpBoatPartResult::IsInitialized() const {

  return true;
}

void Boat_SC_UpBoatPartResult::Swap(Boat_SC_UpBoatPartResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(partid_, other->partid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Boat_SC_UpBoatPartResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Boat_SC_UpBoatPartResult_descriptor_;
  metadata.reflection = Boat_SC_UpBoatPartResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Boat_CS_ActiveFashion::kSkinidFieldNumber;
const int Boat_CS_ActiveFashion::kTimetypeFieldNumber;
#endif  // !_MSC_VER

Boat_CS_ActiveFashion::Boat_CS_ActiveFashion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Boat_CS_ActiveFashion::InitAsDefaultInstance() {
}

Boat_CS_ActiveFashion::Boat_CS_ActiveFashion(const Boat_CS_ActiveFashion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Boat_CS_ActiveFashion::SharedCtor() {
  _cached_size_ = 0;
  skinid_ = 0;
  timetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Boat_CS_ActiveFashion::~Boat_CS_ActiveFashion() {
  SharedDtor();
}

void Boat_CS_ActiveFashion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Boat_CS_ActiveFashion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Boat_CS_ActiveFashion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Boat_CS_ActiveFashion_descriptor_;
}

const Boat_CS_ActiveFashion& Boat_CS_ActiveFashion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_boat_2eproto();
  return *default_instance_;
}

Boat_CS_ActiveFashion* Boat_CS_ActiveFashion::default_instance_ = NULL;

Boat_CS_ActiveFashion* Boat_CS_ActiveFashion::New() const {
  return new Boat_CS_ActiveFashion;
}

void Boat_CS_ActiveFashion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skinid_ = 0;
    timetype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Boat_CS_ActiveFashion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 skinid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skinid_)));
          set_has_skinid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_timetype;
        break;
      }

      // optional int32 timetype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timetype_)));
          set_has_timetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Boat_CS_ActiveFashion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 skinid = 1;
  if (has_skinid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skinid(), output);
  }

  // optional int32 timetype = 2;
  if (has_timetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->timetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Boat_CS_ActiveFashion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 skinid = 1;
  if (has_skinid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skinid(), target);
  }

  // optional int32 timetype = 2;
  if (has_timetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->timetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Boat_CS_ActiveFashion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 skinid = 1;
    if (has_skinid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skinid());
    }

    // optional int32 timetype = 2;
    if (has_timetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timetype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Boat_CS_ActiveFashion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Boat_CS_ActiveFashion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Boat_CS_ActiveFashion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Boat_CS_ActiveFashion::MergeFrom(const Boat_CS_ActiveFashion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skinid()) {
      set_skinid(from.skinid());
    }
    if (from.has_timetype()) {
      set_timetype(from.timetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Boat_CS_ActiveFashion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Boat_CS_ActiveFashion::CopyFrom(const Boat_CS_ActiveFashion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Boat_CS_ActiveFashion::IsInitialized() const {

  return true;
}

void Boat_CS_ActiveFashion::Swap(Boat_CS_ActiveFashion* other) {
  if (other != this) {
    std::swap(skinid_, other->skinid_);
    std::swap(timetype_, other->timetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Boat_CS_ActiveFashion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Boat_CS_ActiveFashion_descriptor_;
  metadata.reflection = Boat_CS_ActiveFashion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Boat_SC_ActiveFashionResult::kResultFieldNumber;
#endif  // !_MSC_VER

Boat_SC_ActiveFashionResult::Boat_SC_ActiveFashionResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Boat_SC_ActiveFashionResult::InitAsDefaultInstance() {
}

Boat_SC_ActiveFashionResult::Boat_SC_ActiveFashionResult(const Boat_SC_ActiveFashionResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Boat_SC_ActiveFashionResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Boat_SC_ActiveFashionResult::~Boat_SC_ActiveFashionResult() {
  SharedDtor();
}

void Boat_SC_ActiveFashionResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Boat_SC_ActiveFashionResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Boat_SC_ActiveFashionResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Boat_SC_ActiveFashionResult_descriptor_;
}

const Boat_SC_ActiveFashionResult& Boat_SC_ActiveFashionResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_boat_2eproto();
  return *default_instance_;
}

Boat_SC_ActiveFashionResult* Boat_SC_ActiveFashionResult::default_instance_ = NULL;

Boat_SC_ActiveFashionResult* Boat_SC_ActiveFashionResult::New() const {
  return new Boat_SC_ActiveFashionResult;
}

void Boat_SC_ActiveFashionResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Boat_SC_ActiveFashionResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Boat_SC_ActiveFashionResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Boat_SC_ActiveFashionResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Boat_SC_ActiveFashionResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Boat_SC_ActiveFashionResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Boat_SC_ActiveFashionResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Boat_SC_ActiveFashionResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Boat_SC_ActiveFashionResult::MergeFrom(const Boat_SC_ActiveFashionResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Boat_SC_ActiveFashionResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Boat_SC_ActiveFashionResult::CopyFrom(const Boat_SC_ActiveFashionResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Boat_SC_ActiveFashionResult::IsInitialized() const {

  return true;
}

void Boat_SC_ActiveFashionResult::Swap(Boat_SC_ActiveFashionResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Boat_SC_ActiveFashionResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Boat_SC_ActiveFashionResult_descriptor_;
  metadata.reflection = Boat_SC_ActiveFashionResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Boat_SC_UpdateBoatInfo::kDataFieldNumber;
#endif  // !_MSC_VER

Boat_SC_UpdateBoatInfo::Boat_SC_UpdateBoatInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Boat_SC_UpdateBoatInfo::InitAsDefaultInstance() {
  data_ = const_cast< ::proto::message::BoatAllData*>(&::proto::message::BoatAllData::default_instance());
}

Boat_SC_UpdateBoatInfo::Boat_SC_UpdateBoatInfo(const Boat_SC_UpdateBoatInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Boat_SC_UpdateBoatInfo::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Boat_SC_UpdateBoatInfo::~Boat_SC_UpdateBoatInfo() {
  SharedDtor();
}

void Boat_SC_UpdateBoatInfo::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void Boat_SC_UpdateBoatInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Boat_SC_UpdateBoatInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Boat_SC_UpdateBoatInfo_descriptor_;
}

const Boat_SC_UpdateBoatInfo& Boat_SC_UpdateBoatInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_boat_2eproto();
  return *default_instance_;
}

Boat_SC_UpdateBoatInfo* Boat_SC_UpdateBoatInfo::default_instance_ = NULL;

Boat_SC_UpdateBoatInfo* Boat_SC_UpdateBoatInfo::New() const {
  return new Boat_SC_UpdateBoatInfo;
}

void Boat_SC_UpdateBoatInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::proto::message::BoatAllData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Boat_SC_UpdateBoatInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.message.BoatAllData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Boat_SC_UpdateBoatInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.message.BoatAllData data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Boat_SC_UpdateBoatInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.message.BoatAllData data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Boat_SC_UpdateBoatInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.message.BoatAllData data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Boat_SC_UpdateBoatInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Boat_SC_UpdateBoatInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Boat_SC_UpdateBoatInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Boat_SC_UpdateBoatInfo::MergeFrom(const Boat_SC_UpdateBoatInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::proto::message::BoatAllData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Boat_SC_UpdateBoatInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Boat_SC_UpdateBoatInfo::CopyFrom(const Boat_SC_UpdateBoatInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Boat_SC_UpdateBoatInfo::IsInitialized() const {

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void Boat_SC_UpdateBoatInfo::Swap(Boat_SC_UpdateBoatInfo* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Boat_SC_UpdateBoatInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Boat_SC_UpdateBoatInfo_descriptor_;
  metadata.reflection = Boat_SC_UpdateBoatInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

// @@protoc_insertion_point(global_scope)
