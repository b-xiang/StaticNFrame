// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: match.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "match.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

namespace {

const ::google::protobuf::Descriptor* PVPInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PVPInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Match_CS_PVPMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Match_CS_PVPMatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* Match_SC_PVPMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Match_SC_PVPMatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* Match_CS_CancelPVPMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Match_CS_CancelPVPMatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* Match_SC_CancelPVPMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Match_SC_CancelPVPMatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* PVPRewardItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PVPRewardItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Match_SC_PVPResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Match_SC_PVPResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* Match_SC_ArenaResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Match_SC_ArenaResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* Match_SC_ContinueWinNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Match_SC_ContinueWinNum_reflection_ = NULL;
const ::google::protobuf::Descriptor* Match_SC_ArenaMatchResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Match_SC_ArenaMatchResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* Match_SC_NotifyOtherMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Match_SC_NotifyOtherMatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* Match_CS_GetPVPInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Match_CS_GetPVPInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Match_SC_GetPVPInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Match_SC_GetPVPInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Match_CS_GetPVPReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Match_CS_GetPVPReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Match_SC_GetPVPReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Match_SC_GetPVPReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Match_CS_GetArenaInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Match_CS_GetArenaInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Match_SC_GetArenaInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Match_SC_GetArenaInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Match_CS_GetArenaReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Match_CS_GetArenaReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Match_SC_GetArenaReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Match_SC_GetArenaReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Match_CS_GetBoatPVPInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Match_CS_GetBoatPVPInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Match_SC_GetBoatPVPInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Match_SC_GetBoatPVPInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Match_CS_GetBoatPVPReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Match_CS_GetBoatPVPReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Match_SC_GetBoatPVPReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Match_SC_GetBoatPVPReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Match2Battle_SendPlyData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Match2Battle_SendPlyData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Match2Battle_SendAllPlyData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Match2Battle_SendAllPlyData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Match2Game_PVPResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Match2Game_PVPResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* Match2Game_CreateRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Match2Game_CreateRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* Battle2Match_PVPResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle2Match_PVPResult_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_match_2eproto() {
  protobuf_AddDesc_match_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "match.proto");
  GOOGLE_CHECK(file != NULL);
  PVPInfo_descriptor_ = file->message_type(0);
  static const int PVPInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPInfo, win_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPInfo, total_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPInfo, continue_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPInfo, first_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPInfo, three_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPInfo, three_win_reward_),
  };
  PVPInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PVPInfo_descriptor_,
      PVPInfo::default_instance_,
      PVPInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PVPInfo));
  ArenaInfo_descriptor_ = file->message_type(1);
  static const int ArenaInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfo, stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfo, win_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfo, total_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfo, continue_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfo, rewardlist_),
  };
  ArenaInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaInfo_descriptor_,
      ArenaInfo::default_instance_,
      ArenaInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaInfo));
  Match_CS_PVPMatch_descriptor_ = file->message_type(2);
  static const int Match_CS_PVPMatch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_CS_PVPMatch, usual_id_),
  };
  Match_CS_PVPMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Match_CS_PVPMatch_descriptor_,
      Match_CS_PVPMatch::default_instance_,
      Match_CS_PVPMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_CS_PVPMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_CS_PVPMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Match_CS_PVPMatch));
  Match_SC_PVPMatch_descriptor_ = file->message_type(3);
  static const int Match_SC_PVPMatch_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_PVPMatch, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_PVPMatch, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_PVPMatch, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_PVPMatch, charid_),
  };
  Match_SC_PVPMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Match_SC_PVPMatch_descriptor_,
      Match_SC_PVPMatch::default_instance_,
      Match_SC_PVPMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_PVPMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_PVPMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Match_SC_PVPMatch));
  Match_CS_CancelPVPMatch_descriptor_ = file->message_type(4);
  static const int Match_CS_CancelPVPMatch_offsets_[1] = {
  };
  Match_CS_CancelPVPMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Match_CS_CancelPVPMatch_descriptor_,
      Match_CS_CancelPVPMatch::default_instance_,
      Match_CS_CancelPVPMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_CS_CancelPVPMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_CS_CancelPVPMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Match_CS_CancelPVPMatch));
  Match_SC_CancelPVPMatch_descriptor_ = file->message_type(5);
  static const int Match_SC_CancelPVPMatch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_CancelPVPMatch, result_),
  };
  Match_SC_CancelPVPMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Match_SC_CancelPVPMatch_descriptor_,
      Match_SC_CancelPVPMatch::default_instance_,
      Match_SC_CancelPVPMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_CancelPVPMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_CancelPVPMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Match_SC_CancelPVPMatch));
  PVPRewardItem_descriptor_ = file->message_type(6);
  static const int PVPRewardItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPRewardItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPRewardItem, num_),
  };
  PVPRewardItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PVPRewardItem_descriptor_,
      PVPRewardItem::default_instance_,
      PVPRewardItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPRewardItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPRewardItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PVPRewardItem));
  Match_SC_PVPResult_descriptor_ = file->message_type(7);
  static const int Match_SC_PVPResult_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_PVPResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_PVPResult, pass_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_PVPResult, item_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_PVPResult, get_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_PVPResult, usual_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_PVPResult, pvp_info_),
  };
  Match_SC_PVPResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Match_SC_PVPResult_descriptor_,
      Match_SC_PVPResult::default_instance_,
      Match_SC_PVPResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_PVPResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_PVPResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Match_SC_PVPResult));
  Match_SC_ArenaResult_descriptor_ = file->message_type(8);
  static const int Match_SC_ArenaResult_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_ArenaResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_ArenaResult, pass_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_ArenaResult, item_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_ArenaResult, get_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_ArenaResult, usual_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_ArenaResult, arena_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_ArenaResult, reason_),
  };
  Match_SC_ArenaResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Match_SC_ArenaResult_descriptor_,
      Match_SC_ArenaResult::default_instance_,
      Match_SC_ArenaResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_ArenaResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_ArenaResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Match_SC_ArenaResult));
  Match_SC_ContinueWinNum_descriptor_ = file->message_type(9);
  static const int Match_SC_ContinueWinNum_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_ContinueWinNum, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_ContinueWinNum, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_ContinueWinNum, win_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_ContinueWinNum, usual_id_),
  };
  Match_SC_ContinueWinNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Match_SC_ContinueWinNum_descriptor_,
      Match_SC_ContinueWinNum::default_instance_,
      Match_SC_ContinueWinNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_ContinueWinNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_ContinueWinNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Match_SC_ContinueWinNum));
  Match_SC_ArenaMatchResult_descriptor_ = file->message_type(10);
  static const int Match_SC_ArenaMatchResult_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_ArenaMatchResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_ArenaMatchResult, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_ArenaMatchResult, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_ArenaMatchResult, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_ArenaMatchResult, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_ArenaMatchResult, career_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_ArenaMatchResult, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_ArenaMatchResult, guild_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_ArenaMatchResult, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_ArenaMatchResult, dhlev_),
  };
  Match_SC_ArenaMatchResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Match_SC_ArenaMatchResult_descriptor_,
      Match_SC_ArenaMatchResult::default_instance_,
      Match_SC_ArenaMatchResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_ArenaMatchResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_ArenaMatchResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Match_SC_ArenaMatchResult));
  Match_SC_NotifyOtherMatch_descriptor_ = file->message_type(11);
  static const int Match_SC_NotifyOtherMatch_offsets_[1] = {
  };
  Match_SC_NotifyOtherMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Match_SC_NotifyOtherMatch_descriptor_,
      Match_SC_NotifyOtherMatch::default_instance_,
      Match_SC_NotifyOtherMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_NotifyOtherMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_NotifyOtherMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Match_SC_NotifyOtherMatch));
  Match_CS_GetPVPInfo_descriptor_ = file->message_type(12);
  static const int Match_CS_GetPVPInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_CS_GetPVPInfo, usual_id_),
  };
  Match_CS_GetPVPInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Match_CS_GetPVPInfo_descriptor_,
      Match_CS_GetPVPInfo::default_instance_,
      Match_CS_GetPVPInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_CS_GetPVPInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_CS_GetPVPInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Match_CS_GetPVPInfo));
  Match_SC_GetPVPInfo_descriptor_ = file->message_type(13);
  static const int Match_SC_GetPVPInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_GetPVPInfo, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_GetPVPInfo, usual_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_GetPVPInfo, remain_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_GetPVPInfo, pvp_info_),
  };
  Match_SC_GetPVPInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Match_SC_GetPVPInfo_descriptor_,
      Match_SC_GetPVPInfo::default_instance_,
      Match_SC_GetPVPInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_GetPVPInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_GetPVPInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Match_SC_GetPVPInfo));
  Match_CS_GetPVPReward_descriptor_ = file->message_type(14);
  static const int Match_CS_GetPVPReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_CS_GetPVPReward, batt_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_CS_GetPVPReward, reward_type_),
  };
  Match_CS_GetPVPReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Match_CS_GetPVPReward_descriptor_,
      Match_CS_GetPVPReward::default_instance_,
      Match_CS_GetPVPReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_CS_GetPVPReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_CS_GetPVPReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Match_CS_GetPVPReward));
  Match_SC_GetPVPReward_descriptor_ = file->message_type(15);
  static const int Match_SC_GetPVPReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_GetPVPReward, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_GetPVPReward, reward_type_),
  };
  Match_SC_GetPVPReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Match_SC_GetPVPReward_descriptor_,
      Match_SC_GetPVPReward::default_instance_,
      Match_SC_GetPVPReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_GetPVPReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_GetPVPReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Match_SC_GetPVPReward));
  Match_CS_GetArenaInfo_descriptor_ = file->message_type(16);
  static const int Match_CS_GetArenaInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_CS_GetArenaInfo, usual_id_),
  };
  Match_CS_GetArenaInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Match_CS_GetArenaInfo_descriptor_,
      Match_CS_GetArenaInfo::default_instance_,
      Match_CS_GetArenaInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_CS_GetArenaInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_CS_GetArenaInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Match_CS_GetArenaInfo));
  Match_SC_GetArenaInfo_descriptor_ = file->message_type(17);
  static const int Match_SC_GetArenaInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_GetArenaInfo, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_GetArenaInfo, usual_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_GetArenaInfo, remain_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_GetArenaInfo, arena_info_),
  };
  Match_SC_GetArenaInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Match_SC_GetArenaInfo_descriptor_,
      Match_SC_GetArenaInfo::default_instance_,
      Match_SC_GetArenaInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_GetArenaInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_GetArenaInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Match_SC_GetArenaInfo));
  Match_CS_GetArenaReward_descriptor_ = file->message_type(18);
  static const int Match_CS_GetArenaReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_CS_GetArenaReward, rewardid_),
  };
  Match_CS_GetArenaReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Match_CS_GetArenaReward_descriptor_,
      Match_CS_GetArenaReward::default_instance_,
      Match_CS_GetArenaReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_CS_GetArenaReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_CS_GetArenaReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Match_CS_GetArenaReward));
  Match_SC_GetArenaReward_descriptor_ = file->message_type(19);
  static const int Match_SC_GetArenaReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_GetArenaReward, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_GetArenaReward, rewardid_),
  };
  Match_SC_GetArenaReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Match_SC_GetArenaReward_descriptor_,
      Match_SC_GetArenaReward::default_instance_,
      Match_SC_GetArenaReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_GetArenaReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_GetArenaReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Match_SC_GetArenaReward));
  Match_CS_GetBoatPVPInfo_descriptor_ = file->message_type(20);
  static const int Match_CS_GetBoatPVPInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_CS_GetBoatPVPInfo, usual_id_),
  };
  Match_CS_GetBoatPVPInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Match_CS_GetBoatPVPInfo_descriptor_,
      Match_CS_GetBoatPVPInfo::default_instance_,
      Match_CS_GetBoatPVPInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_CS_GetBoatPVPInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_CS_GetBoatPVPInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Match_CS_GetBoatPVPInfo));
  Match_SC_GetBoatPVPInfo_descriptor_ = file->message_type(21);
  static const int Match_SC_GetBoatPVPInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_GetBoatPVPInfo, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_GetBoatPVPInfo, usual_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_GetBoatPVPInfo, remain_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_GetBoatPVPInfo, boat_pvp_info_),
  };
  Match_SC_GetBoatPVPInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Match_SC_GetBoatPVPInfo_descriptor_,
      Match_SC_GetBoatPVPInfo::default_instance_,
      Match_SC_GetBoatPVPInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_GetBoatPVPInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_GetBoatPVPInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Match_SC_GetBoatPVPInfo));
  Match_CS_GetBoatPVPReward_descriptor_ = file->message_type(22);
  static const int Match_CS_GetBoatPVPReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_CS_GetBoatPVPReward, reward_type_),
  };
  Match_CS_GetBoatPVPReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Match_CS_GetBoatPVPReward_descriptor_,
      Match_CS_GetBoatPVPReward::default_instance_,
      Match_CS_GetBoatPVPReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_CS_GetBoatPVPReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_CS_GetBoatPVPReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Match_CS_GetBoatPVPReward));
  Match_SC_GetBoatPVPReward_descriptor_ = file->message_type(23);
  static const int Match_SC_GetBoatPVPReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_GetBoatPVPReward, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_GetBoatPVPReward, reward_type_),
  };
  Match_SC_GetBoatPVPReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Match_SC_GetBoatPVPReward_descriptor_,
      Match_SC_GetBoatPVPReward::default_instance_,
      Match_SC_GetBoatPVPReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_GetBoatPVPReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match_SC_GetBoatPVPReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Match_SC_GetBoatPVPReward));
  Match2Battle_SendPlyData_descriptor_ = file->message_type(24);
  static const int Match2Battle_SendPlyData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match2Battle_SendPlyData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match2Battle_SendPlyData, splyinfo_),
  };
  Match2Battle_SendPlyData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Match2Battle_SendPlyData_descriptor_,
      Match2Battle_SendPlyData::default_instance_,
      Match2Battle_SendPlyData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match2Battle_SendPlyData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match2Battle_SendPlyData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Match2Battle_SendPlyData));
  Match2Battle_SendAllPlyData_descriptor_ = file->message_type(25);
  static const int Match2Battle_SendAllPlyData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match2Battle_SendAllPlyData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match2Battle_SendAllPlyData, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match2Battle_SendAllPlyData, splyinfo_),
  };
  Match2Battle_SendAllPlyData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Match2Battle_SendAllPlyData_descriptor_,
      Match2Battle_SendAllPlyData::default_instance_,
      Match2Battle_SendAllPlyData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match2Battle_SendAllPlyData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match2Battle_SendAllPlyData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Match2Battle_SendAllPlyData));
  Match2Game_PVPResult_descriptor_ = file->message_type(26);
  static const int Match2Game_PVPResult_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match2Game_PVPResult, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match2Game_PVPResult, usualid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match2Game_PVPResult, ntime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match2Game_PVPResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match2Game_PVPResult, killnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match2Game_PVPResult, rival_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match2Game_PVPResult, reason_),
  };
  Match2Game_PVPResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Match2Game_PVPResult_descriptor_,
      Match2Game_PVPResult::default_instance_,
      Match2Game_PVPResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match2Game_PVPResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match2Game_PVPResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Match2Game_PVPResult));
  Match2Game_CreateRoom_descriptor_ = file->message_type(27);
  static const int Match2Game_CreateRoom_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match2Game_CreateRoom, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match2Game_CreateRoom, roomid_),
  };
  Match2Game_CreateRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Match2Game_CreateRoom_descriptor_,
      Match2Game_CreateRoom::default_instance_,
      Match2Game_CreateRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match2Game_CreateRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match2Game_CreateRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Match2Game_CreateRoom));
  Battle2Match_PVPResult_descriptor_ = file->message_type(28);
  static const int Battle2Match_PVPResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Match_PVPResult, pvpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Match_PVPResult, winner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Match_PVPResult, costtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Match_PVPResult, reason_),
  };
  Battle2Match_PVPResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle2Match_PVPResult_descriptor_,
      Battle2Match_PVPResult::default_instance_,
      Battle2Match_PVPResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Match_PVPResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle2Match_PVPResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle2Match_PVPResult));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_match_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PVPInfo_descriptor_, &PVPInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaInfo_descriptor_, &ArenaInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Match_CS_PVPMatch_descriptor_, &Match_CS_PVPMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Match_SC_PVPMatch_descriptor_, &Match_SC_PVPMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Match_CS_CancelPVPMatch_descriptor_, &Match_CS_CancelPVPMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Match_SC_CancelPVPMatch_descriptor_, &Match_SC_CancelPVPMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PVPRewardItem_descriptor_, &PVPRewardItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Match_SC_PVPResult_descriptor_, &Match_SC_PVPResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Match_SC_ArenaResult_descriptor_, &Match_SC_ArenaResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Match_SC_ContinueWinNum_descriptor_, &Match_SC_ContinueWinNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Match_SC_ArenaMatchResult_descriptor_, &Match_SC_ArenaMatchResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Match_SC_NotifyOtherMatch_descriptor_, &Match_SC_NotifyOtherMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Match_CS_GetPVPInfo_descriptor_, &Match_CS_GetPVPInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Match_SC_GetPVPInfo_descriptor_, &Match_SC_GetPVPInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Match_CS_GetPVPReward_descriptor_, &Match_CS_GetPVPReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Match_SC_GetPVPReward_descriptor_, &Match_SC_GetPVPReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Match_CS_GetArenaInfo_descriptor_, &Match_CS_GetArenaInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Match_SC_GetArenaInfo_descriptor_, &Match_SC_GetArenaInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Match_CS_GetArenaReward_descriptor_, &Match_CS_GetArenaReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Match_SC_GetArenaReward_descriptor_, &Match_SC_GetArenaReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Match_CS_GetBoatPVPInfo_descriptor_, &Match_CS_GetBoatPVPInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Match_SC_GetBoatPVPInfo_descriptor_, &Match_SC_GetBoatPVPInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Match_CS_GetBoatPVPReward_descriptor_, &Match_CS_GetBoatPVPReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Match_SC_GetBoatPVPReward_descriptor_, &Match_SC_GetBoatPVPReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Match2Battle_SendPlyData_descriptor_, &Match2Battle_SendPlyData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Match2Battle_SendAllPlyData_descriptor_, &Match2Battle_SendAllPlyData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Match2Game_PVPResult_descriptor_, &Match2Game_PVPResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Match2Game_CreateRoom_descriptor_, &Match2Game_CreateRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle2Match_PVPResult_descriptor_, &Battle2Match_PVPResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_match_2eproto() {
  delete PVPInfo::default_instance_;
  delete PVPInfo_reflection_;
  delete ArenaInfo::default_instance_;
  delete ArenaInfo_reflection_;
  delete Match_CS_PVPMatch::default_instance_;
  delete Match_CS_PVPMatch_reflection_;
  delete Match_SC_PVPMatch::default_instance_;
  delete Match_SC_PVPMatch_reflection_;
  delete Match_CS_CancelPVPMatch::default_instance_;
  delete Match_CS_CancelPVPMatch_reflection_;
  delete Match_SC_CancelPVPMatch::default_instance_;
  delete Match_SC_CancelPVPMatch_reflection_;
  delete PVPRewardItem::default_instance_;
  delete PVPRewardItem_reflection_;
  delete Match_SC_PVPResult::default_instance_;
  delete Match_SC_PVPResult_reflection_;
  delete Match_SC_ArenaResult::default_instance_;
  delete Match_SC_ArenaResult_reflection_;
  delete Match_SC_ContinueWinNum::default_instance_;
  delete Match_SC_ContinueWinNum_reflection_;
  delete Match_SC_ArenaMatchResult::default_instance_;
  delete Match_SC_ArenaMatchResult_reflection_;
  delete Match_SC_NotifyOtherMatch::default_instance_;
  delete Match_SC_NotifyOtherMatch_reflection_;
  delete Match_CS_GetPVPInfo::default_instance_;
  delete Match_CS_GetPVPInfo_reflection_;
  delete Match_SC_GetPVPInfo::default_instance_;
  delete Match_SC_GetPVPInfo_reflection_;
  delete Match_CS_GetPVPReward::default_instance_;
  delete Match_CS_GetPVPReward_reflection_;
  delete Match_SC_GetPVPReward::default_instance_;
  delete Match_SC_GetPVPReward_reflection_;
  delete Match_CS_GetArenaInfo::default_instance_;
  delete Match_CS_GetArenaInfo_reflection_;
  delete Match_SC_GetArenaInfo::default_instance_;
  delete Match_SC_GetArenaInfo_reflection_;
  delete Match_CS_GetArenaReward::default_instance_;
  delete Match_CS_GetArenaReward_reflection_;
  delete Match_SC_GetArenaReward::default_instance_;
  delete Match_SC_GetArenaReward_reflection_;
  delete Match_CS_GetBoatPVPInfo::default_instance_;
  delete Match_CS_GetBoatPVPInfo_reflection_;
  delete Match_SC_GetBoatPVPInfo::default_instance_;
  delete Match_SC_GetBoatPVPInfo_reflection_;
  delete Match_CS_GetBoatPVPReward::default_instance_;
  delete Match_CS_GetBoatPVPReward_reflection_;
  delete Match_SC_GetBoatPVPReward::default_instance_;
  delete Match_SC_GetBoatPVPReward_reflection_;
  delete Match2Battle_SendPlyData::default_instance_;
  delete Match2Battle_SendPlyData_reflection_;
  delete Match2Battle_SendAllPlyData::default_instance_;
  delete Match2Battle_SendAllPlyData_reflection_;
  delete Match2Game_PVPResult::default_instance_;
  delete Match2Game_PVPResult_reflection_;
  delete Match2Game_CreateRoom::default_instance_;
  delete Match2Game_CreateRoom_reflection_;
  delete Battle2Match_PVPResult::default_instance_;
  delete Battle2Match_PVPResult_reflection_;
}

void protobuf_AddDesc_match_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::message::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013match.proto\022\rproto.message\032\014common.pro"
    "to\"\230\001\n\007PVPInfo\022\r\n\005score\030\001 \001(\005\022\017\n\007win_num"
    "\030\002 \001(\005\022\021\n\ttotal_num\030\003 \001(\005\022\024\n\014continue_nu"
    "m\030\004 \001(\005\022\024\n\014first_reward\030\005 \001(\005\022\024\n\014three_r"
    "eward\030\006 \001(\005\022\030\n\020three_win_reward\030\007 \001(\005\"w\n"
    "\tArenaInfo\022\r\n\005score\030\001 \001(\005\022\r\n\005stage\030\002 \001(\005"
    "\022\017\n\007win_num\030\003 \001(\005\022\021\n\ttotal_num\030\004 \001(\005\022\024\n\014"
    "continue_num\030\005 \001(\005\022\022\n\nrewardlist\030\006 \003(\005\"%"
    "\n\021Match_CS_PVPMatch\022\020\n\010usual_id\030\001 \001(\005\"M\n"
    "\021Match_SC_PVPMatch\022\016\n\006result\030\001 \001(\005\022\n\n\002ip"
    "\030\002 \001(\t\022\014\n\004port\030\003 \001(\005\022\016\n\006charid\030\004 \001(\004\"\031\n\027"
    "Match_CS_CancelPVPMatch\")\n\027Match_SC_Canc"
    "elPVPMatch\022\016\n\006result\030\001 \001(\005\"(\n\rPVPRewardI"
    "tem\022\n\n\002id\030\001 \001(\005\022\013\n\003num\030\002 \001(\005\"\267\001\n\022Match_S"
    "C_PVPResult\022\016\n\006result\030\001 \001(\005\022\021\n\tpass_time"
    "\030\002 \001(\005\022/\n\titem_list\030\003 \003(\0132\034.proto.messag"
    "e.PVPRewardItem\022\021\n\tget_score\030\004 \001(\005\022\020\n\010us"
    "ual_id\030\005 \001(\005\022(\n\010pvp_info\030\006 \001(\0132\026.proto.m"
    "essage.PVPInfo\"\315\001\n\024Match_SC_ArenaResult\022"
    "\016\n\006result\030\001 \001(\005\022\021\n\tpass_time\030\002 \001(\005\022/\n\tit"
    "em_list\030\003 \003(\0132\034.proto.message.PVPRewardI"
    "tem\022\021\n\tget_score\030\004 \001(\005\022\020\n\010usual_id\030\005 \001(\005"
    "\022,\n\narena_info\030\006 \001(\0132\030.proto.message.Are"
    "naInfo\022\016\n\006reason\030\007 \001(\r\"Z\n\027Match_SC_Conti"
    "nueWinNum\022\016\n\006charid\030\001 \001(\004\022\014\n\004name\030\002 \001(\t\022"
    "\017\n\007win_num\030\003 \001(\005\022\020\n\010usual_id\030\004 \001(\005\"\264\001\n\031M"
    "atch_SC_ArenaMatchResult\022\016\n\006result\030\001 \001(\005"
    "\022\n\n\002ip\030\002 \001(\t\022\014\n\004port\030\003 \001(\005\022\016\n\006charid\030\004 \001"
    "(\004\022\014\n\004name\030\005 \001(\t\022\016\n\006career\030\006 \001(\005\022\r\n\005leve"
    "l\030\007 \001(\005\022\022\n\nguild_name\030\010 \001(\t\022\r\n\005score\030\t \001"
    "(\005\022\r\n\005dhlev\030\n \001(\r\"\033\n\031Match_SC_NotifyOthe"
    "rMatch\"\'\n\023Match_CS_GetPVPInfo\022\020\n\010usual_i"
    "d\030\001 \001(\005\"v\n\023Match_SC_GetPVPInfo\022\016\n\006result"
    "\030\001 \001(\005\022\020\n\010usual_id\030\002 \001(\005\022\023\n\013remain_time\030"
    "\003 \001(\005\022(\n\010pvp_info\030\004 \001(\0132\026.proto.message."
    "PVPInfo\"=\n\025Match_CS_GetPVPReward\022\017\n\007batt"
    "_id\030\001 \001(\005\022\023\n\013reward_type\030\002 \001(\005\"<\n\025Match_"
    "SC_GetPVPReward\022\016\n\006result\030\001 \001(\005\022\023\n\013rewar"
    "d_type\030\002 \001(\005\")\n\025Match_CS_GetArenaInfo\022\020\n"
    "\010usual_id\030\001 \001(\005\"|\n\025Match_SC_GetArenaInfo"
    "\022\016\n\006result\030\001 \001(\005\022\020\n\010usual_id\030\002 \001(\005\022\023\n\013re"
    "main_time\030\003 \001(\005\022,\n\narena_info\030\004 \001(\0132\030.pr"
    "oto.message.ArenaInfo\"+\n\027Match_CS_GetAre"
    "naReward\022\020\n\010rewardid\030\001 \001(\r\";\n\027Match_SC_G"
    "etArenaReward\022\016\n\006result\030\001 \001(\005\022\020\n\010rewardi"
    "d\030\002 \001(\005\"+\n\027Match_CS_GetBoatPVPInfo\022\020\n\010us"
    "ual_id\030\001 \001(\005\"\177\n\027Match_SC_GetBoatPVPInfo\022"
    "\016\n\006result\030\001 \001(\005\022\020\n\010usual_id\030\002 \001(\005\022\023\n\013rem"
    "ain_time\030\003 \001(\005\022-\n\rboat_pvp_info\030\004 \001(\0132\026."
    "proto.message.PVPInfo\"0\n\031Match_CS_GetBoa"
    "tPVPReward\022\023\n\013reward_type\030\001 \001(\005\"@\n\031Match"
    "_SC_GetBoatPVPReward\022\016\n\006result\030\001 \001(\005\022\023\n\013"
    "reward_type\030\002 \001(\005\"Y\n\030Match2Battle_SendPl"
    "yData\022\n\n\002id\030\001 \001(\005\0221\n\010sPlyInfo\030\002 \001(\0132\037.pr"
    "oto.message.BattlePlayerInfo\"k\n\033Match2Ba"
    "ttle_SendAllPlyData\022\n\n\002id\030\001 \001(\005\022\r\n\005mapid"
    "\030\002 \001(\005\0221\n\010sPlyInfo\030\003 \003(\0132\037.proto.message"
    ".BattlePlayerInfo\"\210\001\n\024Match2Game_PVPResu"
    "lt\022\020\n\010playerid\030\001 \001(\004\022\017\n\007usualid\030\002 \001(\r\022\r\n"
    "\005ntime\030\003 \001(\004\022\016\n\006result\030\004 \001(\r\022\017\n\007killnum\030"
    "\005 \001(\r\022\r\n\005rival\030\006 \003(\004\022\016\n\006reason\030\007 \001(\r\"7\n\025"
    "Match2Game_CreateRoom\022\016\n\006result\030\001 \001(\005\022\016\n"
    "\006roomid\030\002 \001(\005\"Y\n\026Battle2Match_PVPResult\022"
    "\r\n\005pvpid\030\001 \001(\r\022\016\n\006winner\030\002 \001(\r\022\020\n\010costti"
    "me\030\003 \001(\004\022\016\n\006reason\030\004 \001(\rB\017\n\rproto.messag"
    "e", 2601);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "match.proto", &protobuf_RegisterTypes);
  PVPInfo::default_instance_ = new PVPInfo();
  ArenaInfo::default_instance_ = new ArenaInfo();
  Match_CS_PVPMatch::default_instance_ = new Match_CS_PVPMatch();
  Match_SC_PVPMatch::default_instance_ = new Match_SC_PVPMatch();
  Match_CS_CancelPVPMatch::default_instance_ = new Match_CS_CancelPVPMatch();
  Match_SC_CancelPVPMatch::default_instance_ = new Match_SC_CancelPVPMatch();
  PVPRewardItem::default_instance_ = new PVPRewardItem();
  Match_SC_PVPResult::default_instance_ = new Match_SC_PVPResult();
  Match_SC_ArenaResult::default_instance_ = new Match_SC_ArenaResult();
  Match_SC_ContinueWinNum::default_instance_ = new Match_SC_ContinueWinNum();
  Match_SC_ArenaMatchResult::default_instance_ = new Match_SC_ArenaMatchResult();
  Match_SC_NotifyOtherMatch::default_instance_ = new Match_SC_NotifyOtherMatch();
  Match_CS_GetPVPInfo::default_instance_ = new Match_CS_GetPVPInfo();
  Match_SC_GetPVPInfo::default_instance_ = new Match_SC_GetPVPInfo();
  Match_CS_GetPVPReward::default_instance_ = new Match_CS_GetPVPReward();
  Match_SC_GetPVPReward::default_instance_ = new Match_SC_GetPVPReward();
  Match_CS_GetArenaInfo::default_instance_ = new Match_CS_GetArenaInfo();
  Match_SC_GetArenaInfo::default_instance_ = new Match_SC_GetArenaInfo();
  Match_CS_GetArenaReward::default_instance_ = new Match_CS_GetArenaReward();
  Match_SC_GetArenaReward::default_instance_ = new Match_SC_GetArenaReward();
  Match_CS_GetBoatPVPInfo::default_instance_ = new Match_CS_GetBoatPVPInfo();
  Match_SC_GetBoatPVPInfo::default_instance_ = new Match_SC_GetBoatPVPInfo();
  Match_CS_GetBoatPVPReward::default_instance_ = new Match_CS_GetBoatPVPReward();
  Match_SC_GetBoatPVPReward::default_instance_ = new Match_SC_GetBoatPVPReward();
  Match2Battle_SendPlyData::default_instance_ = new Match2Battle_SendPlyData();
  Match2Battle_SendAllPlyData::default_instance_ = new Match2Battle_SendAllPlyData();
  Match2Game_PVPResult::default_instance_ = new Match2Game_PVPResult();
  Match2Game_CreateRoom::default_instance_ = new Match2Game_CreateRoom();
  Battle2Match_PVPResult::default_instance_ = new Battle2Match_PVPResult();
  PVPInfo::default_instance_->InitAsDefaultInstance();
  ArenaInfo::default_instance_->InitAsDefaultInstance();
  Match_CS_PVPMatch::default_instance_->InitAsDefaultInstance();
  Match_SC_PVPMatch::default_instance_->InitAsDefaultInstance();
  Match_CS_CancelPVPMatch::default_instance_->InitAsDefaultInstance();
  Match_SC_CancelPVPMatch::default_instance_->InitAsDefaultInstance();
  PVPRewardItem::default_instance_->InitAsDefaultInstance();
  Match_SC_PVPResult::default_instance_->InitAsDefaultInstance();
  Match_SC_ArenaResult::default_instance_->InitAsDefaultInstance();
  Match_SC_ContinueWinNum::default_instance_->InitAsDefaultInstance();
  Match_SC_ArenaMatchResult::default_instance_->InitAsDefaultInstance();
  Match_SC_NotifyOtherMatch::default_instance_->InitAsDefaultInstance();
  Match_CS_GetPVPInfo::default_instance_->InitAsDefaultInstance();
  Match_SC_GetPVPInfo::default_instance_->InitAsDefaultInstance();
  Match_CS_GetPVPReward::default_instance_->InitAsDefaultInstance();
  Match_SC_GetPVPReward::default_instance_->InitAsDefaultInstance();
  Match_CS_GetArenaInfo::default_instance_->InitAsDefaultInstance();
  Match_SC_GetArenaInfo::default_instance_->InitAsDefaultInstance();
  Match_CS_GetArenaReward::default_instance_->InitAsDefaultInstance();
  Match_SC_GetArenaReward::default_instance_->InitAsDefaultInstance();
  Match_CS_GetBoatPVPInfo::default_instance_->InitAsDefaultInstance();
  Match_SC_GetBoatPVPInfo::default_instance_->InitAsDefaultInstance();
  Match_CS_GetBoatPVPReward::default_instance_->InitAsDefaultInstance();
  Match_SC_GetBoatPVPReward::default_instance_->InitAsDefaultInstance();
  Match2Battle_SendPlyData::default_instance_->InitAsDefaultInstance();
  Match2Battle_SendAllPlyData::default_instance_->InitAsDefaultInstance();
  Match2Game_PVPResult::default_instance_->InitAsDefaultInstance();
  Match2Game_CreateRoom::default_instance_->InitAsDefaultInstance();
  Battle2Match_PVPResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_match_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_match_2eproto {
  StaticDescriptorInitializer_match_2eproto() {
    protobuf_AddDesc_match_2eproto();
  }
} static_descriptor_initializer_match_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PVPInfo::kScoreFieldNumber;
const int PVPInfo::kWinNumFieldNumber;
const int PVPInfo::kTotalNumFieldNumber;
const int PVPInfo::kContinueNumFieldNumber;
const int PVPInfo::kFirstRewardFieldNumber;
const int PVPInfo::kThreeRewardFieldNumber;
const int PVPInfo::kThreeWinRewardFieldNumber;
#endif  // !_MSC_VER

PVPInfo::PVPInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PVPInfo::InitAsDefaultInstance() {
}

PVPInfo::PVPInfo(const PVPInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PVPInfo::SharedCtor() {
  _cached_size_ = 0;
  score_ = 0;
  win_num_ = 0;
  total_num_ = 0;
  continue_num_ = 0;
  first_reward_ = 0;
  three_reward_ = 0;
  three_win_reward_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PVPInfo::~PVPInfo() {
  SharedDtor();
}

void PVPInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PVPInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PVPInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PVPInfo_descriptor_;
}

const PVPInfo& PVPInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_match_2eproto();
  return *default_instance_;
}

PVPInfo* PVPInfo::default_instance_ = NULL;

PVPInfo* PVPInfo::New() const {
  return new PVPInfo;
}

void PVPInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    score_ = 0;
    win_num_ = 0;
    total_num_ = 0;
    continue_num_ = 0;
    first_reward_ = 0;
    three_reward_ = 0;
    three_win_reward_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PVPInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_win_num;
        break;
      }

      // optional int32 win_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_num_)));
          set_has_win_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_total_num;
        break;
      }

      // optional int32 total_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_num_)));
          set_has_total_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_continue_num;
        break;
      }

      // optional int32 continue_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_continue_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &continue_num_)));
          set_has_continue_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_first_reward;
        break;
      }

      // optional int32 first_reward = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &first_reward_)));
          set_has_first_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_three_reward;
        break;
      }

      // optional int32 three_reward = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_three_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &three_reward_)));
          set_has_three_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_three_win_reward;
        break;
      }

      // optional int32 three_win_reward = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_three_win_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &three_win_reward_)));
          set_has_three_win_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PVPInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 score = 1;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->score(), output);
  }

  // optional int32 win_num = 2;
  if (has_win_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->win_num(), output);
  }

  // optional int32 total_num = 3;
  if (has_total_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->total_num(), output);
  }

  // optional int32 continue_num = 4;
  if (has_continue_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->continue_num(), output);
  }

  // optional int32 first_reward = 5;
  if (has_first_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->first_reward(), output);
  }

  // optional int32 three_reward = 6;
  if (has_three_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->three_reward(), output);
  }

  // optional int32 three_win_reward = 7;
  if (has_three_win_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->three_win_reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PVPInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 score = 1;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->score(), target);
  }

  // optional int32 win_num = 2;
  if (has_win_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->win_num(), target);
  }

  // optional int32 total_num = 3;
  if (has_total_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->total_num(), target);
  }

  // optional int32 continue_num = 4;
  if (has_continue_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->continue_num(), target);
  }

  // optional int32 first_reward = 5;
  if (has_first_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->first_reward(), target);
  }

  // optional int32 three_reward = 6;
  if (has_three_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->three_reward(), target);
  }

  // optional int32 three_win_reward = 7;
  if (has_three_win_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->three_win_reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PVPInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 score = 1;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int32 win_num = 2;
    if (has_win_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_num());
    }

    // optional int32 total_num = 3;
    if (has_total_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_num());
    }

    // optional int32 continue_num = 4;
    if (has_continue_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->continue_num());
    }

    // optional int32 first_reward = 5;
    if (has_first_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->first_reward());
    }

    // optional int32 three_reward = 6;
    if (has_three_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->three_reward());
    }

    // optional int32 three_win_reward = 7;
    if (has_three_win_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->three_win_reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PVPInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PVPInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PVPInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PVPInfo::MergeFrom(const PVPInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_win_num()) {
      set_win_num(from.win_num());
    }
    if (from.has_total_num()) {
      set_total_num(from.total_num());
    }
    if (from.has_continue_num()) {
      set_continue_num(from.continue_num());
    }
    if (from.has_first_reward()) {
      set_first_reward(from.first_reward());
    }
    if (from.has_three_reward()) {
      set_three_reward(from.three_reward());
    }
    if (from.has_three_win_reward()) {
      set_three_win_reward(from.three_win_reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PVPInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVPInfo::CopyFrom(const PVPInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVPInfo::IsInitialized() const {

  return true;
}

void PVPInfo::Swap(PVPInfo* other) {
  if (other != this) {
    std::swap(score_, other->score_);
    std::swap(win_num_, other->win_num_);
    std::swap(total_num_, other->total_num_);
    std::swap(continue_num_, other->continue_num_);
    std::swap(first_reward_, other->first_reward_);
    std::swap(three_reward_, other->three_reward_);
    std::swap(three_win_reward_, other->three_win_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PVPInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PVPInfo_descriptor_;
  metadata.reflection = PVPInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaInfo::kScoreFieldNumber;
const int ArenaInfo::kStageFieldNumber;
const int ArenaInfo::kWinNumFieldNumber;
const int ArenaInfo::kTotalNumFieldNumber;
const int ArenaInfo::kContinueNumFieldNumber;
const int ArenaInfo::kRewardlistFieldNumber;
#endif  // !_MSC_VER

ArenaInfo::ArenaInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaInfo::InitAsDefaultInstance() {
}

ArenaInfo::ArenaInfo(const ArenaInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaInfo::SharedCtor() {
  _cached_size_ = 0;
  score_ = 0;
  stage_ = 0;
  win_num_ = 0;
  total_num_ = 0;
  continue_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaInfo::~ArenaInfo() {
  SharedDtor();
}

void ArenaInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArenaInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaInfo_descriptor_;
}

const ArenaInfo& ArenaInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_match_2eproto();
  return *default_instance_;
}

ArenaInfo* ArenaInfo::default_instance_ = NULL;

ArenaInfo* ArenaInfo::New() const {
  return new ArenaInfo;
}

void ArenaInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    score_ = 0;
    stage_ = 0;
    win_num_ = 0;
    total_num_ = 0;
    continue_num_ = 0;
  }
  rewardlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stage;
        break;
      }

      // optional int32 stage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_)));
          set_has_stage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_win_num;
        break;
      }

      // optional int32 win_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_num_)));
          set_has_win_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_total_num;
        break;
      }

      // optional int32 total_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_num_)));
          set_has_total_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_continue_num;
        break;
      }

      // optional int32 continue_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_continue_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &continue_num_)));
          set_has_continue_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rewardlist;
        break;
      }

      // repeated int32 rewardlist = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_rewardlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_rewardlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rewardlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 score = 1;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->score(), output);
  }

  // optional int32 stage = 2;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->stage(), output);
  }

  // optional int32 win_num = 3;
  if (has_win_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->win_num(), output);
  }

  // optional int32 total_num = 4;
  if (has_total_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->total_num(), output);
  }

  // optional int32 continue_num = 5;
  if (has_continue_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->continue_num(), output);
  }

  // repeated int32 rewardlist = 6;
  for (int i = 0; i < this->rewardlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->rewardlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 score = 1;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->score(), target);
  }

  // optional int32 stage = 2;
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->stage(), target);
  }

  // optional int32 win_num = 3;
  if (has_win_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->win_num(), target);
  }

  // optional int32 total_num = 4;
  if (has_total_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->total_num(), target);
  }

  // optional int32 continue_num = 5;
  if (has_continue_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->continue_num(), target);
  }

  // repeated int32 rewardlist = 6;
  for (int i = 0; i < this->rewardlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->rewardlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 score = 1;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int32 stage = 2;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage());
    }

    // optional int32 win_num = 3;
    if (has_win_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_num());
    }

    // optional int32 total_num = 4;
    if (has_total_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_num());
    }

    // optional int32 continue_num = 5;
    if (has_continue_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->continue_num());
    }

  }
  // repeated int32 rewardlist = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->rewardlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->rewardlist(i));
    }
    total_size += 1 * this->rewardlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaInfo::MergeFrom(const ArenaInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardlist_.MergeFrom(from.rewardlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_stage()) {
      set_stage(from.stage());
    }
    if (from.has_win_num()) {
      set_win_num(from.win_num());
    }
    if (from.has_total_num()) {
      set_total_num(from.total_num());
    }
    if (from.has_continue_num()) {
      set_continue_num(from.continue_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaInfo::CopyFrom(const ArenaInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaInfo::IsInitialized() const {

  return true;
}

void ArenaInfo::Swap(ArenaInfo* other) {
  if (other != this) {
    std::swap(score_, other->score_);
    std::swap(stage_, other->stage_);
    std::swap(win_num_, other->win_num_);
    std::swap(total_num_, other->total_num_);
    std::swap(continue_num_, other->continue_num_);
    rewardlist_.Swap(&other->rewardlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaInfo_descriptor_;
  metadata.reflection = ArenaInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Match_CS_PVPMatch::kUsualIdFieldNumber;
#endif  // !_MSC_VER

Match_CS_PVPMatch::Match_CS_PVPMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Match_CS_PVPMatch::InitAsDefaultInstance() {
}

Match_CS_PVPMatch::Match_CS_PVPMatch(const Match_CS_PVPMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Match_CS_PVPMatch::SharedCtor() {
  _cached_size_ = 0;
  usual_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Match_CS_PVPMatch::~Match_CS_PVPMatch() {
  SharedDtor();
}

void Match_CS_PVPMatch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Match_CS_PVPMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Match_CS_PVPMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Match_CS_PVPMatch_descriptor_;
}

const Match_CS_PVPMatch& Match_CS_PVPMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_match_2eproto();
  return *default_instance_;
}

Match_CS_PVPMatch* Match_CS_PVPMatch::default_instance_ = NULL;

Match_CS_PVPMatch* Match_CS_PVPMatch::New() const {
  return new Match_CS_PVPMatch;
}

void Match_CS_PVPMatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    usual_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Match_CS_PVPMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 usual_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usual_id_)));
          set_has_usual_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Match_CS_PVPMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 usual_id = 1;
  if (has_usual_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->usual_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Match_CS_PVPMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 usual_id = 1;
  if (has_usual_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->usual_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Match_CS_PVPMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 usual_id = 1;
    if (has_usual_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usual_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Match_CS_PVPMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Match_CS_PVPMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Match_CS_PVPMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Match_CS_PVPMatch::MergeFrom(const Match_CS_PVPMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_usual_id()) {
      set_usual_id(from.usual_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Match_CS_PVPMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Match_CS_PVPMatch::CopyFrom(const Match_CS_PVPMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Match_CS_PVPMatch::IsInitialized() const {

  return true;
}

void Match_CS_PVPMatch::Swap(Match_CS_PVPMatch* other) {
  if (other != this) {
    std::swap(usual_id_, other->usual_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Match_CS_PVPMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Match_CS_PVPMatch_descriptor_;
  metadata.reflection = Match_CS_PVPMatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Match_SC_PVPMatch::kResultFieldNumber;
const int Match_SC_PVPMatch::kIpFieldNumber;
const int Match_SC_PVPMatch::kPortFieldNumber;
const int Match_SC_PVPMatch::kCharidFieldNumber;
#endif  // !_MSC_VER

Match_SC_PVPMatch::Match_SC_PVPMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Match_SC_PVPMatch::InitAsDefaultInstance() {
}

Match_SC_PVPMatch::Match_SC_PVPMatch(const Match_SC_PVPMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Match_SC_PVPMatch::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Match_SC_PVPMatch::~Match_SC_PVPMatch() {
  SharedDtor();
}

void Match_SC_PVPMatch::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void Match_SC_PVPMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Match_SC_PVPMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Match_SC_PVPMatch_descriptor_;
}

const Match_SC_PVPMatch& Match_SC_PVPMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_match_2eproto();
  return *default_instance_;
}

Match_SC_PVPMatch* Match_SC_PVPMatch::default_instance_ = NULL;

Match_SC_PVPMatch* Match_SC_PVPMatch::New() const {
  return new Match_SC_PVPMatch;
}

void Match_SC_PVPMatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
    charid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Match_SC_PVPMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // optional string ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // optional int32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Match_SC_PVPMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip(), output);
  }

  // optional int32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  // optional uint64 charid = 4;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Match_SC_PVPMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // optional int32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  // optional uint64 charid = 4;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Match_SC_PVPMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional uint64 charid = 4;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Match_SC_PVPMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Match_SC_PVPMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Match_SC_PVPMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Match_SC_PVPMatch::MergeFrom(const Match_SC_PVPMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Match_SC_PVPMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Match_SC_PVPMatch::CopyFrom(const Match_SC_PVPMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Match_SC_PVPMatch::IsInitialized() const {

  return true;
}

void Match_SC_PVPMatch::Swap(Match_SC_PVPMatch* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Match_SC_PVPMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Match_SC_PVPMatch_descriptor_;
  metadata.reflection = Match_SC_PVPMatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Match_CS_CancelPVPMatch::Match_CS_CancelPVPMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Match_CS_CancelPVPMatch::InitAsDefaultInstance() {
}

Match_CS_CancelPVPMatch::Match_CS_CancelPVPMatch(const Match_CS_CancelPVPMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Match_CS_CancelPVPMatch::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Match_CS_CancelPVPMatch::~Match_CS_CancelPVPMatch() {
  SharedDtor();
}

void Match_CS_CancelPVPMatch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Match_CS_CancelPVPMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Match_CS_CancelPVPMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Match_CS_CancelPVPMatch_descriptor_;
}

const Match_CS_CancelPVPMatch& Match_CS_CancelPVPMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_match_2eproto();
  return *default_instance_;
}

Match_CS_CancelPVPMatch* Match_CS_CancelPVPMatch::default_instance_ = NULL;

Match_CS_CancelPVPMatch* Match_CS_CancelPVPMatch::New() const {
  return new Match_CS_CancelPVPMatch;
}

void Match_CS_CancelPVPMatch::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Match_CS_CancelPVPMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Match_CS_CancelPVPMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Match_CS_CancelPVPMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Match_CS_CancelPVPMatch::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Match_CS_CancelPVPMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Match_CS_CancelPVPMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Match_CS_CancelPVPMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Match_CS_CancelPVPMatch::MergeFrom(const Match_CS_CancelPVPMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Match_CS_CancelPVPMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Match_CS_CancelPVPMatch::CopyFrom(const Match_CS_CancelPVPMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Match_CS_CancelPVPMatch::IsInitialized() const {

  return true;
}

void Match_CS_CancelPVPMatch::Swap(Match_CS_CancelPVPMatch* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Match_CS_CancelPVPMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Match_CS_CancelPVPMatch_descriptor_;
  metadata.reflection = Match_CS_CancelPVPMatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Match_SC_CancelPVPMatch::kResultFieldNumber;
#endif  // !_MSC_VER

Match_SC_CancelPVPMatch::Match_SC_CancelPVPMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Match_SC_CancelPVPMatch::InitAsDefaultInstance() {
}

Match_SC_CancelPVPMatch::Match_SC_CancelPVPMatch(const Match_SC_CancelPVPMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Match_SC_CancelPVPMatch::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Match_SC_CancelPVPMatch::~Match_SC_CancelPVPMatch() {
  SharedDtor();
}

void Match_SC_CancelPVPMatch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Match_SC_CancelPVPMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Match_SC_CancelPVPMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Match_SC_CancelPVPMatch_descriptor_;
}

const Match_SC_CancelPVPMatch& Match_SC_CancelPVPMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_match_2eproto();
  return *default_instance_;
}

Match_SC_CancelPVPMatch* Match_SC_CancelPVPMatch::default_instance_ = NULL;

Match_SC_CancelPVPMatch* Match_SC_CancelPVPMatch::New() const {
  return new Match_SC_CancelPVPMatch;
}

void Match_SC_CancelPVPMatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Match_SC_CancelPVPMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Match_SC_CancelPVPMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Match_SC_CancelPVPMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Match_SC_CancelPVPMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Match_SC_CancelPVPMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Match_SC_CancelPVPMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Match_SC_CancelPVPMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Match_SC_CancelPVPMatch::MergeFrom(const Match_SC_CancelPVPMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Match_SC_CancelPVPMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Match_SC_CancelPVPMatch::CopyFrom(const Match_SC_CancelPVPMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Match_SC_CancelPVPMatch::IsInitialized() const {

  return true;
}

void Match_SC_CancelPVPMatch::Swap(Match_SC_CancelPVPMatch* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Match_SC_CancelPVPMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Match_SC_CancelPVPMatch_descriptor_;
  metadata.reflection = Match_SC_CancelPVPMatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PVPRewardItem::kIdFieldNumber;
const int PVPRewardItem::kNumFieldNumber;
#endif  // !_MSC_VER

PVPRewardItem::PVPRewardItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PVPRewardItem::InitAsDefaultInstance() {
}

PVPRewardItem::PVPRewardItem(const PVPRewardItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PVPRewardItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PVPRewardItem::~PVPRewardItem() {
  SharedDtor();
}

void PVPRewardItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PVPRewardItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PVPRewardItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PVPRewardItem_descriptor_;
}

const PVPRewardItem& PVPRewardItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_match_2eproto();
  return *default_instance_;
}

PVPRewardItem* PVPRewardItem::default_instance_ = NULL;

PVPRewardItem* PVPRewardItem::New() const {
  return new PVPRewardItem;
}

void PVPRewardItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PVPRewardItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PVPRewardItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PVPRewardItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PVPRewardItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PVPRewardItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PVPRewardItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PVPRewardItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PVPRewardItem::MergeFrom(const PVPRewardItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PVPRewardItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVPRewardItem::CopyFrom(const PVPRewardItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVPRewardItem::IsInitialized() const {

  return true;
}

void PVPRewardItem::Swap(PVPRewardItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PVPRewardItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PVPRewardItem_descriptor_;
  metadata.reflection = PVPRewardItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Match_SC_PVPResult::kResultFieldNumber;
const int Match_SC_PVPResult::kPassTimeFieldNumber;
const int Match_SC_PVPResult::kItemListFieldNumber;
const int Match_SC_PVPResult::kGetScoreFieldNumber;
const int Match_SC_PVPResult::kUsualIdFieldNumber;
const int Match_SC_PVPResult::kPvpInfoFieldNumber;
#endif  // !_MSC_VER

Match_SC_PVPResult::Match_SC_PVPResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Match_SC_PVPResult::InitAsDefaultInstance() {
  pvp_info_ = const_cast< ::proto::message::PVPInfo*>(&::proto::message::PVPInfo::default_instance());
}

Match_SC_PVPResult::Match_SC_PVPResult(const Match_SC_PVPResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Match_SC_PVPResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  pass_time_ = 0;
  get_score_ = 0;
  usual_id_ = 0;
  pvp_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Match_SC_PVPResult::~Match_SC_PVPResult() {
  SharedDtor();
}

void Match_SC_PVPResult::SharedDtor() {
  if (this != default_instance_) {
    delete pvp_info_;
  }
}

void Match_SC_PVPResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Match_SC_PVPResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Match_SC_PVPResult_descriptor_;
}

const Match_SC_PVPResult& Match_SC_PVPResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_match_2eproto();
  return *default_instance_;
}

Match_SC_PVPResult* Match_SC_PVPResult::default_instance_ = NULL;

Match_SC_PVPResult* Match_SC_PVPResult::New() const {
  return new Match_SC_PVPResult;
}

void Match_SC_PVPResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    pass_time_ = 0;
    get_score_ = 0;
    usual_id_ = 0;
    if (has_pvp_info()) {
      if (pvp_info_ != NULL) pvp_info_->::proto::message::PVPInfo::Clear();
    }
  }
  item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Match_SC_PVPResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pass_time;
        break;
      }

      // optional int32 pass_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pass_time_)));
          set_has_pass_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item_list;
        break;
      }

      // repeated .proto.message.PVPRewardItem item_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item_list;
        if (input->ExpectTag(32)) goto parse_get_score;
        break;
      }

      // optional int32 get_score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &get_score_)));
          set_has_get_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_usual_id;
        break;
      }

      // optional int32 usual_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usual_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usual_id_)));
          set_has_usual_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_pvp_info;
        break;
      }

      // optional .proto.message.PVPInfo pvp_info = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pvp_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pvp_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Match_SC_PVPResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 pass_time = 2;
  if (has_pass_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pass_time(), output);
  }

  // repeated .proto.message.PVPRewardItem item_list = 3;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item_list(i), output);
  }

  // optional int32 get_score = 4;
  if (has_get_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->get_score(), output);
  }

  // optional int32 usual_id = 5;
  if (has_usual_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->usual_id(), output);
  }

  // optional .proto.message.PVPInfo pvp_info = 6;
  if (has_pvp_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->pvp_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Match_SC_PVPResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 pass_time = 2;
  if (has_pass_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pass_time(), target);
  }

  // repeated .proto.message.PVPRewardItem item_list = 3;
  for (int i = 0; i < this->item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item_list(i), target);
  }

  // optional int32 get_score = 4;
  if (has_get_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->get_score(), target);
  }

  // optional int32 usual_id = 5;
  if (has_usual_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->usual_id(), target);
  }

  // optional .proto.message.PVPInfo pvp_info = 6;
  if (has_pvp_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->pvp_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Match_SC_PVPResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 pass_time = 2;
    if (has_pass_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pass_time());
    }

    // optional int32 get_score = 4;
    if (has_get_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->get_score());
    }

    // optional int32 usual_id = 5;
    if (has_usual_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usual_id());
    }

    // optional .proto.message.PVPInfo pvp_info = 6;
    if (has_pvp_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pvp_info());
    }

  }
  // repeated .proto.message.PVPRewardItem item_list = 3;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Match_SC_PVPResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Match_SC_PVPResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Match_SC_PVPResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Match_SC_PVPResult::MergeFrom(const Match_SC_PVPResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_list_.MergeFrom(from.item_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_pass_time()) {
      set_pass_time(from.pass_time());
    }
    if (from.has_get_score()) {
      set_get_score(from.get_score());
    }
    if (from.has_usual_id()) {
      set_usual_id(from.usual_id());
    }
    if (from.has_pvp_info()) {
      mutable_pvp_info()->::proto::message::PVPInfo::MergeFrom(from.pvp_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Match_SC_PVPResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Match_SC_PVPResult::CopyFrom(const Match_SC_PVPResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Match_SC_PVPResult::IsInitialized() const {

  return true;
}

void Match_SC_PVPResult::Swap(Match_SC_PVPResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(pass_time_, other->pass_time_);
    item_list_.Swap(&other->item_list_);
    std::swap(get_score_, other->get_score_);
    std::swap(usual_id_, other->usual_id_);
    std::swap(pvp_info_, other->pvp_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Match_SC_PVPResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Match_SC_PVPResult_descriptor_;
  metadata.reflection = Match_SC_PVPResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Match_SC_ArenaResult::kResultFieldNumber;
const int Match_SC_ArenaResult::kPassTimeFieldNumber;
const int Match_SC_ArenaResult::kItemListFieldNumber;
const int Match_SC_ArenaResult::kGetScoreFieldNumber;
const int Match_SC_ArenaResult::kUsualIdFieldNumber;
const int Match_SC_ArenaResult::kArenaInfoFieldNumber;
const int Match_SC_ArenaResult::kReasonFieldNumber;
#endif  // !_MSC_VER

Match_SC_ArenaResult::Match_SC_ArenaResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Match_SC_ArenaResult::InitAsDefaultInstance() {
  arena_info_ = const_cast< ::proto::message::ArenaInfo*>(&::proto::message::ArenaInfo::default_instance());
}

Match_SC_ArenaResult::Match_SC_ArenaResult(const Match_SC_ArenaResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Match_SC_ArenaResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  pass_time_ = 0;
  get_score_ = 0;
  usual_id_ = 0;
  arena_info_ = NULL;
  reason_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Match_SC_ArenaResult::~Match_SC_ArenaResult() {
  SharedDtor();
}

void Match_SC_ArenaResult::SharedDtor() {
  if (this != default_instance_) {
    delete arena_info_;
  }
}

void Match_SC_ArenaResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Match_SC_ArenaResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Match_SC_ArenaResult_descriptor_;
}

const Match_SC_ArenaResult& Match_SC_ArenaResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_match_2eproto();
  return *default_instance_;
}

Match_SC_ArenaResult* Match_SC_ArenaResult::default_instance_ = NULL;

Match_SC_ArenaResult* Match_SC_ArenaResult::New() const {
  return new Match_SC_ArenaResult;
}

void Match_SC_ArenaResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    pass_time_ = 0;
    get_score_ = 0;
    usual_id_ = 0;
    if (has_arena_info()) {
      if (arena_info_ != NULL) arena_info_->::proto::message::ArenaInfo::Clear();
    }
    reason_ = 0u;
  }
  item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Match_SC_ArenaResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pass_time;
        break;
      }

      // optional int32 pass_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pass_time_)));
          set_has_pass_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item_list;
        break;
      }

      // repeated .proto.message.PVPRewardItem item_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item_list;
        if (input->ExpectTag(32)) goto parse_get_score;
        break;
      }

      // optional int32 get_score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &get_score_)));
          set_has_get_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_usual_id;
        break;
      }

      // optional int32 usual_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usual_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usual_id_)));
          set_has_usual_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_arena_info;
        break;
      }

      // optional .proto.message.ArenaInfo arena_info = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arena_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_arena_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_reason;
        break;
      }

      // optional uint32 reason = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Match_SC_ArenaResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 pass_time = 2;
  if (has_pass_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pass_time(), output);
  }

  // repeated .proto.message.PVPRewardItem item_list = 3;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item_list(i), output);
  }

  // optional int32 get_score = 4;
  if (has_get_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->get_score(), output);
  }

  // optional int32 usual_id = 5;
  if (has_usual_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->usual_id(), output);
  }

  // optional .proto.message.ArenaInfo arena_info = 6;
  if (has_arena_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->arena_info(), output);
  }

  // optional uint32 reason = 7;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Match_SC_ArenaResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 pass_time = 2;
  if (has_pass_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pass_time(), target);
  }

  // repeated .proto.message.PVPRewardItem item_list = 3;
  for (int i = 0; i < this->item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item_list(i), target);
  }

  // optional int32 get_score = 4;
  if (has_get_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->get_score(), target);
  }

  // optional int32 usual_id = 5;
  if (has_usual_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->usual_id(), target);
  }

  // optional .proto.message.ArenaInfo arena_info = 6;
  if (has_arena_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->arena_info(), target);
  }

  // optional uint32 reason = 7;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Match_SC_ArenaResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 pass_time = 2;
    if (has_pass_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pass_time());
    }

    // optional int32 get_score = 4;
    if (has_get_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->get_score());
    }

    // optional int32 usual_id = 5;
    if (has_usual_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usual_id());
    }

    // optional .proto.message.ArenaInfo arena_info = 6;
    if (has_arena_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->arena_info());
    }

    // optional uint32 reason = 7;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason());
    }

  }
  // repeated .proto.message.PVPRewardItem item_list = 3;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Match_SC_ArenaResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Match_SC_ArenaResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Match_SC_ArenaResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Match_SC_ArenaResult::MergeFrom(const Match_SC_ArenaResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_list_.MergeFrom(from.item_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_pass_time()) {
      set_pass_time(from.pass_time());
    }
    if (from.has_get_score()) {
      set_get_score(from.get_score());
    }
    if (from.has_usual_id()) {
      set_usual_id(from.usual_id());
    }
    if (from.has_arena_info()) {
      mutable_arena_info()->::proto::message::ArenaInfo::MergeFrom(from.arena_info());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Match_SC_ArenaResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Match_SC_ArenaResult::CopyFrom(const Match_SC_ArenaResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Match_SC_ArenaResult::IsInitialized() const {

  return true;
}

void Match_SC_ArenaResult::Swap(Match_SC_ArenaResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(pass_time_, other->pass_time_);
    item_list_.Swap(&other->item_list_);
    std::swap(get_score_, other->get_score_);
    std::swap(usual_id_, other->usual_id_);
    std::swap(arena_info_, other->arena_info_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Match_SC_ArenaResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Match_SC_ArenaResult_descriptor_;
  metadata.reflection = Match_SC_ArenaResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Match_SC_ContinueWinNum::kCharidFieldNumber;
const int Match_SC_ContinueWinNum::kNameFieldNumber;
const int Match_SC_ContinueWinNum::kWinNumFieldNumber;
const int Match_SC_ContinueWinNum::kUsualIdFieldNumber;
#endif  // !_MSC_VER

Match_SC_ContinueWinNum::Match_SC_ContinueWinNum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Match_SC_ContinueWinNum::InitAsDefaultInstance() {
}

Match_SC_ContinueWinNum::Match_SC_ContinueWinNum(const Match_SC_ContinueWinNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Match_SC_ContinueWinNum::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  win_num_ = 0;
  usual_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Match_SC_ContinueWinNum::~Match_SC_ContinueWinNum() {
  SharedDtor();
}

void Match_SC_ContinueWinNum::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Match_SC_ContinueWinNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Match_SC_ContinueWinNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Match_SC_ContinueWinNum_descriptor_;
}

const Match_SC_ContinueWinNum& Match_SC_ContinueWinNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_match_2eproto();
  return *default_instance_;
}

Match_SC_ContinueWinNum* Match_SC_ContinueWinNum::default_instance_ = NULL;

Match_SC_ContinueWinNum* Match_SC_ContinueWinNum::New() const {
  return new Match_SC_ContinueWinNum;
}

void Match_SC_ContinueWinNum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    win_num_ = 0;
    usual_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Match_SC_ContinueWinNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_win_num;
        break;
      }

      // optional int32 win_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_num_)));
          set_has_win_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_usual_id;
        break;
      }

      // optional int32 usual_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usual_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usual_id_)));
          set_has_usual_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Match_SC_ContinueWinNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 win_num = 3;
  if (has_win_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->win_num(), output);
  }

  // optional int32 usual_id = 4;
  if (has_usual_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->usual_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Match_SC_ContinueWinNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 win_num = 3;
  if (has_win_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->win_num(), target);
  }

  // optional int32 usual_id = 4;
  if (has_usual_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->usual_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Match_SC_ContinueWinNum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 win_num = 3;
    if (has_win_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_num());
    }

    // optional int32 usual_id = 4;
    if (has_usual_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usual_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Match_SC_ContinueWinNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Match_SC_ContinueWinNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Match_SC_ContinueWinNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Match_SC_ContinueWinNum::MergeFrom(const Match_SC_ContinueWinNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_win_num()) {
      set_win_num(from.win_num());
    }
    if (from.has_usual_id()) {
      set_usual_id(from.usual_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Match_SC_ContinueWinNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Match_SC_ContinueWinNum::CopyFrom(const Match_SC_ContinueWinNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Match_SC_ContinueWinNum::IsInitialized() const {

  return true;
}

void Match_SC_ContinueWinNum::Swap(Match_SC_ContinueWinNum* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(win_num_, other->win_num_);
    std::swap(usual_id_, other->usual_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Match_SC_ContinueWinNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Match_SC_ContinueWinNum_descriptor_;
  metadata.reflection = Match_SC_ContinueWinNum_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Match_SC_ArenaMatchResult::kResultFieldNumber;
const int Match_SC_ArenaMatchResult::kIpFieldNumber;
const int Match_SC_ArenaMatchResult::kPortFieldNumber;
const int Match_SC_ArenaMatchResult::kCharidFieldNumber;
const int Match_SC_ArenaMatchResult::kNameFieldNumber;
const int Match_SC_ArenaMatchResult::kCareerFieldNumber;
const int Match_SC_ArenaMatchResult::kLevelFieldNumber;
const int Match_SC_ArenaMatchResult::kGuildNameFieldNumber;
const int Match_SC_ArenaMatchResult::kScoreFieldNumber;
const int Match_SC_ArenaMatchResult::kDhlevFieldNumber;
#endif  // !_MSC_VER

Match_SC_ArenaMatchResult::Match_SC_ArenaMatchResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Match_SC_ArenaMatchResult::InitAsDefaultInstance() {
}

Match_SC_ArenaMatchResult::Match_SC_ArenaMatchResult(const Match_SC_ArenaMatchResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Match_SC_ArenaMatchResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  career_ = 0;
  level_ = 0;
  guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  score_ = 0;
  dhlev_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Match_SC_ArenaMatchResult::~Match_SC_ArenaMatchResult() {
  SharedDtor();
}

void Match_SC_ArenaMatchResult::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete guild_name_;
  }
  if (this != default_instance_) {
  }
}

void Match_SC_ArenaMatchResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Match_SC_ArenaMatchResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Match_SC_ArenaMatchResult_descriptor_;
}

const Match_SC_ArenaMatchResult& Match_SC_ArenaMatchResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_match_2eproto();
  return *default_instance_;
}

Match_SC_ArenaMatchResult* Match_SC_ArenaMatchResult::default_instance_ = NULL;

Match_SC_ArenaMatchResult* Match_SC_ArenaMatchResult::New() const {
  return new Match_SC_ArenaMatchResult;
}

void Match_SC_ArenaMatchResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    career_ = 0;
    level_ = 0;
    if (has_guild_name()) {
      if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
        guild_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    score_ = 0;
    dhlev_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Match_SC_ArenaMatchResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // optional string ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // optional int32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional string name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_career;
        break;
      }

      // optional int32 career = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_career:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &career_)));
          set_has_career();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_level;
        break;
      }

      // optional int32 level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_guild_name;
        break;
      }

      // optional string guild_name = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guild_name().data(), this->guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_score;
        break;
      }

      // optional int32 score = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_dhlev;
        break;
      }

      // optional uint32 dhlev = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dhlev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dhlev_)));
          set_has_dhlev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Match_SC_ArenaMatchResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip(), output);
  }

  // optional int32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  // optional uint64 charid = 4;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->charid(), output);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->name(), output);
  }

  // optional int32 career = 6;
  if (has_career()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->career(), output);
  }

  // optional int32 level = 7;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->level(), output);
  }

  // optional string guild_name = 8;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->guild_name(), output);
  }

  // optional int32 score = 9;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->score(), output);
  }

  // optional uint32 dhlev = 10;
  if (has_dhlev()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->dhlev(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Match_SC_ArenaMatchResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // optional int32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  // optional uint64 charid = 4;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->charid(), target);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // optional int32 career = 6;
  if (has_career()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->career(), target);
  }

  // optional int32 level = 7;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->level(), target);
  }

  // optional string guild_name = 8;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->guild_name(), target);
  }

  // optional int32 score = 9;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->score(), target);
  }

  // optional uint32 dhlev = 10;
  if (has_dhlev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->dhlev(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Match_SC_ArenaMatchResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional uint64 charid = 4;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 career = 6;
    if (has_career()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->career());
    }

    // optional int32 level = 7;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional string guild_name = 8;
    if (has_guild_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild_name());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 score = 9;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional uint32 dhlev = 10;
    if (has_dhlev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dhlev());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Match_SC_ArenaMatchResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Match_SC_ArenaMatchResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Match_SC_ArenaMatchResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Match_SC_ArenaMatchResult::MergeFrom(const Match_SC_ArenaMatchResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_career()) {
      set_career(from.career());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_guild_name()) {
      set_guild_name(from.guild_name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_dhlev()) {
      set_dhlev(from.dhlev());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Match_SC_ArenaMatchResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Match_SC_ArenaMatchResult::CopyFrom(const Match_SC_ArenaMatchResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Match_SC_ArenaMatchResult::IsInitialized() const {

  return true;
}

void Match_SC_ArenaMatchResult::Swap(Match_SC_ArenaMatchResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(career_, other->career_);
    std::swap(level_, other->level_);
    std::swap(guild_name_, other->guild_name_);
    std::swap(score_, other->score_);
    std::swap(dhlev_, other->dhlev_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Match_SC_ArenaMatchResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Match_SC_ArenaMatchResult_descriptor_;
  metadata.reflection = Match_SC_ArenaMatchResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Match_SC_NotifyOtherMatch::Match_SC_NotifyOtherMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Match_SC_NotifyOtherMatch::InitAsDefaultInstance() {
}

Match_SC_NotifyOtherMatch::Match_SC_NotifyOtherMatch(const Match_SC_NotifyOtherMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Match_SC_NotifyOtherMatch::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Match_SC_NotifyOtherMatch::~Match_SC_NotifyOtherMatch() {
  SharedDtor();
}

void Match_SC_NotifyOtherMatch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Match_SC_NotifyOtherMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Match_SC_NotifyOtherMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Match_SC_NotifyOtherMatch_descriptor_;
}

const Match_SC_NotifyOtherMatch& Match_SC_NotifyOtherMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_match_2eproto();
  return *default_instance_;
}

Match_SC_NotifyOtherMatch* Match_SC_NotifyOtherMatch::default_instance_ = NULL;

Match_SC_NotifyOtherMatch* Match_SC_NotifyOtherMatch::New() const {
  return new Match_SC_NotifyOtherMatch;
}

void Match_SC_NotifyOtherMatch::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Match_SC_NotifyOtherMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Match_SC_NotifyOtherMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Match_SC_NotifyOtherMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Match_SC_NotifyOtherMatch::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Match_SC_NotifyOtherMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Match_SC_NotifyOtherMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Match_SC_NotifyOtherMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Match_SC_NotifyOtherMatch::MergeFrom(const Match_SC_NotifyOtherMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Match_SC_NotifyOtherMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Match_SC_NotifyOtherMatch::CopyFrom(const Match_SC_NotifyOtherMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Match_SC_NotifyOtherMatch::IsInitialized() const {

  return true;
}

void Match_SC_NotifyOtherMatch::Swap(Match_SC_NotifyOtherMatch* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Match_SC_NotifyOtherMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Match_SC_NotifyOtherMatch_descriptor_;
  metadata.reflection = Match_SC_NotifyOtherMatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Match_CS_GetPVPInfo::kUsualIdFieldNumber;
#endif  // !_MSC_VER

Match_CS_GetPVPInfo::Match_CS_GetPVPInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Match_CS_GetPVPInfo::InitAsDefaultInstance() {
}

Match_CS_GetPVPInfo::Match_CS_GetPVPInfo(const Match_CS_GetPVPInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Match_CS_GetPVPInfo::SharedCtor() {
  _cached_size_ = 0;
  usual_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Match_CS_GetPVPInfo::~Match_CS_GetPVPInfo() {
  SharedDtor();
}

void Match_CS_GetPVPInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Match_CS_GetPVPInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Match_CS_GetPVPInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Match_CS_GetPVPInfo_descriptor_;
}

const Match_CS_GetPVPInfo& Match_CS_GetPVPInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_match_2eproto();
  return *default_instance_;
}

Match_CS_GetPVPInfo* Match_CS_GetPVPInfo::default_instance_ = NULL;

Match_CS_GetPVPInfo* Match_CS_GetPVPInfo::New() const {
  return new Match_CS_GetPVPInfo;
}

void Match_CS_GetPVPInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    usual_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Match_CS_GetPVPInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 usual_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usual_id_)));
          set_has_usual_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Match_CS_GetPVPInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 usual_id = 1;
  if (has_usual_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->usual_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Match_CS_GetPVPInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 usual_id = 1;
  if (has_usual_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->usual_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Match_CS_GetPVPInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 usual_id = 1;
    if (has_usual_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usual_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Match_CS_GetPVPInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Match_CS_GetPVPInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Match_CS_GetPVPInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Match_CS_GetPVPInfo::MergeFrom(const Match_CS_GetPVPInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_usual_id()) {
      set_usual_id(from.usual_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Match_CS_GetPVPInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Match_CS_GetPVPInfo::CopyFrom(const Match_CS_GetPVPInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Match_CS_GetPVPInfo::IsInitialized() const {

  return true;
}

void Match_CS_GetPVPInfo::Swap(Match_CS_GetPVPInfo* other) {
  if (other != this) {
    std::swap(usual_id_, other->usual_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Match_CS_GetPVPInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Match_CS_GetPVPInfo_descriptor_;
  metadata.reflection = Match_CS_GetPVPInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Match_SC_GetPVPInfo::kResultFieldNumber;
const int Match_SC_GetPVPInfo::kUsualIdFieldNumber;
const int Match_SC_GetPVPInfo::kRemainTimeFieldNumber;
const int Match_SC_GetPVPInfo::kPvpInfoFieldNumber;
#endif  // !_MSC_VER

Match_SC_GetPVPInfo::Match_SC_GetPVPInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Match_SC_GetPVPInfo::InitAsDefaultInstance() {
  pvp_info_ = const_cast< ::proto::message::PVPInfo*>(&::proto::message::PVPInfo::default_instance());
}

Match_SC_GetPVPInfo::Match_SC_GetPVPInfo(const Match_SC_GetPVPInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Match_SC_GetPVPInfo::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  usual_id_ = 0;
  remain_time_ = 0;
  pvp_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Match_SC_GetPVPInfo::~Match_SC_GetPVPInfo() {
  SharedDtor();
}

void Match_SC_GetPVPInfo::SharedDtor() {
  if (this != default_instance_) {
    delete pvp_info_;
  }
}

void Match_SC_GetPVPInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Match_SC_GetPVPInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Match_SC_GetPVPInfo_descriptor_;
}

const Match_SC_GetPVPInfo& Match_SC_GetPVPInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_match_2eproto();
  return *default_instance_;
}

Match_SC_GetPVPInfo* Match_SC_GetPVPInfo::default_instance_ = NULL;

Match_SC_GetPVPInfo* Match_SC_GetPVPInfo::New() const {
  return new Match_SC_GetPVPInfo;
}

void Match_SC_GetPVPInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    usual_id_ = 0;
    remain_time_ = 0;
    if (has_pvp_info()) {
      if (pvp_info_ != NULL) pvp_info_->::proto::message::PVPInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Match_SC_GetPVPInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_usual_id;
        break;
      }

      // optional int32 usual_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usual_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usual_id_)));
          set_has_usual_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_remain_time;
        break;
      }

      // optional int32 remain_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remain_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remain_time_)));
          set_has_remain_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pvp_info;
        break;
      }

      // optional .proto.message.PVPInfo pvp_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pvp_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pvp_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Match_SC_GetPVPInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 usual_id = 2;
  if (has_usual_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->usual_id(), output);
  }

  // optional int32 remain_time = 3;
  if (has_remain_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->remain_time(), output);
  }

  // optional .proto.message.PVPInfo pvp_info = 4;
  if (has_pvp_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pvp_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Match_SC_GetPVPInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 usual_id = 2;
  if (has_usual_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->usual_id(), target);
  }

  // optional int32 remain_time = 3;
  if (has_remain_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->remain_time(), target);
  }

  // optional .proto.message.PVPInfo pvp_info = 4;
  if (has_pvp_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pvp_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Match_SC_GetPVPInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 usual_id = 2;
    if (has_usual_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usual_id());
    }

    // optional int32 remain_time = 3;
    if (has_remain_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remain_time());
    }

    // optional .proto.message.PVPInfo pvp_info = 4;
    if (has_pvp_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pvp_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Match_SC_GetPVPInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Match_SC_GetPVPInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Match_SC_GetPVPInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Match_SC_GetPVPInfo::MergeFrom(const Match_SC_GetPVPInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_usual_id()) {
      set_usual_id(from.usual_id());
    }
    if (from.has_remain_time()) {
      set_remain_time(from.remain_time());
    }
    if (from.has_pvp_info()) {
      mutable_pvp_info()->::proto::message::PVPInfo::MergeFrom(from.pvp_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Match_SC_GetPVPInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Match_SC_GetPVPInfo::CopyFrom(const Match_SC_GetPVPInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Match_SC_GetPVPInfo::IsInitialized() const {

  return true;
}

void Match_SC_GetPVPInfo::Swap(Match_SC_GetPVPInfo* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(usual_id_, other->usual_id_);
    std::swap(remain_time_, other->remain_time_);
    std::swap(pvp_info_, other->pvp_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Match_SC_GetPVPInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Match_SC_GetPVPInfo_descriptor_;
  metadata.reflection = Match_SC_GetPVPInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Match_CS_GetPVPReward::kBattIdFieldNumber;
const int Match_CS_GetPVPReward::kRewardTypeFieldNumber;
#endif  // !_MSC_VER

Match_CS_GetPVPReward::Match_CS_GetPVPReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Match_CS_GetPVPReward::InitAsDefaultInstance() {
}

Match_CS_GetPVPReward::Match_CS_GetPVPReward(const Match_CS_GetPVPReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Match_CS_GetPVPReward::SharedCtor() {
  _cached_size_ = 0;
  batt_id_ = 0;
  reward_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Match_CS_GetPVPReward::~Match_CS_GetPVPReward() {
  SharedDtor();
}

void Match_CS_GetPVPReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Match_CS_GetPVPReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Match_CS_GetPVPReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Match_CS_GetPVPReward_descriptor_;
}

const Match_CS_GetPVPReward& Match_CS_GetPVPReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_match_2eproto();
  return *default_instance_;
}

Match_CS_GetPVPReward* Match_CS_GetPVPReward::default_instance_ = NULL;

Match_CS_GetPVPReward* Match_CS_GetPVPReward::New() const {
  return new Match_CS_GetPVPReward;
}

void Match_CS_GetPVPReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    batt_id_ = 0;
    reward_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Match_CS_GetPVPReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 batt_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &batt_id_)));
          set_has_batt_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reward_type;
        break;
      }

      // optional int32 reward_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_type_)));
          set_has_reward_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Match_CS_GetPVPReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 batt_id = 1;
  if (has_batt_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->batt_id(), output);
  }

  // optional int32 reward_type = 2;
  if (has_reward_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reward_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Match_CS_GetPVPReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 batt_id = 1;
  if (has_batt_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->batt_id(), target);
  }

  // optional int32 reward_type = 2;
  if (has_reward_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reward_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Match_CS_GetPVPReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 batt_id = 1;
    if (has_batt_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->batt_id());
    }

    // optional int32 reward_type = 2;
    if (has_reward_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Match_CS_GetPVPReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Match_CS_GetPVPReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Match_CS_GetPVPReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Match_CS_GetPVPReward::MergeFrom(const Match_CS_GetPVPReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_batt_id()) {
      set_batt_id(from.batt_id());
    }
    if (from.has_reward_type()) {
      set_reward_type(from.reward_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Match_CS_GetPVPReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Match_CS_GetPVPReward::CopyFrom(const Match_CS_GetPVPReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Match_CS_GetPVPReward::IsInitialized() const {

  return true;
}

void Match_CS_GetPVPReward::Swap(Match_CS_GetPVPReward* other) {
  if (other != this) {
    std::swap(batt_id_, other->batt_id_);
    std::swap(reward_type_, other->reward_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Match_CS_GetPVPReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Match_CS_GetPVPReward_descriptor_;
  metadata.reflection = Match_CS_GetPVPReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Match_SC_GetPVPReward::kResultFieldNumber;
const int Match_SC_GetPVPReward::kRewardTypeFieldNumber;
#endif  // !_MSC_VER

Match_SC_GetPVPReward::Match_SC_GetPVPReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Match_SC_GetPVPReward::InitAsDefaultInstance() {
}

Match_SC_GetPVPReward::Match_SC_GetPVPReward(const Match_SC_GetPVPReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Match_SC_GetPVPReward::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  reward_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Match_SC_GetPVPReward::~Match_SC_GetPVPReward() {
  SharedDtor();
}

void Match_SC_GetPVPReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Match_SC_GetPVPReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Match_SC_GetPVPReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Match_SC_GetPVPReward_descriptor_;
}

const Match_SC_GetPVPReward& Match_SC_GetPVPReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_match_2eproto();
  return *default_instance_;
}

Match_SC_GetPVPReward* Match_SC_GetPVPReward::default_instance_ = NULL;

Match_SC_GetPVPReward* Match_SC_GetPVPReward::New() const {
  return new Match_SC_GetPVPReward;
}

void Match_SC_GetPVPReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    reward_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Match_SC_GetPVPReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reward_type;
        break;
      }

      // optional int32 reward_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_type_)));
          set_has_reward_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Match_SC_GetPVPReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 reward_type = 2;
  if (has_reward_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reward_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Match_SC_GetPVPReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 reward_type = 2;
  if (has_reward_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reward_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Match_SC_GetPVPReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 reward_type = 2;
    if (has_reward_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Match_SC_GetPVPReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Match_SC_GetPVPReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Match_SC_GetPVPReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Match_SC_GetPVPReward::MergeFrom(const Match_SC_GetPVPReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_reward_type()) {
      set_reward_type(from.reward_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Match_SC_GetPVPReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Match_SC_GetPVPReward::CopyFrom(const Match_SC_GetPVPReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Match_SC_GetPVPReward::IsInitialized() const {

  return true;
}

void Match_SC_GetPVPReward::Swap(Match_SC_GetPVPReward* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(reward_type_, other->reward_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Match_SC_GetPVPReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Match_SC_GetPVPReward_descriptor_;
  metadata.reflection = Match_SC_GetPVPReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Match_CS_GetArenaInfo::kUsualIdFieldNumber;
#endif  // !_MSC_VER

Match_CS_GetArenaInfo::Match_CS_GetArenaInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Match_CS_GetArenaInfo::InitAsDefaultInstance() {
}

Match_CS_GetArenaInfo::Match_CS_GetArenaInfo(const Match_CS_GetArenaInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Match_CS_GetArenaInfo::SharedCtor() {
  _cached_size_ = 0;
  usual_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Match_CS_GetArenaInfo::~Match_CS_GetArenaInfo() {
  SharedDtor();
}

void Match_CS_GetArenaInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Match_CS_GetArenaInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Match_CS_GetArenaInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Match_CS_GetArenaInfo_descriptor_;
}

const Match_CS_GetArenaInfo& Match_CS_GetArenaInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_match_2eproto();
  return *default_instance_;
}

Match_CS_GetArenaInfo* Match_CS_GetArenaInfo::default_instance_ = NULL;

Match_CS_GetArenaInfo* Match_CS_GetArenaInfo::New() const {
  return new Match_CS_GetArenaInfo;
}

void Match_CS_GetArenaInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    usual_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Match_CS_GetArenaInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 usual_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usual_id_)));
          set_has_usual_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Match_CS_GetArenaInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 usual_id = 1;
  if (has_usual_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->usual_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Match_CS_GetArenaInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 usual_id = 1;
  if (has_usual_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->usual_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Match_CS_GetArenaInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 usual_id = 1;
    if (has_usual_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usual_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Match_CS_GetArenaInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Match_CS_GetArenaInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Match_CS_GetArenaInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Match_CS_GetArenaInfo::MergeFrom(const Match_CS_GetArenaInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_usual_id()) {
      set_usual_id(from.usual_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Match_CS_GetArenaInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Match_CS_GetArenaInfo::CopyFrom(const Match_CS_GetArenaInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Match_CS_GetArenaInfo::IsInitialized() const {

  return true;
}

void Match_CS_GetArenaInfo::Swap(Match_CS_GetArenaInfo* other) {
  if (other != this) {
    std::swap(usual_id_, other->usual_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Match_CS_GetArenaInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Match_CS_GetArenaInfo_descriptor_;
  metadata.reflection = Match_CS_GetArenaInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Match_SC_GetArenaInfo::kResultFieldNumber;
const int Match_SC_GetArenaInfo::kUsualIdFieldNumber;
const int Match_SC_GetArenaInfo::kRemainTimeFieldNumber;
const int Match_SC_GetArenaInfo::kArenaInfoFieldNumber;
#endif  // !_MSC_VER

Match_SC_GetArenaInfo::Match_SC_GetArenaInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Match_SC_GetArenaInfo::InitAsDefaultInstance() {
  arena_info_ = const_cast< ::proto::message::ArenaInfo*>(&::proto::message::ArenaInfo::default_instance());
}

Match_SC_GetArenaInfo::Match_SC_GetArenaInfo(const Match_SC_GetArenaInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Match_SC_GetArenaInfo::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  usual_id_ = 0;
  remain_time_ = 0;
  arena_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Match_SC_GetArenaInfo::~Match_SC_GetArenaInfo() {
  SharedDtor();
}

void Match_SC_GetArenaInfo::SharedDtor() {
  if (this != default_instance_) {
    delete arena_info_;
  }
}

void Match_SC_GetArenaInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Match_SC_GetArenaInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Match_SC_GetArenaInfo_descriptor_;
}

const Match_SC_GetArenaInfo& Match_SC_GetArenaInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_match_2eproto();
  return *default_instance_;
}

Match_SC_GetArenaInfo* Match_SC_GetArenaInfo::default_instance_ = NULL;

Match_SC_GetArenaInfo* Match_SC_GetArenaInfo::New() const {
  return new Match_SC_GetArenaInfo;
}

void Match_SC_GetArenaInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    usual_id_ = 0;
    remain_time_ = 0;
    if (has_arena_info()) {
      if (arena_info_ != NULL) arena_info_->::proto::message::ArenaInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Match_SC_GetArenaInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_usual_id;
        break;
      }

      // optional int32 usual_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usual_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usual_id_)));
          set_has_usual_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_remain_time;
        break;
      }

      // optional int32 remain_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remain_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remain_time_)));
          set_has_remain_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_arena_info;
        break;
      }

      // optional .proto.message.ArenaInfo arena_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arena_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_arena_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Match_SC_GetArenaInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 usual_id = 2;
  if (has_usual_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->usual_id(), output);
  }

  // optional int32 remain_time = 3;
  if (has_remain_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->remain_time(), output);
  }

  // optional .proto.message.ArenaInfo arena_info = 4;
  if (has_arena_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->arena_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Match_SC_GetArenaInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 usual_id = 2;
  if (has_usual_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->usual_id(), target);
  }

  // optional int32 remain_time = 3;
  if (has_remain_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->remain_time(), target);
  }

  // optional .proto.message.ArenaInfo arena_info = 4;
  if (has_arena_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->arena_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Match_SC_GetArenaInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 usual_id = 2;
    if (has_usual_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usual_id());
    }

    // optional int32 remain_time = 3;
    if (has_remain_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remain_time());
    }

    // optional .proto.message.ArenaInfo arena_info = 4;
    if (has_arena_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->arena_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Match_SC_GetArenaInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Match_SC_GetArenaInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Match_SC_GetArenaInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Match_SC_GetArenaInfo::MergeFrom(const Match_SC_GetArenaInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_usual_id()) {
      set_usual_id(from.usual_id());
    }
    if (from.has_remain_time()) {
      set_remain_time(from.remain_time());
    }
    if (from.has_arena_info()) {
      mutable_arena_info()->::proto::message::ArenaInfo::MergeFrom(from.arena_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Match_SC_GetArenaInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Match_SC_GetArenaInfo::CopyFrom(const Match_SC_GetArenaInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Match_SC_GetArenaInfo::IsInitialized() const {

  return true;
}

void Match_SC_GetArenaInfo::Swap(Match_SC_GetArenaInfo* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(usual_id_, other->usual_id_);
    std::swap(remain_time_, other->remain_time_);
    std::swap(arena_info_, other->arena_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Match_SC_GetArenaInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Match_SC_GetArenaInfo_descriptor_;
  metadata.reflection = Match_SC_GetArenaInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Match_CS_GetArenaReward::kRewardidFieldNumber;
#endif  // !_MSC_VER

Match_CS_GetArenaReward::Match_CS_GetArenaReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Match_CS_GetArenaReward::InitAsDefaultInstance() {
}

Match_CS_GetArenaReward::Match_CS_GetArenaReward(const Match_CS_GetArenaReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Match_CS_GetArenaReward::SharedCtor() {
  _cached_size_ = 0;
  rewardid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Match_CS_GetArenaReward::~Match_CS_GetArenaReward() {
  SharedDtor();
}

void Match_CS_GetArenaReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Match_CS_GetArenaReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Match_CS_GetArenaReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Match_CS_GetArenaReward_descriptor_;
}

const Match_CS_GetArenaReward& Match_CS_GetArenaReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_match_2eproto();
  return *default_instance_;
}

Match_CS_GetArenaReward* Match_CS_GetArenaReward::default_instance_ = NULL;

Match_CS_GetArenaReward* Match_CS_GetArenaReward::New() const {
  return new Match_CS_GetArenaReward;
}

void Match_CS_GetArenaReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rewardid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Match_CS_GetArenaReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rewardid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardid_)));
          set_has_rewardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Match_CS_GetArenaReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rewardid = 1;
  if (has_rewardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rewardid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Match_CS_GetArenaReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rewardid = 1;
  if (has_rewardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rewardid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Match_CS_GetArenaReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rewardid = 1;
    if (has_rewardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Match_CS_GetArenaReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Match_CS_GetArenaReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Match_CS_GetArenaReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Match_CS_GetArenaReward::MergeFrom(const Match_CS_GetArenaReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rewardid()) {
      set_rewardid(from.rewardid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Match_CS_GetArenaReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Match_CS_GetArenaReward::CopyFrom(const Match_CS_GetArenaReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Match_CS_GetArenaReward::IsInitialized() const {

  return true;
}

void Match_CS_GetArenaReward::Swap(Match_CS_GetArenaReward* other) {
  if (other != this) {
    std::swap(rewardid_, other->rewardid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Match_CS_GetArenaReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Match_CS_GetArenaReward_descriptor_;
  metadata.reflection = Match_CS_GetArenaReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Match_SC_GetArenaReward::kResultFieldNumber;
const int Match_SC_GetArenaReward::kRewardidFieldNumber;
#endif  // !_MSC_VER

Match_SC_GetArenaReward::Match_SC_GetArenaReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Match_SC_GetArenaReward::InitAsDefaultInstance() {
}

Match_SC_GetArenaReward::Match_SC_GetArenaReward(const Match_SC_GetArenaReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Match_SC_GetArenaReward::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  rewardid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Match_SC_GetArenaReward::~Match_SC_GetArenaReward() {
  SharedDtor();
}

void Match_SC_GetArenaReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Match_SC_GetArenaReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Match_SC_GetArenaReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Match_SC_GetArenaReward_descriptor_;
}

const Match_SC_GetArenaReward& Match_SC_GetArenaReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_match_2eproto();
  return *default_instance_;
}

Match_SC_GetArenaReward* Match_SC_GetArenaReward::default_instance_ = NULL;

Match_SC_GetArenaReward* Match_SC_GetArenaReward::New() const {
  return new Match_SC_GetArenaReward;
}

void Match_SC_GetArenaReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    rewardid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Match_SC_GetArenaReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rewardid;
        break;
      }

      // optional int32 rewardid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rewardid_)));
          set_has_rewardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Match_SC_GetArenaReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 rewardid = 2;
  if (has_rewardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rewardid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Match_SC_GetArenaReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 rewardid = 2;
  if (has_rewardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rewardid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Match_SC_GetArenaReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 rewardid = 2;
    if (has_rewardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rewardid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Match_SC_GetArenaReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Match_SC_GetArenaReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Match_SC_GetArenaReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Match_SC_GetArenaReward::MergeFrom(const Match_SC_GetArenaReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_rewardid()) {
      set_rewardid(from.rewardid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Match_SC_GetArenaReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Match_SC_GetArenaReward::CopyFrom(const Match_SC_GetArenaReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Match_SC_GetArenaReward::IsInitialized() const {

  return true;
}

void Match_SC_GetArenaReward::Swap(Match_SC_GetArenaReward* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(rewardid_, other->rewardid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Match_SC_GetArenaReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Match_SC_GetArenaReward_descriptor_;
  metadata.reflection = Match_SC_GetArenaReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Match_CS_GetBoatPVPInfo::kUsualIdFieldNumber;
#endif  // !_MSC_VER

Match_CS_GetBoatPVPInfo::Match_CS_GetBoatPVPInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Match_CS_GetBoatPVPInfo::InitAsDefaultInstance() {
}

Match_CS_GetBoatPVPInfo::Match_CS_GetBoatPVPInfo(const Match_CS_GetBoatPVPInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Match_CS_GetBoatPVPInfo::SharedCtor() {
  _cached_size_ = 0;
  usual_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Match_CS_GetBoatPVPInfo::~Match_CS_GetBoatPVPInfo() {
  SharedDtor();
}

void Match_CS_GetBoatPVPInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Match_CS_GetBoatPVPInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Match_CS_GetBoatPVPInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Match_CS_GetBoatPVPInfo_descriptor_;
}

const Match_CS_GetBoatPVPInfo& Match_CS_GetBoatPVPInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_match_2eproto();
  return *default_instance_;
}

Match_CS_GetBoatPVPInfo* Match_CS_GetBoatPVPInfo::default_instance_ = NULL;

Match_CS_GetBoatPVPInfo* Match_CS_GetBoatPVPInfo::New() const {
  return new Match_CS_GetBoatPVPInfo;
}

void Match_CS_GetBoatPVPInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    usual_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Match_CS_GetBoatPVPInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 usual_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usual_id_)));
          set_has_usual_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Match_CS_GetBoatPVPInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 usual_id = 1;
  if (has_usual_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->usual_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Match_CS_GetBoatPVPInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 usual_id = 1;
  if (has_usual_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->usual_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Match_CS_GetBoatPVPInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 usual_id = 1;
    if (has_usual_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usual_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Match_CS_GetBoatPVPInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Match_CS_GetBoatPVPInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Match_CS_GetBoatPVPInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Match_CS_GetBoatPVPInfo::MergeFrom(const Match_CS_GetBoatPVPInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_usual_id()) {
      set_usual_id(from.usual_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Match_CS_GetBoatPVPInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Match_CS_GetBoatPVPInfo::CopyFrom(const Match_CS_GetBoatPVPInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Match_CS_GetBoatPVPInfo::IsInitialized() const {

  return true;
}

void Match_CS_GetBoatPVPInfo::Swap(Match_CS_GetBoatPVPInfo* other) {
  if (other != this) {
    std::swap(usual_id_, other->usual_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Match_CS_GetBoatPVPInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Match_CS_GetBoatPVPInfo_descriptor_;
  metadata.reflection = Match_CS_GetBoatPVPInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Match_SC_GetBoatPVPInfo::kResultFieldNumber;
const int Match_SC_GetBoatPVPInfo::kUsualIdFieldNumber;
const int Match_SC_GetBoatPVPInfo::kRemainTimeFieldNumber;
const int Match_SC_GetBoatPVPInfo::kBoatPvpInfoFieldNumber;
#endif  // !_MSC_VER

Match_SC_GetBoatPVPInfo::Match_SC_GetBoatPVPInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Match_SC_GetBoatPVPInfo::InitAsDefaultInstance() {
  boat_pvp_info_ = const_cast< ::proto::message::PVPInfo*>(&::proto::message::PVPInfo::default_instance());
}

Match_SC_GetBoatPVPInfo::Match_SC_GetBoatPVPInfo(const Match_SC_GetBoatPVPInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Match_SC_GetBoatPVPInfo::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  usual_id_ = 0;
  remain_time_ = 0;
  boat_pvp_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Match_SC_GetBoatPVPInfo::~Match_SC_GetBoatPVPInfo() {
  SharedDtor();
}

void Match_SC_GetBoatPVPInfo::SharedDtor() {
  if (this != default_instance_) {
    delete boat_pvp_info_;
  }
}

void Match_SC_GetBoatPVPInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Match_SC_GetBoatPVPInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Match_SC_GetBoatPVPInfo_descriptor_;
}

const Match_SC_GetBoatPVPInfo& Match_SC_GetBoatPVPInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_match_2eproto();
  return *default_instance_;
}

Match_SC_GetBoatPVPInfo* Match_SC_GetBoatPVPInfo::default_instance_ = NULL;

Match_SC_GetBoatPVPInfo* Match_SC_GetBoatPVPInfo::New() const {
  return new Match_SC_GetBoatPVPInfo;
}

void Match_SC_GetBoatPVPInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    usual_id_ = 0;
    remain_time_ = 0;
    if (has_boat_pvp_info()) {
      if (boat_pvp_info_ != NULL) boat_pvp_info_->::proto::message::PVPInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Match_SC_GetBoatPVPInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_usual_id;
        break;
      }

      // optional int32 usual_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usual_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usual_id_)));
          set_has_usual_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_remain_time;
        break;
      }

      // optional int32 remain_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remain_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remain_time_)));
          set_has_remain_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_boat_pvp_info;
        break;
      }

      // optional .proto.message.PVPInfo boat_pvp_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_boat_pvp_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_boat_pvp_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Match_SC_GetBoatPVPInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 usual_id = 2;
  if (has_usual_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->usual_id(), output);
  }

  // optional int32 remain_time = 3;
  if (has_remain_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->remain_time(), output);
  }

  // optional .proto.message.PVPInfo boat_pvp_info = 4;
  if (has_boat_pvp_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->boat_pvp_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Match_SC_GetBoatPVPInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 usual_id = 2;
  if (has_usual_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->usual_id(), target);
  }

  // optional int32 remain_time = 3;
  if (has_remain_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->remain_time(), target);
  }

  // optional .proto.message.PVPInfo boat_pvp_info = 4;
  if (has_boat_pvp_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->boat_pvp_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Match_SC_GetBoatPVPInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 usual_id = 2;
    if (has_usual_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usual_id());
    }

    // optional int32 remain_time = 3;
    if (has_remain_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remain_time());
    }

    // optional .proto.message.PVPInfo boat_pvp_info = 4;
    if (has_boat_pvp_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->boat_pvp_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Match_SC_GetBoatPVPInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Match_SC_GetBoatPVPInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Match_SC_GetBoatPVPInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Match_SC_GetBoatPVPInfo::MergeFrom(const Match_SC_GetBoatPVPInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_usual_id()) {
      set_usual_id(from.usual_id());
    }
    if (from.has_remain_time()) {
      set_remain_time(from.remain_time());
    }
    if (from.has_boat_pvp_info()) {
      mutable_boat_pvp_info()->::proto::message::PVPInfo::MergeFrom(from.boat_pvp_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Match_SC_GetBoatPVPInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Match_SC_GetBoatPVPInfo::CopyFrom(const Match_SC_GetBoatPVPInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Match_SC_GetBoatPVPInfo::IsInitialized() const {

  return true;
}

void Match_SC_GetBoatPVPInfo::Swap(Match_SC_GetBoatPVPInfo* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(usual_id_, other->usual_id_);
    std::swap(remain_time_, other->remain_time_);
    std::swap(boat_pvp_info_, other->boat_pvp_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Match_SC_GetBoatPVPInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Match_SC_GetBoatPVPInfo_descriptor_;
  metadata.reflection = Match_SC_GetBoatPVPInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Match_CS_GetBoatPVPReward::kRewardTypeFieldNumber;
#endif  // !_MSC_VER

Match_CS_GetBoatPVPReward::Match_CS_GetBoatPVPReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Match_CS_GetBoatPVPReward::InitAsDefaultInstance() {
}

Match_CS_GetBoatPVPReward::Match_CS_GetBoatPVPReward(const Match_CS_GetBoatPVPReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Match_CS_GetBoatPVPReward::SharedCtor() {
  _cached_size_ = 0;
  reward_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Match_CS_GetBoatPVPReward::~Match_CS_GetBoatPVPReward() {
  SharedDtor();
}

void Match_CS_GetBoatPVPReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Match_CS_GetBoatPVPReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Match_CS_GetBoatPVPReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Match_CS_GetBoatPVPReward_descriptor_;
}

const Match_CS_GetBoatPVPReward& Match_CS_GetBoatPVPReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_match_2eproto();
  return *default_instance_;
}

Match_CS_GetBoatPVPReward* Match_CS_GetBoatPVPReward::default_instance_ = NULL;

Match_CS_GetBoatPVPReward* Match_CS_GetBoatPVPReward::New() const {
  return new Match_CS_GetBoatPVPReward;
}

void Match_CS_GetBoatPVPReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reward_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Match_CS_GetBoatPVPReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 reward_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_type_)));
          set_has_reward_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Match_CS_GetBoatPVPReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 reward_type = 1;
  if (has_reward_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reward_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Match_CS_GetBoatPVPReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 reward_type = 1;
  if (has_reward_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->reward_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Match_CS_GetBoatPVPReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 reward_type = 1;
    if (has_reward_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Match_CS_GetBoatPVPReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Match_CS_GetBoatPVPReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Match_CS_GetBoatPVPReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Match_CS_GetBoatPVPReward::MergeFrom(const Match_CS_GetBoatPVPReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reward_type()) {
      set_reward_type(from.reward_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Match_CS_GetBoatPVPReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Match_CS_GetBoatPVPReward::CopyFrom(const Match_CS_GetBoatPVPReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Match_CS_GetBoatPVPReward::IsInitialized() const {

  return true;
}

void Match_CS_GetBoatPVPReward::Swap(Match_CS_GetBoatPVPReward* other) {
  if (other != this) {
    std::swap(reward_type_, other->reward_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Match_CS_GetBoatPVPReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Match_CS_GetBoatPVPReward_descriptor_;
  metadata.reflection = Match_CS_GetBoatPVPReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Match_SC_GetBoatPVPReward::kResultFieldNumber;
const int Match_SC_GetBoatPVPReward::kRewardTypeFieldNumber;
#endif  // !_MSC_VER

Match_SC_GetBoatPVPReward::Match_SC_GetBoatPVPReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Match_SC_GetBoatPVPReward::InitAsDefaultInstance() {
}

Match_SC_GetBoatPVPReward::Match_SC_GetBoatPVPReward(const Match_SC_GetBoatPVPReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Match_SC_GetBoatPVPReward::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  reward_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Match_SC_GetBoatPVPReward::~Match_SC_GetBoatPVPReward() {
  SharedDtor();
}

void Match_SC_GetBoatPVPReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Match_SC_GetBoatPVPReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Match_SC_GetBoatPVPReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Match_SC_GetBoatPVPReward_descriptor_;
}

const Match_SC_GetBoatPVPReward& Match_SC_GetBoatPVPReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_match_2eproto();
  return *default_instance_;
}

Match_SC_GetBoatPVPReward* Match_SC_GetBoatPVPReward::default_instance_ = NULL;

Match_SC_GetBoatPVPReward* Match_SC_GetBoatPVPReward::New() const {
  return new Match_SC_GetBoatPVPReward;
}

void Match_SC_GetBoatPVPReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    reward_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Match_SC_GetBoatPVPReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reward_type;
        break;
      }

      // optional int32 reward_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_type_)));
          set_has_reward_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Match_SC_GetBoatPVPReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 reward_type = 2;
  if (has_reward_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reward_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Match_SC_GetBoatPVPReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 reward_type = 2;
  if (has_reward_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reward_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Match_SC_GetBoatPVPReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 reward_type = 2;
    if (has_reward_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Match_SC_GetBoatPVPReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Match_SC_GetBoatPVPReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Match_SC_GetBoatPVPReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Match_SC_GetBoatPVPReward::MergeFrom(const Match_SC_GetBoatPVPReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_reward_type()) {
      set_reward_type(from.reward_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Match_SC_GetBoatPVPReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Match_SC_GetBoatPVPReward::CopyFrom(const Match_SC_GetBoatPVPReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Match_SC_GetBoatPVPReward::IsInitialized() const {

  return true;
}

void Match_SC_GetBoatPVPReward::Swap(Match_SC_GetBoatPVPReward* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(reward_type_, other->reward_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Match_SC_GetBoatPVPReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Match_SC_GetBoatPVPReward_descriptor_;
  metadata.reflection = Match_SC_GetBoatPVPReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Match2Battle_SendPlyData::kIdFieldNumber;
const int Match2Battle_SendPlyData::kSPlyInfoFieldNumber;
#endif  // !_MSC_VER

Match2Battle_SendPlyData::Match2Battle_SendPlyData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Match2Battle_SendPlyData::InitAsDefaultInstance() {
  splyinfo_ = const_cast< ::proto::message::BattlePlayerInfo*>(&::proto::message::BattlePlayerInfo::default_instance());
}

Match2Battle_SendPlyData::Match2Battle_SendPlyData(const Match2Battle_SendPlyData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Match2Battle_SendPlyData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  splyinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Match2Battle_SendPlyData::~Match2Battle_SendPlyData() {
  SharedDtor();
}

void Match2Battle_SendPlyData::SharedDtor() {
  if (this != default_instance_) {
    delete splyinfo_;
  }
}

void Match2Battle_SendPlyData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Match2Battle_SendPlyData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Match2Battle_SendPlyData_descriptor_;
}

const Match2Battle_SendPlyData& Match2Battle_SendPlyData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_match_2eproto();
  return *default_instance_;
}

Match2Battle_SendPlyData* Match2Battle_SendPlyData::default_instance_ = NULL;

Match2Battle_SendPlyData* Match2Battle_SendPlyData::New() const {
  return new Match2Battle_SendPlyData;
}

void Match2Battle_SendPlyData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_splyinfo()) {
      if (splyinfo_ != NULL) splyinfo_->::proto::message::BattlePlayerInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Match2Battle_SendPlyData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sPlyInfo;
        break;
      }

      // optional .proto.message.BattlePlayerInfo sPlyInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sPlyInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_splyinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Match2Battle_SendPlyData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .proto.message.BattlePlayerInfo sPlyInfo = 2;
  if (has_splyinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->splyinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Match2Battle_SendPlyData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .proto.message.BattlePlayerInfo sPlyInfo = 2;
  if (has_splyinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->splyinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Match2Battle_SendPlyData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .proto.message.BattlePlayerInfo sPlyInfo = 2;
    if (has_splyinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->splyinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Match2Battle_SendPlyData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Match2Battle_SendPlyData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Match2Battle_SendPlyData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Match2Battle_SendPlyData::MergeFrom(const Match2Battle_SendPlyData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_splyinfo()) {
      mutable_splyinfo()->::proto::message::BattlePlayerInfo::MergeFrom(from.splyinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Match2Battle_SendPlyData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Match2Battle_SendPlyData::CopyFrom(const Match2Battle_SendPlyData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Match2Battle_SendPlyData::IsInitialized() const {

  if (has_splyinfo()) {
    if (!this->splyinfo().IsInitialized()) return false;
  }
  return true;
}

void Match2Battle_SendPlyData::Swap(Match2Battle_SendPlyData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(splyinfo_, other->splyinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Match2Battle_SendPlyData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Match2Battle_SendPlyData_descriptor_;
  metadata.reflection = Match2Battle_SendPlyData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Match2Battle_SendAllPlyData::kIdFieldNumber;
const int Match2Battle_SendAllPlyData::kMapidFieldNumber;
const int Match2Battle_SendAllPlyData::kSPlyInfoFieldNumber;
#endif  // !_MSC_VER

Match2Battle_SendAllPlyData::Match2Battle_SendAllPlyData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Match2Battle_SendAllPlyData::InitAsDefaultInstance() {
}

Match2Battle_SendAllPlyData::Match2Battle_SendAllPlyData(const Match2Battle_SendAllPlyData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Match2Battle_SendAllPlyData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  mapid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Match2Battle_SendAllPlyData::~Match2Battle_SendAllPlyData() {
  SharedDtor();
}

void Match2Battle_SendAllPlyData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Match2Battle_SendAllPlyData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Match2Battle_SendAllPlyData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Match2Battle_SendAllPlyData_descriptor_;
}

const Match2Battle_SendAllPlyData& Match2Battle_SendAllPlyData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_match_2eproto();
  return *default_instance_;
}

Match2Battle_SendAllPlyData* Match2Battle_SendAllPlyData::default_instance_ = NULL;

Match2Battle_SendAllPlyData* Match2Battle_SendAllPlyData::New() const {
  return new Match2Battle_SendAllPlyData;
}

void Match2Battle_SendAllPlyData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    mapid_ = 0;
  }
  splyinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Match2Battle_SendAllPlyData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mapid;
        break;
      }

      // optional int32 mapid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sPlyInfo;
        break;
      }

      // repeated .proto.message.BattlePlayerInfo sPlyInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sPlyInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_splyinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sPlyInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Match2Battle_SendAllPlyData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 mapid = 2;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mapid(), output);
  }

  // repeated .proto.message.BattlePlayerInfo sPlyInfo = 3;
  for (int i = 0; i < this->splyinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->splyinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Match2Battle_SendAllPlyData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 mapid = 2;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mapid(), target);
  }

  // repeated .proto.message.BattlePlayerInfo sPlyInfo = 3;
  for (int i = 0; i < this->splyinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->splyinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Match2Battle_SendAllPlyData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 mapid = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

  }
  // repeated .proto.message.BattlePlayerInfo sPlyInfo = 3;
  total_size += 1 * this->splyinfo_size();
  for (int i = 0; i < this->splyinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->splyinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Match2Battle_SendAllPlyData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Match2Battle_SendAllPlyData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Match2Battle_SendAllPlyData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Match2Battle_SendAllPlyData::MergeFrom(const Match2Battle_SendAllPlyData& from) {
  GOOGLE_CHECK_NE(&from, this);
  splyinfo_.MergeFrom(from.splyinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Match2Battle_SendAllPlyData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Match2Battle_SendAllPlyData::CopyFrom(const Match2Battle_SendAllPlyData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Match2Battle_SendAllPlyData::IsInitialized() const {

  for (int i = 0; i < splyinfo_size(); i++) {
    if (!this->splyinfo(i).IsInitialized()) return false;
  }
  return true;
}

void Match2Battle_SendAllPlyData::Swap(Match2Battle_SendAllPlyData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(mapid_, other->mapid_);
    splyinfo_.Swap(&other->splyinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Match2Battle_SendAllPlyData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Match2Battle_SendAllPlyData_descriptor_;
  metadata.reflection = Match2Battle_SendAllPlyData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Match2Game_PVPResult::kPlayeridFieldNumber;
const int Match2Game_PVPResult::kUsualidFieldNumber;
const int Match2Game_PVPResult::kNtimeFieldNumber;
const int Match2Game_PVPResult::kResultFieldNumber;
const int Match2Game_PVPResult::kKillnumFieldNumber;
const int Match2Game_PVPResult::kRivalFieldNumber;
const int Match2Game_PVPResult::kReasonFieldNumber;
#endif  // !_MSC_VER

Match2Game_PVPResult::Match2Game_PVPResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Match2Game_PVPResult::InitAsDefaultInstance() {
}

Match2Game_PVPResult::Match2Game_PVPResult(const Match2Game_PVPResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Match2Game_PVPResult::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  usualid_ = 0u;
  ntime_ = GOOGLE_ULONGLONG(0);
  result_ = 0u;
  killnum_ = 0u;
  reason_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Match2Game_PVPResult::~Match2Game_PVPResult() {
  SharedDtor();
}

void Match2Game_PVPResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Match2Game_PVPResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Match2Game_PVPResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Match2Game_PVPResult_descriptor_;
}

const Match2Game_PVPResult& Match2Game_PVPResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_match_2eproto();
  return *default_instance_;
}

Match2Game_PVPResult* Match2Game_PVPResult::default_instance_ = NULL;

Match2Game_PVPResult* Match2Game_PVPResult::New() const {
  return new Match2Game_PVPResult;
}

void Match2Game_PVPResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
    usualid_ = 0u;
    ntime_ = GOOGLE_ULONGLONG(0);
    result_ = 0u;
    killnum_ = 0u;
    reason_ = 0u;
  }
  rival_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Match2Game_PVPResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_usualid;
        break;
      }

      // optional uint32 usualid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usualid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usualid_)));
          set_has_usualid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ntime;
        break;
      }

      // optional uint64 ntime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ntime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ntime_)));
          set_has_ntime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }

      // optional uint32 result = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_killnum;
        break;
      }

      // optional uint32 killnum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killnum_)));
          set_has_killnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rival;
        break;
      }

      // repeated uint64 rival = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rival:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 48, input, this->mutable_rival())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_rival())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rival;
        if (input->ExpectTag(56)) goto parse_reason;
        break;
      }

      // optional uint32 reason = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Match2Game_PVPResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  // optional uint32 usualid = 2;
  if (has_usualid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->usualid(), output);
  }

  // optional uint64 ntime = 3;
  if (has_ntime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->ntime(), output);
  }

  // optional uint32 result = 4;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->result(), output);
  }

  // optional uint32 killnum = 5;
  if (has_killnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->killnum(), output);
  }

  // repeated uint64 rival = 6;
  for (int i = 0; i < this->rival_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      6, this->rival(i), output);
  }

  // optional uint32 reason = 7;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Match2Game_PVPResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  // optional uint32 usualid = 2;
  if (has_usualid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->usualid(), target);
  }

  // optional uint64 ntime = 3;
  if (has_ntime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->ntime(), target);
  }

  // optional uint32 result = 4;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->result(), target);
  }

  // optional uint32 killnum = 5;
  if (has_killnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->killnum(), target);
  }

  // repeated uint64 rival = 6;
  for (int i = 0; i < this->rival_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(6, this->rival(i), target);
  }

  // optional uint32 reason = 7;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Match2Game_PVPResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // optional uint32 usualid = 2;
    if (has_usualid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usualid());
    }

    // optional uint64 ntime = 3;
    if (has_ntime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ntime());
    }

    // optional uint32 result = 4;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional uint32 killnum = 5;
    if (has_killnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killnum());
    }

    // optional uint32 reason = 7;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason());
    }

  }
  // repeated uint64 rival = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->rival_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->rival(i));
    }
    total_size += 1 * this->rival_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Match2Game_PVPResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Match2Game_PVPResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Match2Game_PVPResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Match2Game_PVPResult::MergeFrom(const Match2Game_PVPResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  rival_.MergeFrom(from.rival_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_usualid()) {
      set_usualid(from.usualid());
    }
    if (from.has_ntime()) {
      set_ntime(from.ntime());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_killnum()) {
      set_killnum(from.killnum());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Match2Game_PVPResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Match2Game_PVPResult::CopyFrom(const Match2Game_PVPResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Match2Game_PVPResult::IsInitialized() const {

  return true;
}

void Match2Game_PVPResult::Swap(Match2Game_PVPResult* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(usualid_, other->usualid_);
    std::swap(ntime_, other->ntime_);
    std::swap(result_, other->result_);
    std::swap(killnum_, other->killnum_);
    rival_.Swap(&other->rival_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Match2Game_PVPResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Match2Game_PVPResult_descriptor_;
  metadata.reflection = Match2Game_PVPResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Match2Game_CreateRoom::kResultFieldNumber;
const int Match2Game_CreateRoom::kRoomidFieldNumber;
#endif  // !_MSC_VER

Match2Game_CreateRoom::Match2Game_CreateRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Match2Game_CreateRoom::InitAsDefaultInstance() {
}

Match2Game_CreateRoom::Match2Game_CreateRoom(const Match2Game_CreateRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Match2Game_CreateRoom::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Match2Game_CreateRoom::~Match2Game_CreateRoom() {
  SharedDtor();
}

void Match2Game_CreateRoom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Match2Game_CreateRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Match2Game_CreateRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Match2Game_CreateRoom_descriptor_;
}

const Match2Game_CreateRoom& Match2Game_CreateRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_match_2eproto();
  return *default_instance_;
}

Match2Game_CreateRoom* Match2Game_CreateRoom::default_instance_ = NULL;

Match2Game_CreateRoom* Match2Game_CreateRoom::New() const {
  return new Match2Game_CreateRoom;
}

void Match2Game_CreateRoom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    roomid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Match2Game_CreateRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomid;
        break;
      }

      // optional int32 roomid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Match2Game_CreateRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 roomid = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Match2Game_CreateRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 roomid = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Match2Game_CreateRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 roomid = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Match2Game_CreateRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Match2Game_CreateRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Match2Game_CreateRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Match2Game_CreateRoom::MergeFrom(const Match2Game_CreateRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Match2Game_CreateRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Match2Game_CreateRoom::CopyFrom(const Match2Game_CreateRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Match2Game_CreateRoom::IsInitialized() const {

  return true;
}

void Match2Game_CreateRoom::Swap(Match2Game_CreateRoom* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Match2Game_CreateRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Match2Game_CreateRoom_descriptor_;
  metadata.reflection = Match2Game_CreateRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle2Match_PVPResult::kPvpidFieldNumber;
const int Battle2Match_PVPResult::kWinnerFieldNumber;
const int Battle2Match_PVPResult::kCosttimeFieldNumber;
const int Battle2Match_PVPResult::kReasonFieldNumber;
#endif  // !_MSC_VER

Battle2Match_PVPResult::Battle2Match_PVPResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle2Match_PVPResult::InitAsDefaultInstance() {
}

Battle2Match_PVPResult::Battle2Match_PVPResult(const Battle2Match_PVPResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle2Match_PVPResult::SharedCtor() {
  _cached_size_ = 0;
  pvpid_ = 0u;
  winner_ = 0u;
  costtime_ = GOOGLE_ULONGLONG(0);
  reason_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle2Match_PVPResult::~Battle2Match_PVPResult() {
  SharedDtor();
}

void Battle2Match_PVPResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Battle2Match_PVPResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle2Match_PVPResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle2Match_PVPResult_descriptor_;
}

const Battle2Match_PVPResult& Battle2Match_PVPResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_match_2eproto();
  return *default_instance_;
}

Battle2Match_PVPResult* Battle2Match_PVPResult::default_instance_ = NULL;

Battle2Match_PVPResult* Battle2Match_PVPResult::New() const {
  return new Battle2Match_PVPResult;
}

void Battle2Match_PVPResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pvpid_ = 0u;
    winner_ = 0u;
    costtime_ = GOOGLE_ULONGLONG(0);
    reason_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle2Match_PVPResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pvpid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pvpid_)));
          set_has_pvpid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_winner;
        break;
      }

      // optional uint32 winner = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winner_)));
          set_has_winner();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_costtime;
        break;
      }

      // optional uint64 costtime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_costtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &costtime_)));
          set_has_costtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_reason;
        break;
      }

      // optional uint32 reason = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle2Match_PVPResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 pvpid = 1;
  if (has_pvpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pvpid(), output);
  }

  // optional uint32 winner = 2;
  if (has_winner()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->winner(), output);
  }

  // optional uint64 costtime = 3;
  if (has_costtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->costtime(), output);
  }

  // optional uint32 reason = 4;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle2Match_PVPResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 pvpid = 1;
  if (has_pvpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pvpid(), target);
  }

  // optional uint32 winner = 2;
  if (has_winner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->winner(), target);
  }

  // optional uint64 costtime = 3;
  if (has_costtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->costtime(), target);
  }

  // optional uint32 reason = 4;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle2Match_PVPResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 pvpid = 1;
    if (has_pvpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pvpid());
    }

    // optional uint32 winner = 2;
    if (has_winner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winner());
    }

    // optional uint64 costtime = 3;
    if (has_costtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->costtime());
    }

    // optional uint32 reason = 4;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle2Match_PVPResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle2Match_PVPResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle2Match_PVPResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle2Match_PVPResult::MergeFrom(const Battle2Match_PVPResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pvpid()) {
      set_pvpid(from.pvpid());
    }
    if (from.has_winner()) {
      set_winner(from.winner());
    }
    if (from.has_costtime()) {
      set_costtime(from.costtime());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle2Match_PVPResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle2Match_PVPResult::CopyFrom(const Battle2Match_PVPResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle2Match_PVPResult::IsInitialized() const {

  return true;
}

void Battle2Match_PVPResult::Swap(Battle2Match_PVPResult* other) {
  if (other != this) {
    std::swap(pvpid_, other->pvpid_);
    std::swap(winner_, other->winner_);
    std::swap(costtime_, other->costtime_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle2Match_PVPResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle2Match_PVPResult_descriptor_;
  metadata.reflection = Battle2Match_PVPResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

// @@protoc_insertion_point(global_scope)
