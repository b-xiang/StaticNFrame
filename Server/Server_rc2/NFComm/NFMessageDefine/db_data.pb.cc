// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db_data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "db_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

namespace {

const ::google::protobuf::Descriptor* DataInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MatchType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_db_5fdata_2eproto() {
  protobuf_AddDesc_db_5fdata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "db_data.proto");
  GOOGLE_CHECK(file != NULL);
  DataInfo_descriptor_ = file->message_type(0);
  static const int DataInfo_offsets_[74] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, layerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, dungeonid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, recordmapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, recordlayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, recordpt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, recorddir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, reset_time_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, reset_time_week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, vigor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, lucky_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, auction_item_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, attention_item_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, idy_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, identity_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, tal_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, tal_item_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, questioncounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, rightcounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, rewardstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, open_button_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, open_button_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, maildata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, role_create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, total_online_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, support_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, relive_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, guild_contribution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, ignore_teaminvite_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, offline_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, point_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, xpskillenergy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, avatar_id_on_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, colour_id_on_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, avatar_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, posid_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, offpvpcounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, offpvpbuycounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, offpvprewordtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, awaken_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, soulvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, souldata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, cur_multichivalrous_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, cur_epicchivalrous_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, recover_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, diamondbind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, livelyupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, liveupexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, dayamass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, honor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, offpvprewordid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, attackmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, finishkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, guidepart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, mintage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, dhbuycounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, dhdropidlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, dhlev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, dhexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, dhcounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, spotential_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, ssinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, lastofftime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, accumulateofftime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, ableacotime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, roulette_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, offlinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, guildbossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, offexpnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, friendly_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, dreadcounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, match_type_),
  };
  DataInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataInfo_descriptor_,
      DataInfo::default_instance_,
      DataInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataInfo));
  MatchType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_db_5fdata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataInfo_descriptor_, &DataInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_db_5fdata_2eproto() {
  delete DataInfo::default_instance_;
  delete DataInfo_reflection_;
}

void protobuf_AddDesc_db_5fdata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::message::protobuf_AddDesc_common_2eproto();
  ::proto::message::protobuf_AddDesc_identity_2eproto();
  ::proto::message::protobuf_AddDesc_achieve_2eproto();
  ::proto::message::protobuf_AddDesc_tower_2eproto();
  ::proto::message::protobuf_AddDesc_item_2eproto();
  ::proto::message::protobuf_AddDesc_mail_2eproto();
  ::proto::message::protobuf_AddDesc_support_2eproto();
  ::proto::message::protobuf_AddDesc_welfare_2eproto();
  ::proto::message::protobuf_AddDesc_avatar_2eproto();
  ::proto::message::protobuf_AddDesc_soulbox_2eproto();
  ::proto::message::protobuf_AddDesc_recoversrc_2eproto();
  ::proto::message::protobuf_AddDesc_shop_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rdb_data.proto\022\rproto.message\032\014common.p"
    "roto\032\016identity.proto\032\rachieve.proto\032\013tow"
    "er.proto\032\nitem.proto\032\nmail.proto\032\rsuppor"
    "t.proto\032\rwelfare.proto\032\014avatar.proto\032\rso"
    "ulbox.proto\032\020recoversrc.proto\032\nshop.prot"
    "o\"\351\016\n\010DataInfo\022\016\n\006map_id\030\001 \001(\005\022\"\n\002pt\030\002 \001"
    "(\0132\026.proto.message.Point3D\022\013\n\003dir\030\003 \001(\002\022"
    "\017\n\007layerId\030\004 \001(\005\022\021\n\tDungeonID\030\005 \001(\005\022\023\n\013R"
    "ecordMapId\030\006 \001(\005\022\025\n\rRecordLayerId\030\007 \001(\005\022"
    "(\n\010RecordPt\030\010 \001(\0132\026.proto.message.Point3"
    "D\022\021\n\tRecordDir\030\t \001(\002\022\026\n\016reset_time_day\030\n"
    " \001(\005\022\027\n\017reset_time_week\030\013 \001(\005\022\r\n\005vigor\030\014"
    " \001(\005\022\023\n\013lucky_value\030\r \001(\005\022\031\n\021auction_ite"
    "m_list\030\016 \003(\004\022\033\n\023attention_item_list\030\017 \003("
    "\004\022\022\n\nidy_points\030\020 \001(\005\022.\n\ridentity_list\030\021"
    " \003(\0132\027.proto.message.Identity\022\022\n\ntal_poi"
    "nts\030\022 \001(\005\022\026\n\016tal_item_times\030\023 \001(\005\022\026\n\016que"
    "stioncounts\030\024 \001(\r\022\023\n\013rightcounts\030\025 \001(\r\022\023"
    "\n\013rewardstate\030\026 \001(\r\022\030\n\020open_button_list\030"
    "\027 \003(\005\022\032\n\022open_button_reward\030\030 \003(\005\022,\n\010mai"
    "ldata\030\031 \001(\0132\032.proto.message.MailBoxData\022"
    "\030\n\020role_create_time\030\032 \001(\r\022\030\n\020total_onlin"
    "e_sec\030\033 \001(\r\0220\n\014support_data\030\034 \003(\0132\032.prot"
    "o.message.SupportData\022\024\n\014relive_times\030\035 "
    "\001(\005\022\032\n\022guild_contribution\030\036 \001(\r\022\031\n\021ignor"
    "e_teaminvite\030\037 \001(\010\022\024\n\014offline_tick\030  \001(\004"
    "\022,\n\npoint_data\030! \003(\0132\030.proto.message.Poi"
    "ntData\022\025\n\rxpskillenergy\030\" \001(\r\022\024\n\014avatar_"
    "id_on\030# \001(\005\022\024\n\014colour_id_on\030$ \001(\005\022*\n\013ava"
    "tar_list\030% \003(\0132\025.proto.message.Avatar\022\022\n"
    "\nposid_list\030& \003(\005\022\024\n\014offpvpcounts\030\' \001(\r\022"
    "\027\n\017offpvpbuycounts\030( \001(\r\022\030\n\020offpvpreword"
    "time\030) \001(\004\022\025\n\rawaken_points\030* \001(\005\022\021\n\tsou"
    "lvalue\030+ \001(\005\022,\n\010souldata\030, \001(\0132\032.proto.m"
    "essage.SuolBoxInfo\022\033\n\023cur_MultiChivalrou"
    "s\030- \001(\005\022\032\n\022cur_EpicChivalrous\030. \001(\005\0220\n\014r"
    "ecover_data\030/ \001(\0132\032.proto.message.Recove"
    "rList\022\023\n\013diamondbind\0300 \001(\005\022\022\n\nlivelyupid"
    "\0301 \001(\r\022\021\n\tliveupexp\0302 \001(\r\022\020\n\010dayamass\0303 "
    "\001(\r\022\r\n\005honor\0304 \001(\r\022\026\n\016offpvprewordid\0305 \001"
    "(\r\022\022\n\nattackmode\0306 \001(\r\022\021\n\tfinishkey\0307 \001("
    "\t\022\021\n\tguidepart\0308 \001(\r\022\017\n\007mintage\0309 \001(\r\022\023\n"
    "\013dhbuycounts\030: \001(\005\022\024\n\014dhdropidlist\030; \003(\r"
    "\022\r\n\005dhlev\030< \001(\r\022\r\n\005dhexp\030= \001(\005\022\020\n\010dhcoun"
    "ts\030> \001(\005\022,\n\nsPotential\030\? \001(\0132\030.proto.mes"
    "sage.Potential\022.\n\006ssinfo\030@ \001(\0132\036.proto.m"
    "essage.SecretStoreInfo\022\023\n\013lastofftime\030A "
    "\001(\004\022\031\n\021accumulateofftime\030B \001(\004\022\023\n\013ableac"
    "otime\030C \001(\004\022\026\n\016roulette_score\030D \001(\005\022\023\n\013o"
    "fflinetime\030E \001(\004\022\023\n\013guildbossid\030F \003(\r\022\021\n"
    "\toffexpnum\030G \001(\004\022\020\n\010friendly\030H \001(\r\022\023\n\013dr"
    "eadcounts\030I \001(\r\022,\n\nmatch_type\030J \001(\0162\030.pr"
    "oto.message.MatchType*>\n\tMatchType\022\020\n\014Pr"
    "ivateMatch\020\000\022\016\n\nUnionMatch\020\001\022\017\n\013PublicMa"
    "tch\020\002B\017\n\rproto.message", 2182);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "db_data.proto", &protobuf_RegisterTypes);
  DataInfo::default_instance_ = new DataInfo();
  DataInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_db_5fdata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_db_5fdata_2eproto {
  StaticDescriptorInitializer_db_5fdata_2eproto() {
    protobuf_AddDesc_db_5fdata_2eproto();
  }
} static_descriptor_initializer_db_5fdata_2eproto_;
const ::google::protobuf::EnumDescriptor* MatchType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchType_descriptor_;
}
bool MatchType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int DataInfo::kMapIdFieldNumber;
const int DataInfo::kPtFieldNumber;
const int DataInfo::kDirFieldNumber;
const int DataInfo::kLayerIdFieldNumber;
const int DataInfo::kDungeonIDFieldNumber;
const int DataInfo::kRecordMapIdFieldNumber;
const int DataInfo::kRecordLayerIdFieldNumber;
const int DataInfo::kRecordPtFieldNumber;
const int DataInfo::kRecordDirFieldNumber;
const int DataInfo::kResetTimeDayFieldNumber;
const int DataInfo::kResetTimeWeekFieldNumber;
const int DataInfo::kVigorFieldNumber;
const int DataInfo::kLuckyValueFieldNumber;
const int DataInfo::kAuctionItemListFieldNumber;
const int DataInfo::kAttentionItemListFieldNumber;
const int DataInfo::kIdyPointsFieldNumber;
const int DataInfo::kIdentityListFieldNumber;
const int DataInfo::kTalPointsFieldNumber;
const int DataInfo::kTalItemTimesFieldNumber;
const int DataInfo::kQuestioncountsFieldNumber;
const int DataInfo::kRightcountsFieldNumber;
const int DataInfo::kRewardstateFieldNumber;
const int DataInfo::kOpenButtonListFieldNumber;
const int DataInfo::kOpenButtonRewardFieldNumber;
const int DataInfo::kMaildataFieldNumber;
const int DataInfo::kRoleCreateTimeFieldNumber;
const int DataInfo::kTotalOnlineSecFieldNumber;
const int DataInfo::kSupportDataFieldNumber;
const int DataInfo::kReliveTimesFieldNumber;
const int DataInfo::kGuildContributionFieldNumber;
const int DataInfo::kIgnoreTeaminviteFieldNumber;
const int DataInfo::kOfflineTickFieldNumber;
const int DataInfo::kPointDataFieldNumber;
const int DataInfo::kXpskillenergyFieldNumber;
const int DataInfo::kAvatarIdOnFieldNumber;
const int DataInfo::kColourIdOnFieldNumber;
const int DataInfo::kAvatarListFieldNumber;
const int DataInfo::kPosidListFieldNumber;
const int DataInfo::kOffpvpcountsFieldNumber;
const int DataInfo::kOffpvpbuycountsFieldNumber;
const int DataInfo::kOffpvprewordtimeFieldNumber;
const int DataInfo::kAwakenPointsFieldNumber;
const int DataInfo::kSoulvalueFieldNumber;
const int DataInfo::kSouldataFieldNumber;
const int DataInfo::kCurMultiChivalrousFieldNumber;
const int DataInfo::kCurEpicChivalrousFieldNumber;
const int DataInfo::kRecoverDataFieldNumber;
const int DataInfo::kDiamondbindFieldNumber;
const int DataInfo::kLivelyupidFieldNumber;
const int DataInfo::kLiveupexpFieldNumber;
const int DataInfo::kDayamassFieldNumber;
const int DataInfo::kHonorFieldNumber;
const int DataInfo::kOffpvprewordidFieldNumber;
const int DataInfo::kAttackmodeFieldNumber;
const int DataInfo::kFinishkeyFieldNumber;
const int DataInfo::kGuidepartFieldNumber;
const int DataInfo::kMintageFieldNumber;
const int DataInfo::kDhbuycountsFieldNumber;
const int DataInfo::kDhdropidlistFieldNumber;
const int DataInfo::kDhlevFieldNumber;
const int DataInfo::kDhexpFieldNumber;
const int DataInfo::kDhcountsFieldNumber;
const int DataInfo::kSPotentialFieldNumber;
const int DataInfo::kSsinfoFieldNumber;
const int DataInfo::kLastofftimeFieldNumber;
const int DataInfo::kAccumulateofftimeFieldNumber;
const int DataInfo::kAbleacotimeFieldNumber;
const int DataInfo::kRouletteScoreFieldNumber;
const int DataInfo::kOfflinetimeFieldNumber;
const int DataInfo::kGuildbossidFieldNumber;
const int DataInfo::kOffexpnumFieldNumber;
const int DataInfo::kFriendlyFieldNumber;
const int DataInfo::kDreadcountsFieldNumber;
const int DataInfo::kMatchTypeFieldNumber;
#endif  // !_MSC_VER

DataInfo::DataInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataInfo::InitAsDefaultInstance() {
  pt_ = const_cast< ::proto::message::Point3D*>(&::proto::message::Point3D::default_instance());
  recordpt_ = const_cast< ::proto::message::Point3D*>(&::proto::message::Point3D::default_instance());
  maildata_ = const_cast< ::proto::message::MailBoxData*>(&::proto::message::MailBoxData::default_instance());
  souldata_ = const_cast< ::proto::message::SuolBoxInfo*>(&::proto::message::SuolBoxInfo::default_instance());
  recover_data_ = const_cast< ::proto::message::RecoverList*>(&::proto::message::RecoverList::default_instance());
  spotential_ = const_cast< ::proto::message::Potential*>(&::proto::message::Potential::default_instance());
  ssinfo_ = const_cast< ::proto::message::SecretStoreInfo*>(&::proto::message::SecretStoreInfo::default_instance());
}

DataInfo::DataInfo(const DataInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataInfo::SharedCtor() {
  _cached_size_ = 0;
  map_id_ = 0;
  pt_ = NULL;
  dir_ = 0;
  layerid_ = 0;
  dungeonid_ = 0;
  recordmapid_ = 0;
  recordlayerid_ = 0;
  recordpt_ = NULL;
  recorddir_ = 0;
  reset_time_day_ = 0;
  reset_time_week_ = 0;
  vigor_ = 0;
  lucky_value_ = 0;
  idy_points_ = 0;
  tal_points_ = 0;
  tal_item_times_ = 0;
  questioncounts_ = 0u;
  rightcounts_ = 0u;
  rewardstate_ = 0u;
  maildata_ = NULL;
  role_create_time_ = 0u;
  total_online_sec_ = 0u;
  relive_times_ = 0;
  guild_contribution_ = 0u;
  ignore_teaminvite_ = false;
  offline_tick_ = GOOGLE_ULONGLONG(0);
  xpskillenergy_ = 0u;
  avatar_id_on_ = 0;
  colour_id_on_ = 0;
  offpvpcounts_ = 0u;
  offpvpbuycounts_ = 0u;
  offpvprewordtime_ = GOOGLE_ULONGLONG(0);
  awaken_points_ = 0;
  soulvalue_ = 0;
  souldata_ = NULL;
  cur_multichivalrous_ = 0;
  cur_epicchivalrous_ = 0;
  recover_data_ = NULL;
  diamondbind_ = 0;
  livelyupid_ = 0u;
  liveupexp_ = 0u;
  dayamass_ = 0u;
  honor_ = 0u;
  offpvprewordid_ = 0u;
  attackmode_ = 0u;
  finishkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guidepart_ = 0u;
  mintage_ = 0u;
  dhbuycounts_ = 0;
  dhlev_ = 0u;
  dhexp_ = 0;
  dhcounts_ = 0;
  spotential_ = NULL;
  ssinfo_ = NULL;
  lastofftime_ = GOOGLE_ULONGLONG(0);
  accumulateofftime_ = GOOGLE_ULONGLONG(0);
  ableacotime_ = GOOGLE_ULONGLONG(0);
  roulette_score_ = 0;
  offlinetime_ = GOOGLE_ULONGLONG(0);
  offexpnum_ = GOOGLE_ULONGLONG(0);
  friendly_ = 0u;
  dreadcounts_ = 0u;
  match_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataInfo::~DataInfo() {
  SharedDtor();
}

void DataInfo::SharedDtor() {
  if (finishkey_ != &::google::protobuf::internal::kEmptyString) {
    delete finishkey_;
  }
  if (this != default_instance_) {
    delete pt_;
    delete recordpt_;
    delete maildata_;
    delete souldata_;
    delete recover_data_;
    delete spotential_;
    delete ssinfo_;
  }
}

void DataInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataInfo_descriptor_;
}

const DataInfo& DataInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5fdata_2eproto();
  return *default_instance_;
}

DataInfo* DataInfo::default_instance_ = NULL;

DataInfo* DataInfo::New() const {
  return new DataInfo;
}

void DataInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    map_id_ = 0;
    if (has_pt()) {
      if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
    }
    dir_ = 0;
    layerid_ = 0;
    dungeonid_ = 0;
    recordmapid_ = 0;
    recordlayerid_ = 0;
    if (has_recordpt()) {
      if (recordpt_ != NULL) recordpt_->::proto::message::Point3D::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    recorddir_ = 0;
    reset_time_day_ = 0;
    reset_time_week_ = 0;
    vigor_ = 0;
    lucky_value_ = 0;
    idy_points_ = 0;
  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    tal_points_ = 0;
    tal_item_times_ = 0;
    questioncounts_ = 0u;
    rightcounts_ = 0u;
    rewardstate_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_maildata()) {
      if (maildata_ != NULL) maildata_->::proto::message::MailBoxData::Clear();
    }
    role_create_time_ = 0u;
    total_online_sec_ = 0u;
    relive_times_ = 0;
    guild_contribution_ = 0u;
    ignore_teaminvite_ = false;
    offline_tick_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[33 / 32] & (0xffu << (33 % 32))) {
    xpskillenergy_ = 0u;
    avatar_id_on_ = 0;
    colour_id_on_ = 0;
    offpvpcounts_ = 0u;
    offpvpbuycounts_ = 0u;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    offpvprewordtime_ = GOOGLE_ULONGLONG(0);
    awaken_points_ = 0;
    soulvalue_ = 0;
    if (has_souldata()) {
      if (souldata_ != NULL) souldata_->::proto::message::SuolBoxInfo::Clear();
    }
    cur_multichivalrous_ = 0;
    cur_epicchivalrous_ = 0;
    if (has_recover_data()) {
      if (recover_data_ != NULL) recover_data_->::proto::message::RecoverList::Clear();
    }
    diamondbind_ = 0;
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    livelyupid_ = 0u;
    liveupexp_ = 0u;
    dayamass_ = 0u;
    honor_ = 0u;
    offpvprewordid_ = 0u;
    attackmode_ = 0u;
    if (has_finishkey()) {
      if (finishkey_ != &::google::protobuf::internal::kEmptyString) {
        finishkey_->clear();
      }
    }
    guidepart_ = 0u;
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    mintage_ = 0u;
    dhbuycounts_ = 0;
    dhlev_ = 0u;
    dhexp_ = 0;
    dhcounts_ = 0;
    if (has_spotential()) {
      if (spotential_ != NULL) spotential_->::proto::message::Potential::Clear();
    }
    if (has_ssinfo()) {
      if (ssinfo_ != NULL) ssinfo_->::proto::message::SecretStoreInfo::Clear();
    }
  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    lastofftime_ = GOOGLE_ULONGLONG(0);
    accumulateofftime_ = GOOGLE_ULONGLONG(0);
    ableacotime_ = GOOGLE_ULONGLONG(0);
    roulette_score_ = 0;
    offlinetime_ = GOOGLE_ULONGLONG(0);
    offexpnum_ = GOOGLE_ULONGLONG(0);
    friendly_ = 0u;
  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    dreadcounts_ = 0u;
    match_type_ = 0;
  }
  auction_item_list_.Clear();
  attention_item_list_.Clear();
  identity_list_.Clear();
  open_button_list_.Clear();
  open_button_reward_.Clear();
  support_data_.Clear();
  point_data_.Clear();
  avatar_list_.Clear();
  posid_list_.Clear();
  dhdropidlist_.Clear();
  guildbossid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 map_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pt;
        break;
      }

      // optional .proto.message.Point3D pt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_dir;
        break;
      }

      // optional float dir = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_layerId;
        break;
      }

      // optional int32 layerId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_layerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layerid_)));
          set_has_layerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_DungeonID;
        break;
      }

      // optional int32 DungeonID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DungeonID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dungeonid_)));
          set_has_dungeonid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_RecordMapId;
        break;
      }

      // optional int32 RecordMapId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RecordMapId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recordmapid_)));
          set_has_recordmapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_RecordLayerId;
        break;
      }

      // optional int32 RecordLayerId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RecordLayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recordlayerid_)));
          set_has_recordlayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_RecordPt;
        break;
      }

      // optional .proto.message.Point3D RecordPt = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RecordPt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recordpt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_RecordDir;
        break;
      }

      // optional float RecordDir = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_RecordDir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &recorddir_)));
          set_has_recorddir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_reset_time_day;
        break;
      }

      // optional int32 reset_time_day = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reset_time_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reset_time_day_)));
          set_has_reset_time_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_reset_time_week;
        break;
      }

      // optional int32 reset_time_week = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reset_time_week:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reset_time_week_)));
          set_has_reset_time_week();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_vigor;
        break;
      }

      // optional int32 vigor = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vigor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vigor_)));
          set_has_vigor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_lucky_value;
        break;
      }

      // optional int32 lucky_value = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lucky_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lucky_value_)));
          set_has_lucky_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_auction_item_list;
        break;
      }

      // repeated uint64 auction_item_list = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auction_item_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 112, input, this->mutable_auction_item_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_auction_item_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_auction_item_list;
        if (input->ExpectTag(120)) goto parse_attention_item_list;
        break;
      }

      // repeated uint64 attention_item_list = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attention_item_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 120, input, this->mutable_attention_item_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_attention_item_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_attention_item_list;
        if (input->ExpectTag(128)) goto parse_idy_points;
        break;
      }

      // optional int32 idy_points = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_idy_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idy_points_)));
          set_has_idy_points();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_identity_list;
        break;
      }

      // repeated .proto.message.Identity identity_list = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_identity_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_identity_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_identity_list;
        if (input->ExpectTag(144)) goto parse_tal_points;
        break;
      }

      // optional int32 tal_points = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tal_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tal_points_)));
          set_has_tal_points();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_tal_item_times;
        break;
      }

      // optional int32 tal_item_times = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tal_item_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tal_item_times_)));
          set_has_tal_item_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_questioncounts;
        break;
      }

      // optional uint32 questioncounts = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_questioncounts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &questioncounts_)));
          set_has_questioncounts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_rightcounts;
        break;
      }

      // optional uint32 rightcounts = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rightcounts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rightcounts_)));
          set_has_rightcounts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_rewardstate;
        break;
      }

      // optional uint32 rewardstate = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardstate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardstate_)));
          set_has_rewardstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_open_button_list;
        break;
      }

      // repeated int32 open_button_list = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_button_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 184, input, this->mutable_open_button_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_open_button_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_open_button_list;
        if (input->ExpectTag(192)) goto parse_open_button_reward;
        break;
      }

      // repeated int32 open_button_reward = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_button_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 192, input, this->mutable_open_button_reward())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_open_button_reward())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_open_button_reward;
        if (input->ExpectTag(202)) goto parse_maildata;
        break;
      }

      // optional .proto.message.MailBoxData maildata = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_maildata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_maildata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_role_create_time;
        break;
      }

      // optional uint32 role_create_time = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_create_time_)));
          set_has_role_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_total_online_sec;
        break;
      }

      // optional uint32 total_online_sec = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_online_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_online_sec_)));
          set_has_total_online_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_support_data;
        break;
      }

      // repeated .proto.message.SupportData support_data = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_support_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_support_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_support_data;
        if (input->ExpectTag(232)) goto parse_relive_times;
        break;
      }

      // optional int32 relive_times = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_relive_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &relive_times_)));
          set_has_relive_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_guild_contribution;
        break;
      }

      // optional uint32 guild_contribution = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_contribution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_contribution_)));
          set_has_guild_contribution();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_ignore_teaminvite;
        break;
      }

      // optional bool ignore_teaminvite = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ignore_teaminvite:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ignore_teaminvite_)));
          set_has_ignore_teaminvite();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_offline_tick;
        break;
      }

      // optional uint64 offline_tick = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offline_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offline_tick_)));
          set_has_offline_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_point_data;
        break;
      }

      // repeated .proto.message.PointData point_data = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_point_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_point_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_point_data;
        if (input->ExpectTag(272)) goto parse_xpskillenergy;
        break;
      }

      // optional uint32 xpskillenergy = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xpskillenergy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xpskillenergy_)));
          set_has_xpskillenergy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_avatar_id_on;
        break;
      }

      // optional int32 avatar_id_on = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avatar_id_on:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avatar_id_on_)));
          set_has_avatar_id_on();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_colour_id_on;
        break;
      }

      // optional int32 colour_id_on = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_colour_id_on:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &colour_id_on_)));
          set_has_colour_id_on();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(298)) goto parse_avatar_list;
        break;
      }

      // repeated .proto.message.Avatar avatar_list = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avatar_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_avatar_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(298)) goto parse_avatar_list;
        if (input->ExpectTag(304)) goto parse_posid_list;
        break;
      }

      // repeated int32 posid_list = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posid_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 304, input, this->mutable_posid_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_posid_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_posid_list;
        if (input->ExpectTag(312)) goto parse_offpvpcounts;
        break;
      }

      // optional uint32 offpvpcounts = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offpvpcounts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offpvpcounts_)));
          set_has_offpvpcounts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_offpvpbuycounts;
        break;
      }

      // optional uint32 offpvpbuycounts = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offpvpbuycounts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offpvpbuycounts_)));
          set_has_offpvpbuycounts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_offpvprewordtime;
        break;
      }

      // optional uint64 offpvprewordtime = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offpvprewordtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offpvprewordtime_)));
          set_has_offpvprewordtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_awaken_points;
        break;
      }

      // optional int32 awaken_points = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awaken_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awaken_points_)));
          set_has_awaken_points();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_soulvalue;
        break;
      }

      // optional int32 soulvalue = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_soulvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &soulvalue_)));
          set_has_soulvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(354)) goto parse_souldata;
        break;
      }

      // optional .proto.message.SuolBoxInfo souldata = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_souldata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_souldata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_cur_MultiChivalrous;
        break;
      }

      // optional int32 cur_MultiChivalrous = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_MultiChivalrous:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_multichivalrous_)));
          set_has_cur_multichivalrous();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(368)) goto parse_cur_EpicChivalrous;
        break;
      }

      // optional int32 cur_EpicChivalrous = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_EpicChivalrous:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_epicchivalrous_)));
          set_has_cur_epicchivalrous();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(378)) goto parse_recover_data;
        break;
      }

      // optional .proto.message.RecoverList recover_data = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recover_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recover_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(384)) goto parse_diamondbind;
        break;
      }

      // optional int32 diamondbind = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamondbind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diamondbind_)));
          set_has_diamondbind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(392)) goto parse_livelyupid;
        break;
      }

      // optional uint32 livelyupid = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_livelyupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &livelyupid_)));
          set_has_livelyupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_liveupexp;
        break;
      }

      // optional uint32 liveupexp = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_liveupexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &liveupexp_)));
          set_has_liveupexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_dayamass;
        break;
      }

      // optional uint32 dayamass = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dayamass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dayamass_)));
          set_has_dayamass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(416)) goto parse_honor;
        break;
      }

      // optional uint32 honor = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_honor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &honor_)));
          set_has_honor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(424)) goto parse_offpvprewordid;
        break;
      }

      // optional uint32 offpvprewordid = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offpvprewordid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offpvprewordid_)));
          set_has_offpvprewordid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(432)) goto parse_attackmode;
        break;
      }

      // optional uint32 attackmode = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attackmode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attackmode_)));
          set_has_attackmode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(442)) goto parse_finishkey;
        break;
      }

      // optional string finishkey = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_finishkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_finishkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->finishkey().data(), this->finishkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(448)) goto parse_guidepart;
        break;
      }

      // optional uint32 guidepart = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guidepart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guidepart_)));
          set_has_guidepart();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(456)) goto parse_mintage;
        break;
      }

      // optional uint32 mintage = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mintage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mintage_)));
          set_has_mintage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(464)) goto parse_dhbuycounts;
        break;
      }

      // optional int32 dhbuycounts = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dhbuycounts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dhbuycounts_)));
          set_has_dhbuycounts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(472)) goto parse_dhdropidlist;
        break;
      }

      // repeated uint32 dhdropidlist = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dhdropidlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 472, input, this->mutable_dhdropidlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_dhdropidlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(472)) goto parse_dhdropidlist;
        if (input->ExpectTag(480)) goto parse_dhlev;
        break;
      }

      // optional uint32 dhlev = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dhlev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dhlev_)));
          set_has_dhlev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(488)) goto parse_dhexp;
        break;
      }

      // optional int32 dhexp = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dhexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dhexp_)));
          set_has_dhexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(496)) goto parse_dhcounts;
        break;
      }

      // optional int32 dhcounts = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dhcounts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dhcounts_)));
          set_has_dhcounts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(506)) goto parse_sPotential;
        break;
      }

      // optional .proto.message.Potential sPotential = 63;
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sPotential:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spotential()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(514)) goto parse_ssinfo;
        break;
      }

      // optional .proto.message.SecretStoreInfo ssinfo = 64;
      case 64: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ssinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ssinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(520)) goto parse_lastofftime;
        break;
      }

      // optional uint64 lastofftime = 65;
      case 65: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastofftime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastofftime_)));
          set_has_lastofftime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(528)) goto parse_accumulateofftime;
        break;
      }

      // optional uint64 accumulateofftime = 66;
      case 66: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accumulateofftime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accumulateofftime_)));
          set_has_accumulateofftime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(536)) goto parse_ableacotime;
        break;
      }

      // optional uint64 ableacotime = 67;
      case 67: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ableacotime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ableacotime_)));
          set_has_ableacotime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(544)) goto parse_roulette_score;
        break;
      }

      // optional int32 roulette_score = 68;
      case 68: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roulette_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roulette_score_)));
          set_has_roulette_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(552)) goto parse_offlinetime;
        break;
      }

      // optional uint64 offlinetime = 69;
      case 69: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offlinetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offlinetime_)));
          set_has_offlinetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(560)) goto parse_guildbossid;
        break;
      }

      // repeated uint32 guildbossid = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildbossid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 560, input, this->mutable_guildbossid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_guildbossid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(560)) goto parse_guildbossid;
        if (input->ExpectTag(568)) goto parse_offexpnum;
        break;
      }

      // optional uint64 offexpnum = 71;
      case 71: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offexpnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offexpnum_)));
          set_has_offexpnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(576)) goto parse_friendly;
        break;
      }

      // optional uint32 friendly = 72;
      case 72: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friendly:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friendly_)));
          set_has_friendly();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(584)) goto parse_dreadcounts;
        break;
      }

      // optional uint32 dreadcounts = 73;
      case 73: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dreadcounts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dreadcounts_)));
          set_has_dreadcounts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(592)) goto parse_match_type;
        break;
      }

      // optional .proto.message.MatchType match_type = 74;
      case 74: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::message::MatchType_IsValid(value)) {
            set_match_type(static_cast< ::proto::message::MatchType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(74, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 map_id = 1;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->map_id(), output);
  }

  // optional .proto.message.Point3D pt = 2;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pt(), output);
  }

  // optional float dir = 3;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->dir(), output);
  }

  // optional int32 layerId = 4;
  if (has_layerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->layerid(), output);
  }

  // optional int32 DungeonID = 5;
  if (has_dungeonid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dungeonid(), output);
  }

  // optional int32 RecordMapId = 6;
  if (has_recordmapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->recordmapid(), output);
  }

  // optional int32 RecordLayerId = 7;
  if (has_recordlayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->recordlayerid(), output);
  }

  // optional .proto.message.Point3D RecordPt = 8;
  if (has_recordpt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->recordpt(), output);
  }

  // optional float RecordDir = 9;
  if (has_recorddir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->recorddir(), output);
  }

  // optional int32 reset_time_day = 10;
  if (has_reset_time_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->reset_time_day(), output);
  }

  // optional int32 reset_time_week = 11;
  if (has_reset_time_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->reset_time_week(), output);
  }

  // optional int32 vigor = 12;
  if (has_vigor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->vigor(), output);
  }

  // optional int32 lucky_value = 13;
  if (has_lucky_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->lucky_value(), output);
  }

  // repeated uint64 auction_item_list = 14;
  for (int i = 0; i < this->auction_item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      14, this->auction_item_list(i), output);
  }

  // repeated uint64 attention_item_list = 15;
  for (int i = 0; i < this->attention_item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      15, this->attention_item_list(i), output);
  }

  // optional int32 idy_points = 16;
  if (has_idy_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->idy_points(), output);
  }

  // repeated .proto.message.Identity identity_list = 17;
  for (int i = 0; i < this->identity_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->identity_list(i), output);
  }

  // optional int32 tal_points = 18;
  if (has_tal_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->tal_points(), output);
  }

  // optional int32 tal_item_times = 19;
  if (has_tal_item_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->tal_item_times(), output);
  }

  // optional uint32 questioncounts = 20;
  if (has_questioncounts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->questioncounts(), output);
  }

  // optional uint32 rightcounts = 21;
  if (has_rightcounts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->rightcounts(), output);
  }

  // optional uint32 rewardstate = 22;
  if (has_rewardstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->rewardstate(), output);
  }

  // repeated int32 open_button_list = 23;
  for (int i = 0; i < this->open_button_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      23, this->open_button_list(i), output);
  }

  // repeated int32 open_button_reward = 24;
  for (int i = 0; i < this->open_button_reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      24, this->open_button_reward(i), output);
  }

  // optional .proto.message.MailBoxData maildata = 25;
  if (has_maildata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->maildata(), output);
  }

  // optional uint32 role_create_time = 26;
  if (has_role_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->role_create_time(), output);
  }

  // optional uint32 total_online_sec = 27;
  if (has_total_online_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->total_online_sec(), output);
  }

  // repeated .proto.message.SupportData support_data = 28;
  for (int i = 0; i < this->support_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->support_data(i), output);
  }

  // optional int32 relive_times = 29;
  if (has_relive_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->relive_times(), output);
  }

  // optional uint32 guild_contribution = 30;
  if (has_guild_contribution()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->guild_contribution(), output);
  }

  // optional bool ignore_teaminvite = 31;
  if (has_ignore_teaminvite()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->ignore_teaminvite(), output);
  }

  // optional uint64 offline_tick = 32;
  if (has_offline_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(32, this->offline_tick(), output);
  }

  // repeated .proto.message.PointData point_data = 33;
  for (int i = 0; i < this->point_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->point_data(i), output);
  }

  // optional uint32 xpskillenergy = 34;
  if (has_xpskillenergy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->xpskillenergy(), output);
  }

  // optional int32 avatar_id_on = 35;
  if (has_avatar_id_on()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->avatar_id_on(), output);
  }

  // optional int32 colour_id_on = 36;
  if (has_colour_id_on()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->colour_id_on(), output);
  }

  // repeated .proto.message.Avatar avatar_list = 37;
  for (int i = 0; i < this->avatar_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, this->avatar_list(i), output);
  }

  // repeated int32 posid_list = 38;
  for (int i = 0; i < this->posid_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      38, this->posid_list(i), output);
  }

  // optional uint32 offpvpcounts = 39;
  if (has_offpvpcounts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(39, this->offpvpcounts(), output);
  }

  // optional uint32 offpvpbuycounts = 40;
  if (has_offpvpbuycounts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->offpvpbuycounts(), output);
  }

  // optional uint64 offpvprewordtime = 41;
  if (has_offpvprewordtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(41, this->offpvprewordtime(), output);
  }

  // optional int32 awaken_points = 42;
  if (has_awaken_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->awaken_points(), output);
  }

  // optional int32 soulvalue = 43;
  if (has_soulvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(43, this->soulvalue(), output);
  }

  // optional .proto.message.SuolBoxInfo souldata = 44;
  if (has_souldata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      44, this->souldata(), output);
  }

  // optional int32 cur_MultiChivalrous = 45;
  if (has_cur_multichivalrous()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(45, this->cur_multichivalrous(), output);
  }

  // optional int32 cur_EpicChivalrous = 46;
  if (has_cur_epicchivalrous()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(46, this->cur_epicchivalrous(), output);
  }

  // optional .proto.message.RecoverList recover_data = 47;
  if (has_recover_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      47, this->recover_data(), output);
  }

  // optional int32 diamondbind = 48;
  if (has_diamondbind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(48, this->diamondbind(), output);
  }

  // optional uint32 livelyupid = 49;
  if (has_livelyupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(49, this->livelyupid(), output);
  }

  // optional uint32 liveupexp = 50;
  if (has_liveupexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(50, this->liveupexp(), output);
  }

  // optional uint32 dayamass = 51;
  if (has_dayamass()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(51, this->dayamass(), output);
  }

  // optional uint32 honor = 52;
  if (has_honor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(52, this->honor(), output);
  }

  // optional uint32 offpvprewordid = 53;
  if (has_offpvprewordid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(53, this->offpvprewordid(), output);
  }

  // optional uint32 attackmode = 54;
  if (has_attackmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(54, this->attackmode(), output);
  }

  // optional string finishkey = 55;
  if (has_finishkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->finishkey().data(), this->finishkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      55, this->finishkey(), output);
  }

  // optional uint32 guidepart = 56;
  if (has_guidepart()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(56, this->guidepart(), output);
  }

  // optional uint32 mintage = 57;
  if (has_mintage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(57, this->mintage(), output);
  }

  // optional int32 dhbuycounts = 58;
  if (has_dhbuycounts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(58, this->dhbuycounts(), output);
  }

  // repeated uint32 dhdropidlist = 59;
  for (int i = 0; i < this->dhdropidlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      59, this->dhdropidlist(i), output);
  }

  // optional uint32 dhlev = 60;
  if (has_dhlev()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(60, this->dhlev(), output);
  }

  // optional int32 dhexp = 61;
  if (has_dhexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(61, this->dhexp(), output);
  }

  // optional int32 dhcounts = 62;
  if (has_dhcounts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(62, this->dhcounts(), output);
  }

  // optional .proto.message.Potential sPotential = 63;
  if (has_spotential()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      63, this->spotential(), output);
  }

  // optional .proto.message.SecretStoreInfo ssinfo = 64;
  if (has_ssinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      64, this->ssinfo(), output);
  }

  // optional uint64 lastofftime = 65;
  if (has_lastofftime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(65, this->lastofftime(), output);
  }

  // optional uint64 accumulateofftime = 66;
  if (has_accumulateofftime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(66, this->accumulateofftime(), output);
  }

  // optional uint64 ableacotime = 67;
  if (has_ableacotime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(67, this->ableacotime(), output);
  }

  // optional int32 roulette_score = 68;
  if (has_roulette_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(68, this->roulette_score(), output);
  }

  // optional uint64 offlinetime = 69;
  if (has_offlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(69, this->offlinetime(), output);
  }

  // repeated uint32 guildbossid = 70;
  for (int i = 0; i < this->guildbossid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      70, this->guildbossid(i), output);
  }

  // optional uint64 offexpnum = 71;
  if (has_offexpnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(71, this->offexpnum(), output);
  }

  // optional uint32 friendly = 72;
  if (has_friendly()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(72, this->friendly(), output);
  }

  // optional uint32 dreadcounts = 73;
  if (has_dreadcounts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(73, this->dreadcounts(), output);
  }

  // optional .proto.message.MatchType match_type = 74;
  if (has_match_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      74, this->match_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 map_id = 1;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->map_id(), target);
  }

  // optional .proto.message.Point3D pt = 2;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pt(), target);
  }

  // optional float dir = 3;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->dir(), target);
  }

  // optional int32 layerId = 4;
  if (has_layerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->layerid(), target);
  }

  // optional int32 DungeonID = 5;
  if (has_dungeonid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->dungeonid(), target);
  }

  // optional int32 RecordMapId = 6;
  if (has_recordmapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->recordmapid(), target);
  }

  // optional int32 RecordLayerId = 7;
  if (has_recordlayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->recordlayerid(), target);
  }

  // optional .proto.message.Point3D RecordPt = 8;
  if (has_recordpt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->recordpt(), target);
  }

  // optional float RecordDir = 9;
  if (has_recorddir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->recorddir(), target);
  }

  // optional int32 reset_time_day = 10;
  if (has_reset_time_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->reset_time_day(), target);
  }

  // optional int32 reset_time_week = 11;
  if (has_reset_time_week()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->reset_time_week(), target);
  }

  // optional int32 vigor = 12;
  if (has_vigor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->vigor(), target);
  }

  // optional int32 lucky_value = 13;
  if (has_lucky_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->lucky_value(), target);
  }

  // repeated uint64 auction_item_list = 14;
  for (int i = 0; i < this->auction_item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(14, this->auction_item_list(i), target);
  }

  // repeated uint64 attention_item_list = 15;
  for (int i = 0; i < this->attention_item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(15, this->attention_item_list(i), target);
  }

  // optional int32 idy_points = 16;
  if (has_idy_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->idy_points(), target);
  }

  // repeated .proto.message.Identity identity_list = 17;
  for (int i = 0; i < this->identity_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->identity_list(i), target);
  }

  // optional int32 tal_points = 18;
  if (has_tal_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->tal_points(), target);
  }

  // optional int32 tal_item_times = 19;
  if (has_tal_item_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->tal_item_times(), target);
  }

  // optional uint32 questioncounts = 20;
  if (has_questioncounts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->questioncounts(), target);
  }

  // optional uint32 rightcounts = 21;
  if (has_rightcounts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->rightcounts(), target);
  }

  // optional uint32 rewardstate = 22;
  if (has_rewardstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->rewardstate(), target);
  }

  // repeated int32 open_button_list = 23;
  for (int i = 0; i < this->open_button_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(23, this->open_button_list(i), target);
  }

  // repeated int32 open_button_reward = 24;
  for (int i = 0; i < this->open_button_reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(24, this->open_button_reward(i), target);
  }

  // optional .proto.message.MailBoxData maildata = 25;
  if (has_maildata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->maildata(), target);
  }

  // optional uint32 role_create_time = 26;
  if (has_role_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->role_create_time(), target);
  }

  // optional uint32 total_online_sec = 27;
  if (has_total_online_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->total_online_sec(), target);
  }

  // repeated .proto.message.SupportData support_data = 28;
  for (int i = 0; i < this->support_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->support_data(i), target);
  }

  // optional int32 relive_times = 29;
  if (has_relive_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->relive_times(), target);
  }

  // optional uint32 guild_contribution = 30;
  if (has_guild_contribution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->guild_contribution(), target);
  }

  // optional bool ignore_teaminvite = 31;
  if (has_ignore_teaminvite()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->ignore_teaminvite(), target);
  }

  // optional uint64 offline_tick = 32;
  if (has_offline_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(32, this->offline_tick(), target);
  }

  // repeated .proto.message.PointData point_data = 33;
  for (int i = 0; i < this->point_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->point_data(i), target);
  }

  // optional uint32 xpskillenergy = 34;
  if (has_xpskillenergy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->xpskillenergy(), target);
  }

  // optional int32 avatar_id_on = 35;
  if (has_avatar_id_on()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->avatar_id_on(), target);
  }

  // optional int32 colour_id_on = 36;
  if (has_colour_id_on()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->colour_id_on(), target);
  }

  // repeated .proto.message.Avatar avatar_list = 37;
  for (int i = 0; i < this->avatar_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        37, this->avatar_list(i), target);
  }

  // repeated int32 posid_list = 38;
  for (int i = 0; i < this->posid_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(38, this->posid_list(i), target);
  }

  // optional uint32 offpvpcounts = 39;
  if (has_offpvpcounts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(39, this->offpvpcounts(), target);
  }

  // optional uint32 offpvpbuycounts = 40;
  if (has_offpvpbuycounts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->offpvpbuycounts(), target);
  }

  // optional uint64 offpvprewordtime = 41;
  if (has_offpvprewordtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(41, this->offpvprewordtime(), target);
  }

  // optional int32 awaken_points = 42;
  if (has_awaken_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(42, this->awaken_points(), target);
  }

  // optional int32 soulvalue = 43;
  if (has_soulvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(43, this->soulvalue(), target);
  }

  // optional .proto.message.SuolBoxInfo souldata = 44;
  if (has_souldata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        44, this->souldata(), target);
  }

  // optional int32 cur_MultiChivalrous = 45;
  if (has_cur_multichivalrous()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(45, this->cur_multichivalrous(), target);
  }

  // optional int32 cur_EpicChivalrous = 46;
  if (has_cur_epicchivalrous()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(46, this->cur_epicchivalrous(), target);
  }

  // optional .proto.message.RecoverList recover_data = 47;
  if (has_recover_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        47, this->recover_data(), target);
  }

  // optional int32 diamondbind = 48;
  if (has_diamondbind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(48, this->diamondbind(), target);
  }

  // optional uint32 livelyupid = 49;
  if (has_livelyupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(49, this->livelyupid(), target);
  }

  // optional uint32 liveupexp = 50;
  if (has_liveupexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(50, this->liveupexp(), target);
  }

  // optional uint32 dayamass = 51;
  if (has_dayamass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(51, this->dayamass(), target);
  }

  // optional uint32 honor = 52;
  if (has_honor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(52, this->honor(), target);
  }

  // optional uint32 offpvprewordid = 53;
  if (has_offpvprewordid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(53, this->offpvprewordid(), target);
  }

  // optional uint32 attackmode = 54;
  if (has_attackmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(54, this->attackmode(), target);
  }

  // optional string finishkey = 55;
  if (has_finishkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->finishkey().data(), this->finishkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        55, this->finishkey(), target);
  }

  // optional uint32 guidepart = 56;
  if (has_guidepart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(56, this->guidepart(), target);
  }

  // optional uint32 mintage = 57;
  if (has_mintage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(57, this->mintage(), target);
  }

  // optional int32 dhbuycounts = 58;
  if (has_dhbuycounts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(58, this->dhbuycounts(), target);
  }

  // repeated uint32 dhdropidlist = 59;
  for (int i = 0; i < this->dhdropidlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(59, this->dhdropidlist(i), target);
  }

  // optional uint32 dhlev = 60;
  if (has_dhlev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(60, this->dhlev(), target);
  }

  // optional int32 dhexp = 61;
  if (has_dhexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(61, this->dhexp(), target);
  }

  // optional int32 dhcounts = 62;
  if (has_dhcounts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(62, this->dhcounts(), target);
  }

  // optional .proto.message.Potential sPotential = 63;
  if (has_spotential()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        63, this->spotential(), target);
  }

  // optional .proto.message.SecretStoreInfo ssinfo = 64;
  if (has_ssinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        64, this->ssinfo(), target);
  }

  // optional uint64 lastofftime = 65;
  if (has_lastofftime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(65, this->lastofftime(), target);
  }

  // optional uint64 accumulateofftime = 66;
  if (has_accumulateofftime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(66, this->accumulateofftime(), target);
  }

  // optional uint64 ableacotime = 67;
  if (has_ableacotime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(67, this->ableacotime(), target);
  }

  // optional int32 roulette_score = 68;
  if (has_roulette_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(68, this->roulette_score(), target);
  }

  // optional uint64 offlinetime = 69;
  if (has_offlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(69, this->offlinetime(), target);
  }

  // repeated uint32 guildbossid = 70;
  for (int i = 0; i < this->guildbossid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(70, this->guildbossid(i), target);
  }

  // optional uint64 offexpnum = 71;
  if (has_offexpnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(71, this->offexpnum(), target);
  }

  // optional uint32 friendly = 72;
  if (has_friendly()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(72, this->friendly(), target);
  }

  // optional uint32 dreadcounts = 73;
  if (has_dreadcounts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(73, this->dreadcounts(), target);
  }

  // optional .proto.message.MatchType match_type = 74;
  if (has_match_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      74, this->match_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 map_id = 1;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_id());
    }

    // optional .proto.message.Point3D pt = 2;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

    // optional float dir = 3;
    if (has_dir()) {
      total_size += 1 + 4;
    }

    // optional int32 layerId = 4;
    if (has_layerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layerid());
    }

    // optional int32 DungeonID = 5;
    if (has_dungeonid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dungeonid());
    }

    // optional int32 RecordMapId = 6;
    if (has_recordmapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recordmapid());
    }

    // optional int32 RecordLayerId = 7;
    if (has_recordlayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recordlayerid());
    }

    // optional .proto.message.Point3D RecordPt = 8;
    if (has_recordpt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recordpt());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float RecordDir = 9;
    if (has_recorddir()) {
      total_size += 1 + 4;
    }

    // optional int32 reset_time_day = 10;
    if (has_reset_time_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reset_time_day());
    }

    // optional int32 reset_time_week = 11;
    if (has_reset_time_week()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reset_time_week());
    }

    // optional int32 vigor = 12;
    if (has_vigor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vigor());
    }

    // optional int32 lucky_value = 13;
    if (has_lucky_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lucky_value());
    }

    // optional int32 idy_points = 16;
    if (has_idy_points()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idy_points());
    }

  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional int32 tal_points = 18;
    if (has_tal_points()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tal_points());
    }

    // optional int32 tal_item_times = 19;
    if (has_tal_item_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tal_item_times());
    }

    // optional uint32 questioncounts = 20;
    if (has_questioncounts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->questioncounts());
    }

    // optional uint32 rightcounts = 21;
    if (has_rightcounts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rightcounts());
    }

    // optional uint32 rewardstate = 22;
    if (has_rewardstate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardstate());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .proto.message.MailBoxData maildata = 25;
    if (has_maildata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->maildata());
    }

    // optional uint32 role_create_time = 26;
    if (has_role_create_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_create_time());
    }

    // optional uint32 total_online_sec = 27;
    if (has_total_online_sec()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_online_sec());
    }

    // optional int32 relive_times = 29;
    if (has_relive_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->relive_times());
    }

    // optional uint32 guild_contribution = 30;
    if (has_guild_contribution()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_contribution());
    }

    // optional bool ignore_teaminvite = 31;
    if (has_ignore_teaminvite()) {
      total_size += 2 + 1;
    }

    // optional uint64 offline_tick = 32;
    if (has_offline_tick()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->offline_tick());
    }

  }
  if (_has_bits_[33 / 32] & (0xffu << (33 % 32))) {
    // optional uint32 xpskillenergy = 34;
    if (has_xpskillenergy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->xpskillenergy());
    }

    // optional int32 avatar_id_on = 35;
    if (has_avatar_id_on()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->avatar_id_on());
    }

    // optional int32 colour_id_on = 36;
    if (has_colour_id_on()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->colour_id_on());
    }

    // optional uint32 offpvpcounts = 39;
    if (has_offpvpcounts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offpvpcounts());
    }

    // optional uint32 offpvpbuycounts = 40;
    if (has_offpvpbuycounts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offpvpbuycounts());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional uint64 offpvprewordtime = 41;
    if (has_offpvprewordtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->offpvprewordtime());
    }

    // optional int32 awaken_points = 42;
    if (has_awaken_points()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awaken_points());
    }

    // optional int32 soulvalue = 43;
    if (has_soulvalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->soulvalue());
    }

    // optional .proto.message.SuolBoxInfo souldata = 44;
    if (has_souldata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->souldata());
    }

    // optional int32 cur_MultiChivalrous = 45;
    if (has_cur_multichivalrous()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_multichivalrous());
    }

    // optional int32 cur_EpicChivalrous = 46;
    if (has_cur_epicchivalrous()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_epicchivalrous());
    }

    // optional .proto.message.RecoverList recover_data = 47;
    if (has_recover_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recover_data());
    }

    // optional int32 diamondbind = 48;
    if (has_diamondbind()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->diamondbind());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional uint32 livelyupid = 49;
    if (has_livelyupid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->livelyupid());
    }

    // optional uint32 liveupexp = 50;
    if (has_liveupexp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->liveupexp());
    }

    // optional uint32 dayamass = 51;
    if (has_dayamass()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dayamass());
    }

    // optional uint32 honor = 52;
    if (has_honor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->honor());
    }

    // optional uint32 offpvprewordid = 53;
    if (has_offpvprewordid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offpvprewordid());
    }

    // optional uint32 attackmode = 54;
    if (has_attackmode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attackmode());
    }

    // optional string finishkey = 55;
    if (has_finishkey()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->finishkey());
    }

    // optional uint32 guidepart = 56;
    if (has_guidepart()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guidepart());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional uint32 mintage = 57;
    if (has_mintage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mintage());
    }

    // optional int32 dhbuycounts = 58;
    if (has_dhbuycounts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dhbuycounts());
    }

    // optional uint32 dhlev = 60;
    if (has_dhlev()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dhlev());
    }

    // optional int32 dhexp = 61;
    if (has_dhexp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dhexp());
    }

    // optional int32 dhcounts = 62;
    if (has_dhcounts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dhcounts());
    }

    // optional .proto.message.Potential sPotential = 63;
    if (has_spotential()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spotential());
    }

    // optional .proto.message.SecretStoreInfo ssinfo = 64;
    if (has_ssinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ssinfo());
    }

  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional uint64 lastofftime = 65;
    if (has_lastofftime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastofftime());
    }

    // optional uint64 accumulateofftime = 66;
    if (has_accumulateofftime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accumulateofftime());
    }

    // optional uint64 ableacotime = 67;
    if (has_ableacotime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ableacotime());
    }

    // optional int32 roulette_score = 68;
    if (has_roulette_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roulette_score());
    }

    // optional uint64 offlinetime = 69;
    if (has_offlinetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->offlinetime());
    }

    // optional uint64 offexpnum = 71;
    if (has_offexpnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->offexpnum());
    }

    // optional uint32 friendly = 72;
    if (has_friendly()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->friendly());
    }

  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    // optional uint32 dreadcounts = 73;
    if (has_dreadcounts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dreadcounts());
    }

    // optional .proto.message.MatchType match_type = 74;
    if (has_match_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->match_type());
    }

  }
  // repeated uint64 auction_item_list = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->auction_item_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->auction_item_list(i));
    }
    total_size += 1 * this->auction_item_list_size() + data_size;
  }

  // repeated uint64 attention_item_list = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->attention_item_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->attention_item_list(i));
    }
    total_size += 1 * this->attention_item_list_size() + data_size;
  }

  // repeated .proto.message.Identity identity_list = 17;
  total_size += 2 * this->identity_list_size();
  for (int i = 0; i < this->identity_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->identity_list(i));
  }

  // repeated int32 open_button_list = 23;
  {
    int data_size = 0;
    for (int i = 0; i < this->open_button_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->open_button_list(i));
    }
    total_size += 2 * this->open_button_list_size() + data_size;
  }

  // repeated int32 open_button_reward = 24;
  {
    int data_size = 0;
    for (int i = 0; i < this->open_button_reward_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->open_button_reward(i));
    }
    total_size += 2 * this->open_button_reward_size() + data_size;
  }

  // repeated .proto.message.SupportData support_data = 28;
  total_size += 2 * this->support_data_size();
  for (int i = 0; i < this->support_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->support_data(i));
  }

  // repeated .proto.message.PointData point_data = 33;
  total_size += 2 * this->point_data_size();
  for (int i = 0; i < this->point_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->point_data(i));
  }

  // repeated .proto.message.Avatar avatar_list = 37;
  total_size += 2 * this->avatar_list_size();
  for (int i = 0; i < this->avatar_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->avatar_list(i));
  }

  // repeated int32 posid_list = 38;
  {
    int data_size = 0;
    for (int i = 0; i < this->posid_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->posid_list(i));
    }
    total_size += 2 * this->posid_list_size() + data_size;
  }

  // repeated uint32 dhdropidlist = 59;
  {
    int data_size = 0;
    for (int i = 0; i < this->dhdropidlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->dhdropidlist(i));
    }
    total_size += 2 * this->dhdropidlist_size() + data_size;
  }

  // repeated uint32 guildbossid = 70;
  {
    int data_size = 0;
    for (int i = 0; i < this->guildbossid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->guildbossid(i));
    }
    total_size += 2 * this->guildbossid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataInfo::MergeFrom(const DataInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  auction_item_list_.MergeFrom(from.auction_item_list_);
  attention_item_list_.MergeFrom(from.attention_item_list_);
  identity_list_.MergeFrom(from.identity_list_);
  open_button_list_.MergeFrom(from.open_button_list_);
  open_button_reward_.MergeFrom(from.open_button_reward_);
  support_data_.MergeFrom(from.support_data_);
  point_data_.MergeFrom(from.point_data_);
  avatar_list_.MergeFrom(from.avatar_list_);
  posid_list_.MergeFrom(from.posid_list_);
  dhdropidlist_.MergeFrom(from.dhdropidlist_);
  guildbossid_.MergeFrom(from.guildbossid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_pt()) {
      mutable_pt()->::proto::message::Point3D::MergeFrom(from.pt());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_layerid()) {
      set_layerid(from.layerid());
    }
    if (from.has_dungeonid()) {
      set_dungeonid(from.dungeonid());
    }
    if (from.has_recordmapid()) {
      set_recordmapid(from.recordmapid());
    }
    if (from.has_recordlayerid()) {
      set_recordlayerid(from.recordlayerid());
    }
    if (from.has_recordpt()) {
      mutable_recordpt()->::proto::message::Point3D::MergeFrom(from.recordpt());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_recorddir()) {
      set_recorddir(from.recorddir());
    }
    if (from.has_reset_time_day()) {
      set_reset_time_day(from.reset_time_day());
    }
    if (from.has_reset_time_week()) {
      set_reset_time_week(from.reset_time_week());
    }
    if (from.has_vigor()) {
      set_vigor(from.vigor());
    }
    if (from.has_lucky_value()) {
      set_lucky_value(from.lucky_value());
    }
    if (from.has_idy_points()) {
      set_idy_points(from.idy_points());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_tal_points()) {
      set_tal_points(from.tal_points());
    }
    if (from.has_tal_item_times()) {
      set_tal_item_times(from.tal_item_times());
    }
    if (from.has_questioncounts()) {
      set_questioncounts(from.questioncounts());
    }
    if (from.has_rightcounts()) {
      set_rightcounts(from.rightcounts());
    }
    if (from.has_rewardstate()) {
      set_rewardstate(from.rewardstate());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_maildata()) {
      mutable_maildata()->::proto::message::MailBoxData::MergeFrom(from.maildata());
    }
    if (from.has_role_create_time()) {
      set_role_create_time(from.role_create_time());
    }
    if (from.has_total_online_sec()) {
      set_total_online_sec(from.total_online_sec());
    }
    if (from.has_relive_times()) {
      set_relive_times(from.relive_times());
    }
    if (from.has_guild_contribution()) {
      set_guild_contribution(from.guild_contribution());
    }
    if (from.has_ignore_teaminvite()) {
      set_ignore_teaminvite(from.ignore_teaminvite());
    }
    if (from.has_offline_tick()) {
      set_offline_tick(from.offline_tick());
    }
  }
  if (from._has_bits_[33 / 32] & (0xffu << (33 % 32))) {
    if (from.has_xpskillenergy()) {
      set_xpskillenergy(from.xpskillenergy());
    }
    if (from.has_avatar_id_on()) {
      set_avatar_id_on(from.avatar_id_on());
    }
    if (from.has_colour_id_on()) {
      set_colour_id_on(from.colour_id_on());
    }
    if (from.has_offpvpcounts()) {
      set_offpvpcounts(from.offpvpcounts());
    }
    if (from.has_offpvpbuycounts()) {
      set_offpvpbuycounts(from.offpvpbuycounts());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_offpvprewordtime()) {
      set_offpvprewordtime(from.offpvprewordtime());
    }
    if (from.has_awaken_points()) {
      set_awaken_points(from.awaken_points());
    }
    if (from.has_soulvalue()) {
      set_soulvalue(from.soulvalue());
    }
    if (from.has_souldata()) {
      mutable_souldata()->::proto::message::SuolBoxInfo::MergeFrom(from.souldata());
    }
    if (from.has_cur_multichivalrous()) {
      set_cur_multichivalrous(from.cur_multichivalrous());
    }
    if (from.has_cur_epicchivalrous()) {
      set_cur_epicchivalrous(from.cur_epicchivalrous());
    }
    if (from.has_recover_data()) {
      mutable_recover_data()->::proto::message::RecoverList::MergeFrom(from.recover_data());
    }
    if (from.has_diamondbind()) {
      set_diamondbind(from.diamondbind());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_livelyupid()) {
      set_livelyupid(from.livelyupid());
    }
    if (from.has_liveupexp()) {
      set_liveupexp(from.liveupexp());
    }
    if (from.has_dayamass()) {
      set_dayamass(from.dayamass());
    }
    if (from.has_honor()) {
      set_honor(from.honor());
    }
    if (from.has_offpvprewordid()) {
      set_offpvprewordid(from.offpvprewordid());
    }
    if (from.has_attackmode()) {
      set_attackmode(from.attackmode());
    }
    if (from.has_finishkey()) {
      set_finishkey(from.finishkey());
    }
    if (from.has_guidepart()) {
      set_guidepart(from.guidepart());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_mintage()) {
      set_mintage(from.mintage());
    }
    if (from.has_dhbuycounts()) {
      set_dhbuycounts(from.dhbuycounts());
    }
    if (from.has_dhlev()) {
      set_dhlev(from.dhlev());
    }
    if (from.has_dhexp()) {
      set_dhexp(from.dhexp());
    }
    if (from.has_dhcounts()) {
      set_dhcounts(from.dhcounts());
    }
    if (from.has_spotential()) {
      mutable_spotential()->::proto::message::Potential::MergeFrom(from.spotential());
    }
    if (from.has_ssinfo()) {
      mutable_ssinfo()->::proto::message::SecretStoreInfo::MergeFrom(from.ssinfo());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_lastofftime()) {
      set_lastofftime(from.lastofftime());
    }
    if (from.has_accumulateofftime()) {
      set_accumulateofftime(from.accumulateofftime());
    }
    if (from.has_ableacotime()) {
      set_ableacotime(from.ableacotime());
    }
    if (from.has_roulette_score()) {
      set_roulette_score(from.roulette_score());
    }
    if (from.has_offlinetime()) {
      set_offlinetime(from.offlinetime());
    }
    if (from.has_offexpnum()) {
      set_offexpnum(from.offexpnum());
    }
    if (from.has_friendly()) {
      set_friendly(from.friendly());
    }
  }
  if (from._has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    if (from.has_dreadcounts()) {
      set_dreadcounts(from.dreadcounts());
    }
    if (from.has_match_type()) {
      set_match_type(from.match_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataInfo::CopyFrom(const DataInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataInfo::IsInitialized() const {

  for (int i = 0; i < identity_list_size(); i++) {
    if (!this->identity_list(i).IsInitialized()) return false;
  }
  if (has_maildata()) {
    if (!this->maildata().IsInitialized()) return false;
  }
  for (int i = 0; i < support_data_size(); i++) {
    if (!this->support_data(i).IsInitialized()) return false;
  }
  for (int i = 0; i < point_data_size(); i++) {
    if (!this->point_data(i).IsInitialized()) return false;
  }
  if (has_spotential()) {
    if (!this->spotential().IsInitialized()) return false;
  }
  return true;
}

void DataInfo::Swap(DataInfo* other) {
  if (other != this) {
    std::swap(map_id_, other->map_id_);
    std::swap(pt_, other->pt_);
    std::swap(dir_, other->dir_);
    std::swap(layerid_, other->layerid_);
    std::swap(dungeonid_, other->dungeonid_);
    std::swap(recordmapid_, other->recordmapid_);
    std::swap(recordlayerid_, other->recordlayerid_);
    std::swap(recordpt_, other->recordpt_);
    std::swap(recorddir_, other->recorddir_);
    std::swap(reset_time_day_, other->reset_time_day_);
    std::swap(reset_time_week_, other->reset_time_week_);
    std::swap(vigor_, other->vigor_);
    std::swap(lucky_value_, other->lucky_value_);
    auction_item_list_.Swap(&other->auction_item_list_);
    attention_item_list_.Swap(&other->attention_item_list_);
    std::swap(idy_points_, other->idy_points_);
    identity_list_.Swap(&other->identity_list_);
    std::swap(tal_points_, other->tal_points_);
    std::swap(tal_item_times_, other->tal_item_times_);
    std::swap(questioncounts_, other->questioncounts_);
    std::swap(rightcounts_, other->rightcounts_);
    std::swap(rewardstate_, other->rewardstate_);
    open_button_list_.Swap(&other->open_button_list_);
    open_button_reward_.Swap(&other->open_button_reward_);
    std::swap(maildata_, other->maildata_);
    std::swap(role_create_time_, other->role_create_time_);
    std::swap(total_online_sec_, other->total_online_sec_);
    support_data_.Swap(&other->support_data_);
    std::swap(relive_times_, other->relive_times_);
    std::swap(guild_contribution_, other->guild_contribution_);
    std::swap(ignore_teaminvite_, other->ignore_teaminvite_);
    std::swap(offline_tick_, other->offline_tick_);
    point_data_.Swap(&other->point_data_);
    std::swap(xpskillenergy_, other->xpskillenergy_);
    std::swap(avatar_id_on_, other->avatar_id_on_);
    std::swap(colour_id_on_, other->colour_id_on_);
    avatar_list_.Swap(&other->avatar_list_);
    posid_list_.Swap(&other->posid_list_);
    std::swap(offpvpcounts_, other->offpvpcounts_);
    std::swap(offpvpbuycounts_, other->offpvpbuycounts_);
    std::swap(offpvprewordtime_, other->offpvprewordtime_);
    std::swap(awaken_points_, other->awaken_points_);
    std::swap(soulvalue_, other->soulvalue_);
    std::swap(souldata_, other->souldata_);
    std::swap(cur_multichivalrous_, other->cur_multichivalrous_);
    std::swap(cur_epicchivalrous_, other->cur_epicchivalrous_);
    std::swap(recover_data_, other->recover_data_);
    std::swap(diamondbind_, other->diamondbind_);
    std::swap(livelyupid_, other->livelyupid_);
    std::swap(liveupexp_, other->liveupexp_);
    std::swap(dayamass_, other->dayamass_);
    std::swap(honor_, other->honor_);
    std::swap(offpvprewordid_, other->offpvprewordid_);
    std::swap(attackmode_, other->attackmode_);
    std::swap(finishkey_, other->finishkey_);
    std::swap(guidepart_, other->guidepart_);
    std::swap(mintage_, other->mintage_);
    std::swap(dhbuycounts_, other->dhbuycounts_);
    dhdropidlist_.Swap(&other->dhdropidlist_);
    std::swap(dhlev_, other->dhlev_);
    std::swap(dhexp_, other->dhexp_);
    std::swap(dhcounts_, other->dhcounts_);
    std::swap(spotential_, other->spotential_);
    std::swap(ssinfo_, other->ssinfo_);
    std::swap(lastofftime_, other->lastofftime_);
    std::swap(accumulateofftime_, other->accumulateofftime_);
    std::swap(ableacotime_, other->ableacotime_);
    std::swap(roulette_score_, other->roulette_score_);
    std::swap(offlinetime_, other->offlinetime_);
    guildbossid_.Swap(&other->guildbossid_);
    std::swap(offexpnum_, other->offexpnum_);
    std::swap(friendly_, other->friendly_);
    std::swap(dreadcounts_, other->dreadcounts_);
    std::swap(match_type_, other->match_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataInfo_descriptor_;
  metadata.reflection = DataInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

// @@protoc_insertion_point(global_scope)
