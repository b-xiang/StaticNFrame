// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: soulbox.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "soulbox.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

namespace {

const ::google::protobuf::Descriptor* SuolBoxInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SuolBoxInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SoulBox_CS_RequestData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SoulBox_CS_RequestData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SoulBox_SC_AckData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SoulBox_SC_AckData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SoulBox_CS_RequestUpgradeBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SoulBox_CS_RequestUpgradeBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* SoulBox_SC_AckUpgradeBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SoulBox_SC_AckUpgradeBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* SoulBox_CS_RequestUpgradeSuper_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SoulBox_CS_RequestUpgradeSuper_reflection_ = NULL;
const ::google::protobuf::Descriptor* SoulBox_SC_AckUpgradeSuper_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SoulBox_SC_AckUpgradeSuper_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_soulbox_2eproto() {
  protobuf_AddDesc_soulbox_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "soulbox.proto");
  GOOGLE_CHECK(file != NULL);
  SuolBoxInfo_descriptor_ = file->message_type(0);
  static const int SuolBoxInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuolBoxInfo, boxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuolBoxInfo, superid_),
  };
  SuolBoxInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SuolBoxInfo_descriptor_,
      SuolBoxInfo::default_instance_,
      SuolBoxInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuolBoxInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuolBoxInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SuolBoxInfo));
  SoulBox_CS_RequestData_descriptor_ = file->message_type(1);
  static const int SoulBox_CS_RequestData_offsets_[1] = {
  };
  SoulBox_CS_RequestData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SoulBox_CS_RequestData_descriptor_,
      SoulBox_CS_RequestData::default_instance_,
      SoulBox_CS_RequestData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoulBox_CS_RequestData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoulBox_CS_RequestData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SoulBox_CS_RequestData));
  SoulBox_SC_AckData_descriptor_ = file->message_type(2);
  static const int SoulBox_SC_AckData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoulBox_SC_AckData, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoulBox_SC_AckData, data_),
  };
  SoulBox_SC_AckData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SoulBox_SC_AckData_descriptor_,
      SoulBox_SC_AckData::default_instance_,
      SoulBox_SC_AckData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoulBox_SC_AckData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoulBox_SC_AckData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SoulBox_SC_AckData));
  SoulBox_CS_RequestUpgradeBox_descriptor_ = file->message_type(3);
  static const int SoulBox_CS_RequestUpgradeBox_offsets_[1] = {
  };
  SoulBox_CS_RequestUpgradeBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SoulBox_CS_RequestUpgradeBox_descriptor_,
      SoulBox_CS_RequestUpgradeBox::default_instance_,
      SoulBox_CS_RequestUpgradeBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoulBox_CS_RequestUpgradeBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoulBox_CS_RequestUpgradeBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SoulBox_CS_RequestUpgradeBox));
  SoulBox_SC_AckUpgradeBox_descriptor_ = file->message_type(4);
  static const int SoulBox_SC_AckUpgradeBox_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoulBox_SC_AckUpgradeBox, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoulBox_SC_AckUpgradeBox, newid_),
  };
  SoulBox_SC_AckUpgradeBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SoulBox_SC_AckUpgradeBox_descriptor_,
      SoulBox_SC_AckUpgradeBox::default_instance_,
      SoulBox_SC_AckUpgradeBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoulBox_SC_AckUpgradeBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoulBox_SC_AckUpgradeBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SoulBox_SC_AckUpgradeBox));
  SoulBox_CS_RequestUpgradeSuper_descriptor_ = file->message_type(5);
  static const int SoulBox_CS_RequestUpgradeSuper_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoulBox_CS_RequestUpgradeSuper, nid_),
  };
  SoulBox_CS_RequestUpgradeSuper_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SoulBox_CS_RequestUpgradeSuper_descriptor_,
      SoulBox_CS_RequestUpgradeSuper::default_instance_,
      SoulBox_CS_RequestUpgradeSuper_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoulBox_CS_RequestUpgradeSuper, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoulBox_CS_RequestUpgradeSuper, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SoulBox_CS_RequestUpgradeSuper));
  SoulBox_SC_AckUpgradeSuper_descriptor_ = file->message_type(6);
  static const int SoulBox_SC_AckUpgradeSuper_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoulBox_SC_AckUpgradeSuper, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoulBox_SC_AckUpgradeSuper, newid_),
  };
  SoulBox_SC_AckUpgradeSuper_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SoulBox_SC_AckUpgradeSuper_descriptor_,
      SoulBox_SC_AckUpgradeSuper::default_instance_,
      SoulBox_SC_AckUpgradeSuper_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoulBox_SC_AckUpgradeSuper, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoulBox_SC_AckUpgradeSuper, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SoulBox_SC_AckUpgradeSuper));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_soulbox_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SuolBoxInfo_descriptor_, &SuolBoxInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SoulBox_CS_RequestData_descriptor_, &SoulBox_CS_RequestData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SoulBox_SC_AckData_descriptor_, &SoulBox_SC_AckData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SoulBox_CS_RequestUpgradeBox_descriptor_, &SoulBox_CS_RequestUpgradeBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SoulBox_SC_AckUpgradeBox_descriptor_, &SoulBox_SC_AckUpgradeBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SoulBox_CS_RequestUpgradeSuper_descriptor_, &SoulBox_CS_RequestUpgradeSuper::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SoulBox_SC_AckUpgradeSuper_descriptor_, &SoulBox_SC_AckUpgradeSuper::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_soulbox_2eproto() {
  delete SuolBoxInfo::default_instance_;
  delete SuolBoxInfo_reflection_;
  delete SoulBox_CS_RequestData::default_instance_;
  delete SoulBox_CS_RequestData_reflection_;
  delete SoulBox_SC_AckData::default_instance_;
  delete SoulBox_SC_AckData_reflection_;
  delete SoulBox_CS_RequestUpgradeBox::default_instance_;
  delete SoulBox_CS_RequestUpgradeBox_reflection_;
  delete SoulBox_SC_AckUpgradeBox::default_instance_;
  delete SoulBox_SC_AckUpgradeBox_reflection_;
  delete SoulBox_CS_RequestUpgradeSuper::default_instance_;
  delete SoulBox_CS_RequestUpgradeSuper_reflection_;
  delete SoulBox_SC_AckUpgradeSuper::default_instance_;
  delete SoulBox_SC_AckUpgradeSuper_reflection_;
}

void protobuf_AddDesc_soulbox_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rsoulbox.proto\022\rproto.message\"-\n\013SuolBo"
    "xInfo\022\r\n\005boxid\030\001 \001(\r\022\017\n\007superid\030\002 \003(\r\"\030\n"
    "\026SoulBox_CS_RequestData\"N\n\022SoulBox_SC_Ac"
    "kData\022\016\n\006result\030\001 \001(\r\022(\n\004data\030\002 \001(\0132\032.pr"
    "oto.message.SuolBoxInfo\"\036\n\034SoulBox_CS_Re"
    "questUpgradeBox\"9\n\030SoulBox_SC_AckUpgrade"
    "Box\022\016\n\006result\030\001 \001(\r\022\r\n\005newid\030\002 \001(\r\"-\n\036So"
    "ulBox_CS_RequestUpgradeSuper\022\013\n\003nID\030\001 \001("
    "\r\";\n\032SoulBox_SC_AckUpgradeSuper\022\016\n\006resul"
    "t\030\001 \001(\r\022\r\n\005newid\030\002 \001(\rB\017\n\rproto.message", 399);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "soulbox.proto", &protobuf_RegisterTypes);
  SuolBoxInfo::default_instance_ = new SuolBoxInfo();
  SoulBox_CS_RequestData::default_instance_ = new SoulBox_CS_RequestData();
  SoulBox_SC_AckData::default_instance_ = new SoulBox_SC_AckData();
  SoulBox_CS_RequestUpgradeBox::default_instance_ = new SoulBox_CS_RequestUpgradeBox();
  SoulBox_SC_AckUpgradeBox::default_instance_ = new SoulBox_SC_AckUpgradeBox();
  SoulBox_CS_RequestUpgradeSuper::default_instance_ = new SoulBox_CS_RequestUpgradeSuper();
  SoulBox_SC_AckUpgradeSuper::default_instance_ = new SoulBox_SC_AckUpgradeSuper();
  SuolBoxInfo::default_instance_->InitAsDefaultInstance();
  SoulBox_CS_RequestData::default_instance_->InitAsDefaultInstance();
  SoulBox_SC_AckData::default_instance_->InitAsDefaultInstance();
  SoulBox_CS_RequestUpgradeBox::default_instance_->InitAsDefaultInstance();
  SoulBox_SC_AckUpgradeBox::default_instance_->InitAsDefaultInstance();
  SoulBox_CS_RequestUpgradeSuper::default_instance_->InitAsDefaultInstance();
  SoulBox_SC_AckUpgradeSuper::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_soulbox_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_soulbox_2eproto {
  StaticDescriptorInitializer_soulbox_2eproto() {
    protobuf_AddDesc_soulbox_2eproto();
  }
} static_descriptor_initializer_soulbox_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SuolBoxInfo::kBoxidFieldNumber;
const int SuolBoxInfo::kSuperidFieldNumber;
#endif  // !_MSC_VER

SuolBoxInfo::SuolBoxInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SuolBoxInfo::InitAsDefaultInstance() {
}

SuolBoxInfo::SuolBoxInfo(const SuolBoxInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SuolBoxInfo::SharedCtor() {
  _cached_size_ = 0;
  boxid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SuolBoxInfo::~SuolBoxInfo() {
  SharedDtor();
}

void SuolBoxInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SuolBoxInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SuolBoxInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SuolBoxInfo_descriptor_;
}

const SuolBoxInfo& SuolBoxInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_soulbox_2eproto();
  return *default_instance_;
}

SuolBoxInfo* SuolBoxInfo::default_instance_ = NULL;

SuolBoxInfo* SuolBoxInfo::New() const {
  return new SuolBoxInfo;
}

void SuolBoxInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    boxid_ = 0u;
  }
  superid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SuolBoxInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 boxid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boxid_)));
          set_has_boxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_superid;
        break;
      }

      // repeated uint32 superid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_superid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_superid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_superid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_superid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SuolBoxInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 boxid = 1;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->boxid(), output);
  }

  // repeated uint32 superid = 2;
  for (int i = 0; i < this->superid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->superid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SuolBoxInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 boxid = 1;
  if (has_boxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->boxid(), target);
  }

  // repeated uint32 superid = 2;
  for (int i = 0; i < this->superid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->superid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SuolBoxInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 boxid = 1;
    if (has_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boxid());
    }

  }
  // repeated uint32 superid = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->superid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->superid(i));
    }
    total_size += 1 * this->superid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SuolBoxInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SuolBoxInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SuolBoxInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SuolBoxInfo::MergeFrom(const SuolBoxInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  superid_.MergeFrom(from.superid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SuolBoxInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SuolBoxInfo::CopyFrom(const SuolBoxInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuolBoxInfo::IsInitialized() const {

  return true;
}

void SuolBoxInfo::Swap(SuolBoxInfo* other) {
  if (other != this) {
    std::swap(boxid_, other->boxid_);
    superid_.Swap(&other->superid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SuolBoxInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SuolBoxInfo_descriptor_;
  metadata.reflection = SuolBoxInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SoulBox_CS_RequestData::SoulBox_CS_RequestData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SoulBox_CS_RequestData::InitAsDefaultInstance() {
}

SoulBox_CS_RequestData::SoulBox_CS_RequestData(const SoulBox_CS_RequestData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SoulBox_CS_RequestData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SoulBox_CS_RequestData::~SoulBox_CS_RequestData() {
  SharedDtor();
}

void SoulBox_CS_RequestData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SoulBox_CS_RequestData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SoulBox_CS_RequestData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SoulBox_CS_RequestData_descriptor_;
}

const SoulBox_CS_RequestData& SoulBox_CS_RequestData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_soulbox_2eproto();
  return *default_instance_;
}

SoulBox_CS_RequestData* SoulBox_CS_RequestData::default_instance_ = NULL;

SoulBox_CS_RequestData* SoulBox_CS_RequestData::New() const {
  return new SoulBox_CS_RequestData;
}

void SoulBox_CS_RequestData::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SoulBox_CS_RequestData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SoulBox_CS_RequestData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SoulBox_CS_RequestData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SoulBox_CS_RequestData::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoulBox_CS_RequestData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SoulBox_CS_RequestData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SoulBox_CS_RequestData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SoulBox_CS_RequestData::MergeFrom(const SoulBox_CS_RequestData& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SoulBox_CS_RequestData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoulBox_CS_RequestData::CopyFrom(const SoulBox_CS_RequestData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoulBox_CS_RequestData::IsInitialized() const {

  return true;
}

void SoulBox_CS_RequestData::Swap(SoulBox_CS_RequestData* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SoulBox_CS_RequestData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SoulBox_CS_RequestData_descriptor_;
  metadata.reflection = SoulBox_CS_RequestData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SoulBox_SC_AckData::kResultFieldNumber;
const int SoulBox_SC_AckData::kDataFieldNumber;
#endif  // !_MSC_VER

SoulBox_SC_AckData::SoulBox_SC_AckData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SoulBox_SC_AckData::InitAsDefaultInstance() {
  data_ = const_cast< ::proto::message::SuolBoxInfo*>(&::proto::message::SuolBoxInfo::default_instance());
}

SoulBox_SC_AckData::SoulBox_SC_AckData(const SoulBox_SC_AckData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SoulBox_SC_AckData::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SoulBox_SC_AckData::~SoulBox_SC_AckData() {
  SharedDtor();
}

void SoulBox_SC_AckData::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void SoulBox_SC_AckData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SoulBox_SC_AckData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SoulBox_SC_AckData_descriptor_;
}

const SoulBox_SC_AckData& SoulBox_SC_AckData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_soulbox_2eproto();
  return *default_instance_;
}

SoulBox_SC_AckData* SoulBox_SC_AckData::default_instance_ = NULL;

SoulBox_SC_AckData* SoulBox_SC_AckData::New() const {
  return new SoulBox_SC_AckData;
}

void SoulBox_SC_AckData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    if (has_data()) {
      if (data_ != NULL) data_->::proto::message::SuolBoxInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SoulBox_SC_AckData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .proto.message.SuolBoxInfo data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SoulBox_SC_AckData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional .proto.message.SuolBoxInfo data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SoulBox_SC_AckData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional .proto.message.SuolBoxInfo data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SoulBox_SC_AckData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional .proto.message.SuolBoxInfo data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoulBox_SC_AckData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SoulBox_SC_AckData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SoulBox_SC_AckData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SoulBox_SC_AckData::MergeFrom(const SoulBox_SC_AckData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_data()) {
      mutable_data()->::proto::message::SuolBoxInfo::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SoulBox_SC_AckData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoulBox_SC_AckData::CopyFrom(const SoulBox_SC_AckData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoulBox_SC_AckData::IsInitialized() const {

  return true;
}

void SoulBox_SC_AckData::Swap(SoulBox_SC_AckData* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SoulBox_SC_AckData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SoulBox_SC_AckData_descriptor_;
  metadata.reflection = SoulBox_SC_AckData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SoulBox_CS_RequestUpgradeBox::SoulBox_CS_RequestUpgradeBox()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SoulBox_CS_RequestUpgradeBox::InitAsDefaultInstance() {
}

SoulBox_CS_RequestUpgradeBox::SoulBox_CS_RequestUpgradeBox(const SoulBox_CS_RequestUpgradeBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SoulBox_CS_RequestUpgradeBox::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SoulBox_CS_RequestUpgradeBox::~SoulBox_CS_RequestUpgradeBox() {
  SharedDtor();
}

void SoulBox_CS_RequestUpgradeBox::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SoulBox_CS_RequestUpgradeBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SoulBox_CS_RequestUpgradeBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SoulBox_CS_RequestUpgradeBox_descriptor_;
}

const SoulBox_CS_RequestUpgradeBox& SoulBox_CS_RequestUpgradeBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_soulbox_2eproto();
  return *default_instance_;
}

SoulBox_CS_RequestUpgradeBox* SoulBox_CS_RequestUpgradeBox::default_instance_ = NULL;

SoulBox_CS_RequestUpgradeBox* SoulBox_CS_RequestUpgradeBox::New() const {
  return new SoulBox_CS_RequestUpgradeBox;
}

void SoulBox_CS_RequestUpgradeBox::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SoulBox_CS_RequestUpgradeBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SoulBox_CS_RequestUpgradeBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SoulBox_CS_RequestUpgradeBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SoulBox_CS_RequestUpgradeBox::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoulBox_CS_RequestUpgradeBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SoulBox_CS_RequestUpgradeBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SoulBox_CS_RequestUpgradeBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SoulBox_CS_RequestUpgradeBox::MergeFrom(const SoulBox_CS_RequestUpgradeBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SoulBox_CS_RequestUpgradeBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoulBox_CS_RequestUpgradeBox::CopyFrom(const SoulBox_CS_RequestUpgradeBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoulBox_CS_RequestUpgradeBox::IsInitialized() const {

  return true;
}

void SoulBox_CS_RequestUpgradeBox::Swap(SoulBox_CS_RequestUpgradeBox* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SoulBox_CS_RequestUpgradeBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SoulBox_CS_RequestUpgradeBox_descriptor_;
  metadata.reflection = SoulBox_CS_RequestUpgradeBox_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SoulBox_SC_AckUpgradeBox::kResultFieldNumber;
const int SoulBox_SC_AckUpgradeBox::kNewidFieldNumber;
#endif  // !_MSC_VER

SoulBox_SC_AckUpgradeBox::SoulBox_SC_AckUpgradeBox()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SoulBox_SC_AckUpgradeBox::InitAsDefaultInstance() {
}

SoulBox_SC_AckUpgradeBox::SoulBox_SC_AckUpgradeBox(const SoulBox_SC_AckUpgradeBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SoulBox_SC_AckUpgradeBox::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  newid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SoulBox_SC_AckUpgradeBox::~SoulBox_SC_AckUpgradeBox() {
  SharedDtor();
}

void SoulBox_SC_AckUpgradeBox::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SoulBox_SC_AckUpgradeBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SoulBox_SC_AckUpgradeBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SoulBox_SC_AckUpgradeBox_descriptor_;
}

const SoulBox_SC_AckUpgradeBox& SoulBox_SC_AckUpgradeBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_soulbox_2eproto();
  return *default_instance_;
}

SoulBox_SC_AckUpgradeBox* SoulBox_SC_AckUpgradeBox::default_instance_ = NULL;

SoulBox_SC_AckUpgradeBox* SoulBox_SC_AckUpgradeBox::New() const {
  return new SoulBox_SC_AckUpgradeBox;
}

void SoulBox_SC_AckUpgradeBox::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    newid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SoulBox_SC_AckUpgradeBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_newid;
        break;
      }

      // optional uint32 newid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newid_)));
          set_has_newid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SoulBox_SC_AckUpgradeBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional uint32 newid = 2;
  if (has_newid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->newid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SoulBox_SC_AckUpgradeBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional uint32 newid = 2;
  if (has_newid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->newid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SoulBox_SC_AckUpgradeBox::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional uint32 newid = 2;
    if (has_newid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoulBox_SC_AckUpgradeBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SoulBox_SC_AckUpgradeBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SoulBox_SC_AckUpgradeBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SoulBox_SC_AckUpgradeBox::MergeFrom(const SoulBox_SC_AckUpgradeBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_newid()) {
      set_newid(from.newid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SoulBox_SC_AckUpgradeBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoulBox_SC_AckUpgradeBox::CopyFrom(const SoulBox_SC_AckUpgradeBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoulBox_SC_AckUpgradeBox::IsInitialized() const {

  return true;
}

void SoulBox_SC_AckUpgradeBox::Swap(SoulBox_SC_AckUpgradeBox* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(newid_, other->newid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SoulBox_SC_AckUpgradeBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SoulBox_SC_AckUpgradeBox_descriptor_;
  metadata.reflection = SoulBox_SC_AckUpgradeBox_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SoulBox_CS_RequestUpgradeSuper::kNIDFieldNumber;
#endif  // !_MSC_VER

SoulBox_CS_RequestUpgradeSuper::SoulBox_CS_RequestUpgradeSuper()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SoulBox_CS_RequestUpgradeSuper::InitAsDefaultInstance() {
}

SoulBox_CS_RequestUpgradeSuper::SoulBox_CS_RequestUpgradeSuper(const SoulBox_CS_RequestUpgradeSuper& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SoulBox_CS_RequestUpgradeSuper::SharedCtor() {
  _cached_size_ = 0;
  nid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SoulBox_CS_RequestUpgradeSuper::~SoulBox_CS_RequestUpgradeSuper() {
  SharedDtor();
}

void SoulBox_CS_RequestUpgradeSuper::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SoulBox_CS_RequestUpgradeSuper::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SoulBox_CS_RequestUpgradeSuper::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SoulBox_CS_RequestUpgradeSuper_descriptor_;
}

const SoulBox_CS_RequestUpgradeSuper& SoulBox_CS_RequestUpgradeSuper::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_soulbox_2eproto();
  return *default_instance_;
}

SoulBox_CS_RequestUpgradeSuper* SoulBox_CS_RequestUpgradeSuper::default_instance_ = NULL;

SoulBox_CS_RequestUpgradeSuper* SoulBox_CS_RequestUpgradeSuper::New() const {
  return new SoulBox_CS_RequestUpgradeSuper;
}

void SoulBox_CS_RequestUpgradeSuper::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SoulBox_CS_RequestUpgradeSuper::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 nID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nid_)));
          set_has_nid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SoulBox_CS_RequestUpgradeSuper::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 nID = 1;
  if (has_nid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SoulBox_CS_RequestUpgradeSuper::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 nID = 1;
  if (has_nid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SoulBox_CS_RequestUpgradeSuper::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 nID = 1;
    if (has_nid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoulBox_CS_RequestUpgradeSuper::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SoulBox_CS_RequestUpgradeSuper* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SoulBox_CS_RequestUpgradeSuper*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SoulBox_CS_RequestUpgradeSuper::MergeFrom(const SoulBox_CS_RequestUpgradeSuper& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nid()) {
      set_nid(from.nid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SoulBox_CS_RequestUpgradeSuper::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoulBox_CS_RequestUpgradeSuper::CopyFrom(const SoulBox_CS_RequestUpgradeSuper& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoulBox_CS_RequestUpgradeSuper::IsInitialized() const {

  return true;
}

void SoulBox_CS_RequestUpgradeSuper::Swap(SoulBox_CS_RequestUpgradeSuper* other) {
  if (other != this) {
    std::swap(nid_, other->nid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SoulBox_CS_RequestUpgradeSuper::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SoulBox_CS_RequestUpgradeSuper_descriptor_;
  metadata.reflection = SoulBox_CS_RequestUpgradeSuper_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SoulBox_SC_AckUpgradeSuper::kResultFieldNumber;
const int SoulBox_SC_AckUpgradeSuper::kNewidFieldNumber;
#endif  // !_MSC_VER

SoulBox_SC_AckUpgradeSuper::SoulBox_SC_AckUpgradeSuper()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SoulBox_SC_AckUpgradeSuper::InitAsDefaultInstance() {
}

SoulBox_SC_AckUpgradeSuper::SoulBox_SC_AckUpgradeSuper(const SoulBox_SC_AckUpgradeSuper& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SoulBox_SC_AckUpgradeSuper::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  newid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SoulBox_SC_AckUpgradeSuper::~SoulBox_SC_AckUpgradeSuper() {
  SharedDtor();
}

void SoulBox_SC_AckUpgradeSuper::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SoulBox_SC_AckUpgradeSuper::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SoulBox_SC_AckUpgradeSuper::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SoulBox_SC_AckUpgradeSuper_descriptor_;
}

const SoulBox_SC_AckUpgradeSuper& SoulBox_SC_AckUpgradeSuper::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_soulbox_2eproto();
  return *default_instance_;
}

SoulBox_SC_AckUpgradeSuper* SoulBox_SC_AckUpgradeSuper::default_instance_ = NULL;

SoulBox_SC_AckUpgradeSuper* SoulBox_SC_AckUpgradeSuper::New() const {
  return new SoulBox_SC_AckUpgradeSuper;
}

void SoulBox_SC_AckUpgradeSuper::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    newid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SoulBox_SC_AckUpgradeSuper::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_newid;
        break;
      }

      // optional uint32 newid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newid_)));
          set_has_newid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SoulBox_SC_AckUpgradeSuper::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional uint32 newid = 2;
  if (has_newid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->newid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SoulBox_SC_AckUpgradeSuper::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional uint32 newid = 2;
  if (has_newid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->newid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SoulBox_SC_AckUpgradeSuper::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional uint32 newid = 2;
    if (has_newid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoulBox_SC_AckUpgradeSuper::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SoulBox_SC_AckUpgradeSuper* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SoulBox_SC_AckUpgradeSuper*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SoulBox_SC_AckUpgradeSuper::MergeFrom(const SoulBox_SC_AckUpgradeSuper& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_newid()) {
      set_newid(from.newid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SoulBox_SC_AckUpgradeSuper::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoulBox_SC_AckUpgradeSuper::CopyFrom(const SoulBox_SC_AckUpgradeSuper& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoulBox_SC_AckUpgradeSuper::IsInitialized() const {

  return true;
}

void SoulBox_SC_AckUpgradeSuper::Swap(SoulBox_SC_AckUpgradeSuper* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(newid_, other->newid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SoulBox_SC_AckUpgradeSuper::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SoulBox_SC_AckUpgradeSuper_descriptor_;
  metadata.reflection = SoulBox_SC_AckUpgradeSuper_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

// @@protoc_insertion_point(global_scope)
