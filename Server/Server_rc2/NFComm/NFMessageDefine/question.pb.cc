// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: question.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "question.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

namespace {

const ::google::protobuf::Descriptor* QuestionMSG_CS_ReqGetQuestionList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestionMSG_CS_ReqGetQuestionList_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestionMSG_SC_AckGetQuestionList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestionMSG_SC_AckGetQuestionList_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestionMSG_CS_ReqAnswerQuestion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestionMSG_CS_ReqAnswerQuestion_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestionMSG_SC_AckAnswerQuestion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestionMSG_SC_AckAnswerQuestion_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestionMSG_CS_ReqGetQuestionReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestionMSG_CS_ReqGetQuestionReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestionMSG_SC_AckGetQuestionReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestionMSG_SC_AckGetQuestionReward_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_question_2eproto() {
  protobuf_AddDesc_question_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "question.proto");
  GOOGLE_CHECK(file != NULL);
  QuestionMSG_CS_ReqGetQuestionList_descriptor_ = file->message_type(0);
  static const int QuestionMSG_CS_ReqGetQuestionList_offsets_[1] = {
  };
  QuestionMSG_CS_ReqGetQuestionList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestionMSG_CS_ReqGetQuestionList_descriptor_,
      QuestionMSG_CS_ReqGetQuestionList::default_instance_,
      QuestionMSG_CS_ReqGetQuestionList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestionMSG_CS_ReqGetQuestionList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestionMSG_CS_ReqGetQuestionList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestionMSG_CS_ReqGetQuestionList));
  QuestionMSG_SC_AckGetQuestionList_descriptor_ = file->message_type(1);
  static const int QuestionMSG_SC_AckGetQuestionList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestionMSG_SC_AckGetQuestionList, questionid_),
  };
  QuestionMSG_SC_AckGetQuestionList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestionMSG_SC_AckGetQuestionList_descriptor_,
      QuestionMSG_SC_AckGetQuestionList::default_instance_,
      QuestionMSG_SC_AckGetQuestionList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestionMSG_SC_AckGetQuestionList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestionMSG_SC_AckGetQuestionList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestionMSG_SC_AckGetQuestionList));
  QuestionMSG_CS_ReqAnswerQuestion_descriptor_ = file->message_type(2);
  static const int QuestionMSG_CS_ReqAnswerQuestion_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestionMSG_CS_ReqAnswerQuestion, questionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestionMSG_CS_ReqAnswerQuestion, answerid_),
  };
  QuestionMSG_CS_ReqAnswerQuestion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestionMSG_CS_ReqAnswerQuestion_descriptor_,
      QuestionMSG_CS_ReqAnswerQuestion::default_instance_,
      QuestionMSG_CS_ReqAnswerQuestion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestionMSG_CS_ReqAnswerQuestion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestionMSG_CS_ReqAnswerQuestion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestionMSG_CS_ReqAnswerQuestion));
  QuestionMSG_SC_AckAnswerQuestion_descriptor_ = file->message_type(3);
  static const int QuestionMSG_SC_AckAnswerQuestion_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestionMSG_SC_AckAnswerQuestion, result_),
  };
  QuestionMSG_SC_AckAnswerQuestion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestionMSG_SC_AckAnswerQuestion_descriptor_,
      QuestionMSG_SC_AckAnswerQuestion::default_instance_,
      QuestionMSG_SC_AckAnswerQuestion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestionMSG_SC_AckAnswerQuestion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestionMSG_SC_AckAnswerQuestion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestionMSG_SC_AckAnswerQuestion));
  QuestionMSG_CS_ReqGetQuestionReward_descriptor_ = file->message_type(4);
  static const int QuestionMSG_CS_ReqGetQuestionReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestionMSG_CS_ReqGetQuestionReward, rewardtype_),
  };
  QuestionMSG_CS_ReqGetQuestionReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestionMSG_CS_ReqGetQuestionReward_descriptor_,
      QuestionMSG_CS_ReqGetQuestionReward::default_instance_,
      QuestionMSG_CS_ReqGetQuestionReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestionMSG_CS_ReqGetQuestionReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestionMSG_CS_ReqGetQuestionReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestionMSG_CS_ReqGetQuestionReward));
  QuestionMSG_SC_AckGetQuestionReward_descriptor_ = file->message_type(5);
  static const int QuestionMSG_SC_AckGetQuestionReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestionMSG_SC_AckGetQuestionReward, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestionMSG_SC_AckGetQuestionReward, itemlist_),
  };
  QuestionMSG_SC_AckGetQuestionReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestionMSG_SC_AckGetQuestionReward_descriptor_,
      QuestionMSG_SC_AckGetQuestionReward::default_instance_,
      QuestionMSG_SC_AckGetQuestionReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestionMSG_SC_AckGetQuestionReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestionMSG_SC_AckGetQuestionReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestionMSG_SC_AckGetQuestionReward));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_question_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestionMSG_CS_ReqGetQuestionList_descriptor_, &QuestionMSG_CS_ReqGetQuestionList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestionMSG_SC_AckGetQuestionList_descriptor_, &QuestionMSG_SC_AckGetQuestionList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestionMSG_CS_ReqAnswerQuestion_descriptor_, &QuestionMSG_CS_ReqAnswerQuestion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestionMSG_SC_AckAnswerQuestion_descriptor_, &QuestionMSG_SC_AckAnswerQuestion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestionMSG_CS_ReqGetQuestionReward_descriptor_, &QuestionMSG_CS_ReqGetQuestionReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestionMSG_SC_AckGetQuestionReward_descriptor_, &QuestionMSG_SC_AckGetQuestionReward::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_question_2eproto() {
  delete QuestionMSG_CS_ReqGetQuestionList::default_instance_;
  delete QuestionMSG_CS_ReqGetQuestionList_reflection_;
  delete QuestionMSG_SC_AckGetQuestionList::default_instance_;
  delete QuestionMSG_SC_AckGetQuestionList_reflection_;
  delete QuestionMSG_CS_ReqAnswerQuestion::default_instance_;
  delete QuestionMSG_CS_ReqAnswerQuestion_reflection_;
  delete QuestionMSG_SC_AckAnswerQuestion::default_instance_;
  delete QuestionMSG_SC_AckAnswerQuestion_reflection_;
  delete QuestionMSG_CS_ReqGetQuestionReward::default_instance_;
  delete QuestionMSG_CS_ReqGetQuestionReward_reflection_;
  delete QuestionMSG_SC_AckGetQuestionReward::default_instance_;
  delete QuestionMSG_SC_AckGetQuestionReward_reflection_;
}

void protobuf_AddDesc_question_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::message::protobuf_AddDesc_item_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016question.proto\022\rproto.message\032\nitem.pr"
    "oto\"#\n!QuestionMSG_CS_ReqGetQuestionList"
    "\"7\n!QuestionMSG_SC_AckGetQuestionList\022\022\n"
    "\nquestionid\030\001 \003(\r\"H\n QuestionMSG_CS_ReqA"
    "nswerQuestion\022\022\n\nquestionid\030\001 \002(\r\022\020\n\010ans"
    "werid\030\002 \002(\r\"2\n QuestionMSG_SC_AckAnswerQ"
    "uestion\022\016\n\006result\030\001 \002(\r\"9\n#QuestionMSG_C"
    "S_ReqGetQuestionReward\022\022\n\nrewardtype\030\001 \002"
    "(\r\"c\n#QuestionMSG_SC_AckGetQuestionRewar"
    "d\022\016\n\006result\030\001 \002(\r\022,\n\010itemlist\030\002 \003(\0132\032.pr"
    "oto.message.DropItemNumB\017\n\rproto.message", 440);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "question.proto", &protobuf_RegisterTypes);
  QuestionMSG_CS_ReqGetQuestionList::default_instance_ = new QuestionMSG_CS_ReqGetQuestionList();
  QuestionMSG_SC_AckGetQuestionList::default_instance_ = new QuestionMSG_SC_AckGetQuestionList();
  QuestionMSG_CS_ReqAnswerQuestion::default_instance_ = new QuestionMSG_CS_ReqAnswerQuestion();
  QuestionMSG_SC_AckAnswerQuestion::default_instance_ = new QuestionMSG_SC_AckAnswerQuestion();
  QuestionMSG_CS_ReqGetQuestionReward::default_instance_ = new QuestionMSG_CS_ReqGetQuestionReward();
  QuestionMSG_SC_AckGetQuestionReward::default_instance_ = new QuestionMSG_SC_AckGetQuestionReward();
  QuestionMSG_CS_ReqGetQuestionList::default_instance_->InitAsDefaultInstance();
  QuestionMSG_SC_AckGetQuestionList::default_instance_->InitAsDefaultInstance();
  QuestionMSG_CS_ReqAnswerQuestion::default_instance_->InitAsDefaultInstance();
  QuestionMSG_SC_AckAnswerQuestion::default_instance_->InitAsDefaultInstance();
  QuestionMSG_CS_ReqGetQuestionReward::default_instance_->InitAsDefaultInstance();
  QuestionMSG_SC_AckGetQuestionReward::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_question_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_question_2eproto {
  StaticDescriptorInitializer_question_2eproto() {
    protobuf_AddDesc_question_2eproto();
  }
} static_descriptor_initializer_question_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

QuestionMSG_CS_ReqGetQuestionList::QuestionMSG_CS_ReqGetQuestionList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestionMSG_CS_ReqGetQuestionList::InitAsDefaultInstance() {
}

QuestionMSG_CS_ReqGetQuestionList::QuestionMSG_CS_ReqGetQuestionList(const QuestionMSG_CS_ReqGetQuestionList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestionMSG_CS_ReqGetQuestionList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestionMSG_CS_ReqGetQuestionList::~QuestionMSG_CS_ReqGetQuestionList() {
  SharedDtor();
}

void QuestionMSG_CS_ReqGetQuestionList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestionMSG_CS_ReqGetQuestionList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestionMSG_CS_ReqGetQuestionList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestionMSG_CS_ReqGetQuestionList_descriptor_;
}

const QuestionMSG_CS_ReqGetQuestionList& QuestionMSG_CS_ReqGetQuestionList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_question_2eproto();
  return *default_instance_;
}

QuestionMSG_CS_ReqGetQuestionList* QuestionMSG_CS_ReqGetQuestionList::default_instance_ = NULL;

QuestionMSG_CS_ReqGetQuestionList* QuestionMSG_CS_ReqGetQuestionList::New() const {
  return new QuestionMSG_CS_ReqGetQuestionList;
}

void QuestionMSG_CS_ReqGetQuestionList::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestionMSG_CS_ReqGetQuestionList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void QuestionMSG_CS_ReqGetQuestionList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestionMSG_CS_ReqGetQuestionList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestionMSG_CS_ReqGetQuestionList::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestionMSG_CS_ReqGetQuestionList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestionMSG_CS_ReqGetQuestionList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestionMSG_CS_ReqGetQuestionList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestionMSG_CS_ReqGetQuestionList::MergeFrom(const QuestionMSG_CS_ReqGetQuestionList& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestionMSG_CS_ReqGetQuestionList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestionMSG_CS_ReqGetQuestionList::CopyFrom(const QuestionMSG_CS_ReqGetQuestionList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestionMSG_CS_ReqGetQuestionList::IsInitialized() const {

  return true;
}

void QuestionMSG_CS_ReqGetQuestionList::Swap(QuestionMSG_CS_ReqGetQuestionList* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestionMSG_CS_ReqGetQuestionList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestionMSG_CS_ReqGetQuestionList_descriptor_;
  metadata.reflection = QuestionMSG_CS_ReqGetQuestionList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestionMSG_SC_AckGetQuestionList::kQuestionidFieldNumber;
#endif  // !_MSC_VER

QuestionMSG_SC_AckGetQuestionList::QuestionMSG_SC_AckGetQuestionList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestionMSG_SC_AckGetQuestionList::InitAsDefaultInstance() {
}

QuestionMSG_SC_AckGetQuestionList::QuestionMSG_SC_AckGetQuestionList(const QuestionMSG_SC_AckGetQuestionList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestionMSG_SC_AckGetQuestionList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestionMSG_SC_AckGetQuestionList::~QuestionMSG_SC_AckGetQuestionList() {
  SharedDtor();
}

void QuestionMSG_SC_AckGetQuestionList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestionMSG_SC_AckGetQuestionList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestionMSG_SC_AckGetQuestionList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestionMSG_SC_AckGetQuestionList_descriptor_;
}

const QuestionMSG_SC_AckGetQuestionList& QuestionMSG_SC_AckGetQuestionList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_question_2eproto();
  return *default_instance_;
}

QuestionMSG_SC_AckGetQuestionList* QuestionMSG_SC_AckGetQuestionList::default_instance_ = NULL;

QuestionMSG_SC_AckGetQuestionList* QuestionMSG_SC_AckGetQuestionList::New() const {
  return new QuestionMSG_SC_AckGetQuestionList;
}

void QuestionMSG_SC_AckGetQuestionList::Clear() {
  questionid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestionMSG_SC_AckGetQuestionList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 questionid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_questionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_questionid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_questionid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_questionid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestionMSG_SC_AckGetQuestionList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 questionid = 1;
  for (int i = 0; i < this->questionid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->questionid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestionMSG_SC_AckGetQuestionList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 questionid = 1;
  for (int i = 0; i < this->questionid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->questionid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestionMSG_SC_AckGetQuestionList::ByteSize() const {
  int total_size = 0;

  // repeated uint32 questionid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->questionid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->questionid(i));
    }
    total_size += 1 * this->questionid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestionMSG_SC_AckGetQuestionList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestionMSG_SC_AckGetQuestionList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestionMSG_SC_AckGetQuestionList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestionMSG_SC_AckGetQuestionList::MergeFrom(const QuestionMSG_SC_AckGetQuestionList& from) {
  GOOGLE_CHECK_NE(&from, this);
  questionid_.MergeFrom(from.questionid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestionMSG_SC_AckGetQuestionList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestionMSG_SC_AckGetQuestionList::CopyFrom(const QuestionMSG_SC_AckGetQuestionList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestionMSG_SC_AckGetQuestionList::IsInitialized() const {

  return true;
}

void QuestionMSG_SC_AckGetQuestionList::Swap(QuestionMSG_SC_AckGetQuestionList* other) {
  if (other != this) {
    questionid_.Swap(&other->questionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestionMSG_SC_AckGetQuestionList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestionMSG_SC_AckGetQuestionList_descriptor_;
  metadata.reflection = QuestionMSG_SC_AckGetQuestionList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestionMSG_CS_ReqAnswerQuestion::kQuestionidFieldNumber;
const int QuestionMSG_CS_ReqAnswerQuestion::kAnsweridFieldNumber;
#endif  // !_MSC_VER

QuestionMSG_CS_ReqAnswerQuestion::QuestionMSG_CS_ReqAnswerQuestion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestionMSG_CS_ReqAnswerQuestion::InitAsDefaultInstance() {
}

QuestionMSG_CS_ReqAnswerQuestion::QuestionMSG_CS_ReqAnswerQuestion(const QuestionMSG_CS_ReqAnswerQuestion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestionMSG_CS_ReqAnswerQuestion::SharedCtor() {
  _cached_size_ = 0;
  questionid_ = 0u;
  answerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestionMSG_CS_ReqAnswerQuestion::~QuestionMSG_CS_ReqAnswerQuestion() {
  SharedDtor();
}

void QuestionMSG_CS_ReqAnswerQuestion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestionMSG_CS_ReqAnswerQuestion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestionMSG_CS_ReqAnswerQuestion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestionMSG_CS_ReqAnswerQuestion_descriptor_;
}

const QuestionMSG_CS_ReqAnswerQuestion& QuestionMSG_CS_ReqAnswerQuestion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_question_2eproto();
  return *default_instance_;
}

QuestionMSG_CS_ReqAnswerQuestion* QuestionMSG_CS_ReqAnswerQuestion::default_instance_ = NULL;

QuestionMSG_CS_ReqAnswerQuestion* QuestionMSG_CS_ReqAnswerQuestion::New() const {
  return new QuestionMSG_CS_ReqAnswerQuestion;
}

void QuestionMSG_CS_ReqAnswerQuestion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    questionid_ = 0u;
    answerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestionMSG_CS_ReqAnswerQuestion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 questionid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &questionid_)));
          set_has_questionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_answerid;
        break;
      }

      // required uint32 answerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_answerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &answerid_)));
          set_has_answerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestionMSG_CS_ReqAnswerQuestion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 questionid = 1;
  if (has_questionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->questionid(), output);
  }

  // required uint32 answerid = 2;
  if (has_answerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->answerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestionMSG_CS_ReqAnswerQuestion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 questionid = 1;
  if (has_questionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->questionid(), target);
  }

  // required uint32 answerid = 2;
  if (has_answerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->answerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestionMSG_CS_ReqAnswerQuestion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 questionid = 1;
    if (has_questionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->questionid());
    }

    // required uint32 answerid = 2;
    if (has_answerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->answerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestionMSG_CS_ReqAnswerQuestion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestionMSG_CS_ReqAnswerQuestion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestionMSG_CS_ReqAnswerQuestion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestionMSG_CS_ReqAnswerQuestion::MergeFrom(const QuestionMSG_CS_ReqAnswerQuestion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questionid()) {
      set_questionid(from.questionid());
    }
    if (from.has_answerid()) {
      set_answerid(from.answerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestionMSG_CS_ReqAnswerQuestion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestionMSG_CS_ReqAnswerQuestion::CopyFrom(const QuestionMSG_CS_ReqAnswerQuestion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestionMSG_CS_ReqAnswerQuestion::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void QuestionMSG_CS_ReqAnswerQuestion::Swap(QuestionMSG_CS_ReqAnswerQuestion* other) {
  if (other != this) {
    std::swap(questionid_, other->questionid_);
    std::swap(answerid_, other->answerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestionMSG_CS_ReqAnswerQuestion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestionMSG_CS_ReqAnswerQuestion_descriptor_;
  metadata.reflection = QuestionMSG_CS_ReqAnswerQuestion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestionMSG_SC_AckAnswerQuestion::kResultFieldNumber;
#endif  // !_MSC_VER

QuestionMSG_SC_AckAnswerQuestion::QuestionMSG_SC_AckAnswerQuestion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestionMSG_SC_AckAnswerQuestion::InitAsDefaultInstance() {
}

QuestionMSG_SC_AckAnswerQuestion::QuestionMSG_SC_AckAnswerQuestion(const QuestionMSG_SC_AckAnswerQuestion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestionMSG_SC_AckAnswerQuestion::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestionMSG_SC_AckAnswerQuestion::~QuestionMSG_SC_AckAnswerQuestion() {
  SharedDtor();
}

void QuestionMSG_SC_AckAnswerQuestion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestionMSG_SC_AckAnswerQuestion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestionMSG_SC_AckAnswerQuestion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestionMSG_SC_AckAnswerQuestion_descriptor_;
}

const QuestionMSG_SC_AckAnswerQuestion& QuestionMSG_SC_AckAnswerQuestion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_question_2eproto();
  return *default_instance_;
}

QuestionMSG_SC_AckAnswerQuestion* QuestionMSG_SC_AckAnswerQuestion::default_instance_ = NULL;

QuestionMSG_SC_AckAnswerQuestion* QuestionMSG_SC_AckAnswerQuestion::New() const {
  return new QuestionMSG_SC_AckAnswerQuestion;
}

void QuestionMSG_SC_AckAnswerQuestion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestionMSG_SC_AckAnswerQuestion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestionMSG_SC_AckAnswerQuestion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestionMSG_SC_AckAnswerQuestion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestionMSG_SC_AckAnswerQuestion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestionMSG_SC_AckAnswerQuestion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestionMSG_SC_AckAnswerQuestion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestionMSG_SC_AckAnswerQuestion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestionMSG_SC_AckAnswerQuestion::MergeFrom(const QuestionMSG_SC_AckAnswerQuestion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestionMSG_SC_AckAnswerQuestion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestionMSG_SC_AckAnswerQuestion::CopyFrom(const QuestionMSG_SC_AckAnswerQuestion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestionMSG_SC_AckAnswerQuestion::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void QuestionMSG_SC_AckAnswerQuestion::Swap(QuestionMSG_SC_AckAnswerQuestion* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestionMSG_SC_AckAnswerQuestion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestionMSG_SC_AckAnswerQuestion_descriptor_;
  metadata.reflection = QuestionMSG_SC_AckAnswerQuestion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestionMSG_CS_ReqGetQuestionReward::kRewardtypeFieldNumber;
#endif  // !_MSC_VER

QuestionMSG_CS_ReqGetQuestionReward::QuestionMSG_CS_ReqGetQuestionReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestionMSG_CS_ReqGetQuestionReward::InitAsDefaultInstance() {
}

QuestionMSG_CS_ReqGetQuestionReward::QuestionMSG_CS_ReqGetQuestionReward(const QuestionMSG_CS_ReqGetQuestionReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestionMSG_CS_ReqGetQuestionReward::SharedCtor() {
  _cached_size_ = 0;
  rewardtype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestionMSG_CS_ReqGetQuestionReward::~QuestionMSG_CS_ReqGetQuestionReward() {
  SharedDtor();
}

void QuestionMSG_CS_ReqGetQuestionReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestionMSG_CS_ReqGetQuestionReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestionMSG_CS_ReqGetQuestionReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestionMSG_CS_ReqGetQuestionReward_descriptor_;
}

const QuestionMSG_CS_ReqGetQuestionReward& QuestionMSG_CS_ReqGetQuestionReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_question_2eproto();
  return *default_instance_;
}

QuestionMSG_CS_ReqGetQuestionReward* QuestionMSG_CS_ReqGetQuestionReward::default_instance_ = NULL;

QuestionMSG_CS_ReqGetQuestionReward* QuestionMSG_CS_ReqGetQuestionReward::New() const {
  return new QuestionMSG_CS_ReqGetQuestionReward;
}

void QuestionMSG_CS_ReqGetQuestionReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rewardtype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestionMSG_CS_ReqGetQuestionReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rewardtype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardtype_)));
          set_has_rewardtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestionMSG_CS_ReqGetQuestionReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 rewardtype = 1;
  if (has_rewardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rewardtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestionMSG_CS_ReqGetQuestionReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 rewardtype = 1;
  if (has_rewardtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rewardtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestionMSG_CS_ReqGetQuestionReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rewardtype = 1;
    if (has_rewardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestionMSG_CS_ReqGetQuestionReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestionMSG_CS_ReqGetQuestionReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestionMSG_CS_ReqGetQuestionReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestionMSG_CS_ReqGetQuestionReward::MergeFrom(const QuestionMSG_CS_ReqGetQuestionReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rewardtype()) {
      set_rewardtype(from.rewardtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestionMSG_CS_ReqGetQuestionReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestionMSG_CS_ReqGetQuestionReward::CopyFrom(const QuestionMSG_CS_ReqGetQuestionReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestionMSG_CS_ReqGetQuestionReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void QuestionMSG_CS_ReqGetQuestionReward::Swap(QuestionMSG_CS_ReqGetQuestionReward* other) {
  if (other != this) {
    std::swap(rewardtype_, other->rewardtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestionMSG_CS_ReqGetQuestionReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestionMSG_CS_ReqGetQuestionReward_descriptor_;
  metadata.reflection = QuestionMSG_CS_ReqGetQuestionReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestionMSG_SC_AckGetQuestionReward::kResultFieldNumber;
const int QuestionMSG_SC_AckGetQuestionReward::kItemlistFieldNumber;
#endif  // !_MSC_VER

QuestionMSG_SC_AckGetQuestionReward::QuestionMSG_SC_AckGetQuestionReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestionMSG_SC_AckGetQuestionReward::InitAsDefaultInstance() {
}

QuestionMSG_SC_AckGetQuestionReward::QuestionMSG_SC_AckGetQuestionReward(const QuestionMSG_SC_AckGetQuestionReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestionMSG_SC_AckGetQuestionReward::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestionMSG_SC_AckGetQuestionReward::~QuestionMSG_SC_AckGetQuestionReward() {
  SharedDtor();
}

void QuestionMSG_SC_AckGetQuestionReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestionMSG_SC_AckGetQuestionReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestionMSG_SC_AckGetQuestionReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestionMSG_SC_AckGetQuestionReward_descriptor_;
}

const QuestionMSG_SC_AckGetQuestionReward& QuestionMSG_SC_AckGetQuestionReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_question_2eproto();
  return *default_instance_;
}

QuestionMSG_SC_AckGetQuestionReward* QuestionMSG_SC_AckGetQuestionReward::default_instance_ = NULL;

QuestionMSG_SC_AckGetQuestionReward* QuestionMSG_SC_AckGetQuestionReward::New() const {
  return new QuestionMSG_SC_AckGetQuestionReward;
}

void QuestionMSG_SC_AckGetQuestionReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  itemlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestionMSG_SC_AckGetQuestionReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_itemlist;
        break;
      }

      // repeated .proto.message.DropItemNum itemlist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_itemlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestionMSG_SC_AckGetQuestionReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // repeated .proto.message.DropItemNum itemlist = 2;
  for (int i = 0; i < this->itemlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->itemlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestionMSG_SC_AckGetQuestionReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // repeated .proto.message.DropItemNum itemlist = 2;
  for (int i = 0; i < this->itemlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->itemlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestionMSG_SC_AckGetQuestionReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  // repeated .proto.message.DropItemNum itemlist = 2;
  total_size += 1 * this->itemlist_size();
  for (int i = 0; i < this->itemlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestionMSG_SC_AckGetQuestionReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestionMSG_SC_AckGetQuestionReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestionMSG_SC_AckGetQuestionReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestionMSG_SC_AckGetQuestionReward::MergeFrom(const QuestionMSG_SC_AckGetQuestionReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemlist_.MergeFrom(from.itemlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestionMSG_SC_AckGetQuestionReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestionMSG_SC_AckGetQuestionReward::CopyFrom(const QuestionMSG_SC_AckGetQuestionReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestionMSG_SC_AckGetQuestionReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void QuestionMSG_SC_AckGetQuestionReward::Swap(QuestionMSG_SC_AckGetQuestionReward* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    itemlist_.Swap(&other->itemlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestionMSG_SC_AckGetQuestionReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestionMSG_SC_AckGetQuestionReward_descriptor_;
  metadata.reflection = QuestionMSG_SC_AckGetQuestionReward_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

// @@protoc_insertion_point(global_scope)
