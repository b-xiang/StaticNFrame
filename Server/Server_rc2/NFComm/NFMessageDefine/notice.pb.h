// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: notice.proto

#ifndef PROTOBUF_notice_2eproto__INCLUDED
#define PROTOBUF_notice_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_notice_2eproto();
void protobuf_AssignDesc_notice_2eproto();
void protobuf_ShutdownFile_notice_2eproto();

class NoticeRankItem;
class Notice_SC_Message;

// ===================================================================

class NoticeRankItem : public ::google::protobuf::Message {
 public:
  NoticeRankItem();
  virtual ~NoticeRankItem();

  NoticeRankItem(const NoticeRankItem& from);

  inline NoticeRankItem& operator=(const NoticeRankItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NoticeRankItem& default_instance();

  void Swap(NoticeRankItem* other);

  // implements Message ----------------------------------------------

  NoticeRankItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NoticeRankItem& from);
  void MergeFrom(const NoticeRankItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:proto.message.NoticeRankItem)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_notice_2eproto();
  friend void protobuf_AssignDesc_notice_2eproto();
  friend void protobuf_ShutdownFile_notice_2eproto();

  void InitAsDefaultInstance();
  static NoticeRankItem* default_instance_;
};
// -------------------------------------------------------------------

class Notice_SC_Message : public ::google::protobuf::Message {
 public:
  Notice_SC_Message();
  virtual ~Notice_SC_Message();

  Notice_SC_Message(const Notice_SC_Message& from);

  inline Notice_SC_Message& operator=(const Notice_SC_Message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Notice_SC_Message& default_instance();

  void Swap(Notice_SC_Message* other);

  // implements Message ----------------------------------------------

  Notice_SC_Message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Notice_SC_Message& from);
  void MergeFrom(const Notice_SC_Message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 nid = 1;
  inline bool has_nid() const;
  inline void clear_nid();
  static const int kNidFieldNumber = 1;
  inline ::google::protobuf::int32 nid() const;
  inline void set_nid(::google::protobuf::int32 value);

  // repeated int32 itemid = 2;
  inline int itemid_size() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 2;
  inline ::google::protobuf::int32 itemid(int index) const;
  inline void set_itemid(int index, ::google::protobuf::int32 value);
  inline void add_itemid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      itemid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_itemid();

  // repeated int32 num = 3;
  inline int num_size() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::int32 num(int index) const;
  inline void set_num(int index, ::google::protobuf::int32 value);
  inline void add_num(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      num() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_num();

  // repeated .proto.message.NoticeRankItem rankitem = 4;
  inline int rankitem_size() const;
  inline void clear_rankitem();
  static const int kRankitemFieldNumber = 4;
  inline const ::proto::message::NoticeRankItem& rankitem(int index) const;
  inline ::proto::message::NoticeRankItem* mutable_rankitem(int index);
  inline ::proto::message::NoticeRankItem* add_rankitem();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::NoticeRankItem >&
      rankitem() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::NoticeRankItem >*
      mutable_rankitem();

  // optional string sendname = 5;
  inline bool has_sendname() const;
  inline void clear_sendname();
  static const int kSendnameFieldNumber = 5;
  inline const ::std::string& sendname() const;
  inline void set_sendname(const ::std::string& value);
  inline void set_sendname(const char* value);
  inline void set_sendname(const char* value, size_t size);
  inline ::std::string* mutable_sendname();
  inline ::std::string* release_sendname();
  inline void set_allocated_sendname(::std::string* sendname);

  // optional string recvname = 6;
  inline bool has_recvname() const;
  inline void clear_recvname();
  static const int kRecvnameFieldNumber = 6;
  inline const ::std::string& recvname() const;
  inline void set_recvname(const ::std::string& value);
  inline void set_recvname(const char* value);
  inline void set_recvname(const char* value, size_t size);
  inline ::std::string* mutable_recvname();
  inline ::std::string* release_recvname();
  inline void set_allocated_recvname(::std::string* recvname);

  // optional int32 sceneid = 7;
  inline bool has_sceneid() const;
  inline void clear_sceneid();
  static const int kSceneidFieldNumber = 7;
  inline ::google::protobuf::int32 sceneid() const;
  inline void set_sceneid(::google::protobuf::int32 value);

  // repeated int32 allscene = 8;
  inline int allscene_size() const;
  inline void clear_allscene();
  static const int kAllsceneFieldNumber = 8;
  inline ::google::protobuf::int32 allscene(int index) const;
  inline void set_allscene(int index, ::google::protobuf::int32 value);
  inline void add_allscene(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      allscene() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_allscene();

  // optional int32 monsterid = 9;
  inline bool has_monsterid() const;
  inline void clear_monsterid();
  static const int kMonsteridFieldNumber = 9;
  inline ::google::protobuf::int32 monsterid() const;
  inline void set_monsterid(::google::protobuf::int32 value);

  // optional string content = 10;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 10;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional int32 getway = 11;
  inline bool has_getway() const;
  inline void clear_getway();
  static const int kGetwayFieldNumber = 11;
  inline ::google::protobuf::int32 getway() const;
  inline void set_getway(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Notice_SC_Message)
 private:
  inline void set_has_nid();
  inline void clear_has_nid();
  inline void set_has_sendname();
  inline void clear_has_sendname();
  inline void set_has_recvname();
  inline void clear_has_recvname();
  inline void set_has_sceneid();
  inline void clear_has_sceneid();
  inline void set_has_monsterid();
  inline void clear_has_monsterid();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_getway();
  inline void clear_has_getway();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > itemid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > num_;
  ::google::protobuf::RepeatedPtrField< ::proto::message::NoticeRankItem > rankitem_;
  ::google::protobuf::int32 nid_;
  ::google::protobuf::int32 sceneid_;
  ::std::string* sendname_;
  ::std::string* recvname_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > allscene_;
  ::std::string* content_;
  ::google::protobuf::int32 monsterid_;
  ::google::protobuf::int32 getway_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_notice_2eproto();
  friend void protobuf_AssignDesc_notice_2eproto();
  friend void protobuf_ShutdownFile_notice_2eproto();

  void InitAsDefaultInstance();
  static Notice_SC_Message* default_instance_;
};
// ===================================================================


// ===================================================================

// NoticeRankItem

// required int32 index = 1;
inline bool NoticeRankItem::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NoticeRankItem::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NoticeRankItem::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NoticeRankItem::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 NoticeRankItem::index() const {
  return index_;
}
inline void NoticeRankItem::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// required string name = 2;
inline bool NoticeRankItem::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NoticeRankItem::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NoticeRankItem::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NoticeRankItem::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& NoticeRankItem::name() const {
  return *name_;
}
inline void NoticeRankItem::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void NoticeRankItem::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void NoticeRankItem::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NoticeRankItem::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* NoticeRankItem::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NoticeRankItem::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Notice_SC_Message

// required int32 nid = 1;
inline bool Notice_SC_Message::has_nid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Notice_SC_Message::set_has_nid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Notice_SC_Message::clear_has_nid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Notice_SC_Message::clear_nid() {
  nid_ = 0;
  clear_has_nid();
}
inline ::google::protobuf::int32 Notice_SC_Message::nid() const {
  return nid_;
}
inline void Notice_SC_Message::set_nid(::google::protobuf::int32 value) {
  set_has_nid();
  nid_ = value;
}

// repeated int32 itemid = 2;
inline int Notice_SC_Message::itemid_size() const {
  return itemid_.size();
}
inline void Notice_SC_Message::clear_itemid() {
  itemid_.Clear();
}
inline ::google::protobuf::int32 Notice_SC_Message::itemid(int index) const {
  return itemid_.Get(index);
}
inline void Notice_SC_Message::set_itemid(int index, ::google::protobuf::int32 value) {
  itemid_.Set(index, value);
}
inline void Notice_SC_Message::add_itemid(::google::protobuf::int32 value) {
  itemid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Notice_SC_Message::itemid() const {
  return itemid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Notice_SC_Message::mutable_itemid() {
  return &itemid_;
}

// repeated int32 num = 3;
inline int Notice_SC_Message::num_size() const {
  return num_.size();
}
inline void Notice_SC_Message::clear_num() {
  num_.Clear();
}
inline ::google::protobuf::int32 Notice_SC_Message::num(int index) const {
  return num_.Get(index);
}
inline void Notice_SC_Message::set_num(int index, ::google::protobuf::int32 value) {
  num_.Set(index, value);
}
inline void Notice_SC_Message::add_num(::google::protobuf::int32 value) {
  num_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Notice_SC_Message::num() const {
  return num_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Notice_SC_Message::mutable_num() {
  return &num_;
}

// repeated .proto.message.NoticeRankItem rankitem = 4;
inline int Notice_SC_Message::rankitem_size() const {
  return rankitem_.size();
}
inline void Notice_SC_Message::clear_rankitem() {
  rankitem_.Clear();
}
inline const ::proto::message::NoticeRankItem& Notice_SC_Message::rankitem(int index) const {
  return rankitem_.Get(index);
}
inline ::proto::message::NoticeRankItem* Notice_SC_Message::mutable_rankitem(int index) {
  return rankitem_.Mutable(index);
}
inline ::proto::message::NoticeRankItem* Notice_SC_Message::add_rankitem() {
  return rankitem_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::NoticeRankItem >&
Notice_SC_Message::rankitem() const {
  return rankitem_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::NoticeRankItem >*
Notice_SC_Message::mutable_rankitem() {
  return &rankitem_;
}

// optional string sendname = 5;
inline bool Notice_SC_Message::has_sendname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Notice_SC_Message::set_has_sendname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Notice_SC_Message::clear_has_sendname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Notice_SC_Message::clear_sendname() {
  if (sendname_ != &::google::protobuf::internal::kEmptyString) {
    sendname_->clear();
  }
  clear_has_sendname();
}
inline const ::std::string& Notice_SC_Message::sendname() const {
  return *sendname_;
}
inline void Notice_SC_Message::set_sendname(const ::std::string& value) {
  set_has_sendname();
  if (sendname_ == &::google::protobuf::internal::kEmptyString) {
    sendname_ = new ::std::string;
  }
  sendname_->assign(value);
}
inline void Notice_SC_Message::set_sendname(const char* value) {
  set_has_sendname();
  if (sendname_ == &::google::protobuf::internal::kEmptyString) {
    sendname_ = new ::std::string;
  }
  sendname_->assign(value);
}
inline void Notice_SC_Message::set_sendname(const char* value, size_t size) {
  set_has_sendname();
  if (sendname_ == &::google::protobuf::internal::kEmptyString) {
    sendname_ = new ::std::string;
  }
  sendname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Notice_SC_Message::mutable_sendname() {
  set_has_sendname();
  if (sendname_ == &::google::protobuf::internal::kEmptyString) {
    sendname_ = new ::std::string;
  }
  return sendname_;
}
inline ::std::string* Notice_SC_Message::release_sendname() {
  clear_has_sendname();
  if (sendname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sendname_;
    sendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Notice_SC_Message::set_allocated_sendname(::std::string* sendname) {
  if (sendname_ != &::google::protobuf::internal::kEmptyString) {
    delete sendname_;
  }
  if (sendname) {
    set_has_sendname();
    sendname_ = sendname;
  } else {
    clear_has_sendname();
    sendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string recvname = 6;
inline bool Notice_SC_Message::has_recvname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Notice_SC_Message::set_has_recvname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Notice_SC_Message::clear_has_recvname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Notice_SC_Message::clear_recvname() {
  if (recvname_ != &::google::protobuf::internal::kEmptyString) {
    recvname_->clear();
  }
  clear_has_recvname();
}
inline const ::std::string& Notice_SC_Message::recvname() const {
  return *recvname_;
}
inline void Notice_SC_Message::set_recvname(const ::std::string& value) {
  set_has_recvname();
  if (recvname_ == &::google::protobuf::internal::kEmptyString) {
    recvname_ = new ::std::string;
  }
  recvname_->assign(value);
}
inline void Notice_SC_Message::set_recvname(const char* value) {
  set_has_recvname();
  if (recvname_ == &::google::protobuf::internal::kEmptyString) {
    recvname_ = new ::std::string;
  }
  recvname_->assign(value);
}
inline void Notice_SC_Message::set_recvname(const char* value, size_t size) {
  set_has_recvname();
  if (recvname_ == &::google::protobuf::internal::kEmptyString) {
    recvname_ = new ::std::string;
  }
  recvname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Notice_SC_Message::mutable_recvname() {
  set_has_recvname();
  if (recvname_ == &::google::protobuf::internal::kEmptyString) {
    recvname_ = new ::std::string;
  }
  return recvname_;
}
inline ::std::string* Notice_SC_Message::release_recvname() {
  clear_has_recvname();
  if (recvname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = recvname_;
    recvname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Notice_SC_Message::set_allocated_recvname(::std::string* recvname) {
  if (recvname_ != &::google::protobuf::internal::kEmptyString) {
    delete recvname_;
  }
  if (recvname) {
    set_has_recvname();
    recvname_ = recvname;
  } else {
    clear_has_recvname();
    recvname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 sceneid = 7;
inline bool Notice_SC_Message::has_sceneid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Notice_SC_Message::set_has_sceneid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Notice_SC_Message::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Notice_SC_Message::clear_sceneid() {
  sceneid_ = 0;
  clear_has_sceneid();
}
inline ::google::protobuf::int32 Notice_SC_Message::sceneid() const {
  return sceneid_;
}
inline void Notice_SC_Message::set_sceneid(::google::protobuf::int32 value) {
  set_has_sceneid();
  sceneid_ = value;
}

// repeated int32 allscene = 8;
inline int Notice_SC_Message::allscene_size() const {
  return allscene_.size();
}
inline void Notice_SC_Message::clear_allscene() {
  allscene_.Clear();
}
inline ::google::protobuf::int32 Notice_SC_Message::allscene(int index) const {
  return allscene_.Get(index);
}
inline void Notice_SC_Message::set_allscene(int index, ::google::protobuf::int32 value) {
  allscene_.Set(index, value);
}
inline void Notice_SC_Message::add_allscene(::google::protobuf::int32 value) {
  allscene_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Notice_SC_Message::allscene() const {
  return allscene_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Notice_SC_Message::mutable_allscene() {
  return &allscene_;
}

// optional int32 monsterid = 9;
inline bool Notice_SC_Message::has_monsterid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Notice_SC_Message::set_has_monsterid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Notice_SC_Message::clear_has_monsterid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Notice_SC_Message::clear_monsterid() {
  monsterid_ = 0;
  clear_has_monsterid();
}
inline ::google::protobuf::int32 Notice_SC_Message::monsterid() const {
  return monsterid_;
}
inline void Notice_SC_Message::set_monsterid(::google::protobuf::int32 value) {
  set_has_monsterid();
  monsterid_ = value;
}

// optional string content = 10;
inline bool Notice_SC_Message::has_content() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Notice_SC_Message::set_has_content() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Notice_SC_Message::clear_has_content() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Notice_SC_Message::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& Notice_SC_Message::content() const {
  return *content_;
}
inline void Notice_SC_Message::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void Notice_SC_Message::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void Notice_SC_Message::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Notice_SC_Message::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* Notice_SC_Message::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Notice_SC_Message::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 getway = 11;
inline bool Notice_SC_Message::has_getway() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Notice_SC_Message::set_has_getway() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Notice_SC_Message::clear_has_getway() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Notice_SC_Message::clear_getway() {
  getway_ = 0;
  clear_has_getway();
}
inline ::google::protobuf::int32 Notice_SC_Message::getway() const {
  return getway_;
}
inline void Notice_SC_Message::set_getway(::google::protobuf::int32 value) {
  set_has_getway();
  getway_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_notice_2eproto__INCLUDED
