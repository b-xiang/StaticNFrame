// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: friend.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "friend.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

namespace {

const ::google::protobuf::Descriptor* ProtoPlyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoPlyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoFriendChatMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoFriendChatMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* Friend_CS_GetFriendInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Friend_CS_GetFriendInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Friend_SC_GetFriendInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Friend_SC_GetFriendInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Friend_CS_AddFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Friend_CS_AddFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* Friend_SC_AddFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Friend_SC_AddFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* Friend_CS_DelFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Friend_CS_DelFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* Friend_SC_DelFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Friend_SC_DelFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* Friend_CS_AddToBlack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Friend_CS_AddToBlack_reflection_ = NULL;
const ::google::protobuf::Descriptor* Friend_SC_AddToBlack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Friend_SC_AddToBlack_reflection_ = NULL;
const ::google::protobuf::Descriptor* Friend_CS_DelBlack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Friend_CS_DelBlack_reflection_ = NULL;
const ::google::protobuf::Descriptor* Friend_SC_DelBlack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Friend_SC_DelBlack_reflection_ = NULL;
const ::google::protobuf::Descriptor* Friend_CS_FriendChat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Friend_CS_FriendChat_reflection_ = NULL;
const ::google::protobuf::Descriptor* Friend_SC_FriendChat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Friend_SC_FriendChat_reflection_ = NULL;
const ::google::protobuf::Descriptor* Friend_CS_FriendPresent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Friend_CS_FriendPresent_reflection_ = NULL;
const ::google::protobuf::Descriptor* Friend_SC_FriendPresent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Friend_SC_FriendPresent_reflection_ = NULL;
const ::google::protobuf::Descriptor* Friend_CS_QueryFriendInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Friend_CS_QueryFriendInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Friend_SC_QueryFriendInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Friend_SC_QueryFriendInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Friend_CS_SearchFriendInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Friend_CS_SearchFriendInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Friend_SC_SearchFriendInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Friend_SC_SearchFriendInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Friend_SC_UpdateBeAddFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Friend_SC_UpdateBeAddFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* Friend_SC_UpdateFriendMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Friend_SC_UpdateFriendMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* Friend_SC_UpdateFriendInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Friend_SC_UpdateFriendInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Friend_SC_NotifyFriendGift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Friend_SC_NotifyFriendGift_reflection_ = NULL;
const ::google::protobuf::Descriptor* Friend_CS_RecommentFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Friend_CS_RecommentFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* Friend_SC_RecommentFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Friend_SC_RecommentFriend_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_friend_2eproto() {
  protobuf_AddDesc_friend_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "friend.proto");
  GOOGLE_CHECK(file != NULL);
  ProtoPlyInfo_descriptor_ = file->message_type(0);
  static const int ProtoPlyInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPlyInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPlyInfo, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPlyInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPlyInfo, weapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPlyInfo, online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPlyInfo, friendship_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPlyInfo, dhlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPlyInfo, combat_),
  };
  ProtoPlyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoPlyInfo_descriptor_,
      ProtoPlyInfo::default_instance_,
      ProtoPlyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPlyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPlyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoPlyInfo));
  ProtoFriendChatMsg_descriptor_ = file->message_type(1);
  static const int ProtoFriendChatMsg_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFriendChatMsg, fromplyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFriendChatMsg, toplyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFriendChatMsg, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFriendChatMsg, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFriendChatMsg, fromplyinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFriendChatMsg, leavemsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFriendChatMsg, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFriendChatMsg, contenttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFriendChatMsg, voicetime_),
  };
  ProtoFriendChatMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoFriendChatMsg_descriptor_,
      ProtoFriendChatMsg::default_instance_,
      ProtoFriendChatMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFriendChatMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFriendChatMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoFriendChatMsg));
  Friend_CS_GetFriendInfo_descriptor_ = file->message_type(2);
  static const int Friend_CS_GetFriendInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_CS_GetFriendInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_CS_GetFriendInfo, isinteam_),
  };
  Friend_CS_GetFriendInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Friend_CS_GetFriendInfo_descriptor_,
      Friend_CS_GetFriendInfo::default_instance_,
      Friend_CS_GetFriendInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_CS_GetFriendInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_CS_GetFriendInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Friend_CS_GetFriendInfo));
  Friend_SC_GetFriendInfo_descriptor_ = file->message_type(3);
  static const int Friend_SC_GetFriendInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_SC_GetFriendInfo, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_SC_GetFriendInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_SC_GetFriendInfo, plylist_),
  };
  Friend_SC_GetFriendInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Friend_SC_GetFriendInfo_descriptor_,
      Friend_SC_GetFriendInfo::default_instance_,
      Friend_SC_GetFriendInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_SC_GetFriendInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_SC_GetFriendInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Friend_SC_GetFriendInfo));
  Friend_CS_AddFriend_descriptor_ = file->message_type(4);
  static const int Friend_CS_AddFriend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_CS_AddFriend, charid_),
  };
  Friend_CS_AddFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Friend_CS_AddFriend_descriptor_,
      Friend_CS_AddFriend::default_instance_,
      Friend_CS_AddFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_CS_AddFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_CS_AddFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Friend_CS_AddFriend));
  Friend_SC_AddFriend_descriptor_ = file->message_type(5);
  static const int Friend_SC_AddFriend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_SC_AddFriend, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_SC_AddFriend, plyinfo_),
  };
  Friend_SC_AddFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Friend_SC_AddFriend_descriptor_,
      Friend_SC_AddFriend::default_instance_,
      Friend_SC_AddFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_SC_AddFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_SC_AddFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Friend_SC_AddFriend));
  Friend_CS_DelFriend_descriptor_ = file->message_type(6);
  static const int Friend_CS_DelFriend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_CS_DelFriend, charid_),
  };
  Friend_CS_DelFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Friend_CS_DelFriend_descriptor_,
      Friend_CS_DelFriend::default_instance_,
      Friend_CS_DelFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_CS_DelFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_CS_DelFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Friend_CS_DelFriend));
  Friend_SC_DelFriend_descriptor_ = file->message_type(7);
  static const int Friend_SC_DelFriend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_SC_DelFriend, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_SC_DelFriend, charid_),
  };
  Friend_SC_DelFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Friend_SC_DelFriend_descriptor_,
      Friend_SC_DelFriend::default_instance_,
      Friend_SC_DelFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_SC_DelFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_SC_DelFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Friend_SC_DelFriend));
  Friend_CS_AddToBlack_descriptor_ = file->message_type(8);
  static const int Friend_CS_AddToBlack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_CS_AddToBlack, charid_),
  };
  Friend_CS_AddToBlack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Friend_CS_AddToBlack_descriptor_,
      Friend_CS_AddToBlack::default_instance_,
      Friend_CS_AddToBlack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_CS_AddToBlack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_CS_AddToBlack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Friend_CS_AddToBlack));
  Friend_SC_AddToBlack_descriptor_ = file->message_type(9);
  static const int Friend_SC_AddToBlack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_SC_AddToBlack, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_SC_AddToBlack, plyinfo_),
  };
  Friend_SC_AddToBlack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Friend_SC_AddToBlack_descriptor_,
      Friend_SC_AddToBlack::default_instance_,
      Friend_SC_AddToBlack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_SC_AddToBlack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_SC_AddToBlack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Friend_SC_AddToBlack));
  Friend_CS_DelBlack_descriptor_ = file->message_type(10);
  static const int Friend_CS_DelBlack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_CS_DelBlack, charid_),
  };
  Friend_CS_DelBlack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Friend_CS_DelBlack_descriptor_,
      Friend_CS_DelBlack::default_instance_,
      Friend_CS_DelBlack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_CS_DelBlack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_CS_DelBlack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Friend_CS_DelBlack));
  Friend_SC_DelBlack_descriptor_ = file->message_type(11);
  static const int Friend_SC_DelBlack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_SC_DelBlack, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_SC_DelBlack, charid_),
  };
  Friend_SC_DelBlack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Friend_SC_DelBlack_descriptor_,
      Friend_SC_DelBlack::default_instance_,
      Friend_SC_DelBlack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_SC_DelBlack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_SC_DelBlack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Friend_SC_DelBlack));
  Friend_CS_FriendChat_descriptor_ = file->message_type(12);
  static const int Friend_CS_FriendChat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_CS_FriendChat, chatmsg_),
  };
  Friend_CS_FriendChat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Friend_CS_FriendChat_descriptor_,
      Friend_CS_FriendChat::default_instance_,
      Friend_CS_FriendChat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_CS_FriendChat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_CS_FriendChat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Friend_CS_FriendChat));
  Friend_SC_FriendChat_descriptor_ = file->message_type(13);
  static const int Friend_SC_FriendChat_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_SC_FriendChat, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_SC_FriendChat, msgid_),
  };
  Friend_SC_FriendChat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Friend_SC_FriendChat_descriptor_,
      Friend_SC_FriendChat::default_instance_,
      Friend_SC_FriendChat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_SC_FriendChat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_SC_FriendChat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Friend_SC_FriendChat));
  Friend_CS_FriendPresent_descriptor_ = file->message_type(14);
  static const int Friend_CS_FriendPresent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_CS_FriendPresent, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_CS_FriendPresent, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_CS_FriendPresent, charid_),
  };
  Friend_CS_FriendPresent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Friend_CS_FriendPresent_descriptor_,
      Friend_CS_FriendPresent::default_instance_,
      Friend_CS_FriendPresent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_CS_FriendPresent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_CS_FriendPresent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Friend_CS_FriendPresent));
  Friend_SC_FriendPresent_descriptor_ = file->message_type(15);
  static const int Friend_SC_FriendPresent_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_SC_FriendPresent, result_),
  };
  Friend_SC_FriendPresent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Friend_SC_FriendPresent_descriptor_,
      Friend_SC_FriendPresent::default_instance_,
      Friend_SC_FriendPresent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_SC_FriendPresent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_SC_FriendPresent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Friend_SC_FriendPresent));
  Friend_CS_QueryFriendInfo_descriptor_ = file->message_type(16);
  static const int Friend_CS_QueryFriendInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_CS_QueryFriendInfo, charid_),
  };
  Friend_CS_QueryFriendInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Friend_CS_QueryFriendInfo_descriptor_,
      Friend_CS_QueryFriendInfo::default_instance_,
      Friend_CS_QueryFriendInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_CS_QueryFriendInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_CS_QueryFriendInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Friend_CS_QueryFriendInfo));
  Friend_SC_QueryFriendInfo_descriptor_ = file->message_type(17);
  static const int Friend_SC_QueryFriendInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_SC_QueryFriendInfo, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_SC_QueryFriendInfo, plyinfo_),
  };
  Friend_SC_QueryFriendInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Friend_SC_QueryFriendInfo_descriptor_,
      Friend_SC_QueryFriendInfo::default_instance_,
      Friend_SC_QueryFriendInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_SC_QueryFriendInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_SC_QueryFriendInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Friend_SC_QueryFriendInfo));
  Friend_CS_SearchFriendInfo_descriptor_ = file->message_type(18);
  static const int Friend_CS_SearchFriendInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_CS_SearchFriendInfo, key_),
  };
  Friend_CS_SearchFriendInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Friend_CS_SearchFriendInfo_descriptor_,
      Friend_CS_SearchFriendInfo::default_instance_,
      Friend_CS_SearchFriendInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_CS_SearchFriendInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_CS_SearchFriendInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Friend_CS_SearchFriendInfo));
  Friend_SC_SearchFriendInfo_descriptor_ = file->message_type(19);
  static const int Friend_SC_SearchFriendInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_SC_SearchFriendInfo, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_SC_SearchFriendInfo, plyinfo_),
  };
  Friend_SC_SearchFriendInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Friend_SC_SearchFriendInfo_descriptor_,
      Friend_SC_SearchFriendInfo::default_instance_,
      Friend_SC_SearchFriendInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_SC_SearchFriendInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_SC_SearchFriendInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Friend_SC_SearchFriendInfo));
  Friend_SC_UpdateBeAddFriend_descriptor_ = file->message_type(20);
  static const int Friend_SC_UpdateBeAddFriend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_SC_UpdateBeAddFriend, plyinfo_),
  };
  Friend_SC_UpdateBeAddFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Friend_SC_UpdateBeAddFriend_descriptor_,
      Friend_SC_UpdateBeAddFriend::default_instance_,
      Friend_SC_UpdateBeAddFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_SC_UpdateBeAddFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_SC_UpdateBeAddFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Friend_SC_UpdateBeAddFriend));
  Friend_SC_UpdateFriendMsg_descriptor_ = file->message_type(21);
  static const int Friend_SC_UpdateFriendMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_SC_UpdateFriendMsg, msg_),
  };
  Friend_SC_UpdateFriendMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Friend_SC_UpdateFriendMsg_descriptor_,
      Friend_SC_UpdateFriendMsg::default_instance_,
      Friend_SC_UpdateFriendMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_SC_UpdateFriendMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_SC_UpdateFriendMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Friend_SC_UpdateFriendMsg));
  Friend_SC_UpdateFriendInfo_descriptor_ = file->message_type(22);
  static const int Friend_SC_UpdateFriendInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_SC_UpdateFriendInfo, plyinfo_),
  };
  Friend_SC_UpdateFriendInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Friend_SC_UpdateFriendInfo_descriptor_,
      Friend_SC_UpdateFriendInfo::default_instance_,
      Friend_SC_UpdateFriendInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_SC_UpdateFriendInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_SC_UpdateFriendInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Friend_SC_UpdateFriendInfo));
  Friend_SC_NotifyFriendGift_descriptor_ = file->message_type(23);
  static const int Friend_SC_NotifyFriendGift_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_SC_NotifyFriendGift, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_SC_NotifyFriendGift, giftid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_SC_NotifyFriendGift, ucounts_),
  };
  Friend_SC_NotifyFriendGift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Friend_SC_NotifyFriendGift_descriptor_,
      Friend_SC_NotifyFriendGift::default_instance_,
      Friend_SC_NotifyFriendGift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_SC_NotifyFriendGift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_SC_NotifyFriendGift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Friend_SC_NotifyFriendGift));
  Friend_CS_RecommentFriend_descriptor_ = file->message_type(24);
  static const int Friend_CS_RecommentFriend_offsets_[1] = {
  };
  Friend_CS_RecommentFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Friend_CS_RecommentFriend_descriptor_,
      Friend_CS_RecommentFriend::default_instance_,
      Friend_CS_RecommentFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_CS_RecommentFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_CS_RecommentFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Friend_CS_RecommentFriend));
  Friend_SC_RecommentFriend_descriptor_ = file->message_type(25);
  static const int Friend_SC_RecommentFriend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_SC_RecommentFriend, plylist_),
  };
  Friend_SC_RecommentFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Friend_SC_RecommentFriend_descriptor_,
      Friend_SC_RecommentFriend::default_instance_,
      Friend_SC_RecommentFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_SC_RecommentFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_SC_RecommentFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Friend_SC_RecommentFriend));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_friend_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoPlyInfo_descriptor_, &ProtoPlyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoFriendChatMsg_descriptor_, &ProtoFriendChatMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Friend_CS_GetFriendInfo_descriptor_, &Friend_CS_GetFriendInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Friend_SC_GetFriendInfo_descriptor_, &Friend_SC_GetFriendInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Friend_CS_AddFriend_descriptor_, &Friend_CS_AddFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Friend_SC_AddFriend_descriptor_, &Friend_SC_AddFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Friend_CS_DelFriend_descriptor_, &Friend_CS_DelFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Friend_SC_DelFriend_descriptor_, &Friend_SC_DelFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Friend_CS_AddToBlack_descriptor_, &Friend_CS_AddToBlack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Friend_SC_AddToBlack_descriptor_, &Friend_SC_AddToBlack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Friend_CS_DelBlack_descriptor_, &Friend_CS_DelBlack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Friend_SC_DelBlack_descriptor_, &Friend_SC_DelBlack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Friend_CS_FriendChat_descriptor_, &Friend_CS_FriendChat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Friend_SC_FriendChat_descriptor_, &Friend_SC_FriendChat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Friend_CS_FriendPresent_descriptor_, &Friend_CS_FriendPresent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Friend_SC_FriendPresent_descriptor_, &Friend_SC_FriendPresent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Friend_CS_QueryFriendInfo_descriptor_, &Friend_CS_QueryFriendInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Friend_SC_QueryFriendInfo_descriptor_, &Friend_SC_QueryFriendInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Friend_CS_SearchFriendInfo_descriptor_, &Friend_CS_SearchFriendInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Friend_SC_SearchFriendInfo_descriptor_, &Friend_SC_SearchFriendInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Friend_SC_UpdateBeAddFriend_descriptor_, &Friend_SC_UpdateBeAddFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Friend_SC_UpdateFriendMsg_descriptor_, &Friend_SC_UpdateFriendMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Friend_SC_UpdateFriendInfo_descriptor_, &Friend_SC_UpdateFriendInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Friend_SC_NotifyFriendGift_descriptor_, &Friend_SC_NotifyFriendGift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Friend_CS_RecommentFriend_descriptor_, &Friend_CS_RecommentFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Friend_SC_RecommentFriend_descriptor_, &Friend_SC_RecommentFriend::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_friend_2eproto() {
  delete ProtoPlyInfo::default_instance_;
  delete ProtoPlyInfo_reflection_;
  delete ProtoFriendChatMsg::default_instance_;
  delete ProtoFriendChatMsg_reflection_;
  delete Friend_CS_GetFriendInfo::default_instance_;
  delete Friend_CS_GetFriendInfo_reflection_;
  delete Friend_SC_GetFriendInfo::default_instance_;
  delete Friend_SC_GetFriendInfo_reflection_;
  delete Friend_CS_AddFriend::default_instance_;
  delete Friend_CS_AddFriend_reflection_;
  delete Friend_SC_AddFriend::default_instance_;
  delete Friend_SC_AddFriend_reflection_;
  delete Friend_CS_DelFriend::default_instance_;
  delete Friend_CS_DelFriend_reflection_;
  delete Friend_SC_DelFriend::default_instance_;
  delete Friend_SC_DelFriend_reflection_;
  delete Friend_CS_AddToBlack::default_instance_;
  delete Friend_CS_AddToBlack_reflection_;
  delete Friend_SC_AddToBlack::default_instance_;
  delete Friend_SC_AddToBlack_reflection_;
  delete Friend_CS_DelBlack::default_instance_;
  delete Friend_CS_DelBlack_reflection_;
  delete Friend_SC_DelBlack::default_instance_;
  delete Friend_SC_DelBlack_reflection_;
  delete Friend_CS_FriendChat::default_instance_;
  delete Friend_CS_FriendChat_reflection_;
  delete Friend_SC_FriendChat::default_instance_;
  delete Friend_SC_FriendChat_reflection_;
  delete Friend_CS_FriendPresent::default_instance_;
  delete Friend_CS_FriendPresent_reflection_;
  delete Friend_SC_FriendPresent::default_instance_;
  delete Friend_SC_FriendPresent_reflection_;
  delete Friend_CS_QueryFriendInfo::default_instance_;
  delete Friend_CS_QueryFriendInfo_reflection_;
  delete Friend_SC_QueryFriendInfo::default_instance_;
  delete Friend_SC_QueryFriendInfo_reflection_;
  delete Friend_CS_SearchFriendInfo::default_instance_;
  delete Friend_CS_SearchFriendInfo_reflection_;
  delete Friend_SC_SearchFriendInfo::default_instance_;
  delete Friend_SC_SearchFriendInfo_reflection_;
  delete Friend_SC_UpdateBeAddFriend::default_instance_;
  delete Friend_SC_UpdateBeAddFriend_reflection_;
  delete Friend_SC_UpdateFriendMsg::default_instance_;
  delete Friend_SC_UpdateFriendMsg_reflection_;
  delete Friend_SC_UpdateFriendInfo::default_instance_;
  delete Friend_SC_UpdateFriendInfo_reflection_;
  delete Friend_SC_NotifyFriendGift::default_instance_;
  delete Friend_SC_NotifyFriendGift_reflection_;
  delete Friend_CS_RecommentFriend::default_instance_;
  delete Friend_CS_RecommentFriend_reflection_;
  delete Friend_SC_RecommentFriend::default_instance_;
  delete Friend_SC_RecommentFriend_reflection_;
}

void protobuf_AddDesc_friend_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::message::protobuf_AddDesc_player_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014friend.proto\022\rproto.message\032\014player.pr"
    "oto\"\224\001\n\014ProtoPlyInfo\022\016\n\006charId\030\001 \002(\004\022\020\n\010"
    "roleName\030\002 \001(\t\022\r\n\005level\030\003 \001(\005\022\016\n\006weapon\030"
    "\004 \001(\005\022\016\n\006online\030\005 \001(\005\022\022\n\nfriendShip\030\006 \001("
    "\005\022\017\n\007dhlevel\030\007 \001(\005\022\016\n\006combat\030\010 \001(\005\"\322\001\n\022P"
    "rotoFriendChatMsg\022\021\n\tfromPlyId\030\001 \001(\004\022\017\n\007"
    "toPlyId\030\002 \002(\004\022\014\n\004date\030\003 \001(\t\022\017\n\007content\030\004"
    " \001(\t\0220\n\013fromPlyInfo\030\005 \001(\0132\033.proto.messag"
    "e.ProtoPlyInfo\022\020\n\010leaveMsg\030\006 \001(\005\022\r\n\005msgI"
    "d\030\007 \001(\004\022\023\n\013contentType\030\010 \001(\005\022\021\n\tvoiceTim"
    "e\030\t \001(\005\"9\n\027Friend_CS_GetFriendInfo\022\014\n\004ty"
    "pe\030\001 \002(\005\022\020\n\010isInTeam\030\002 \001(\005\"e\n\027Friend_SC_"
    "GetFriendInfo\022\016\n\006result\030\001 \002(\005\022\014\n\004type\030\002 "
    "\002(\005\022,\n\007plyList\030\003 \003(\0132\033.proto.message.Pro"
    "toPlyInfo\"%\n\023Friend_CS_AddFriend\022\016\n\006char"
    "Id\030\001 \002(\004\"S\n\023Friend_SC_AddFriend\022\016\n\006resul"
    "t\030\001 \002(\005\022,\n\007plyInfo\030\002 \001(\0132\033.proto.message"
    ".ProtoPlyInfo\"%\n\023Friend_CS_DelFriend\022\016\n\006"
    "charId\030\001 \002(\004\"5\n\023Friend_SC_DelFriend\022\016\n\006r"
    "esult\030\001 \002(\005\022\016\n\006charId\030\002 \001(\004\"&\n\024Friend_CS"
    "_AddToBlack\022\016\n\006charId\030\001 \002(\004\"T\n\024Friend_SC"
    "_AddToBlack\022\016\n\006result\030\001 \002(\005\022,\n\007plyInfo\030\002"
    " \001(\0132\033.proto.message.ProtoPlyInfo\"$\n\022Fri"
    "end_CS_DelBlack\022\016\n\006charId\030\001 \002(\004\"4\n\022Frien"
    "d_SC_DelBlack\022\016\n\006result\030\001 \002(\005\022\016\n\006charId\030"
    "\002 \001(\004\"J\n\024Friend_CS_FriendChat\0222\n\007chatMsg"
    "\030\001 \002(\0132!.proto.message.ProtoFriendChatMs"
    "g\"5\n\024Friend_SC_FriendChat\022\016\n\006result\030\001 \002("
    "\005\022\r\n\005msgId\030\002 \001(\004\"F\n\027Friend_CS_FriendPres"
    "ent\022\016\n\006itemId\030\001 \002(\005\022\013\n\003num\030\002 \002(\005\022\016\n\006char"
    "Id\030\003 \002(\004\")\n\027Friend_SC_FriendPresent\022\016\n\006r"
    "esult\030\001 \002(\005\"+\n\031Friend_CS_QueryFriendInfo"
    "\022\016\n\006charId\030\001 \002(\004\"Y\n\031Friend_SC_QueryFrien"
    "dInfo\022\016\n\006result\030\001 \002(\005\022,\n\007plyInfo\030\002 \001(\0132\033"
    ".proto.message.ProtoPlyInfo\")\n\032Friend_CS"
    "_SearchFriendInfo\022\013\n\003key\030\001 \002(\t\"Z\n\032Friend"
    "_SC_SearchFriendInfo\022\016\n\006result\030\001 \002(\005\022,\n\007"
    "plyInfo\030\002 \003(\0132\033.proto.message.ProtoPlyIn"
    "fo\"K\n\033Friend_SC_UpdateBeAddFriend\022,\n\007ply"
    "Info\030\001 \002(\0132\033.proto.message.ProtoPlyInfo\""
    "K\n\031Friend_SC_UpdateFriendMsg\022.\n\003msg\030\001 \002("
    "\0132!.proto.message.ProtoFriendChatMsg\"J\n\032"
    "Friend_SC_UpdateFriendInfo\022,\n\007plyInfo\030\001 "
    "\002(\0132\033.proto.message.ProtoPlyInfo\"M\n\032Frie"
    "nd_SC_NotifyFriendGift\022\016\n\006charid\030\001 \001(\004\022\016"
    "\n\006giftid\030\002 \001(\r\022\017\n\007ucounts\030\003 \001(\r\"\033\n\031Frien"
    "d_CS_RecommentFriend\"I\n\031Friend_SC_Recomm"
    "entFriend\022,\n\007plylist\030\001 \003(\0132\033.proto.messa"
    "ge.ProtoPlyInfo", 1935);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "friend.proto", &protobuf_RegisterTypes);
  ProtoPlyInfo::default_instance_ = new ProtoPlyInfo();
  ProtoFriendChatMsg::default_instance_ = new ProtoFriendChatMsg();
  Friend_CS_GetFriendInfo::default_instance_ = new Friend_CS_GetFriendInfo();
  Friend_SC_GetFriendInfo::default_instance_ = new Friend_SC_GetFriendInfo();
  Friend_CS_AddFriend::default_instance_ = new Friend_CS_AddFriend();
  Friend_SC_AddFriend::default_instance_ = new Friend_SC_AddFriend();
  Friend_CS_DelFriend::default_instance_ = new Friend_CS_DelFriend();
  Friend_SC_DelFriend::default_instance_ = new Friend_SC_DelFriend();
  Friend_CS_AddToBlack::default_instance_ = new Friend_CS_AddToBlack();
  Friend_SC_AddToBlack::default_instance_ = new Friend_SC_AddToBlack();
  Friend_CS_DelBlack::default_instance_ = new Friend_CS_DelBlack();
  Friend_SC_DelBlack::default_instance_ = new Friend_SC_DelBlack();
  Friend_CS_FriendChat::default_instance_ = new Friend_CS_FriendChat();
  Friend_SC_FriendChat::default_instance_ = new Friend_SC_FriendChat();
  Friend_CS_FriendPresent::default_instance_ = new Friend_CS_FriendPresent();
  Friend_SC_FriendPresent::default_instance_ = new Friend_SC_FriendPresent();
  Friend_CS_QueryFriendInfo::default_instance_ = new Friend_CS_QueryFriendInfo();
  Friend_SC_QueryFriendInfo::default_instance_ = new Friend_SC_QueryFriendInfo();
  Friend_CS_SearchFriendInfo::default_instance_ = new Friend_CS_SearchFriendInfo();
  Friend_SC_SearchFriendInfo::default_instance_ = new Friend_SC_SearchFriendInfo();
  Friend_SC_UpdateBeAddFriend::default_instance_ = new Friend_SC_UpdateBeAddFriend();
  Friend_SC_UpdateFriendMsg::default_instance_ = new Friend_SC_UpdateFriendMsg();
  Friend_SC_UpdateFriendInfo::default_instance_ = new Friend_SC_UpdateFriendInfo();
  Friend_SC_NotifyFriendGift::default_instance_ = new Friend_SC_NotifyFriendGift();
  Friend_CS_RecommentFriend::default_instance_ = new Friend_CS_RecommentFriend();
  Friend_SC_RecommentFriend::default_instance_ = new Friend_SC_RecommentFriend();
  ProtoPlyInfo::default_instance_->InitAsDefaultInstance();
  ProtoFriendChatMsg::default_instance_->InitAsDefaultInstance();
  Friend_CS_GetFriendInfo::default_instance_->InitAsDefaultInstance();
  Friend_SC_GetFriendInfo::default_instance_->InitAsDefaultInstance();
  Friend_CS_AddFriend::default_instance_->InitAsDefaultInstance();
  Friend_SC_AddFriend::default_instance_->InitAsDefaultInstance();
  Friend_CS_DelFriend::default_instance_->InitAsDefaultInstance();
  Friend_SC_DelFriend::default_instance_->InitAsDefaultInstance();
  Friend_CS_AddToBlack::default_instance_->InitAsDefaultInstance();
  Friend_SC_AddToBlack::default_instance_->InitAsDefaultInstance();
  Friend_CS_DelBlack::default_instance_->InitAsDefaultInstance();
  Friend_SC_DelBlack::default_instance_->InitAsDefaultInstance();
  Friend_CS_FriendChat::default_instance_->InitAsDefaultInstance();
  Friend_SC_FriendChat::default_instance_->InitAsDefaultInstance();
  Friend_CS_FriendPresent::default_instance_->InitAsDefaultInstance();
  Friend_SC_FriendPresent::default_instance_->InitAsDefaultInstance();
  Friend_CS_QueryFriendInfo::default_instance_->InitAsDefaultInstance();
  Friend_SC_QueryFriendInfo::default_instance_->InitAsDefaultInstance();
  Friend_CS_SearchFriendInfo::default_instance_->InitAsDefaultInstance();
  Friend_SC_SearchFriendInfo::default_instance_->InitAsDefaultInstance();
  Friend_SC_UpdateBeAddFriend::default_instance_->InitAsDefaultInstance();
  Friend_SC_UpdateFriendMsg::default_instance_->InitAsDefaultInstance();
  Friend_SC_UpdateFriendInfo::default_instance_->InitAsDefaultInstance();
  Friend_SC_NotifyFriendGift::default_instance_->InitAsDefaultInstance();
  Friend_CS_RecommentFriend::default_instance_->InitAsDefaultInstance();
  Friend_SC_RecommentFriend::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_friend_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_friend_2eproto {
  StaticDescriptorInitializer_friend_2eproto() {
    protobuf_AddDesc_friend_2eproto();
  }
} static_descriptor_initializer_friend_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ProtoPlyInfo::kCharIdFieldNumber;
const int ProtoPlyInfo::kRoleNameFieldNumber;
const int ProtoPlyInfo::kLevelFieldNumber;
const int ProtoPlyInfo::kWeaponFieldNumber;
const int ProtoPlyInfo::kOnlineFieldNumber;
const int ProtoPlyInfo::kFriendShipFieldNumber;
const int ProtoPlyInfo::kDhlevelFieldNumber;
const int ProtoPlyInfo::kCombatFieldNumber;
#endif  // !_MSC_VER

ProtoPlyInfo::ProtoPlyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoPlyInfo::InitAsDefaultInstance() {
}

ProtoPlyInfo::ProtoPlyInfo(const ProtoPlyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoPlyInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  weapon_ = 0;
  online_ = 0;
  friendship_ = 0;
  dhlevel_ = 0;
  combat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoPlyInfo::~ProtoPlyInfo() {
  SharedDtor();
}

void ProtoPlyInfo::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

void ProtoPlyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoPlyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoPlyInfo_descriptor_;
}

const ProtoPlyInfo& ProtoPlyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

ProtoPlyInfo* ProtoPlyInfo::default_instance_ = NULL;

ProtoPlyInfo* ProtoPlyInfo::New() const {
  return new ProtoPlyInfo;
}

void ProtoPlyInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    level_ = 0;
    weapon_ = 0;
    online_ = 0;
    friendship_ = 0;
    dhlevel_ = 0;
    combat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoPlyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roleName;
        break;
      }

      // optional string roleName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_weapon;
        break;
      }

      // optional int32 weapon = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weapon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weapon_)));
          set_has_weapon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_online;
        break;
      }

      // optional int32 online = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_friendShip;
        break;
      }

      // optional int32 friendShip = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friendShip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friendship_)));
          set_has_friendship();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_dhlevel;
        break;
      }

      // optional int32 dhlevel = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dhlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dhlevel_)));
          set_has_dhlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_combat;
        break;
      }

      // optional int32 combat = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_combat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combat_)));
          set_has_combat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoPlyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional string roleName = 2;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->rolename(), output);
  }

  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // optional int32 weapon = 4;
  if (has_weapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->weapon(), output);
  }

  // optional int32 online = 5;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->online(), output);
  }

  // optional int32 friendShip = 6;
  if (has_friendship()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->friendship(), output);
  }

  // optional int32 dhlevel = 7;
  if (has_dhlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->dhlevel(), output);
  }

  // optional int32 combat = 8;
  if (has_combat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->combat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoPlyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional string roleName = 2;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rolename(), target);
  }

  // optional int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // optional int32 weapon = 4;
  if (has_weapon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->weapon(), target);
  }

  // optional int32 online = 5;
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->online(), target);
  }

  // optional int32 friendShip = 6;
  if (has_friendship()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->friendship(), target);
  }

  // optional int32 dhlevel = 7;
  if (has_dhlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->dhlevel(), target);
  }

  // optional int32 combat = 8;
  if (has_combat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->combat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoPlyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional string roleName = 2;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }

    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 weapon = 4;
    if (has_weapon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weapon());
    }

    // optional int32 online = 5;
    if (has_online()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->online());
    }

    // optional int32 friendShip = 6;
    if (has_friendship()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friendship());
    }

    // optional int32 dhlevel = 7;
    if (has_dhlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dhlevel());
    }

    // optional int32 combat = 8;
    if (has_combat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->combat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoPlyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoPlyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoPlyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoPlyInfo::MergeFrom(const ProtoPlyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_weapon()) {
      set_weapon(from.weapon());
    }
    if (from.has_online()) {
      set_online(from.online());
    }
    if (from.has_friendship()) {
      set_friendship(from.friendship());
    }
    if (from.has_dhlevel()) {
      set_dhlevel(from.dhlevel());
    }
    if (from.has_combat()) {
      set_combat(from.combat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoPlyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoPlyInfo::CopyFrom(const ProtoPlyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoPlyInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ProtoPlyInfo::Swap(ProtoPlyInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(rolename_, other->rolename_);
    std::swap(level_, other->level_);
    std::swap(weapon_, other->weapon_);
    std::swap(online_, other->online_);
    std::swap(friendship_, other->friendship_);
    std::swap(dhlevel_, other->dhlevel_);
    std::swap(combat_, other->combat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoPlyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoPlyInfo_descriptor_;
  metadata.reflection = ProtoPlyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoFriendChatMsg::kFromPlyIdFieldNumber;
const int ProtoFriendChatMsg::kToPlyIdFieldNumber;
const int ProtoFriendChatMsg::kDateFieldNumber;
const int ProtoFriendChatMsg::kContentFieldNumber;
const int ProtoFriendChatMsg::kFromPlyInfoFieldNumber;
const int ProtoFriendChatMsg::kLeaveMsgFieldNumber;
const int ProtoFriendChatMsg::kMsgIdFieldNumber;
const int ProtoFriendChatMsg::kContentTypeFieldNumber;
const int ProtoFriendChatMsg::kVoiceTimeFieldNumber;
#endif  // !_MSC_VER

ProtoFriendChatMsg::ProtoFriendChatMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoFriendChatMsg::InitAsDefaultInstance() {
  fromplyinfo_ = const_cast< ::proto::message::ProtoPlyInfo*>(&::proto::message::ProtoPlyInfo::default_instance());
}

ProtoFriendChatMsg::ProtoFriendChatMsg(const ProtoFriendChatMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoFriendChatMsg::SharedCtor() {
  _cached_size_ = 0;
  fromplyid_ = GOOGLE_ULONGLONG(0);
  toplyid_ = GOOGLE_ULONGLONG(0);
  date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fromplyinfo_ = NULL;
  leavemsg_ = 0;
  msgid_ = GOOGLE_ULONGLONG(0);
  contenttype_ = 0;
  voicetime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoFriendChatMsg::~ProtoFriendChatMsg() {
  SharedDtor();
}

void ProtoFriendChatMsg::SharedDtor() {
  if (date_ != &::google::protobuf::internal::kEmptyString) {
    delete date_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
    delete fromplyinfo_;
  }
}

void ProtoFriendChatMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoFriendChatMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoFriendChatMsg_descriptor_;
}

const ProtoFriendChatMsg& ProtoFriendChatMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

ProtoFriendChatMsg* ProtoFriendChatMsg::default_instance_ = NULL;

ProtoFriendChatMsg* ProtoFriendChatMsg::New() const {
  return new ProtoFriendChatMsg;
}

void ProtoFriendChatMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fromplyid_ = GOOGLE_ULONGLONG(0);
    toplyid_ = GOOGLE_ULONGLONG(0);
    if (has_date()) {
      if (date_ != &::google::protobuf::internal::kEmptyString) {
        date_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    if (has_fromplyinfo()) {
      if (fromplyinfo_ != NULL) fromplyinfo_->::proto::message::ProtoPlyInfo::Clear();
    }
    leavemsg_ = 0;
    msgid_ = GOOGLE_ULONGLONG(0);
    contenttype_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    voicetime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoFriendChatMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 fromPlyId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fromplyid_)));
          set_has_fromplyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_toPlyId;
        break;
      }

      // required uint64 toPlyId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_toPlyId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &toplyid_)));
          set_has_toplyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_date;
        break;
      }

      // optional string date = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->date().data(), this->date().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }

      // optional string content = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_fromPlyInfo;
        break;
      }

      // optional .proto.message.ProtoPlyInfo fromPlyInfo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fromPlyInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fromplyinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_leaveMsg;
        break;
      }

      // optional int32 leaveMsg = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leaveMsg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leavemsg_)));
          set_has_leavemsg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_msgId;
        break;
      }

      // optional uint64 msgId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_contentType;
        break;
      }

      // optional int32 contentType = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contentType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &contenttype_)));
          set_has_contenttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_voiceTime;
        break;
      }

      // optional int32 voiceTime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_voiceTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &voicetime_)));
          set_has_voicetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoFriendChatMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 fromPlyId = 1;
  if (has_fromplyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->fromplyid(), output);
  }

  // required uint64 toPlyId = 2;
  if (has_toplyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->toplyid(), output);
  }

  // optional string date = 3;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->date(), output);
  }

  // optional string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->content(), output);
  }

  // optional .proto.message.ProtoPlyInfo fromPlyInfo = 5;
  if (has_fromplyinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->fromplyinfo(), output);
  }

  // optional int32 leaveMsg = 6;
  if (has_leavemsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->leavemsg(), output);
  }

  // optional uint64 msgId = 7;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->msgid(), output);
  }

  // optional int32 contentType = 8;
  if (has_contenttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->contenttype(), output);
  }

  // optional int32 voiceTime = 9;
  if (has_voicetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->voicetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoFriendChatMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 fromPlyId = 1;
  if (has_fromplyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->fromplyid(), target);
  }

  // required uint64 toPlyId = 2;
  if (has_toplyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->toplyid(), target);
  }

  // optional string date = 3;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->date(), target);
  }

  // optional string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->content(), target);
  }

  // optional .proto.message.ProtoPlyInfo fromPlyInfo = 5;
  if (has_fromplyinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->fromplyinfo(), target);
  }

  // optional int32 leaveMsg = 6;
  if (has_leavemsg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->leavemsg(), target);
  }

  // optional uint64 msgId = 7;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->msgid(), target);
  }

  // optional int32 contentType = 8;
  if (has_contenttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->contenttype(), target);
  }

  // optional int32 voiceTime = 9;
  if (has_voicetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->voicetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoFriendChatMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 fromPlyId = 1;
    if (has_fromplyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fromplyid());
    }

    // required uint64 toPlyId = 2;
    if (has_toplyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->toplyid());
    }

    // optional string date = 3;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->date());
    }

    // optional string content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional .proto.message.ProtoPlyInfo fromPlyInfo = 5;
    if (has_fromplyinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fromplyinfo());
    }

    // optional int32 leaveMsg = 6;
    if (has_leavemsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leavemsg());
    }

    // optional uint64 msgId = 7;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msgid());
    }

    // optional int32 contentType = 8;
    if (has_contenttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contenttype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 voiceTime = 9;
    if (has_voicetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->voicetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoFriendChatMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoFriendChatMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoFriendChatMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoFriendChatMsg::MergeFrom(const ProtoFriendChatMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fromplyid()) {
      set_fromplyid(from.fromplyid());
    }
    if (from.has_toplyid()) {
      set_toplyid(from.toplyid());
    }
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_fromplyinfo()) {
      mutable_fromplyinfo()->::proto::message::ProtoPlyInfo::MergeFrom(from.fromplyinfo());
    }
    if (from.has_leavemsg()) {
      set_leavemsg(from.leavemsg());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_contenttype()) {
      set_contenttype(from.contenttype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_voicetime()) {
      set_voicetime(from.voicetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoFriendChatMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoFriendChatMsg::CopyFrom(const ProtoFriendChatMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoFriendChatMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (has_fromplyinfo()) {
    if (!this->fromplyinfo().IsInitialized()) return false;
  }
  return true;
}

void ProtoFriendChatMsg::Swap(ProtoFriendChatMsg* other) {
  if (other != this) {
    std::swap(fromplyid_, other->fromplyid_);
    std::swap(toplyid_, other->toplyid_);
    std::swap(date_, other->date_);
    std::swap(content_, other->content_);
    std::swap(fromplyinfo_, other->fromplyinfo_);
    std::swap(leavemsg_, other->leavemsg_);
    std::swap(msgid_, other->msgid_);
    std::swap(contenttype_, other->contenttype_);
    std::swap(voicetime_, other->voicetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoFriendChatMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoFriendChatMsg_descriptor_;
  metadata.reflection = ProtoFriendChatMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Friend_CS_GetFriendInfo::kTypeFieldNumber;
const int Friend_CS_GetFriendInfo::kIsInTeamFieldNumber;
#endif  // !_MSC_VER

Friend_CS_GetFriendInfo::Friend_CS_GetFriendInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Friend_CS_GetFriendInfo::InitAsDefaultInstance() {
}

Friend_CS_GetFriendInfo::Friend_CS_GetFriendInfo(const Friend_CS_GetFriendInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Friend_CS_GetFriendInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  isinteam_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Friend_CS_GetFriendInfo::~Friend_CS_GetFriendInfo() {
  SharedDtor();
}

void Friend_CS_GetFriendInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Friend_CS_GetFriendInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Friend_CS_GetFriendInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Friend_CS_GetFriendInfo_descriptor_;
}

const Friend_CS_GetFriendInfo& Friend_CS_GetFriendInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

Friend_CS_GetFriendInfo* Friend_CS_GetFriendInfo::default_instance_ = NULL;

Friend_CS_GetFriendInfo* Friend_CS_GetFriendInfo::New() const {
  return new Friend_CS_GetFriendInfo;
}

void Friend_CS_GetFriendInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    isinteam_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Friend_CS_GetFriendInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isInTeam;
        break;
      }

      // optional int32 isInTeam = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isInTeam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isinteam_)));
          set_has_isinteam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Friend_CS_GetFriendInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 isInTeam = 2;
  if (has_isinteam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->isinteam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Friend_CS_GetFriendInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 isInTeam = 2;
  if (has_isinteam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->isinteam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Friend_CS_GetFriendInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 isInTeam = 2;
    if (has_isinteam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isinteam());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Friend_CS_GetFriendInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Friend_CS_GetFriendInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Friend_CS_GetFriendInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Friend_CS_GetFriendInfo::MergeFrom(const Friend_CS_GetFriendInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_isinteam()) {
      set_isinteam(from.isinteam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Friend_CS_GetFriendInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Friend_CS_GetFriendInfo::CopyFrom(const Friend_CS_GetFriendInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Friend_CS_GetFriendInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Friend_CS_GetFriendInfo::Swap(Friend_CS_GetFriendInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(isinteam_, other->isinteam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Friend_CS_GetFriendInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Friend_CS_GetFriendInfo_descriptor_;
  metadata.reflection = Friend_CS_GetFriendInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Friend_SC_GetFriendInfo::kResultFieldNumber;
const int Friend_SC_GetFriendInfo::kTypeFieldNumber;
const int Friend_SC_GetFriendInfo::kPlyListFieldNumber;
#endif  // !_MSC_VER

Friend_SC_GetFriendInfo::Friend_SC_GetFriendInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Friend_SC_GetFriendInfo::InitAsDefaultInstance() {
}

Friend_SC_GetFriendInfo::Friend_SC_GetFriendInfo(const Friend_SC_GetFriendInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Friend_SC_GetFriendInfo::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Friend_SC_GetFriendInfo::~Friend_SC_GetFriendInfo() {
  SharedDtor();
}

void Friend_SC_GetFriendInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Friend_SC_GetFriendInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Friend_SC_GetFriendInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Friend_SC_GetFriendInfo_descriptor_;
}

const Friend_SC_GetFriendInfo& Friend_SC_GetFriendInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

Friend_SC_GetFriendInfo* Friend_SC_GetFriendInfo::default_instance_ = NULL;

Friend_SC_GetFriendInfo* Friend_SC_GetFriendInfo::New() const {
  return new Friend_SC_GetFriendInfo;
}

void Friend_SC_GetFriendInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    type_ = 0;
  }
  plylist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Friend_SC_GetFriendInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_plyList;
        break;
      }

      // repeated .proto.message.ProtoPlyInfo plyList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_plyList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_plylist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_plyList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Friend_SC_GetFriendInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // repeated .proto.message.ProtoPlyInfo plyList = 3;
  for (int i = 0; i < this->plylist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->plylist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Friend_SC_GetFriendInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // repeated .proto.message.ProtoPlyInfo plyList = 3;
  for (int i = 0; i < this->plylist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->plylist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Friend_SC_GetFriendInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated .proto.message.ProtoPlyInfo plyList = 3;
  total_size += 1 * this->plylist_size();
  for (int i = 0; i < this->plylist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->plylist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Friend_SC_GetFriendInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Friend_SC_GetFriendInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Friend_SC_GetFriendInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Friend_SC_GetFriendInfo::MergeFrom(const Friend_SC_GetFriendInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  plylist_.MergeFrom(from.plylist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Friend_SC_GetFriendInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Friend_SC_GetFriendInfo::CopyFrom(const Friend_SC_GetFriendInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Friend_SC_GetFriendInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < plylist_size(); i++) {
    if (!this->plylist(i).IsInitialized()) return false;
  }
  return true;
}

void Friend_SC_GetFriendInfo::Swap(Friend_SC_GetFriendInfo* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(type_, other->type_);
    plylist_.Swap(&other->plylist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Friend_SC_GetFriendInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Friend_SC_GetFriendInfo_descriptor_;
  metadata.reflection = Friend_SC_GetFriendInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Friend_CS_AddFriend::kCharIdFieldNumber;
#endif  // !_MSC_VER

Friend_CS_AddFriend::Friend_CS_AddFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Friend_CS_AddFriend::InitAsDefaultInstance() {
}

Friend_CS_AddFriend::Friend_CS_AddFriend(const Friend_CS_AddFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Friend_CS_AddFriend::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Friend_CS_AddFriend::~Friend_CS_AddFriend() {
  SharedDtor();
}

void Friend_CS_AddFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Friend_CS_AddFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Friend_CS_AddFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Friend_CS_AddFriend_descriptor_;
}

const Friend_CS_AddFriend& Friend_CS_AddFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

Friend_CS_AddFriend* Friend_CS_AddFriend::default_instance_ = NULL;

Friend_CS_AddFriend* Friend_CS_AddFriend::New() const {
  return new Friend_CS_AddFriend;
}

void Friend_CS_AddFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Friend_CS_AddFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Friend_CS_AddFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Friend_CS_AddFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Friend_CS_AddFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Friend_CS_AddFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Friend_CS_AddFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Friend_CS_AddFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Friend_CS_AddFriend::MergeFrom(const Friend_CS_AddFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Friend_CS_AddFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Friend_CS_AddFriend::CopyFrom(const Friend_CS_AddFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Friend_CS_AddFriend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Friend_CS_AddFriend::Swap(Friend_CS_AddFriend* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Friend_CS_AddFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Friend_CS_AddFriend_descriptor_;
  metadata.reflection = Friend_CS_AddFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Friend_SC_AddFriend::kResultFieldNumber;
const int Friend_SC_AddFriend::kPlyInfoFieldNumber;
#endif  // !_MSC_VER

Friend_SC_AddFriend::Friend_SC_AddFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Friend_SC_AddFriend::InitAsDefaultInstance() {
  plyinfo_ = const_cast< ::proto::message::ProtoPlyInfo*>(&::proto::message::ProtoPlyInfo::default_instance());
}

Friend_SC_AddFriend::Friend_SC_AddFriend(const Friend_SC_AddFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Friend_SC_AddFriend::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  plyinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Friend_SC_AddFriend::~Friend_SC_AddFriend() {
  SharedDtor();
}

void Friend_SC_AddFriend::SharedDtor() {
  if (this != default_instance_) {
    delete plyinfo_;
  }
}

void Friend_SC_AddFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Friend_SC_AddFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Friend_SC_AddFriend_descriptor_;
}

const Friend_SC_AddFriend& Friend_SC_AddFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

Friend_SC_AddFriend* Friend_SC_AddFriend::default_instance_ = NULL;

Friend_SC_AddFriend* Friend_SC_AddFriend::New() const {
  return new Friend_SC_AddFriend;
}

void Friend_SC_AddFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_plyinfo()) {
      if (plyinfo_ != NULL) plyinfo_->::proto::message::ProtoPlyInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Friend_SC_AddFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_plyInfo;
        break;
      }

      // optional .proto.message.ProtoPlyInfo plyInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_plyInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_plyinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Friend_SC_AddFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .proto.message.ProtoPlyInfo plyInfo = 2;
  if (has_plyinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->plyinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Friend_SC_AddFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .proto.message.ProtoPlyInfo plyInfo = 2;
  if (has_plyinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->plyinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Friend_SC_AddFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .proto.message.ProtoPlyInfo plyInfo = 2;
    if (has_plyinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->plyinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Friend_SC_AddFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Friend_SC_AddFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Friend_SC_AddFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Friend_SC_AddFriend::MergeFrom(const Friend_SC_AddFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_plyinfo()) {
      mutable_plyinfo()->::proto::message::ProtoPlyInfo::MergeFrom(from.plyinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Friend_SC_AddFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Friend_SC_AddFriend::CopyFrom(const Friend_SC_AddFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Friend_SC_AddFriend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_plyinfo()) {
    if (!this->plyinfo().IsInitialized()) return false;
  }
  return true;
}

void Friend_SC_AddFriend::Swap(Friend_SC_AddFriend* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(plyinfo_, other->plyinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Friend_SC_AddFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Friend_SC_AddFriend_descriptor_;
  metadata.reflection = Friend_SC_AddFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Friend_CS_DelFriend::kCharIdFieldNumber;
#endif  // !_MSC_VER

Friend_CS_DelFriend::Friend_CS_DelFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Friend_CS_DelFriend::InitAsDefaultInstance() {
}

Friend_CS_DelFriend::Friend_CS_DelFriend(const Friend_CS_DelFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Friend_CS_DelFriend::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Friend_CS_DelFriend::~Friend_CS_DelFriend() {
  SharedDtor();
}

void Friend_CS_DelFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Friend_CS_DelFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Friend_CS_DelFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Friend_CS_DelFriend_descriptor_;
}

const Friend_CS_DelFriend& Friend_CS_DelFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

Friend_CS_DelFriend* Friend_CS_DelFriend::default_instance_ = NULL;

Friend_CS_DelFriend* Friend_CS_DelFriend::New() const {
  return new Friend_CS_DelFriend;
}

void Friend_CS_DelFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Friend_CS_DelFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Friend_CS_DelFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Friend_CS_DelFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Friend_CS_DelFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Friend_CS_DelFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Friend_CS_DelFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Friend_CS_DelFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Friend_CS_DelFriend::MergeFrom(const Friend_CS_DelFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Friend_CS_DelFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Friend_CS_DelFriend::CopyFrom(const Friend_CS_DelFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Friend_CS_DelFriend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Friend_CS_DelFriend::Swap(Friend_CS_DelFriend* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Friend_CS_DelFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Friend_CS_DelFriend_descriptor_;
  metadata.reflection = Friend_CS_DelFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Friend_SC_DelFriend::kResultFieldNumber;
const int Friend_SC_DelFriend::kCharIdFieldNumber;
#endif  // !_MSC_VER

Friend_SC_DelFriend::Friend_SC_DelFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Friend_SC_DelFriend::InitAsDefaultInstance() {
}

Friend_SC_DelFriend::Friend_SC_DelFriend(const Friend_SC_DelFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Friend_SC_DelFriend::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Friend_SC_DelFriend::~Friend_SC_DelFriend() {
  SharedDtor();
}

void Friend_SC_DelFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Friend_SC_DelFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Friend_SC_DelFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Friend_SC_DelFriend_descriptor_;
}

const Friend_SC_DelFriend& Friend_SC_DelFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

Friend_SC_DelFriend* Friend_SC_DelFriend::default_instance_ = NULL;

Friend_SC_DelFriend* Friend_SC_DelFriend::New() const {
  return new Friend_SC_DelFriend;
}

void Friend_SC_DelFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    charid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Friend_SC_DelFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charId;
        break;
      }

      // optional uint64 charId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Friend_SC_DelFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint64 charId = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Friend_SC_DelFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint64 charId = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Friend_SC_DelFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 charId = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Friend_SC_DelFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Friend_SC_DelFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Friend_SC_DelFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Friend_SC_DelFriend::MergeFrom(const Friend_SC_DelFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Friend_SC_DelFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Friend_SC_DelFriend::CopyFrom(const Friend_SC_DelFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Friend_SC_DelFriend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Friend_SC_DelFriend::Swap(Friend_SC_DelFriend* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Friend_SC_DelFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Friend_SC_DelFriend_descriptor_;
  metadata.reflection = Friend_SC_DelFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Friend_CS_AddToBlack::kCharIdFieldNumber;
#endif  // !_MSC_VER

Friend_CS_AddToBlack::Friend_CS_AddToBlack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Friend_CS_AddToBlack::InitAsDefaultInstance() {
}

Friend_CS_AddToBlack::Friend_CS_AddToBlack(const Friend_CS_AddToBlack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Friend_CS_AddToBlack::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Friend_CS_AddToBlack::~Friend_CS_AddToBlack() {
  SharedDtor();
}

void Friend_CS_AddToBlack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Friend_CS_AddToBlack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Friend_CS_AddToBlack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Friend_CS_AddToBlack_descriptor_;
}

const Friend_CS_AddToBlack& Friend_CS_AddToBlack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

Friend_CS_AddToBlack* Friend_CS_AddToBlack::default_instance_ = NULL;

Friend_CS_AddToBlack* Friend_CS_AddToBlack::New() const {
  return new Friend_CS_AddToBlack;
}

void Friend_CS_AddToBlack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Friend_CS_AddToBlack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Friend_CS_AddToBlack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Friend_CS_AddToBlack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Friend_CS_AddToBlack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Friend_CS_AddToBlack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Friend_CS_AddToBlack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Friend_CS_AddToBlack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Friend_CS_AddToBlack::MergeFrom(const Friend_CS_AddToBlack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Friend_CS_AddToBlack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Friend_CS_AddToBlack::CopyFrom(const Friend_CS_AddToBlack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Friend_CS_AddToBlack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Friend_CS_AddToBlack::Swap(Friend_CS_AddToBlack* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Friend_CS_AddToBlack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Friend_CS_AddToBlack_descriptor_;
  metadata.reflection = Friend_CS_AddToBlack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Friend_SC_AddToBlack::kResultFieldNumber;
const int Friend_SC_AddToBlack::kPlyInfoFieldNumber;
#endif  // !_MSC_VER

Friend_SC_AddToBlack::Friend_SC_AddToBlack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Friend_SC_AddToBlack::InitAsDefaultInstance() {
  plyinfo_ = const_cast< ::proto::message::ProtoPlyInfo*>(&::proto::message::ProtoPlyInfo::default_instance());
}

Friend_SC_AddToBlack::Friend_SC_AddToBlack(const Friend_SC_AddToBlack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Friend_SC_AddToBlack::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  plyinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Friend_SC_AddToBlack::~Friend_SC_AddToBlack() {
  SharedDtor();
}

void Friend_SC_AddToBlack::SharedDtor() {
  if (this != default_instance_) {
    delete plyinfo_;
  }
}

void Friend_SC_AddToBlack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Friend_SC_AddToBlack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Friend_SC_AddToBlack_descriptor_;
}

const Friend_SC_AddToBlack& Friend_SC_AddToBlack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

Friend_SC_AddToBlack* Friend_SC_AddToBlack::default_instance_ = NULL;

Friend_SC_AddToBlack* Friend_SC_AddToBlack::New() const {
  return new Friend_SC_AddToBlack;
}

void Friend_SC_AddToBlack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_plyinfo()) {
      if (plyinfo_ != NULL) plyinfo_->::proto::message::ProtoPlyInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Friend_SC_AddToBlack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_plyInfo;
        break;
      }

      // optional .proto.message.ProtoPlyInfo plyInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_plyInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_plyinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Friend_SC_AddToBlack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .proto.message.ProtoPlyInfo plyInfo = 2;
  if (has_plyinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->plyinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Friend_SC_AddToBlack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .proto.message.ProtoPlyInfo plyInfo = 2;
  if (has_plyinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->plyinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Friend_SC_AddToBlack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .proto.message.ProtoPlyInfo plyInfo = 2;
    if (has_plyinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->plyinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Friend_SC_AddToBlack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Friend_SC_AddToBlack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Friend_SC_AddToBlack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Friend_SC_AddToBlack::MergeFrom(const Friend_SC_AddToBlack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_plyinfo()) {
      mutable_plyinfo()->::proto::message::ProtoPlyInfo::MergeFrom(from.plyinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Friend_SC_AddToBlack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Friend_SC_AddToBlack::CopyFrom(const Friend_SC_AddToBlack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Friend_SC_AddToBlack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_plyinfo()) {
    if (!this->plyinfo().IsInitialized()) return false;
  }
  return true;
}

void Friend_SC_AddToBlack::Swap(Friend_SC_AddToBlack* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(plyinfo_, other->plyinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Friend_SC_AddToBlack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Friend_SC_AddToBlack_descriptor_;
  metadata.reflection = Friend_SC_AddToBlack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Friend_CS_DelBlack::kCharIdFieldNumber;
#endif  // !_MSC_VER

Friend_CS_DelBlack::Friend_CS_DelBlack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Friend_CS_DelBlack::InitAsDefaultInstance() {
}

Friend_CS_DelBlack::Friend_CS_DelBlack(const Friend_CS_DelBlack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Friend_CS_DelBlack::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Friend_CS_DelBlack::~Friend_CS_DelBlack() {
  SharedDtor();
}

void Friend_CS_DelBlack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Friend_CS_DelBlack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Friend_CS_DelBlack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Friend_CS_DelBlack_descriptor_;
}

const Friend_CS_DelBlack& Friend_CS_DelBlack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

Friend_CS_DelBlack* Friend_CS_DelBlack::default_instance_ = NULL;

Friend_CS_DelBlack* Friend_CS_DelBlack::New() const {
  return new Friend_CS_DelBlack;
}

void Friend_CS_DelBlack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Friend_CS_DelBlack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Friend_CS_DelBlack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Friend_CS_DelBlack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Friend_CS_DelBlack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Friend_CS_DelBlack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Friend_CS_DelBlack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Friend_CS_DelBlack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Friend_CS_DelBlack::MergeFrom(const Friend_CS_DelBlack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Friend_CS_DelBlack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Friend_CS_DelBlack::CopyFrom(const Friend_CS_DelBlack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Friend_CS_DelBlack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Friend_CS_DelBlack::Swap(Friend_CS_DelBlack* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Friend_CS_DelBlack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Friend_CS_DelBlack_descriptor_;
  metadata.reflection = Friend_CS_DelBlack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Friend_SC_DelBlack::kResultFieldNumber;
const int Friend_SC_DelBlack::kCharIdFieldNumber;
#endif  // !_MSC_VER

Friend_SC_DelBlack::Friend_SC_DelBlack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Friend_SC_DelBlack::InitAsDefaultInstance() {
}

Friend_SC_DelBlack::Friend_SC_DelBlack(const Friend_SC_DelBlack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Friend_SC_DelBlack::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Friend_SC_DelBlack::~Friend_SC_DelBlack() {
  SharedDtor();
}

void Friend_SC_DelBlack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Friend_SC_DelBlack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Friend_SC_DelBlack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Friend_SC_DelBlack_descriptor_;
}

const Friend_SC_DelBlack& Friend_SC_DelBlack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

Friend_SC_DelBlack* Friend_SC_DelBlack::default_instance_ = NULL;

Friend_SC_DelBlack* Friend_SC_DelBlack::New() const {
  return new Friend_SC_DelBlack;
}

void Friend_SC_DelBlack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    charid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Friend_SC_DelBlack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charId;
        break;
      }

      // optional uint64 charId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Friend_SC_DelBlack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint64 charId = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Friend_SC_DelBlack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint64 charId = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Friend_SC_DelBlack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 charId = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Friend_SC_DelBlack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Friend_SC_DelBlack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Friend_SC_DelBlack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Friend_SC_DelBlack::MergeFrom(const Friend_SC_DelBlack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Friend_SC_DelBlack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Friend_SC_DelBlack::CopyFrom(const Friend_SC_DelBlack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Friend_SC_DelBlack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Friend_SC_DelBlack::Swap(Friend_SC_DelBlack* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Friend_SC_DelBlack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Friend_SC_DelBlack_descriptor_;
  metadata.reflection = Friend_SC_DelBlack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Friend_CS_FriendChat::kChatMsgFieldNumber;
#endif  // !_MSC_VER

Friend_CS_FriendChat::Friend_CS_FriendChat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Friend_CS_FriendChat::InitAsDefaultInstance() {
  chatmsg_ = const_cast< ::proto::message::ProtoFriendChatMsg*>(&::proto::message::ProtoFriendChatMsg::default_instance());
}

Friend_CS_FriendChat::Friend_CS_FriendChat(const Friend_CS_FriendChat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Friend_CS_FriendChat::SharedCtor() {
  _cached_size_ = 0;
  chatmsg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Friend_CS_FriendChat::~Friend_CS_FriendChat() {
  SharedDtor();
}

void Friend_CS_FriendChat::SharedDtor() {
  if (this != default_instance_) {
    delete chatmsg_;
  }
}

void Friend_CS_FriendChat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Friend_CS_FriendChat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Friend_CS_FriendChat_descriptor_;
}

const Friend_CS_FriendChat& Friend_CS_FriendChat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

Friend_CS_FriendChat* Friend_CS_FriendChat::default_instance_ = NULL;

Friend_CS_FriendChat* Friend_CS_FriendChat::New() const {
  return new Friend_CS_FriendChat;
}

void Friend_CS_FriendChat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_chatmsg()) {
      if (chatmsg_ != NULL) chatmsg_->::proto::message::ProtoFriendChatMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Friend_CS_FriendChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.message.ProtoFriendChatMsg chatMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chatmsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Friend_CS_FriendChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .proto.message.ProtoFriendChatMsg chatMsg = 1;
  if (has_chatmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->chatmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Friend_CS_FriendChat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .proto.message.ProtoFriendChatMsg chatMsg = 1;
  if (has_chatmsg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->chatmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Friend_CS_FriendChat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto.message.ProtoFriendChatMsg chatMsg = 1;
    if (has_chatmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chatmsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Friend_CS_FriendChat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Friend_CS_FriendChat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Friend_CS_FriendChat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Friend_CS_FriendChat::MergeFrom(const Friend_CS_FriendChat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chatmsg()) {
      mutable_chatmsg()->::proto::message::ProtoFriendChatMsg::MergeFrom(from.chatmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Friend_CS_FriendChat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Friend_CS_FriendChat::CopyFrom(const Friend_CS_FriendChat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Friend_CS_FriendChat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_chatmsg()) {
    if (!this->chatmsg().IsInitialized()) return false;
  }
  return true;
}

void Friend_CS_FriendChat::Swap(Friend_CS_FriendChat* other) {
  if (other != this) {
    std::swap(chatmsg_, other->chatmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Friend_CS_FriendChat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Friend_CS_FriendChat_descriptor_;
  metadata.reflection = Friend_CS_FriendChat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Friend_SC_FriendChat::kResultFieldNumber;
const int Friend_SC_FriendChat::kMsgIdFieldNumber;
#endif  // !_MSC_VER

Friend_SC_FriendChat::Friend_SC_FriendChat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Friend_SC_FriendChat::InitAsDefaultInstance() {
}

Friend_SC_FriendChat::Friend_SC_FriendChat(const Friend_SC_FriendChat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Friend_SC_FriendChat::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  msgid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Friend_SC_FriendChat::~Friend_SC_FriendChat() {
  SharedDtor();
}

void Friend_SC_FriendChat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Friend_SC_FriendChat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Friend_SC_FriendChat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Friend_SC_FriendChat_descriptor_;
}

const Friend_SC_FriendChat& Friend_SC_FriendChat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

Friend_SC_FriendChat* Friend_SC_FriendChat::default_instance_ = NULL;

Friend_SC_FriendChat* Friend_SC_FriendChat::New() const {
  return new Friend_SC_FriendChat;
}

void Friend_SC_FriendChat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    msgid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Friend_SC_FriendChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_msgId;
        break;
      }

      // optional uint64 msgId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Friend_SC_FriendChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint64 msgId = 2;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->msgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Friend_SC_FriendChat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint64 msgId = 2;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->msgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Friend_SC_FriendChat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 msgId = 2;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msgid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Friend_SC_FriendChat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Friend_SC_FriendChat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Friend_SC_FriendChat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Friend_SC_FriendChat::MergeFrom(const Friend_SC_FriendChat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Friend_SC_FriendChat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Friend_SC_FriendChat::CopyFrom(const Friend_SC_FriendChat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Friend_SC_FriendChat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Friend_SC_FriendChat::Swap(Friend_SC_FriendChat* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Friend_SC_FriendChat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Friend_SC_FriendChat_descriptor_;
  metadata.reflection = Friend_SC_FriendChat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Friend_CS_FriendPresent::kItemIdFieldNumber;
const int Friend_CS_FriendPresent::kNumFieldNumber;
const int Friend_CS_FriendPresent::kCharIdFieldNumber;
#endif  // !_MSC_VER

Friend_CS_FriendPresent::Friend_CS_FriendPresent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Friend_CS_FriendPresent::InitAsDefaultInstance() {
}

Friend_CS_FriendPresent::Friend_CS_FriendPresent(const Friend_CS_FriendPresent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Friend_CS_FriendPresent::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  num_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Friend_CS_FriendPresent::~Friend_CS_FriendPresent() {
  SharedDtor();
}

void Friend_CS_FriendPresent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Friend_CS_FriendPresent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Friend_CS_FriendPresent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Friend_CS_FriendPresent_descriptor_;
}

const Friend_CS_FriendPresent& Friend_CS_FriendPresent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

Friend_CS_FriendPresent* Friend_CS_FriendPresent::default_instance_ = NULL;

Friend_CS_FriendPresent* Friend_CS_FriendPresent::New() const {
  return new Friend_CS_FriendPresent;
}

void Friend_CS_FriendPresent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0;
    num_ = 0;
    charid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Friend_CS_FriendPresent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 itemId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // required int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_charId;
        break;
      }

      // required uint64 charId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Friend_CS_FriendPresent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 itemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // required int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  // required uint64 charId = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Friend_CS_FriendPresent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 itemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // required int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  // required uint64 charId = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Friend_CS_FriendPresent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 itemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // required int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // required uint64 charId = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Friend_CS_FriendPresent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Friend_CS_FriendPresent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Friend_CS_FriendPresent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Friend_CS_FriendPresent::MergeFrom(const Friend_CS_FriendPresent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Friend_CS_FriendPresent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Friend_CS_FriendPresent::CopyFrom(const Friend_CS_FriendPresent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Friend_CS_FriendPresent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Friend_CS_FriendPresent::Swap(Friend_CS_FriendPresent* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(num_, other->num_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Friend_CS_FriendPresent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Friend_CS_FriendPresent_descriptor_;
  metadata.reflection = Friend_CS_FriendPresent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Friend_SC_FriendPresent::kResultFieldNumber;
#endif  // !_MSC_VER

Friend_SC_FriendPresent::Friend_SC_FriendPresent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Friend_SC_FriendPresent::InitAsDefaultInstance() {
}

Friend_SC_FriendPresent::Friend_SC_FriendPresent(const Friend_SC_FriendPresent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Friend_SC_FriendPresent::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Friend_SC_FriendPresent::~Friend_SC_FriendPresent() {
  SharedDtor();
}

void Friend_SC_FriendPresent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Friend_SC_FriendPresent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Friend_SC_FriendPresent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Friend_SC_FriendPresent_descriptor_;
}

const Friend_SC_FriendPresent& Friend_SC_FriendPresent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

Friend_SC_FriendPresent* Friend_SC_FriendPresent::default_instance_ = NULL;

Friend_SC_FriendPresent* Friend_SC_FriendPresent::New() const {
  return new Friend_SC_FriendPresent;
}

void Friend_SC_FriendPresent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Friend_SC_FriendPresent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Friend_SC_FriendPresent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Friend_SC_FriendPresent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Friend_SC_FriendPresent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Friend_SC_FriendPresent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Friend_SC_FriendPresent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Friend_SC_FriendPresent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Friend_SC_FriendPresent::MergeFrom(const Friend_SC_FriendPresent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Friend_SC_FriendPresent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Friend_SC_FriendPresent::CopyFrom(const Friend_SC_FriendPresent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Friend_SC_FriendPresent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Friend_SC_FriendPresent::Swap(Friend_SC_FriendPresent* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Friend_SC_FriendPresent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Friend_SC_FriendPresent_descriptor_;
  metadata.reflection = Friend_SC_FriendPresent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Friend_CS_QueryFriendInfo::kCharIdFieldNumber;
#endif  // !_MSC_VER

Friend_CS_QueryFriendInfo::Friend_CS_QueryFriendInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Friend_CS_QueryFriendInfo::InitAsDefaultInstance() {
}

Friend_CS_QueryFriendInfo::Friend_CS_QueryFriendInfo(const Friend_CS_QueryFriendInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Friend_CS_QueryFriendInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Friend_CS_QueryFriendInfo::~Friend_CS_QueryFriendInfo() {
  SharedDtor();
}

void Friend_CS_QueryFriendInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Friend_CS_QueryFriendInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Friend_CS_QueryFriendInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Friend_CS_QueryFriendInfo_descriptor_;
}

const Friend_CS_QueryFriendInfo& Friend_CS_QueryFriendInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

Friend_CS_QueryFriendInfo* Friend_CS_QueryFriendInfo::default_instance_ = NULL;

Friend_CS_QueryFriendInfo* Friend_CS_QueryFriendInfo::New() const {
  return new Friend_CS_QueryFriendInfo;
}

void Friend_CS_QueryFriendInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Friend_CS_QueryFriendInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Friend_CS_QueryFriendInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Friend_CS_QueryFriendInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Friend_CS_QueryFriendInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Friend_CS_QueryFriendInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Friend_CS_QueryFriendInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Friend_CS_QueryFriendInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Friend_CS_QueryFriendInfo::MergeFrom(const Friend_CS_QueryFriendInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Friend_CS_QueryFriendInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Friend_CS_QueryFriendInfo::CopyFrom(const Friend_CS_QueryFriendInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Friend_CS_QueryFriendInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Friend_CS_QueryFriendInfo::Swap(Friend_CS_QueryFriendInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Friend_CS_QueryFriendInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Friend_CS_QueryFriendInfo_descriptor_;
  metadata.reflection = Friend_CS_QueryFriendInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Friend_SC_QueryFriendInfo::kResultFieldNumber;
const int Friend_SC_QueryFriendInfo::kPlyInfoFieldNumber;
#endif  // !_MSC_VER

Friend_SC_QueryFriendInfo::Friend_SC_QueryFriendInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Friend_SC_QueryFriendInfo::InitAsDefaultInstance() {
  plyinfo_ = const_cast< ::proto::message::ProtoPlyInfo*>(&::proto::message::ProtoPlyInfo::default_instance());
}

Friend_SC_QueryFriendInfo::Friend_SC_QueryFriendInfo(const Friend_SC_QueryFriendInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Friend_SC_QueryFriendInfo::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  plyinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Friend_SC_QueryFriendInfo::~Friend_SC_QueryFriendInfo() {
  SharedDtor();
}

void Friend_SC_QueryFriendInfo::SharedDtor() {
  if (this != default_instance_) {
    delete plyinfo_;
  }
}

void Friend_SC_QueryFriendInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Friend_SC_QueryFriendInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Friend_SC_QueryFriendInfo_descriptor_;
}

const Friend_SC_QueryFriendInfo& Friend_SC_QueryFriendInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

Friend_SC_QueryFriendInfo* Friend_SC_QueryFriendInfo::default_instance_ = NULL;

Friend_SC_QueryFriendInfo* Friend_SC_QueryFriendInfo::New() const {
  return new Friend_SC_QueryFriendInfo;
}

void Friend_SC_QueryFriendInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_plyinfo()) {
      if (plyinfo_ != NULL) plyinfo_->::proto::message::ProtoPlyInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Friend_SC_QueryFriendInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_plyInfo;
        break;
      }

      // optional .proto.message.ProtoPlyInfo plyInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_plyInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_plyinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Friend_SC_QueryFriendInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .proto.message.ProtoPlyInfo plyInfo = 2;
  if (has_plyinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->plyinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Friend_SC_QueryFriendInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .proto.message.ProtoPlyInfo plyInfo = 2;
  if (has_plyinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->plyinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Friend_SC_QueryFriendInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .proto.message.ProtoPlyInfo plyInfo = 2;
    if (has_plyinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->plyinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Friend_SC_QueryFriendInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Friend_SC_QueryFriendInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Friend_SC_QueryFriendInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Friend_SC_QueryFriendInfo::MergeFrom(const Friend_SC_QueryFriendInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_plyinfo()) {
      mutable_plyinfo()->::proto::message::ProtoPlyInfo::MergeFrom(from.plyinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Friend_SC_QueryFriendInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Friend_SC_QueryFriendInfo::CopyFrom(const Friend_SC_QueryFriendInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Friend_SC_QueryFriendInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_plyinfo()) {
    if (!this->plyinfo().IsInitialized()) return false;
  }
  return true;
}

void Friend_SC_QueryFriendInfo::Swap(Friend_SC_QueryFriendInfo* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(plyinfo_, other->plyinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Friend_SC_QueryFriendInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Friend_SC_QueryFriendInfo_descriptor_;
  metadata.reflection = Friend_SC_QueryFriendInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Friend_CS_SearchFriendInfo::kKeyFieldNumber;
#endif  // !_MSC_VER

Friend_CS_SearchFriendInfo::Friend_CS_SearchFriendInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Friend_CS_SearchFriendInfo::InitAsDefaultInstance() {
}

Friend_CS_SearchFriendInfo::Friend_CS_SearchFriendInfo(const Friend_CS_SearchFriendInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Friend_CS_SearchFriendInfo::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Friend_CS_SearchFriendInfo::~Friend_CS_SearchFriendInfo() {
  SharedDtor();
}

void Friend_CS_SearchFriendInfo::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void Friend_CS_SearchFriendInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Friend_CS_SearchFriendInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Friend_CS_SearchFriendInfo_descriptor_;
}

const Friend_CS_SearchFriendInfo& Friend_CS_SearchFriendInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

Friend_CS_SearchFriendInfo* Friend_CS_SearchFriendInfo::default_instance_ = NULL;

Friend_CS_SearchFriendInfo* Friend_CS_SearchFriendInfo::New() const {
  return new Friend_CS_SearchFriendInfo;
}

void Friend_CS_SearchFriendInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Friend_CS_SearchFriendInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Friend_CS_SearchFriendInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Friend_CS_SearchFriendInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Friend_CS_SearchFriendInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Friend_CS_SearchFriendInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Friend_CS_SearchFriendInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Friend_CS_SearchFriendInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Friend_CS_SearchFriendInfo::MergeFrom(const Friend_CS_SearchFriendInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Friend_CS_SearchFriendInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Friend_CS_SearchFriendInfo::CopyFrom(const Friend_CS_SearchFriendInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Friend_CS_SearchFriendInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Friend_CS_SearchFriendInfo::Swap(Friend_CS_SearchFriendInfo* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Friend_CS_SearchFriendInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Friend_CS_SearchFriendInfo_descriptor_;
  metadata.reflection = Friend_CS_SearchFriendInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Friend_SC_SearchFriendInfo::kResultFieldNumber;
const int Friend_SC_SearchFriendInfo::kPlyInfoFieldNumber;
#endif  // !_MSC_VER

Friend_SC_SearchFriendInfo::Friend_SC_SearchFriendInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Friend_SC_SearchFriendInfo::InitAsDefaultInstance() {
}

Friend_SC_SearchFriendInfo::Friend_SC_SearchFriendInfo(const Friend_SC_SearchFriendInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Friend_SC_SearchFriendInfo::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Friend_SC_SearchFriendInfo::~Friend_SC_SearchFriendInfo() {
  SharedDtor();
}

void Friend_SC_SearchFriendInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Friend_SC_SearchFriendInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Friend_SC_SearchFriendInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Friend_SC_SearchFriendInfo_descriptor_;
}

const Friend_SC_SearchFriendInfo& Friend_SC_SearchFriendInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

Friend_SC_SearchFriendInfo* Friend_SC_SearchFriendInfo::default_instance_ = NULL;

Friend_SC_SearchFriendInfo* Friend_SC_SearchFriendInfo::New() const {
  return new Friend_SC_SearchFriendInfo;
}

void Friend_SC_SearchFriendInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  plyinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Friend_SC_SearchFriendInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_plyInfo;
        break;
      }

      // repeated .proto.message.ProtoPlyInfo plyInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_plyInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_plyinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_plyInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Friend_SC_SearchFriendInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .proto.message.ProtoPlyInfo plyInfo = 2;
  for (int i = 0; i < this->plyinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->plyinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Friend_SC_SearchFriendInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .proto.message.ProtoPlyInfo plyInfo = 2;
  for (int i = 0; i < this->plyinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->plyinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Friend_SC_SearchFriendInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .proto.message.ProtoPlyInfo plyInfo = 2;
  total_size += 1 * this->plyinfo_size();
  for (int i = 0; i < this->plyinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->plyinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Friend_SC_SearchFriendInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Friend_SC_SearchFriendInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Friend_SC_SearchFriendInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Friend_SC_SearchFriendInfo::MergeFrom(const Friend_SC_SearchFriendInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  plyinfo_.MergeFrom(from.plyinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Friend_SC_SearchFriendInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Friend_SC_SearchFriendInfo::CopyFrom(const Friend_SC_SearchFriendInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Friend_SC_SearchFriendInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < plyinfo_size(); i++) {
    if (!this->plyinfo(i).IsInitialized()) return false;
  }
  return true;
}

void Friend_SC_SearchFriendInfo::Swap(Friend_SC_SearchFriendInfo* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    plyinfo_.Swap(&other->plyinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Friend_SC_SearchFriendInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Friend_SC_SearchFriendInfo_descriptor_;
  metadata.reflection = Friend_SC_SearchFriendInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Friend_SC_UpdateBeAddFriend::kPlyInfoFieldNumber;
#endif  // !_MSC_VER

Friend_SC_UpdateBeAddFriend::Friend_SC_UpdateBeAddFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Friend_SC_UpdateBeAddFriend::InitAsDefaultInstance() {
  plyinfo_ = const_cast< ::proto::message::ProtoPlyInfo*>(&::proto::message::ProtoPlyInfo::default_instance());
}

Friend_SC_UpdateBeAddFriend::Friend_SC_UpdateBeAddFriend(const Friend_SC_UpdateBeAddFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Friend_SC_UpdateBeAddFriend::SharedCtor() {
  _cached_size_ = 0;
  plyinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Friend_SC_UpdateBeAddFriend::~Friend_SC_UpdateBeAddFriend() {
  SharedDtor();
}

void Friend_SC_UpdateBeAddFriend::SharedDtor() {
  if (this != default_instance_) {
    delete plyinfo_;
  }
}

void Friend_SC_UpdateBeAddFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Friend_SC_UpdateBeAddFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Friend_SC_UpdateBeAddFriend_descriptor_;
}

const Friend_SC_UpdateBeAddFriend& Friend_SC_UpdateBeAddFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

Friend_SC_UpdateBeAddFriend* Friend_SC_UpdateBeAddFriend::default_instance_ = NULL;

Friend_SC_UpdateBeAddFriend* Friend_SC_UpdateBeAddFriend::New() const {
  return new Friend_SC_UpdateBeAddFriend;
}

void Friend_SC_UpdateBeAddFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_plyinfo()) {
      if (plyinfo_ != NULL) plyinfo_->::proto::message::ProtoPlyInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Friend_SC_UpdateBeAddFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.message.ProtoPlyInfo plyInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_plyinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Friend_SC_UpdateBeAddFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .proto.message.ProtoPlyInfo plyInfo = 1;
  if (has_plyinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->plyinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Friend_SC_UpdateBeAddFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .proto.message.ProtoPlyInfo plyInfo = 1;
  if (has_plyinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->plyinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Friend_SC_UpdateBeAddFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto.message.ProtoPlyInfo plyInfo = 1;
    if (has_plyinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->plyinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Friend_SC_UpdateBeAddFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Friend_SC_UpdateBeAddFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Friend_SC_UpdateBeAddFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Friend_SC_UpdateBeAddFriend::MergeFrom(const Friend_SC_UpdateBeAddFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plyinfo()) {
      mutable_plyinfo()->::proto::message::ProtoPlyInfo::MergeFrom(from.plyinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Friend_SC_UpdateBeAddFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Friend_SC_UpdateBeAddFriend::CopyFrom(const Friend_SC_UpdateBeAddFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Friend_SC_UpdateBeAddFriend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_plyinfo()) {
    if (!this->plyinfo().IsInitialized()) return false;
  }
  return true;
}

void Friend_SC_UpdateBeAddFriend::Swap(Friend_SC_UpdateBeAddFriend* other) {
  if (other != this) {
    std::swap(plyinfo_, other->plyinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Friend_SC_UpdateBeAddFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Friend_SC_UpdateBeAddFriend_descriptor_;
  metadata.reflection = Friend_SC_UpdateBeAddFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Friend_SC_UpdateFriendMsg::kMsgFieldNumber;
#endif  // !_MSC_VER

Friend_SC_UpdateFriendMsg::Friend_SC_UpdateFriendMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Friend_SC_UpdateFriendMsg::InitAsDefaultInstance() {
  msg_ = const_cast< ::proto::message::ProtoFriendChatMsg*>(&::proto::message::ProtoFriendChatMsg::default_instance());
}

Friend_SC_UpdateFriendMsg::Friend_SC_UpdateFriendMsg(const Friend_SC_UpdateFriendMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Friend_SC_UpdateFriendMsg::SharedCtor() {
  _cached_size_ = 0;
  msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Friend_SC_UpdateFriendMsg::~Friend_SC_UpdateFriendMsg() {
  SharedDtor();
}

void Friend_SC_UpdateFriendMsg::SharedDtor() {
  if (this != default_instance_) {
    delete msg_;
  }
}

void Friend_SC_UpdateFriendMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Friend_SC_UpdateFriendMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Friend_SC_UpdateFriendMsg_descriptor_;
}

const Friend_SC_UpdateFriendMsg& Friend_SC_UpdateFriendMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

Friend_SC_UpdateFriendMsg* Friend_SC_UpdateFriendMsg::default_instance_ = NULL;

Friend_SC_UpdateFriendMsg* Friend_SC_UpdateFriendMsg::New() const {
  return new Friend_SC_UpdateFriendMsg;
}

void Friend_SC_UpdateFriendMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg()) {
      if (msg_ != NULL) msg_->::proto::message::ProtoFriendChatMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Friend_SC_UpdateFriendMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.message.ProtoFriendChatMsg msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Friend_SC_UpdateFriendMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .proto.message.ProtoFriendChatMsg msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Friend_SC_UpdateFriendMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .proto.message.ProtoFriendChatMsg msg = 1;
  if (has_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Friend_SC_UpdateFriendMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto.message.ProtoFriendChatMsg msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Friend_SC_UpdateFriendMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Friend_SC_UpdateFriendMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Friend_SC_UpdateFriendMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Friend_SC_UpdateFriendMsg::MergeFrom(const Friend_SC_UpdateFriendMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg()) {
      mutable_msg()->::proto::message::ProtoFriendChatMsg::MergeFrom(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Friend_SC_UpdateFriendMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Friend_SC_UpdateFriendMsg::CopyFrom(const Friend_SC_UpdateFriendMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Friend_SC_UpdateFriendMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_msg()) {
    if (!this->msg().IsInitialized()) return false;
  }
  return true;
}

void Friend_SC_UpdateFriendMsg::Swap(Friend_SC_UpdateFriendMsg* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Friend_SC_UpdateFriendMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Friend_SC_UpdateFriendMsg_descriptor_;
  metadata.reflection = Friend_SC_UpdateFriendMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Friend_SC_UpdateFriendInfo::kPlyInfoFieldNumber;
#endif  // !_MSC_VER

Friend_SC_UpdateFriendInfo::Friend_SC_UpdateFriendInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Friend_SC_UpdateFriendInfo::InitAsDefaultInstance() {
  plyinfo_ = const_cast< ::proto::message::ProtoPlyInfo*>(&::proto::message::ProtoPlyInfo::default_instance());
}

Friend_SC_UpdateFriendInfo::Friend_SC_UpdateFriendInfo(const Friend_SC_UpdateFriendInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Friend_SC_UpdateFriendInfo::SharedCtor() {
  _cached_size_ = 0;
  plyinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Friend_SC_UpdateFriendInfo::~Friend_SC_UpdateFriendInfo() {
  SharedDtor();
}

void Friend_SC_UpdateFriendInfo::SharedDtor() {
  if (this != default_instance_) {
    delete plyinfo_;
  }
}

void Friend_SC_UpdateFriendInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Friend_SC_UpdateFriendInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Friend_SC_UpdateFriendInfo_descriptor_;
}

const Friend_SC_UpdateFriendInfo& Friend_SC_UpdateFriendInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

Friend_SC_UpdateFriendInfo* Friend_SC_UpdateFriendInfo::default_instance_ = NULL;

Friend_SC_UpdateFriendInfo* Friend_SC_UpdateFriendInfo::New() const {
  return new Friend_SC_UpdateFriendInfo;
}

void Friend_SC_UpdateFriendInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_plyinfo()) {
      if (plyinfo_ != NULL) plyinfo_->::proto::message::ProtoPlyInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Friend_SC_UpdateFriendInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.message.ProtoPlyInfo plyInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_plyinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Friend_SC_UpdateFriendInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .proto.message.ProtoPlyInfo plyInfo = 1;
  if (has_plyinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->plyinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Friend_SC_UpdateFriendInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .proto.message.ProtoPlyInfo plyInfo = 1;
  if (has_plyinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->plyinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Friend_SC_UpdateFriendInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto.message.ProtoPlyInfo plyInfo = 1;
    if (has_plyinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->plyinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Friend_SC_UpdateFriendInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Friend_SC_UpdateFriendInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Friend_SC_UpdateFriendInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Friend_SC_UpdateFriendInfo::MergeFrom(const Friend_SC_UpdateFriendInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plyinfo()) {
      mutable_plyinfo()->::proto::message::ProtoPlyInfo::MergeFrom(from.plyinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Friend_SC_UpdateFriendInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Friend_SC_UpdateFriendInfo::CopyFrom(const Friend_SC_UpdateFriendInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Friend_SC_UpdateFriendInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_plyinfo()) {
    if (!this->plyinfo().IsInitialized()) return false;
  }
  return true;
}

void Friend_SC_UpdateFriendInfo::Swap(Friend_SC_UpdateFriendInfo* other) {
  if (other != this) {
    std::swap(plyinfo_, other->plyinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Friend_SC_UpdateFriendInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Friend_SC_UpdateFriendInfo_descriptor_;
  metadata.reflection = Friend_SC_UpdateFriendInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Friend_SC_NotifyFriendGift::kCharidFieldNumber;
const int Friend_SC_NotifyFriendGift::kGiftidFieldNumber;
const int Friend_SC_NotifyFriendGift::kUcountsFieldNumber;
#endif  // !_MSC_VER

Friend_SC_NotifyFriendGift::Friend_SC_NotifyFriendGift()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Friend_SC_NotifyFriendGift::InitAsDefaultInstance() {
}

Friend_SC_NotifyFriendGift::Friend_SC_NotifyFriendGift(const Friend_SC_NotifyFriendGift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Friend_SC_NotifyFriendGift::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  giftid_ = 0u;
  ucounts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Friend_SC_NotifyFriendGift::~Friend_SC_NotifyFriendGift() {
  SharedDtor();
}

void Friend_SC_NotifyFriendGift::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Friend_SC_NotifyFriendGift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Friend_SC_NotifyFriendGift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Friend_SC_NotifyFriendGift_descriptor_;
}

const Friend_SC_NotifyFriendGift& Friend_SC_NotifyFriendGift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

Friend_SC_NotifyFriendGift* Friend_SC_NotifyFriendGift::default_instance_ = NULL;

Friend_SC_NotifyFriendGift* Friend_SC_NotifyFriendGift::New() const {
  return new Friend_SC_NotifyFriendGift;
}

void Friend_SC_NotifyFriendGift::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
    giftid_ = 0u;
    ucounts_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Friend_SC_NotifyFriendGift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_giftid;
        break;
      }

      // optional uint32 giftid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_giftid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &giftid_)));
          set_has_giftid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ucounts;
        break;
      }

      // optional uint32 ucounts = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ucounts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ucounts_)));
          set_has_ucounts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Friend_SC_NotifyFriendGift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional uint32 giftid = 2;
  if (has_giftid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->giftid(), output);
  }

  // optional uint32 ucounts = 3;
  if (has_ucounts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ucounts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Friend_SC_NotifyFriendGift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional uint32 giftid = 2;
  if (has_giftid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->giftid(), target);
  }

  // optional uint32 ucounts = 3;
  if (has_ucounts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ucounts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Friend_SC_NotifyFriendGift::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 giftid = 2;
    if (has_giftid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->giftid());
    }

    // optional uint32 ucounts = 3;
    if (has_ucounts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ucounts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Friend_SC_NotifyFriendGift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Friend_SC_NotifyFriendGift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Friend_SC_NotifyFriendGift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Friend_SC_NotifyFriendGift::MergeFrom(const Friend_SC_NotifyFriendGift& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_giftid()) {
      set_giftid(from.giftid());
    }
    if (from.has_ucounts()) {
      set_ucounts(from.ucounts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Friend_SC_NotifyFriendGift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Friend_SC_NotifyFriendGift::CopyFrom(const Friend_SC_NotifyFriendGift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Friend_SC_NotifyFriendGift::IsInitialized() const {

  return true;
}

void Friend_SC_NotifyFriendGift::Swap(Friend_SC_NotifyFriendGift* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(giftid_, other->giftid_);
    std::swap(ucounts_, other->ucounts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Friend_SC_NotifyFriendGift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Friend_SC_NotifyFriendGift_descriptor_;
  metadata.reflection = Friend_SC_NotifyFriendGift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Friend_CS_RecommentFriend::Friend_CS_RecommentFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Friend_CS_RecommentFriend::InitAsDefaultInstance() {
}

Friend_CS_RecommentFriend::Friend_CS_RecommentFriend(const Friend_CS_RecommentFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Friend_CS_RecommentFriend::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Friend_CS_RecommentFriend::~Friend_CS_RecommentFriend() {
  SharedDtor();
}

void Friend_CS_RecommentFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Friend_CS_RecommentFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Friend_CS_RecommentFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Friend_CS_RecommentFriend_descriptor_;
}

const Friend_CS_RecommentFriend& Friend_CS_RecommentFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

Friend_CS_RecommentFriend* Friend_CS_RecommentFriend::default_instance_ = NULL;

Friend_CS_RecommentFriend* Friend_CS_RecommentFriend::New() const {
  return new Friend_CS_RecommentFriend;
}

void Friend_CS_RecommentFriend::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Friend_CS_RecommentFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Friend_CS_RecommentFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Friend_CS_RecommentFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Friend_CS_RecommentFriend::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Friend_CS_RecommentFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Friend_CS_RecommentFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Friend_CS_RecommentFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Friend_CS_RecommentFriend::MergeFrom(const Friend_CS_RecommentFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Friend_CS_RecommentFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Friend_CS_RecommentFriend::CopyFrom(const Friend_CS_RecommentFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Friend_CS_RecommentFriend::IsInitialized() const {

  return true;
}

void Friend_CS_RecommentFriend::Swap(Friend_CS_RecommentFriend* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Friend_CS_RecommentFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Friend_CS_RecommentFriend_descriptor_;
  metadata.reflection = Friend_CS_RecommentFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Friend_SC_RecommentFriend::kPlylistFieldNumber;
#endif  // !_MSC_VER

Friend_SC_RecommentFriend::Friend_SC_RecommentFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Friend_SC_RecommentFriend::InitAsDefaultInstance() {
}

Friend_SC_RecommentFriend::Friend_SC_RecommentFriend(const Friend_SC_RecommentFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Friend_SC_RecommentFriend::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Friend_SC_RecommentFriend::~Friend_SC_RecommentFriend() {
  SharedDtor();
}

void Friend_SC_RecommentFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Friend_SC_RecommentFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Friend_SC_RecommentFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Friend_SC_RecommentFriend_descriptor_;
}

const Friend_SC_RecommentFriend& Friend_SC_RecommentFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

Friend_SC_RecommentFriend* Friend_SC_RecommentFriend::default_instance_ = NULL;

Friend_SC_RecommentFriend* Friend_SC_RecommentFriend::New() const {
  return new Friend_SC_RecommentFriend;
}

void Friend_SC_RecommentFriend::Clear() {
  plylist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Friend_SC_RecommentFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.ProtoPlyInfo plylist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_plylist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_plylist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_plylist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Friend_SC_RecommentFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.ProtoPlyInfo plylist = 1;
  for (int i = 0; i < this->plylist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->plylist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Friend_SC_RecommentFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.ProtoPlyInfo plylist = 1;
  for (int i = 0; i < this->plylist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->plylist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Friend_SC_RecommentFriend::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.ProtoPlyInfo plylist = 1;
  total_size += 1 * this->plylist_size();
  for (int i = 0; i < this->plylist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->plylist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Friend_SC_RecommentFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Friend_SC_RecommentFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Friend_SC_RecommentFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Friend_SC_RecommentFriend::MergeFrom(const Friend_SC_RecommentFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  plylist_.MergeFrom(from.plylist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Friend_SC_RecommentFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Friend_SC_RecommentFriend::CopyFrom(const Friend_SC_RecommentFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Friend_SC_RecommentFriend::IsInitialized() const {

  for (int i = 0; i < plylist_size(); i++) {
    if (!this->plylist(i).IsInitialized()) return false;
  }
  return true;
}

void Friend_SC_RecommentFriend::Swap(Friend_SC_RecommentFriend* other) {
  if (other != this) {
    plylist_.Swap(&other->plylist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Friend_SC_RecommentFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Friend_SC_RecommentFriend_descriptor_;
  metadata.reflection = Friend_SC_RecommentFriend_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

// @@protoc_insertion_point(global_scope)
