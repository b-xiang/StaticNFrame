// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db_achieve.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "db_achieve.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

namespace {

const ::google::protobuf::Descriptor* DBAchieveInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBAchieveInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_db_5fachieve_2eproto() {
  protobuf_AddDesc_db_5fachieve_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "db_achieve.proto");
  GOOGLE_CHECK(file != NULL);
  DBAchieveInfo_descriptor_ = file->message_type(0);
  static const int DBAchieveInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAchieveInfo, achieve_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAchieveInfo, achieve_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAchieveInfo, achieve_pt_id_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAchieveInfo, cup_id_),
  };
  DBAchieveInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBAchieveInfo_descriptor_,
      DBAchieveInfo::default_instance_,
      DBAchieveInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAchieveInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAchieveInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBAchieveInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_db_5fachieve_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBAchieveInfo_descriptor_, &DBAchieveInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_db_5fachieve_2eproto() {
  delete DBAchieveInfo::default_instance_;
  delete DBAchieveInfo_reflection_;
}

void protobuf_AddDesc_db_5fachieve_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::message::protobuf_AddDesc_achieve_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020db_achieve.proto\022\rproto.message\032\rachie"
    "ve.proto\"\205\001\n\rDBAchieveInfo\022\026\n\016achieve_po"
    "ints\030\001 \001(\005\0220\n\014achieve_list\030\002 \003(\0132\032.proto"
    ".message.AchieveInfo\022\032\n\022achieve_pt_id_li"
    "st\030\003 \003(\005\022\016\n\006cup_id\030\004 \001(\rB\017\n\rproto.messag"
    "e", 201);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "db_achieve.proto", &protobuf_RegisterTypes);
  DBAchieveInfo::default_instance_ = new DBAchieveInfo();
  DBAchieveInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_db_5fachieve_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_db_5fachieve_2eproto {
  StaticDescriptorInitializer_db_5fachieve_2eproto() {
    protobuf_AddDesc_db_5fachieve_2eproto();
  }
} static_descriptor_initializer_db_5fachieve_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int DBAchieveInfo::kAchievePointsFieldNumber;
const int DBAchieveInfo::kAchieveListFieldNumber;
const int DBAchieveInfo::kAchievePtIdListFieldNumber;
const int DBAchieveInfo::kCupIdFieldNumber;
#endif  // !_MSC_VER

DBAchieveInfo::DBAchieveInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DBAchieveInfo::InitAsDefaultInstance() {
}

DBAchieveInfo::DBAchieveInfo(const DBAchieveInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DBAchieveInfo::SharedCtor() {
  _cached_size_ = 0;
  achieve_points_ = 0;
  cup_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBAchieveInfo::~DBAchieveInfo() {
  SharedDtor();
}

void DBAchieveInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBAchieveInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBAchieveInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBAchieveInfo_descriptor_;
}

const DBAchieveInfo& DBAchieveInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5fachieve_2eproto();
  return *default_instance_;
}

DBAchieveInfo* DBAchieveInfo::default_instance_ = NULL;

DBAchieveInfo* DBAchieveInfo::New() const {
  return new DBAchieveInfo;
}

void DBAchieveInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    achieve_points_ = 0;
    cup_id_ = 0u;
  }
  achieve_list_.Clear();
  achieve_pt_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBAchieveInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 achieve_points = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &achieve_points_)));
          set_has_achieve_points();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_achieve_list;
        break;
      }

      // repeated .proto.message.AchieveInfo achieve_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_achieve_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_achieve_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_achieve_list;
        if (input->ExpectTag(24)) goto parse_achieve_pt_id_list;
        break;
      }

      // repeated int32 achieve_pt_id_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_achieve_pt_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_achieve_pt_id_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_achieve_pt_id_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_achieve_pt_id_list;
        if (input->ExpectTag(32)) goto parse_cup_id;
        break;
      }

      // optional uint32 cup_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cup_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cup_id_)));
          set_has_cup_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DBAchieveInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 achieve_points = 1;
  if (has_achieve_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->achieve_points(), output);
  }

  // repeated .proto.message.AchieveInfo achieve_list = 2;
  for (int i = 0; i < this->achieve_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->achieve_list(i), output);
  }

  // repeated int32 achieve_pt_id_list = 3;
  for (int i = 0; i < this->achieve_pt_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->achieve_pt_id_list(i), output);
  }

  // optional uint32 cup_id = 4;
  if (has_cup_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cup_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DBAchieveInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 achieve_points = 1;
  if (has_achieve_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->achieve_points(), target);
  }

  // repeated .proto.message.AchieveInfo achieve_list = 2;
  for (int i = 0; i < this->achieve_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->achieve_list(i), target);
  }

  // repeated int32 achieve_pt_id_list = 3;
  for (int i = 0; i < this->achieve_pt_id_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->achieve_pt_id_list(i), target);
  }

  // optional uint32 cup_id = 4;
  if (has_cup_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cup_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DBAchieveInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 achieve_points = 1;
    if (has_achieve_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->achieve_points());
    }

    // optional uint32 cup_id = 4;
    if (has_cup_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cup_id());
    }

  }
  // repeated .proto.message.AchieveInfo achieve_list = 2;
  total_size += 1 * this->achieve_list_size();
  for (int i = 0; i < this->achieve_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->achieve_list(i));
  }

  // repeated int32 achieve_pt_id_list = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->achieve_pt_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->achieve_pt_id_list(i));
    }
    total_size += 1 * this->achieve_pt_id_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBAchieveInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBAchieveInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBAchieveInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBAchieveInfo::MergeFrom(const DBAchieveInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  achieve_list_.MergeFrom(from.achieve_list_);
  achieve_pt_id_list_.MergeFrom(from.achieve_pt_id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_achieve_points()) {
      set_achieve_points(from.achieve_points());
    }
    if (from.has_cup_id()) {
      set_cup_id(from.cup_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBAchieveInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBAchieveInfo::CopyFrom(const DBAchieveInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBAchieveInfo::IsInitialized() const {

  return true;
}

void DBAchieveInfo::Swap(DBAchieveInfo* other) {
  if (other != this) {
    std::swap(achieve_points_, other->achieve_points_);
    achieve_list_.Swap(&other->achieve_list_);
    achieve_pt_id_list_.Swap(&other->achieve_pt_id_list_);
    std::swap(cup_id_, other->cup_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBAchieveInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBAchieveInfo_descriptor_;
  metadata.reflection = DBAchieveInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

// @@protoc_insertion_point(global_scope)
