// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: guild.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "guild.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

namespace {

const ::google::protobuf::Descriptor* KickoutInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KickoutInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildListInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildListInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildShopInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildShopInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestHelpInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestHelpInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImpeachInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImpeachInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BossDamage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BossDamage_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildBoss_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildBoss_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecordData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecordData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MixGuildData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MixGuildData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MixMemberDate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MixMemberDate_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMemberData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMemberData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MemberListInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemberListInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UniteGuildData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UniteGuildData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildUsedName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildUsedName_reflection_ = NULL;
const ::google::protobuf::Descriptor* GUsedName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GUsedName_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqGuildList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_CS_ReqGuildList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_SC_AckGuildList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_SC_AckGuildList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqCreate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_CS_ReqCreate_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_SC_AckCreate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_SC_AckCreate_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqJoin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_CS_ReqJoin_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_SC_AckJoin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_SC_AckJoin_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqQuickJoin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_CS_ReqQuickJoin_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_SC_AckQuickJoin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_SC_AckQuickJoin_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqFind_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_CS_ReqFind_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_SC_AckFind_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_SC_AckFind_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqGuildInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_CS_ReqGuildInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_SC_AckGuildInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_SC_AckGuildInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqMemberInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_CS_ReqMemberInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_SC_AckMemberInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_SC_AckMemberInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqMemberList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_CS_ReqMemberList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_SC_AckMemberList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_SC_AckMemberList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqQuit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_CS_ReqQuit_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_SC_AckQuit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_SC_AckQuit_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqSetJoin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_CS_ReqSetJoin_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_SC_AckSetJoin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_SC_AckSetJoin_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqJoinList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_CS_ReqJoinList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_SC_AckJoinList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_SC_AckJoinList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqOpreatJoiniList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_CS_ReqOpreatJoiniList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_SC_AckOpreatJoiniList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_SC_AckOpreatJoiniList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqKickOut_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_CS_ReqKickOut_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_SC_AckKickOut_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_SC_AckKickOut_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqAppointment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_CS_ReqAppointment_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_SC_AckAppointment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_SC_AckAppointment_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqSetGuildPlacard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_CS_ReqSetGuildPlacard_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_SC_AckSetGuildPlacard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_SC_AckSetGuildPlacard_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqSetRefrishMultiple_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_CS_ReqSetRefrishMultiple_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_SC_AckSetRefrishMultiple_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_SC_AckSetRefrishMultiple_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqIncreaseBuilding_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_CS_ReqIncreaseBuilding_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_SC_AckIncreaseBuilding_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_SC_AckIncreaseBuilding_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqDonate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_CS_ReqDonate_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_SC_AckDonate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_SC_AckDonate_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqGetWages_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_CS_ReqGetWages_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_SC_AckGetWages_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_SC_AckGetWages_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqImpeachInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_CS_ReqImpeachInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_SC_AckImpeachInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_SC_AckImpeachInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqImpeachment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_CS_ReqImpeachment_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_SC_AckImpeachment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_SC_AckImpeachment_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqCancelImpeachment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_CS_ReqCancelImpeachment_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_SC_AckCancelImpeachment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_SC_AckCancelImpeachment_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_CS_ReqResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_SC_AckResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_SC_AckResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqMergeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_CS_ReqMergeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_SC_AckMergeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_SC_AckMergeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqMergeGuild_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_CS_ReqMergeGuild_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_SC_AckMergeGuild_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_SC_AckMergeGuild_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqMergeGuildList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_CS_ReqMergeGuildList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_SC_AckMergeGuildList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_SC_AckMergeGuildList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqOpreatMergeList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_CS_ReqOpreatMergeList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_SC_AckOpreatMergeList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_SC_AckOpreatMergeList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqClearMergeList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_CS_ReqClearMergeList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_SC_AckClearMergeList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_SC_AckClearMergeList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqCancelMerge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_CS_ReqCancelMerge_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_SC_AckCancelMerge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_SC_AckCancelMerge_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqShopInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_CS_ReqShopInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_SC_AckShopInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_SC_AckShopInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqBuyShopItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_CS_ReqBuyShopItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_SC_AckBuyShopItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_SC_AckBuyShopItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqChangeName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_CS_ReqChangeName_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_SC_AckChangeName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_SC_AckChangeName_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_SC_NotifyUpdateGuildInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_SC_NotifyUpdateGuildInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqEnterFort_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_CS_ReqEnterFort_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_SC_AckEnterFort_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_SC_AckEnterFort_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_CS_EnterFortSuccess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_CS_EnterFortSuccess_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqCancelJoin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_CS_ReqCancelJoin_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_SC_AckCancelJoin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_SC_AckCancelJoin_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqEnterGuildIntruder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_CS_ReqEnterGuildIntruder_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqEnterGuildIntruderOK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_CS_ReqEnterGuildIntruderOK_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqLeaveGuildIntruder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_CS_ReqLeaveGuildIntruder_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_SC_AckEnterGuildIntruder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_SC_AckEnterGuildIntruder_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_SC_AckGuildIntruderEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_SC_AckGuildIntruderEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_SC_AckGuildIntruderInit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_SC_AckGuildIntruderInit_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_SC_AckGuildIntruderTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_SC_AckGuildIntruderTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_SC_GuildIntruderReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_SC_GuildIntruderReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_SC_NotifyStopImpeachment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_SC_NotifyStopImpeachment_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_SC_NotifyContext_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_SC_NotifyContext_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqSetBossOpen_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_CS_ReqSetBossOpen_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_SC_AckBossInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_SC_AckBossInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_SC_NotifyBossDie_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_SC_NotifyBossDie_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqInvitePlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_CS_ReqInvitePlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_SC_AckInvitePlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_SC_AckInvitePlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_SC_NotifyInvitePlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_SC_NotifyInvitePlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqInviteJoin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_CS_ReqInviteJoin_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_SC_AckInviteJoin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_SC_AckInviteJoin_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqGuildWarehouse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_CS_ReqGuildWarehouse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_SC_AckGuildWarehouse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_SC_AckGuildWarehouse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqDonateEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_CS_ReqDonateEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqConversionEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_CS_ReqConversionEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqDelGuildEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_CS_ReqDelGuildEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMSG_SC_AckGuildEquipRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMSG_SC_AckGuildEquipRecord_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* eOffice_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ePurview_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eNotifyType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_guild_2eproto() {
  protobuf_AddDesc_guild_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "guild.proto");
  GOOGLE_CHECK(file != NULL);
  KickoutInfo_descriptor_ = file->message_type(0);
  static const int KickoutInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickoutInfo, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickoutInfo, outtimes_),
  };
  KickoutInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KickoutInfo_descriptor_,
      KickoutInfo::default_instance_,
      KickoutInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickoutInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickoutInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KickoutInfo));
  GuildListInfo_descriptor_ = file->message_type(1);
  static const int GuildListInfo_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildListInfo, rangking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildListInfo, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildListInfo, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildListInfo, guildlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildListInfo, guildmember_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildListInfo, guilddeclaration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildListInfo, ownername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildListInfo, guildthrive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildListInfo, joincombat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildListInfo, canjoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildListInfo, isreqjoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildListInfo, isaudit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildListInfo, kickinfolist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildListInfo, ownerid_),
  };
  GuildListInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildListInfo_descriptor_,
      GuildListInfo::default_instance_,
      GuildListInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildListInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildListInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildListInfo));
  ReqInfo_descriptor_ = file->message_type(2);
  static const int ReqInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqInfo, strname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqInfo, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqInfo, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqInfo, combatvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqInfo, dhlev_),
  };
  ReqInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqInfo_descriptor_,
      ReqInfo::default_instance_,
      ReqInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqInfo));
  GuildShopInfo_descriptor_ = file->message_type(3);
  static const int GuildShopInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildShopInfo, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildShopInfo, counts_),
  };
  GuildShopInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildShopInfo_descriptor_,
      GuildShopInfo::default_instance_,
      GuildShopInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildShopInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildShopInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildShopInfo));
  QuestHelpInfo_descriptor_ = file->message_type(4);
  static const int QuestHelpInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestHelpInfo, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestHelpInfo, questid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestHelpInfo, loopnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestHelpInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestHelpInfo, helperid_),
  };
  QuestHelpInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestHelpInfo_descriptor_,
      QuestHelpInfo::default_instance_,
      QuestHelpInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestHelpInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestHelpInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestHelpInfo));
  ImpeachInfo_descriptor_ = file->message_type(5);
  static const int ImpeachInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImpeachInfo, impeachtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImpeachInfo, impeachid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImpeachInfo, impeachname_),
  };
  ImpeachInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImpeachInfo_descriptor_,
      ImpeachInfo::default_instance_,
      ImpeachInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImpeachInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImpeachInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImpeachInfo));
  BossDamage_descriptor_ = file->message_type(6);
  static const int BossDamage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDamage, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDamage, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDamage, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDamage, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDamage, job_),
  };
  BossDamage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BossDamage_descriptor_,
      BossDamage::default_instance_,
      BossDamage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDamage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDamage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BossDamage));
  GuildBoss_descriptor_ = file->message_type(7);
  static const int GuildBoss_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBoss, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBoss, hppercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBoss, starttimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBoss, resettime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBoss, rewordlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBoss, ranklist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBoss, guildlev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBoss, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBoss, fightime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBoss, changecounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBoss, dfhour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBoss, dfminu_),
  };
  GuildBoss_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildBoss_descriptor_,
      GuildBoss::default_instance_,
      GuildBoss_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBoss, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBoss, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildBoss));
  RecordData_descriptor_ = file->message_type(8);
  static const int RecordData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordData, equipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordData, time_),
  };
  RecordData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecordData_descriptor_,
      RecordData::default_instance_,
      RecordData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecordData));
  MixGuildData_descriptor_ = file->message_type(9);
  static const int MixGuildData_offsets_[27] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixGuildData, levuptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixGuildData, ownerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixGuildData, guildplacard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixGuildData, canjoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixGuildData, joincombat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixGuildData, resources_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixGuildData, buildlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixGuildData, reqlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixGuildData, shopinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixGuildData, refrishmultiple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixGuildData, refrishtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixGuildData, kickinfolist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixGuildData, weekmissioncounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixGuildData, onlinecounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixGuildData, helpinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixGuildData, isaudit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixGuildData, impinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixGuildData, guilddeclaration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixGuildData, lastcosttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixGuildData, boomtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixGuildData, settlementtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixGuildData, bossinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixGuildData, maxitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixGuildData, guildequip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixGuildData, buygridcounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixGuildData, depositlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixGuildData, fetchlist_),
  };
  MixGuildData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MixGuildData_descriptor_,
      MixGuildData::default_instance_,
      MixGuildData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixGuildData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixGuildData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MixGuildData));
  GuildData_descriptor_ = file->message_type(10);
  static const int GuildData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildData, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildData, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildData, guildlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildData, ownername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildData, prosperity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildData, mixinfo_),
  };
  GuildData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildData_descriptor_,
      GuildData::default_instance_,
      GuildData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildData));
  MixMemberDate_descriptor_ = file->message_type(11);
  static const int MixMemberDate_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixMemberDate, getwagetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixMemberDate, jointime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixMemberDate, offlinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixMemberDate, buyitemtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixMemberDate, buyitemcounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixMemberDate, pendingwage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixMemberDate, currbasewage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixMemberDate, accumulated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixMemberDate, weekcontribution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixMemberDate, landbattlecounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixMemberDate, navalbattlecounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixMemberDate, impeachmenttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixMemberDate, combatvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixMemberDate, alivevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixMemberDate, donate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixMemberDate, tbrewardlist_),
  };
  MixMemberDate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MixMemberDate_descriptor_,
      MixMemberDate::default_instance_,
      MixMemberDate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixMemberDate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixMemberDate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MixMemberDate));
  GuildMemberData_descriptor_ = file->message_type(12);
  static const int GuildMemberData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberData, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberData, strname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberData, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberData, guildoffice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberData, guildmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberData, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberData, mixinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberData, dhlev_),
  };
  GuildMemberData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMemberData_descriptor_,
      GuildMemberData::default_instance_,
      GuildMemberData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMemberData));
  MemberListInfo_descriptor_ = file->message_type(13);
  static const int MemberListInfo_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberListInfo, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberListInfo, strname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberListInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberListInfo, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberListInfo, guildoffice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberListInfo, jointime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberListInfo, offlinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberListInfo, accumulated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberListInfo, weekcontribution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberListInfo, landbattlecounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberListInfo, navalbattlecounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberListInfo, isonline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberListInfo, combatvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberListInfo, dhlev_),
  };
  MemberListInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemberListInfo_descriptor_,
      MemberListInfo::default_instance_,
      MemberListInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberListInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberListInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemberListInfo));
  UniteGuildData_descriptor_ = file->message_type(14);
  static const int UniteGuildData_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniteGuildData, ranking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniteGuildData, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniteGuildData, reqplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniteGuildData, reqguildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniteGuildData, guildlev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniteGuildData, membernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniteGuildData, ackguildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniteGuildData, ackplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniteGuildData, ackguildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniteGuildData, whomaster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniteGuildData, endtime_),
  };
  UniteGuildData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UniteGuildData_descriptor_,
      UniteGuildData::default_instance_,
      UniteGuildData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniteGuildData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniteGuildData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UniteGuildData));
  GuildUsedName_descriptor_ = file->message_type(15);
  static const int GuildUsedName_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildUsedName, guildusedname_),
  };
  GuildUsedName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildUsedName_descriptor_,
      GuildUsedName::default_instance_,
      GuildUsedName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildUsedName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildUsedName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildUsedName));
  GUsedName_descriptor_ = file->message_type(16);
  static const int GUsedName_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUsedName, guildusedname_),
  };
  GUsedName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GUsedName_descriptor_,
      GUsedName::default_instance_,
      GUsedName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUsedName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUsedName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GUsedName));
  GuildMSG_CS_ReqGuildList_descriptor_ = file->message_type(17);
  static const int GuildMSG_CS_ReqGuildList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqGuildList, pagenum_),
  };
  GuildMSG_CS_ReqGuildList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_CS_ReqGuildList_descriptor_,
      GuildMSG_CS_ReqGuildList::default_instance_,
      GuildMSG_CS_ReqGuildList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqGuildList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqGuildList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_CS_ReqGuildList));
  GuildMSG_SC_AckGuildList_descriptor_ = file->message_type(18);
  static const int GuildMSG_SC_AckGuildList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckGuildList, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckGuildList, infolist_),
  };
  GuildMSG_SC_AckGuildList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_SC_AckGuildList_descriptor_,
      GuildMSG_SC_AckGuildList::default_instance_,
      GuildMSG_SC_AckGuildList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckGuildList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckGuildList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_SC_AckGuildList));
  GuildMSG_CS_ReqCreate_descriptor_ = file->message_type(19);
  static const int GuildMSG_CS_ReqCreate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqCreate, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqCreate, guilddeclaration_),
  };
  GuildMSG_CS_ReqCreate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_CS_ReqCreate_descriptor_,
      GuildMSG_CS_ReqCreate::default_instance_,
      GuildMSG_CS_ReqCreate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqCreate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqCreate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_CS_ReqCreate));
  GuildMSG_SC_AckCreate_descriptor_ = file->message_type(20);
  static const int GuildMSG_SC_AckCreate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckCreate, reslut_),
  };
  GuildMSG_SC_AckCreate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_SC_AckCreate_descriptor_,
      GuildMSG_SC_AckCreate::default_instance_,
      GuildMSG_SC_AckCreate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckCreate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckCreate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_SC_AckCreate));
  GuildMSG_CS_ReqJoin_descriptor_ = file->message_type(21);
  static const int GuildMSG_CS_ReqJoin_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqJoin, guildid_),
  };
  GuildMSG_CS_ReqJoin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_CS_ReqJoin_descriptor_,
      GuildMSG_CS_ReqJoin::default_instance_,
      GuildMSG_CS_ReqJoin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqJoin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqJoin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_CS_ReqJoin));
  GuildMSG_SC_AckJoin_descriptor_ = file->message_type(22);
  static const int GuildMSG_SC_AckJoin_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckJoin, reslut_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckJoin, timesup_),
  };
  GuildMSG_SC_AckJoin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_SC_AckJoin_descriptor_,
      GuildMSG_SC_AckJoin::default_instance_,
      GuildMSG_SC_AckJoin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckJoin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckJoin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_SC_AckJoin));
  GuildMSG_CS_ReqQuickJoin_descriptor_ = file->message_type(23);
  static const int GuildMSG_CS_ReqQuickJoin_offsets_[1] = {
  };
  GuildMSG_CS_ReqQuickJoin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_CS_ReqQuickJoin_descriptor_,
      GuildMSG_CS_ReqQuickJoin::default_instance_,
      GuildMSG_CS_ReqQuickJoin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqQuickJoin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqQuickJoin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_CS_ReqQuickJoin));
  GuildMSG_SC_AckQuickJoin_descriptor_ = file->message_type(24);
  static const int GuildMSG_SC_AckQuickJoin_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckQuickJoin, reslut_),
  };
  GuildMSG_SC_AckQuickJoin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_SC_AckQuickJoin_descriptor_,
      GuildMSG_SC_AckQuickJoin::default_instance_,
      GuildMSG_SC_AckQuickJoin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckQuickJoin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckQuickJoin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_SC_AckQuickJoin));
  GuildMSG_CS_ReqFind_descriptor_ = file->message_type(25);
  static const int GuildMSG_CS_ReqFind_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqFind, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqFind, guildid_),
  };
  GuildMSG_CS_ReqFind_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_CS_ReqFind_descriptor_,
      GuildMSG_CS_ReqFind::default_instance_,
      GuildMSG_CS_ReqFind_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqFind, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqFind, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_CS_ReqFind));
  GuildMSG_SC_AckFind_descriptor_ = file->message_type(26);
  static const int GuildMSG_SC_AckFind_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckFind, counts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckFind, infolist_),
  };
  GuildMSG_SC_AckFind_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_SC_AckFind_descriptor_,
      GuildMSG_SC_AckFind::default_instance_,
      GuildMSG_SC_AckFind_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckFind, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckFind, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_SC_AckFind));
  GuildMSG_CS_ReqGuildInfo_descriptor_ = file->message_type(27);
  static const int GuildMSG_CS_ReqGuildInfo_offsets_[1] = {
  };
  GuildMSG_CS_ReqGuildInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_CS_ReqGuildInfo_descriptor_,
      GuildMSG_CS_ReqGuildInfo::default_instance_,
      GuildMSG_CS_ReqGuildInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqGuildInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqGuildInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_CS_ReqGuildInfo));
  GuildMSG_SC_AckGuildInfo_descriptor_ = file->message_type(28);
  static const int GuildMSG_SC_AckGuildInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckGuildInfo, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckGuildInfo, membercounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckGuildInfo, rangking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckGuildInfo, guildinfo_),
  };
  GuildMSG_SC_AckGuildInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_SC_AckGuildInfo_descriptor_,
      GuildMSG_SC_AckGuildInfo::default_instance_,
      GuildMSG_SC_AckGuildInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckGuildInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckGuildInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_SC_AckGuildInfo));
  GuildMSG_CS_ReqMemberInfo_descriptor_ = file->message_type(29);
  static const int GuildMSG_CS_ReqMemberInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqMemberInfo, playerid_),
  };
  GuildMSG_CS_ReqMemberInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_CS_ReqMemberInfo_descriptor_,
      GuildMSG_CS_ReqMemberInfo::default_instance_,
      GuildMSG_CS_ReqMemberInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqMemberInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqMemberInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_CS_ReqMemberInfo));
  GuildMSG_SC_AckMemberInfo_descriptor_ = file->message_type(30);
  static const int GuildMSG_SC_AckMemberInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckMemberInfo, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckMemberInfo, memberinfo_),
  };
  GuildMSG_SC_AckMemberInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_SC_AckMemberInfo_descriptor_,
      GuildMSG_SC_AckMemberInfo::default_instance_,
      GuildMSG_SC_AckMemberInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckMemberInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckMemberInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_SC_AckMemberInfo));
  GuildMSG_CS_ReqMemberList_descriptor_ = file->message_type(31);
  static const int GuildMSG_CS_ReqMemberList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqMemberList, pagenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqMemberList, isinteam_),
  };
  GuildMSG_CS_ReqMemberList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_CS_ReqMemberList_descriptor_,
      GuildMSG_CS_ReqMemberList::default_instance_,
      GuildMSG_CS_ReqMemberList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqMemberList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqMemberList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_CS_ReqMemberList));
  GuildMSG_SC_AckMemberList_descriptor_ = file->message_type(32);
  static const int GuildMSG_SC_AckMemberList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckMemberList, pagenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckMemberList, memberinfo_),
  };
  GuildMSG_SC_AckMemberList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_SC_AckMemberList_descriptor_,
      GuildMSG_SC_AckMemberList::default_instance_,
      GuildMSG_SC_AckMemberList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckMemberList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckMemberList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_SC_AckMemberList));
  GuildMSG_CS_ReqQuit_descriptor_ = file->message_type(33);
  static const int GuildMSG_CS_ReqQuit_offsets_[1] = {
  };
  GuildMSG_CS_ReqQuit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_CS_ReqQuit_descriptor_,
      GuildMSG_CS_ReqQuit::default_instance_,
      GuildMSG_CS_ReqQuit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqQuit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqQuit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_CS_ReqQuit));
  GuildMSG_SC_AckQuit_descriptor_ = file->message_type(34);
  static const int GuildMSG_SC_AckQuit_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckQuit, result_),
  };
  GuildMSG_SC_AckQuit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_SC_AckQuit_descriptor_,
      GuildMSG_SC_AckQuit::default_instance_,
      GuildMSG_SC_AckQuit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckQuit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckQuit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_SC_AckQuit));
  GuildMSG_CS_ReqSetJoin_descriptor_ = file->message_type(35);
  static const int GuildMSG_CS_ReqSetJoin_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqSetJoin, isopen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqSetJoin, joincombatser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqSetJoin, isaudit_),
  };
  GuildMSG_CS_ReqSetJoin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_CS_ReqSetJoin_descriptor_,
      GuildMSG_CS_ReqSetJoin::default_instance_,
      GuildMSG_CS_ReqSetJoin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqSetJoin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqSetJoin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_CS_ReqSetJoin));
  GuildMSG_SC_AckSetJoin_descriptor_ = file->message_type(36);
  static const int GuildMSG_SC_AckSetJoin_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckSetJoin, result_),
  };
  GuildMSG_SC_AckSetJoin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_SC_AckSetJoin_descriptor_,
      GuildMSG_SC_AckSetJoin::default_instance_,
      GuildMSG_SC_AckSetJoin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckSetJoin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckSetJoin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_SC_AckSetJoin));
  GuildMSG_CS_ReqJoinList_descriptor_ = file->message_type(37);
  static const int GuildMSG_CS_ReqJoinList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqJoinList, pagenum_),
  };
  GuildMSG_CS_ReqJoinList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_CS_ReqJoinList_descriptor_,
      GuildMSG_CS_ReqJoinList::default_instance_,
      GuildMSG_CS_ReqJoinList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqJoinList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqJoinList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_CS_ReqJoinList));
  GuildMSG_SC_AckJoinList_descriptor_ = file->message_type(38);
  static const int GuildMSG_SC_AckJoinList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckJoinList, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckJoinList, infolist_),
  };
  GuildMSG_SC_AckJoinList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_SC_AckJoinList_descriptor_,
      GuildMSG_SC_AckJoinList::default_instance_,
      GuildMSG_SC_AckJoinList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckJoinList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckJoinList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_SC_AckJoinList));
  GuildMSG_CS_ReqOpreatJoiniList_descriptor_ = file->message_type(39);
  static const int GuildMSG_CS_ReqOpreatJoiniList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqOpreatJoiniList, isdel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqOpreatJoiniList, allopreate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqOpreatJoiniList, playeridlist_),
  };
  GuildMSG_CS_ReqOpreatJoiniList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_CS_ReqOpreatJoiniList_descriptor_,
      GuildMSG_CS_ReqOpreatJoiniList::default_instance_,
      GuildMSG_CS_ReqOpreatJoiniList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqOpreatJoiniList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqOpreatJoiniList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_CS_ReqOpreatJoiniList));
  GuildMSG_SC_AckOpreatJoiniList_descriptor_ = file->message_type(40);
  static const int GuildMSG_SC_AckOpreatJoiniList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckOpreatJoiniList, result_),
  };
  GuildMSG_SC_AckOpreatJoiniList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_SC_AckOpreatJoiniList_descriptor_,
      GuildMSG_SC_AckOpreatJoiniList::default_instance_,
      GuildMSG_SC_AckOpreatJoiniList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckOpreatJoiniList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckOpreatJoiniList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_SC_AckOpreatJoiniList));
  GuildMSG_CS_ReqKickOut_descriptor_ = file->message_type(41);
  static const int GuildMSG_CS_ReqKickOut_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqKickOut, playerid_),
  };
  GuildMSG_CS_ReqKickOut_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_CS_ReqKickOut_descriptor_,
      GuildMSG_CS_ReqKickOut::default_instance_,
      GuildMSG_CS_ReqKickOut_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqKickOut, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqKickOut, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_CS_ReqKickOut));
  GuildMSG_SC_AckKickOut_descriptor_ = file->message_type(42);
  static const int GuildMSG_SC_AckKickOut_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckKickOut, result_),
  };
  GuildMSG_SC_AckKickOut_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_SC_AckKickOut_descriptor_,
      GuildMSG_SC_AckKickOut::default_instance_,
      GuildMSG_SC_AckKickOut_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckKickOut, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckKickOut, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_SC_AckKickOut));
  GuildMSG_CS_ReqAppointment_descriptor_ = file->message_type(43);
  static const int GuildMSG_CS_ReqAppointment_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqAppointment, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqAppointment, office_),
  };
  GuildMSG_CS_ReqAppointment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_CS_ReqAppointment_descriptor_,
      GuildMSG_CS_ReqAppointment::default_instance_,
      GuildMSG_CS_ReqAppointment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqAppointment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqAppointment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_CS_ReqAppointment));
  GuildMSG_SC_AckAppointment_descriptor_ = file->message_type(44);
  static const int GuildMSG_SC_AckAppointment_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckAppointment, result_),
  };
  GuildMSG_SC_AckAppointment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_SC_AckAppointment_descriptor_,
      GuildMSG_SC_AckAppointment::default_instance_,
      GuildMSG_SC_AckAppointment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckAppointment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckAppointment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_SC_AckAppointment));
  GuildMSG_CS_ReqSetGuildPlacard_descriptor_ = file->message_type(45);
  static const int GuildMSG_CS_ReqSetGuildPlacard_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqSetGuildPlacard, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqSetGuildPlacard, context_),
  };
  GuildMSG_CS_ReqSetGuildPlacard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_CS_ReqSetGuildPlacard_descriptor_,
      GuildMSG_CS_ReqSetGuildPlacard::default_instance_,
      GuildMSG_CS_ReqSetGuildPlacard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqSetGuildPlacard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqSetGuildPlacard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_CS_ReqSetGuildPlacard));
  GuildMSG_SC_AckSetGuildPlacard_descriptor_ = file->message_type(46);
  static const int GuildMSG_SC_AckSetGuildPlacard_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckSetGuildPlacard, result_),
  };
  GuildMSG_SC_AckSetGuildPlacard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_SC_AckSetGuildPlacard_descriptor_,
      GuildMSG_SC_AckSetGuildPlacard::default_instance_,
      GuildMSG_SC_AckSetGuildPlacard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckSetGuildPlacard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckSetGuildPlacard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_SC_AckSetGuildPlacard));
  GuildMSG_CS_ReqSetRefrishMultiple_descriptor_ = file->message_type(47);
  static const int GuildMSG_CS_ReqSetRefrishMultiple_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqSetRefrishMultiple, multiple_),
  };
  GuildMSG_CS_ReqSetRefrishMultiple_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_CS_ReqSetRefrishMultiple_descriptor_,
      GuildMSG_CS_ReqSetRefrishMultiple::default_instance_,
      GuildMSG_CS_ReqSetRefrishMultiple_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqSetRefrishMultiple, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqSetRefrishMultiple, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_CS_ReqSetRefrishMultiple));
  GuildMSG_SC_AckSetRefrishMultiple_descriptor_ = file->message_type(48);
  static const int GuildMSG_SC_AckSetRefrishMultiple_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckSetRefrishMultiple, result_),
  };
  GuildMSG_SC_AckSetRefrishMultiple_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_SC_AckSetRefrishMultiple_descriptor_,
      GuildMSG_SC_AckSetRefrishMultiple::default_instance_,
      GuildMSG_SC_AckSetRefrishMultiple_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckSetRefrishMultiple, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckSetRefrishMultiple, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_SC_AckSetRefrishMultiple));
  GuildMSG_CS_ReqIncreaseBuilding_descriptor_ = file->message_type(49);
  static const int GuildMSG_CS_ReqIncreaseBuilding_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqIncreaseBuilding, buildingtype_),
  };
  GuildMSG_CS_ReqIncreaseBuilding_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_CS_ReqIncreaseBuilding_descriptor_,
      GuildMSG_CS_ReqIncreaseBuilding::default_instance_,
      GuildMSG_CS_ReqIncreaseBuilding_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqIncreaseBuilding, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqIncreaseBuilding, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_CS_ReqIncreaseBuilding));
  GuildMSG_SC_AckIncreaseBuilding_descriptor_ = file->message_type(50);
  static const int GuildMSG_SC_AckIncreaseBuilding_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckIncreaseBuilding, result_),
  };
  GuildMSG_SC_AckIncreaseBuilding_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_SC_AckIncreaseBuilding_descriptor_,
      GuildMSG_SC_AckIncreaseBuilding::default_instance_,
      GuildMSG_SC_AckIncreaseBuilding_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckIncreaseBuilding, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckIncreaseBuilding, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_SC_AckIncreaseBuilding));
  GuildMSG_CS_ReqDonate_descriptor_ = file->message_type(51);
  static const int GuildMSG_CS_ReqDonate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqDonate, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqDonate, counts_),
  };
  GuildMSG_CS_ReqDonate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_CS_ReqDonate_descriptor_,
      GuildMSG_CS_ReqDonate::default_instance_,
      GuildMSG_CS_ReqDonate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqDonate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqDonate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_CS_ReqDonate));
  GuildMSG_SC_AckDonate_descriptor_ = file->message_type(52);
  static const int GuildMSG_SC_AckDonate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckDonate, result_),
  };
  GuildMSG_SC_AckDonate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_SC_AckDonate_descriptor_,
      GuildMSG_SC_AckDonate::default_instance_,
      GuildMSG_SC_AckDonate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckDonate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckDonate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_SC_AckDonate));
  GuildMSG_CS_ReqGetWages_descriptor_ = file->message_type(53);
  static const int GuildMSG_CS_ReqGetWages_offsets_[1] = {
  };
  GuildMSG_CS_ReqGetWages_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_CS_ReqGetWages_descriptor_,
      GuildMSG_CS_ReqGetWages::default_instance_,
      GuildMSG_CS_ReqGetWages_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqGetWages, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqGetWages, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_CS_ReqGetWages));
  GuildMSG_SC_AckGetWages_descriptor_ = file->message_type(54);
  static const int GuildMSG_SC_AckGetWages_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckGetWages, result_),
  };
  GuildMSG_SC_AckGetWages_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_SC_AckGetWages_descriptor_,
      GuildMSG_SC_AckGetWages::default_instance_,
      GuildMSG_SC_AckGetWages_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckGetWages, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckGetWages, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_SC_AckGetWages));
  GuildMSG_CS_ReqImpeachInfo_descriptor_ = file->message_type(55);
  static const int GuildMSG_CS_ReqImpeachInfo_offsets_[1] = {
  };
  GuildMSG_CS_ReqImpeachInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_CS_ReqImpeachInfo_descriptor_,
      GuildMSG_CS_ReqImpeachInfo::default_instance_,
      GuildMSG_CS_ReqImpeachInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqImpeachInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqImpeachInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_CS_ReqImpeachInfo));
  GuildMSG_SC_AckImpeachInfo_descriptor_ = file->message_type(56);
  static const int GuildMSG_SC_AckImpeachInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckImpeachInfo, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckImpeachInfo, impdata_),
  };
  GuildMSG_SC_AckImpeachInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_SC_AckImpeachInfo_descriptor_,
      GuildMSG_SC_AckImpeachInfo::default_instance_,
      GuildMSG_SC_AckImpeachInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckImpeachInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckImpeachInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_SC_AckImpeachInfo));
  GuildMSG_CS_ReqImpeachment_descriptor_ = file->message_type(57);
  static const int GuildMSG_CS_ReqImpeachment_offsets_[1] = {
  };
  GuildMSG_CS_ReqImpeachment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_CS_ReqImpeachment_descriptor_,
      GuildMSG_CS_ReqImpeachment::default_instance_,
      GuildMSG_CS_ReqImpeachment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqImpeachment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqImpeachment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_CS_ReqImpeachment));
  GuildMSG_SC_AckImpeachment_descriptor_ = file->message_type(58);
  static const int GuildMSG_SC_AckImpeachment_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckImpeachment, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckImpeachment, impdata_),
  };
  GuildMSG_SC_AckImpeachment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_SC_AckImpeachment_descriptor_,
      GuildMSG_SC_AckImpeachment::default_instance_,
      GuildMSG_SC_AckImpeachment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckImpeachment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckImpeachment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_SC_AckImpeachment));
  GuildMSG_CS_ReqCancelImpeachment_descriptor_ = file->message_type(59);
  static const int GuildMSG_CS_ReqCancelImpeachment_offsets_[1] = {
  };
  GuildMSG_CS_ReqCancelImpeachment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_CS_ReqCancelImpeachment_descriptor_,
      GuildMSG_CS_ReqCancelImpeachment::default_instance_,
      GuildMSG_CS_ReqCancelImpeachment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqCancelImpeachment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqCancelImpeachment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_CS_ReqCancelImpeachment));
  GuildMSG_SC_AckCancelImpeachment_descriptor_ = file->message_type(60);
  static const int GuildMSG_SC_AckCancelImpeachment_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckCancelImpeachment, result_),
  };
  GuildMSG_SC_AckCancelImpeachment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_SC_AckCancelImpeachment_descriptor_,
      GuildMSG_SC_AckCancelImpeachment::default_instance_,
      GuildMSG_SC_AckCancelImpeachment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckCancelImpeachment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckCancelImpeachment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_SC_AckCancelImpeachment));
  GuildMSG_CS_ReqResponse_descriptor_ = file->message_type(61);
  static const int GuildMSG_CS_ReqResponse_offsets_[1] = {
  };
  GuildMSG_CS_ReqResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_CS_ReqResponse_descriptor_,
      GuildMSG_CS_ReqResponse::default_instance_,
      GuildMSG_CS_ReqResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_CS_ReqResponse));
  GuildMSG_SC_AckResponse_descriptor_ = file->message_type(62);
  static const int GuildMSG_SC_AckResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckResponse, result_),
  };
  GuildMSG_SC_AckResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_SC_AckResponse_descriptor_,
      GuildMSG_SC_AckResponse::default_instance_,
      GuildMSG_SC_AckResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_SC_AckResponse));
  GuildMSG_CS_ReqMergeInfo_descriptor_ = file->message_type(63);
  static const int GuildMSG_CS_ReqMergeInfo_offsets_[1] = {
  };
  GuildMSG_CS_ReqMergeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_CS_ReqMergeInfo_descriptor_,
      GuildMSG_CS_ReqMergeInfo::default_instance_,
      GuildMSG_CS_ReqMergeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqMergeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqMergeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_CS_ReqMergeInfo));
  GuildMSG_SC_AckMergeInfo_descriptor_ = file->message_type(64);
  static const int GuildMSG_SC_AckMergeInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckMergeInfo, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckMergeInfo, data_),
  };
  GuildMSG_SC_AckMergeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_SC_AckMergeInfo_descriptor_,
      GuildMSG_SC_AckMergeInfo::default_instance_,
      GuildMSG_SC_AckMergeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckMergeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckMergeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_SC_AckMergeInfo));
  GuildMSG_CS_ReqMergeGuild_descriptor_ = file->message_type(65);
  static const int GuildMSG_CS_ReqMergeGuild_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqMergeGuild, recvguildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqMergeGuild, masterid_),
  };
  GuildMSG_CS_ReqMergeGuild_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_CS_ReqMergeGuild_descriptor_,
      GuildMSG_CS_ReqMergeGuild::default_instance_,
      GuildMSG_CS_ReqMergeGuild_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqMergeGuild, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqMergeGuild, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_CS_ReqMergeGuild));
  GuildMSG_SC_AckMergeGuild_descriptor_ = file->message_type(66);
  static const int GuildMSG_SC_AckMergeGuild_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckMergeGuild, result_),
  };
  GuildMSG_SC_AckMergeGuild_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_SC_AckMergeGuild_descriptor_,
      GuildMSG_SC_AckMergeGuild::default_instance_,
      GuildMSG_SC_AckMergeGuild_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckMergeGuild, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckMergeGuild, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_SC_AckMergeGuild));
  GuildMSG_CS_ReqMergeGuildList_descriptor_ = file->message_type(67);
  static const int GuildMSG_CS_ReqMergeGuildList_offsets_[1] = {
  };
  GuildMSG_CS_ReqMergeGuildList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_CS_ReqMergeGuildList_descriptor_,
      GuildMSG_CS_ReqMergeGuildList::default_instance_,
      GuildMSG_CS_ReqMergeGuildList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqMergeGuildList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqMergeGuildList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_CS_ReqMergeGuildList));
  GuildMSG_SC_AckMergeGuildList_descriptor_ = file->message_type(68);
  static const int GuildMSG_SC_AckMergeGuildList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckMergeGuildList, datalist_),
  };
  GuildMSG_SC_AckMergeGuildList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_SC_AckMergeGuildList_descriptor_,
      GuildMSG_SC_AckMergeGuildList::default_instance_,
      GuildMSG_SC_AckMergeGuildList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckMergeGuildList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckMergeGuildList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_SC_AckMergeGuildList));
  GuildMSG_CS_ReqOpreatMergeList_descriptor_ = file->message_type(69);
  static const int GuildMSG_CS_ReqOpreatMergeList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqOpreatMergeList, uniteguild_),
  };
  GuildMSG_CS_ReqOpreatMergeList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_CS_ReqOpreatMergeList_descriptor_,
      GuildMSG_CS_ReqOpreatMergeList::default_instance_,
      GuildMSG_CS_ReqOpreatMergeList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqOpreatMergeList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqOpreatMergeList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_CS_ReqOpreatMergeList));
  GuildMSG_SC_AckOpreatMergeList_descriptor_ = file->message_type(70);
  static const int GuildMSG_SC_AckOpreatMergeList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckOpreatMergeList, result_),
  };
  GuildMSG_SC_AckOpreatMergeList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_SC_AckOpreatMergeList_descriptor_,
      GuildMSG_SC_AckOpreatMergeList::default_instance_,
      GuildMSG_SC_AckOpreatMergeList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckOpreatMergeList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckOpreatMergeList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_SC_AckOpreatMergeList));
  GuildMSG_CS_ReqClearMergeList_descriptor_ = file->message_type(71);
  static const int GuildMSG_CS_ReqClearMergeList_offsets_[1] = {
  };
  GuildMSG_CS_ReqClearMergeList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_CS_ReqClearMergeList_descriptor_,
      GuildMSG_CS_ReqClearMergeList::default_instance_,
      GuildMSG_CS_ReqClearMergeList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqClearMergeList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqClearMergeList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_CS_ReqClearMergeList));
  GuildMSG_SC_AckClearMergeList_descriptor_ = file->message_type(72);
  static const int GuildMSG_SC_AckClearMergeList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckClearMergeList, result_),
  };
  GuildMSG_SC_AckClearMergeList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_SC_AckClearMergeList_descriptor_,
      GuildMSG_SC_AckClearMergeList::default_instance_,
      GuildMSG_SC_AckClearMergeList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckClearMergeList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckClearMergeList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_SC_AckClearMergeList));
  GuildMSG_CS_ReqCancelMerge_descriptor_ = file->message_type(73);
  static const int GuildMSG_CS_ReqCancelMerge_offsets_[1] = {
  };
  GuildMSG_CS_ReqCancelMerge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_CS_ReqCancelMerge_descriptor_,
      GuildMSG_CS_ReqCancelMerge::default_instance_,
      GuildMSG_CS_ReqCancelMerge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqCancelMerge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqCancelMerge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_CS_ReqCancelMerge));
  GuildMSG_SC_AckCancelMerge_descriptor_ = file->message_type(74);
  static const int GuildMSG_SC_AckCancelMerge_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckCancelMerge, result_),
  };
  GuildMSG_SC_AckCancelMerge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_SC_AckCancelMerge_descriptor_,
      GuildMSG_SC_AckCancelMerge::default_instance_,
      GuildMSG_SC_AckCancelMerge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckCancelMerge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckCancelMerge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_SC_AckCancelMerge));
  GuildMSG_CS_ReqShopInfo_descriptor_ = file->message_type(75);
  static const int GuildMSG_CS_ReqShopInfo_offsets_[1] = {
  };
  GuildMSG_CS_ReqShopInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_CS_ReqShopInfo_descriptor_,
      GuildMSG_CS_ReqShopInfo::default_instance_,
      GuildMSG_CS_ReqShopInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqShopInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqShopInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_CS_ReqShopInfo));
  GuildMSG_SC_AckShopInfo_descriptor_ = file->message_type(76);
  static const int GuildMSG_SC_AckShopInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckShopInfo, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckShopInfo, shopinfo_),
  };
  GuildMSG_SC_AckShopInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_SC_AckShopInfo_descriptor_,
      GuildMSG_SC_AckShopInfo::default_instance_,
      GuildMSG_SC_AckShopInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckShopInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckShopInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_SC_AckShopInfo));
  GuildMSG_CS_ReqBuyShopItem_descriptor_ = file->message_type(77);
  static const int GuildMSG_CS_ReqBuyShopItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqBuyShopItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqBuyShopItem, counts_),
  };
  GuildMSG_CS_ReqBuyShopItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_CS_ReqBuyShopItem_descriptor_,
      GuildMSG_CS_ReqBuyShopItem::default_instance_,
      GuildMSG_CS_ReqBuyShopItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqBuyShopItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqBuyShopItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_CS_ReqBuyShopItem));
  GuildMSG_SC_AckBuyShopItem_descriptor_ = file->message_type(78);
  static const int GuildMSG_SC_AckBuyShopItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckBuyShopItem, result_),
  };
  GuildMSG_SC_AckBuyShopItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_SC_AckBuyShopItem_descriptor_,
      GuildMSG_SC_AckBuyShopItem::default_instance_,
      GuildMSG_SC_AckBuyShopItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckBuyShopItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckBuyShopItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_SC_AckBuyShopItem));
  GuildMSG_CS_ReqChangeName_descriptor_ = file->message_type(79);
  static const int GuildMSG_CS_ReqChangeName_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqChangeName, newname_),
  };
  GuildMSG_CS_ReqChangeName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_CS_ReqChangeName_descriptor_,
      GuildMSG_CS_ReqChangeName::default_instance_,
      GuildMSG_CS_ReqChangeName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqChangeName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqChangeName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_CS_ReqChangeName));
  GuildMSG_SC_AckChangeName_descriptor_ = file->message_type(80);
  static const int GuildMSG_SC_AckChangeName_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckChangeName, result_),
  };
  GuildMSG_SC_AckChangeName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_SC_AckChangeName_descriptor_,
      GuildMSG_SC_AckChangeName::default_instance_,
      GuildMSG_SC_AckChangeName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckChangeName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckChangeName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_SC_AckChangeName));
  GuildMSG_SC_NotifyUpdateGuildInfo_descriptor_ = file->message_type(81);
  static const int GuildMSG_SC_NotifyUpdateGuildInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_NotifyUpdateGuildInfo, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_NotifyUpdateGuildInfo, strvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_NotifyUpdateGuildInfo, uvalue_),
  };
  GuildMSG_SC_NotifyUpdateGuildInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_SC_NotifyUpdateGuildInfo_descriptor_,
      GuildMSG_SC_NotifyUpdateGuildInfo::default_instance_,
      GuildMSG_SC_NotifyUpdateGuildInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_NotifyUpdateGuildInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_NotifyUpdateGuildInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_SC_NotifyUpdateGuildInfo));
  GuildMSG_CS_ReqEnterFort_descriptor_ = file->message_type(82);
  static const int GuildMSG_CS_ReqEnterFort_offsets_[1] = {
  };
  GuildMSG_CS_ReqEnterFort_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_CS_ReqEnterFort_descriptor_,
      GuildMSG_CS_ReqEnterFort::default_instance_,
      GuildMSG_CS_ReqEnterFort_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqEnterFort, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqEnterFort, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_CS_ReqEnterFort));
  GuildMSG_SC_AckEnterFort_descriptor_ = file->message_type(83);
  static const int GuildMSG_SC_AckEnterFort_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckEnterFort, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckEnterFort, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckEnterFort, pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckEnterFort, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckEnterFort, layer_),
  };
  GuildMSG_SC_AckEnterFort_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_SC_AckEnterFort_descriptor_,
      GuildMSG_SC_AckEnterFort::default_instance_,
      GuildMSG_SC_AckEnterFort_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckEnterFort, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckEnterFort, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_SC_AckEnterFort));
  GuildMSG_CS_EnterFortSuccess_descriptor_ = file->message_type(84);
  static const int GuildMSG_CS_EnterFortSuccess_offsets_[1] = {
  };
  GuildMSG_CS_EnterFortSuccess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_CS_EnterFortSuccess_descriptor_,
      GuildMSG_CS_EnterFortSuccess::default_instance_,
      GuildMSG_CS_EnterFortSuccess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_EnterFortSuccess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_EnterFortSuccess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_CS_EnterFortSuccess));
  GuildMSG_CS_ReqCancelJoin_descriptor_ = file->message_type(85);
  static const int GuildMSG_CS_ReqCancelJoin_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqCancelJoin, guildid_),
  };
  GuildMSG_CS_ReqCancelJoin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_CS_ReqCancelJoin_descriptor_,
      GuildMSG_CS_ReqCancelJoin::default_instance_,
      GuildMSG_CS_ReqCancelJoin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqCancelJoin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqCancelJoin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_CS_ReqCancelJoin));
  GuildMSG_SC_AckCancelJoin_descriptor_ = file->message_type(86);
  static const int GuildMSG_SC_AckCancelJoin_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckCancelJoin, result_),
  };
  GuildMSG_SC_AckCancelJoin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_SC_AckCancelJoin_descriptor_,
      GuildMSG_SC_AckCancelJoin::default_instance_,
      GuildMSG_SC_AckCancelJoin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckCancelJoin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckCancelJoin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_SC_AckCancelJoin));
  GuildMSG_CS_ReqEnterGuildIntruder_descriptor_ = file->message_type(87);
  static const int GuildMSG_CS_ReqEnterGuildIntruder_offsets_[1] = {
  };
  GuildMSG_CS_ReqEnterGuildIntruder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_CS_ReqEnterGuildIntruder_descriptor_,
      GuildMSG_CS_ReqEnterGuildIntruder::default_instance_,
      GuildMSG_CS_ReqEnterGuildIntruder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqEnterGuildIntruder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqEnterGuildIntruder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_CS_ReqEnterGuildIntruder));
  GuildMSG_CS_ReqEnterGuildIntruderOK_descriptor_ = file->message_type(88);
  static const int GuildMSG_CS_ReqEnterGuildIntruderOK_offsets_[1] = {
  };
  GuildMSG_CS_ReqEnterGuildIntruderOK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_CS_ReqEnterGuildIntruderOK_descriptor_,
      GuildMSG_CS_ReqEnterGuildIntruderOK::default_instance_,
      GuildMSG_CS_ReqEnterGuildIntruderOK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqEnterGuildIntruderOK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqEnterGuildIntruderOK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_CS_ReqEnterGuildIntruderOK));
  GuildMSG_CS_ReqLeaveGuildIntruder_descriptor_ = file->message_type(89);
  static const int GuildMSG_CS_ReqLeaveGuildIntruder_offsets_[1] = {
  };
  GuildMSG_CS_ReqLeaveGuildIntruder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_CS_ReqLeaveGuildIntruder_descriptor_,
      GuildMSG_CS_ReqLeaveGuildIntruder::default_instance_,
      GuildMSG_CS_ReqLeaveGuildIntruder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqLeaveGuildIntruder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqLeaveGuildIntruder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_CS_ReqLeaveGuildIntruder));
  GuildMSG_SC_AckEnterGuildIntruder_descriptor_ = file->message_type(90);
  static const int GuildMSG_SC_AckEnterGuildIntruder_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckEnterGuildIntruder, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckEnterGuildIntruder, pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckEnterGuildIntruder, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckEnterGuildIntruder, layer_),
  };
  GuildMSG_SC_AckEnterGuildIntruder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_SC_AckEnterGuildIntruder_descriptor_,
      GuildMSG_SC_AckEnterGuildIntruder::default_instance_,
      GuildMSG_SC_AckEnterGuildIntruder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckEnterGuildIntruder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckEnterGuildIntruder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_SC_AckEnterGuildIntruder));
  GuildMSG_SC_AckGuildIntruderEnd_descriptor_ = file->message_type(91);
  static const int GuildMSG_SC_AckGuildIntruderEnd_offsets_[1] = {
  };
  GuildMSG_SC_AckGuildIntruderEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_SC_AckGuildIntruderEnd_descriptor_,
      GuildMSG_SC_AckGuildIntruderEnd::default_instance_,
      GuildMSG_SC_AckGuildIntruderEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckGuildIntruderEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckGuildIntruderEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_SC_AckGuildIntruderEnd));
  GuildMSG_SC_AckGuildIntruderInit_descriptor_ = file->message_type(92);
  static const int GuildMSG_SC_AckGuildIntruderInit_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckGuildIntruderInit, surplustime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckGuildIntruderInit, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckGuildIntruderInit, reward_percent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckGuildIntruderInit, chest_list_),
  };
  GuildMSG_SC_AckGuildIntruderInit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_SC_AckGuildIntruderInit_descriptor_,
      GuildMSG_SC_AckGuildIntruderInit::default_instance_,
      GuildMSG_SC_AckGuildIntruderInit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckGuildIntruderInit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckGuildIntruderInit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_SC_AckGuildIntruderInit));
  GuildMSG_SC_AckGuildIntruderTime_descriptor_ = file->message_type(93);
  static const int GuildMSG_SC_AckGuildIntruderTime_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckGuildIntruderTime, times_),
  };
  GuildMSG_SC_AckGuildIntruderTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_SC_AckGuildIntruderTime_descriptor_,
      GuildMSG_SC_AckGuildIntruderTime::default_instance_,
      GuildMSG_SC_AckGuildIntruderTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckGuildIntruderTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckGuildIntruderTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_SC_AckGuildIntruderTime));
  GuildMSG_SC_GuildIntruderReward_descriptor_ = file->message_type(94);
  static const int GuildMSG_SC_GuildIntruderReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_GuildIntruderReward, reward_percent_),
  };
  GuildMSG_SC_GuildIntruderReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_SC_GuildIntruderReward_descriptor_,
      GuildMSG_SC_GuildIntruderReward::default_instance_,
      GuildMSG_SC_GuildIntruderReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_GuildIntruderReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_GuildIntruderReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_SC_GuildIntruderReward));
  GuildMSG_SC_NotifyStopImpeachment_descriptor_ = file->message_type(95);
  static const int GuildMSG_SC_NotifyStopImpeachment_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_NotifyStopImpeachment, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_NotifyStopImpeachment, ownnername_),
  };
  GuildMSG_SC_NotifyStopImpeachment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_SC_NotifyStopImpeachment_descriptor_,
      GuildMSG_SC_NotifyStopImpeachment::default_instance_,
      GuildMSG_SC_NotifyStopImpeachment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_NotifyStopImpeachment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_NotifyStopImpeachment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_SC_NotifyStopImpeachment));
  GuildMSG_SC_NotifyContext_descriptor_ = file->message_type(96);
  static const int GuildMSG_SC_NotifyContext_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_NotifyContext, contextid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_NotifyContext, contextpar_),
  };
  GuildMSG_SC_NotifyContext_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_SC_NotifyContext_descriptor_,
      GuildMSG_SC_NotifyContext::default_instance_,
      GuildMSG_SC_NotifyContext_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_NotifyContext, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_NotifyContext, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_SC_NotifyContext));
  GuildMSG_CS_ReqSetBossOpen_descriptor_ = file->message_type(97);
  static const int GuildMSG_CS_ReqSetBossOpen_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqSetBossOpen, istoday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqSetBossOpen, hour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqSetBossOpen, minu_),
  };
  GuildMSG_CS_ReqSetBossOpen_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_CS_ReqSetBossOpen_descriptor_,
      GuildMSG_CS_ReqSetBossOpen::default_instance_,
      GuildMSG_CS_ReqSetBossOpen_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqSetBossOpen, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqSetBossOpen, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_CS_ReqSetBossOpen));
  GuildMSG_SC_AckBossInfo_descriptor_ = file->message_type(98);
  static const int GuildMSG_SC_AckBossInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckBossInfo, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckBossInfo, info_),
  };
  GuildMSG_SC_AckBossInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_SC_AckBossInfo_descriptor_,
      GuildMSG_SC_AckBossInfo::default_instance_,
      GuildMSG_SC_AckBossInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckBossInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckBossInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_SC_AckBossInfo));
  GuildMSG_SC_NotifyBossDie_descriptor_ = file->message_type(99);
  static const int GuildMSG_SC_NotifyBossDie_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_NotifyBossDie, status_),
  };
  GuildMSG_SC_NotifyBossDie_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_SC_NotifyBossDie_descriptor_,
      GuildMSG_SC_NotifyBossDie::default_instance_,
      GuildMSG_SC_NotifyBossDie_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_NotifyBossDie, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_NotifyBossDie, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_SC_NotifyBossDie));
  GuildMSG_CS_ReqInvitePlayer_descriptor_ = file->message_type(100);
  static const int GuildMSG_CS_ReqInvitePlayer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqInvitePlayer, playerid_),
  };
  GuildMSG_CS_ReqInvitePlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_CS_ReqInvitePlayer_descriptor_,
      GuildMSG_CS_ReqInvitePlayer::default_instance_,
      GuildMSG_CS_ReqInvitePlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqInvitePlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqInvitePlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_CS_ReqInvitePlayer));
  GuildMSG_SC_AckInvitePlayer_descriptor_ = file->message_type(101);
  static const int GuildMSG_SC_AckInvitePlayer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckInvitePlayer, result_),
  };
  GuildMSG_SC_AckInvitePlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_SC_AckInvitePlayer_descriptor_,
      GuildMSG_SC_AckInvitePlayer::default_instance_,
      GuildMSG_SC_AckInvitePlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckInvitePlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckInvitePlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_SC_AckInvitePlayer));
  GuildMSG_SC_NotifyInvitePlayer_descriptor_ = file->message_type(102);
  static const int GuildMSG_SC_NotifyInvitePlayer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_NotifyInvitePlayer, inviter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_NotifyInvitePlayer, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_NotifyInvitePlayer, guildname_),
  };
  GuildMSG_SC_NotifyInvitePlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_SC_NotifyInvitePlayer_descriptor_,
      GuildMSG_SC_NotifyInvitePlayer::default_instance_,
      GuildMSG_SC_NotifyInvitePlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_NotifyInvitePlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_NotifyInvitePlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_SC_NotifyInvitePlayer));
  GuildMSG_CS_ReqInviteJoin_descriptor_ = file->message_type(103);
  static const int GuildMSG_CS_ReqInviteJoin_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqInviteJoin, isjoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqInviteJoin, guildid_),
  };
  GuildMSG_CS_ReqInviteJoin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_CS_ReqInviteJoin_descriptor_,
      GuildMSG_CS_ReqInviteJoin::default_instance_,
      GuildMSG_CS_ReqInviteJoin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqInviteJoin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqInviteJoin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_CS_ReqInviteJoin));
  GuildMSG_SC_AckInviteJoin_descriptor_ = file->message_type(104);
  static const int GuildMSG_SC_AckInviteJoin_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckInviteJoin, result_),
  };
  GuildMSG_SC_AckInviteJoin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_SC_AckInviteJoin_descriptor_,
      GuildMSG_SC_AckInviteJoin::default_instance_,
      GuildMSG_SC_AckInviteJoin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckInviteJoin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckInviteJoin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_SC_AckInviteJoin));
  GuildMSG_CS_ReqGuildWarehouse_descriptor_ = file->message_type(105);
  static const int GuildMSG_CS_ReqGuildWarehouse_offsets_[1] = {
  };
  GuildMSG_CS_ReqGuildWarehouse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_CS_ReqGuildWarehouse_descriptor_,
      GuildMSG_CS_ReqGuildWarehouse::default_instance_,
      GuildMSG_CS_ReqGuildWarehouse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqGuildWarehouse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqGuildWarehouse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_CS_ReqGuildWarehouse));
  GuildMSG_SC_AckGuildWarehouse_descriptor_ = file->message_type(106);
  static const int GuildMSG_SC_AckGuildWarehouse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckGuildWarehouse, guildequip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckGuildWarehouse, gridnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckGuildWarehouse, buynum_),
  };
  GuildMSG_SC_AckGuildWarehouse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_SC_AckGuildWarehouse_descriptor_,
      GuildMSG_SC_AckGuildWarehouse::default_instance_,
      GuildMSG_SC_AckGuildWarehouse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckGuildWarehouse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckGuildWarehouse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_SC_AckGuildWarehouse));
  GuildMSG_CS_ReqDonateEquip_descriptor_ = file->message_type(107);
  static const int GuildMSG_CS_ReqDonateEquip_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqDonateEquip, equipuuid_),
  };
  GuildMSG_CS_ReqDonateEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_CS_ReqDonateEquip_descriptor_,
      GuildMSG_CS_ReqDonateEquip::default_instance_,
      GuildMSG_CS_ReqDonateEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqDonateEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqDonateEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_CS_ReqDonateEquip));
  GuildMSG_CS_ReqConversionEquip_descriptor_ = file->message_type(108);
  static const int GuildMSG_CS_ReqConversionEquip_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqConversionEquip, equipuuid_),
  };
  GuildMSG_CS_ReqConversionEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_CS_ReqConversionEquip_descriptor_,
      GuildMSG_CS_ReqConversionEquip::default_instance_,
      GuildMSG_CS_ReqConversionEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqConversionEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqConversionEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_CS_ReqConversionEquip));
  GuildMSG_CS_ReqDelGuildEquip_descriptor_ = file->message_type(109);
  static const int GuildMSG_CS_ReqDelGuildEquip_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqDelGuildEquip, equiplist_),
  };
  GuildMSG_CS_ReqDelGuildEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_CS_ReqDelGuildEquip_descriptor_,
      GuildMSG_CS_ReqDelGuildEquip::default_instance_,
      GuildMSG_CS_ReqDelGuildEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqDelGuildEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_CS_ReqDelGuildEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_CS_ReqDelGuildEquip));
  GuildMSG_SC_AckGuildEquipRecord_descriptor_ = file->message_type(110);
  static const int GuildMSG_SC_AckGuildEquipRecord_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckGuildEquipRecord, depositlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckGuildEquipRecord, fetchlist_),
  };
  GuildMSG_SC_AckGuildEquipRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMSG_SC_AckGuildEquipRecord_descriptor_,
      GuildMSG_SC_AckGuildEquipRecord::default_instance_,
      GuildMSG_SC_AckGuildEquipRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckGuildEquipRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMSG_SC_AckGuildEquipRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMSG_SC_AckGuildEquipRecord));
  eOffice_descriptor_ = file->enum_type(0);
  ePurview_descriptor_ = file->enum_type(1);
  eNotifyType_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_guild_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KickoutInfo_descriptor_, &KickoutInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildListInfo_descriptor_, &GuildListInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqInfo_descriptor_, &ReqInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildShopInfo_descriptor_, &GuildShopInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestHelpInfo_descriptor_, &QuestHelpInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImpeachInfo_descriptor_, &ImpeachInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BossDamage_descriptor_, &BossDamage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildBoss_descriptor_, &GuildBoss::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecordData_descriptor_, &RecordData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MixGuildData_descriptor_, &MixGuildData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildData_descriptor_, &GuildData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MixMemberDate_descriptor_, &MixMemberDate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMemberData_descriptor_, &GuildMemberData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemberListInfo_descriptor_, &MemberListInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UniteGuildData_descriptor_, &UniteGuildData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildUsedName_descriptor_, &GuildUsedName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GUsedName_descriptor_, &GUsedName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_CS_ReqGuildList_descriptor_, &GuildMSG_CS_ReqGuildList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_SC_AckGuildList_descriptor_, &GuildMSG_SC_AckGuildList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_CS_ReqCreate_descriptor_, &GuildMSG_CS_ReqCreate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_SC_AckCreate_descriptor_, &GuildMSG_SC_AckCreate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_CS_ReqJoin_descriptor_, &GuildMSG_CS_ReqJoin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_SC_AckJoin_descriptor_, &GuildMSG_SC_AckJoin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_CS_ReqQuickJoin_descriptor_, &GuildMSG_CS_ReqQuickJoin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_SC_AckQuickJoin_descriptor_, &GuildMSG_SC_AckQuickJoin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_CS_ReqFind_descriptor_, &GuildMSG_CS_ReqFind::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_SC_AckFind_descriptor_, &GuildMSG_SC_AckFind::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_CS_ReqGuildInfo_descriptor_, &GuildMSG_CS_ReqGuildInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_SC_AckGuildInfo_descriptor_, &GuildMSG_SC_AckGuildInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_CS_ReqMemberInfo_descriptor_, &GuildMSG_CS_ReqMemberInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_SC_AckMemberInfo_descriptor_, &GuildMSG_SC_AckMemberInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_CS_ReqMemberList_descriptor_, &GuildMSG_CS_ReqMemberList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_SC_AckMemberList_descriptor_, &GuildMSG_SC_AckMemberList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_CS_ReqQuit_descriptor_, &GuildMSG_CS_ReqQuit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_SC_AckQuit_descriptor_, &GuildMSG_SC_AckQuit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_CS_ReqSetJoin_descriptor_, &GuildMSG_CS_ReqSetJoin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_SC_AckSetJoin_descriptor_, &GuildMSG_SC_AckSetJoin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_CS_ReqJoinList_descriptor_, &GuildMSG_CS_ReqJoinList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_SC_AckJoinList_descriptor_, &GuildMSG_SC_AckJoinList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_CS_ReqOpreatJoiniList_descriptor_, &GuildMSG_CS_ReqOpreatJoiniList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_SC_AckOpreatJoiniList_descriptor_, &GuildMSG_SC_AckOpreatJoiniList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_CS_ReqKickOut_descriptor_, &GuildMSG_CS_ReqKickOut::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_SC_AckKickOut_descriptor_, &GuildMSG_SC_AckKickOut::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_CS_ReqAppointment_descriptor_, &GuildMSG_CS_ReqAppointment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_SC_AckAppointment_descriptor_, &GuildMSG_SC_AckAppointment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_CS_ReqSetGuildPlacard_descriptor_, &GuildMSG_CS_ReqSetGuildPlacard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_SC_AckSetGuildPlacard_descriptor_, &GuildMSG_SC_AckSetGuildPlacard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_CS_ReqSetRefrishMultiple_descriptor_, &GuildMSG_CS_ReqSetRefrishMultiple::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_SC_AckSetRefrishMultiple_descriptor_, &GuildMSG_SC_AckSetRefrishMultiple::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_CS_ReqIncreaseBuilding_descriptor_, &GuildMSG_CS_ReqIncreaseBuilding::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_SC_AckIncreaseBuilding_descriptor_, &GuildMSG_SC_AckIncreaseBuilding::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_CS_ReqDonate_descriptor_, &GuildMSG_CS_ReqDonate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_SC_AckDonate_descriptor_, &GuildMSG_SC_AckDonate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_CS_ReqGetWages_descriptor_, &GuildMSG_CS_ReqGetWages::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_SC_AckGetWages_descriptor_, &GuildMSG_SC_AckGetWages::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_CS_ReqImpeachInfo_descriptor_, &GuildMSG_CS_ReqImpeachInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_SC_AckImpeachInfo_descriptor_, &GuildMSG_SC_AckImpeachInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_CS_ReqImpeachment_descriptor_, &GuildMSG_CS_ReqImpeachment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_SC_AckImpeachment_descriptor_, &GuildMSG_SC_AckImpeachment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_CS_ReqCancelImpeachment_descriptor_, &GuildMSG_CS_ReqCancelImpeachment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_SC_AckCancelImpeachment_descriptor_, &GuildMSG_SC_AckCancelImpeachment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_CS_ReqResponse_descriptor_, &GuildMSG_CS_ReqResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_SC_AckResponse_descriptor_, &GuildMSG_SC_AckResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_CS_ReqMergeInfo_descriptor_, &GuildMSG_CS_ReqMergeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_SC_AckMergeInfo_descriptor_, &GuildMSG_SC_AckMergeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_CS_ReqMergeGuild_descriptor_, &GuildMSG_CS_ReqMergeGuild::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_SC_AckMergeGuild_descriptor_, &GuildMSG_SC_AckMergeGuild::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_CS_ReqMergeGuildList_descriptor_, &GuildMSG_CS_ReqMergeGuildList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_SC_AckMergeGuildList_descriptor_, &GuildMSG_SC_AckMergeGuildList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_CS_ReqOpreatMergeList_descriptor_, &GuildMSG_CS_ReqOpreatMergeList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_SC_AckOpreatMergeList_descriptor_, &GuildMSG_SC_AckOpreatMergeList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_CS_ReqClearMergeList_descriptor_, &GuildMSG_CS_ReqClearMergeList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_SC_AckClearMergeList_descriptor_, &GuildMSG_SC_AckClearMergeList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_CS_ReqCancelMerge_descriptor_, &GuildMSG_CS_ReqCancelMerge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_SC_AckCancelMerge_descriptor_, &GuildMSG_SC_AckCancelMerge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_CS_ReqShopInfo_descriptor_, &GuildMSG_CS_ReqShopInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_SC_AckShopInfo_descriptor_, &GuildMSG_SC_AckShopInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_CS_ReqBuyShopItem_descriptor_, &GuildMSG_CS_ReqBuyShopItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_SC_AckBuyShopItem_descriptor_, &GuildMSG_SC_AckBuyShopItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_CS_ReqChangeName_descriptor_, &GuildMSG_CS_ReqChangeName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_SC_AckChangeName_descriptor_, &GuildMSG_SC_AckChangeName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_SC_NotifyUpdateGuildInfo_descriptor_, &GuildMSG_SC_NotifyUpdateGuildInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_CS_ReqEnterFort_descriptor_, &GuildMSG_CS_ReqEnterFort::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_SC_AckEnterFort_descriptor_, &GuildMSG_SC_AckEnterFort::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_CS_EnterFortSuccess_descriptor_, &GuildMSG_CS_EnterFortSuccess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_CS_ReqCancelJoin_descriptor_, &GuildMSG_CS_ReqCancelJoin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_SC_AckCancelJoin_descriptor_, &GuildMSG_SC_AckCancelJoin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_CS_ReqEnterGuildIntruder_descriptor_, &GuildMSG_CS_ReqEnterGuildIntruder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_CS_ReqEnterGuildIntruderOK_descriptor_, &GuildMSG_CS_ReqEnterGuildIntruderOK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_CS_ReqLeaveGuildIntruder_descriptor_, &GuildMSG_CS_ReqLeaveGuildIntruder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_SC_AckEnterGuildIntruder_descriptor_, &GuildMSG_SC_AckEnterGuildIntruder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_SC_AckGuildIntruderEnd_descriptor_, &GuildMSG_SC_AckGuildIntruderEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_SC_AckGuildIntruderInit_descriptor_, &GuildMSG_SC_AckGuildIntruderInit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_SC_AckGuildIntruderTime_descriptor_, &GuildMSG_SC_AckGuildIntruderTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_SC_GuildIntruderReward_descriptor_, &GuildMSG_SC_GuildIntruderReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_SC_NotifyStopImpeachment_descriptor_, &GuildMSG_SC_NotifyStopImpeachment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_SC_NotifyContext_descriptor_, &GuildMSG_SC_NotifyContext::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_CS_ReqSetBossOpen_descriptor_, &GuildMSG_CS_ReqSetBossOpen::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_SC_AckBossInfo_descriptor_, &GuildMSG_SC_AckBossInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_SC_NotifyBossDie_descriptor_, &GuildMSG_SC_NotifyBossDie::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_CS_ReqInvitePlayer_descriptor_, &GuildMSG_CS_ReqInvitePlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_SC_AckInvitePlayer_descriptor_, &GuildMSG_SC_AckInvitePlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_SC_NotifyInvitePlayer_descriptor_, &GuildMSG_SC_NotifyInvitePlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_CS_ReqInviteJoin_descriptor_, &GuildMSG_CS_ReqInviteJoin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_SC_AckInviteJoin_descriptor_, &GuildMSG_SC_AckInviteJoin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_CS_ReqGuildWarehouse_descriptor_, &GuildMSG_CS_ReqGuildWarehouse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_SC_AckGuildWarehouse_descriptor_, &GuildMSG_SC_AckGuildWarehouse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_CS_ReqDonateEquip_descriptor_, &GuildMSG_CS_ReqDonateEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_CS_ReqConversionEquip_descriptor_, &GuildMSG_CS_ReqConversionEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_CS_ReqDelGuildEquip_descriptor_, &GuildMSG_CS_ReqDelGuildEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMSG_SC_AckGuildEquipRecord_descriptor_, &GuildMSG_SC_AckGuildEquipRecord::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_guild_2eproto() {
  delete KickoutInfo::default_instance_;
  delete KickoutInfo_reflection_;
  delete GuildListInfo::default_instance_;
  delete GuildListInfo_reflection_;
  delete ReqInfo::default_instance_;
  delete ReqInfo_reflection_;
  delete GuildShopInfo::default_instance_;
  delete GuildShopInfo_reflection_;
  delete QuestHelpInfo::default_instance_;
  delete QuestHelpInfo_reflection_;
  delete ImpeachInfo::default_instance_;
  delete ImpeachInfo_reflection_;
  delete BossDamage::default_instance_;
  delete BossDamage_reflection_;
  delete GuildBoss::default_instance_;
  delete GuildBoss_reflection_;
  delete RecordData::default_instance_;
  delete RecordData_reflection_;
  delete MixGuildData::default_instance_;
  delete MixGuildData_reflection_;
  delete GuildData::default_instance_;
  delete GuildData_reflection_;
  delete MixMemberDate::default_instance_;
  delete MixMemberDate_reflection_;
  delete GuildMemberData::default_instance_;
  delete GuildMemberData_reflection_;
  delete MemberListInfo::default_instance_;
  delete MemberListInfo_reflection_;
  delete UniteGuildData::default_instance_;
  delete UniteGuildData_reflection_;
  delete GuildUsedName::default_instance_;
  delete GuildUsedName_reflection_;
  delete GUsedName::default_instance_;
  delete GUsedName_reflection_;
  delete GuildMSG_CS_ReqGuildList::default_instance_;
  delete GuildMSG_CS_ReqGuildList_reflection_;
  delete GuildMSG_SC_AckGuildList::default_instance_;
  delete GuildMSG_SC_AckGuildList_reflection_;
  delete GuildMSG_CS_ReqCreate::default_instance_;
  delete GuildMSG_CS_ReqCreate_reflection_;
  delete GuildMSG_SC_AckCreate::default_instance_;
  delete GuildMSG_SC_AckCreate_reflection_;
  delete GuildMSG_CS_ReqJoin::default_instance_;
  delete GuildMSG_CS_ReqJoin_reflection_;
  delete GuildMSG_SC_AckJoin::default_instance_;
  delete GuildMSG_SC_AckJoin_reflection_;
  delete GuildMSG_CS_ReqQuickJoin::default_instance_;
  delete GuildMSG_CS_ReqQuickJoin_reflection_;
  delete GuildMSG_SC_AckQuickJoin::default_instance_;
  delete GuildMSG_SC_AckQuickJoin_reflection_;
  delete GuildMSG_CS_ReqFind::default_instance_;
  delete GuildMSG_CS_ReqFind_reflection_;
  delete GuildMSG_SC_AckFind::default_instance_;
  delete GuildMSG_SC_AckFind_reflection_;
  delete GuildMSG_CS_ReqGuildInfo::default_instance_;
  delete GuildMSG_CS_ReqGuildInfo_reflection_;
  delete GuildMSG_SC_AckGuildInfo::default_instance_;
  delete GuildMSG_SC_AckGuildInfo_reflection_;
  delete GuildMSG_CS_ReqMemberInfo::default_instance_;
  delete GuildMSG_CS_ReqMemberInfo_reflection_;
  delete GuildMSG_SC_AckMemberInfo::default_instance_;
  delete GuildMSG_SC_AckMemberInfo_reflection_;
  delete GuildMSG_CS_ReqMemberList::default_instance_;
  delete GuildMSG_CS_ReqMemberList_reflection_;
  delete GuildMSG_SC_AckMemberList::default_instance_;
  delete GuildMSG_SC_AckMemberList_reflection_;
  delete GuildMSG_CS_ReqQuit::default_instance_;
  delete GuildMSG_CS_ReqQuit_reflection_;
  delete GuildMSG_SC_AckQuit::default_instance_;
  delete GuildMSG_SC_AckQuit_reflection_;
  delete GuildMSG_CS_ReqSetJoin::default_instance_;
  delete GuildMSG_CS_ReqSetJoin_reflection_;
  delete GuildMSG_SC_AckSetJoin::default_instance_;
  delete GuildMSG_SC_AckSetJoin_reflection_;
  delete GuildMSG_CS_ReqJoinList::default_instance_;
  delete GuildMSG_CS_ReqJoinList_reflection_;
  delete GuildMSG_SC_AckJoinList::default_instance_;
  delete GuildMSG_SC_AckJoinList_reflection_;
  delete GuildMSG_CS_ReqOpreatJoiniList::default_instance_;
  delete GuildMSG_CS_ReqOpreatJoiniList_reflection_;
  delete GuildMSG_SC_AckOpreatJoiniList::default_instance_;
  delete GuildMSG_SC_AckOpreatJoiniList_reflection_;
  delete GuildMSG_CS_ReqKickOut::default_instance_;
  delete GuildMSG_CS_ReqKickOut_reflection_;
  delete GuildMSG_SC_AckKickOut::default_instance_;
  delete GuildMSG_SC_AckKickOut_reflection_;
  delete GuildMSG_CS_ReqAppointment::default_instance_;
  delete GuildMSG_CS_ReqAppointment_reflection_;
  delete GuildMSG_SC_AckAppointment::default_instance_;
  delete GuildMSG_SC_AckAppointment_reflection_;
  delete GuildMSG_CS_ReqSetGuildPlacard::default_instance_;
  delete GuildMSG_CS_ReqSetGuildPlacard_reflection_;
  delete GuildMSG_SC_AckSetGuildPlacard::default_instance_;
  delete GuildMSG_SC_AckSetGuildPlacard_reflection_;
  delete GuildMSG_CS_ReqSetRefrishMultiple::default_instance_;
  delete GuildMSG_CS_ReqSetRefrishMultiple_reflection_;
  delete GuildMSG_SC_AckSetRefrishMultiple::default_instance_;
  delete GuildMSG_SC_AckSetRefrishMultiple_reflection_;
  delete GuildMSG_CS_ReqIncreaseBuilding::default_instance_;
  delete GuildMSG_CS_ReqIncreaseBuilding_reflection_;
  delete GuildMSG_SC_AckIncreaseBuilding::default_instance_;
  delete GuildMSG_SC_AckIncreaseBuilding_reflection_;
  delete GuildMSG_CS_ReqDonate::default_instance_;
  delete GuildMSG_CS_ReqDonate_reflection_;
  delete GuildMSG_SC_AckDonate::default_instance_;
  delete GuildMSG_SC_AckDonate_reflection_;
  delete GuildMSG_CS_ReqGetWages::default_instance_;
  delete GuildMSG_CS_ReqGetWages_reflection_;
  delete GuildMSG_SC_AckGetWages::default_instance_;
  delete GuildMSG_SC_AckGetWages_reflection_;
  delete GuildMSG_CS_ReqImpeachInfo::default_instance_;
  delete GuildMSG_CS_ReqImpeachInfo_reflection_;
  delete GuildMSG_SC_AckImpeachInfo::default_instance_;
  delete GuildMSG_SC_AckImpeachInfo_reflection_;
  delete GuildMSG_CS_ReqImpeachment::default_instance_;
  delete GuildMSG_CS_ReqImpeachment_reflection_;
  delete GuildMSG_SC_AckImpeachment::default_instance_;
  delete GuildMSG_SC_AckImpeachment_reflection_;
  delete GuildMSG_CS_ReqCancelImpeachment::default_instance_;
  delete GuildMSG_CS_ReqCancelImpeachment_reflection_;
  delete GuildMSG_SC_AckCancelImpeachment::default_instance_;
  delete GuildMSG_SC_AckCancelImpeachment_reflection_;
  delete GuildMSG_CS_ReqResponse::default_instance_;
  delete GuildMSG_CS_ReqResponse_reflection_;
  delete GuildMSG_SC_AckResponse::default_instance_;
  delete GuildMSG_SC_AckResponse_reflection_;
  delete GuildMSG_CS_ReqMergeInfo::default_instance_;
  delete GuildMSG_CS_ReqMergeInfo_reflection_;
  delete GuildMSG_SC_AckMergeInfo::default_instance_;
  delete GuildMSG_SC_AckMergeInfo_reflection_;
  delete GuildMSG_CS_ReqMergeGuild::default_instance_;
  delete GuildMSG_CS_ReqMergeGuild_reflection_;
  delete GuildMSG_SC_AckMergeGuild::default_instance_;
  delete GuildMSG_SC_AckMergeGuild_reflection_;
  delete GuildMSG_CS_ReqMergeGuildList::default_instance_;
  delete GuildMSG_CS_ReqMergeGuildList_reflection_;
  delete GuildMSG_SC_AckMergeGuildList::default_instance_;
  delete GuildMSG_SC_AckMergeGuildList_reflection_;
  delete GuildMSG_CS_ReqOpreatMergeList::default_instance_;
  delete GuildMSG_CS_ReqOpreatMergeList_reflection_;
  delete GuildMSG_SC_AckOpreatMergeList::default_instance_;
  delete GuildMSG_SC_AckOpreatMergeList_reflection_;
  delete GuildMSG_CS_ReqClearMergeList::default_instance_;
  delete GuildMSG_CS_ReqClearMergeList_reflection_;
  delete GuildMSG_SC_AckClearMergeList::default_instance_;
  delete GuildMSG_SC_AckClearMergeList_reflection_;
  delete GuildMSG_CS_ReqCancelMerge::default_instance_;
  delete GuildMSG_CS_ReqCancelMerge_reflection_;
  delete GuildMSG_SC_AckCancelMerge::default_instance_;
  delete GuildMSG_SC_AckCancelMerge_reflection_;
  delete GuildMSG_CS_ReqShopInfo::default_instance_;
  delete GuildMSG_CS_ReqShopInfo_reflection_;
  delete GuildMSG_SC_AckShopInfo::default_instance_;
  delete GuildMSG_SC_AckShopInfo_reflection_;
  delete GuildMSG_CS_ReqBuyShopItem::default_instance_;
  delete GuildMSG_CS_ReqBuyShopItem_reflection_;
  delete GuildMSG_SC_AckBuyShopItem::default_instance_;
  delete GuildMSG_SC_AckBuyShopItem_reflection_;
  delete GuildMSG_CS_ReqChangeName::default_instance_;
  delete GuildMSG_CS_ReqChangeName_reflection_;
  delete GuildMSG_SC_AckChangeName::default_instance_;
  delete GuildMSG_SC_AckChangeName_reflection_;
  delete GuildMSG_SC_NotifyUpdateGuildInfo::default_instance_;
  delete GuildMSG_SC_NotifyUpdateGuildInfo_reflection_;
  delete GuildMSG_CS_ReqEnterFort::default_instance_;
  delete GuildMSG_CS_ReqEnterFort_reflection_;
  delete GuildMSG_SC_AckEnterFort::default_instance_;
  delete GuildMSG_SC_AckEnterFort_reflection_;
  delete GuildMSG_CS_EnterFortSuccess::default_instance_;
  delete GuildMSG_CS_EnterFortSuccess_reflection_;
  delete GuildMSG_CS_ReqCancelJoin::default_instance_;
  delete GuildMSG_CS_ReqCancelJoin_reflection_;
  delete GuildMSG_SC_AckCancelJoin::default_instance_;
  delete GuildMSG_SC_AckCancelJoin_reflection_;
  delete GuildMSG_CS_ReqEnterGuildIntruder::default_instance_;
  delete GuildMSG_CS_ReqEnterGuildIntruder_reflection_;
  delete GuildMSG_CS_ReqEnterGuildIntruderOK::default_instance_;
  delete GuildMSG_CS_ReqEnterGuildIntruderOK_reflection_;
  delete GuildMSG_CS_ReqLeaveGuildIntruder::default_instance_;
  delete GuildMSG_CS_ReqLeaveGuildIntruder_reflection_;
  delete GuildMSG_SC_AckEnterGuildIntruder::default_instance_;
  delete GuildMSG_SC_AckEnterGuildIntruder_reflection_;
  delete GuildMSG_SC_AckGuildIntruderEnd::default_instance_;
  delete GuildMSG_SC_AckGuildIntruderEnd_reflection_;
  delete GuildMSG_SC_AckGuildIntruderInit::default_instance_;
  delete GuildMSG_SC_AckGuildIntruderInit_reflection_;
  delete GuildMSG_SC_AckGuildIntruderTime::default_instance_;
  delete GuildMSG_SC_AckGuildIntruderTime_reflection_;
  delete GuildMSG_SC_GuildIntruderReward::default_instance_;
  delete GuildMSG_SC_GuildIntruderReward_reflection_;
  delete GuildMSG_SC_NotifyStopImpeachment::default_instance_;
  delete GuildMSG_SC_NotifyStopImpeachment_reflection_;
  delete GuildMSG_SC_NotifyContext::default_instance_;
  delete GuildMSG_SC_NotifyContext_reflection_;
  delete GuildMSG_CS_ReqSetBossOpen::default_instance_;
  delete GuildMSG_CS_ReqSetBossOpen_reflection_;
  delete GuildMSG_SC_AckBossInfo::default_instance_;
  delete GuildMSG_SC_AckBossInfo_reflection_;
  delete GuildMSG_SC_NotifyBossDie::default_instance_;
  delete GuildMSG_SC_NotifyBossDie_reflection_;
  delete GuildMSG_CS_ReqInvitePlayer::default_instance_;
  delete GuildMSG_CS_ReqInvitePlayer_reflection_;
  delete GuildMSG_SC_AckInvitePlayer::default_instance_;
  delete GuildMSG_SC_AckInvitePlayer_reflection_;
  delete GuildMSG_SC_NotifyInvitePlayer::default_instance_;
  delete GuildMSG_SC_NotifyInvitePlayer_reflection_;
  delete GuildMSG_CS_ReqInviteJoin::default_instance_;
  delete GuildMSG_CS_ReqInviteJoin_reflection_;
  delete GuildMSG_SC_AckInviteJoin::default_instance_;
  delete GuildMSG_SC_AckInviteJoin_reflection_;
  delete GuildMSG_CS_ReqGuildWarehouse::default_instance_;
  delete GuildMSG_CS_ReqGuildWarehouse_reflection_;
  delete GuildMSG_SC_AckGuildWarehouse::default_instance_;
  delete GuildMSG_SC_AckGuildWarehouse_reflection_;
  delete GuildMSG_CS_ReqDonateEquip::default_instance_;
  delete GuildMSG_CS_ReqDonateEquip_reflection_;
  delete GuildMSG_CS_ReqConversionEquip::default_instance_;
  delete GuildMSG_CS_ReqConversionEquip_reflection_;
  delete GuildMSG_CS_ReqDelGuildEquip::default_instance_;
  delete GuildMSG_CS_ReqDelGuildEquip_reflection_;
  delete GuildMSG_SC_AckGuildEquipRecord::default_instance_;
  delete GuildMSG_SC_AckGuildEquipRecord_reflection_;
}

void protobuf_AddDesc_guild_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::message::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013guild.proto\022\rproto.message\032\014common.pro"
    "to\"1\n\013KickoutInfo\022\020\n\010playerid\030\001 \001(\004\022\020\n\010o"
    "uttimes\030\002 \001(\004\"\274\002\n\rGuildListInfo\022\020\n\010rangk"
    "ing\030\001 \001(\r\022\017\n\007guildid\030\002 \001(\004\022\021\n\tguildname\030"
    "\003 \001(\t\022\022\n\nguildlevel\030\004 \001(\r\022\023\n\013guildmember"
    "\030\005 \001(\r\022\030\n\020guilddeclaration\030\006 \001(\t\022\021\n\towne"
    "rname\030\007 \001(\t\022\023\n\013guildthrive\030\010 \001(\004\022\022\n\njoin"
    "combat\030\t \001(\r\022\017\n\007canjoin\030\n \001(\010\022\021\n\tisreqjo"
    "in\030\013 \001(\010\022\017\n\007isaudit\030\014 \001(\010\0220\n\014kickinfolis"
    "t\030\r \003(\0132\032.proto.message.KickoutInfo\022\017\n\007o"
    "wnerid\030\016 \001(\004\"s\n\007ReqInfo\022\017\n\007strname\030\001 \001(\t"
    "\022\r\n\005level\030\002 \001(\r\022\022\n\nprofession\030\003 \001(\r\022\020\n\010p"
    "layerid\030\004 \001(\004\022\023\n\013combatvalue\030\005 \001(\r\022\r\n\005dh"
    "lev\030\006 \001(\r\"/\n\rGuildShopInfo\022\016\n\006itemid\030\001 \001"
    "(\r\022\016\n\006counts\030\002 \001(\r\"e\n\rQuestHelpInfo\022\020\n\010p"
    "layerid\030\001 \002(\r\022\017\n\007questid\030\002 \002(\005\022\017\n\007loopnu"
    "m\030\003 \002(\005\022\016\n\006status\030\004 \002(\005\022\020\n\010helperId\030\005 \002("
    "\r\"J\n\013ImpeachInfo\022\023\n\013impeachtime\030\001 \001(\004\022\021\n"
    "\timpeachid\030\002 \003(\004\022\023\n\013impeachname\030\003 \003(\t\"V\n"
    "\nBossDamage\022\020\n\010playerid\030\001 \001(\004\022\014\n\004name\030\002 "
    "\001(\t\022\r\n\005value\030\003 \001(\r\022\014\n\004time\030\004 \001(\004\022\013\n\003job\030"
    "\005 \001(\r\"\201\002\n\tGuildBoss\022\016\n\006bossid\030\001 \001(\r\022\021\n\th"
    "ppercent\030\002 \001(\r\022\022\n\nstarttimes\030\003 \001(\004\022\021\n\tre"
    "settime\030\004 \001(\004\022\022\n\nrewordlist\030\005 \003(\r\022+\n\010ran"
    "klist\030\006 \003(\0132\031.proto.message.BossDamage\022\020"
    "\n\010guildlev\030\007 \001(\r\022\017\n\007guildid\030\010 \001(\004\022\020\n\010fig"
    "htime\030\t \001(\004\022\024\n\014changecounts\030\n \001(\r\022\016\n\006dfH"
    "our\030\013 \001(\r\022\016\n\006dfMinu\030\014 \001(\r\"G\n\nRecordData\022"
    "\014\n\004type\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\017\n\007equipid\030\003"
    " \001(\r\022\014\n\004time\030\004 \001(\004\"\241\006\n\014MixGuildData\022\021\n\tl"
    "evuptime\030\001 \001(\004\022\017\n\007ownerid\030\002 \001(\004\022\024\n\014guild"
    "placard\030\003 \001(\t\022\017\n\007canjoin\030\004 \001(\010\022\022\n\njoinco"
    "mbat\030\005 \001(\r\022\021\n\tresources\030\006 \001(\004\022\021\n\tbuildli"
    "st\030\007 \003(\r\022\'\n\007reqlist\030\010 \003(\0132\026.proto.messag"
    "e.ReqInfo\022.\n\010shopinfo\030\t \003(\0132\034.proto.mess"
    "age.GuildShopInfo\022\027\n\017refrishmultiple\030\n \001"
    "(\r\022\023\n\013refrishtime\030\013 \001(\004\0220\n\014kickinfolist\030"
    "\014 \003(\0132\032.proto.message.KickoutInfo\022\031\n\021wee"
    "kmissioncounts\030\017 \001(\r\022\024\n\014onlinecounts\030\020 \003"
    "(\004\022.\n\010helpinfo\030\023 \003(\0132\034.proto.message.Que"
    "stHelpInfo\022\017\n\007isaudit\030\024 \001(\010\022+\n\007impinfo\030\025"
    " \001(\0132\032.proto.message.ImpeachInfo\022\030\n\020guil"
    "ddeclaration\030\026 \001(\t\022\024\n\014lastcosttime\030\027 \001(\004"
    "\022\020\n\010boomtime\030\030 \001(\004\022\026\n\016settlementtime\030\031 \001"
    "(\004\022*\n\010bossinfo\030\032 \001(\0132\030.proto.message.Gui"
    "ldBoss\022\017\n\007maxitem\030\033 \001(\r\022(\n\nguildequip\030\034 "
    "\003(\0132\024.proto.message.Equip\022\025\n\rbuygridcoun"
    "ts\030\035 \001(\r\022.\n\013depositlist\030\036 \003(\0132\031.proto.me"
    "ssage.RecordData\022,\n\tfetchlist\030\037 \003(\0132\031.pr"
    "oto.message.RecordData\"\230\001\n\tGuildData\022\017\n\007"
    "guildid\030\001 \001(\004\022\021\n\tguildname\030\002 \001(\t\022\022\n\nguil"
    "dlevel\030\003 \001(\r\022\021\n\townername\030\004 \001(\t\022\022\n\nprosp"
    "erity\030\005 \001(\r\022,\n\007mixinfo\030\006 \001(\0132\033.proto.mes"
    "sage.MixGuildData\"\356\002\n\rMixMemberDate\022\023\n\013g"
    "etwagetime\030\001 \001(\004\022\020\n\010jointime\030\002 \001(\004\022\023\n\013of"
    "flinetime\030\003 \001(\004\022\023\n\013buyitemtime\030\004 \001(\004\022\025\n\r"
    "buyitemcounts\030\005 \001(\r\022\023\n\013pendingwage\030\006 \001(\r"
    "\022\024\n\014currbasewage\030\007 \001(\r\022\023\n\013accumulated\030\010 "
    "\001(\004\022\030\n\020weekcontribution\030\t \001(\r\022\030\n\020landbat"
    "tlecounts\030\n \001(\r\022\031\n\021navalbattlecounts\030\013 \001"
    "(\r\022\027\n\017impeachmenttime\030\014 \001(\004\022\023\n\013combatval"
    "ue\030\r \001(\r\022\022\n\nalivevalue\030\016 \001(\r\022\016\n\006donate\030\017"
    " \001(\r\022\024\n\014tbrewardlist\030\020 \003(\r\"\317\001\n\017GuildMemb"
    "erData\022\020\n\010playerid\030\001 \001(\004\022\017\n\007strname\030\002 \001("
    "\t\022\r\n\005level\030\003 \001(\r\022\017\n\007guildid\030\004 \001(\004\022\023\n\013gui"
    "ldoffice\030\005 \001(\r\022\022\n\nguildmoney\030\006 \001(\r\022\022\n\npr"
    "ofession\030\007 \001(\r\022-\n\007mixinfo\030\010 \001(\0132\034.proto."
    "message.MixMemberDate\022\r\n\005dhlev\030\t \001(\r\"\254\002\n"
    "\016MemberListInfo\022\020\n\010playerid\030\001 \001(\004\022\017\n\007str"
    "name\030\002 \001(\t\022\r\n\005level\030\003 \001(\r\022\022\n\nprofession\030"
    "\004 \001(\r\022\023\n\013guildoffice\030\005 \001(\r\022\020\n\010jointime\030\006"
    " \001(\004\022\023\n\013offlinetime\030\007 \001(\004\022\023\n\013accumulated"
    "\030\010 \001(\004\022\030\n\020weekcontribution\030\t \001(\r\022\030\n\020land"
    "battlecounts\030\n \001(\r\022\031\n\021navalbattlecounts\030"
    "\013 \001(\r\022\020\n\010isonline\030\014 \001(\010\022\023\n\013combatvalue\030\r"
    " \001(\r\022\r\n\005dhlev\030\016 \001(\r\"\345\001\n\016UniteGuildData\022\017"
    "\n\007ranking\030\001 \001(\r\022\021\n\tguildname\030\002 \001(\t\022\023\n\013re"
    "qplayerid\030\003 \001(\004\022\022\n\nreqguildid\030\004 \001(\004\022\020\n\010g"
    "uildlev\030\005 \001(\r\022\021\n\tmembernum\030\006 \001(\r\022\024\n\014ackg"
    "uildname\030\007 \001(\t\022\023\n\013ackplayerid\030\010 \001(\004\022\022\n\na"
    "ckguildid\030\t \001(\004\022\021\n\twhomaster\030\n \001(\r\022\017\n\007en"
    "dtime\030\013 \001(\004\"&\n\rGuildUsedName\022\025\n\rguilduse"
    "dname\030\001 \003(\t\"\"\n\tGUsedName\022\025\n\rguildusednam"
    "e\030\001 \001(\t\"+\n\030GuildMSG_CS_ReqGuildList\022\017\n\007p"
    "agenum\030\001 \001(\r\"Z\n\030GuildMSG_SC_AckGuildList"
    "\022\016\n\006result\030\001 \001(\r\022.\n\010infolist\030\002 \003(\0132\034.pro"
    "to.message.GuildListInfo\"D\n\025GuildMSG_CS_"
    "ReqCreate\022\021\n\tguildname\030\001 \001(\t\022\030\n\020guilddec"
    "laration\030\002 \001(\t\"\'\n\025GuildMSG_SC_AckCreate\022"
    "\016\n\006reslut\030\001 \001(\r\"&\n\023GuildMSG_CS_ReqJoin\022\017"
    "\n\007guildid\030\001 \001(\004\"6\n\023GuildMSG_SC_AckJoin\022\016"
    "\n\006reslut\030\001 \001(\r\022\017\n\007timesup\030\002 \001(\004\"\032\n\030Guild"
    "MSG_CS_ReqQuickJoin\"*\n\030GuildMSG_SC_AckQu"
    "ickJoin\022\016\n\006reslut\030\001 \001(\r\"9\n\023GuildMSG_CS_R"
    "eqFind\022\021\n\tguildname\030\001 \001(\t\022\017\n\007guildid\030\002 \001"
    "(\004\"U\n\023GuildMSG_SC_AckFind\022\016\n\006counts\030\001 \001("
    "\r\022.\n\010infolist\030\002 \003(\0132\034.proto.message.Guil"
    "dListInfo\"\032\n\030GuildMSG_CS_ReqGuildInfo\"\177\n"
    "\030GuildMSG_SC_AckGuildInfo\022\016\n\006result\030\001 \001("
    "\r\022\024\n\014membercounts\030\002 \001(\r\022\020\n\010rangking\030\003 \001("
    "\r\022+\n\tguildinfo\030\006 \001(\0132\030.proto.message.Gui"
    "ldData\"-\n\031GuildMSG_CS_ReqMemberInfo\022\020\n\010p"
    "layerID\030\001 \001(\003\"_\n\031GuildMSG_SC_AckMemberIn"
    "fo\022\016\n\006result\030\001 \001(\r\0222\n\nmemberinfo\030\002 \001(\0132\036"
    ".proto.message.GuildMemberData\">\n\031GuildM"
    "SG_CS_ReqMemberList\022\017\n\007pagenum\030\001 \001(\r\022\020\n\010"
    "isInTeam\030\002 \001(\005\"_\n\031GuildMSG_SC_AckMemberL"
    "ist\022\017\n\007pagenum\030\001 \001(\r\0221\n\nmemberinfo\030\002 \003(\013"
    "2\035.proto.message.MemberListInfo\"\025\n\023Guild"
    "MSG_CS_ReqQuit\"%\n\023GuildMSG_SC_AckQuit\022\016\n"
    "\006result\030\001 \001(\r\"P\n\026GuildMSG_CS_ReqSetJoin\022"
    "\016\n\006isopen\030\001 \001(\010\022\025\n\rjoincombatser\030\002 \001(\r\022\017"
    "\n\007isaudit\030\003 \001(\010\"(\n\026GuildMSG_SC_AckSetJoi"
    "n\022\016\n\006result\030\001 \001(\r\"*\n\027GuildMSG_CS_ReqJoin"
    "List\022\017\n\007pagenum\030\001 \001(\r\"S\n\027GuildMSG_SC_Ack"
    "JoinList\022\016\n\006result\030\001 \001(\r\022(\n\010infolist\030\002 \003"
    "(\0132\026.proto.message.ReqInfo\"Y\n\036GuildMSG_C"
    "S_ReqOpreatJoiniList\022\r\n\005isdel\030\001 \001(\010\022\022\n\na"
    "llopreate\030\002 \001(\r\022\024\n\014playeridlist\030\003 \003(\004\"0\n"
    "\036GuildMSG_SC_AckOpreatJoiniList\022\016\n\006resul"
    "t\030\001 \001(\r\"*\n\026GuildMSG_CS_ReqKickOut\022\020\n\010pla"
    "yerid\030\001 \001(\004\"(\n\026GuildMSG_SC_AckKickOut\022\016\n"
    "\006result\030\001 \001(\r\">\n\032GuildMSG_CS_ReqAppointm"
    "ent\022\020\n\010playerid\030\001 \001(\004\022\016\n\006office\030\002 \001(\r\",\n"
    "\032GuildMSG_SC_AckAppointment\022\016\n\006result\030\001 "
    "\001(\r\"\?\n\036GuildMSG_CS_ReqSetGuildPlacard\022\014\n"
    "\004type\030\001 \001(\r\022\017\n\007context\030\002 \001(\t\"0\n\036GuildMSG"
    "_SC_AckSetGuildPlacard\022\016\n\006result\030\001 \001(\r\"5"
    "\n!GuildMSG_CS_ReqSetRefrishMultiple\022\020\n\010m"
    "ultiple\030\001 \001(\r\"3\n!GuildMSG_SC_AckSetRefri"
    "shMultiple\022\016\n\006result\030\001 \001(\r\"7\n\037GuildMSG_C"
    "S_ReqIncreaseBuilding\022\024\n\014buildingtype\030\001 "
    "\001(\r\"1\n\037GuildMSG_SC_AckIncreaseBuilding\022\016"
    "\n\006result\030\001 \001(\r\"7\n\025GuildMSG_CS_ReqDonate\022"
    "\016\n\006itemid\030\001 \001(\r\022\016\n\006counts\030\002 \001(\r\"\'\n\025Guild"
    "MSG_SC_AckDonate\022\016\n\006result\030\001 \001(\r\"\031\n\027Guil"
    "dMSG_CS_ReqGetWages\")\n\027GuildMSG_SC_AckGe"
    "tWages\022\016\n\006result\030\001 \001(\r\"\034\n\032GuildMSG_CS_Re"
    "qImpeachInfo\"Y\n\032GuildMSG_SC_AckImpeachIn"
    "fo\022\016\n\006result\030\001 \001(\r\022+\n\007impdata\030\002 \001(\0132\032.pr"
    "oto.message.ImpeachInfo\"\034\n\032GuildMSG_CS_R"
    "eqImpeachment\"Y\n\032GuildMSG_SC_AckImpeachm"
    "ent\022\016\n\006result\030\001 \001(\r\022+\n\007impdata\030\002 \001(\0132\032.p"
    "roto.message.ImpeachInfo\"\"\n GuildMSG_CS_"
    "ReqCancelImpeachment\"2\n GuildMSG_SC_AckC"
    "ancelImpeachment\022\016\n\006result\030\001 \001(\r\"\031\n\027Guil"
    "dMSG_CS_ReqResponse\")\n\027GuildMSG_SC_AckRe"
    "sponse\022\016\n\006result\030\001 \001(\r\"\032\n\030GuildMSG_CS_Re"
    "qMergeInfo\"W\n\030GuildMSG_SC_AckMergeInfo\022\016"
    "\n\006result\030\001 \001(\r\022+\n\004data\030\002 \001(\0132\035.proto.mes"
    "sage.UniteGuildData\"B\n\031GuildMSG_CS_ReqMe"
    "rgeGuild\022\023\n\013recvguildid\030\001 \001(\004\022\020\n\010masteri"
    "d\030\002 \001(\004\"+\n\031GuildMSG_SC_AckMergeGuild\022\016\n\006"
    "result\030\001 \001(\r\"\037\n\035GuildMSG_CS_ReqMergeGuil"
    "dList\"P\n\035GuildMSG_SC_AckMergeGuildList\022/"
    "\n\010datalist\030\001 \003(\0132\035.proto.message.UniteGu"
    "ildData\"4\n\036GuildMSG_CS_ReqOpreatMergeLis"
    "t\022\022\n\nuniteguild\030\001 \001(\004\"0\n\036GuildMSG_SC_Ack"
    "OpreatMergeList\022\016\n\006result\030\001 \001(\r\"\037\n\035Guild"
    "MSG_CS_ReqClearMergeList\"/\n\035GuildMSG_SC_"
    "AckClearMergeList\022\016\n\006result\030\001 \001(\r\"\034\n\032Gui"
    "ldMSG_CS_ReqCancelMerge\",\n\032GuildMSG_SC_A"
    "ckCancelMerge\022\016\n\006result\030\001 \001(\r\"\031\n\027GuildMS"
    "G_CS_ReqShopInfo\"Y\n\027GuildMSG_SC_AckShopI"
    "nfo\022\016\n\006result\030\001 \001(\r\022.\n\010shopinfo\030\002 \003(\0132\034."
    "proto.message.GuildShopInfo\"<\n\032GuildMSG_"
    "CS_ReqBuyShopItem\022\016\n\006itemid\030\001 \001(\r\022\016\n\006cou"
    "nts\030\002 \001(\r\",\n\032GuildMSG_SC_AckBuyShopItem\022"
    "\016\n\006result\030\001 \001(\r\",\n\031GuildMSG_CS_ReqChange"
    "Name\022\017\n\007newname\030\001 \001(\t\"+\n\031GuildMSG_SC_Ack"
    "ChangeName\022\016\n\006result\030\001 \001(\r\"U\n!GuildMSG_S"
    "C_NotifyUpdateGuildInfo\022\016\n\006result\030\001 \001(\r\022"
    "\020\n\010strValue\030\002 \001(\t\022\016\n\006uValue\030\003 \001(\004\"\032\n\030Gui"
    "ldMSG_CS_ReqEnterFort\"y\n\030GuildMSG_SC_Ack"
    "EnterFort\022\016\n\006result\030\001 \001(\r\022\r\n\005mapid\030\002 \002(\r"
    "\022\"\n\002pt\030\003 \001(\0132\026.proto.message.Point3D\022\013\n\003"
    "dir\030\004 \001(\002\022\r\n\005layer\030\005 \001(\005\"\036\n\034GuildMSG_CS_"
    "EnterFortSuccess\",\n\031GuildMSG_CS_ReqCance"
    "lJoin\022\017\n\007guildid\030\001 \001(\004\"+\n\031GuildMSG_SC_Ac"
    "kCancelJoin\022\016\n\006result\030\001 \001(\r\"#\n!GuildMSG_"
    "CS_ReqEnterGuildIntruder\"%\n#GuildMSG_CS_"
    "ReqEnterGuildIntruderOK\"#\n!GuildMSG_CS_R"
    "eqLeaveGuildIntruder\"r\n!GuildMSG_SC_AckE"
    "nterGuildIntruder\022\r\n\005mapid\030\001 \002(\r\022\"\n\002pt\030\002"
    " \001(\0132\026.proto.message.Point3D\022\013\n\003dir\030\003 \001("
    "\002\022\r\n\005layer\030\004 \001(\005\"!\n\037GuildMSG_SC_AckGuild"
    "IntruderEnd\"\212\001\n GuildMSG_SC_AckGuildIntr"
    "uderInit\022\023\n\013surplustime\030\001 \002(\005\022\r\n\005times\030\002"
    " \001(\005\022\026\n\016reward_percent\030\003 \001(\005\022*\n\nchest_li"
    "st\030\004 \003(\0132\026.proto.message.IDTimes\"1\n Guil"
    "dMSG_SC_AckGuildIntruderTime\022\r\n\005times\030\001 "
    "\001(\005\"9\n\037GuildMSG_SC_GuildIntruderReward\022\026"
    "\n\016reward_percent\030\001 \001(\005\"G\n!GuildMSG_SC_No"
    "tifyStopImpeachment\022\016\n\006result\030\001 \001(\r\022\022\n\no"
    "wnnername\030\002 \001(\t\"B\n\031GuildMSG_SC_NotifyCon"
    "text\022\021\n\tcontextid\030\001 \001(\r\022\022\n\ncontextpar\030\002 "
    "\001(\t\"I\n\032GuildMSG_CS_ReqSetBossOpen\022\017\n\007isT"
    "oday\030\001 \001(\r\022\014\n\004hour\030\002 \001(\r\022\014\n\004minu\030\003 \001(\r\"Q"
    "\n\027GuildMSG_SC_AckBossInfo\022\016\n\006result\030\001 \001("
    "\r\022&\n\004info\030\002 \001(\0132\030.proto.message.GuildBos"
    "s\"+\n\031GuildMSG_SC_NotifyBossDie\022\016\n\006status"
    "\030\001 \001(\r\"/\n\033GuildMSG_CS_ReqInvitePlayer\022\020\n"
    "\010playerid\030\001 \001(\004\"-\n\033GuildMSG_SC_AckInvite"
    "Player\022\016\n\006result\030\001 \001(\r\"U\n\036GuildMSG_SC_No"
    "tifyInvitePlayer\022\017\n\007inviter\030\001 \001(\t\022\017\n\007gui"
    "ldid\030\002 \001(\004\022\021\n\tguildname\030\003 \001(\t\"<\n\031GuildMS"
    "G_CS_ReqInviteJoin\022\016\n\006isJoin\030\001 \001(\r\022\017\n\007gu"
    "ildid\030\002 \001(\004\"+\n\031GuildMSG_SC_AckInviteJoin"
    "\022\016\n\006result\030\001 \001(\r\"\037\n\035GuildMSG_CS_ReqGuild"
    "Warehouse\"j\n\035GuildMSG_SC_AckGuildWarehou"
    "se\022(\n\nguildequip\030\001 \003(\0132\024.proto.message.E"
    "quip\022\017\n\007gridnum\030\002 \001(\r\022\016\n\006buynum\030\003 \001(\r\"/\n"
    "\032GuildMSG_CS_ReqDonateEquip\022\021\n\tequipuuid"
    "\030\001 \001(\004\"3\n\036GuildMSG_CS_ReqConversionEquip"
    "\022\021\n\tequipuuid\030\001 \001(\004\"1\n\034GuildMSG_CS_ReqDe"
    "lGuildEquip\022\021\n\tequiplist\030\001 \003(\004\"\177\n\037GuildM"
    "SG_SC_AckGuildEquipRecord\022.\n\013depositlist"
    "\030\001 \003(\0132\031.proto.message.RecordData\022,\n\tfet"
    "chlist\030\002 \003(\0132\031.proto.message.RecordData*"
    "\210\001\n\007eOffice\022\024\n\020eOffice_Chairman\020\001\022\030\n\024eOf"
    "fice_ViceChairman\020\002\022\022\n\016eOffice_Elders\020\003\022"
    "\021\n\reOffice_Elite\020\004\022\020\n\014eOffice_Baby\020\005\022\024\n\020"
    "eOffice_Ordinary\020\006*\323\001\n\010ePurview\022\030\n\024ePurv"
    "iew_Appointment\020\001\022\032\n\026ePurview_JoinSuperv"
    "ise\020\002\022\027\n\023ePurview_SetPlacard\020\004\022\027\n\023ePurvi"
    "ew_UniteGuild\020\010\022\024\n\020ePurview_Upgrade\020\020\022\031\n"
    "\025ePurview_OpenActivity\020 \022\027\n\023ePurview_Ope"
    "nBattle\020@\022\025\n\020ePurview_KickOut\020\200\001*\205\002\n\013eNo"
    "tifyType\022\033\n\027eNotifyType_JoinSuccess\020\001\022\035\n"
    "\031eNotifyType_ReqListUpdate\020\002\022 \n\034eNotifyT"
    "ype_MergerListUpdate\020\003\022\024\n\020eNotifyType_Qu"
    "it\020\004\022\035\n\031eNotifyType_UpdateMemData\020\005\022\037\n\033e"
    "NotifyType_UpdateGuildData\020\006\022\037\n\033eNotifyT"
    "ype_ReLoadGuildData\020\007\022!\n\035eNotifyType_Oth"
    "erCancelMerger\020\010B\017\n\rproto.message", 9393);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "guild.proto", &protobuf_RegisterTypes);
  KickoutInfo::default_instance_ = new KickoutInfo();
  GuildListInfo::default_instance_ = new GuildListInfo();
  ReqInfo::default_instance_ = new ReqInfo();
  GuildShopInfo::default_instance_ = new GuildShopInfo();
  QuestHelpInfo::default_instance_ = new QuestHelpInfo();
  ImpeachInfo::default_instance_ = new ImpeachInfo();
  BossDamage::default_instance_ = new BossDamage();
  GuildBoss::default_instance_ = new GuildBoss();
  RecordData::default_instance_ = new RecordData();
  MixGuildData::default_instance_ = new MixGuildData();
  GuildData::default_instance_ = new GuildData();
  MixMemberDate::default_instance_ = new MixMemberDate();
  GuildMemberData::default_instance_ = new GuildMemberData();
  MemberListInfo::default_instance_ = new MemberListInfo();
  UniteGuildData::default_instance_ = new UniteGuildData();
  GuildUsedName::default_instance_ = new GuildUsedName();
  GUsedName::default_instance_ = new GUsedName();
  GuildMSG_CS_ReqGuildList::default_instance_ = new GuildMSG_CS_ReqGuildList();
  GuildMSG_SC_AckGuildList::default_instance_ = new GuildMSG_SC_AckGuildList();
  GuildMSG_CS_ReqCreate::default_instance_ = new GuildMSG_CS_ReqCreate();
  GuildMSG_SC_AckCreate::default_instance_ = new GuildMSG_SC_AckCreate();
  GuildMSG_CS_ReqJoin::default_instance_ = new GuildMSG_CS_ReqJoin();
  GuildMSG_SC_AckJoin::default_instance_ = new GuildMSG_SC_AckJoin();
  GuildMSG_CS_ReqQuickJoin::default_instance_ = new GuildMSG_CS_ReqQuickJoin();
  GuildMSG_SC_AckQuickJoin::default_instance_ = new GuildMSG_SC_AckQuickJoin();
  GuildMSG_CS_ReqFind::default_instance_ = new GuildMSG_CS_ReqFind();
  GuildMSG_SC_AckFind::default_instance_ = new GuildMSG_SC_AckFind();
  GuildMSG_CS_ReqGuildInfo::default_instance_ = new GuildMSG_CS_ReqGuildInfo();
  GuildMSG_SC_AckGuildInfo::default_instance_ = new GuildMSG_SC_AckGuildInfo();
  GuildMSG_CS_ReqMemberInfo::default_instance_ = new GuildMSG_CS_ReqMemberInfo();
  GuildMSG_SC_AckMemberInfo::default_instance_ = new GuildMSG_SC_AckMemberInfo();
  GuildMSG_CS_ReqMemberList::default_instance_ = new GuildMSG_CS_ReqMemberList();
  GuildMSG_SC_AckMemberList::default_instance_ = new GuildMSG_SC_AckMemberList();
  GuildMSG_CS_ReqQuit::default_instance_ = new GuildMSG_CS_ReqQuit();
  GuildMSG_SC_AckQuit::default_instance_ = new GuildMSG_SC_AckQuit();
  GuildMSG_CS_ReqSetJoin::default_instance_ = new GuildMSG_CS_ReqSetJoin();
  GuildMSG_SC_AckSetJoin::default_instance_ = new GuildMSG_SC_AckSetJoin();
  GuildMSG_CS_ReqJoinList::default_instance_ = new GuildMSG_CS_ReqJoinList();
  GuildMSG_SC_AckJoinList::default_instance_ = new GuildMSG_SC_AckJoinList();
  GuildMSG_CS_ReqOpreatJoiniList::default_instance_ = new GuildMSG_CS_ReqOpreatJoiniList();
  GuildMSG_SC_AckOpreatJoiniList::default_instance_ = new GuildMSG_SC_AckOpreatJoiniList();
  GuildMSG_CS_ReqKickOut::default_instance_ = new GuildMSG_CS_ReqKickOut();
  GuildMSG_SC_AckKickOut::default_instance_ = new GuildMSG_SC_AckKickOut();
  GuildMSG_CS_ReqAppointment::default_instance_ = new GuildMSG_CS_ReqAppointment();
  GuildMSG_SC_AckAppointment::default_instance_ = new GuildMSG_SC_AckAppointment();
  GuildMSG_CS_ReqSetGuildPlacard::default_instance_ = new GuildMSG_CS_ReqSetGuildPlacard();
  GuildMSG_SC_AckSetGuildPlacard::default_instance_ = new GuildMSG_SC_AckSetGuildPlacard();
  GuildMSG_CS_ReqSetRefrishMultiple::default_instance_ = new GuildMSG_CS_ReqSetRefrishMultiple();
  GuildMSG_SC_AckSetRefrishMultiple::default_instance_ = new GuildMSG_SC_AckSetRefrishMultiple();
  GuildMSG_CS_ReqIncreaseBuilding::default_instance_ = new GuildMSG_CS_ReqIncreaseBuilding();
  GuildMSG_SC_AckIncreaseBuilding::default_instance_ = new GuildMSG_SC_AckIncreaseBuilding();
  GuildMSG_CS_ReqDonate::default_instance_ = new GuildMSG_CS_ReqDonate();
  GuildMSG_SC_AckDonate::default_instance_ = new GuildMSG_SC_AckDonate();
  GuildMSG_CS_ReqGetWages::default_instance_ = new GuildMSG_CS_ReqGetWages();
  GuildMSG_SC_AckGetWages::default_instance_ = new GuildMSG_SC_AckGetWages();
  GuildMSG_CS_ReqImpeachInfo::default_instance_ = new GuildMSG_CS_ReqImpeachInfo();
  GuildMSG_SC_AckImpeachInfo::default_instance_ = new GuildMSG_SC_AckImpeachInfo();
  GuildMSG_CS_ReqImpeachment::default_instance_ = new GuildMSG_CS_ReqImpeachment();
  GuildMSG_SC_AckImpeachment::default_instance_ = new GuildMSG_SC_AckImpeachment();
  GuildMSG_CS_ReqCancelImpeachment::default_instance_ = new GuildMSG_CS_ReqCancelImpeachment();
  GuildMSG_SC_AckCancelImpeachment::default_instance_ = new GuildMSG_SC_AckCancelImpeachment();
  GuildMSG_CS_ReqResponse::default_instance_ = new GuildMSG_CS_ReqResponse();
  GuildMSG_SC_AckResponse::default_instance_ = new GuildMSG_SC_AckResponse();
  GuildMSG_CS_ReqMergeInfo::default_instance_ = new GuildMSG_CS_ReqMergeInfo();
  GuildMSG_SC_AckMergeInfo::default_instance_ = new GuildMSG_SC_AckMergeInfo();
  GuildMSG_CS_ReqMergeGuild::default_instance_ = new GuildMSG_CS_ReqMergeGuild();
  GuildMSG_SC_AckMergeGuild::default_instance_ = new GuildMSG_SC_AckMergeGuild();
  GuildMSG_CS_ReqMergeGuildList::default_instance_ = new GuildMSG_CS_ReqMergeGuildList();
  GuildMSG_SC_AckMergeGuildList::default_instance_ = new GuildMSG_SC_AckMergeGuildList();
  GuildMSG_CS_ReqOpreatMergeList::default_instance_ = new GuildMSG_CS_ReqOpreatMergeList();
  GuildMSG_SC_AckOpreatMergeList::default_instance_ = new GuildMSG_SC_AckOpreatMergeList();
  GuildMSG_CS_ReqClearMergeList::default_instance_ = new GuildMSG_CS_ReqClearMergeList();
  GuildMSG_SC_AckClearMergeList::default_instance_ = new GuildMSG_SC_AckClearMergeList();
  GuildMSG_CS_ReqCancelMerge::default_instance_ = new GuildMSG_CS_ReqCancelMerge();
  GuildMSG_SC_AckCancelMerge::default_instance_ = new GuildMSG_SC_AckCancelMerge();
  GuildMSG_CS_ReqShopInfo::default_instance_ = new GuildMSG_CS_ReqShopInfo();
  GuildMSG_SC_AckShopInfo::default_instance_ = new GuildMSG_SC_AckShopInfo();
  GuildMSG_CS_ReqBuyShopItem::default_instance_ = new GuildMSG_CS_ReqBuyShopItem();
  GuildMSG_SC_AckBuyShopItem::default_instance_ = new GuildMSG_SC_AckBuyShopItem();
  GuildMSG_CS_ReqChangeName::default_instance_ = new GuildMSG_CS_ReqChangeName();
  GuildMSG_SC_AckChangeName::default_instance_ = new GuildMSG_SC_AckChangeName();
  GuildMSG_SC_NotifyUpdateGuildInfo::default_instance_ = new GuildMSG_SC_NotifyUpdateGuildInfo();
  GuildMSG_CS_ReqEnterFort::default_instance_ = new GuildMSG_CS_ReqEnterFort();
  GuildMSG_SC_AckEnterFort::default_instance_ = new GuildMSG_SC_AckEnterFort();
  GuildMSG_CS_EnterFortSuccess::default_instance_ = new GuildMSG_CS_EnterFortSuccess();
  GuildMSG_CS_ReqCancelJoin::default_instance_ = new GuildMSG_CS_ReqCancelJoin();
  GuildMSG_SC_AckCancelJoin::default_instance_ = new GuildMSG_SC_AckCancelJoin();
  GuildMSG_CS_ReqEnterGuildIntruder::default_instance_ = new GuildMSG_CS_ReqEnterGuildIntruder();
  GuildMSG_CS_ReqEnterGuildIntruderOK::default_instance_ = new GuildMSG_CS_ReqEnterGuildIntruderOK();
  GuildMSG_CS_ReqLeaveGuildIntruder::default_instance_ = new GuildMSG_CS_ReqLeaveGuildIntruder();
  GuildMSG_SC_AckEnterGuildIntruder::default_instance_ = new GuildMSG_SC_AckEnterGuildIntruder();
  GuildMSG_SC_AckGuildIntruderEnd::default_instance_ = new GuildMSG_SC_AckGuildIntruderEnd();
  GuildMSG_SC_AckGuildIntruderInit::default_instance_ = new GuildMSG_SC_AckGuildIntruderInit();
  GuildMSG_SC_AckGuildIntruderTime::default_instance_ = new GuildMSG_SC_AckGuildIntruderTime();
  GuildMSG_SC_GuildIntruderReward::default_instance_ = new GuildMSG_SC_GuildIntruderReward();
  GuildMSG_SC_NotifyStopImpeachment::default_instance_ = new GuildMSG_SC_NotifyStopImpeachment();
  GuildMSG_SC_NotifyContext::default_instance_ = new GuildMSG_SC_NotifyContext();
  GuildMSG_CS_ReqSetBossOpen::default_instance_ = new GuildMSG_CS_ReqSetBossOpen();
  GuildMSG_SC_AckBossInfo::default_instance_ = new GuildMSG_SC_AckBossInfo();
  GuildMSG_SC_NotifyBossDie::default_instance_ = new GuildMSG_SC_NotifyBossDie();
  GuildMSG_CS_ReqInvitePlayer::default_instance_ = new GuildMSG_CS_ReqInvitePlayer();
  GuildMSG_SC_AckInvitePlayer::default_instance_ = new GuildMSG_SC_AckInvitePlayer();
  GuildMSG_SC_NotifyInvitePlayer::default_instance_ = new GuildMSG_SC_NotifyInvitePlayer();
  GuildMSG_CS_ReqInviteJoin::default_instance_ = new GuildMSG_CS_ReqInviteJoin();
  GuildMSG_SC_AckInviteJoin::default_instance_ = new GuildMSG_SC_AckInviteJoin();
  GuildMSG_CS_ReqGuildWarehouse::default_instance_ = new GuildMSG_CS_ReqGuildWarehouse();
  GuildMSG_SC_AckGuildWarehouse::default_instance_ = new GuildMSG_SC_AckGuildWarehouse();
  GuildMSG_CS_ReqDonateEquip::default_instance_ = new GuildMSG_CS_ReqDonateEquip();
  GuildMSG_CS_ReqConversionEquip::default_instance_ = new GuildMSG_CS_ReqConversionEquip();
  GuildMSG_CS_ReqDelGuildEquip::default_instance_ = new GuildMSG_CS_ReqDelGuildEquip();
  GuildMSG_SC_AckGuildEquipRecord::default_instance_ = new GuildMSG_SC_AckGuildEquipRecord();
  KickoutInfo::default_instance_->InitAsDefaultInstance();
  GuildListInfo::default_instance_->InitAsDefaultInstance();
  ReqInfo::default_instance_->InitAsDefaultInstance();
  GuildShopInfo::default_instance_->InitAsDefaultInstance();
  QuestHelpInfo::default_instance_->InitAsDefaultInstance();
  ImpeachInfo::default_instance_->InitAsDefaultInstance();
  BossDamage::default_instance_->InitAsDefaultInstance();
  GuildBoss::default_instance_->InitAsDefaultInstance();
  RecordData::default_instance_->InitAsDefaultInstance();
  MixGuildData::default_instance_->InitAsDefaultInstance();
  GuildData::default_instance_->InitAsDefaultInstance();
  MixMemberDate::default_instance_->InitAsDefaultInstance();
  GuildMemberData::default_instance_->InitAsDefaultInstance();
  MemberListInfo::default_instance_->InitAsDefaultInstance();
  UniteGuildData::default_instance_->InitAsDefaultInstance();
  GuildUsedName::default_instance_->InitAsDefaultInstance();
  GUsedName::default_instance_->InitAsDefaultInstance();
  GuildMSG_CS_ReqGuildList::default_instance_->InitAsDefaultInstance();
  GuildMSG_SC_AckGuildList::default_instance_->InitAsDefaultInstance();
  GuildMSG_CS_ReqCreate::default_instance_->InitAsDefaultInstance();
  GuildMSG_SC_AckCreate::default_instance_->InitAsDefaultInstance();
  GuildMSG_CS_ReqJoin::default_instance_->InitAsDefaultInstance();
  GuildMSG_SC_AckJoin::default_instance_->InitAsDefaultInstance();
  GuildMSG_CS_ReqQuickJoin::default_instance_->InitAsDefaultInstance();
  GuildMSG_SC_AckQuickJoin::default_instance_->InitAsDefaultInstance();
  GuildMSG_CS_ReqFind::default_instance_->InitAsDefaultInstance();
  GuildMSG_SC_AckFind::default_instance_->InitAsDefaultInstance();
  GuildMSG_CS_ReqGuildInfo::default_instance_->InitAsDefaultInstance();
  GuildMSG_SC_AckGuildInfo::default_instance_->InitAsDefaultInstance();
  GuildMSG_CS_ReqMemberInfo::default_instance_->InitAsDefaultInstance();
  GuildMSG_SC_AckMemberInfo::default_instance_->InitAsDefaultInstance();
  GuildMSG_CS_ReqMemberList::default_instance_->InitAsDefaultInstance();
  GuildMSG_SC_AckMemberList::default_instance_->InitAsDefaultInstance();
  GuildMSG_CS_ReqQuit::default_instance_->InitAsDefaultInstance();
  GuildMSG_SC_AckQuit::default_instance_->InitAsDefaultInstance();
  GuildMSG_CS_ReqSetJoin::default_instance_->InitAsDefaultInstance();
  GuildMSG_SC_AckSetJoin::default_instance_->InitAsDefaultInstance();
  GuildMSG_CS_ReqJoinList::default_instance_->InitAsDefaultInstance();
  GuildMSG_SC_AckJoinList::default_instance_->InitAsDefaultInstance();
  GuildMSG_CS_ReqOpreatJoiniList::default_instance_->InitAsDefaultInstance();
  GuildMSG_SC_AckOpreatJoiniList::default_instance_->InitAsDefaultInstance();
  GuildMSG_CS_ReqKickOut::default_instance_->InitAsDefaultInstance();
  GuildMSG_SC_AckKickOut::default_instance_->InitAsDefaultInstance();
  GuildMSG_CS_ReqAppointment::default_instance_->InitAsDefaultInstance();
  GuildMSG_SC_AckAppointment::default_instance_->InitAsDefaultInstance();
  GuildMSG_CS_ReqSetGuildPlacard::default_instance_->InitAsDefaultInstance();
  GuildMSG_SC_AckSetGuildPlacard::default_instance_->InitAsDefaultInstance();
  GuildMSG_CS_ReqSetRefrishMultiple::default_instance_->InitAsDefaultInstance();
  GuildMSG_SC_AckSetRefrishMultiple::default_instance_->InitAsDefaultInstance();
  GuildMSG_CS_ReqIncreaseBuilding::default_instance_->InitAsDefaultInstance();
  GuildMSG_SC_AckIncreaseBuilding::default_instance_->InitAsDefaultInstance();
  GuildMSG_CS_ReqDonate::default_instance_->InitAsDefaultInstance();
  GuildMSG_SC_AckDonate::default_instance_->InitAsDefaultInstance();
  GuildMSG_CS_ReqGetWages::default_instance_->InitAsDefaultInstance();
  GuildMSG_SC_AckGetWages::default_instance_->InitAsDefaultInstance();
  GuildMSG_CS_ReqImpeachInfo::default_instance_->InitAsDefaultInstance();
  GuildMSG_SC_AckImpeachInfo::default_instance_->InitAsDefaultInstance();
  GuildMSG_CS_ReqImpeachment::default_instance_->InitAsDefaultInstance();
  GuildMSG_SC_AckImpeachment::default_instance_->InitAsDefaultInstance();
  GuildMSG_CS_ReqCancelImpeachment::default_instance_->InitAsDefaultInstance();
  GuildMSG_SC_AckCancelImpeachment::default_instance_->InitAsDefaultInstance();
  GuildMSG_CS_ReqResponse::default_instance_->InitAsDefaultInstance();
  GuildMSG_SC_AckResponse::default_instance_->InitAsDefaultInstance();
  GuildMSG_CS_ReqMergeInfo::default_instance_->InitAsDefaultInstance();
  GuildMSG_SC_AckMergeInfo::default_instance_->InitAsDefaultInstance();
  GuildMSG_CS_ReqMergeGuild::default_instance_->InitAsDefaultInstance();
  GuildMSG_SC_AckMergeGuild::default_instance_->InitAsDefaultInstance();
  GuildMSG_CS_ReqMergeGuildList::default_instance_->InitAsDefaultInstance();
  GuildMSG_SC_AckMergeGuildList::default_instance_->InitAsDefaultInstance();
  GuildMSG_CS_ReqOpreatMergeList::default_instance_->InitAsDefaultInstance();
  GuildMSG_SC_AckOpreatMergeList::default_instance_->InitAsDefaultInstance();
  GuildMSG_CS_ReqClearMergeList::default_instance_->InitAsDefaultInstance();
  GuildMSG_SC_AckClearMergeList::default_instance_->InitAsDefaultInstance();
  GuildMSG_CS_ReqCancelMerge::default_instance_->InitAsDefaultInstance();
  GuildMSG_SC_AckCancelMerge::default_instance_->InitAsDefaultInstance();
  GuildMSG_CS_ReqShopInfo::default_instance_->InitAsDefaultInstance();
  GuildMSG_SC_AckShopInfo::default_instance_->InitAsDefaultInstance();
  GuildMSG_CS_ReqBuyShopItem::default_instance_->InitAsDefaultInstance();
  GuildMSG_SC_AckBuyShopItem::default_instance_->InitAsDefaultInstance();
  GuildMSG_CS_ReqChangeName::default_instance_->InitAsDefaultInstance();
  GuildMSG_SC_AckChangeName::default_instance_->InitAsDefaultInstance();
  GuildMSG_SC_NotifyUpdateGuildInfo::default_instance_->InitAsDefaultInstance();
  GuildMSG_CS_ReqEnterFort::default_instance_->InitAsDefaultInstance();
  GuildMSG_SC_AckEnterFort::default_instance_->InitAsDefaultInstance();
  GuildMSG_CS_EnterFortSuccess::default_instance_->InitAsDefaultInstance();
  GuildMSG_CS_ReqCancelJoin::default_instance_->InitAsDefaultInstance();
  GuildMSG_SC_AckCancelJoin::default_instance_->InitAsDefaultInstance();
  GuildMSG_CS_ReqEnterGuildIntruder::default_instance_->InitAsDefaultInstance();
  GuildMSG_CS_ReqEnterGuildIntruderOK::default_instance_->InitAsDefaultInstance();
  GuildMSG_CS_ReqLeaveGuildIntruder::default_instance_->InitAsDefaultInstance();
  GuildMSG_SC_AckEnterGuildIntruder::default_instance_->InitAsDefaultInstance();
  GuildMSG_SC_AckGuildIntruderEnd::default_instance_->InitAsDefaultInstance();
  GuildMSG_SC_AckGuildIntruderInit::default_instance_->InitAsDefaultInstance();
  GuildMSG_SC_AckGuildIntruderTime::default_instance_->InitAsDefaultInstance();
  GuildMSG_SC_GuildIntruderReward::default_instance_->InitAsDefaultInstance();
  GuildMSG_SC_NotifyStopImpeachment::default_instance_->InitAsDefaultInstance();
  GuildMSG_SC_NotifyContext::default_instance_->InitAsDefaultInstance();
  GuildMSG_CS_ReqSetBossOpen::default_instance_->InitAsDefaultInstance();
  GuildMSG_SC_AckBossInfo::default_instance_->InitAsDefaultInstance();
  GuildMSG_SC_NotifyBossDie::default_instance_->InitAsDefaultInstance();
  GuildMSG_CS_ReqInvitePlayer::default_instance_->InitAsDefaultInstance();
  GuildMSG_SC_AckInvitePlayer::default_instance_->InitAsDefaultInstance();
  GuildMSG_SC_NotifyInvitePlayer::default_instance_->InitAsDefaultInstance();
  GuildMSG_CS_ReqInviteJoin::default_instance_->InitAsDefaultInstance();
  GuildMSG_SC_AckInviteJoin::default_instance_->InitAsDefaultInstance();
  GuildMSG_CS_ReqGuildWarehouse::default_instance_->InitAsDefaultInstance();
  GuildMSG_SC_AckGuildWarehouse::default_instance_->InitAsDefaultInstance();
  GuildMSG_CS_ReqDonateEquip::default_instance_->InitAsDefaultInstance();
  GuildMSG_CS_ReqConversionEquip::default_instance_->InitAsDefaultInstance();
  GuildMSG_CS_ReqDelGuildEquip::default_instance_->InitAsDefaultInstance();
  GuildMSG_SC_AckGuildEquipRecord::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_guild_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_guild_2eproto {
  StaticDescriptorInitializer_guild_2eproto() {
    protobuf_AddDesc_guild_2eproto();
  }
} static_descriptor_initializer_guild_2eproto_;
const ::google::protobuf::EnumDescriptor* eOffice_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eOffice_descriptor_;
}
bool eOffice_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ePurview_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ePurview_descriptor_;
}
bool ePurview_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eNotifyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eNotifyType_descriptor_;
}
bool eNotifyType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int KickoutInfo::kPlayeridFieldNumber;
const int KickoutInfo::kOuttimesFieldNumber;
#endif  // !_MSC_VER

KickoutInfo::KickoutInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KickoutInfo::InitAsDefaultInstance() {
}

KickoutInfo::KickoutInfo(const KickoutInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KickoutInfo::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  outtimes_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KickoutInfo::~KickoutInfo() {
  SharedDtor();
}

void KickoutInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KickoutInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KickoutInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KickoutInfo_descriptor_;
}

const KickoutInfo& KickoutInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

KickoutInfo* KickoutInfo::default_instance_ = NULL;

KickoutInfo* KickoutInfo::New() const {
  return new KickoutInfo;
}

void KickoutInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
    outtimes_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KickoutInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_outtimes;
        break;
      }

      // optional uint64 outtimes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outtimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &outtimes_)));
          set_has_outtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KickoutInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  // optional uint64 outtimes = 2;
  if (has_outtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->outtimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KickoutInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  // optional uint64 outtimes = 2;
  if (has_outtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->outtimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KickoutInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // optional uint64 outtimes = 2;
    if (has_outtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->outtimes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KickoutInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KickoutInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KickoutInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KickoutInfo::MergeFrom(const KickoutInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_outtimes()) {
      set_outtimes(from.outtimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KickoutInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickoutInfo::CopyFrom(const KickoutInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickoutInfo::IsInitialized() const {

  return true;
}

void KickoutInfo::Swap(KickoutInfo* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(outtimes_, other->outtimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KickoutInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KickoutInfo_descriptor_;
  metadata.reflection = KickoutInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildListInfo::kRangkingFieldNumber;
const int GuildListInfo::kGuildidFieldNumber;
const int GuildListInfo::kGuildnameFieldNumber;
const int GuildListInfo::kGuildlevelFieldNumber;
const int GuildListInfo::kGuildmemberFieldNumber;
const int GuildListInfo::kGuilddeclarationFieldNumber;
const int GuildListInfo::kOwnernameFieldNumber;
const int GuildListInfo::kGuildthriveFieldNumber;
const int GuildListInfo::kJoincombatFieldNumber;
const int GuildListInfo::kCanjoinFieldNumber;
const int GuildListInfo::kIsreqjoinFieldNumber;
const int GuildListInfo::kIsauditFieldNumber;
const int GuildListInfo::kKickinfolistFieldNumber;
const int GuildListInfo::kOwneridFieldNumber;
#endif  // !_MSC_VER

GuildListInfo::GuildListInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildListInfo::InitAsDefaultInstance() {
}

GuildListInfo::GuildListInfo(const GuildListInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildListInfo::SharedCtor() {
  _cached_size_ = 0;
  rangking_ = 0u;
  guildid_ = GOOGLE_ULONGLONG(0);
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guildlevel_ = 0u;
  guildmember_ = 0u;
  guilddeclaration_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ownername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guildthrive_ = GOOGLE_ULONGLONG(0);
  joincombat_ = 0u;
  canjoin_ = false;
  isreqjoin_ = false;
  isaudit_ = false;
  ownerid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildListInfo::~GuildListInfo() {
  SharedDtor();
}

void GuildListInfo::SharedDtor() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (guilddeclaration_ != &::google::protobuf::internal::kEmptyString) {
    delete guilddeclaration_;
  }
  if (ownername_ != &::google::protobuf::internal::kEmptyString) {
    delete ownername_;
  }
  if (this != default_instance_) {
  }
}

void GuildListInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildListInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildListInfo_descriptor_;
}

const GuildListInfo& GuildListInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildListInfo* GuildListInfo::default_instance_ = NULL;

GuildListInfo* GuildListInfo::New() const {
  return new GuildListInfo;
}

void GuildListInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rangking_ = 0u;
    guildid_ = GOOGLE_ULONGLONG(0);
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
    guildlevel_ = 0u;
    guildmember_ = 0u;
    if (has_guilddeclaration()) {
      if (guilddeclaration_ != &::google::protobuf::internal::kEmptyString) {
        guilddeclaration_->clear();
      }
    }
    if (has_ownername()) {
      if (ownername_ != &::google::protobuf::internal::kEmptyString) {
        ownername_->clear();
      }
    }
    guildthrive_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    joincombat_ = 0u;
    canjoin_ = false;
    isreqjoin_ = false;
    isaudit_ = false;
    ownerid_ = GOOGLE_ULONGLONG(0);
  }
  kickinfolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildListInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rangking = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rangking_)));
          set_has_rangking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guildid;
        break;
      }

      // optional uint64 guildid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_guildname;
        break;
      }

      // optional string guildname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_guildlevel;
        break;
      }

      // optional uint32 guildlevel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildlevel_)));
          set_has_guildlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_guildmember;
        break;
      }

      // optional uint32 guildmember = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildmember:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildmember_)));
          set_has_guildmember();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_guilddeclaration;
        break;
      }

      // optional string guilddeclaration = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guilddeclaration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guilddeclaration()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guilddeclaration().data(), this->guilddeclaration().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ownername;
        break;
      }

      // optional string ownername = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ownername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ownername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ownername().data(), this->ownername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_guildthrive;
        break;
      }

      // optional uint64 guildthrive = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildthrive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildthrive_)));
          set_has_guildthrive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_joincombat;
        break;
      }

      // optional uint32 joincombat = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_joincombat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &joincombat_)));
          set_has_joincombat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_canjoin;
        break;
      }

      // optional bool canjoin = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_canjoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canjoin_)));
          set_has_canjoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_isreqjoin;
        break;
      }

      // optional bool isreqjoin = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isreqjoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isreqjoin_)));
          set_has_isreqjoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_isaudit;
        break;
      }

      // optional bool isaudit = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isaudit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isaudit_)));
          set_has_isaudit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_kickinfolist;
        break;
      }

      // repeated .proto.message.KickoutInfo kickinfolist = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kickinfolist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kickinfolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_kickinfolist;
        if (input->ExpectTag(112)) goto parse_ownerid;
        break;
      }

      // optional uint64 ownerid = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ownerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ownerid_)));
          set_has_ownerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildListInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rangking = 1;
  if (has_rangking()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rangking(), output);
  }

  // optional uint64 guildid = 2;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guildid(), output);
  }

  // optional string guildname = 3;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->guildname(), output);
  }

  // optional uint32 guildlevel = 4;
  if (has_guildlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->guildlevel(), output);
  }

  // optional uint32 guildmember = 5;
  if (has_guildmember()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->guildmember(), output);
  }

  // optional string guilddeclaration = 6;
  if (has_guilddeclaration()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guilddeclaration().data(), this->guilddeclaration().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->guilddeclaration(), output);
  }

  // optional string ownername = 7;
  if (has_ownername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ownername().data(), this->ownername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->ownername(), output);
  }

  // optional uint64 guildthrive = 8;
  if (has_guildthrive()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->guildthrive(), output);
  }

  // optional uint32 joincombat = 9;
  if (has_joincombat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->joincombat(), output);
  }

  // optional bool canjoin = 10;
  if (has_canjoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->canjoin(), output);
  }

  // optional bool isreqjoin = 11;
  if (has_isreqjoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->isreqjoin(), output);
  }

  // optional bool isaudit = 12;
  if (has_isaudit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->isaudit(), output);
  }

  // repeated .proto.message.KickoutInfo kickinfolist = 13;
  for (int i = 0; i < this->kickinfolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->kickinfolist(i), output);
  }

  // optional uint64 ownerid = 14;
  if (has_ownerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->ownerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildListInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rangking = 1;
  if (has_rangking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rangking(), target);
  }

  // optional uint64 guildid = 2;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guildid(), target);
  }

  // optional string guildname = 3;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->guildname(), target);
  }

  // optional uint32 guildlevel = 4;
  if (has_guildlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->guildlevel(), target);
  }

  // optional uint32 guildmember = 5;
  if (has_guildmember()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->guildmember(), target);
  }

  // optional string guilddeclaration = 6;
  if (has_guilddeclaration()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guilddeclaration().data(), this->guilddeclaration().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->guilddeclaration(), target);
  }

  // optional string ownername = 7;
  if (has_ownername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ownername().data(), this->ownername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->ownername(), target);
  }

  // optional uint64 guildthrive = 8;
  if (has_guildthrive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->guildthrive(), target);
  }

  // optional uint32 joincombat = 9;
  if (has_joincombat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->joincombat(), target);
  }

  // optional bool canjoin = 10;
  if (has_canjoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->canjoin(), target);
  }

  // optional bool isreqjoin = 11;
  if (has_isreqjoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->isreqjoin(), target);
  }

  // optional bool isaudit = 12;
  if (has_isaudit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->isaudit(), target);
  }

  // repeated .proto.message.KickoutInfo kickinfolist = 13;
  for (int i = 0; i < this->kickinfolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->kickinfolist(i), target);
  }

  // optional uint64 ownerid = 14;
  if (has_ownerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->ownerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildListInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rangking = 1;
    if (has_rangking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rangking());
    }

    // optional uint64 guildid = 2;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional string guildname = 3;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // optional uint32 guildlevel = 4;
    if (has_guildlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildlevel());
    }

    // optional uint32 guildmember = 5;
    if (has_guildmember()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildmember());
    }

    // optional string guilddeclaration = 6;
    if (has_guilddeclaration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guilddeclaration());
    }

    // optional string ownername = 7;
    if (has_ownername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ownername());
    }

    // optional uint64 guildthrive = 8;
    if (has_guildthrive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildthrive());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 joincombat = 9;
    if (has_joincombat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->joincombat());
    }

    // optional bool canjoin = 10;
    if (has_canjoin()) {
      total_size += 1 + 1;
    }

    // optional bool isreqjoin = 11;
    if (has_isreqjoin()) {
      total_size += 1 + 1;
    }

    // optional bool isaudit = 12;
    if (has_isaudit()) {
      total_size += 1 + 1;
    }

    // optional uint64 ownerid = 14;
    if (has_ownerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ownerid());
    }

  }
  // repeated .proto.message.KickoutInfo kickinfolist = 13;
  total_size += 1 * this->kickinfolist_size();
  for (int i = 0; i < this->kickinfolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kickinfolist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildListInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildListInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildListInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildListInfo::MergeFrom(const GuildListInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  kickinfolist_.MergeFrom(from.kickinfolist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rangking()) {
      set_rangking(from.rangking());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_guildlevel()) {
      set_guildlevel(from.guildlevel());
    }
    if (from.has_guildmember()) {
      set_guildmember(from.guildmember());
    }
    if (from.has_guilddeclaration()) {
      set_guilddeclaration(from.guilddeclaration());
    }
    if (from.has_ownername()) {
      set_ownername(from.ownername());
    }
    if (from.has_guildthrive()) {
      set_guildthrive(from.guildthrive());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_joincombat()) {
      set_joincombat(from.joincombat());
    }
    if (from.has_canjoin()) {
      set_canjoin(from.canjoin());
    }
    if (from.has_isreqjoin()) {
      set_isreqjoin(from.isreqjoin());
    }
    if (from.has_isaudit()) {
      set_isaudit(from.isaudit());
    }
    if (from.has_ownerid()) {
      set_ownerid(from.ownerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildListInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildListInfo::CopyFrom(const GuildListInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildListInfo::IsInitialized() const {

  return true;
}

void GuildListInfo::Swap(GuildListInfo* other) {
  if (other != this) {
    std::swap(rangking_, other->rangking_);
    std::swap(guildid_, other->guildid_);
    std::swap(guildname_, other->guildname_);
    std::swap(guildlevel_, other->guildlevel_);
    std::swap(guildmember_, other->guildmember_);
    std::swap(guilddeclaration_, other->guilddeclaration_);
    std::swap(ownername_, other->ownername_);
    std::swap(guildthrive_, other->guildthrive_);
    std::swap(joincombat_, other->joincombat_);
    std::swap(canjoin_, other->canjoin_);
    std::swap(isreqjoin_, other->isreqjoin_);
    std::swap(isaudit_, other->isaudit_);
    kickinfolist_.Swap(&other->kickinfolist_);
    std::swap(ownerid_, other->ownerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildListInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildListInfo_descriptor_;
  metadata.reflection = GuildListInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqInfo::kStrnameFieldNumber;
const int ReqInfo::kLevelFieldNumber;
const int ReqInfo::kProfessionFieldNumber;
const int ReqInfo::kPlayeridFieldNumber;
const int ReqInfo::kCombatvalueFieldNumber;
const int ReqInfo::kDhlevFieldNumber;
#endif  // !_MSC_VER

ReqInfo::ReqInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqInfo::InitAsDefaultInstance() {
}

ReqInfo::ReqInfo(const ReqInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqInfo::SharedCtor() {
  _cached_size_ = 0;
  strname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  profession_ = 0u;
  playerid_ = GOOGLE_ULONGLONG(0);
  combatvalue_ = 0u;
  dhlev_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqInfo::~ReqInfo() {
  SharedDtor();
}

void ReqInfo::SharedDtor() {
  if (strname_ != &::google::protobuf::internal::kEmptyString) {
    delete strname_;
  }
  if (this != default_instance_) {
  }
}

void ReqInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqInfo_descriptor_;
}

const ReqInfo& ReqInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

ReqInfo* ReqInfo::default_instance_ = NULL;

ReqInfo* ReqInfo::New() const {
  return new ReqInfo;
}

void ReqInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_strname()) {
      if (strname_ != &::google::protobuf::internal::kEmptyString) {
        strname_->clear();
      }
    }
    level_ = 0u;
    profession_ = 0u;
    playerid_ = GOOGLE_ULONGLONG(0);
    combatvalue_ = 0u;
    dhlev_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string strname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strname().data(), this->strname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_profession;
        break;
      }

      // optional uint32 profession = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_playerid;
        break;
      }

      // optional uint64 playerid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_combatvalue;
        break;
      }

      // optional uint32 combatvalue = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_combatvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &combatvalue_)));
          set_has_combatvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_dhlev;
        break;
      }

      // optional uint32 dhlev = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dhlev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dhlev_)));
          set_has_dhlev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string strname = 1;
  if (has_strname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strname().data(), this->strname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->strname(), output);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // optional uint32 profession = 3;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->profession(), output);
  }

  // optional uint64 playerid = 4;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->playerid(), output);
  }

  // optional uint32 combatvalue = 5;
  if (has_combatvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->combatvalue(), output);
  }

  // optional uint32 dhlev = 6;
  if (has_dhlev()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->dhlev(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string strname = 1;
  if (has_strname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strname().data(), this->strname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strname(), target);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // optional uint32 profession = 3;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->profession(), target);
  }

  // optional uint64 playerid = 4;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->playerid(), target);
  }

  // optional uint32 combatvalue = 5;
  if (has_combatvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->combatvalue(), target);
  }

  // optional uint32 dhlev = 6;
  if (has_dhlev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->dhlev(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string strname = 1;
    if (has_strname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strname());
    }

    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 profession = 3;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->profession());
    }

    // optional uint64 playerid = 4;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // optional uint32 combatvalue = 5;
    if (has_combatvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->combatvalue());
    }

    // optional uint32 dhlev = 6;
    if (has_dhlev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dhlev());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqInfo::MergeFrom(const ReqInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strname()) {
      set_strname(from.strname());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_combatvalue()) {
      set_combatvalue(from.combatvalue());
    }
    if (from.has_dhlev()) {
      set_dhlev(from.dhlev());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqInfo::CopyFrom(const ReqInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqInfo::IsInitialized() const {

  return true;
}

void ReqInfo::Swap(ReqInfo* other) {
  if (other != this) {
    std::swap(strname_, other->strname_);
    std::swap(level_, other->level_);
    std::swap(profession_, other->profession_);
    std::swap(playerid_, other->playerid_);
    std::swap(combatvalue_, other->combatvalue_);
    std::swap(dhlev_, other->dhlev_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqInfo_descriptor_;
  metadata.reflection = ReqInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildShopInfo::kItemidFieldNumber;
const int GuildShopInfo::kCountsFieldNumber;
#endif  // !_MSC_VER

GuildShopInfo::GuildShopInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildShopInfo::InitAsDefaultInstance() {
}

GuildShopInfo::GuildShopInfo(const GuildShopInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildShopInfo::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  counts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildShopInfo::~GuildShopInfo() {
  SharedDtor();
}

void GuildShopInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildShopInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildShopInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildShopInfo_descriptor_;
}

const GuildShopInfo& GuildShopInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildShopInfo* GuildShopInfo::default_instance_ = NULL;

GuildShopInfo* GuildShopInfo::New() const {
  return new GuildShopInfo;
}

void GuildShopInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    counts_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildShopInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_counts;
        break;
      }

      // optional uint32 counts = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_counts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &counts_)));
          set_has_counts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildShopInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 itemid = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint32 counts = 2;
  if (has_counts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->counts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildShopInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 itemid = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 counts = 2;
  if (has_counts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->counts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildShopInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 counts = 2;
    if (has_counts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->counts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildShopInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildShopInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildShopInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildShopInfo::MergeFrom(const GuildShopInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_counts()) {
      set_counts(from.counts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildShopInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildShopInfo::CopyFrom(const GuildShopInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildShopInfo::IsInitialized() const {

  return true;
}

void GuildShopInfo::Swap(GuildShopInfo* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(counts_, other->counts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildShopInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildShopInfo_descriptor_;
  metadata.reflection = GuildShopInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestHelpInfo::kPlayeridFieldNumber;
const int QuestHelpInfo::kQuestidFieldNumber;
const int QuestHelpInfo::kLoopnumFieldNumber;
const int QuestHelpInfo::kStatusFieldNumber;
const int QuestHelpInfo::kHelperIdFieldNumber;
#endif  // !_MSC_VER

QuestHelpInfo::QuestHelpInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestHelpInfo::InitAsDefaultInstance() {
}

QuestHelpInfo::QuestHelpInfo(const QuestHelpInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestHelpInfo::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  questid_ = 0;
  loopnum_ = 0;
  status_ = 0;
  helperid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestHelpInfo::~QuestHelpInfo() {
  SharedDtor();
}

void QuestHelpInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestHelpInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestHelpInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestHelpInfo_descriptor_;
}

const QuestHelpInfo& QuestHelpInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

QuestHelpInfo* QuestHelpInfo::default_instance_ = NULL;

QuestHelpInfo* QuestHelpInfo::New() const {
  return new QuestHelpInfo;
}

void QuestHelpInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    questid_ = 0;
    loopnum_ = 0;
    status_ = 0;
    helperid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestHelpInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_questid;
        break;
      }

      // required int32 questid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_questid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_loopnum;
        break;
      }

      // required int32 loopnum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loopnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loopnum_)));
          set_has_loopnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // required int32 status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_helperId;
        break;
      }

      // required uint32 helperId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_helperId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &helperid_)));
          set_has_helperid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestHelpInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required int32 questid = 2;
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->questid(), output);
  }

  // required int32 loopnum = 3;
  if (has_loopnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->loopnum(), output);
  }

  // required int32 status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->status(), output);
  }

  // required uint32 helperId = 5;
  if (has_helperid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->helperid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestHelpInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required int32 questid = 2;
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->questid(), target);
  }

  // required int32 loopnum = 3;
  if (has_loopnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->loopnum(), target);
  }

  // required int32 status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->status(), target);
  }

  // required uint32 helperId = 5;
  if (has_helperid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->helperid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestHelpInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required int32 questid = 2;
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->questid());
    }

    // required int32 loopnum = 3;
    if (has_loopnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loopnum());
    }

    // required int32 status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // required uint32 helperId = 5;
    if (has_helperid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->helperid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestHelpInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestHelpInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestHelpInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestHelpInfo::MergeFrom(const QuestHelpInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_questid()) {
      set_questid(from.questid());
    }
    if (from.has_loopnum()) {
      set_loopnum(from.loopnum());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_helperid()) {
      set_helperid(from.helperid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestHelpInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestHelpInfo::CopyFrom(const QuestHelpInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestHelpInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void QuestHelpInfo::Swap(QuestHelpInfo* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(questid_, other->questid_);
    std::swap(loopnum_, other->loopnum_);
    std::swap(status_, other->status_);
    std::swap(helperid_, other->helperid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestHelpInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestHelpInfo_descriptor_;
  metadata.reflection = QuestHelpInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ImpeachInfo::kImpeachtimeFieldNumber;
const int ImpeachInfo::kImpeachidFieldNumber;
const int ImpeachInfo::kImpeachnameFieldNumber;
#endif  // !_MSC_VER

ImpeachInfo::ImpeachInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ImpeachInfo::InitAsDefaultInstance() {
}

ImpeachInfo::ImpeachInfo(const ImpeachInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ImpeachInfo::SharedCtor() {
  _cached_size_ = 0;
  impeachtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImpeachInfo::~ImpeachInfo() {
  SharedDtor();
}

void ImpeachInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ImpeachInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImpeachInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImpeachInfo_descriptor_;
}

const ImpeachInfo& ImpeachInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

ImpeachInfo* ImpeachInfo::default_instance_ = NULL;

ImpeachInfo* ImpeachInfo::New() const {
  return new ImpeachInfo;
}

void ImpeachInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    impeachtime_ = GOOGLE_ULONGLONG(0);
  }
  impeachid_.Clear();
  impeachname_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImpeachInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 impeachtime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &impeachtime_)));
          set_has_impeachtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_impeachid;
        break;
      }

      // repeated uint64 impeachid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_impeachid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_impeachid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_impeachid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_impeachid;
        if (input->ExpectTag(26)) goto parse_impeachname;
        break;
      }

      // repeated string impeachname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_impeachname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_impeachname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->impeachname(this->impeachname_size() - 1).data(),
            this->impeachname(this->impeachname_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_impeachname;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ImpeachInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 impeachtime = 1;
  if (has_impeachtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->impeachtime(), output);
  }

  // repeated uint64 impeachid = 2;
  for (int i = 0; i < this->impeachid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->impeachid(i), output);
  }

  // repeated string impeachname = 3;
  for (int i = 0; i < this->impeachname_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->impeachname(i).data(), this->impeachname(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->impeachname(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ImpeachInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 impeachtime = 1;
  if (has_impeachtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->impeachtime(), target);
  }

  // repeated uint64 impeachid = 2;
  for (int i = 0; i < this->impeachid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->impeachid(i), target);
  }

  // repeated string impeachname = 3;
  for (int i = 0; i < this->impeachname_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->impeachname(i).data(), this->impeachname(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->impeachname(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ImpeachInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 impeachtime = 1;
    if (has_impeachtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->impeachtime());
    }

  }
  // repeated uint64 impeachid = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->impeachid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->impeachid(i));
    }
    total_size += 1 * this->impeachid_size() + data_size;
  }

  // repeated string impeachname = 3;
  total_size += 1 * this->impeachname_size();
  for (int i = 0; i < this->impeachname_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->impeachname(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImpeachInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImpeachInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImpeachInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImpeachInfo::MergeFrom(const ImpeachInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  impeachid_.MergeFrom(from.impeachid_);
  impeachname_.MergeFrom(from.impeachname_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_impeachtime()) {
      set_impeachtime(from.impeachtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImpeachInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImpeachInfo::CopyFrom(const ImpeachInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImpeachInfo::IsInitialized() const {

  return true;
}

void ImpeachInfo::Swap(ImpeachInfo* other) {
  if (other != this) {
    std::swap(impeachtime_, other->impeachtime_);
    impeachid_.Swap(&other->impeachid_);
    impeachname_.Swap(&other->impeachname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImpeachInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImpeachInfo_descriptor_;
  metadata.reflection = ImpeachInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BossDamage::kPlayeridFieldNumber;
const int BossDamage::kNameFieldNumber;
const int BossDamage::kValueFieldNumber;
const int BossDamage::kTimeFieldNumber;
const int BossDamage::kJobFieldNumber;
#endif  // !_MSC_VER

BossDamage::BossDamage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BossDamage::InitAsDefaultInstance() {
}

BossDamage::BossDamage(const BossDamage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BossDamage::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = 0u;
  time_ = GOOGLE_ULONGLONG(0);
  job_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossDamage::~BossDamage() {
  SharedDtor();
}

void BossDamage::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void BossDamage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BossDamage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BossDamage_descriptor_;
}

const BossDamage& BossDamage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

BossDamage* BossDamage::default_instance_ = NULL;

BossDamage* BossDamage::New() const {
  return new BossDamage;
}

void BossDamage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    value_ = 0u;
    time_ = GOOGLE_ULONGLONG(0);
    job_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BossDamage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }

      // optional uint32 value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional uint64 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_job;
        break;
      }

      // optional uint32 job = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BossDamage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->value(), output);
  }

  // optional uint64 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->time(), output);
  }

  // optional uint32 job = 5;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->job(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BossDamage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->value(), target);
  }

  // optional uint64 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->time(), target);
  }

  // optional uint32 job = 5;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->job(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BossDamage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // optional uint64 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // optional uint32 job = 5;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossDamage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BossDamage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BossDamage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BossDamage::MergeFrom(const BossDamage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BossDamage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BossDamage::CopyFrom(const BossDamage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossDamage::IsInitialized() const {

  return true;
}

void BossDamage::Swap(BossDamage* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(time_, other->time_);
    std::swap(job_, other->job_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BossDamage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BossDamage_descriptor_;
  metadata.reflection = BossDamage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildBoss::kBossidFieldNumber;
const int GuildBoss::kHppercentFieldNumber;
const int GuildBoss::kStarttimesFieldNumber;
const int GuildBoss::kResettimeFieldNumber;
const int GuildBoss::kRewordlistFieldNumber;
const int GuildBoss::kRanklistFieldNumber;
const int GuildBoss::kGuildlevFieldNumber;
const int GuildBoss::kGuildidFieldNumber;
const int GuildBoss::kFightimeFieldNumber;
const int GuildBoss::kChangecountsFieldNumber;
const int GuildBoss::kDfHourFieldNumber;
const int GuildBoss::kDfMinuFieldNumber;
#endif  // !_MSC_VER

GuildBoss::GuildBoss()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildBoss::InitAsDefaultInstance() {
}

GuildBoss::GuildBoss(const GuildBoss& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildBoss::SharedCtor() {
  _cached_size_ = 0;
  bossid_ = 0u;
  hppercent_ = 0u;
  starttimes_ = GOOGLE_ULONGLONG(0);
  resettime_ = GOOGLE_ULONGLONG(0);
  guildlev_ = 0u;
  guildid_ = GOOGLE_ULONGLONG(0);
  fightime_ = GOOGLE_ULONGLONG(0);
  changecounts_ = 0u;
  dfhour_ = 0u;
  dfminu_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildBoss::~GuildBoss() {
  SharedDtor();
}

void GuildBoss::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildBoss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildBoss::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildBoss_descriptor_;
}

const GuildBoss& GuildBoss::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildBoss* GuildBoss::default_instance_ = NULL;

GuildBoss* GuildBoss::New() const {
  return new GuildBoss;
}

void GuildBoss::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bossid_ = 0u;
    hppercent_ = 0u;
    starttimes_ = GOOGLE_ULONGLONG(0);
    resettime_ = GOOGLE_ULONGLONG(0);
    guildlev_ = 0u;
    guildid_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    fightime_ = GOOGLE_ULONGLONG(0);
    changecounts_ = 0u;
    dfhour_ = 0u;
    dfminu_ = 0u;
  }
  rewordlist_.Clear();
  ranklist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildBoss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bossid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hppercent;
        break;
      }

      // optional uint32 hppercent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hppercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hppercent_)));
          set_has_hppercent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_starttimes;
        break;
      }

      // optional uint64 starttimes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starttimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &starttimes_)));
          set_has_starttimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_resettime;
        break;
      }

      // optional uint64 resettime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resettime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &resettime_)));
          set_has_resettime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rewordlist;
        break;
      }

      // repeated uint32 rewordlist = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewordlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_rewordlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_rewordlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rewordlist;
        if (input->ExpectTag(50)) goto parse_ranklist;
        break;
      }

      // repeated .proto.message.BossDamage ranklist = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ranklist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ranklist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_ranklist;
        if (input->ExpectTag(56)) goto parse_guildlev;
        break;
      }

      // optional uint32 guildlev = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildlev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildlev_)));
          set_has_guildlev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_guildid;
        break;
      }

      // optional uint64 guildid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_fightime;
        break;
      }

      // optional uint64 fightime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fightime_)));
          set_has_fightime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_changecounts;
        break;
      }

      // optional uint32 changecounts = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_changecounts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &changecounts_)));
          set_has_changecounts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_dfHour;
        break;
      }

      // optional uint32 dfHour = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dfHour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dfhour_)));
          set_has_dfhour();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_dfMinu;
        break;
      }

      // optional uint32 dfMinu = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dfMinu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dfminu_)));
          set_has_dfminu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildBoss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bossid = 1;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bossid(), output);
  }

  // optional uint32 hppercent = 2;
  if (has_hppercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hppercent(), output);
  }

  // optional uint64 starttimes = 3;
  if (has_starttimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->starttimes(), output);
  }

  // optional uint64 resettime = 4;
  if (has_resettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->resettime(), output);
  }

  // repeated uint32 rewordlist = 5;
  for (int i = 0; i < this->rewordlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->rewordlist(i), output);
  }

  // repeated .proto.message.BossDamage ranklist = 6;
  for (int i = 0; i < this->ranklist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->ranklist(i), output);
  }

  // optional uint32 guildlev = 7;
  if (has_guildlev()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->guildlev(), output);
  }

  // optional uint64 guildid = 8;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->guildid(), output);
  }

  // optional uint64 fightime = 9;
  if (has_fightime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->fightime(), output);
  }

  // optional uint32 changecounts = 10;
  if (has_changecounts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->changecounts(), output);
  }

  // optional uint32 dfHour = 11;
  if (has_dfhour()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->dfhour(), output);
  }

  // optional uint32 dfMinu = 12;
  if (has_dfminu()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->dfminu(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildBoss::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bossid = 1;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bossid(), target);
  }

  // optional uint32 hppercent = 2;
  if (has_hppercent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hppercent(), target);
  }

  // optional uint64 starttimes = 3;
  if (has_starttimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->starttimes(), target);
  }

  // optional uint64 resettime = 4;
  if (has_resettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->resettime(), target);
  }

  // repeated uint32 rewordlist = 5;
  for (int i = 0; i < this->rewordlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->rewordlist(i), target);
  }

  // repeated .proto.message.BossDamage ranklist = 6;
  for (int i = 0; i < this->ranklist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->ranklist(i), target);
  }

  // optional uint32 guildlev = 7;
  if (has_guildlev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->guildlev(), target);
  }

  // optional uint64 guildid = 8;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->guildid(), target);
  }

  // optional uint64 fightime = 9;
  if (has_fightime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->fightime(), target);
  }

  // optional uint32 changecounts = 10;
  if (has_changecounts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->changecounts(), target);
  }

  // optional uint32 dfHour = 11;
  if (has_dfhour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->dfhour(), target);
  }

  // optional uint32 dfMinu = 12;
  if (has_dfminu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->dfminu(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildBoss::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bossid = 1;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossid());
    }

    // optional uint32 hppercent = 2;
    if (has_hppercent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hppercent());
    }

    // optional uint64 starttimes = 3;
    if (has_starttimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->starttimes());
    }

    // optional uint64 resettime = 4;
    if (has_resettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->resettime());
    }

    // optional uint32 guildlev = 7;
    if (has_guildlev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildlev());
    }

    // optional uint64 guildid = 8;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 fightime = 9;
    if (has_fightime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightime());
    }

    // optional uint32 changecounts = 10;
    if (has_changecounts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->changecounts());
    }

    // optional uint32 dfHour = 11;
    if (has_dfhour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dfhour());
    }

    // optional uint32 dfMinu = 12;
    if (has_dfminu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dfminu());
    }

  }
  // repeated uint32 rewordlist = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->rewordlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->rewordlist(i));
    }
    total_size += 1 * this->rewordlist_size() + data_size;
  }

  // repeated .proto.message.BossDamage ranklist = 6;
  total_size += 1 * this->ranklist_size();
  for (int i = 0; i < this->ranklist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ranklist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildBoss::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildBoss* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildBoss*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildBoss::MergeFrom(const GuildBoss& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewordlist_.MergeFrom(from.rewordlist_);
  ranklist_.MergeFrom(from.ranklist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
    if (from.has_hppercent()) {
      set_hppercent(from.hppercent());
    }
    if (from.has_starttimes()) {
      set_starttimes(from.starttimes());
    }
    if (from.has_resettime()) {
      set_resettime(from.resettime());
    }
    if (from.has_guildlev()) {
      set_guildlev(from.guildlev());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fightime()) {
      set_fightime(from.fightime());
    }
    if (from.has_changecounts()) {
      set_changecounts(from.changecounts());
    }
    if (from.has_dfhour()) {
      set_dfhour(from.dfhour());
    }
    if (from.has_dfminu()) {
      set_dfminu(from.dfminu());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildBoss::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildBoss::CopyFrom(const GuildBoss& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildBoss::IsInitialized() const {

  return true;
}

void GuildBoss::Swap(GuildBoss* other) {
  if (other != this) {
    std::swap(bossid_, other->bossid_);
    std::swap(hppercent_, other->hppercent_);
    std::swap(starttimes_, other->starttimes_);
    std::swap(resettime_, other->resettime_);
    rewordlist_.Swap(&other->rewordlist_);
    ranklist_.Swap(&other->ranklist_);
    std::swap(guildlev_, other->guildlev_);
    std::swap(guildid_, other->guildid_);
    std::swap(fightime_, other->fightime_);
    std::swap(changecounts_, other->changecounts_);
    std::swap(dfhour_, other->dfhour_);
    std::swap(dfminu_, other->dfminu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildBoss::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildBoss_descriptor_;
  metadata.reflection = GuildBoss_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecordData::kTypeFieldNumber;
const int RecordData::kNameFieldNumber;
const int RecordData::kEquipidFieldNumber;
const int RecordData::kTimeFieldNumber;
#endif  // !_MSC_VER

RecordData::RecordData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecordData::InitAsDefaultInstance() {
}

RecordData::RecordData(const RecordData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecordData::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  equipid_ = 0u;
  time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecordData::~RecordData() {
  SharedDtor();
}

void RecordData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void RecordData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordData_descriptor_;
}

const RecordData& RecordData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

RecordData* RecordData::default_instance_ = NULL;

RecordData* RecordData::New() const {
  return new RecordData;
}

void RecordData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    equipid_ = 0u;
    time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecordData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_equipid;
        break;
      }

      // optional uint32 equipid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equipid_)));
          set_has_equipid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional uint64 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecordData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 equipid = 3;
  if (has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->equipid(), output);
  }

  // optional uint64 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecordData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 equipid = 3;
  if (has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->equipid(), target);
  }

  // optional uint64 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecordData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 equipid = 3;
    if (has_equipid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equipid());
    }

    // optional uint64 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecordData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecordData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecordData::MergeFrom(const RecordData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_equipid()) {
      set_equipid(from.equipid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecordData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordData::CopyFrom(const RecordData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordData::IsInitialized() const {

  return true;
}

void RecordData::Swap(RecordData* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(equipid_, other->equipid_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecordData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecordData_descriptor_;
  metadata.reflection = RecordData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MixGuildData::kLevuptimeFieldNumber;
const int MixGuildData::kOwneridFieldNumber;
const int MixGuildData::kGuildplacardFieldNumber;
const int MixGuildData::kCanjoinFieldNumber;
const int MixGuildData::kJoincombatFieldNumber;
const int MixGuildData::kResourcesFieldNumber;
const int MixGuildData::kBuildlistFieldNumber;
const int MixGuildData::kReqlistFieldNumber;
const int MixGuildData::kShopinfoFieldNumber;
const int MixGuildData::kRefrishmultipleFieldNumber;
const int MixGuildData::kRefrishtimeFieldNumber;
const int MixGuildData::kKickinfolistFieldNumber;
const int MixGuildData::kWeekmissioncountsFieldNumber;
const int MixGuildData::kOnlinecountsFieldNumber;
const int MixGuildData::kHelpinfoFieldNumber;
const int MixGuildData::kIsauditFieldNumber;
const int MixGuildData::kImpinfoFieldNumber;
const int MixGuildData::kGuilddeclarationFieldNumber;
const int MixGuildData::kLastcosttimeFieldNumber;
const int MixGuildData::kBoomtimeFieldNumber;
const int MixGuildData::kSettlementtimeFieldNumber;
const int MixGuildData::kBossinfoFieldNumber;
const int MixGuildData::kMaxitemFieldNumber;
const int MixGuildData::kGuildequipFieldNumber;
const int MixGuildData::kBuygridcountsFieldNumber;
const int MixGuildData::kDepositlistFieldNumber;
const int MixGuildData::kFetchlistFieldNumber;
#endif  // !_MSC_VER

MixGuildData::MixGuildData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MixGuildData::InitAsDefaultInstance() {
  impinfo_ = const_cast< ::proto::message::ImpeachInfo*>(&::proto::message::ImpeachInfo::default_instance());
  bossinfo_ = const_cast< ::proto::message::GuildBoss*>(&::proto::message::GuildBoss::default_instance());
}

MixGuildData::MixGuildData(const MixGuildData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MixGuildData::SharedCtor() {
  _cached_size_ = 0;
  levuptime_ = GOOGLE_ULONGLONG(0);
  ownerid_ = GOOGLE_ULONGLONG(0);
  guildplacard_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  canjoin_ = false;
  joincombat_ = 0u;
  resources_ = GOOGLE_ULONGLONG(0);
  refrishmultiple_ = 0u;
  refrishtime_ = GOOGLE_ULONGLONG(0);
  weekmissioncounts_ = 0u;
  isaudit_ = false;
  impinfo_ = NULL;
  guilddeclaration_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lastcosttime_ = GOOGLE_ULONGLONG(0);
  boomtime_ = GOOGLE_ULONGLONG(0);
  settlementtime_ = GOOGLE_ULONGLONG(0);
  bossinfo_ = NULL;
  maxitem_ = 0u;
  buygridcounts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MixGuildData::~MixGuildData() {
  SharedDtor();
}

void MixGuildData::SharedDtor() {
  if (guildplacard_ != &::google::protobuf::internal::kEmptyString) {
    delete guildplacard_;
  }
  if (guilddeclaration_ != &::google::protobuf::internal::kEmptyString) {
    delete guilddeclaration_;
  }
  if (this != default_instance_) {
    delete impinfo_;
    delete bossinfo_;
  }
}

void MixGuildData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MixGuildData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MixGuildData_descriptor_;
}

const MixGuildData& MixGuildData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

MixGuildData* MixGuildData::default_instance_ = NULL;

MixGuildData* MixGuildData::New() const {
  return new MixGuildData;
}

void MixGuildData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    levuptime_ = GOOGLE_ULONGLONG(0);
    ownerid_ = GOOGLE_ULONGLONG(0);
    if (has_guildplacard()) {
      if (guildplacard_ != &::google::protobuf::internal::kEmptyString) {
        guildplacard_->clear();
      }
    }
    canjoin_ = false;
    joincombat_ = 0u;
    resources_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    refrishmultiple_ = 0u;
    refrishtime_ = GOOGLE_ULONGLONG(0);
    weekmissioncounts_ = 0u;
    isaudit_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_impinfo()) {
      if (impinfo_ != NULL) impinfo_->::proto::message::ImpeachInfo::Clear();
    }
    if (has_guilddeclaration()) {
      if (guilddeclaration_ != &::google::protobuf::internal::kEmptyString) {
        guilddeclaration_->clear();
      }
    }
    lastcosttime_ = GOOGLE_ULONGLONG(0);
    boomtime_ = GOOGLE_ULONGLONG(0);
    settlementtime_ = GOOGLE_ULONGLONG(0);
    if (has_bossinfo()) {
      if (bossinfo_ != NULL) bossinfo_->::proto::message::GuildBoss::Clear();
    }
    maxitem_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    buygridcounts_ = 0u;
  }
  buildlist_.Clear();
  reqlist_.Clear();
  shopinfo_.Clear();
  kickinfolist_.Clear();
  onlinecounts_.Clear();
  helpinfo_.Clear();
  guildequip_.Clear();
  depositlist_.Clear();
  fetchlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MixGuildData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 levuptime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &levuptime_)));
          set_has_levuptime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ownerid;
        break;
      }

      // optional uint64 ownerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ownerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ownerid_)));
          set_has_ownerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_guildplacard;
        break;
      }

      // optional string guildplacard = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildplacard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildplacard()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildplacard().data(), this->guildplacard().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_canjoin;
        break;
      }

      // optional bool canjoin = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_canjoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canjoin_)));
          set_has_canjoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_joincombat;
        break;
      }

      // optional uint32 joincombat = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_joincombat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &joincombat_)));
          set_has_joincombat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_resources;
        break;
      }

      // optional uint64 resources = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resources:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &resources_)));
          set_has_resources();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_buildlist;
        break;
      }

      // repeated uint32 buildlist = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buildlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_buildlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_buildlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_buildlist;
        if (input->ExpectTag(66)) goto parse_reqlist;
        break;
      }

      // repeated .proto.message.ReqInfo reqlist = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reqlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reqlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_reqlist;
        if (input->ExpectTag(74)) goto parse_shopinfo;
        break;
      }

      // repeated .proto.message.GuildShopInfo shopinfo = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shopinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shopinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_shopinfo;
        if (input->ExpectTag(80)) goto parse_refrishmultiple;
        break;
      }

      // optional uint32 refrishmultiple = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refrishmultiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refrishmultiple_)));
          set_has_refrishmultiple();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_refrishtime;
        break;
      }

      // optional uint64 refrishtime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refrishtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &refrishtime_)));
          set_has_refrishtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_kickinfolist;
        break;
      }

      // repeated .proto.message.KickoutInfo kickinfolist = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kickinfolist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kickinfolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_kickinfolist;
        if (input->ExpectTag(120)) goto parse_weekmissioncounts;
        break;
      }

      // optional uint32 weekmissioncounts = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weekmissioncounts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weekmissioncounts_)));
          set_has_weekmissioncounts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_onlinecounts;
        break;
      }

      // repeated uint64 onlinecounts = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_onlinecounts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 128, input, this->mutable_onlinecounts())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_onlinecounts())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_onlinecounts;
        if (input->ExpectTag(154)) goto parse_helpinfo;
        break;
      }

      // repeated .proto.message.QuestHelpInfo helpinfo = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_helpinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_helpinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_helpinfo;
        if (input->ExpectTag(160)) goto parse_isaudit;
        break;
      }

      // optional bool isaudit = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isaudit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isaudit_)));
          set_has_isaudit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_impinfo;
        break;
      }

      // optional .proto.message.ImpeachInfo impinfo = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_impinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_impinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_guilddeclaration;
        break;
      }

      // optional string guilddeclaration = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guilddeclaration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guilddeclaration()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guilddeclaration().data(), this->guilddeclaration().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_lastcosttime;
        break;
      }

      // optional uint64 lastcosttime = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastcosttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastcosttime_)));
          set_has_lastcosttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_boomtime;
        break;
      }

      // optional uint64 boomtime = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boomtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &boomtime_)));
          set_has_boomtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_settlementtime;
        break;
      }

      // optional uint64 settlementtime = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_settlementtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &settlementtime_)));
          set_has_settlementtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_bossinfo;
        break;
      }

      // optional .proto.message.GuildBoss bossinfo = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bossinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bossinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_maxitem;
        break;
      }

      // optional uint32 maxitem = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxitem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxitem_)));
          set_has_maxitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_guildequip;
        break;
      }

      // repeated .proto.message.Equip guildequip = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildequip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guildequip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_guildequip;
        if (input->ExpectTag(232)) goto parse_buygridcounts;
        break;
      }

      // optional uint32 buygridcounts = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buygridcounts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buygridcounts_)));
          set_has_buygridcounts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_depositlist;
        break;
      }

      // repeated .proto.message.RecordData depositlist = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_depositlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_depositlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_depositlist;
        if (input->ExpectTag(250)) goto parse_fetchlist;
        break;
      }

      // repeated .proto.message.RecordData fetchlist = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fetchlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fetchlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_fetchlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MixGuildData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 levuptime = 1;
  if (has_levuptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->levuptime(), output);
  }

  // optional uint64 ownerid = 2;
  if (has_ownerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->ownerid(), output);
  }

  // optional string guildplacard = 3;
  if (has_guildplacard()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildplacard().data(), this->guildplacard().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->guildplacard(), output);
  }

  // optional bool canjoin = 4;
  if (has_canjoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->canjoin(), output);
  }

  // optional uint32 joincombat = 5;
  if (has_joincombat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->joincombat(), output);
  }

  // optional uint64 resources = 6;
  if (has_resources()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->resources(), output);
  }

  // repeated uint32 buildlist = 7;
  for (int i = 0; i < this->buildlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->buildlist(i), output);
  }

  // repeated .proto.message.ReqInfo reqlist = 8;
  for (int i = 0; i < this->reqlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->reqlist(i), output);
  }

  // repeated .proto.message.GuildShopInfo shopinfo = 9;
  for (int i = 0; i < this->shopinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->shopinfo(i), output);
  }

  // optional uint32 refrishmultiple = 10;
  if (has_refrishmultiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->refrishmultiple(), output);
  }

  // optional uint64 refrishtime = 11;
  if (has_refrishtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->refrishtime(), output);
  }

  // repeated .proto.message.KickoutInfo kickinfolist = 12;
  for (int i = 0; i < this->kickinfolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->kickinfolist(i), output);
  }

  // optional uint32 weekmissioncounts = 15;
  if (has_weekmissioncounts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->weekmissioncounts(), output);
  }

  // repeated uint64 onlinecounts = 16;
  for (int i = 0; i < this->onlinecounts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      16, this->onlinecounts(i), output);
  }

  // repeated .proto.message.QuestHelpInfo helpinfo = 19;
  for (int i = 0; i < this->helpinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->helpinfo(i), output);
  }

  // optional bool isaudit = 20;
  if (has_isaudit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->isaudit(), output);
  }

  // optional .proto.message.ImpeachInfo impinfo = 21;
  if (has_impinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->impinfo(), output);
  }

  // optional string guilddeclaration = 22;
  if (has_guilddeclaration()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guilddeclaration().data(), this->guilddeclaration().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->guilddeclaration(), output);
  }

  // optional uint64 lastcosttime = 23;
  if (has_lastcosttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(23, this->lastcosttime(), output);
  }

  // optional uint64 boomtime = 24;
  if (has_boomtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(24, this->boomtime(), output);
  }

  // optional uint64 settlementtime = 25;
  if (has_settlementtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(25, this->settlementtime(), output);
  }

  // optional .proto.message.GuildBoss bossinfo = 26;
  if (has_bossinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->bossinfo(), output);
  }

  // optional uint32 maxitem = 27;
  if (has_maxitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->maxitem(), output);
  }

  // repeated .proto.message.Equip guildequip = 28;
  for (int i = 0; i < this->guildequip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->guildequip(i), output);
  }

  // optional uint32 buygridcounts = 29;
  if (has_buygridcounts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->buygridcounts(), output);
  }

  // repeated .proto.message.RecordData depositlist = 30;
  for (int i = 0; i < this->depositlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->depositlist(i), output);
  }

  // repeated .proto.message.RecordData fetchlist = 31;
  for (int i = 0; i < this->fetchlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->fetchlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MixGuildData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 levuptime = 1;
  if (has_levuptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->levuptime(), target);
  }

  // optional uint64 ownerid = 2;
  if (has_ownerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->ownerid(), target);
  }

  // optional string guildplacard = 3;
  if (has_guildplacard()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildplacard().data(), this->guildplacard().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->guildplacard(), target);
  }

  // optional bool canjoin = 4;
  if (has_canjoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->canjoin(), target);
  }

  // optional uint32 joincombat = 5;
  if (has_joincombat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->joincombat(), target);
  }

  // optional uint64 resources = 6;
  if (has_resources()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->resources(), target);
  }

  // repeated uint32 buildlist = 7;
  for (int i = 0; i < this->buildlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->buildlist(i), target);
  }

  // repeated .proto.message.ReqInfo reqlist = 8;
  for (int i = 0; i < this->reqlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->reqlist(i), target);
  }

  // repeated .proto.message.GuildShopInfo shopinfo = 9;
  for (int i = 0; i < this->shopinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->shopinfo(i), target);
  }

  // optional uint32 refrishmultiple = 10;
  if (has_refrishmultiple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->refrishmultiple(), target);
  }

  // optional uint64 refrishtime = 11;
  if (has_refrishtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->refrishtime(), target);
  }

  // repeated .proto.message.KickoutInfo kickinfolist = 12;
  for (int i = 0; i < this->kickinfolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->kickinfolist(i), target);
  }

  // optional uint32 weekmissioncounts = 15;
  if (has_weekmissioncounts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->weekmissioncounts(), target);
  }

  // repeated uint64 onlinecounts = 16;
  for (int i = 0; i < this->onlinecounts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(16, this->onlinecounts(i), target);
  }

  // repeated .proto.message.QuestHelpInfo helpinfo = 19;
  for (int i = 0; i < this->helpinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->helpinfo(i), target);
  }

  // optional bool isaudit = 20;
  if (has_isaudit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->isaudit(), target);
  }

  // optional .proto.message.ImpeachInfo impinfo = 21;
  if (has_impinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->impinfo(), target);
  }

  // optional string guilddeclaration = 22;
  if (has_guilddeclaration()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guilddeclaration().data(), this->guilddeclaration().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->guilddeclaration(), target);
  }

  // optional uint64 lastcosttime = 23;
  if (has_lastcosttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(23, this->lastcosttime(), target);
  }

  // optional uint64 boomtime = 24;
  if (has_boomtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(24, this->boomtime(), target);
  }

  // optional uint64 settlementtime = 25;
  if (has_settlementtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(25, this->settlementtime(), target);
  }

  // optional .proto.message.GuildBoss bossinfo = 26;
  if (has_bossinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->bossinfo(), target);
  }

  // optional uint32 maxitem = 27;
  if (has_maxitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->maxitem(), target);
  }

  // repeated .proto.message.Equip guildequip = 28;
  for (int i = 0; i < this->guildequip_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->guildequip(i), target);
  }

  // optional uint32 buygridcounts = 29;
  if (has_buygridcounts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->buygridcounts(), target);
  }

  // repeated .proto.message.RecordData depositlist = 30;
  for (int i = 0; i < this->depositlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->depositlist(i), target);
  }

  // repeated .proto.message.RecordData fetchlist = 31;
  for (int i = 0; i < this->fetchlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->fetchlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MixGuildData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 levuptime = 1;
    if (has_levuptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->levuptime());
    }

    // optional uint64 ownerid = 2;
    if (has_ownerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ownerid());
    }

    // optional string guildplacard = 3;
    if (has_guildplacard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildplacard());
    }

    // optional bool canjoin = 4;
    if (has_canjoin()) {
      total_size += 1 + 1;
    }

    // optional uint32 joincombat = 5;
    if (has_joincombat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->joincombat());
    }

    // optional uint64 resources = 6;
    if (has_resources()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->resources());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional uint32 refrishmultiple = 10;
    if (has_refrishmultiple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refrishmultiple());
    }

    // optional uint64 refrishtime = 11;
    if (has_refrishtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->refrishtime());
    }

    // optional uint32 weekmissioncounts = 15;
    if (has_weekmissioncounts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weekmissioncounts());
    }

    // optional bool isaudit = 20;
    if (has_isaudit()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .proto.message.ImpeachInfo impinfo = 21;
    if (has_impinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->impinfo());
    }

    // optional string guilddeclaration = 22;
    if (has_guilddeclaration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guilddeclaration());
    }

    // optional uint64 lastcosttime = 23;
    if (has_lastcosttime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastcosttime());
    }

    // optional uint64 boomtime = 24;
    if (has_boomtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->boomtime());
    }

    // optional uint64 settlementtime = 25;
    if (has_settlementtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->settlementtime());
    }

    // optional .proto.message.GuildBoss bossinfo = 26;
    if (has_bossinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bossinfo());
    }

    // optional uint32 maxitem = 27;
    if (has_maxitem()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxitem());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 buygridcounts = 29;
    if (has_buygridcounts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buygridcounts());
    }

  }
  // repeated uint32 buildlist = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->buildlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->buildlist(i));
    }
    total_size += 1 * this->buildlist_size() + data_size;
  }

  // repeated .proto.message.ReqInfo reqlist = 8;
  total_size += 1 * this->reqlist_size();
  for (int i = 0; i < this->reqlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reqlist(i));
  }

  // repeated .proto.message.GuildShopInfo shopinfo = 9;
  total_size += 1 * this->shopinfo_size();
  for (int i = 0; i < this->shopinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shopinfo(i));
  }

  // repeated .proto.message.KickoutInfo kickinfolist = 12;
  total_size += 1 * this->kickinfolist_size();
  for (int i = 0; i < this->kickinfolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kickinfolist(i));
  }

  // repeated uint64 onlinecounts = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->onlinecounts_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->onlinecounts(i));
    }
    total_size += 2 * this->onlinecounts_size() + data_size;
  }

  // repeated .proto.message.QuestHelpInfo helpinfo = 19;
  total_size += 2 * this->helpinfo_size();
  for (int i = 0; i < this->helpinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->helpinfo(i));
  }

  // repeated .proto.message.Equip guildequip = 28;
  total_size += 2 * this->guildequip_size();
  for (int i = 0; i < this->guildequip_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guildequip(i));
  }

  // repeated .proto.message.RecordData depositlist = 30;
  total_size += 2 * this->depositlist_size();
  for (int i = 0; i < this->depositlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->depositlist(i));
  }

  // repeated .proto.message.RecordData fetchlist = 31;
  total_size += 2 * this->fetchlist_size();
  for (int i = 0; i < this->fetchlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fetchlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MixGuildData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MixGuildData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MixGuildData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MixGuildData::MergeFrom(const MixGuildData& from) {
  GOOGLE_CHECK_NE(&from, this);
  buildlist_.MergeFrom(from.buildlist_);
  reqlist_.MergeFrom(from.reqlist_);
  shopinfo_.MergeFrom(from.shopinfo_);
  kickinfolist_.MergeFrom(from.kickinfolist_);
  onlinecounts_.MergeFrom(from.onlinecounts_);
  helpinfo_.MergeFrom(from.helpinfo_);
  guildequip_.MergeFrom(from.guildequip_);
  depositlist_.MergeFrom(from.depositlist_);
  fetchlist_.MergeFrom(from.fetchlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_levuptime()) {
      set_levuptime(from.levuptime());
    }
    if (from.has_ownerid()) {
      set_ownerid(from.ownerid());
    }
    if (from.has_guildplacard()) {
      set_guildplacard(from.guildplacard());
    }
    if (from.has_canjoin()) {
      set_canjoin(from.canjoin());
    }
    if (from.has_joincombat()) {
      set_joincombat(from.joincombat());
    }
    if (from.has_resources()) {
      set_resources(from.resources());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_refrishmultiple()) {
      set_refrishmultiple(from.refrishmultiple());
    }
    if (from.has_refrishtime()) {
      set_refrishtime(from.refrishtime());
    }
    if (from.has_weekmissioncounts()) {
      set_weekmissioncounts(from.weekmissioncounts());
    }
    if (from.has_isaudit()) {
      set_isaudit(from.isaudit());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_impinfo()) {
      mutable_impinfo()->::proto::message::ImpeachInfo::MergeFrom(from.impinfo());
    }
    if (from.has_guilddeclaration()) {
      set_guilddeclaration(from.guilddeclaration());
    }
    if (from.has_lastcosttime()) {
      set_lastcosttime(from.lastcosttime());
    }
    if (from.has_boomtime()) {
      set_boomtime(from.boomtime());
    }
    if (from.has_settlementtime()) {
      set_settlementtime(from.settlementtime());
    }
    if (from.has_bossinfo()) {
      mutable_bossinfo()->::proto::message::GuildBoss::MergeFrom(from.bossinfo());
    }
    if (from.has_maxitem()) {
      set_maxitem(from.maxitem());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_buygridcounts()) {
      set_buygridcounts(from.buygridcounts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MixGuildData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MixGuildData::CopyFrom(const MixGuildData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MixGuildData::IsInitialized() const {

  for (int i = 0; i < helpinfo_size(); i++) {
    if (!this->helpinfo(i).IsInitialized()) return false;
  }
  return true;
}

void MixGuildData::Swap(MixGuildData* other) {
  if (other != this) {
    std::swap(levuptime_, other->levuptime_);
    std::swap(ownerid_, other->ownerid_);
    std::swap(guildplacard_, other->guildplacard_);
    std::swap(canjoin_, other->canjoin_);
    std::swap(joincombat_, other->joincombat_);
    std::swap(resources_, other->resources_);
    buildlist_.Swap(&other->buildlist_);
    reqlist_.Swap(&other->reqlist_);
    shopinfo_.Swap(&other->shopinfo_);
    std::swap(refrishmultiple_, other->refrishmultiple_);
    std::swap(refrishtime_, other->refrishtime_);
    kickinfolist_.Swap(&other->kickinfolist_);
    std::swap(weekmissioncounts_, other->weekmissioncounts_);
    onlinecounts_.Swap(&other->onlinecounts_);
    helpinfo_.Swap(&other->helpinfo_);
    std::swap(isaudit_, other->isaudit_);
    std::swap(impinfo_, other->impinfo_);
    std::swap(guilddeclaration_, other->guilddeclaration_);
    std::swap(lastcosttime_, other->lastcosttime_);
    std::swap(boomtime_, other->boomtime_);
    std::swap(settlementtime_, other->settlementtime_);
    std::swap(bossinfo_, other->bossinfo_);
    std::swap(maxitem_, other->maxitem_);
    guildequip_.Swap(&other->guildequip_);
    std::swap(buygridcounts_, other->buygridcounts_);
    depositlist_.Swap(&other->depositlist_);
    fetchlist_.Swap(&other->fetchlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MixGuildData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MixGuildData_descriptor_;
  metadata.reflection = MixGuildData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildData::kGuildidFieldNumber;
const int GuildData::kGuildnameFieldNumber;
const int GuildData::kGuildlevelFieldNumber;
const int GuildData::kOwnernameFieldNumber;
const int GuildData::kProsperityFieldNumber;
const int GuildData::kMixinfoFieldNumber;
#endif  // !_MSC_VER

GuildData::GuildData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildData::InitAsDefaultInstance() {
  mixinfo_ = const_cast< ::proto::message::MixGuildData*>(&::proto::message::MixGuildData::default_instance());
}

GuildData::GuildData(const GuildData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildData::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guildlevel_ = 0u;
  ownername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prosperity_ = 0u;
  mixinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildData::~GuildData() {
  SharedDtor();
}

void GuildData::SharedDtor() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (ownername_ != &::google::protobuf::internal::kEmptyString) {
    delete ownername_;
  }
  if (this != default_instance_) {
    delete mixinfo_;
  }
}

void GuildData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildData_descriptor_;
}

const GuildData& GuildData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildData* GuildData::default_instance_ = NULL;

GuildData* GuildData::New() const {
  return new GuildData;
}

void GuildData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid_ = GOOGLE_ULONGLONG(0);
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
    guildlevel_ = 0u;
    if (has_ownername()) {
      if (ownername_ != &::google::protobuf::internal::kEmptyString) {
        ownername_->clear();
      }
    }
    prosperity_ = 0u;
    if (has_mixinfo()) {
      if (mixinfo_ != NULL) mixinfo_->::proto::message::MixGuildData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 guildid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_guildname;
        break;
      }

      // optional string guildname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_guildlevel;
        break;
      }

      // optional uint32 guildlevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildlevel_)));
          set_has_guildlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ownername;
        break;
      }

      // optional string ownername = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ownername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ownername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ownername().data(), this->ownername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_prosperity;
        break;
      }

      // optional uint32 prosperity = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prosperity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prosperity_)));
          set_has_prosperity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_mixinfo;
        break;
      }

      // optional .proto.message.MixGuildData mixinfo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mixinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mixinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 guildid = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guildid(), output);
  }

  // optional string guildname = 2;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->guildname(), output);
  }

  // optional uint32 guildlevel = 3;
  if (has_guildlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->guildlevel(), output);
  }

  // optional string ownername = 4;
  if (has_ownername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ownername().data(), this->ownername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ownername(), output);
  }

  // optional uint32 prosperity = 5;
  if (has_prosperity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->prosperity(), output);
  }

  // optional .proto.message.MixGuildData mixinfo = 6;
  if (has_mixinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->mixinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 guildid = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guildid(), target);
  }

  // optional string guildname = 2;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->guildname(), target);
  }

  // optional uint32 guildlevel = 3;
  if (has_guildlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->guildlevel(), target);
  }

  // optional string ownername = 4;
  if (has_ownername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ownername().data(), this->ownername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ownername(), target);
  }

  // optional uint32 prosperity = 5;
  if (has_prosperity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->prosperity(), target);
  }

  // optional .proto.message.MixGuildData mixinfo = 6;
  if (has_mixinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->mixinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 guildid = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional string guildname = 2;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // optional uint32 guildlevel = 3;
    if (has_guildlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildlevel());
    }

    // optional string ownername = 4;
    if (has_ownername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ownername());
    }

    // optional uint32 prosperity = 5;
    if (has_prosperity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prosperity());
    }

    // optional .proto.message.MixGuildData mixinfo = 6;
    if (has_mixinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mixinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildData::MergeFrom(const GuildData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_guildlevel()) {
      set_guildlevel(from.guildlevel());
    }
    if (from.has_ownername()) {
      set_ownername(from.ownername());
    }
    if (from.has_prosperity()) {
      set_prosperity(from.prosperity());
    }
    if (from.has_mixinfo()) {
      mutable_mixinfo()->::proto::message::MixGuildData::MergeFrom(from.mixinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildData::CopyFrom(const GuildData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildData::IsInitialized() const {

  if (has_mixinfo()) {
    if (!this->mixinfo().IsInitialized()) return false;
  }
  return true;
}

void GuildData::Swap(GuildData* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(guildname_, other->guildname_);
    std::swap(guildlevel_, other->guildlevel_);
    std::swap(ownername_, other->ownername_);
    std::swap(prosperity_, other->prosperity_);
    std::swap(mixinfo_, other->mixinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildData_descriptor_;
  metadata.reflection = GuildData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MixMemberDate::kGetwagetimeFieldNumber;
const int MixMemberDate::kJointimeFieldNumber;
const int MixMemberDate::kOfflinetimeFieldNumber;
const int MixMemberDate::kBuyitemtimeFieldNumber;
const int MixMemberDate::kBuyitemcountsFieldNumber;
const int MixMemberDate::kPendingwageFieldNumber;
const int MixMemberDate::kCurrbasewageFieldNumber;
const int MixMemberDate::kAccumulatedFieldNumber;
const int MixMemberDate::kWeekcontributionFieldNumber;
const int MixMemberDate::kLandbattlecountsFieldNumber;
const int MixMemberDate::kNavalbattlecountsFieldNumber;
const int MixMemberDate::kImpeachmenttimeFieldNumber;
const int MixMemberDate::kCombatvalueFieldNumber;
const int MixMemberDate::kAlivevalueFieldNumber;
const int MixMemberDate::kDonateFieldNumber;
const int MixMemberDate::kTbrewardlistFieldNumber;
#endif  // !_MSC_VER

MixMemberDate::MixMemberDate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MixMemberDate::InitAsDefaultInstance() {
}

MixMemberDate::MixMemberDate(const MixMemberDate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MixMemberDate::SharedCtor() {
  _cached_size_ = 0;
  getwagetime_ = GOOGLE_ULONGLONG(0);
  jointime_ = GOOGLE_ULONGLONG(0);
  offlinetime_ = GOOGLE_ULONGLONG(0);
  buyitemtime_ = GOOGLE_ULONGLONG(0);
  buyitemcounts_ = 0u;
  pendingwage_ = 0u;
  currbasewage_ = 0u;
  accumulated_ = GOOGLE_ULONGLONG(0);
  weekcontribution_ = 0u;
  landbattlecounts_ = 0u;
  navalbattlecounts_ = 0u;
  impeachmenttime_ = GOOGLE_ULONGLONG(0);
  combatvalue_ = 0u;
  alivevalue_ = 0u;
  donate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MixMemberDate::~MixMemberDate() {
  SharedDtor();
}

void MixMemberDate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MixMemberDate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MixMemberDate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MixMemberDate_descriptor_;
}

const MixMemberDate& MixMemberDate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

MixMemberDate* MixMemberDate::default_instance_ = NULL;

MixMemberDate* MixMemberDate::New() const {
  return new MixMemberDate;
}

void MixMemberDate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    getwagetime_ = GOOGLE_ULONGLONG(0);
    jointime_ = GOOGLE_ULONGLONG(0);
    offlinetime_ = GOOGLE_ULONGLONG(0);
    buyitemtime_ = GOOGLE_ULONGLONG(0);
    buyitemcounts_ = 0u;
    pendingwage_ = 0u;
    currbasewage_ = 0u;
    accumulated_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    weekcontribution_ = 0u;
    landbattlecounts_ = 0u;
    navalbattlecounts_ = 0u;
    impeachmenttime_ = GOOGLE_ULONGLONG(0);
    combatvalue_ = 0u;
    alivevalue_ = 0u;
    donate_ = 0u;
  }
  tbrewardlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MixMemberDate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 getwagetime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &getwagetime_)));
          set_has_getwagetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_jointime;
        break;
      }

      // optional uint64 jointime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jointime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &jointime_)));
          set_has_jointime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_offlinetime;
        break;
      }

      // optional uint64 offlinetime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offlinetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offlinetime_)));
          set_has_offlinetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_buyitemtime;
        break;
      }

      // optional uint64 buyitemtime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyitemtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buyitemtime_)));
          set_has_buyitemtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_buyitemcounts;
        break;
      }

      // optional uint32 buyitemcounts = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyitemcounts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buyitemcounts_)));
          set_has_buyitemcounts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_pendingwage;
        break;
      }

      // optional uint32 pendingwage = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pendingwage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pendingwage_)));
          set_has_pendingwage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_currbasewage;
        break;
      }

      // optional uint32 currbasewage = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currbasewage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currbasewage_)));
          set_has_currbasewage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_accumulated;
        break;
      }

      // optional uint64 accumulated = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accumulated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accumulated_)));
          set_has_accumulated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_weekcontribution;
        break;
      }

      // optional uint32 weekcontribution = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weekcontribution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weekcontribution_)));
          set_has_weekcontribution();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_landbattlecounts;
        break;
      }

      // optional uint32 landbattlecounts = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_landbattlecounts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &landbattlecounts_)));
          set_has_landbattlecounts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_navalbattlecounts;
        break;
      }

      // optional uint32 navalbattlecounts = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_navalbattlecounts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &navalbattlecounts_)));
          set_has_navalbattlecounts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_impeachmenttime;
        break;
      }

      // optional uint64 impeachmenttime = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_impeachmenttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &impeachmenttime_)));
          set_has_impeachmenttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_combatvalue;
        break;
      }

      // optional uint32 combatvalue = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_combatvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &combatvalue_)));
          set_has_combatvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_alivevalue;
        break;
      }

      // optional uint32 alivevalue = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alivevalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &alivevalue_)));
          set_has_alivevalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_donate;
        break;
      }

      // optional uint32 donate = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_donate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &donate_)));
          set_has_donate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_tbrewardlist;
        break;
      }

      // repeated uint32 tbrewardlist = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tbrewardlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 128, input, this->mutable_tbrewardlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_tbrewardlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_tbrewardlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MixMemberDate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 getwagetime = 1;
  if (has_getwagetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->getwagetime(), output);
  }

  // optional uint64 jointime = 2;
  if (has_jointime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->jointime(), output);
  }

  // optional uint64 offlinetime = 3;
  if (has_offlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->offlinetime(), output);
  }

  // optional uint64 buyitemtime = 4;
  if (has_buyitemtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->buyitemtime(), output);
  }

  // optional uint32 buyitemcounts = 5;
  if (has_buyitemcounts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->buyitemcounts(), output);
  }

  // optional uint32 pendingwage = 6;
  if (has_pendingwage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->pendingwage(), output);
  }

  // optional uint32 currbasewage = 7;
  if (has_currbasewage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->currbasewage(), output);
  }

  // optional uint64 accumulated = 8;
  if (has_accumulated()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->accumulated(), output);
  }

  // optional uint32 weekcontribution = 9;
  if (has_weekcontribution()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->weekcontribution(), output);
  }

  // optional uint32 landbattlecounts = 10;
  if (has_landbattlecounts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->landbattlecounts(), output);
  }

  // optional uint32 navalbattlecounts = 11;
  if (has_navalbattlecounts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->navalbattlecounts(), output);
  }

  // optional uint64 impeachmenttime = 12;
  if (has_impeachmenttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->impeachmenttime(), output);
  }

  // optional uint32 combatvalue = 13;
  if (has_combatvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->combatvalue(), output);
  }

  // optional uint32 alivevalue = 14;
  if (has_alivevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->alivevalue(), output);
  }

  // optional uint32 donate = 15;
  if (has_donate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->donate(), output);
  }

  // repeated uint32 tbrewardlist = 16;
  for (int i = 0; i < this->tbrewardlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      16, this->tbrewardlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MixMemberDate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 getwagetime = 1;
  if (has_getwagetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->getwagetime(), target);
  }

  // optional uint64 jointime = 2;
  if (has_jointime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->jointime(), target);
  }

  // optional uint64 offlinetime = 3;
  if (has_offlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->offlinetime(), target);
  }

  // optional uint64 buyitemtime = 4;
  if (has_buyitemtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->buyitemtime(), target);
  }

  // optional uint32 buyitemcounts = 5;
  if (has_buyitemcounts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->buyitemcounts(), target);
  }

  // optional uint32 pendingwage = 6;
  if (has_pendingwage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->pendingwage(), target);
  }

  // optional uint32 currbasewage = 7;
  if (has_currbasewage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->currbasewage(), target);
  }

  // optional uint64 accumulated = 8;
  if (has_accumulated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->accumulated(), target);
  }

  // optional uint32 weekcontribution = 9;
  if (has_weekcontribution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->weekcontribution(), target);
  }

  // optional uint32 landbattlecounts = 10;
  if (has_landbattlecounts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->landbattlecounts(), target);
  }

  // optional uint32 navalbattlecounts = 11;
  if (has_navalbattlecounts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->navalbattlecounts(), target);
  }

  // optional uint64 impeachmenttime = 12;
  if (has_impeachmenttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->impeachmenttime(), target);
  }

  // optional uint32 combatvalue = 13;
  if (has_combatvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->combatvalue(), target);
  }

  // optional uint32 alivevalue = 14;
  if (has_alivevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->alivevalue(), target);
  }

  // optional uint32 donate = 15;
  if (has_donate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->donate(), target);
  }

  // repeated uint32 tbrewardlist = 16;
  for (int i = 0; i < this->tbrewardlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(16, this->tbrewardlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MixMemberDate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 getwagetime = 1;
    if (has_getwagetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->getwagetime());
    }

    // optional uint64 jointime = 2;
    if (has_jointime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->jointime());
    }

    // optional uint64 offlinetime = 3;
    if (has_offlinetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->offlinetime());
    }

    // optional uint64 buyitemtime = 4;
    if (has_buyitemtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->buyitemtime());
    }

    // optional uint32 buyitemcounts = 5;
    if (has_buyitemcounts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buyitemcounts());
    }

    // optional uint32 pendingwage = 6;
    if (has_pendingwage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pendingwage());
    }

    // optional uint32 currbasewage = 7;
    if (has_currbasewage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->currbasewage());
    }

    // optional uint64 accumulated = 8;
    if (has_accumulated()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accumulated());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 weekcontribution = 9;
    if (has_weekcontribution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weekcontribution());
    }

    // optional uint32 landbattlecounts = 10;
    if (has_landbattlecounts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->landbattlecounts());
    }

    // optional uint32 navalbattlecounts = 11;
    if (has_navalbattlecounts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->navalbattlecounts());
    }

    // optional uint64 impeachmenttime = 12;
    if (has_impeachmenttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->impeachmenttime());
    }

    // optional uint32 combatvalue = 13;
    if (has_combatvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->combatvalue());
    }

    // optional uint32 alivevalue = 14;
    if (has_alivevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->alivevalue());
    }

    // optional uint32 donate = 15;
    if (has_donate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->donate());
    }

  }
  // repeated uint32 tbrewardlist = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->tbrewardlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->tbrewardlist(i));
    }
    total_size += 2 * this->tbrewardlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MixMemberDate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MixMemberDate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MixMemberDate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MixMemberDate::MergeFrom(const MixMemberDate& from) {
  GOOGLE_CHECK_NE(&from, this);
  tbrewardlist_.MergeFrom(from.tbrewardlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_getwagetime()) {
      set_getwagetime(from.getwagetime());
    }
    if (from.has_jointime()) {
      set_jointime(from.jointime());
    }
    if (from.has_offlinetime()) {
      set_offlinetime(from.offlinetime());
    }
    if (from.has_buyitemtime()) {
      set_buyitemtime(from.buyitemtime());
    }
    if (from.has_buyitemcounts()) {
      set_buyitemcounts(from.buyitemcounts());
    }
    if (from.has_pendingwage()) {
      set_pendingwage(from.pendingwage());
    }
    if (from.has_currbasewage()) {
      set_currbasewage(from.currbasewage());
    }
    if (from.has_accumulated()) {
      set_accumulated(from.accumulated());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_weekcontribution()) {
      set_weekcontribution(from.weekcontribution());
    }
    if (from.has_landbattlecounts()) {
      set_landbattlecounts(from.landbattlecounts());
    }
    if (from.has_navalbattlecounts()) {
      set_navalbattlecounts(from.navalbattlecounts());
    }
    if (from.has_impeachmenttime()) {
      set_impeachmenttime(from.impeachmenttime());
    }
    if (from.has_combatvalue()) {
      set_combatvalue(from.combatvalue());
    }
    if (from.has_alivevalue()) {
      set_alivevalue(from.alivevalue());
    }
    if (from.has_donate()) {
      set_donate(from.donate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MixMemberDate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MixMemberDate::CopyFrom(const MixMemberDate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MixMemberDate::IsInitialized() const {

  return true;
}

void MixMemberDate::Swap(MixMemberDate* other) {
  if (other != this) {
    std::swap(getwagetime_, other->getwagetime_);
    std::swap(jointime_, other->jointime_);
    std::swap(offlinetime_, other->offlinetime_);
    std::swap(buyitemtime_, other->buyitemtime_);
    std::swap(buyitemcounts_, other->buyitemcounts_);
    std::swap(pendingwage_, other->pendingwage_);
    std::swap(currbasewage_, other->currbasewage_);
    std::swap(accumulated_, other->accumulated_);
    std::swap(weekcontribution_, other->weekcontribution_);
    std::swap(landbattlecounts_, other->landbattlecounts_);
    std::swap(navalbattlecounts_, other->navalbattlecounts_);
    std::swap(impeachmenttime_, other->impeachmenttime_);
    std::swap(combatvalue_, other->combatvalue_);
    std::swap(alivevalue_, other->alivevalue_);
    std::swap(donate_, other->donate_);
    tbrewardlist_.Swap(&other->tbrewardlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MixMemberDate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MixMemberDate_descriptor_;
  metadata.reflection = MixMemberDate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMemberData::kPlayeridFieldNumber;
const int GuildMemberData::kStrnameFieldNumber;
const int GuildMemberData::kLevelFieldNumber;
const int GuildMemberData::kGuildidFieldNumber;
const int GuildMemberData::kGuildofficeFieldNumber;
const int GuildMemberData::kGuildmoneyFieldNumber;
const int GuildMemberData::kProfessionFieldNumber;
const int GuildMemberData::kMixinfoFieldNumber;
const int GuildMemberData::kDhlevFieldNumber;
#endif  // !_MSC_VER

GuildMemberData::GuildMemberData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMemberData::InitAsDefaultInstance() {
  mixinfo_ = const_cast< ::proto::message::MixMemberDate*>(&::proto::message::MixMemberDate::default_instance());
}

GuildMemberData::GuildMemberData(const GuildMemberData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMemberData::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  strname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  guildid_ = GOOGLE_ULONGLONG(0);
  guildoffice_ = 0u;
  guildmoney_ = 0u;
  profession_ = 0u;
  mixinfo_ = NULL;
  dhlev_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMemberData::~GuildMemberData() {
  SharedDtor();
}

void GuildMemberData::SharedDtor() {
  if (strname_ != &::google::protobuf::internal::kEmptyString) {
    delete strname_;
  }
  if (this != default_instance_) {
    delete mixinfo_;
  }
}

void GuildMemberData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMemberData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMemberData_descriptor_;
}

const GuildMemberData& GuildMemberData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMemberData* GuildMemberData::default_instance_ = NULL;

GuildMemberData* GuildMemberData::New() const {
  return new GuildMemberData;
}

void GuildMemberData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
    if (has_strname()) {
      if (strname_ != &::google::protobuf::internal::kEmptyString) {
        strname_->clear();
      }
    }
    level_ = 0u;
    guildid_ = GOOGLE_ULONGLONG(0);
    guildoffice_ = 0u;
    guildmoney_ = 0u;
    profession_ = 0u;
    if (has_mixinfo()) {
      if (mixinfo_ != NULL) mixinfo_->::proto::message::MixMemberDate::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    dhlev_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMemberData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strname;
        break;
      }

      // optional string strname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strname().data(), this->strname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_guildid;
        break;
      }

      // optional uint64 guildid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_guildoffice;
        break;
      }

      // optional uint32 guildoffice = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildoffice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildoffice_)));
          set_has_guildoffice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_guildmoney;
        break;
      }

      // optional uint32 guildmoney = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildmoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildmoney_)));
          set_has_guildmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_profession;
        break;
      }

      // optional uint32 profession = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_mixinfo;
        break;
      }

      // optional .proto.message.MixMemberDate mixinfo = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mixinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mixinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_dhlev;
        break;
      }

      // optional uint32 dhlev = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dhlev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dhlev_)));
          set_has_dhlev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMemberData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  // optional string strname = 2;
  if (has_strname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strname().data(), this->strname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->strname(), output);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // optional uint64 guildid = 4;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->guildid(), output);
  }

  // optional uint32 guildoffice = 5;
  if (has_guildoffice()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->guildoffice(), output);
  }

  // optional uint32 guildmoney = 6;
  if (has_guildmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->guildmoney(), output);
  }

  // optional uint32 profession = 7;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->profession(), output);
  }

  // optional .proto.message.MixMemberDate mixinfo = 8;
  if (has_mixinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->mixinfo(), output);
  }

  // optional uint32 dhlev = 9;
  if (has_dhlev()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->dhlev(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMemberData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  // optional string strname = 2;
  if (has_strname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strname().data(), this->strname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strname(), target);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // optional uint64 guildid = 4;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->guildid(), target);
  }

  // optional uint32 guildoffice = 5;
  if (has_guildoffice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->guildoffice(), target);
  }

  // optional uint32 guildmoney = 6;
  if (has_guildmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->guildmoney(), target);
  }

  // optional uint32 profession = 7;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->profession(), target);
  }

  // optional .proto.message.MixMemberDate mixinfo = 8;
  if (has_mixinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->mixinfo(), target);
  }

  // optional uint32 dhlev = 9;
  if (has_dhlev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->dhlev(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMemberData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // optional string strname = 2;
    if (has_strname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strname());
    }

    // optional uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint64 guildid = 4;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional uint32 guildoffice = 5;
    if (has_guildoffice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildoffice());
    }

    // optional uint32 guildmoney = 6;
    if (has_guildmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildmoney());
    }

    // optional uint32 profession = 7;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->profession());
    }

    // optional .proto.message.MixMemberDate mixinfo = 8;
    if (has_mixinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mixinfo());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 dhlev = 9;
    if (has_dhlev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dhlev());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMemberData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMemberData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMemberData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMemberData::MergeFrom(const GuildMemberData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_strname()) {
      set_strname(from.strname());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_guildoffice()) {
      set_guildoffice(from.guildoffice());
    }
    if (from.has_guildmoney()) {
      set_guildmoney(from.guildmoney());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_mixinfo()) {
      mutable_mixinfo()->::proto::message::MixMemberDate::MergeFrom(from.mixinfo());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dhlev()) {
      set_dhlev(from.dhlev());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMemberData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMemberData::CopyFrom(const GuildMemberData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMemberData::IsInitialized() const {

  return true;
}

void GuildMemberData::Swap(GuildMemberData* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(strname_, other->strname_);
    std::swap(level_, other->level_);
    std::swap(guildid_, other->guildid_);
    std::swap(guildoffice_, other->guildoffice_);
    std::swap(guildmoney_, other->guildmoney_);
    std::swap(profession_, other->profession_);
    std::swap(mixinfo_, other->mixinfo_);
    std::swap(dhlev_, other->dhlev_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMemberData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMemberData_descriptor_;
  metadata.reflection = GuildMemberData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MemberListInfo::kPlayeridFieldNumber;
const int MemberListInfo::kStrnameFieldNumber;
const int MemberListInfo::kLevelFieldNumber;
const int MemberListInfo::kProfessionFieldNumber;
const int MemberListInfo::kGuildofficeFieldNumber;
const int MemberListInfo::kJointimeFieldNumber;
const int MemberListInfo::kOfflinetimeFieldNumber;
const int MemberListInfo::kAccumulatedFieldNumber;
const int MemberListInfo::kWeekcontributionFieldNumber;
const int MemberListInfo::kLandbattlecountsFieldNumber;
const int MemberListInfo::kNavalbattlecountsFieldNumber;
const int MemberListInfo::kIsonlineFieldNumber;
const int MemberListInfo::kCombatvalueFieldNumber;
const int MemberListInfo::kDhlevFieldNumber;
#endif  // !_MSC_VER

MemberListInfo::MemberListInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MemberListInfo::InitAsDefaultInstance() {
}

MemberListInfo::MemberListInfo(const MemberListInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MemberListInfo::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  strname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  profession_ = 0u;
  guildoffice_ = 0u;
  jointime_ = GOOGLE_ULONGLONG(0);
  offlinetime_ = GOOGLE_ULONGLONG(0);
  accumulated_ = GOOGLE_ULONGLONG(0);
  weekcontribution_ = 0u;
  landbattlecounts_ = 0u;
  navalbattlecounts_ = 0u;
  isonline_ = false;
  combatvalue_ = 0u;
  dhlev_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemberListInfo::~MemberListInfo() {
  SharedDtor();
}

void MemberListInfo::SharedDtor() {
  if (strname_ != &::google::protobuf::internal::kEmptyString) {
    delete strname_;
  }
  if (this != default_instance_) {
  }
}

void MemberListInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemberListInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemberListInfo_descriptor_;
}

const MemberListInfo& MemberListInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

MemberListInfo* MemberListInfo::default_instance_ = NULL;

MemberListInfo* MemberListInfo::New() const {
  return new MemberListInfo;
}

void MemberListInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
    if (has_strname()) {
      if (strname_ != &::google::protobuf::internal::kEmptyString) {
        strname_->clear();
      }
    }
    level_ = 0u;
    profession_ = 0u;
    guildoffice_ = 0u;
    jointime_ = GOOGLE_ULONGLONG(0);
    offlinetime_ = GOOGLE_ULONGLONG(0);
    accumulated_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    weekcontribution_ = 0u;
    landbattlecounts_ = 0u;
    navalbattlecounts_ = 0u;
    isonline_ = false;
    combatvalue_ = 0u;
    dhlev_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MemberListInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strname;
        break;
      }

      // optional string strname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strname().data(), this->strname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_profession;
        break;
      }

      // optional uint32 profession = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_guildoffice;
        break;
      }

      // optional uint32 guildoffice = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildoffice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildoffice_)));
          set_has_guildoffice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_jointime;
        break;
      }

      // optional uint64 jointime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jointime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &jointime_)));
          set_has_jointime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_offlinetime;
        break;
      }

      // optional uint64 offlinetime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offlinetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offlinetime_)));
          set_has_offlinetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_accumulated;
        break;
      }

      // optional uint64 accumulated = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accumulated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accumulated_)));
          set_has_accumulated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_weekcontribution;
        break;
      }

      // optional uint32 weekcontribution = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weekcontribution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weekcontribution_)));
          set_has_weekcontribution();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_landbattlecounts;
        break;
      }

      // optional uint32 landbattlecounts = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_landbattlecounts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &landbattlecounts_)));
          set_has_landbattlecounts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_navalbattlecounts;
        break;
      }

      // optional uint32 navalbattlecounts = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_navalbattlecounts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &navalbattlecounts_)));
          set_has_navalbattlecounts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_isonline;
        break;
      }

      // optional bool isonline = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isonline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isonline_)));
          set_has_isonline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_combatvalue;
        break;
      }

      // optional uint32 combatvalue = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_combatvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &combatvalue_)));
          set_has_combatvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_dhlev;
        break;
      }

      // optional uint32 dhlev = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dhlev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dhlev_)));
          set_has_dhlev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MemberListInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  // optional string strname = 2;
  if (has_strname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strname().data(), this->strname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->strname(), output);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // optional uint32 profession = 4;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->profession(), output);
  }

  // optional uint32 guildoffice = 5;
  if (has_guildoffice()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->guildoffice(), output);
  }

  // optional uint64 jointime = 6;
  if (has_jointime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->jointime(), output);
  }

  // optional uint64 offlinetime = 7;
  if (has_offlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->offlinetime(), output);
  }

  // optional uint64 accumulated = 8;
  if (has_accumulated()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->accumulated(), output);
  }

  // optional uint32 weekcontribution = 9;
  if (has_weekcontribution()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->weekcontribution(), output);
  }

  // optional uint32 landbattlecounts = 10;
  if (has_landbattlecounts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->landbattlecounts(), output);
  }

  // optional uint32 navalbattlecounts = 11;
  if (has_navalbattlecounts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->navalbattlecounts(), output);
  }

  // optional bool isonline = 12;
  if (has_isonline()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->isonline(), output);
  }

  // optional uint32 combatvalue = 13;
  if (has_combatvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->combatvalue(), output);
  }

  // optional uint32 dhlev = 14;
  if (has_dhlev()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->dhlev(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MemberListInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  // optional string strname = 2;
  if (has_strname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strname().data(), this->strname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strname(), target);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // optional uint32 profession = 4;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->profession(), target);
  }

  // optional uint32 guildoffice = 5;
  if (has_guildoffice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->guildoffice(), target);
  }

  // optional uint64 jointime = 6;
  if (has_jointime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->jointime(), target);
  }

  // optional uint64 offlinetime = 7;
  if (has_offlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->offlinetime(), target);
  }

  // optional uint64 accumulated = 8;
  if (has_accumulated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->accumulated(), target);
  }

  // optional uint32 weekcontribution = 9;
  if (has_weekcontribution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->weekcontribution(), target);
  }

  // optional uint32 landbattlecounts = 10;
  if (has_landbattlecounts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->landbattlecounts(), target);
  }

  // optional uint32 navalbattlecounts = 11;
  if (has_navalbattlecounts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->navalbattlecounts(), target);
  }

  // optional bool isonline = 12;
  if (has_isonline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->isonline(), target);
  }

  // optional uint32 combatvalue = 13;
  if (has_combatvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->combatvalue(), target);
  }

  // optional uint32 dhlev = 14;
  if (has_dhlev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->dhlev(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MemberListInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // optional string strname = 2;
    if (has_strname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strname());
    }

    // optional uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 profession = 4;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->profession());
    }

    // optional uint32 guildoffice = 5;
    if (has_guildoffice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildoffice());
    }

    // optional uint64 jointime = 6;
    if (has_jointime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->jointime());
    }

    // optional uint64 offlinetime = 7;
    if (has_offlinetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->offlinetime());
    }

    // optional uint64 accumulated = 8;
    if (has_accumulated()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accumulated());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 weekcontribution = 9;
    if (has_weekcontribution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weekcontribution());
    }

    // optional uint32 landbattlecounts = 10;
    if (has_landbattlecounts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->landbattlecounts());
    }

    // optional uint32 navalbattlecounts = 11;
    if (has_navalbattlecounts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->navalbattlecounts());
    }

    // optional bool isonline = 12;
    if (has_isonline()) {
      total_size += 1 + 1;
    }

    // optional uint32 combatvalue = 13;
    if (has_combatvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->combatvalue());
    }

    // optional uint32 dhlev = 14;
    if (has_dhlev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dhlev());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemberListInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MemberListInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MemberListInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MemberListInfo::MergeFrom(const MemberListInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_strname()) {
      set_strname(from.strname());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_guildoffice()) {
      set_guildoffice(from.guildoffice());
    }
    if (from.has_jointime()) {
      set_jointime(from.jointime());
    }
    if (from.has_offlinetime()) {
      set_offlinetime(from.offlinetime());
    }
    if (from.has_accumulated()) {
      set_accumulated(from.accumulated());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_weekcontribution()) {
      set_weekcontribution(from.weekcontribution());
    }
    if (from.has_landbattlecounts()) {
      set_landbattlecounts(from.landbattlecounts());
    }
    if (from.has_navalbattlecounts()) {
      set_navalbattlecounts(from.navalbattlecounts());
    }
    if (from.has_isonline()) {
      set_isonline(from.isonline());
    }
    if (from.has_combatvalue()) {
      set_combatvalue(from.combatvalue());
    }
    if (from.has_dhlev()) {
      set_dhlev(from.dhlev());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MemberListInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberListInfo::CopyFrom(const MemberListInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberListInfo::IsInitialized() const {

  return true;
}

void MemberListInfo::Swap(MemberListInfo* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(strname_, other->strname_);
    std::swap(level_, other->level_);
    std::swap(profession_, other->profession_);
    std::swap(guildoffice_, other->guildoffice_);
    std::swap(jointime_, other->jointime_);
    std::swap(offlinetime_, other->offlinetime_);
    std::swap(accumulated_, other->accumulated_);
    std::swap(weekcontribution_, other->weekcontribution_);
    std::swap(landbattlecounts_, other->landbattlecounts_);
    std::swap(navalbattlecounts_, other->navalbattlecounts_);
    std::swap(isonline_, other->isonline_);
    std::swap(combatvalue_, other->combatvalue_);
    std::swap(dhlev_, other->dhlev_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MemberListInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemberListInfo_descriptor_;
  metadata.reflection = MemberListInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UniteGuildData::kRankingFieldNumber;
const int UniteGuildData::kGuildnameFieldNumber;
const int UniteGuildData::kReqplayeridFieldNumber;
const int UniteGuildData::kReqguildidFieldNumber;
const int UniteGuildData::kGuildlevFieldNumber;
const int UniteGuildData::kMembernumFieldNumber;
const int UniteGuildData::kAckguildnameFieldNumber;
const int UniteGuildData::kAckplayeridFieldNumber;
const int UniteGuildData::kAckguildidFieldNumber;
const int UniteGuildData::kWhomasterFieldNumber;
const int UniteGuildData::kEndtimeFieldNumber;
#endif  // !_MSC_VER

UniteGuildData::UniteGuildData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UniteGuildData::InitAsDefaultInstance() {
}

UniteGuildData::UniteGuildData(const UniteGuildData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UniteGuildData::SharedCtor() {
  _cached_size_ = 0;
  ranking_ = 0u;
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reqplayerid_ = GOOGLE_ULONGLONG(0);
  reqguildid_ = GOOGLE_ULONGLONG(0);
  guildlev_ = 0u;
  membernum_ = 0u;
  ackguildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ackplayerid_ = GOOGLE_ULONGLONG(0);
  ackguildid_ = GOOGLE_ULONGLONG(0);
  whomaster_ = 0u;
  endtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UniteGuildData::~UniteGuildData() {
  SharedDtor();
}

void UniteGuildData::SharedDtor() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (ackguildname_ != &::google::protobuf::internal::kEmptyString) {
    delete ackguildname_;
  }
  if (this != default_instance_) {
  }
}

void UniteGuildData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UniteGuildData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UniteGuildData_descriptor_;
}

const UniteGuildData& UniteGuildData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

UniteGuildData* UniteGuildData::default_instance_ = NULL;

UniteGuildData* UniteGuildData::New() const {
  return new UniteGuildData;
}

void UniteGuildData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ranking_ = 0u;
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
    reqplayerid_ = GOOGLE_ULONGLONG(0);
    reqguildid_ = GOOGLE_ULONGLONG(0);
    guildlev_ = 0u;
    membernum_ = 0u;
    if (has_ackguildname()) {
      if (ackguildname_ != &::google::protobuf::internal::kEmptyString) {
        ackguildname_->clear();
      }
    }
    ackplayerid_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    ackguildid_ = GOOGLE_ULONGLONG(0);
    whomaster_ = 0u;
    endtime_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UniteGuildData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ranking = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ranking_)));
          set_has_ranking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_guildname;
        break;
      }

      // optional string guildname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reqplayerid;
        break;
      }

      // optional uint64 reqplayerid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reqplayerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reqplayerid_)));
          set_has_reqplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_reqguildid;
        break;
      }

      // optional uint64 reqguildid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reqguildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reqguildid_)));
          set_has_reqguildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_guildlev;
        break;
      }

      // optional uint32 guildlev = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildlev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildlev_)));
          set_has_guildlev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_membernum;
        break;
      }

      // optional uint32 membernum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_membernum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &membernum_)));
          set_has_membernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ackguildname;
        break;
      }

      // optional string ackguildname = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ackguildname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ackguildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ackguildname().data(), this->ackguildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ackplayerid;
        break;
      }

      // optional uint64 ackplayerid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ackplayerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ackplayerid_)));
          set_has_ackplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_ackguildid;
        break;
      }

      // optional uint64 ackguildid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ackguildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ackguildid_)));
          set_has_ackguildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_whomaster;
        break;
      }

      // optional uint32 whomaster = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_whomaster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &whomaster_)));
          set_has_whomaster();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_endtime;
        break;
      }

      // optional uint64 endtime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UniteGuildData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ranking = 1;
  if (has_ranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ranking(), output);
  }

  // optional string guildname = 2;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->guildname(), output);
  }

  // optional uint64 reqplayerid = 3;
  if (has_reqplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->reqplayerid(), output);
  }

  // optional uint64 reqguildid = 4;
  if (has_reqguildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->reqguildid(), output);
  }

  // optional uint32 guildlev = 5;
  if (has_guildlev()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->guildlev(), output);
  }

  // optional uint32 membernum = 6;
  if (has_membernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->membernum(), output);
  }

  // optional string ackguildname = 7;
  if (has_ackguildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ackguildname().data(), this->ackguildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->ackguildname(), output);
  }

  // optional uint64 ackplayerid = 8;
  if (has_ackplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->ackplayerid(), output);
  }

  // optional uint64 ackguildid = 9;
  if (has_ackguildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->ackguildid(), output);
  }

  // optional uint32 whomaster = 10;
  if (has_whomaster()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->whomaster(), output);
  }

  // optional uint64 endtime = 11;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->endtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UniteGuildData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ranking = 1;
  if (has_ranking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ranking(), target);
  }

  // optional string guildname = 2;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->guildname(), target);
  }

  // optional uint64 reqplayerid = 3;
  if (has_reqplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->reqplayerid(), target);
  }

  // optional uint64 reqguildid = 4;
  if (has_reqguildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->reqguildid(), target);
  }

  // optional uint32 guildlev = 5;
  if (has_guildlev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->guildlev(), target);
  }

  // optional uint32 membernum = 6;
  if (has_membernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->membernum(), target);
  }

  // optional string ackguildname = 7;
  if (has_ackguildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ackguildname().data(), this->ackguildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->ackguildname(), target);
  }

  // optional uint64 ackplayerid = 8;
  if (has_ackplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->ackplayerid(), target);
  }

  // optional uint64 ackguildid = 9;
  if (has_ackguildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->ackguildid(), target);
  }

  // optional uint32 whomaster = 10;
  if (has_whomaster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->whomaster(), target);
  }

  // optional uint64 endtime = 11;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->endtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UniteGuildData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ranking = 1;
    if (has_ranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ranking());
    }

    // optional string guildname = 2;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // optional uint64 reqplayerid = 3;
    if (has_reqplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->reqplayerid());
    }

    // optional uint64 reqguildid = 4;
    if (has_reqguildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->reqguildid());
    }

    // optional uint32 guildlev = 5;
    if (has_guildlev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildlev());
    }

    // optional uint32 membernum = 6;
    if (has_membernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->membernum());
    }

    // optional string ackguildname = 7;
    if (has_ackguildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ackguildname());
    }

    // optional uint64 ackplayerid = 8;
    if (has_ackplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ackplayerid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 ackguildid = 9;
    if (has_ackguildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ackguildid());
    }

    // optional uint32 whomaster = 10;
    if (has_whomaster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->whomaster());
    }

    // optional uint64 endtime = 11;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UniteGuildData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UniteGuildData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UniteGuildData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UniteGuildData::MergeFrom(const UniteGuildData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ranking()) {
      set_ranking(from.ranking());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_reqplayerid()) {
      set_reqplayerid(from.reqplayerid());
    }
    if (from.has_reqguildid()) {
      set_reqguildid(from.reqguildid());
    }
    if (from.has_guildlev()) {
      set_guildlev(from.guildlev());
    }
    if (from.has_membernum()) {
      set_membernum(from.membernum());
    }
    if (from.has_ackguildname()) {
      set_ackguildname(from.ackguildname());
    }
    if (from.has_ackplayerid()) {
      set_ackplayerid(from.ackplayerid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ackguildid()) {
      set_ackguildid(from.ackguildid());
    }
    if (from.has_whomaster()) {
      set_whomaster(from.whomaster());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UniteGuildData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UniteGuildData::CopyFrom(const UniteGuildData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UniteGuildData::IsInitialized() const {

  return true;
}

void UniteGuildData::Swap(UniteGuildData* other) {
  if (other != this) {
    std::swap(ranking_, other->ranking_);
    std::swap(guildname_, other->guildname_);
    std::swap(reqplayerid_, other->reqplayerid_);
    std::swap(reqguildid_, other->reqguildid_);
    std::swap(guildlev_, other->guildlev_);
    std::swap(membernum_, other->membernum_);
    std::swap(ackguildname_, other->ackguildname_);
    std::swap(ackplayerid_, other->ackplayerid_);
    std::swap(ackguildid_, other->ackguildid_);
    std::swap(whomaster_, other->whomaster_);
    std::swap(endtime_, other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UniteGuildData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UniteGuildData_descriptor_;
  metadata.reflection = UniteGuildData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildUsedName::kGuildusednameFieldNumber;
#endif  // !_MSC_VER

GuildUsedName::GuildUsedName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildUsedName::InitAsDefaultInstance() {
}

GuildUsedName::GuildUsedName(const GuildUsedName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildUsedName::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildUsedName::~GuildUsedName() {
  SharedDtor();
}

void GuildUsedName::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildUsedName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildUsedName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildUsedName_descriptor_;
}

const GuildUsedName& GuildUsedName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildUsedName* GuildUsedName::default_instance_ = NULL;

GuildUsedName* GuildUsedName::New() const {
  return new GuildUsedName;
}

void GuildUsedName::Clear() {
  guildusedname_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildUsedName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string guildusedname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildusedname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_guildusedname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildusedname(this->guildusedname_size() - 1).data(),
            this->guildusedname(this->guildusedname_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_guildusedname;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildUsedName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string guildusedname = 1;
  for (int i = 0; i < this->guildusedname_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->guildusedname(i).data(), this->guildusedname(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->guildusedname(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildUsedName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string guildusedname = 1;
  for (int i = 0; i < this->guildusedname_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildusedname(i).data(), this->guildusedname(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->guildusedname(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildUsedName::ByteSize() const {
  int total_size = 0;

  // repeated string guildusedname = 1;
  total_size += 1 * this->guildusedname_size();
  for (int i = 0; i < this->guildusedname_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->guildusedname(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildUsedName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildUsedName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildUsedName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildUsedName::MergeFrom(const GuildUsedName& from) {
  GOOGLE_CHECK_NE(&from, this);
  guildusedname_.MergeFrom(from.guildusedname_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildUsedName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildUsedName::CopyFrom(const GuildUsedName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildUsedName::IsInitialized() const {

  return true;
}

void GuildUsedName::Swap(GuildUsedName* other) {
  if (other != this) {
    guildusedname_.Swap(&other->guildusedname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildUsedName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildUsedName_descriptor_;
  metadata.reflection = GuildUsedName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GUsedName::kGuildusednameFieldNumber;
#endif  // !_MSC_VER

GUsedName::GUsedName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GUsedName::InitAsDefaultInstance() {
}

GUsedName::GUsedName(const GUsedName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GUsedName::SharedCtor() {
  _cached_size_ = 0;
  guildusedname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GUsedName::~GUsedName() {
  SharedDtor();
}

void GUsedName::SharedDtor() {
  if (guildusedname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildusedname_;
  }
  if (this != default_instance_) {
  }
}

void GUsedName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GUsedName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GUsedName_descriptor_;
}

const GUsedName& GUsedName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GUsedName* GUsedName::default_instance_ = NULL;

GUsedName* GUsedName::New() const {
  return new GUsedName;
}

void GUsedName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_guildusedname()) {
      if (guildusedname_ != &::google::protobuf::internal::kEmptyString) {
        guildusedname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GUsedName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string guildusedname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildusedname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildusedname().data(), this->guildusedname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GUsedName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string guildusedname = 1;
  if (has_guildusedname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildusedname().data(), this->guildusedname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->guildusedname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GUsedName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string guildusedname = 1;
  if (has_guildusedname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildusedname().data(), this->guildusedname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->guildusedname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GUsedName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string guildusedname = 1;
    if (has_guildusedname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildusedname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GUsedName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GUsedName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GUsedName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GUsedName::MergeFrom(const GUsedName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildusedname()) {
      set_guildusedname(from.guildusedname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GUsedName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GUsedName::CopyFrom(const GUsedName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GUsedName::IsInitialized() const {

  return true;
}

void GUsedName::Swap(GUsedName* other) {
  if (other != this) {
    std::swap(guildusedname_, other->guildusedname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GUsedName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GUsedName_descriptor_;
  metadata.reflection = GUsedName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_CS_ReqGuildList::kPagenumFieldNumber;
#endif  // !_MSC_VER

GuildMSG_CS_ReqGuildList::GuildMSG_CS_ReqGuildList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_CS_ReqGuildList::InitAsDefaultInstance() {
}

GuildMSG_CS_ReqGuildList::GuildMSG_CS_ReqGuildList(const GuildMSG_CS_ReqGuildList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_CS_ReqGuildList::SharedCtor() {
  _cached_size_ = 0;
  pagenum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_CS_ReqGuildList::~GuildMSG_CS_ReqGuildList() {
  SharedDtor();
}

void GuildMSG_CS_ReqGuildList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_CS_ReqGuildList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqGuildList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_CS_ReqGuildList_descriptor_;
}

const GuildMSG_CS_ReqGuildList& GuildMSG_CS_ReqGuildList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_CS_ReqGuildList* GuildMSG_CS_ReqGuildList::default_instance_ = NULL;

GuildMSG_CS_ReqGuildList* GuildMSG_CS_ReqGuildList::New() const {
  return new GuildMSG_CS_ReqGuildList;
}

void GuildMSG_CS_ReqGuildList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pagenum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_CS_ReqGuildList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pagenum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pagenum_)));
          set_has_pagenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_CS_ReqGuildList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 pagenum = 1;
  if (has_pagenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pagenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_CS_ReqGuildList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 pagenum = 1;
  if (has_pagenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pagenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_CS_ReqGuildList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 pagenum = 1;
    if (has_pagenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pagenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_CS_ReqGuildList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_CS_ReqGuildList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_CS_ReqGuildList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_CS_ReqGuildList::MergeFrom(const GuildMSG_CS_ReqGuildList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pagenum()) {
      set_pagenum(from.pagenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_CS_ReqGuildList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_CS_ReqGuildList::CopyFrom(const GuildMSG_CS_ReqGuildList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_CS_ReqGuildList::IsInitialized() const {

  return true;
}

void GuildMSG_CS_ReqGuildList::Swap(GuildMSG_CS_ReqGuildList* other) {
  if (other != this) {
    std::swap(pagenum_, other->pagenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_CS_ReqGuildList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_CS_ReqGuildList_descriptor_;
  metadata.reflection = GuildMSG_CS_ReqGuildList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_SC_AckGuildList::kResultFieldNumber;
const int GuildMSG_SC_AckGuildList::kInfolistFieldNumber;
#endif  // !_MSC_VER

GuildMSG_SC_AckGuildList::GuildMSG_SC_AckGuildList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_SC_AckGuildList::InitAsDefaultInstance() {
}

GuildMSG_SC_AckGuildList::GuildMSG_SC_AckGuildList(const GuildMSG_SC_AckGuildList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_SC_AckGuildList::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_SC_AckGuildList::~GuildMSG_SC_AckGuildList() {
  SharedDtor();
}

void GuildMSG_SC_AckGuildList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_SC_AckGuildList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_SC_AckGuildList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_SC_AckGuildList_descriptor_;
}

const GuildMSG_SC_AckGuildList& GuildMSG_SC_AckGuildList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_SC_AckGuildList* GuildMSG_SC_AckGuildList::default_instance_ = NULL;

GuildMSG_SC_AckGuildList* GuildMSG_SC_AckGuildList::New() const {
  return new GuildMSG_SC_AckGuildList;
}

void GuildMSG_SC_AckGuildList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  infolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_SC_AckGuildList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infolist;
        break;
      }

      // repeated .proto.message.GuildListInfo infolist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infolist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infolist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_SC_AckGuildList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // repeated .proto.message.GuildListInfo infolist = 2;
  for (int i = 0; i < this->infolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->infolist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_SC_AckGuildList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // repeated .proto.message.GuildListInfo infolist = 2;
  for (int i = 0; i < this->infolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->infolist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_SC_AckGuildList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  // repeated .proto.message.GuildListInfo infolist = 2;
  total_size += 1 * this->infolist_size();
  for (int i = 0; i < this->infolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infolist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_SC_AckGuildList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_SC_AckGuildList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_SC_AckGuildList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_SC_AckGuildList::MergeFrom(const GuildMSG_SC_AckGuildList& from) {
  GOOGLE_CHECK_NE(&from, this);
  infolist_.MergeFrom(from.infolist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_SC_AckGuildList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_SC_AckGuildList::CopyFrom(const GuildMSG_SC_AckGuildList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_SC_AckGuildList::IsInitialized() const {

  return true;
}

void GuildMSG_SC_AckGuildList::Swap(GuildMSG_SC_AckGuildList* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    infolist_.Swap(&other->infolist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_SC_AckGuildList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_SC_AckGuildList_descriptor_;
  metadata.reflection = GuildMSG_SC_AckGuildList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_CS_ReqCreate::kGuildnameFieldNumber;
const int GuildMSG_CS_ReqCreate::kGuilddeclarationFieldNumber;
#endif  // !_MSC_VER

GuildMSG_CS_ReqCreate::GuildMSG_CS_ReqCreate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_CS_ReqCreate::InitAsDefaultInstance() {
}

GuildMSG_CS_ReqCreate::GuildMSG_CS_ReqCreate(const GuildMSG_CS_ReqCreate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_CS_ReqCreate::SharedCtor() {
  _cached_size_ = 0;
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guilddeclaration_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_CS_ReqCreate::~GuildMSG_CS_ReqCreate() {
  SharedDtor();
}

void GuildMSG_CS_ReqCreate::SharedDtor() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (guilddeclaration_ != &::google::protobuf::internal::kEmptyString) {
    delete guilddeclaration_;
  }
  if (this != default_instance_) {
  }
}

void GuildMSG_CS_ReqCreate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqCreate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_CS_ReqCreate_descriptor_;
}

const GuildMSG_CS_ReqCreate& GuildMSG_CS_ReqCreate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_CS_ReqCreate* GuildMSG_CS_ReqCreate::default_instance_ = NULL;

GuildMSG_CS_ReqCreate* GuildMSG_CS_ReqCreate::New() const {
  return new GuildMSG_CS_ReqCreate;
}

void GuildMSG_CS_ReqCreate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
    if (has_guilddeclaration()) {
      if (guilddeclaration_ != &::google::protobuf::internal::kEmptyString) {
        guilddeclaration_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_CS_ReqCreate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string guildname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_guilddeclaration;
        break;
      }

      // optional string guilddeclaration = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guilddeclaration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guilddeclaration()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guilddeclaration().data(), this->guilddeclaration().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_CS_ReqCreate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string guildname = 1;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->guildname(), output);
  }

  // optional string guilddeclaration = 2;
  if (has_guilddeclaration()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guilddeclaration().data(), this->guilddeclaration().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->guilddeclaration(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_CS_ReqCreate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string guildname = 1;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->guildname(), target);
  }

  // optional string guilddeclaration = 2;
  if (has_guilddeclaration()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guilddeclaration().data(), this->guilddeclaration().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->guilddeclaration(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_CS_ReqCreate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string guildname = 1;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // optional string guilddeclaration = 2;
    if (has_guilddeclaration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guilddeclaration());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_CS_ReqCreate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_CS_ReqCreate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_CS_ReqCreate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_CS_ReqCreate::MergeFrom(const GuildMSG_CS_ReqCreate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_guilddeclaration()) {
      set_guilddeclaration(from.guilddeclaration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_CS_ReqCreate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_CS_ReqCreate::CopyFrom(const GuildMSG_CS_ReqCreate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_CS_ReqCreate::IsInitialized() const {

  return true;
}

void GuildMSG_CS_ReqCreate::Swap(GuildMSG_CS_ReqCreate* other) {
  if (other != this) {
    std::swap(guildname_, other->guildname_);
    std::swap(guilddeclaration_, other->guilddeclaration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_CS_ReqCreate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_CS_ReqCreate_descriptor_;
  metadata.reflection = GuildMSG_CS_ReqCreate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_SC_AckCreate::kReslutFieldNumber;
#endif  // !_MSC_VER

GuildMSG_SC_AckCreate::GuildMSG_SC_AckCreate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_SC_AckCreate::InitAsDefaultInstance() {
}

GuildMSG_SC_AckCreate::GuildMSG_SC_AckCreate(const GuildMSG_SC_AckCreate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_SC_AckCreate::SharedCtor() {
  _cached_size_ = 0;
  reslut_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_SC_AckCreate::~GuildMSG_SC_AckCreate() {
  SharedDtor();
}

void GuildMSG_SC_AckCreate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_SC_AckCreate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_SC_AckCreate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_SC_AckCreate_descriptor_;
}

const GuildMSG_SC_AckCreate& GuildMSG_SC_AckCreate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_SC_AckCreate* GuildMSG_SC_AckCreate::default_instance_ = NULL;

GuildMSG_SC_AckCreate* GuildMSG_SC_AckCreate::New() const {
  return new GuildMSG_SC_AckCreate;
}

void GuildMSG_SC_AckCreate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reslut_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_SC_AckCreate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reslut = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reslut_)));
          set_has_reslut();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_SC_AckCreate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reslut = 1;
  if (has_reslut()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reslut(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_SC_AckCreate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reslut = 1;
  if (has_reslut()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reslut(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_SC_AckCreate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reslut = 1;
    if (has_reslut()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reslut());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_SC_AckCreate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_SC_AckCreate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_SC_AckCreate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_SC_AckCreate::MergeFrom(const GuildMSG_SC_AckCreate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reslut()) {
      set_reslut(from.reslut());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_SC_AckCreate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_SC_AckCreate::CopyFrom(const GuildMSG_SC_AckCreate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_SC_AckCreate::IsInitialized() const {

  return true;
}

void GuildMSG_SC_AckCreate::Swap(GuildMSG_SC_AckCreate* other) {
  if (other != this) {
    std::swap(reslut_, other->reslut_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_SC_AckCreate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_SC_AckCreate_descriptor_;
  metadata.reflection = GuildMSG_SC_AckCreate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_CS_ReqJoin::kGuildidFieldNumber;
#endif  // !_MSC_VER

GuildMSG_CS_ReqJoin::GuildMSG_CS_ReqJoin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_CS_ReqJoin::InitAsDefaultInstance() {
}

GuildMSG_CS_ReqJoin::GuildMSG_CS_ReqJoin(const GuildMSG_CS_ReqJoin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_CS_ReqJoin::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_CS_ReqJoin::~GuildMSG_CS_ReqJoin() {
  SharedDtor();
}

void GuildMSG_CS_ReqJoin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_CS_ReqJoin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqJoin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_CS_ReqJoin_descriptor_;
}

const GuildMSG_CS_ReqJoin& GuildMSG_CS_ReqJoin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_CS_ReqJoin* GuildMSG_CS_ReqJoin::default_instance_ = NULL;

GuildMSG_CS_ReqJoin* GuildMSG_CS_ReqJoin::New() const {
  return new GuildMSG_CS_ReqJoin;
}

void GuildMSG_CS_ReqJoin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_CS_ReqJoin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 guildid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_CS_ReqJoin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 guildid = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guildid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_CS_ReqJoin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 guildid = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guildid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_CS_ReqJoin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 guildid = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_CS_ReqJoin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_CS_ReqJoin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_CS_ReqJoin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_CS_ReqJoin::MergeFrom(const GuildMSG_CS_ReqJoin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_CS_ReqJoin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_CS_ReqJoin::CopyFrom(const GuildMSG_CS_ReqJoin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_CS_ReqJoin::IsInitialized() const {

  return true;
}

void GuildMSG_CS_ReqJoin::Swap(GuildMSG_CS_ReqJoin* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_CS_ReqJoin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_CS_ReqJoin_descriptor_;
  metadata.reflection = GuildMSG_CS_ReqJoin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_SC_AckJoin::kReslutFieldNumber;
const int GuildMSG_SC_AckJoin::kTimesupFieldNumber;
#endif  // !_MSC_VER

GuildMSG_SC_AckJoin::GuildMSG_SC_AckJoin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_SC_AckJoin::InitAsDefaultInstance() {
}

GuildMSG_SC_AckJoin::GuildMSG_SC_AckJoin(const GuildMSG_SC_AckJoin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_SC_AckJoin::SharedCtor() {
  _cached_size_ = 0;
  reslut_ = 0u;
  timesup_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_SC_AckJoin::~GuildMSG_SC_AckJoin() {
  SharedDtor();
}

void GuildMSG_SC_AckJoin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_SC_AckJoin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_SC_AckJoin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_SC_AckJoin_descriptor_;
}

const GuildMSG_SC_AckJoin& GuildMSG_SC_AckJoin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_SC_AckJoin* GuildMSG_SC_AckJoin::default_instance_ = NULL;

GuildMSG_SC_AckJoin* GuildMSG_SC_AckJoin::New() const {
  return new GuildMSG_SC_AckJoin;
}

void GuildMSG_SC_AckJoin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reslut_ = 0u;
    timesup_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_SC_AckJoin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reslut = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reslut_)));
          set_has_reslut();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_timesup;
        break;
      }

      // optional uint64 timesup = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timesup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timesup_)));
          set_has_timesup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_SC_AckJoin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reslut = 1;
  if (has_reslut()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reslut(), output);
  }

  // optional uint64 timesup = 2;
  if (has_timesup()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->timesup(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_SC_AckJoin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reslut = 1;
  if (has_reslut()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reslut(), target);
  }

  // optional uint64 timesup = 2;
  if (has_timesup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->timesup(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_SC_AckJoin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reslut = 1;
    if (has_reslut()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reslut());
    }

    // optional uint64 timesup = 2;
    if (has_timesup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timesup());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_SC_AckJoin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_SC_AckJoin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_SC_AckJoin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_SC_AckJoin::MergeFrom(const GuildMSG_SC_AckJoin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reslut()) {
      set_reslut(from.reslut());
    }
    if (from.has_timesup()) {
      set_timesup(from.timesup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_SC_AckJoin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_SC_AckJoin::CopyFrom(const GuildMSG_SC_AckJoin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_SC_AckJoin::IsInitialized() const {

  return true;
}

void GuildMSG_SC_AckJoin::Swap(GuildMSG_SC_AckJoin* other) {
  if (other != this) {
    std::swap(reslut_, other->reslut_);
    std::swap(timesup_, other->timesup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_SC_AckJoin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_SC_AckJoin_descriptor_;
  metadata.reflection = GuildMSG_SC_AckJoin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GuildMSG_CS_ReqQuickJoin::GuildMSG_CS_ReqQuickJoin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_CS_ReqQuickJoin::InitAsDefaultInstance() {
}

GuildMSG_CS_ReqQuickJoin::GuildMSG_CS_ReqQuickJoin(const GuildMSG_CS_ReqQuickJoin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_CS_ReqQuickJoin::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_CS_ReqQuickJoin::~GuildMSG_CS_ReqQuickJoin() {
  SharedDtor();
}

void GuildMSG_CS_ReqQuickJoin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_CS_ReqQuickJoin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqQuickJoin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_CS_ReqQuickJoin_descriptor_;
}

const GuildMSG_CS_ReqQuickJoin& GuildMSG_CS_ReqQuickJoin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_CS_ReqQuickJoin* GuildMSG_CS_ReqQuickJoin::default_instance_ = NULL;

GuildMSG_CS_ReqQuickJoin* GuildMSG_CS_ReqQuickJoin::New() const {
  return new GuildMSG_CS_ReqQuickJoin;
}

void GuildMSG_CS_ReqQuickJoin::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_CS_ReqQuickJoin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GuildMSG_CS_ReqQuickJoin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_CS_ReqQuickJoin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_CS_ReqQuickJoin::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_CS_ReqQuickJoin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_CS_ReqQuickJoin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_CS_ReqQuickJoin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_CS_ReqQuickJoin::MergeFrom(const GuildMSG_CS_ReqQuickJoin& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_CS_ReqQuickJoin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_CS_ReqQuickJoin::CopyFrom(const GuildMSG_CS_ReqQuickJoin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_CS_ReqQuickJoin::IsInitialized() const {

  return true;
}

void GuildMSG_CS_ReqQuickJoin::Swap(GuildMSG_CS_ReqQuickJoin* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_CS_ReqQuickJoin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_CS_ReqQuickJoin_descriptor_;
  metadata.reflection = GuildMSG_CS_ReqQuickJoin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_SC_AckQuickJoin::kReslutFieldNumber;
#endif  // !_MSC_VER

GuildMSG_SC_AckQuickJoin::GuildMSG_SC_AckQuickJoin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_SC_AckQuickJoin::InitAsDefaultInstance() {
}

GuildMSG_SC_AckQuickJoin::GuildMSG_SC_AckQuickJoin(const GuildMSG_SC_AckQuickJoin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_SC_AckQuickJoin::SharedCtor() {
  _cached_size_ = 0;
  reslut_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_SC_AckQuickJoin::~GuildMSG_SC_AckQuickJoin() {
  SharedDtor();
}

void GuildMSG_SC_AckQuickJoin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_SC_AckQuickJoin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_SC_AckQuickJoin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_SC_AckQuickJoin_descriptor_;
}

const GuildMSG_SC_AckQuickJoin& GuildMSG_SC_AckQuickJoin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_SC_AckQuickJoin* GuildMSG_SC_AckQuickJoin::default_instance_ = NULL;

GuildMSG_SC_AckQuickJoin* GuildMSG_SC_AckQuickJoin::New() const {
  return new GuildMSG_SC_AckQuickJoin;
}

void GuildMSG_SC_AckQuickJoin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reslut_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_SC_AckQuickJoin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reslut = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reslut_)));
          set_has_reslut();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_SC_AckQuickJoin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reslut = 1;
  if (has_reslut()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reslut(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_SC_AckQuickJoin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reslut = 1;
  if (has_reslut()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reslut(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_SC_AckQuickJoin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reslut = 1;
    if (has_reslut()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reslut());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_SC_AckQuickJoin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_SC_AckQuickJoin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_SC_AckQuickJoin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_SC_AckQuickJoin::MergeFrom(const GuildMSG_SC_AckQuickJoin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reslut()) {
      set_reslut(from.reslut());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_SC_AckQuickJoin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_SC_AckQuickJoin::CopyFrom(const GuildMSG_SC_AckQuickJoin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_SC_AckQuickJoin::IsInitialized() const {

  return true;
}

void GuildMSG_SC_AckQuickJoin::Swap(GuildMSG_SC_AckQuickJoin* other) {
  if (other != this) {
    std::swap(reslut_, other->reslut_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_SC_AckQuickJoin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_SC_AckQuickJoin_descriptor_;
  metadata.reflection = GuildMSG_SC_AckQuickJoin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_CS_ReqFind::kGuildnameFieldNumber;
const int GuildMSG_CS_ReqFind::kGuildidFieldNumber;
#endif  // !_MSC_VER

GuildMSG_CS_ReqFind::GuildMSG_CS_ReqFind()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_CS_ReqFind::InitAsDefaultInstance() {
}

GuildMSG_CS_ReqFind::GuildMSG_CS_ReqFind(const GuildMSG_CS_ReqFind& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_CS_ReqFind::SharedCtor() {
  _cached_size_ = 0;
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guildid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_CS_ReqFind::~GuildMSG_CS_ReqFind() {
  SharedDtor();
}

void GuildMSG_CS_ReqFind::SharedDtor() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (this != default_instance_) {
  }
}

void GuildMSG_CS_ReqFind::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqFind::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_CS_ReqFind_descriptor_;
}

const GuildMSG_CS_ReqFind& GuildMSG_CS_ReqFind::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_CS_ReqFind* GuildMSG_CS_ReqFind::default_instance_ = NULL;

GuildMSG_CS_ReqFind* GuildMSG_CS_ReqFind::New() const {
  return new GuildMSG_CS_ReqFind;
}

void GuildMSG_CS_ReqFind::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
    guildid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_CS_ReqFind::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string guildname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guildid;
        break;
      }

      // optional uint64 guildid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_CS_ReqFind::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string guildname = 1;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->guildname(), output);
  }

  // optional uint64 guildid = 2;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guildid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_CS_ReqFind::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string guildname = 1;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->guildname(), target);
  }

  // optional uint64 guildid = 2;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guildid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_CS_ReqFind::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string guildname = 1;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // optional uint64 guildid = 2;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_CS_ReqFind::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_CS_ReqFind* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_CS_ReqFind*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_CS_ReqFind::MergeFrom(const GuildMSG_CS_ReqFind& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_CS_ReqFind::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_CS_ReqFind::CopyFrom(const GuildMSG_CS_ReqFind& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_CS_ReqFind::IsInitialized() const {

  return true;
}

void GuildMSG_CS_ReqFind::Swap(GuildMSG_CS_ReqFind* other) {
  if (other != this) {
    std::swap(guildname_, other->guildname_);
    std::swap(guildid_, other->guildid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_CS_ReqFind::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_CS_ReqFind_descriptor_;
  metadata.reflection = GuildMSG_CS_ReqFind_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_SC_AckFind::kCountsFieldNumber;
const int GuildMSG_SC_AckFind::kInfolistFieldNumber;
#endif  // !_MSC_VER

GuildMSG_SC_AckFind::GuildMSG_SC_AckFind()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_SC_AckFind::InitAsDefaultInstance() {
}

GuildMSG_SC_AckFind::GuildMSG_SC_AckFind(const GuildMSG_SC_AckFind& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_SC_AckFind::SharedCtor() {
  _cached_size_ = 0;
  counts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_SC_AckFind::~GuildMSG_SC_AckFind() {
  SharedDtor();
}

void GuildMSG_SC_AckFind::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_SC_AckFind::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_SC_AckFind::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_SC_AckFind_descriptor_;
}

const GuildMSG_SC_AckFind& GuildMSG_SC_AckFind::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_SC_AckFind* GuildMSG_SC_AckFind::default_instance_ = NULL;

GuildMSG_SC_AckFind* GuildMSG_SC_AckFind::New() const {
  return new GuildMSG_SC_AckFind;
}

void GuildMSG_SC_AckFind::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    counts_ = 0u;
  }
  infolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_SC_AckFind::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 counts = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &counts_)));
          set_has_counts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infolist;
        break;
      }

      // repeated .proto.message.GuildListInfo infolist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infolist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infolist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_SC_AckFind::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 counts = 1;
  if (has_counts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->counts(), output);
  }

  // repeated .proto.message.GuildListInfo infolist = 2;
  for (int i = 0; i < this->infolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->infolist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_SC_AckFind::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 counts = 1;
  if (has_counts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->counts(), target);
  }

  // repeated .proto.message.GuildListInfo infolist = 2;
  for (int i = 0; i < this->infolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->infolist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_SC_AckFind::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 counts = 1;
    if (has_counts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->counts());
    }

  }
  // repeated .proto.message.GuildListInfo infolist = 2;
  total_size += 1 * this->infolist_size();
  for (int i = 0; i < this->infolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infolist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_SC_AckFind::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_SC_AckFind* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_SC_AckFind*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_SC_AckFind::MergeFrom(const GuildMSG_SC_AckFind& from) {
  GOOGLE_CHECK_NE(&from, this);
  infolist_.MergeFrom(from.infolist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_counts()) {
      set_counts(from.counts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_SC_AckFind::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_SC_AckFind::CopyFrom(const GuildMSG_SC_AckFind& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_SC_AckFind::IsInitialized() const {

  return true;
}

void GuildMSG_SC_AckFind::Swap(GuildMSG_SC_AckFind* other) {
  if (other != this) {
    std::swap(counts_, other->counts_);
    infolist_.Swap(&other->infolist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_SC_AckFind::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_SC_AckFind_descriptor_;
  metadata.reflection = GuildMSG_SC_AckFind_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GuildMSG_CS_ReqGuildInfo::GuildMSG_CS_ReqGuildInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_CS_ReqGuildInfo::InitAsDefaultInstance() {
}

GuildMSG_CS_ReqGuildInfo::GuildMSG_CS_ReqGuildInfo(const GuildMSG_CS_ReqGuildInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_CS_ReqGuildInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_CS_ReqGuildInfo::~GuildMSG_CS_ReqGuildInfo() {
  SharedDtor();
}

void GuildMSG_CS_ReqGuildInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_CS_ReqGuildInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqGuildInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_CS_ReqGuildInfo_descriptor_;
}

const GuildMSG_CS_ReqGuildInfo& GuildMSG_CS_ReqGuildInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_CS_ReqGuildInfo* GuildMSG_CS_ReqGuildInfo::default_instance_ = NULL;

GuildMSG_CS_ReqGuildInfo* GuildMSG_CS_ReqGuildInfo::New() const {
  return new GuildMSG_CS_ReqGuildInfo;
}

void GuildMSG_CS_ReqGuildInfo::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_CS_ReqGuildInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GuildMSG_CS_ReqGuildInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_CS_ReqGuildInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_CS_ReqGuildInfo::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_CS_ReqGuildInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_CS_ReqGuildInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_CS_ReqGuildInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_CS_ReqGuildInfo::MergeFrom(const GuildMSG_CS_ReqGuildInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_CS_ReqGuildInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_CS_ReqGuildInfo::CopyFrom(const GuildMSG_CS_ReqGuildInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_CS_ReqGuildInfo::IsInitialized() const {

  return true;
}

void GuildMSG_CS_ReqGuildInfo::Swap(GuildMSG_CS_ReqGuildInfo* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_CS_ReqGuildInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_CS_ReqGuildInfo_descriptor_;
  metadata.reflection = GuildMSG_CS_ReqGuildInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_SC_AckGuildInfo::kResultFieldNumber;
const int GuildMSG_SC_AckGuildInfo::kMembercountsFieldNumber;
const int GuildMSG_SC_AckGuildInfo::kRangkingFieldNumber;
const int GuildMSG_SC_AckGuildInfo::kGuildinfoFieldNumber;
#endif  // !_MSC_VER

GuildMSG_SC_AckGuildInfo::GuildMSG_SC_AckGuildInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_SC_AckGuildInfo::InitAsDefaultInstance() {
  guildinfo_ = const_cast< ::proto::message::GuildData*>(&::proto::message::GuildData::default_instance());
}

GuildMSG_SC_AckGuildInfo::GuildMSG_SC_AckGuildInfo(const GuildMSG_SC_AckGuildInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_SC_AckGuildInfo::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  membercounts_ = 0u;
  rangking_ = 0u;
  guildinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_SC_AckGuildInfo::~GuildMSG_SC_AckGuildInfo() {
  SharedDtor();
}

void GuildMSG_SC_AckGuildInfo::SharedDtor() {
  if (this != default_instance_) {
    delete guildinfo_;
  }
}

void GuildMSG_SC_AckGuildInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_SC_AckGuildInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_SC_AckGuildInfo_descriptor_;
}

const GuildMSG_SC_AckGuildInfo& GuildMSG_SC_AckGuildInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_SC_AckGuildInfo* GuildMSG_SC_AckGuildInfo::default_instance_ = NULL;

GuildMSG_SC_AckGuildInfo* GuildMSG_SC_AckGuildInfo::New() const {
  return new GuildMSG_SC_AckGuildInfo;
}

void GuildMSG_SC_AckGuildInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    membercounts_ = 0u;
    rangking_ = 0u;
    if (has_guildinfo()) {
      if (guildinfo_ != NULL) guildinfo_->::proto::message::GuildData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_SC_AckGuildInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_membercounts;
        break;
      }

      // optional uint32 membercounts = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_membercounts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &membercounts_)));
          set_has_membercounts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rangking;
        break;
      }

      // optional uint32 rangking = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rangking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rangking_)));
          set_has_rangking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_guildinfo;
        break;
      }

      // optional .proto.message.GuildData guildinfo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guildinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_SC_AckGuildInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional uint32 membercounts = 2;
  if (has_membercounts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->membercounts(), output);
  }

  // optional uint32 rangking = 3;
  if (has_rangking()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rangking(), output);
  }

  // optional .proto.message.GuildData guildinfo = 6;
  if (has_guildinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->guildinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_SC_AckGuildInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional uint32 membercounts = 2;
  if (has_membercounts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->membercounts(), target);
  }

  // optional uint32 rangking = 3;
  if (has_rangking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rangking(), target);
  }

  // optional .proto.message.GuildData guildinfo = 6;
  if (has_guildinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->guildinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_SC_AckGuildInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional uint32 membercounts = 2;
    if (has_membercounts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->membercounts());
    }

    // optional uint32 rangking = 3;
    if (has_rangking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rangking());
    }

    // optional .proto.message.GuildData guildinfo = 6;
    if (has_guildinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guildinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_SC_AckGuildInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_SC_AckGuildInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_SC_AckGuildInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_SC_AckGuildInfo::MergeFrom(const GuildMSG_SC_AckGuildInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_membercounts()) {
      set_membercounts(from.membercounts());
    }
    if (from.has_rangking()) {
      set_rangking(from.rangking());
    }
    if (from.has_guildinfo()) {
      mutable_guildinfo()->::proto::message::GuildData::MergeFrom(from.guildinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_SC_AckGuildInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_SC_AckGuildInfo::CopyFrom(const GuildMSG_SC_AckGuildInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_SC_AckGuildInfo::IsInitialized() const {

  if (has_guildinfo()) {
    if (!this->guildinfo().IsInitialized()) return false;
  }
  return true;
}

void GuildMSG_SC_AckGuildInfo::Swap(GuildMSG_SC_AckGuildInfo* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(membercounts_, other->membercounts_);
    std::swap(rangking_, other->rangking_);
    std::swap(guildinfo_, other->guildinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_SC_AckGuildInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_SC_AckGuildInfo_descriptor_;
  metadata.reflection = GuildMSG_SC_AckGuildInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_CS_ReqMemberInfo::kPlayerIDFieldNumber;
#endif  // !_MSC_VER

GuildMSG_CS_ReqMemberInfo::GuildMSG_CS_ReqMemberInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_CS_ReqMemberInfo::InitAsDefaultInstance() {
}

GuildMSG_CS_ReqMemberInfo::GuildMSG_CS_ReqMemberInfo(const GuildMSG_CS_ReqMemberInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_CS_ReqMemberInfo::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_CS_ReqMemberInfo::~GuildMSG_CS_ReqMemberInfo() {
  SharedDtor();
}

void GuildMSG_CS_ReqMemberInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_CS_ReqMemberInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqMemberInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_CS_ReqMemberInfo_descriptor_;
}

const GuildMSG_CS_ReqMemberInfo& GuildMSG_CS_ReqMemberInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_CS_ReqMemberInfo* GuildMSG_CS_ReqMemberInfo::default_instance_ = NULL;

GuildMSG_CS_ReqMemberInfo* GuildMSG_CS_ReqMemberInfo::New() const {
  return new GuildMSG_CS_ReqMemberInfo;
}

void GuildMSG_CS_ReqMemberInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_CS_ReqMemberInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_CS_ReqMemberInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_CS_ReqMemberInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 playerID = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_CS_ReqMemberInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_CS_ReqMemberInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_CS_ReqMemberInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_CS_ReqMemberInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_CS_ReqMemberInfo::MergeFrom(const GuildMSG_CS_ReqMemberInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_CS_ReqMemberInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_CS_ReqMemberInfo::CopyFrom(const GuildMSG_CS_ReqMemberInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_CS_ReqMemberInfo::IsInitialized() const {

  return true;
}

void GuildMSG_CS_ReqMemberInfo::Swap(GuildMSG_CS_ReqMemberInfo* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_CS_ReqMemberInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_CS_ReqMemberInfo_descriptor_;
  metadata.reflection = GuildMSG_CS_ReqMemberInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_SC_AckMemberInfo::kResultFieldNumber;
const int GuildMSG_SC_AckMemberInfo::kMemberinfoFieldNumber;
#endif  // !_MSC_VER

GuildMSG_SC_AckMemberInfo::GuildMSG_SC_AckMemberInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_SC_AckMemberInfo::InitAsDefaultInstance() {
  memberinfo_ = const_cast< ::proto::message::GuildMemberData*>(&::proto::message::GuildMemberData::default_instance());
}

GuildMSG_SC_AckMemberInfo::GuildMSG_SC_AckMemberInfo(const GuildMSG_SC_AckMemberInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_SC_AckMemberInfo::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  memberinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_SC_AckMemberInfo::~GuildMSG_SC_AckMemberInfo() {
  SharedDtor();
}

void GuildMSG_SC_AckMemberInfo::SharedDtor() {
  if (this != default_instance_) {
    delete memberinfo_;
  }
}

void GuildMSG_SC_AckMemberInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_SC_AckMemberInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_SC_AckMemberInfo_descriptor_;
}

const GuildMSG_SC_AckMemberInfo& GuildMSG_SC_AckMemberInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_SC_AckMemberInfo* GuildMSG_SC_AckMemberInfo::default_instance_ = NULL;

GuildMSG_SC_AckMemberInfo* GuildMSG_SC_AckMemberInfo::New() const {
  return new GuildMSG_SC_AckMemberInfo;
}

void GuildMSG_SC_AckMemberInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    if (has_memberinfo()) {
      if (memberinfo_ != NULL) memberinfo_->::proto::message::GuildMemberData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_SC_AckMemberInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_memberinfo;
        break;
      }

      // optional .proto.message.GuildMemberData memberinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_memberinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_memberinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_SC_AckMemberInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional .proto.message.GuildMemberData memberinfo = 2;
  if (has_memberinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->memberinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_SC_AckMemberInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional .proto.message.GuildMemberData memberinfo = 2;
  if (has_memberinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->memberinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_SC_AckMemberInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional .proto.message.GuildMemberData memberinfo = 2;
    if (has_memberinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->memberinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_SC_AckMemberInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_SC_AckMemberInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_SC_AckMemberInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_SC_AckMemberInfo::MergeFrom(const GuildMSG_SC_AckMemberInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_memberinfo()) {
      mutable_memberinfo()->::proto::message::GuildMemberData::MergeFrom(from.memberinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_SC_AckMemberInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_SC_AckMemberInfo::CopyFrom(const GuildMSG_SC_AckMemberInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_SC_AckMemberInfo::IsInitialized() const {

  return true;
}

void GuildMSG_SC_AckMemberInfo::Swap(GuildMSG_SC_AckMemberInfo* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(memberinfo_, other->memberinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_SC_AckMemberInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_SC_AckMemberInfo_descriptor_;
  metadata.reflection = GuildMSG_SC_AckMemberInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_CS_ReqMemberList::kPagenumFieldNumber;
const int GuildMSG_CS_ReqMemberList::kIsInTeamFieldNumber;
#endif  // !_MSC_VER

GuildMSG_CS_ReqMemberList::GuildMSG_CS_ReqMemberList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_CS_ReqMemberList::InitAsDefaultInstance() {
}

GuildMSG_CS_ReqMemberList::GuildMSG_CS_ReqMemberList(const GuildMSG_CS_ReqMemberList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_CS_ReqMemberList::SharedCtor() {
  _cached_size_ = 0;
  pagenum_ = 0u;
  isinteam_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_CS_ReqMemberList::~GuildMSG_CS_ReqMemberList() {
  SharedDtor();
}

void GuildMSG_CS_ReqMemberList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_CS_ReqMemberList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqMemberList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_CS_ReqMemberList_descriptor_;
}

const GuildMSG_CS_ReqMemberList& GuildMSG_CS_ReqMemberList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_CS_ReqMemberList* GuildMSG_CS_ReqMemberList::default_instance_ = NULL;

GuildMSG_CS_ReqMemberList* GuildMSG_CS_ReqMemberList::New() const {
  return new GuildMSG_CS_ReqMemberList;
}

void GuildMSG_CS_ReqMemberList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pagenum_ = 0u;
    isinteam_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_CS_ReqMemberList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pagenum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pagenum_)));
          set_has_pagenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isInTeam;
        break;
      }

      // optional int32 isInTeam = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isInTeam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isinteam_)));
          set_has_isinteam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_CS_ReqMemberList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 pagenum = 1;
  if (has_pagenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pagenum(), output);
  }

  // optional int32 isInTeam = 2;
  if (has_isinteam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->isinteam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_CS_ReqMemberList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 pagenum = 1;
  if (has_pagenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pagenum(), target);
  }

  // optional int32 isInTeam = 2;
  if (has_isinteam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->isinteam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_CS_ReqMemberList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 pagenum = 1;
    if (has_pagenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pagenum());
    }

    // optional int32 isInTeam = 2;
    if (has_isinteam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isinteam());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_CS_ReqMemberList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_CS_ReqMemberList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_CS_ReqMemberList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_CS_ReqMemberList::MergeFrom(const GuildMSG_CS_ReqMemberList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pagenum()) {
      set_pagenum(from.pagenum());
    }
    if (from.has_isinteam()) {
      set_isinteam(from.isinteam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_CS_ReqMemberList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_CS_ReqMemberList::CopyFrom(const GuildMSG_CS_ReqMemberList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_CS_ReqMemberList::IsInitialized() const {

  return true;
}

void GuildMSG_CS_ReqMemberList::Swap(GuildMSG_CS_ReqMemberList* other) {
  if (other != this) {
    std::swap(pagenum_, other->pagenum_);
    std::swap(isinteam_, other->isinteam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_CS_ReqMemberList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_CS_ReqMemberList_descriptor_;
  metadata.reflection = GuildMSG_CS_ReqMemberList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_SC_AckMemberList::kPagenumFieldNumber;
const int GuildMSG_SC_AckMemberList::kMemberinfoFieldNumber;
#endif  // !_MSC_VER

GuildMSG_SC_AckMemberList::GuildMSG_SC_AckMemberList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_SC_AckMemberList::InitAsDefaultInstance() {
}

GuildMSG_SC_AckMemberList::GuildMSG_SC_AckMemberList(const GuildMSG_SC_AckMemberList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_SC_AckMemberList::SharedCtor() {
  _cached_size_ = 0;
  pagenum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_SC_AckMemberList::~GuildMSG_SC_AckMemberList() {
  SharedDtor();
}

void GuildMSG_SC_AckMemberList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_SC_AckMemberList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_SC_AckMemberList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_SC_AckMemberList_descriptor_;
}

const GuildMSG_SC_AckMemberList& GuildMSG_SC_AckMemberList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_SC_AckMemberList* GuildMSG_SC_AckMemberList::default_instance_ = NULL;

GuildMSG_SC_AckMemberList* GuildMSG_SC_AckMemberList::New() const {
  return new GuildMSG_SC_AckMemberList;
}

void GuildMSG_SC_AckMemberList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pagenum_ = 0u;
  }
  memberinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_SC_AckMemberList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pagenum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pagenum_)));
          set_has_pagenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_memberinfo;
        break;
      }

      // repeated .proto.message.MemberListInfo memberinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_memberinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_memberinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_memberinfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_SC_AckMemberList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 pagenum = 1;
  if (has_pagenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pagenum(), output);
  }

  // repeated .proto.message.MemberListInfo memberinfo = 2;
  for (int i = 0; i < this->memberinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->memberinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_SC_AckMemberList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 pagenum = 1;
  if (has_pagenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pagenum(), target);
  }

  // repeated .proto.message.MemberListInfo memberinfo = 2;
  for (int i = 0; i < this->memberinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->memberinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_SC_AckMemberList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 pagenum = 1;
    if (has_pagenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pagenum());
    }

  }
  // repeated .proto.message.MemberListInfo memberinfo = 2;
  total_size += 1 * this->memberinfo_size();
  for (int i = 0; i < this->memberinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->memberinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_SC_AckMemberList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_SC_AckMemberList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_SC_AckMemberList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_SC_AckMemberList::MergeFrom(const GuildMSG_SC_AckMemberList& from) {
  GOOGLE_CHECK_NE(&from, this);
  memberinfo_.MergeFrom(from.memberinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pagenum()) {
      set_pagenum(from.pagenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_SC_AckMemberList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_SC_AckMemberList::CopyFrom(const GuildMSG_SC_AckMemberList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_SC_AckMemberList::IsInitialized() const {

  return true;
}

void GuildMSG_SC_AckMemberList::Swap(GuildMSG_SC_AckMemberList* other) {
  if (other != this) {
    std::swap(pagenum_, other->pagenum_);
    memberinfo_.Swap(&other->memberinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_SC_AckMemberList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_SC_AckMemberList_descriptor_;
  metadata.reflection = GuildMSG_SC_AckMemberList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GuildMSG_CS_ReqQuit::GuildMSG_CS_ReqQuit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_CS_ReqQuit::InitAsDefaultInstance() {
}

GuildMSG_CS_ReqQuit::GuildMSG_CS_ReqQuit(const GuildMSG_CS_ReqQuit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_CS_ReqQuit::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_CS_ReqQuit::~GuildMSG_CS_ReqQuit() {
  SharedDtor();
}

void GuildMSG_CS_ReqQuit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_CS_ReqQuit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqQuit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_CS_ReqQuit_descriptor_;
}

const GuildMSG_CS_ReqQuit& GuildMSG_CS_ReqQuit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_CS_ReqQuit* GuildMSG_CS_ReqQuit::default_instance_ = NULL;

GuildMSG_CS_ReqQuit* GuildMSG_CS_ReqQuit::New() const {
  return new GuildMSG_CS_ReqQuit;
}

void GuildMSG_CS_ReqQuit::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_CS_ReqQuit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GuildMSG_CS_ReqQuit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_CS_ReqQuit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_CS_ReqQuit::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_CS_ReqQuit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_CS_ReqQuit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_CS_ReqQuit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_CS_ReqQuit::MergeFrom(const GuildMSG_CS_ReqQuit& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_CS_ReqQuit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_CS_ReqQuit::CopyFrom(const GuildMSG_CS_ReqQuit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_CS_ReqQuit::IsInitialized() const {

  return true;
}

void GuildMSG_CS_ReqQuit::Swap(GuildMSG_CS_ReqQuit* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_CS_ReqQuit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_CS_ReqQuit_descriptor_;
  metadata.reflection = GuildMSG_CS_ReqQuit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_SC_AckQuit::kResultFieldNumber;
#endif  // !_MSC_VER

GuildMSG_SC_AckQuit::GuildMSG_SC_AckQuit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_SC_AckQuit::InitAsDefaultInstance() {
}

GuildMSG_SC_AckQuit::GuildMSG_SC_AckQuit(const GuildMSG_SC_AckQuit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_SC_AckQuit::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_SC_AckQuit::~GuildMSG_SC_AckQuit() {
  SharedDtor();
}

void GuildMSG_SC_AckQuit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_SC_AckQuit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_SC_AckQuit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_SC_AckQuit_descriptor_;
}

const GuildMSG_SC_AckQuit& GuildMSG_SC_AckQuit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_SC_AckQuit* GuildMSG_SC_AckQuit::default_instance_ = NULL;

GuildMSG_SC_AckQuit* GuildMSG_SC_AckQuit::New() const {
  return new GuildMSG_SC_AckQuit;
}

void GuildMSG_SC_AckQuit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_SC_AckQuit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_SC_AckQuit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_SC_AckQuit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_SC_AckQuit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_SC_AckQuit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_SC_AckQuit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_SC_AckQuit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_SC_AckQuit::MergeFrom(const GuildMSG_SC_AckQuit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_SC_AckQuit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_SC_AckQuit::CopyFrom(const GuildMSG_SC_AckQuit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_SC_AckQuit::IsInitialized() const {

  return true;
}

void GuildMSG_SC_AckQuit::Swap(GuildMSG_SC_AckQuit* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_SC_AckQuit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_SC_AckQuit_descriptor_;
  metadata.reflection = GuildMSG_SC_AckQuit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_CS_ReqSetJoin::kIsopenFieldNumber;
const int GuildMSG_CS_ReqSetJoin::kJoincombatserFieldNumber;
const int GuildMSG_CS_ReqSetJoin::kIsauditFieldNumber;
#endif  // !_MSC_VER

GuildMSG_CS_ReqSetJoin::GuildMSG_CS_ReqSetJoin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_CS_ReqSetJoin::InitAsDefaultInstance() {
}

GuildMSG_CS_ReqSetJoin::GuildMSG_CS_ReqSetJoin(const GuildMSG_CS_ReqSetJoin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_CS_ReqSetJoin::SharedCtor() {
  _cached_size_ = 0;
  isopen_ = false;
  joincombatser_ = 0u;
  isaudit_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_CS_ReqSetJoin::~GuildMSG_CS_ReqSetJoin() {
  SharedDtor();
}

void GuildMSG_CS_ReqSetJoin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_CS_ReqSetJoin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqSetJoin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_CS_ReqSetJoin_descriptor_;
}

const GuildMSG_CS_ReqSetJoin& GuildMSG_CS_ReqSetJoin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_CS_ReqSetJoin* GuildMSG_CS_ReqSetJoin::default_instance_ = NULL;

GuildMSG_CS_ReqSetJoin* GuildMSG_CS_ReqSetJoin::New() const {
  return new GuildMSG_CS_ReqSetJoin;
}

void GuildMSG_CS_ReqSetJoin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isopen_ = false;
    joincombatser_ = 0u;
    isaudit_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_CS_ReqSetJoin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isopen = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isopen_)));
          set_has_isopen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_joincombatser;
        break;
      }

      // optional uint32 joincombatser = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_joincombatser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &joincombatser_)));
          set_has_joincombatser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isaudit;
        break;
      }

      // optional bool isaudit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isaudit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isaudit_)));
          set_has_isaudit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_CS_ReqSetJoin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool isopen = 1;
  if (has_isopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isopen(), output);
  }

  // optional uint32 joincombatser = 2;
  if (has_joincombatser()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->joincombatser(), output);
  }

  // optional bool isaudit = 3;
  if (has_isaudit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isaudit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_CS_ReqSetJoin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool isopen = 1;
  if (has_isopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isopen(), target);
  }

  // optional uint32 joincombatser = 2;
  if (has_joincombatser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->joincombatser(), target);
  }

  // optional bool isaudit = 3;
  if (has_isaudit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isaudit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_CS_ReqSetJoin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool isopen = 1;
    if (has_isopen()) {
      total_size += 1 + 1;
    }

    // optional uint32 joincombatser = 2;
    if (has_joincombatser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->joincombatser());
    }

    // optional bool isaudit = 3;
    if (has_isaudit()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_CS_ReqSetJoin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_CS_ReqSetJoin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_CS_ReqSetJoin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_CS_ReqSetJoin::MergeFrom(const GuildMSG_CS_ReqSetJoin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isopen()) {
      set_isopen(from.isopen());
    }
    if (from.has_joincombatser()) {
      set_joincombatser(from.joincombatser());
    }
    if (from.has_isaudit()) {
      set_isaudit(from.isaudit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_CS_ReqSetJoin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_CS_ReqSetJoin::CopyFrom(const GuildMSG_CS_ReqSetJoin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_CS_ReqSetJoin::IsInitialized() const {

  return true;
}

void GuildMSG_CS_ReqSetJoin::Swap(GuildMSG_CS_ReqSetJoin* other) {
  if (other != this) {
    std::swap(isopen_, other->isopen_);
    std::swap(joincombatser_, other->joincombatser_);
    std::swap(isaudit_, other->isaudit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_CS_ReqSetJoin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_CS_ReqSetJoin_descriptor_;
  metadata.reflection = GuildMSG_CS_ReqSetJoin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_SC_AckSetJoin::kResultFieldNumber;
#endif  // !_MSC_VER

GuildMSG_SC_AckSetJoin::GuildMSG_SC_AckSetJoin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_SC_AckSetJoin::InitAsDefaultInstance() {
}

GuildMSG_SC_AckSetJoin::GuildMSG_SC_AckSetJoin(const GuildMSG_SC_AckSetJoin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_SC_AckSetJoin::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_SC_AckSetJoin::~GuildMSG_SC_AckSetJoin() {
  SharedDtor();
}

void GuildMSG_SC_AckSetJoin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_SC_AckSetJoin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_SC_AckSetJoin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_SC_AckSetJoin_descriptor_;
}

const GuildMSG_SC_AckSetJoin& GuildMSG_SC_AckSetJoin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_SC_AckSetJoin* GuildMSG_SC_AckSetJoin::default_instance_ = NULL;

GuildMSG_SC_AckSetJoin* GuildMSG_SC_AckSetJoin::New() const {
  return new GuildMSG_SC_AckSetJoin;
}

void GuildMSG_SC_AckSetJoin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_SC_AckSetJoin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_SC_AckSetJoin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_SC_AckSetJoin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_SC_AckSetJoin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_SC_AckSetJoin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_SC_AckSetJoin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_SC_AckSetJoin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_SC_AckSetJoin::MergeFrom(const GuildMSG_SC_AckSetJoin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_SC_AckSetJoin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_SC_AckSetJoin::CopyFrom(const GuildMSG_SC_AckSetJoin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_SC_AckSetJoin::IsInitialized() const {

  return true;
}

void GuildMSG_SC_AckSetJoin::Swap(GuildMSG_SC_AckSetJoin* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_SC_AckSetJoin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_SC_AckSetJoin_descriptor_;
  metadata.reflection = GuildMSG_SC_AckSetJoin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_CS_ReqJoinList::kPagenumFieldNumber;
#endif  // !_MSC_VER

GuildMSG_CS_ReqJoinList::GuildMSG_CS_ReqJoinList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_CS_ReqJoinList::InitAsDefaultInstance() {
}

GuildMSG_CS_ReqJoinList::GuildMSG_CS_ReqJoinList(const GuildMSG_CS_ReqJoinList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_CS_ReqJoinList::SharedCtor() {
  _cached_size_ = 0;
  pagenum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_CS_ReqJoinList::~GuildMSG_CS_ReqJoinList() {
  SharedDtor();
}

void GuildMSG_CS_ReqJoinList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_CS_ReqJoinList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqJoinList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_CS_ReqJoinList_descriptor_;
}

const GuildMSG_CS_ReqJoinList& GuildMSG_CS_ReqJoinList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_CS_ReqJoinList* GuildMSG_CS_ReqJoinList::default_instance_ = NULL;

GuildMSG_CS_ReqJoinList* GuildMSG_CS_ReqJoinList::New() const {
  return new GuildMSG_CS_ReqJoinList;
}

void GuildMSG_CS_ReqJoinList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pagenum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_CS_ReqJoinList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pagenum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pagenum_)));
          set_has_pagenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_CS_ReqJoinList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 pagenum = 1;
  if (has_pagenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pagenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_CS_ReqJoinList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 pagenum = 1;
  if (has_pagenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pagenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_CS_ReqJoinList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 pagenum = 1;
    if (has_pagenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pagenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_CS_ReqJoinList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_CS_ReqJoinList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_CS_ReqJoinList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_CS_ReqJoinList::MergeFrom(const GuildMSG_CS_ReqJoinList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pagenum()) {
      set_pagenum(from.pagenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_CS_ReqJoinList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_CS_ReqJoinList::CopyFrom(const GuildMSG_CS_ReqJoinList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_CS_ReqJoinList::IsInitialized() const {

  return true;
}

void GuildMSG_CS_ReqJoinList::Swap(GuildMSG_CS_ReqJoinList* other) {
  if (other != this) {
    std::swap(pagenum_, other->pagenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_CS_ReqJoinList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_CS_ReqJoinList_descriptor_;
  metadata.reflection = GuildMSG_CS_ReqJoinList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_SC_AckJoinList::kResultFieldNumber;
const int GuildMSG_SC_AckJoinList::kInfolistFieldNumber;
#endif  // !_MSC_VER

GuildMSG_SC_AckJoinList::GuildMSG_SC_AckJoinList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_SC_AckJoinList::InitAsDefaultInstance() {
}

GuildMSG_SC_AckJoinList::GuildMSG_SC_AckJoinList(const GuildMSG_SC_AckJoinList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_SC_AckJoinList::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_SC_AckJoinList::~GuildMSG_SC_AckJoinList() {
  SharedDtor();
}

void GuildMSG_SC_AckJoinList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_SC_AckJoinList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_SC_AckJoinList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_SC_AckJoinList_descriptor_;
}

const GuildMSG_SC_AckJoinList& GuildMSG_SC_AckJoinList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_SC_AckJoinList* GuildMSG_SC_AckJoinList::default_instance_ = NULL;

GuildMSG_SC_AckJoinList* GuildMSG_SC_AckJoinList::New() const {
  return new GuildMSG_SC_AckJoinList;
}

void GuildMSG_SC_AckJoinList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  infolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_SC_AckJoinList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infolist;
        break;
      }

      // repeated .proto.message.ReqInfo infolist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infolist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infolist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_SC_AckJoinList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // repeated .proto.message.ReqInfo infolist = 2;
  for (int i = 0; i < this->infolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->infolist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_SC_AckJoinList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // repeated .proto.message.ReqInfo infolist = 2;
  for (int i = 0; i < this->infolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->infolist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_SC_AckJoinList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  // repeated .proto.message.ReqInfo infolist = 2;
  total_size += 1 * this->infolist_size();
  for (int i = 0; i < this->infolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infolist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_SC_AckJoinList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_SC_AckJoinList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_SC_AckJoinList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_SC_AckJoinList::MergeFrom(const GuildMSG_SC_AckJoinList& from) {
  GOOGLE_CHECK_NE(&from, this);
  infolist_.MergeFrom(from.infolist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_SC_AckJoinList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_SC_AckJoinList::CopyFrom(const GuildMSG_SC_AckJoinList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_SC_AckJoinList::IsInitialized() const {

  return true;
}

void GuildMSG_SC_AckJoinList::Swap(GuildMSG_SC_AckJoinList* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    infolist_.Swap(&other->infolist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_SC_AckJoinList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_SC_AckJoinList_descriptor_;
  metadata.reflection = GuildMSG_SC_AckJoinList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_CS_ReqOpreatJoiniList::kIsdelFieldNumber;
const int GuildMSG_CS_ReqOpreatJoiniList::kAllopreateFieldNumber;
const int GuildMSG_CS_ReqOpreatJoiniList::kPlayeridlistFieldNumber;
#endif  // !_MSC_VER

GuildMSG_CS_ReqOpreatJoiniList::GuildMSG_CS_ReqOpreatJoiniList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_CS_ReqOpreatJoiniList::InitAsDefaultInstance() {
}

GuildMSG_CS_ReqOpreatJoiniList::GuildMSG_CS_ReqOpreatJoiniList(const GuildMSG_CS_ReqOpreatJoiniList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_CS_ReqOpreatJoiniList::SharedCtor() {
  _cached_size_ = 0;
  isdel_ = false;
  allopreate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_CS_ReqOpreatJoiniList::~GuildMSG_CS_ReqOpreatJoiniList() {
  SharedDtor();
}

void GuildMSG_CS_ReqOpreatJoiniList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_CS_ReqOpreatJoiniList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqOpreatJoiniList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_CS_ReqOpreatJoiniList_descriptor_;
}

const GuildMSG_CS_ReqOpreatJoiniList& GuildMSG_CS_ReqOpreatJoiniList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_CS_ReqOpreatJoiniList* GuildMSG_CS_ReqOpreatJoiniList::default_instance_ = NULL;

GuildMSG_CS_ReqOpreatJoiniList* GuildMSG_CS_ReqOpreatJoiniList::New() const {
  return new GuildMSG_CS_ReqOpreatJoiniList;
}

void GuildMSG_CS_ReqOpreatJoiniList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isdel_ = false;
    allopreate_ = 0u;
  }
  playeridlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_CS_ReqOpreatJoiniList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isdel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdel_)));
          set_has_isdel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_allopreate;
        break;
      }

      // optional uint32 allopreate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allopreate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &allopreate_)));
          set_has_allopreate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playeridlist;
        break;
      }

      // repeated uint64 playeridlist = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playeridlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_playeridlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_playeridlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playeridlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_CS_ReqOpreatJoiniList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool isdel = 1;
  if (has_isdel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isdel(), output);
  }

  // optional uint32 allopreate = 2;
  if (has_allopreate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->allopreate(), output);
  }

  // repeated uint64 playeridlist = 3;
  for (int i = 0; i < this->playeridlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->playeridlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_CS_ReqOpreatJoiniList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool isdel = 1;
  if (has_isdel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isdel(), target);
  }

  // optional uint32 allopreate = 2;
  if (has_allopreate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->allopreate(), target);
  }

  // repeated uint64 playeridlist = 3;
  for (int i = 0; i < this->playeridlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->playeridlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_CS_ReqOpreatJoiniList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool isdel = 1;
    if (has_isdel()) {
      total_size += 1 + 1;
    }

    // optional uint32 allopreate = 2;
    if (has_allopreate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->allopreate());
    }

  }
  // repeated uint64 playeridlist = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->playeridlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->playeridlist(i));
    }
    total_size += 1 * this->playeridlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_CS_ReqOpreatJoiniList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_CS_ReqOpreatJoiniList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_CS_ReqOpreatJoiniList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_CS_ReqOpreatJoiniList::MergeFrom(const GuildMSG_CS_ReqOpreatJoiniList& from) {
  GOOGLE_CHECK_NE(&from, this);
  playeridlist_.MergeFrom(from.playeridlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isdel()) {
      set_isdel(from.isdel());
    }
    if (from.has_allopreate()) {
      set_allopreate(from.allopreate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_CS_ReqOpreatJoiniList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_CS_ReqOpreatJoiniList::CopyFrom(const GuildMSG_CS_ReqOpreatJoiniList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_CS_ReqOpreatJoiniList::IsInitialized() const {

  return true;
}

void GuildMSG_CS_ReqOpreatJoiniList::Swap(GuildMSG_CS_ReqOpreatJoiniList* other) {
  if (other != this) {
    std::swap(isdel_, other->isdel_);
    std::swap(allopreate_, other->allopreate_);
    playeridlist_.Swap(&other->playeridlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_CS_ReqOpreatJoiniList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_CS_ReqOpreatJoiniList_descriptor_;
  metadata.reflection = GuildMSG_CS_ReqOpreatJoiniList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_SC_AckOpreatJoiniList::kResultFieldNumber;
#endif  // !_MSC_VER

GuildMSG_SC_AckOpreatJoiniList::GuildMSG_SC_AckOpreatJoiniList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_SC_AckOpreatJoiniList::InitAsDefaultInstance() {
}

GuildMSG_SC_AckOpreatJoiniList::GuildMSG_SC_AckOpreatJoiniList(const GuildMSG_SC_AckOpreatJoiniList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_SC_AckOpreatJoiniList::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_SC_AckOpreatJoiniList::~GuildMSG_SC_AckOpreatJoiniList() {
  SharedDtor();
}

void GuildMSG_SC_AckOpreatJoiniList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_SC_AckOpreatJoiniList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_SC_AckOpreatJoiniList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_SC_AckOpreatJoiniList_descriptor_;
}

const GuildMSG_SC_AckOpreatJoiniList& GuildMSG_SC_AckOpreatJoiniList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_SC_AckOpreatJoiniList* GuildMSG_SC_AckOpreatJoiniList::default_instance_ = NULL;

GuildMSG_SC_AckOpreatJoiniList* GuildMSG_SC_AckOpreatJoiniList::New() const {
  return new GuildMSG_SC_AckOpreatJoiniList;
}

void GuildMSG_SC_AckOpreatJoiniList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_SC_AckOpreatJoiniList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_SC_AckOpreatJoiniList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_SC_AckOpreatJoiniList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_SC_AckOpreatJoiniList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_SC_AckOpreatJoiniList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_SC_AckOpreatJoiniList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_SC_AckOpreatJoiniList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_SC_AckOpreatJoiniList::MergeFrom(const GuildMSG_SC_AckOpreatJoiniList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_SC_AckOpreatJoiniList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_SC_AckOpreatJoiniList::CopyFrom(const GuildMSG_SC_AckOpreatJoiniList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_SC_AckOpreatJoiniList::IsInitialized() const {

  return true;
}

void GuildMSG_SC_AckOpreatJoiniList::Swap(GuildMSG_SC_AckOpreatJoiniList* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_SC_AckOpreatJoiniList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_SC_AckOpreatJoiniList_descriptor_;
  metadata.reflection = GuildMSG_SC_AckOpreatJoiniList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_CS_ReqKickOut::kPlayeridFieldNumber;
#endif  // !_MSC_VER

GuildMSG_CS_ReqKickOut::GuildMSG_CS_ReqKickOut()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_CS_ReqKickOut::InitAsDefaultInstance() {
}

GuildMSG_CS_ReqKickOut::GuildMSG_CS_ReqKickOut(const GuildMSG_CS_ReqKickOut& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_CS_ReqKickOut::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_CS_ReqKickOut::~GuildMSG_CS_ReqKickOut() {
  SharedDtor();
}

void GuildMSG_CS_ReqKickOut::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_CS_ReqKickOut::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqKickOut::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_CS_ReqKickOut_descriptor_;
}

const GuildMSG_CS_ReqKickOut& GuildMSG_CS_ReqKickOut::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_CS_ReqKickOut* GuildMSG_CS_ReqKickOut::default_instance_ = NULL;

GuildMSG_CS_ReqKickOut* GuildMSG_CS_ReqKickOut::New() const {
  return new GuildMSG_CS_ReqKickOut;
}

void GuildMSG_CS_ReqKickOut::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_CS_ReqKickOut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_CS_ReqKickOut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_CS_ReqKickOut::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_CS_ReqKickOut::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_CS_ReqKickOut::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_CS_ReqKickOut* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_CS_ReqKickOut*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_CS_ReqKickOut::MergeFrom(const GuildMSG_CS_ReqKickOut& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_CS_ReqKickOut::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_CS_ReqKickOut::CopyFrom(const GuildMSG_CS_ReqKickOut& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_CS_ReqKickOut::IsInitialized() const {

  return true;
}

void GuildMSG_CS_ReqKickOut::Swap(GuildMSG_CS_ReqKickOut* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_CS_ReqKickOut::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_CS_ReqKickOut_descriptor_;
  metadata.reflection = GuildMSG_CS_ReqKickOut_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_SC_AckKickOut::kResultFieldNumber;
#endif  // !_MSC_VER

GuildMSG_SC_AckKickOut::GuildMSG_SC_AckKickOut()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_SC_AckKickOut::InitAsDefaultInstance() {
}

GuildMSG_SC_AckKickOut::GuildMSG_SC_AckKickOut(const GuildMSG_SC_AckKickOut& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_SC_AckKickOut::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_SC_AckKickOut::~GuildMSG_SC_AckKickOut() {
  SharedDtor();
}

void GuildMSG_SC_AckKickOut::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_SC_AckKickOut::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_SC_AckKickOut::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_SC_AckKickOut_descriptor_;
}

const GuildMSG_SC_AckKickOut& GuildMSG_SC_AckKickOut::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_SC_AckKickOut* GuildMSG_SC_AckKickOut::default_instance_ = NULL;

GuildMSG_SC_AckKickOut* GuildMSG_SC_AckKickOut::New() const {
  return new GuildMSG_SC_AckKickOut;
}

void GuildMSG_SC_AckKickOut::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_SC_AckKickOut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_SC_AckKickOut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_SC_AckKickOut::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_SC_AckKickOut::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_SC_AckKickOut::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_SC_AckKickOut* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_SC_AckKickOut*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_SC_AckKickOut::MergeFrom(const GuildMSG_SC_AckKickOut& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_SC_AckKickOut::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_SC_AckKickOut::CopyFrom(const GuildMSG_SC_AckKickOut& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_SC_AckKickOut::IsInitialized() const {

  return true;
}

void GuildMSG_SC_AckKickOut::Swap(GuildMSG_SC_AckKickOut* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_SC_AckKickOut::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_SC_AckKickOut_descriptor_;
  metadata.reflection = GuildMSG_SC_AckKickOut_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_CS_ReqAppointment::kPlayeridFieldNumber;
const int GuildMSG_CS_ReqAppointment::kOfficeFieldNumber;
#endif  // !_MSC_VER

GuildMSG_CS_ReqAppointment::GuildMSG_CS_ReqAppointment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_CS_ReqAppointment::InitAsDefaultInstance() {
}

GuildMSG_CS_ReqAppointment::GuildMSG_CS_ReqAppointment(const GuildMSG_CS_ReqAppointment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_CS_ReqAppointment::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  office_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_CS_ReqAppointment::~GuildMSG_CS_ReqAppointment() {
  SharedDtor();
}

void GuildMSG_CS_ReqAppointment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_CS_ReqAppointment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqAppointment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_CS_ReqAppointment_descriptor_;
}

const GuildMSG_CS_ReqAppointment& GuildMSG_CS_ReqAppointment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_CS_ReqAppointment* GuildMSG_CS_ReqAppointment::default_instance_ = NULL;

GuildMSG_CS_ReqAppointment* GuildMSG_CS_ReqAppointment::New() const {
  return new GuildMSG_CS_ReqAppointment;
}

void GuildMSG_CS_ReqAppointment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
    office_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_CS_ReqAppointment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_office;
        break;
      }

      // optional uint32 office = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_office:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &office_)));
          set_has_office();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_CS_ReqAppointment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  // optional uint32 office = 2;
  if (has_office()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->office(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_CS_ReqAppointment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  // optional uint32 office = 2;
  if (has_office()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->office(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_CS_ReqAppointment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // optional uint32 office = 2;
    if (has_office()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->office());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_CS_ReqAppointment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_CS_ReqAppointment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_CS_ReqAppointment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_CS_ReqAppointment::MergeFrom(const GuildMSG_CS_ReqAppointment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_office()) {
      set_office(from.office());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_CS_ReqAppointment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_CS_ReqAppointment::CopyFrom(const GuildMSG_CS_ReqAppointment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_CS_ReqAppointment::IsInitialized() const {

  return true;
}

void GuildMSG_CS_ReqAppointment::Swap(GuildMSG_CS_ReqAppointment* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(office_, other->office_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_CS_ReqAppointment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_CS_ReqAppointment_descriptor_;
  metadata.reflection = GuildMSG_CS_ReqAppointment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_SC_AckAppointment::kResultFieldNumber;
#endif  // !_MSC_VER

GuildMSG_SC_AckAppointment::GuildMSG_SC_AckAppointment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_SC_AckAppointment::InitAsDefaultInstance() {
}

GuildMSG_SC_AckAppointment::GuildMSG_SC_AckAppointment(const GuildMSG_SC_AckAppointment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_SC_AckAppointment::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_SC_AckAppointment::~GuildMSG_SC_AckAppointment() {
  SharedDtor();
}

void GuildMSG_SC_AckAppointment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_SC_AckAppointment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_SC_AckAppointment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_SC_AckAppointment_descriptor_;
}

const GuildMSG_SC_AckAppointment& GuildMSG_SC_AckAppointment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_SC_AckAppointment* GuildMSG_SC_AckAppointment::default_instance_ = NULL;

GuildMSG_SC_AckAppointment* GuildMSG_SC_AckAppointment::New() const {
  return new GuildMSG_SC_AckAppointment;
}

void GuildMSG_SC_AckAppointment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_SC_AckAppointment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_SC_AckAppointment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_SC_AckAppointment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_SC_AckAppointment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_SC_AckAppointment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_SC_AckAppointment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_SC_AckAppointment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_SC_AckAppointment::MergeFrom(const GuildMSG_SC_AckAppointment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_SC_AckAppointment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_SC_AckAppointment::CopyFrom(const GuildMSG_SC_AckAppointment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_SC_AckAppointment::IsInitialized() const {

  return true;
}

void GuildMSG_SC_AckAppointment::Swap(GuildMSG_SC_AckAppointment* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_SC_AckAppointment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_SC_AckAppointment_descriptor_;
  metadata.reflection = GuildMSG_SC_AckAppointment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_CS_ReqSetGuildPlacard::kTypeFieldNumber;
const int GuildMSG_CS_ReqSetGuildPlacard::kContextFieldNumber;
#endif  // !_MSC_VER

GuildMSG_CS_ReqSetGuildPlacard::GuildMSG_CS_ReqSetGuildPlacard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_CS_ReqSetGuildPlacard::InitAsDefaultInstance() {
}

GuildMSG_CS_ReqSetGuildPlacard::GuildMSG_CS_ReqSetGuildPlacard(const GuildMSG_CS_ReqSetGuildPlacard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_CS_ReqSetGuildPlacard::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  context_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_CS_ReqSetGuildPlacard::~GuildMSG_CS_ReqSetGuildPlacard() {
  SharedDtor();
}

void GuildMSG_CS_ReqSetGuildPlacard::SharedDtor() {
  if (context_ != &::google::protobuf::internal::kEmptyString) {
    delete context_;
  }
  if (this != default_instance_) {
  }
}

void GuildMSG_CS_ReqSetGuildPlacard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqSetGuildPlacard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_CS_ReqSetGuildPlacard_descriptor_;
}

const GuildMSG_CS_ReqSetGuildPlacard& GuildMSG_CS_ReqSetGuildPlacard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_CS_ReqSetGuildPlacard* GuildMSG_CS_ReqSetGuildPlacard::default_instance_ = NULL;

GuildMSG_CS_ReqSetGuildPlacard* GuildMSG_CS_ReqSetGuildPlacard::New() const {
  return new GuildMSG_CS_ReqSetGuildPlacard;
}

void GuildMSG_CS_ReqSetGuildPlacard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    if (has_context()) {
      if (context_ != &::google::protobuf::internal::kEmptyString) {
        context_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_CS_ReqSetGuildPlacard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_context;
        break;
      }

      // optional string context = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_context:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_context()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->context().data(), this->context().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_CS_ReqSetGuildPlacard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional string context = 2;
  if (has_context()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->context().data(), this->context().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->context(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_CS_ReqSetGuildPlacard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional string context = 2;
  if (has_context()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->context().data(), this->context().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->context(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_CS_ReqSetGuildPlacard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional string context = 2;
    if (has_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->context());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_CS_ReqSetGuildPlacard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_CS_ReqSetGuildPlacard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_CS_ReqSetGuildPlacard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_CS_ReqSetGuildPlacard::MergeFrom(const GuildMSG_CS_ReqSetGuildPlacard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_context()) {
      set_context(from.context());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_CS_ReqSetGuildPlacard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_CS_ReqSetGuildPlacard::CopyFrom(const GuildMSG_CS_ReqSetGuildPlacard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_CS_ReqSetGuildPlacard::IsInitialized() const {

  return true;
}

void GuildMSG_CS_ReqSetGuildPlacard::Swap(GuildMSG_CS_ReqSetGuildPlacard* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(context_, other->context_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_CS_ReqSetGuildPlacard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_CS_ReqSetGuildPlacard_descriptor_;
  metadata.reflection = GuildMSG_CS_ReqSetGuildPlacard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_SC_AckSetGuildPlacard::kResultFieldNumber;
#endif  // !_MSC_VER

GuildMSG_SC_AckSetGuildPlacard::GuildMSG_SC_AckSetGuildPlacard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_SC_AckSetGuildPlacard::InitAsDefaultInstance() {
}

GuildMSG_SC_AckSetGuildPlacard::GuildMSG_SC_AckSetGuildPlacard(const GuildMSG_SC_AckSetGuildPlacard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_SC_AckSetGuildPlacard::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_SC_AckSetGuildPlacard::~GuildMSG_SC_AckSetGuildPlacard() {
  SharedDtor();
}

void GuildMSG_SC_AckSetGuildPlacard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_SC_AckSetGuildPlacard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_SC_AckSetGuildPlacard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_SC_AckSetGuildPlacard_descriptor_;
}

const GuildMSG_SC_AckSetGuildPlacard& GuildMSG_SC_AckSetGuildPlacard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_SC_AckSetGuildPlacard* GuildMSG_SC_AckSetGuildPlacard::default_instance_ = NULL;

GuildMSG_SC_AckSetGuildPlacard* GuildMSG_SC_AckSetGuildPlacard::New() const {
  return new GuildMSG_SC_AckSetGuildPlacard;
}

void GuildMSG_SC_AckSetGuildPlacard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_SC_AckSetGuildPlacard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_SC_AckSetGuildPlacard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_SC_AckSetGuildPlacard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_SC_AckSetGuildPlacard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_SC_AckSetGuildPlacard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_SC_AckSetGuildPlacard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_SC_AckSetGuildPlacard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_SC_AckSetGuildPlacard::MergeFrom(const GuildMSG_SC_AckSetGuildPlacard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_SC_AckSetGuildPlacard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_SC_AckSetGuildPlacard::CopyFrom(const GuildMSG_SC_AckSetGuildPlacard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_SC_AckSetGuildPlacard::IsInitialized() const {

  return true;
}

void GuildMSG_SC_AckSetGuildPlacard::Swap(GuildMSG_SC_AckSetGuildPlacard* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_SC_AckSetGuildPlacard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_SC_AckSetGuildPlacard_descriptor_;
  metadata.reflection = GuildMSG_SC_AckSetGuildPlacard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_CS_ReqSetRefrishMultiple::kMultipleFieldNumber;
#endif  // !_MSC_VER

GuildMSG_CS_ReqSetRefrishMultiple::GuildMSG_CS_ReqSetRefrishMultiple()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_CS_ReqSetRefrishMultiple::InitAsDefaultInstance() {
}

GuildMSG_CS_ReqSetRefrishMultiple::GuildMSG_CS_ReqSetRefrishMultiple(const GuildMSG_CS_ReqSetRefrishMultiple& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_CS_ReqSetRefrishMultiple::SharedCtor() {
  _cached_size_ = 0;
  multiple_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_CS_ReqSetRefrishMultiple::~GuildMSG_CS_ReqSetRefrishMultiple() {
  SharedDtor();
}

void GuildMSG_CS_ReqSetRefrishMultiple::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_CS_ReqSetRefrishMultiple::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqSetRefrishMultiple::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_CS_ReqSetRefrishMultiple_descriptor_;
}

const GuildMSG_CS_ReqSetRefrishMultiple& GuildMSG_CS_ReqSetRefrishMultiple::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_CS_ReqSetRefrishMultiple* GuildMSG_CS_ReqSetRefrishMultiple::default_instance_ = NULL;

GuildMSG_CS_ReqSetRefrishMultiple* GuildMSG_CS_ReqSetRefrishMultiple::New() const {
  return new GuildMSG_CS_ReqSetRefrishMultiple;
}

void GuildMSG_CS_ReqSetRefrishMultiple::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    multiple_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_CS_ReqSetRefrishMultiple::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 multiple = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &multiple_)));
          set_has_multiple();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_CS_ReqSetRefrishMultiple::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 multiple = 1;
  if (has_multiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->multiple(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_CS_ReqSetRefrishMultiple::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 multiple = 1;
  if (has_multiple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->multiple(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_CS_ReqSetRefrishMultiple::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 multiple = 1;
    if (has_multiple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->multiple());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_CS_ReqSetRefrishMultiple::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_CS_ReqSetRefrishMultiple* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_CS_ReqSetRefrishMultiple*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_CS_ReqSetRefrishMultiple::MergeFrom(const GuildMSG_CS_ReqSetRefrishMultiple& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_multiple()) {
      set_multiple(from.multiple());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_CS_ReqSetRefrishMultiple::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_CS_ReqSetRefrishMultiple::CopyFrom(const GuildMSG_CS_ReqSetRefrishMultiple& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_CS_ReqSetRefrishMultiple::IsInitialized() const {

  return true;
}

void GuildMSG_CS_ReqSetRefrishMultiple::Swap(GuildMSG_CS_ReqSetRefrishMultiple* other) {
  if (other != this) {
    std::swap(multiple_, other->multiple_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_CS_ReqSetRefrishMultiple::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_CS_ReqSetRefrishMultiple_descriptor_;
  metadata.reflection = GuildMSG_CS_ReqSetRefrishMultiple_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_SC_AckSetRefrishMultiple::kResultFieldNumber;
#endif  // !_MSC_VER

GuildMSG_SC_AckSetRefrishMultiple::GuildMSG_SC_AckSetRefrishMultiple()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_SC_AckSetRefrishMultiple::InitAsDefaultInstance() {
}

GuildMSG_SC_AckSetRefrishMultiple::GuildMSG_SC_AckSetRefrishMultiple(const GuildMSG_SC_AckSetRefrishMultiple& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_SC_AckSetRefrishMultiple::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_SC_AckSetRefrishMultiple::~GuildMSG_SC_AckSetRefrishMultiple() {
  SharedDtor();
}

void GuildMSG_SC_AckSetRefrishMultiple::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_SC_AckSetRefrishMultiple::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_SC_AckSetRefrishMultiple::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_SC_AckSetRefrishMultiple_descriptor_;
}

const GuildMSG_SC_AckSetRefrishMultiple& GuildMSG_SC_AckSetRefrishMultiple::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_SC_AckSetRefrishMultiple* GuildMSG_SC_AckSetRefrishMultiple::default_instance_ = NULL;

GuildMSG_SC_AckSetRefrishMultiple* GuildMSG_SC_AckSetRefrishMultiple::New() const {
  return new GuildMSG_SC_AckSetRefrishMultiple;
}

void GuildMSG_SC_AckSetRefrishMultiple::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_SC_AckSetRefrishMultiple::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_SC_AckSetRefrishMultiple::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_SC_AckSetRefrishMultiple::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_SC_AckSetRefrishMultiple::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_SC_AckSetRefrishMultiple::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_SC_AckSetRefrishMultiple* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_SC_AckSetRefrishMultiple*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_SC_AckSetRefrishMultiple::MergeFrom(const GuildMSG_SC_AckSetRefrishMultiple& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_SC_AckSetRefrishMultiple::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_SC_AckSetRefrishMultiple::CopyFrom(const GuildMSG_SC_AckSetRefrishMultiple& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_SC_AckSetRefrishMultiple::IsInitialized() const {

  return true;
}

void GuildMSG_SC_AckSetRefrishMultiple::Swap(GuildMSG_SC_AckSetRefrishMultiple* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_SC_AckSetRefrishMultiple::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_SC_AckSetRefrishMultiple_descriptor_;
  metadata.reflection = GuildMSG_SC_AckSetRefrishMultiple_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_CS_ReqIncreaseBuilding::kBuildingtypeFieldNumber;
#endif  // !_MSC_VER

GuildMSG_CS_ReqIncreaseBuilding::GuildMSG_CS_ReqIncreaseBuilding()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_CS_ReqIncreaseBuilding::InitAsDefaultInstance() {
}

GuildMSG_CS_ReqIncreaseBuilding::GuildMSG_CS_ReqIncreaseBuilding(const GuildMSG_CS_ReqIncreaseBuilding& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_CS_ReqIncreaseBuilding::SharedCtor() {
  _cached_size_ = 0;
  buildingtype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_CS_ReqIncreaseBuilding::~GuildMSG_CS_ReqIncreaseBuilding() {
  SharedDtor();
}

void GuildMSG_CS_ReqIncreaseBuilding::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_CS_ReqIncreaseBuilding::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqIncreaseBuilding::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_CS_ReqIncreaseBuilding_descriptor_;
}

const GuildMSG_CS_ReqIncreaseBuilding& GuildMSG_CS_ReqIncreaseBuilding::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_CS_ReqIncreaseBuilding* GuildMSG_CS_ReqIncreaseBuilding::default_instance_ = NULL;

GuildMSG_CS_ReqIncreaseBuilding* GuildMSG_CS_ReqIncreaseBuilding::New() const {
  return new GuildMSG_CS_ReqIncreaseBuilding;
}

void GuildMSG_CS_ReqIncreaseBuilding::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buildingtype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_CS_ReqIncreaseBuilding::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 buildingtype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buildingtype_)));
          set_has_buildingtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_CS_ReqIncreaseBuilding::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 buildingtype = 1;
  if (has_buildingtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->buildingtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_CS_ReqIncreaseBuilding::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 buildingtype = 1;
  if (has_buildingtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->buildingtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_CS_ReqIncreaseBuilding::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 buildingtype = 1;
    if (has_buildingtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buildingtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_CS_ReqIncreaseBuilding::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_CS_ReqIncreaseBuilding* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_CS_ReqIncreaseBuilding*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_CS_ReqIncreaseBuilding::MergeFrom(const GuildMSG_CS_ReqIncreaseBuilding& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buildingtype()) {
      set_buildingtype(from.buildingtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_CS_ReqIncreaseBuilding::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_CS_ReqIncreaseBuilding::CopyFrom(const GuildMSG_CS_ReqIncreaseBuilding& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_CS_ReqIncreaseBuilding::IsInitialized() const {

  return true;
}

void GuildMSG_CS_ReqIncreaseBuilding::Swap(GuildMSG_CS_ReqIncreaseBuilding* other) {
  if (other != this) {
    std::swap(buildingtype_, other->buildingtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_CS_ReqIncreaseBuilding::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_CS_ReqIncreaseBuilding_descriptor_;
  metadata.reflection = GuildMSG_CS_ReqIncreaseBuilding_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_SC_AckIncreaseBuilding::kResultFieldNumber;
#endif  // !_MSC_VER

GuildMSG_SC_AckIncreaseBuilding::GuildMSG_SC_AckIncreaseBuilding()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_SC_AckIncreaseBuilding::InitAsDefaultInstance() {
}

GuildMSG_SC_AckIncreaseBuilding::GuildMSG_SC_AckIncreaseBuilding(const GuildMSG_SC_AckIncreaseBuilding& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_SC_AckIncreaseBuilding::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_SC_AckIncreaseBuilding::~GuildMSG_SC_AckIncreaseBuilding() {
  SharedDtor();
}

void GuildMSG_SC_AckIncreaseBuilding::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_SC_AckIncreaseBuilding::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_SC_AckIncreaseBuilding::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_SC_AckIncreaseBuilding_descriptor_;
}

const GuildMSG_SC_AckIncreaseBuilding& GuildMSG_SC_AckIncreaseBuilding::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_SC_AckIncreaseBuilding* GuildMSG_SC_AckIncreaseBuilding::default_instance_ = NULL;

GuildMSG_SC_AckIncreaseBuilding* GuildMSG_SC_AckIncreaseBuilding::New() const {
  return new GuildMSG_SC_AckIncreaseBuilding;
}

void GuildMSG_SC_AckIncreaseBuilding::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_SC_AckIncreaseBuilding::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_SC_AckIncreaseBuilding::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_SC_AckIncreaseBuilding::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_SC_AckIncreaseBuilding::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_SC_AckIncreaseBuilding::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_SC_AckIncreaseBuilding* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_SC_AckIncreaseBuilding*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_SC_AckIncreaseBuilding::MergeFrom(const GuildMSG_SC_AckIncreaseBuilding& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_SC_AckIncreaseBuilding::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_SC_AckIncreaseBuilding::CopyFrom(const GuildMSG_SC_AckIncreaseBuilding& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_SC_AckIncreaseBuilding::IsInitialized() const {

  return true;
}

void GuildMSG_SC_AckIncreaseBuilding::Swap(GuildMSG_SC_AckIncreaseBuilding* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_SC_AckIncreaseBuilding::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_SC_AckIncreaseBuilding_descriptor_;
  metadata.reflection = GuildMSG_SC_AckIncreaseBuilding_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_CS_ReqDonate::kItemidFieldNumber;
const int GuildMSG_CS_ReqDonate::kCountsFieldNumber;
#endif  // !_MSC_VER

GuildMSG_CS_ReqDonate::GuildMSG_CS_ReqDonate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_CS_ReqDonate::InitAsDefaultInstance() {
}

GuildMSG_CS_ReqDonate::GuildMSG_CS_ReqDonate(const GuildMSG_CS_ReqDonate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_CS_ReqDonate::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  counts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_CS_ReqDonate::~GuildMSG_CS_ReqDonate() {
  SharedDtor();
}

void GuildMSG_CS_ReqDonate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_CS_ReqDonate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqDonate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_CS_ReqDonate_descriptor_;
}

const GuildMSG_CS_ReqDonate& GuildMSG_CS_ReqDonate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_CS_ReqDonate* GuildMSG_CS_ReqDonate::default_instance_ = NULL;

GuildMSG_CS_ReqDonate* GuildMSG_CS_ReqDonate::New() const {
  return new GuildMSG_CS_ReqDonate;
}

void GuildMSG_CS_ReqDonate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    counts_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_CS_ReqDonate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_counts;
        break;
      }

      // optional uint32 counts = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_counts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &counts_)));
          set_has_counts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_CS_ReqDonate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 itemid = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint32 counts = 2;
  if (has_counts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->counts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_CS_ReqDonate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 itemid = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 counts = 2;
  if (has_counts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->counts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_CS_ReqDonate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 counts = 2;
    if (has_counts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->counts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_CS_ReqDonate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_CS_ReqDonate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_CS_ReqDonate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_CS_ReqDonate::MergeFrom(const GuildMSG_CS_ReqDonate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_counts()) {
      set_counts(from.counts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_CS_ReqDonate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_CS_ReqDonate::CopyFrom(const GuildMSG_CS_ReqDonate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_CS_ReqDonate::IsInitialized() const {

  return true;
}

void GuildMSG_CS_ReqDonate::Swap(GuildMSG_CS_ReqDonate* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(counts_, other->counts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_CS_ReqDonate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_CS_ReqDonate_descriptor_;
  metadata.reflection = GuildMSG_CS_ReqDonate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_SC_AckDonate::kResultFieldNumber;
#endif  // !_MSC_VER

GuildMSG_SC_AckDonate::GuildMSG_SC_AckDonate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_SC_AckDonate::InitAsDefaultInstance() {
}

GuildMSG_SC_AckDonate::GuildMSG_SC_AckDonate(const GuildMSG_SC_AckDonate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_SC_AckDonate::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_SC_AckDonate::~GuildMSG_SC_AckDonate() {
  SharedDtor();
}

void GuildMSG_SC_AckDonate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_SC_AckDonate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_SC_AckDonate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_SC_AckDonate_descriptor_;
}

const GuildMSG_SC_AckDonate& GuildMSG_SC_AckDonate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_SC_AckDonate* GuildMSG_SC_AckDonate::default_instance_ = NULL;

GuildMSG_SC_AckDonate* GuildMSG_SC_AckDonate::New() const {
  return new GuildMSG_SC_AckDonate;
}

void GuildMSG_SC_AckDonate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_SC_AckDonate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_SC_AckDonate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_SC_AckDonate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_SC_AckDonate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_SC_AckDonate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_SC_AckDonate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_SC_AckDonate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_SC_AckDonate::MergeFrom(const GuildMSG_SC_AckDonate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_SC_AckDonate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_SC_AckDonate::CopyFrom(const GuildMSG_SC_AckDonate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_SC_AckDonate::IsInitialized() const {

  return true;
}

void GuildMSG_SC_AckDonate::Swap(GuildMSG_SC_AckDonate* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_SC_AckDonate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_SC_AckDonate_descriptor_;
  metadata.reflection = GuildMSG_SC_AckDonate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GuildMSG_CS_ReqGetWages::GuildMSG_CS_ReqGetWages()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_CS_ReqGetWages::InitAsDefaultInstance() {
}

GuildMSG_CS_ReqGetWages::GuildMSG_CS_ReqGetWages(const GuildMSG_CS_ReqGetWages& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_CS_ReqGetWages::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_CS_ReqGetWages::~GuildMSG_CS_ReqGetWages() {
  SharedDtor();
}

void GuildMSG_CS_ReqGetWages::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_CS_ReqGetWages::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqGetWages::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_CS_ReqGetWages_descriptor_;
}

const GuildMSG_CS_ReqGetWages& GuildMSG_CS_ReqGetWages::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_CS_ReqGetWages* GuildMSG_CS_ReqGetWages::default_instance_ = NULL;

GuildMSG_CS_ReqGetWages* GuildMSG_CS_ReqGetWages::New() const {
  return new GuildMSG_CS_ReqGetWages;
}

void GuildMSG_CS_ReqGetWages::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_CS_ReqGetWages::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GuildMSG_CS_ReqGetWages::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_CS_ReqGetWages::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_CS_ReqGetWages::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_CS_ReqGetWages::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_CS_ReqGetWages* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_CS_ReqGetWages*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_CS_ReqGetWages::MergeFrom(const GuildMSG_CS_ReqGetWages& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_CS_ReqGetWages::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_CS_ReqGetWages::CopyFrom(const GuildMSG_CS_ReqGetWages& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_CS_ReqGetWages::IsInitialized() const {

  return true;
}

void GuildMSG_CS_ReqGetWages::Swap(GuildMSG_CS_ReqGetWages* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_CS_ReqGetWages::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_CS_ReqGetWages_descriptor_;
  metadata.reflection = GuildMSG_CS_ReqGetWages_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_SC_AckGetWages::kResultFieldNumber;
#endif  // !_MSC_VER

GuildMSG_SC_AckGetWages::GuildMSG_SC_AckGetWages()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_SC_AckGetWages::InitAsDefaultInstance() {
}

GuildMSG_SC_AckGetWages::GuildMSG_SC_AckGetWages(const GuildMSG_SC_AckGetWages& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_SC_AckGetWages::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_SC_AckGetWages::~GuildMSG_SC_AckGetWages() {
  SharedDtor();
}

void GuildMSG_SC_AckGetWages::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_SC_AckGetWages::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_SC_AckGetWages::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_SC_AckGetWages_descriptor_;
}

const GuildMSG_SC_AckGetWages& GuildMSG_SC_AckGetWages::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_SC_AckGetWages* GuildMSG_SC_AckGetWages::default_instance_ = NULL;

GuildMSG_SC_AckGetWages* GuildMSG_SC_AckGetWages::New() const {
  return new GuildMSG_SC_AckGetWages;
}

void GuildMSG_SC_AckGetWages::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_SC_AckGetWages::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_SC_AckGetWages::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_SC_AckGetWages::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_SC_AckGetWages::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_SC_AckGetWages::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_SC_AckGetWages* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_SC_AckGetWages*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_SC_AckGetWages::MergeFrom(const GuildMSG_SC_AckGetWages& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_SC_AckGetWages::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_SC_AckGetWages::CopyFrom(const GuildMSG_SC_AckGetWages& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_SC_AckGetWages::IsInitialized() const {

  return true;
}

void GuildMSG_SC_AckGetWages::Swap(GuildMSG_SC_AckGetWages* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_SC_AckGetWages::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_SC_AckGetWages_descriptor_;
  metadata.reflection = GuildMSG_SC_AckGetWages_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GuildMSG_CS_ReqImpeachInfo::GuildMSG_CS_ReqImpeachInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_CS_ReqImpeachInfo::InitAsDefaultInstance() {
}

GuildMSG_CS_ReqImpeachInfo::GuildMSG_CS_ReqImpeachInfo(const GuildMSG_CS_ReqImpeachInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_CS_ReqImpeachInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_CS_ReqImpeachInfo::~GuildMSG_CS_ReqImpeachInfo() {
  SharedDtor();
}

void GuildMSG_CS_ReqImpeachInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_CS_ReqImpeachInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqImpeachInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_CS_ReqImpeachInfo_descriptor_;
}

const GuildMSG_CS_ReqImpeachInfo& GuildMSG_CS_ReqImpeachInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_CS_ReqImpeachInfo* GuildMSG_CS_ReqImpeachInfo::default_instance_ = NULL;

GuildMSG_CS_ReqImpeachInfo* GuildMSG_CS_ReqImpeachInfo::New() const {
  return new GuildMSG_CS_ReqImpeachInfo;
}

void GuildMSG_CS_ReqImpeachInfo::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_CS_ReqImpeachInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GuildMSG_CS_ReqImpeachInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_CS_ReqImpeachInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_CS_ReqImpeachInfo::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_CS_ReqImpeachInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_CS_ReqImpeachInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_CS_ReqImpeachInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_CS_ReqImpeachInfo::MergeFrom(const GuildMSG_CS_ReqImpeachInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_CS_ReqImpeachInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_CS_ReqImpeachInfo::CopyFrom(const GuildMSG_CS_ReqImpeachInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_CS_ReqImpeachInfo::IsInitialized() const {

  return true;
}

void GuildMSG_CS_ReqImpeachInfo::Swap(GuildMSG_CS_ReqImpeachInfo* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_CS_ReqImpeachInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_CS_ReqImpeachInfo_descriptor_;
  metadata.reflection = GuildMSG_CS_ReqImpeachInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_SC_AckImpeachInfo::kResultFieldNumber;
const int GuildMSG_SC_AckImpeachInfo::kImpdataFieldNumber;
#endif  // !_MSC_VER

GuildMSG_SC_AckImpeachInfo::GuildMSG_SC_AckImpeachInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_SC_AckImpeachInfo::InitAsDefaultInstance() {
  impdata_ = const_cast< ::proto::message::ImpeachInfo*>(&::proto::message::ImpeachInfo::default_instance());
}

GuildMSG_SC_AckImpeachInfo::GuildMSG_SC_AckImpeachInfo(const GuildMSG_SC_AckImpeachInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_SC_AckImpeachInfo::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  impdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_SC_AckImpeachInfo::~GuildMSG_SC_AckImpeachInfo() {
  SharedDtor();
}

void GuildMSG_SC_AckImpeachInfo::SharedDtor() {
  if (this != default_instance_) {
    delete impdata_;
  }
}

void GuildMSG_SC_AckImpeachInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_SC_AckImpeachInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_SC_AckImpeachInfo_descriptor_;
}

const GuildMSG_SC_AckImpeachInfo& GuildMSG_SC_AckImpeachInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_SC_AckImpeachInfo* GuildMSG_SC_AckImpeachInfo::default_instance_ = NULL;

GuildMSG_SC_AckImpeachInfo* GuildMSG_SC_AckImpeachInfo::New() const {
  return new GuildMSG_SC_AckImpeachInfo;
}

void GuildMSG_SC_AckImpeachInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    if (has_impdata()) {
      if (impdata_ != NULL) impdata_->::proto::message::ImpeachInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_SC_AckImpeachInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_impdata;
        break;
      }

      // optional .proto.message.ImpeachInfo impdata = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_impdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_impdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_SC_AckImpeachInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional .proto.message.ImpeachInfo impdata = 2;
  if (has_impdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->impdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_SC_AckImpeachInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional .proto.message.ImpeachInfo impdata = 2;
  if (has_impdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->impdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_SC_AckImpeachInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional .proto.message.ImpeachInfo impdata = 2;
    if (has_impdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->impdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_SC_AckImpeachInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_SC_AckImpeachInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_SC_AckImpeachInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_SC_AckImpeachInfo::MergeFrom(const GuildMSG_SC_AckImpeachInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_impdata()) {
      mutable_impdata()->::proto::message::ImpeachInfo::MergeFrom(from.impdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_SC_AckImpeachInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_SC_AckImpeachInfo::CopyFrom(const GuildMSG_SC_AckImpeachInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_SC_AckImpeachInfo::IsInitialized() const {

  return true;
}

void GuildMSG_SC_AckImpeachInfo::Swap(GuildMSG_SC_AckImpeachInfo* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(impdata_, other->impdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_SC_AckImpeachInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_SC_AckImpeachInfo_descriptor_;
  metadata.reflection = GuildMSG_SC_AckImpeachInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GuildMSG_CS_ReqImpeachment::GuildMSG_CS_ReqImpeachment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_CS_ReqImpeachment::InitAsDefaultInstance() {
}

GuildMSG_CS_ReqImpeachment::GuildMSG_CS_ReqImpeachment(const GuildMSG_CS_ReqImpeachment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_CS_ReqImpeachment::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_CS_ReqImpeachment::~GuildMSG_CS_ReqImpeachment() {
  SharedDtor();
}

void GuildMSG_CS_ReqImpeachment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_CS_ReqImpeachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqImpeachment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_CS_ReqImpeachment_descriptor_;
}

const GuildMSG_CS_ReqImpeachment& GuildMSG_CS_ReqImpeachment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_CS_ReqImpeachment* GuildMSG_CS_ReqImpeachment::default_instance_ = NULL;

GuildMSG_CS_ReqImpeachment* GuildMSG_CS_ReqImpeachment::New() const {
  return new GuildMSG_CS_ReqImpeachment;
}

void GuildMSG_CS_ReqImpeachment::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_CS_ReqImpeachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GuildMSG_CS_ReqImpeachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_CS_ReqImpeachment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_CS_ReqImpeachment::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_CS_ReqImpeachment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_CS_ReqImpeachment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_CS_ReqImpeachment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_CS_ReqImpeachment::MergeFrom(const GuildMSG_CS_ReqImpeachment& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_CS_ReqImpeachment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_CS_ReqImpeachment::CopyFrom(const GuildMSG_CS_ReqImpeachment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_CS_ReqImpeachment::IsInitialized() const {

  return true;
}

void GuildMSG_CS_ReqImpeachment::Swap(GuildMSG_CS_ReqImpeachment* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_CS_ReqImpeachment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_CS_ReqImpeachment_descriptor_;
  metadata.reflection = GuildMSG_CS_ReqImpeachment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_SC_AckImpeachment::kResultFieldNumber;
const int GuildMSG_SC_AckImpeachment::kImpdataFieldNumber;
#endif  // !_MSC_VER

GuildMSG_SC_AckImpeachment::GuildMSG_SC_AckImpeachment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_SC_AckImpeachment::InitAsDefaultInstance() {
  impdata_ = const_cast< ::proto::message::ImpeachInfo*>(&::proto::message::ImpeachInfo::default_instance());
}

GuildMSG_SC_AckImpeachment::GuildMSG_SC_AckImpeachment(const GuildMSG_SC_AckImpeachment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_SC_AckImpeachment::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  impdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_SC_AckImpeachment::~GuildMSG_SC_AckImpeachment() {
  SharedDtor();
}

void GuildMSG_SC_AckImpeachment::SharedDtor() {
  if (this != default_instance_) {
    delete impdata_;
  }
}

void GuildMSG_SC_AckImpeachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_SC_AckImpeachment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_SC_AckImpeachment_descriptor_;
}

const GuildMSG_SC_AckImpeachment& GuildMSG_SC_AckImpeachment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_SC_AckImpeachment* GuildMSG_SC_AckImpeachment::default_instance_ = NULL;

GuildMSG_SC_AckImpeachment* GuildMSG_SC_AckImpeachment::New() const {
  return new GuildMSG_SC_AckImpeachment;
}

void GuildMSG_SC_AckImpeachment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    if (has_impdata()) {
      if (impdata_ != NULL) impdata_->::proto::message::ImpeachInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_SC_AckImpeachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_impdata;
        break;
      }

      // optional .proto.message.ImpeachInfo impdata = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_impdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_impdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_SC_AckImpeachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional .proto.message.ImpeachInfo impdata = 2;
  if (has_impdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->impdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_SC_AckImpeachment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional .proto.message.ImpeachInfo impdata = 2;
  if (has_impdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->impdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_SC_AckImpeachment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional .proto.message.ImpeachInfo impdata = 2;
    if (has_impdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->impdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_SC_AckImpeachment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_SC_AckImpeachment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_SC_AckImpeachment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_SC_AckImpeachment::MergeFrom(const GuildMSG_SC_AckImpeachment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_impdata()) {
      mutable_impdata()->::proto::message::ImpeachInfo::MergeFrom(from.impdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_SC_AckImpeachment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_SC_AckImpeachment::CopyFrom(const GuildMSG_SC_AckImpeachment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_SC_AckImpeachment::IsInitialized() const {

  return true;
}

void GuildMSG_SC_AckImpeachment::Swap(GuildMSG_SC_AckImpeachment* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(impdata_, other->impdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_SC_AckImpeachment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_SC_AckImpeachment_descriptor_;
  metadata.reflection = GuildMSG_SC_AckImpeachment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GuildMSG_CS_ReqCancelImpeachment::GuildMSG_CS_ReqCancelImpeachment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_CS_ReqCancelImpeachment::InitAsDefaultInstance() {
}

GuildMSG_CS_ReqCancelImpeachment::GuildMSG_CS_ReqCancelImpeachment(const GuildMSG_CS_ReqCancelImpeachment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_CS_ReqCancelImpeachment::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_CS_ReqCancelImpeachment::~GuildMSG_CS_ReqCancelImpeachment() {
  SharedDtor();
}

void GuildMSG_CS_ReqCancelImpeachment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_CS_ReqCancelImpeachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqCancelImpeachment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_CS_ReqCancelImpeachment_descriptor_;
}

const GuildMSG_CS_ReqCancelImpeachment& GuildMSG_CS_ReqCancelImpeachment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_CS_ReqCancelImpeachment* GuildMSG_CS_ReqCancelImpeachment::default_instance_ = NULL;

GuildMSG_CS_ReqCancelImpeachment* GuildMSG_CS_ReqCancelImpeachment::New() const {
  return new GuildMSG_CS_ReqCancelImpeachment;
}

void GuildMSG_CS_ReqCancelImpeachment::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_CS_ReqCancelImpeachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GuildMSG_CS_ReqCancelImpeachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_CS_ReqCancelImpeachment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_CS_ReqCancelImpeachment::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_CS_ReqCancelImpeachment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_CS_ReqCancelImpeachment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_CS_ReqCancelImpeachment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_CS_ReqCancelImpeachment::MergeFrom(const GuildMSG_CS_ReqCancelImpeachment& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_CS_ReqCancelImpeachment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_CS_ReqCancelImpeachment::CopyFrom(const GuildMSG_CS_ReqCancelImpeachment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_CS_ReqCancelImpeachment::IsInitialized() const {

  return true;
}

void GuildMSG_CS_ReqCancelImpeachment::Swap(GuildMSG_CS_ReqCancelImpeachment* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_CS_ReqCancelImpeachment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_CS_ReqCancelImpeachment_descriptor_;
  metadata.reflection = GuildMSG_CS_ReqCancelImpeachment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_SC_AckCancelImpeachment::kResultFieldNumber;
#endif  // !_MSC_VER

GuildMSG_SC_AckCancelImpeachment::GuildMSG_SC_AckCancelImpeachment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_SC_AckCancelImpeachment::InitAsDefaultInstance() {
}

GuildMSG_SC_AckCancelImpeachment::GuildMSG_SC_AckCancelImpeachment(const GuildMSG_SC_AckCancelImpeachment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_SC_AckCancelImpeachment::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_SC_AckCancelImpeachment::~GuildMSG_SC_AckCancelImpeachment() {
  SharedDtor();
}

void GuildMSG_SC_AckCancelImpeachment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_SC_AckCancelImpeachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_SC_AckCancelImpeachment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_SC_AckCancelImpeachment_descriptor_;
}

const GuildMSG_SC_AckCancelImpeachment& GuildMSG_SC_AckCancelImpeachment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_SC_AckCancelImpeachment* GuildMSG_SC_AckCancelImpeachment::default_instance_ = NULL;

GuildMSG_SC_AckCancelImpeachment* GuildMSG_SC_AckCancelImpeachment::New() const {
  return new GuildMSG_SC_AckCancelImpeachment;
}

void GuildMSG_SC_AckCancelImpeachment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_SC_AckCancelImpeachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_SC_AckCancelImpeachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_SC_AckCancelImpeachment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_SC_AckCancelImpeachment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_SC_AckCancelImpeachment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_SC_AckCancelImpeachment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_SC_AckCancelImpeachment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_SC_AckCancelImpeachment::MergeFrom(const GuildMSG_SC_AckCancelImpeachment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_SC_AckCancelImpeachment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_SC_AckCancelImpeachment::CopyFrom(const GuildMSG_SC_AckCancelImpeachment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_SC_AckCancelImpeachment::IsInitialized() const {

  return true;
}

void GuildMSG_SC_AckCancelImpeachment::Swap(GuildMSG_SC_AckCancelImpeachment* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_SC_AckCancelImpeachment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_SC_AckCancelImpeachment_descriptor_;
  metadata.reflection = GuildMSG_SC_AckCancelImpeachment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GuildMSG_CS_ReqResponse::GuildMSG_CS_ReqResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_CS_ReqResponse::InitAsDefaultInstance() {
}

GuildMSG_CS_ReqResponse::GuildMSG_CS_ReqResponse(const GuildMSG_CS_ReqResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_CS_ReqResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_CS_ReqResponse::~GuildMSG_CS_ReqResponse() {
  SharedDtor();
}

void GuildMSG_CS_ReqResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_CS_ReqResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_CS_ReqResponse_descriptor_;
}

const GuildMSG_CS_ReqResponse& GuildMSG_CS_ReqResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_CS_ReqResponse* GuildMSG_CS_ReqResponse::default_instance_ = NULL;

GuildMSG_CS_ReqResponse* GuildMSG_CS_ReqResponse::New() const {
  return new GuildMSG_CS_ReqResponse;
}

void GuildMSG_CS_ReqResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_CS_ReqResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GuildMSG_CS_ReqResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_CS_ReqResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_CS_ReqResponse::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_CS_ReqResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_CS_ReqResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_CS_ReqResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_CS_ReqResponse::MergeFrom(const GuildMSG_CS_ReqResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_CS_ReqResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_CS_ReqResponse::CopyFrom(const GuildMSG_CS_ReqResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_CS_ReqResponse::IsInitialized() const {

  return true;
}

void GuildMSG_CS_ReqResponse::Swap(GuildMSG_CS_ReqResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_CS_ReqResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_CS_ReqResponse_descriptor_;
  metadata.reflection = GuildMSG_CS_ReqResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_SC_AckResponse::kResultFieldNumber;
#endif  // !_MSC_VER

GuildMSG_SC_AckResponse::GuildMSG_SC_AckResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_SC_AckResponse::InitAsDefaultInstance() {
}

GuildMSG_SC_AckResponse::GuildMSG_SC_AckResponse(const GuildMSG_SC_AckResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_SC_AckResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_SC_AckResponse::~GuildMSG_SC_AckResponse() {
  SharedDtor();
}

void GuildMSG_SC_AckResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_SC_AckResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_SC_AckResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_SC_AckResponse_descriptor_;
}

const GuildMSG_SC_AckResponse& GuildMSG_SC_AckResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_SC_AckResponse* GuildMSG_SC_AckResponse::default_instance_ = NULL;

GuildMSG_SC_AckResponse* GuildMSG_SC_AckResponse::New() const {
  return new GuildMSG_SC_AckResponse;
}

void GuildMSG_SC_AckResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_SC_AckResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_SC_AckResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_SC_AckResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_SC_AckResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_SC_AckResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_SC_AckResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_SC_AckResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_SC_AckResponse::MergeFrom(const GuildMSG_SC_AckResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_SC_AckResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_SC_AckResponse::CopyFrom(const GuildMSG_SC_AckResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_SC_AckResponse::IsInitialized() const {

  return true;
}

void GuildMSG_SC_AckResponse::Swap(GuildMSG_SC_AckResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_SC_AckResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_SC_AckResponse_descriptor_;
  metadata.reflection = GuildMSG_SC_AckResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GuildMSG_CS_ReqMergeInfo::GuildMSG_CS_ReqMergeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_CS_ReqMergeInfo::InitAsDefaultInstance() {
}

GuildMSG_CS_ReqMergeInfo::GuildMSG_CS_ReqMergeInfo(const GuildMSG_CS_ReqMergeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_CS_ReqMergeInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_CS_ReqMergeInfo::~GuildMSG_CS_ReqMergeInfo() {
  SharedDtor();
}

void GuildMSG_CS_ReqMergeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_CS_ReqMergeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqMergeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_CS_ReqMergeInfo_descriptor_;
}

const GuildMSG_CS_ReqMergeInfo& GuildMSG_CS_ReqMergeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_CS_ReqMergeInfo* GuildMSG_CS_ReqMergeInfo::default_instance_ = NULL;

GuildMSG_CS_ReqMergeInfo* GuildMSG_CS_ReqMergeInfo::New() const {
  return new GuildMSG_CS_ReqMergeInfo;
}

void GuildMSG_CS_ReqMergeInfo::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_CS_ReqMergeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GuildMSG_CS_ReqMergeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_CS_ReqMergeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_CS_ReqMergeInfo::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_CS_ReqMergeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_CS_ReqMergeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_CS_ReqMergeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_CS_ReqMergeInfo::MergeFrom(const GuildMSG_CS_ReqMergeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_CS_ReqMergeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_CS_ReqMergeInfo::CopyFrom(const GuildMSG_CS_ReqMergeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_CS_ReqMergeInfo::IsInitialized() const {

  return true;
}

void GuildMSG_CS_ReqMergeInfo::Swap(GuildMSG_CS_ReqMergeInfo* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_CS_ReqMergeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_CS_ReqMergeInfo_descriptor_;
  metadata.reflection = GuildMSG_CS_ReqMergeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_SC_AckMergeInfo::kResultFieldNumber;
const int GuildMSG_SC_AckMergeInfo::kDataFieldNumber;
#endif  // !_MSC_VER

GuildMSG_SC_AckMergeInfo::GuildMSG_SC_AckMergeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_SC_AckMergeInfo::InitAsDefaultInstance() {
  data_ = const_cast< ::proto::message::UniteGuildData*>(&::proto::message::UniteGuildData::default_instance());
}

GuildMSG_SC_AckMergeInfo::GuildMSG_SC_AckMergeInfo(const GuildMSG_SC_AckMergeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_SC_AckMergeInfo::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_SC_AckMergeInfo::~GuildMSG_SC_AckMergeInfo() {
  SharedDtor();
}

void GuildMSG_SC_AckMergeInfo::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void GuildMSG_SC_AckMergeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_SC_AckMergeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_SC_AckMergeInfo_descriptor_;
}

const GuildMSG_SC_AckMergeInfo& GuildMSG_SC_AckMergeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_SC_AckMergeInfo* GuildMSG_SC_AckMergeInfo::default_instance_ = NULL;

GuildMSG_SC_AckMergeInfo* GuildMSG_SC_AckMergeInfo::New() const {
  return new GuildMSG_SC_AckMergeInfo;
}

void GuildMSG_SC_AckMergeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    if (has_data()) {
      if (data_ != NULL) data_->::proto::message::UniteGuildData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_SC_AckMergeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .proto.message.UniteGuildData data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_SC_AckMergeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional .proto.message.UniteGuildData data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_SC_AckMergeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional .proto.message.UniteGuildData data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_SC_AckMergeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional .proto.message.UniteGuildData data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_SC_AckMergeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_SC_AckMergeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_SC_AckMergeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_SC_AckMergeInfo::MergeFrom(const GuildMSG_SC_AckMergeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_data()) {
      mutable_data()->::proto::message::UniteGuildData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_SC_AckMergeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_SC_AckMergeInfo::CopyFrom(const GuildMSG_SC_AckMergeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_SC_AckMergeInfo::IsInitialized() const {

  return true;
}

void GuildMSG_SC_AckMergeInfo::Swap(GuildMSG_SC_AckMergeInfo* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_SC_AckMergeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_SC_AckMergeInfo_descriptor_;
  metadata.reflection = GuildMSG_SC_AckMergeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_CS_ReqMergeGuild::kRecvguildidFieldNumber;
const int GuildMSG_CS_ReqMergeGuild::kMasteridFieldNumber;
#endif  // !_MSC_VER

GuildMSG_CS_ReqMergeGuild::GuildMSG_CS_ReqMergeGuild()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_CS_ReqMergeGuild::InitAsDefaultInstance() {
}

GuildMSG_CS_ReqMergeGuild::GuildMSG_CS_ReqMergeGuild(const GuildMSG_CS_ReqMergeGuild& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_CS_ReqMergeGuild::SharedCtor() {
  _cached_size_ = 0;
  recvguildid_ = GOOGLE_ULONGLONG(0);
  masterid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_CS_ReqMergeGuild::~GuildMSG_CS_ReqMergeGuild() {
  SharedDtor();
}

void GuildMSG_CS_ReqMergeGuild::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_CS_ReqMergeGuild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqMergeGuild::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_CS_ReqMergeGuild_descriptor_;
}

const GuildMSG_CS_ReqMergeGuild& GuildMSG_CS_ReqMergeGuild::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_CS_ReqMergeGuild* GuildMSG_CS_ReqMergeGuild::default_instance_ = NULL;

GuildMSG_CS_ReqMergeGuild* GuildMSG_CS_ReqMergeGuild::New() const {
  return new GuildMSG_CS_ReqMergeGuild;
}

void GuildMSG_CS_ReqMergeGuild::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    recvguildid_ = GOOGLE_ULONGLONG(0);
    masterid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_CS_ReqMergeGuild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 recvguildid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recvguildid_)));
          set_has_recvguildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_masterid;
        break;
      }

      // optional uint64 masterid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_masterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &masterid_)));
          set_has_masterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_CS_ReqMergeGuild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 recvguildid = 1;
  if (has_recvguildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->recvguildid(), output);
  }

  // optional uint64 masterid = 2;
  if (has_masterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->masterid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_CS_ReqMergeGuild::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 recvguildid = 1;
  if (has_recvguildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->recvguildid(), target);
  }

  // optional uint64 masterid = 2;
  if (has_masterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->masterid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_CS_ReqMergeGuild::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 recvguildid = 1;
    if (has_recvguildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recvguildid());
    }

    // optional uint64 masterid = 2;
    if (has_masterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->masterid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_CS_ReqMergeGuild::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_CS_ReqMergeGuild* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_CS_ReqMergeGuild*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_CS_ReqMergeGuild::MergeFrom(const GuildMSG_CS_ReqMergeGuild& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recvguildid()) {
      set_recvguildid(from.recvguildid());
    }
    if (from.has_masterid()) {
      set_masterid(from.masterid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_CS_ReqMergeGuild::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_CS_ReqMergeGuild::CopyFrom(const GuildMSG_CS_ReqMergeGuild& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_CS_ReqMergeGuild::IsInitialized() const {

  return true;
}

void GuildMSG_CS_ReqMergeGuild::Swap(GuildMSG_CS_ReqMergeGuild* other) {
  if (other != this) {
    std::swap(recvguildid_, other->recvguildid_);
    std::swap(masterid_, other->masterid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_CS_ReqMergeGuild::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_CS_ReqMergeGuild_descriptor_;
  metadata.reflection = GuildMSG_CS_ReqMergeGuild_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_SC_AckMergeGuild::kResultFieldNumber;
#endif  // !_MSC_VER

GuildMSG_SC_AckMergeGuild::GuildMSG_SC_AckMergeGuild()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_SC_AckMergeGuild::InitAsDefaultInstance() {
}

GuildMSG_SC_AckMergeGuild::GuildMSG_SC_AckMergeGuild(const GuildMSG_SC_AckMergeGuild& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_SC_AckMergeGuild::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_SC_AckMergeGuild::~GuildMSG_SC_AckMergeGuild() {
  SharedDtor();
}

void GuildMSG_SC_AckMergeGuild::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_SC_AckMergeGuild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_SC_AckMergeGuild::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_SC_AckMergeGuild_descriptor_;
}

const GuildMSG_SC_AckMergeGuild& GuildMSG_SC_AckMergeGuild::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_SC_AckMergeGuild* GuildMSG_SC_AckMergeGuild::default_instance_ = NULL;

GuildMSG_SC_AckMergeGuild* GuildMSG_SC_AckMergeGuild::New() const {
  return new GuildMSG_SC_AckMergeGuild;
}

void GuildMSG_SC_AckMergeGuild::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_SC_AckMergeGuild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_SC_AckMergeGuild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_SC_AckMergeGuild::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_SC_AckMergeGuild::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_SC_AckMergeGuild::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_SC_AckMergeGuild* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_SC_AckMergeGuild*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_SC_AckMergeGuild::MergeFrom(const GuildMSG_SC_AckMergeGuild& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_SC_AckMergeGuild::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_SC_AckMergeGuild::CopyFrom(const GuildMSG_SC_AckMergeGuild& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_SC_AckMergeGuild::IsInitialized() const {

  return true;
}

void GuildMSG_SC_AckMergeGuild::Swap(GuildMSG_SC_AckMergeGuild* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_SC_AckMergeGuild::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_SC_AckMergeGuild_descriptor_;
  metadata.reflection = GuildMSG_SC_AckMergeGuild_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GuildMSG_CS_ReqMergeGuildList::GuildMSG_CS_ReqMergeGuildList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_CS_ReqMergeGuildList::InitAsDefaultInstance() {
}

GuildMSG_CS_ReqMergeGuildList::GuildMSG_CS_ReqMergeGuildList(const GuildMSG_CS_ReqMergeGuildList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_CS_ReqMergeGuildList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_CS_ReqMergeGuildList::~GuildMSG_CS_ReqMergeGuildList() {
  SharedDtor();
}

void GuildMSG_CS_ReqMergeGuildList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_CS_ReqMergeGuildList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqMergeGuildList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_CS_ReqMergeGuildList_descriptor_;
}

const GuildMSG_CS_ReqMergeGuildList& GuildMSG_CS_ReqMergeGuildList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_CS_ReqMergeGuildList* GuildMSG_CS_ReqMergeGuildList::default_instance_ = NULL;

GuildMSG_CS_ReqMergeGuildList* GuildMSG_CS_ReqMergeGuildList::New() const {
  return new GuildMSG_CS_ReqMergeGuildList;
}

void GuildMSG_CS_ReqMergeGuildList::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_CS_ReqMergeGuildList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GuildMSG_CS_ReqMergeGuildList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_CS_ReqMergeGuildList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_CS_ReqMergeGuildList::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_CS_ReqMergeGuildList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_CS_ReqMergeGuildList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_CS_ReqMergeGuildList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_CS_ReqMergeGuildList::MergeFrom(const GuildMSG_CS_ReqMergeGuildList& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_CS_ReqMergeGuildList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_CS_ReqMergeGuildList::CopyFrom(const GuildMSG_CS_ReqMergeGuildList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_CS_ReqMergeGuildList::IsInitialized() const {

  return true;
}

void GuildMSG_CS_ReqMergeGuildList::Swap(GuildMSG_CS_ReqMergeGuildList* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_CS_ReqMergeGuildList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_CS_ReqMergeGuildList_descriptor_;
  metadata.reflection = GuildMSG_CS_ReqMergeGuildList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_SC_AckMergeGuildList::kDatalistFieldNumber;
#endif  // !_MSC_VER

GuildMSG_SC_AckMergeGuildList::GuildMSG_SC_AckMergeGuildList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_SC_AckMergeGuildList::InitAsDefaultInstance() {
}

GuildMSG_SC_AckMergeGuildList::GuildMSG_SC_AckMergeGuildList(const GuildMSG_SC_AckMergeGuildList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_SC_AckMergeGuildList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_SC_AckMergeGuildList::~GuildMSG_SC_AckMergeGuildList() {
  SharedDtor();
}

void GuildMSG_SC_AckMergeGuildList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_SC_AckMergeGuildList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_SC_AckMergeGuildList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_SC_AckMergeGuildList_descriptor_;
}

const GuildMSG_SC_AckMergeGuildList& GuildMSG_SC_AckMergeGuildList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_SC_AckMergeGuildList* GuildMSG_SC_AckMergeGuildList::default_instance_ = NULL;

GuildMSG_SC_AckMergeGuildList* GuildMSG_SC_AckMergeGuildList::New() const {
  return new GuildMSG_SC_AckMergeGuildList;
}

void GuildMSG_SC_AckMergeGuildList::Clear() {
  datalist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_SC_AckMergeGuildList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.UniteGuildData datalist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datalist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datalist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_datalist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_SC_AckMergeGuildList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.UniteGuildData datalist = 1;
  for (int i = 0; i < this->datalist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->datalist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_SC_AckMergeGuildList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.UniteGuildData datalist = 1;
  for (int i = 0; i < this->datalist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->datalist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_SC_AckMergeGuildList::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.UniteGuildData datalist = 1;
  total_size += 1 * this->datalist_size();
  for (int i = 0; i < this->datalist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datalist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_SC_AckMergeGuildList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_SC_AckMergeGuildList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_SC_AckMergeGuildList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_SC_AckMergeGuildList::MergeFrom(const GuildMSG_SC_AckMergeGuildList& from) {
  GOOGLE_CHECK_NE(&from, this);
  datalist_.MergeFrom(from.datalist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_SC_AckMergeGuildList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_SC_AckMergeGuildList::CopyFrom(const GuildMSG_SC_AckMergeGuildList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_SC_AckMergeGuildList::IsInitialized() const {

  return true;
}

void GuildMSG_SC_AckMergeGuildList::Swap(GuildMSG_SC_AckMergeGuildList* other) {
  if (other != this) {
    datalist_.Swap(&other->datalist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_SC_AckMergeGuildList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_SC_AckMergeGuildList_descriptor_;
  metadata.reflection = GuildMSG_SC_AckMergeGuildList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_CS_ReqOpreatMergeList::kUniteguildFieldNumber;
#endif  // !_MSC_VER

GuildMSG_CS_ReqOpreatMergeList::GuildMSG_CS_ReqOpreatMergeList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_CS_ReqOpreatMergeList::InitAsDefaultInstance() {
}

GuildMSG_CS_ReqOpreatMergeList::GuildMSG_CS_ReqOpreatMergeList(const GuildMSG_CS_ReqOpreatMergeList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_CS_ReqOpreatMergeList::SharedCtor() {
  _cached_size_ = 0;
  uniteguild_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_CS_ReqOpreatMergeList::~GuildMSG_CS_ReqOpreatMergeList() {
  SharedDtor();
}

void GuildMSG_CS_ReqOpreatMergeList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_CS_ReqOpreatMergeList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqOpreatMergeList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_CS_ReqOpreatMergeList_descriptor_;
}

const GuildMSG_CS_ReqOpreatMergeList& GuildMSG_CS_ReqOpreatMergeList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_CS_ReqOpreatMergeList* GuildMSG_CS_ReqOpreatMergeList::default_instance_ = NULL;

GuildMSG_CS_ReqOpreatMergeList* GuildMSG_CS_ReqOpreatMergeList::New() const {
  return new GuildMSG_CS_ReqOpreatMergeList;
}

void GuildMSG_CS_ReqOpreatMergeList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uniteguild_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_CS_ReqOpreatMergeList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uniteguild = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uniteguild_)));
          set_has_uniteguild();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_CS_ReqOpreatMergeList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uniteguild = 1;
  if (has_uniteguild()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uniteguild(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_CS_ReqOpreatMergeList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uniteguild = 1;
  if (has_uniteguild()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uniteguild(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_CS_ReqOpreatMergeList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uniteguild = 1;
    if (has_uniteguild()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uniteguild());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_CS_ReqOpreatMergeList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_CS_ReqOpreatMergeList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_CS_ReqOpreatMergeList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_CS_ReqOpreatMergeList::MergeFrom(const GuildMSG_CS_ReqOpreatMergeList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uniteguild()) {
      set_uniteguild(from.uniteguild());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_CS_ReqOpreatMergeList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_CS_ReqOpreatMergeList::CopyFrom(const GuildMSG_CS_ReqOpreatMergeList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_CS_ReqOpreatMergeList::IsInitialized() const {

  return true;
}

void GuildMSG_CS_ReqOpreatMergeList::Swap(GuildMSG_CS_ReqOpreatMergeList* other) {
  if (other != this) {
    std::swap(uniteguild_, other->uniteguild_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_CS_ReqOpreatMergeList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_CS_ReqOpreatMergeList_descriptor_;
  metadata.reflection = GuildMSG_CS_ReqOpreatMergeList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_SC_AckOpreatMergeList::kResultFieldNumber;
#endif  // !_MSC_VER

GuildMSG_SC_AckOpreatMergeList::GuildMSG_SC_AckOpreatMergeList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_SC_AckOpreatMergeList::InitAsDefaultInstance() {
}

GuildMSG_SC_AckOpreatMergeList::GuildMSG_SC_AckOpreatMergeList(const GuildMSG_SC_AckOpreatMergeList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_SC_AckOpreatMergeList::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_SC_AckOpreatMergeList::~GuildMSG_SC_AckOpreatMergeList() {
  SharedDtor();
}

void GuildMSG_SC_AckOpreatMergeList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_SC_AckOpreatMergeList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_SC_AckOpreatMergeList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_SC_AckOpreatMergeList_descriptor_;
}

const GuildMSG_SC_AckOpreatMergeList& GuildMSG_SC_AckOpreatMergeList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_SC_AckOpreatMergeList* GuildMSG_SC_AckOpreatMergeList::default_instance_ = NULL;

GuildMSG_SC_AckOpreatMergeList* GuildMSG_SC_AckOpreatMergeList::New() const {
  return new GuildMSG_SC_AckOpreatMergeList;
}

void GuildMSG_SC_AckOpreatMergeList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_SC_AckOpreatMergeList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_SC_AckOpreatMergeList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_SC_AckOpreatMergeList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_SC_AckOpreatMergeList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_SC_AckOpreatMergeList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_SC_AckOpreatMergeList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_SC_AckOpreatMergeList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_SC_AckOpreatMergeList::MergeFrom(const GuildMSG_SC_AckOpreatMergeList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_SC_AckOpreatMergeList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_SC_AckOpreatMergeList::CopyFrom(const GuildMSG_SC_AckOpreatMergeList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_SC_AckOpreatMergeList::IsInitialized() const {

  return true;
}

void GuildMSG_SC_AckOpreatMergeList::Swap(GuildMSG_SC_AckOpreatMergeList* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_SC_AckOpreatMergeList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_SC_AckOpreatMergeList_descriptor_;
  metadata.reflection = GuildMSG_SC_AckOpreatMergeList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GuildMSG_CS_ReqClearMergeList::GuildMSG_CS_ReqClearMergeList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_CS_ReqClearMergeList::InitAsDefaultInstance() {
}

GuildMSG_CS_ReqClearMergeList::GuildMSG_CS_ReqClearMergeList(const GuildMSG_CS_ReqClearMergeList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_CS_ReqClearMergeList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_CS_ReqClearMergeList::~GuildMSG_CS_ReqClearMergeList() {
  SharedDtor();
}

void GuildMSG_CS_ReqClearMergeList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_CS_ReqClearMergeList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqClearMergeList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_CS_ReqClearMergeList_descriptor_;
}

const GuildMSG_CS_ReqClearMergeList& GuildMSG_CS_ReqClearMergeList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_CS_ReqClearMergeList* GuildMSG_CS_ReqClearMergeList::default_instance_ = NULL;

GuildMSG_CS_ReqClearMergeList* GuildMSG_CS_ReqClearMergeList::New() const {
  return new GuildMSG_CS_ReqClearMergeList;
}

void GuildMSG_CS_ReqClearMergeList::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_CS_ReqClearMergeList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GuildMSG_CS_ReqClearMergeList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_CS_ReqClearMergeList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_CS_ReqClearMergeList::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_CS_ReqClearMergeList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_CS_ReqClearMergeList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_CS_ReqClearMergeList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_CS_ReqClearMergeList::MergeFrom(const GuildMSG_CS_ReqClearMergeList& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_CS_ReqClearMergeList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_CS_ReqClearMergeList::CopyFrom(const GuildMSG_CS_ReqClearMergeList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_CS_ReqClearMergeList::IsInitialized() const {

  return true;
}

void GuildMSG_CS_ReqClearMergeList::Swap(GuildMSG_CS_ReqClearMergeList* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_CS_ReqClearMergeList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_CS_ReqClearMergeList_descriptor_;
  metadata.reflection = GuildMSG_CS_ReqClearMergeList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_SC_AckClearMergeList::kResultFieldNumber;
#endif  // !_MSC_VER

GuildMSG_SC_AckClearMergeList::GuildMSG_SC_AckClearMergeList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_SC_AckClearMergeList::InitAsDefaultInstance() {
}

GuildMSG_SC_AckClearMergeList::GuildMSG_SC_AckClearMergeList(const GuildMSG_SC_AckClearMergeList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_SC_AckClearMergeList::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_SC_AckClearMergeList::~GuildMSG_SC_AckClearMergeList() {
  SharedDtor();
}

void GuildMSG_SC_AckClearMergeList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_SC_AckClearMergeList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_SC_AckClearMergeList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_SC_AckClearMergeList_descriptor_;
}

const GuildMSG_SC_AckClearMergeList& GuildMSG_SC_AckClearMergeList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_SC_AckClearMergeList* GuildMSG_SC_AckClearMergeList::default_instance_ = NULL;

GuildMSG_SC_AckClearMergeList* GuildMSG_SC_AckClearMergeList::New() const {
  return new GuildMSG_SC_AckClearMergeList;
}

void GuildMSG_SC_AckClearMergeList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_SC_AckClearMergeList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_SC_AckClearMergeList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_SC_AckClearMergeList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_SC_AckClearMergeList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_SC_AckClearMergeList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_SC_AckClearMergeList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_SC_AckClearMergeList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_SC_AckClearMergeList::MergeFrom(const GuildMSG_SC_AckClearMergeList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_SC_AckClearMergeList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_SC_AckClearMergeList::CopyFrom(const GuildMSG_SC_AckClearMergeList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_SC_AckClearMergeList::IsInitialized() const {

  return true;
}

void GuildMSG_SC_AckClearMergeList::Swap(GuildMSG_SC_AckClearMergeList* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_SC_AckClearMergeList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_SC_AckClearMergeList_descriptor_;
  metadata.reflection = GuildMSG_SC_AckClearMergeList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GuildMSG_CS_ReqCancelMerge::GuildMSG_CS_ReqCancelMerge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_CS_ReqCancelMerge::InitAsDefaultInstance() {
}

GuildMSG_CS_ReqCancelMerge::GuildMSG_CS_ReqCancelMerge(const GuildMSG_CS_ReqCancelMerge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_CS_ReqCancelMerge::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_CS_ReqCancelMerge::~GuildMSG_CS_ReqCancelMerge() {
  SharedDtor();
}

void GuildMSG_CS_ReqCancelMerge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_CS_ReqCancelMerge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqCancelMerge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_CS_ReqCancelMerge_descriptor_;
}

const GuildMSG_CS_ReqCancelMerge& GuildMSG_CS_ReqCancelMerge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_CS_ReqCancelMerge* GuildMSG_CS_ReqCancelMerge::default_instance_ = NULL;

GuildMSG_CS_ReqCancelMerge* GuildMSG_CS_ReqCancelMerge::New() const {
  return new GuildMSG_CS_ReqCancelMerge;
}

void GuildMSG_CS_ReqCancelMerge::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_CS_ReqCancelMerge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GuildMSG_CS_ReqCancelMerge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_CS_ReqCancelMerge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_CS_ReqCancelMerge::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_CS_ReqCancelMerge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_CS_ReqCancelMerge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_CS_ReqCancelMerge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_CS_ReqCancelMerge::MergeFrom(const GuildMSG_CS_ReqCancelMerge& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_CS_ReqCancelMerge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_CS_ReqCancelMerge::CopyFrom(const GuildMSG_CS_ReqCancelMerge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_CS_ReqCancelMerge::IsInitialized() const {

  return true;
}

void GuildMSG_CS_ReqCancelMerge::Swap(GuildMSG_CS_ReqCancelMerge* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_CS_ReqCancelMerge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_CS_ReqCancelMerge_descriptor_;
  metadata.reflection = GuildMSG_CS_ReqCancelMerge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_SC_AckCancelMerge::kResultFieldNumber;
#endif  // !_MSC_VER

GuildMSG_SC_AckCancelMerge::GuildMSG_SC_AckCancelMerge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_SC_AckCancelMerge::InitAsDefaultInstance() {
}

GuildMSG_SC_AckCancelMerge::GuildMSG_SC_AckCancelMerge(const GuildMSG_SC_AckCancelMerge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_SC_AckCancelMerge::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_SC_AckCancelMerge::~GuildMSG_SC_AckCancelMerge() {
  SharedDtor();
}

void GuildMSG_SC_AckCancelMerge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_SC_AckCancelMerge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_SC_AckCancelMerge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_SC_AckCancelMerge_descriptor_;
}

const GuildMSG_SC_AckCancelMerge& GuildMSG_SC_AckCancelMerge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_SC_AckCancelMerge* GuildMSG_SC_AckCancelMerge::default_instance_ = NULL;

GuildMSG_SC_AckCancelMerge* GuildMSG_SC_AckCancelMerge::New() const {
  return new GuildMSG_SC_AckCancelMerge;
}

void GuildMSG_SC_AckCancelMerge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_SC_AckCancelMerge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_SC_AckCancelMerge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_SC_AckCancelMerge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_SC_AckCancelMerge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_SC_AckCancelMerge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_SC_AckCancelMerge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_SC_AckCancelMerge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_SC_AckCancelMerge::MergeFrom(const GuildMSG_SC_AckCancelMerge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_SC_AckCancelMerge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_SC_AckCancelMerge::CopyFrom(const GuildMSG_SC_AckCancelMerge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_SC_AckCancelMerge::IsInitialized() const {

  return true;
}

void GuildMSG_SC_AckCancelMerge::Swap(GuildMSG_SC_AckCancelMerge* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_SC_AckCancelMerge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_SC_AckCancelMerge_descriptor_;
  metadata.reflection = GuildMSG_SC_AckCancelMerge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GuildMSG_CS_ReqShopInfo::GuildMSG_CS_ReqShopInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_CS_ReqShopInfo::InitAsDefaultInstance() {
}

GuildMSG_CS_ReqShopInfo::GuildMSG_CS_ReqShopInfo(const GuildMSG_CS_ReqShopInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_CS_ReqShopInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_CS_ReqShopInfo::~GuildMSG_CS_ReqShopInfo() {
  SharedDtor();
}

void GuildMSG_CS_ReqShopInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_CS_ReqShopInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqShopInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_CS_ReqShopInfo_descriptor_;
}

const GuildMSG_CS_ReqShopInfo& GuildMSG_CS_ReqShopInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_CS_ReqShopInfo* GuildMSG_CS_ReqShopInfo::default_instance_ = NULL;

GuildMSG_CS_ReqShopInfo* GuildMSG_CS_ReqShopInfo::New() const {
  return new GuildMSG_CS_ReqShopInfo;
}

void GuildMSG_CS_ReqShopInfo::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_CS_ReqShopInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GuildMSG_CS_ReqShopInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_CS_ReqShopInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_CS_ReqShopInfo::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_CS_ReqShopInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_CS_ReqShopInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_CS_ReqShopInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_CS_ReqShopInfo::MergeFrom(const GuildMSG_CS_ReqShopInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_CS_ReqShopInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_CS_ReqShopInfo::CopyFrom(const GuildMSG_CS_ReqShopInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_CS_ReqShopInfo::IsInitialized() const {

  return true;
}

void GuildMSG_CS_ReqShopInfo::Swap(GuildMSG_CS_ReqShopInfo* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_CS_ReqShopInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_CS_ReqShopInfo_descriptor_;
  metadata.reflection = GuildMSG_CS_ReqShopInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_SC_AckShopInfo::kResultFieldNumber;
const int GuildMSG_SC_AckShopInfo::kShopinfoFieldNumber;
#endif  // !_MSC_VER

GuildMSG_SC_AckShopInfo::GuildMSG_SC_AckShopInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_SC_AckShopInfo::InitAsDefaultInstance() {
}

GuildMSG_SC_AckShopInfo::GuildMSG_SC_AckShopInfo(const GuildMSG_SC_AckShopInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_SC_AckShopInfo::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_SC_AckShopInfo::~GuildMSG_SC_AckShopInfo() {
  SharedDtor();
}

void GuildMSG_SC_AckShopInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_SC_AckShopInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_SC_AckShopInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_SC_AckShopInfo_descriptor_;
}

const GuildMSG_SC_AckShopInfo& GuildMSG_SC_AckShopInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_SC_AckShopInfo* GuildMSG_SC_AckShopInfo::default_instance_ = NULL;

GuildMSG_SC_AckShopInfo* GuildMSG_SC_AckShopInfo::New() const {
  return new GuildMSG_SC_AckShopInfo;
}

void GuildMSG_SC_AckShopInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  shopinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_SC_AckShopInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_shopinfo;
        break;
      }

      // repeated .proto.message.GuildShopInfo shopinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shopinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shopinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_shopinfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_SC_AckShopInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // repeated .proto.message.GuildShopInfo shopinfo = 2;
  for (int i = 0; i < this->shopinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->shopinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_SC_AckShopInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // repeated .proto.message.GuildShopInfo shopinfo = 2;
  for (int i = 0; i < this->shopinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->shopinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_SC_AckShopInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  // repeated .proto.message.GuildShopInfo shopinfo = 2;
  total_size += 1 * this->shopinfo_size();
  for (int i = 0; i < this->shopinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shopinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_SC_AckShopInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_SC_AckShopInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_SC_AckShopInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_SC_AckShopInfo::MergeFrom(const GuildMSG_SC_AckShopInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  shopinfo_.MergeFrom(from.shopinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_SC_AckShopInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_SC_AckShopInfo::CopyFrom(const GuildMSG_SC_AckShopInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_SC_AckShopInfo::IsInitialized() const {

  return true;
}

void GuildMSG_SC_AckShopInfo::Swap(GuildMSG_SC_AckShopInfo* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    shopinfo_.Swap(&other->shopinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_SC_AckShopInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_SC_AckShopInfo_descriptor_;
  metadata.reflection = GuildMSG_SC_AckShopInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_CS_ReqBuyShopItem::kItemidFieldNumber;
const int GuildMSG_CS_ReqBuyShopItem::kCountsFieldNumber;
#endif  // !_MSC_VER

GuildMSG_CS_ReqBuyShopItem::GuildMSG_CS_ReqBuyShopItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_CS_ReqBuyShopItem::InitAsDefaultInstance() {
}

GuildMSG_CS_ReqBuyShopItem::GuildMSG_CS_ReqBuyShopItem(const GuildMSG_CS_ReqBuyShopItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_CS_ReqBuyShopItem::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  counts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_CS_ReqBuyShopItem::~GuildMSG_CS_ReqBuyShopItem() {
  SharedDtor();
}

void GuildMSG_CS_ReqBuyShopItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_CS_ReqBuyShopItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqBuyShopItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_CS_ReqBuyShopItem_descriptor_;
}

const GuildMSG_CS_ReqBuyShopItem& GuildMSG_CS_ReqBuyShopItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_CS_ReqBuyShopItem* GuildMSG_CS_ReqBuyShopItem::default_instance_ = NULL;

GuildMSG_CS_ReqBuyShopItem* GuildMSG_CS_ReqBuyShopItem::New() const {
  return new GuildMSG_CS_ReqBuyShopItem;
}

void GuildMSG_CS_ReqBuyShopItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    counts_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_CS_ReqBuyShopItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_counts;
        break;
      }

      // optional uint32 counts = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_counts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &counts_)));
          set_has_counts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_CS_ReqBuyShopItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 itemid = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint32 counts = 2;
  if (has_counts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->counts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_CS_ReqBuyShopItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 itemid = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 counts = 2;
  if (has_counts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->counts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_CS_ReqBuyShopItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 counts = 2;
    if (has_counts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->counts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_CS_ReqBuyShopItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_CS_ReqBuyShopItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_CS_ReqBuyShopItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_CS_ReqBuyShopItem::MergeFrom(const GuildMSG_CS_ReqBuyShopItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_counts()) {
      set_counts(from.counts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_CS_ReqBuyShopItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_CS_ReqBuyShopItem::CopyFrom(const GuildMSG_CS_ReqBuyShopItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_CS_ReqBuyShopItem::IsInitialized() const {

  return true;
}

void GuildMSG_CS_ReqBuyShopItem::Swap(GuildMSG_CS_ReqBuyShopItem* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(counts_, other->counts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_CS_ReqBuyShopItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_CS_ReqBuyShopItem_descriptor_;
  metadata.reflection = GuildMSG_CS_ReqBuyShopItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_SC_AckBuyShopItem::kResultFieldNumber;
#endif  // !_MSC_VER

GuildMSG_SC_AckBuyShopItem::GuildMSG_SC_AckBuyShopItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_SC_AckBuyShopItem::InitAsDefaultInstance() {
}

GuildMSG_SC_AckBuyShopItem::GuildMSG_SC_AckBuyShopItem(const GuildMSG_SC_AckBuyShopItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_SC_AckBuyShopItem::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_SC_AckBuyShopItem::~GuildMSG_SC_AckBuyShopItem() {
  SharedDtor();
}

void GuildMSG_SC_AckBuyShopItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_SC_AckBuyShopItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_SC_AckBuyShopItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_SC_AckBuyShopItem_descriptor_;
}

const GuildMSG_SC_AckBuyShopItem& GuildMSG_SC_AckBuyShopItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_SC_AckBuyShopItem* GuildMSG_SC_AckBuyShopItem::default_instance_ = NULL;

GuildMSG_SC_AckBuyShopItem* GuildMSG_SC_AckBuyShopItem::New() const {
  return new GuildMSG_SC_AckBuyShopItem;
}

void GuildMSG_SC_AckBuyShopItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_SC_AckBuyShopItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_SC_AckBuyShopItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_SC_AckBuyShopItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_SC_AckBuyShopItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_SC_AckBuyShopItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_SC_AckBuyShopItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_SC_AckBuyShopItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_SC_AckBuyShopItem::MergeFrom(const GuildMSG_SC_AckBuyShopItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_SC_AckBuyShopItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_SC_AckBuyShopItem::CopyFrom(const GuildMSG_SC_AckBuyShopItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_SC_AckBuyShopItem::IsInitialized() const {

  return true;
}

void GuildMSG_SC_AckBuyShopItem::Swap(GuildMSG_SC_AckBuyShopItem* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_SC_AckBuyShopItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_SC_AckBuyShopItem_descriptor_;
  metadata.reflection = GuildMSG_SC_AckBuyShopItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_CS_ReqChangeName::kNewnameFieldNumber;
#endif  // !_MSC_VER

GuildMSG_CS_ReqChangeName::GuildMSG_CS_ReqChangeName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_CS_ReqChangeName::InitAsDefaultInstance() {
}

GuildMSG_CS_ReqChangeName::GuildMSG_CS_ReqChangeName(const GuildMSG_CS_ReqChangeName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_CS_ReqChangeName::SharedCtor() {
  _cached_size_ = 0;
  newname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_CS_ReqChangeName::~GuildMSG_CS_ReqChangeName() {
  SharedDtor();
}

void GuildMSG_CS_ReqChangeName::SharedDtor() {
  if (newname_ != &::google::protobuf::internal::kEmptyString) {
    delete newname_;
  }
  if (this != default_instance_) {
  }
}

void GuildMSG_CS_ReqChangeName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqChangeName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_CS_ReqChangeName_descriptor_;
}

const GuildMSG_CS_ReqChangeName& GuildMSG_CS_ReqChangeName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_CS_ReqChangeName* GuildMSG_CS_ReqChangeName::default_instance_ = NULL;

GuildMSG_CS_ReqChangeName* GuildMSG_CS_ReqChangeName::New() const {
  return new GuildMSG_CS_ReqChangeName;
}

void GuildMSG_CS_ReqChangeName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_newname()) {
      if (newname_ != &::google::protobuf::internal::kEmptyString) {
        newname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_CS_ReqChangeName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string newname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->newname().data(), this->newname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_CS_ReqChangeName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string newname = 1;
  if (has_newname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newname().data(), this->newname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->newname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_CS_ReqChangeName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string newname = 1;
  if (has_newname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newname().data(), this->newname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->newname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_CS_ReqChangeName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string newname = 1;
    if (has_newname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_CS_ReqChangeName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_CS_ReqChangeName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_CS_ReqChangeName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_CS_ReqChangeName::MergeFrom(const GuildMSG_CS_ReqChangeName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_newname()) {
      set_newname(from.newname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_CS_ReqChangeName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_CS_ReqChangeName::CopyFrom(const GuildMSG_CS_ReqChangeName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_CS_ReqChangeName::IsInitialized() const {

  return true;
}

void GuildMSG_CS_ReqChangeName::Swap(GuildMSG_CS_ReqChangeName* other) {
  if (other != this) {
    std::swap(newname_, other->newname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_CS_ReqChangeName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_CS_ReqChangeName_descriptor_;
  metadata.reflection = GuildMSG_CS_ReqChangeName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_SC_AckChangeName::kResultFieldNumber;
#endif  // !_MSC_VER

GuildMSG_SC_AckChangeName::GuildMSG_SC_AckChangeName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_SC_AckChangeName::InitAsDefaultInstance() {
}

GuildMSG_SC_AckChangeName::GuildMSG_SC_AckChangeName(const GuildMSG_SC_AckChangeName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_SC_AckChangeName::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_SC_AckChangeName::~GuildMSG_SC_AckChangeName() {
  SharedDtor();
}

void GuildMSG_SC_AckChangeName::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_SC_AckChangeName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_SC_AckChangeName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_SC_AckChangeName_descriptor_;
}

const GuildMSG_SC_AckChangeName& GuildMSG_SC_AckChangeName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_SC_AckChangeName* GuildMSG_SC_AckChangeName::default_instance_ = NULL;

GuildMSG_SC_AckChangeName* GuildMSG_SC_AckChangeName::New() const {
  return new GuildMSG_SC_AckChangeName;
}

void GuildMSG_SC_AckChangeName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_SC_AckChangeName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_SC_AckChangeName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_SC_AckChangeName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_SC_AckChangeName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_SC_AckChangeName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_SC_AckChangeName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_SC_AckChangeName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_SC_AckChangeName::MergeFrom(const GuildMSG_SC_AckChangeName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_SC_AckChangeName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_SC_AckChangeName::CopyFrom(const GuildMSG_SC_AckChangeName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_SC_AckChangeName::IsInitialized() const {

  return true;
}

void GuildMSG_SC_AckChangeName::Swap(GuildMSG_SC_AckChangeName* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_SC_AckChangeName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_SC_AckChangeName_descriptor_;
  metadata.reflection = GuildMSG_SC_AckChangeName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_SC_NotifyUpdateGuildInfo::kResultFieldNumber;
const int GuildMSG_SC_NotifyUpdateGuildInfo::kStrValueFieldNumber;
const int GuildMSG_SC_NotifyUpdateGuildInfo::kUValueFieldNumber;
#endif  // !_MSC_VER

GuildMSG_SC_NotifyUpdateGuildInfo::GuildMSG_SC_NotifyUpdateGuildInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_SC_NotifyUpdateGuildInfo::InitAsDefaultInstance() {
}

GuildMSG_SC_NotifyUpdateGuildInfo::GuildMSG_SC_NotifyUpdateGuildInfo(const GuildMSG_SC_NotifyUpdateGuildInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_SC_NotifyUpdateGuildInfo::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  strvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uvalue_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_SC_NotifyUpdateGuildInfo::~GuildMSG_SC_NotifyUpdateGuildInfo() {
  SharedDtor();
}

void GuildMSG_SC_NotifyUpdateGuildInfo::SharedDtor() {
  if (strvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete strvalue_;
  }
  if (this != default_instance_) {
  }
}

void GuildMSG_SC_NotifyUpdateGuildInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_SC_NotifyUpdateGuildInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_SC_NotifyUpdateGuildInfo_descriptor_;
}

const GuildMSG_SC_NotifyUpdateGuildInfo& GuildMSG_SC_NotifyUpdateGuildInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_SC_NotifyUpdateGuildInfo* GuildMSG_SC_NotifyUpdateGuildInfo::default_instance_ = NULL;

GuildMSG_SC_NotifyUpdateGuildInfo* GuildMSG_SC_NotifyUpdateGuildInfo::New() const {
  return new GuildMSG_SC_NotifyUpdateGuildInfo;
}

void GuildMSG_SC_NotifyUpdateGuildInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    if (has_strvalue()) {
      if (strvalue_ != &::google::protobuf::internal::kEmptyString) {
        strvalue_->clear();
      }
    }
    uvalue_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_SC_NotifyUpdateGuildInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strValue;
        break;
      }

      // optional string strValue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strvalue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strvalue().data(), this->strvalue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uValue;
        break;
      }

      // optional uint64 uValue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uvalue_)));
          set_has_uvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_SC_NotifyUpdateGuildInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional string strValue = 2;
  if (has_strvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strvalue().data(), this->strvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->strvalue(), output);
  }

  // optional uint64 uValue = 3;
  if (has_uvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->uvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_SC_NotifyUpdateGuildInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional string strValue = 2;
  if (has_strvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strvalue().data(), this->strvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strvalue(), target);
  }

  // optional uint64 uValue = 3;
  if (has_uvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->uvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_SC_NotifyUpdateGuildInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional string strValue = 2;
    if (has_strvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strvalue());
    }

    // optional uint64 uValue = 3;
    if (has_uvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uvalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_SC_NotifyUpdateGuildInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_SC_NotifyUpdateGuildInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_SC_NotifyUpdateGuildInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_SC_NotifyUpdateGuildInfo::MergeFrom(const GuildMSG_SC_NotifyUpdateGuildInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_strvalue()) {
      set_strvalue(from.strvalue());
    }
    if (from.has_uvalue()) {
      set_uvalue(from.uvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_SC_NotifyUpdateGuildInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_SC_NotifyUpdateGuildInfo::CopyFrom(const GuildMSG_SC_NotifyUpdateGuildInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_SC_NotifyUpdateGuildInfo::IsInitialized() const {

  return true;
}

void GuildMSG_SC_NotifyUpdateGuildInfo::Swap(GuildMSG_SC_NotifyUpdateGuildInfo* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(strvalue_, other->strvalue_);
    std::swap(uvalue_, other->uvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_SC_NotifyUpdateGuildInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_SC_NotifyUpdateGuildInfo_descriptor_;
  metadata.reflection = GuildMSG_SC_NotifyUpdateGuildInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GuildMSG_CS_ReqEnterFort::GuildMSG_CS_ReqEnterFort()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_CS_ReqEnterFort::InitAsDefaultInstance() {
}

GuildMSG_CS_ReqEnterFort::GuildMSG_CS_ReqEnterFort(const GuildMSG_CS_ReqEnterFort& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_CS_ReqEnterFort::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_CS_ReqEnterFort::~GuildMSG_CS_ReqEnterFort() {
  SharedDtor();
}

void GuildMSG_CS_ReqEnterFort::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_CS_ReqEnterFort::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqEnterFort::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_CS_ReqEnterFort_descriptor_;
}

const GuildMSG_CS_ReqEnterFort& GuildMSG_CS_ReqEnterFort::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_CS_ReqEnterFort* GuildMSG_CS_ReqEnterFort::default_instance_ = NULL;

GuildMSG_CS_ReqEnterFort* GuildMSG_CS_ReqEnterFort::New() const {
  return new GuildMSG_CS_ReqEnterFort;
}

void GuildMSG_CS_ReqEnterFort::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_CS_ReqEnterFort::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GuildMSG_CS_ReqEnterFort::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_CS_ReqEnterFort::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_CS_ReqEnterFort::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_CS_ReqEnterFort::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_CS_ReqEnterFort* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_CS_ReqEnterFort*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_CS_ReqEnterFort::MergeFrom(const GuildMSG_CS_ReqEnterFort& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_CS_ReqEnterFort::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_CS_ReqEnterFort::CopyFrom(const GuildMSG_CS_ReqEnterFort& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_CS_ReqEnterFort::IsInitialized() const {

  return true;
}

void GuildMSG_CS_ReqEnterFort::Swap(GuildMSG_CS_ReqEnterFort* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_CS_ReqEnterFort::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_CS_ReqEnterFort_descriptor_;
  metadata.reflection = GuildMSG_CS_ReqEnterFort_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_SC_AckEnterFort::kResultFieldNumber;
const int GuildMSG_SC_AckEnterFort::kMapidFieldNumber;
const int GuildMSG_SC_AckEnterFort::kPtFieldNumber;
const int GuildMSG_SC_AckEnterFort::kDirFieldNumber;
const int GuildMSG_SC_AckEnterFort::kLayerFieldNumber;
#endif  // !_MSC_VER

GuildMSG_SC_AckEnterFort::GuildMSG_SC_AckEnterFort()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_SC_AckEnterFort::InitAsDefaultInstance() {
  pt_ = const_cast< ::proto::message::Point3D*>(&::proto::message::Point3D::default_instance());
}

GuildMSG_SC_AckEnterFort::GuildMSG_SC_AckEnterFort(const GuildMSG_SC_AckEnterFort& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_SC_AckEnterFort::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  mapid_ = 0u;
  pt_ = NULL;
  dir_ = 0;
  layer_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_SC_AckEnterFort::~GuildMSG_SC_AckEnterFort() {
  SharedDtor();
}

void GuildMSG_SC_AckEnterFort::SharedDtor() {
  if (this != default_instance_) {
    delete pt_;
  }
}

void GuildMSG_SC_AckEnterFort::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_SC_AckEnterFort::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_SC_AckEnterFort_descriptor_;
}

const GuildMSG_SC_AckEnterFort& GuildMSG_SC_AckEnterFort::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_SC_AckEnterFort* GuildMSG_SC_AckEnterFort::default_instance_ = NULL;

GuildMSG_SC_AckEnterFort* GuildMSG_SC_AckEnterFort::New() const {
  return new GuildMSG_SC_AckEnterFort;
}

void GuildMSG_SC_AckEnterFort::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    mapid_ = 0u;
    if (has_pt()) {
      if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
    }
    dir_ = 0;
    layer_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_SC_AckEnterFort::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mapid;
        break;
      }

      // required uint32 mapid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pt;
        break;
      }

      // optional .proto.message.Point3D pt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_dir;
        break;
      }

      // optional float dir = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_layer;
        break;
      }

      // optional int32 layer = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_SC_AckEnterFort::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // required uint32 mapid = 2;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mapid(), output);
  }

  // optional .proto.message.Point3D pt = 3;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pt(), output);
  }

  // optional float dir = 4;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->dir(), output);
  }

  // optional int32 layer = 5;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->layer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_SC_AckEnterFort::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // required uint32 mapid = 2;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mapid(), target);
  }

  // optional .proto.message.Point3D pt = 3;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pt(), target);
  }

  // optional float dir = 4;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->dir(), target);
  }

  // optional int32 layer = 5;
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->layer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_SC_AckEnterFort::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // required uint32 mapid = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // optional .proto.message.Point3D pt = 3;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

    // optional float dir = 4;
    if (has_dir()) {
      total_size += 1 + 4;
    }

    // optional int32 layer = 5;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_SC_AckEnterFort::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_SC_AckEnterFort* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_SC_AckEnterFort*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_SC_AckEnterFort::MergeFrom(const GuildMSG_SC_AckEnterFort& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_pt()) {
      mutable_pt()->::proto::message::Point3D::MergeFrom(from.pt());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_layer()) {
      set_layer(from.layer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_SC_AckEnterFort::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_SC_AckEnterFort::CopyFrom(const GuildMSG_SC_AckEnterFort& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_SC_AckEnterFort::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void GuildMSG_SC_AckEnterFort::Swap(GuildMSG_SC_AckEnterFort* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(mapid_, other->mapid_);
    std::swap(pt_, other->pt_);
    std::swap(dir_, other->dir_);
    std::swap(layer_, other->layer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_SC_AckEnterFort::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_SC_AckEnterFort_descriptor_;
  metadata.reflection = GuildMSG_SC_AckEnterFort_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GuildMSG_CS_EnterFortSuccess::GuildMSG_CS_EnterFortSuccess()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_CS_EnterFortSuccess::InitAsDefaultInstance() {
}

GuildMSG_CS_EnterFortSuccess::GuildMSG_CS_EnterFortSuccess(const GuildMSG_CS_EnterFortSuccess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_CS_EnterFortSuccess::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_CS_EnterFortSuccess::~GuildMSG_CS_EnterFortSuccess() {
  SharedDtor();
}

void GuildMSG_CS_EnterFortSuccess::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_CS_EnterFortSuccess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_CS_EnterFortSuccess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_CS_EnterFortSuccess_descriptor_;
}

const GuildMSG_CS_EnterFortSuccess& GuildMSG_CS_EnterFortSuccess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_CS_EnterFortSuccess* GuildMSG_CS_EnterFortSuccess::default_instance_ = NULL;

GuildMSG_CS_EnterFortSuccess* GuildMSG_CS_EnterFortSuccess::New() const {
  return new GuildMSG_CS_EnterFortSuccess;
}

void GuildMSG_CS_EnterFortSuccess::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_CS_EnterFortSuccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GuildMSG_CS_EnterFortSuccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_CS_EnterFortSuccess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_CS_EnterFortSuccess::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_CS_EnterFortSuccess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_CS_EnterFortSuccess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_CS_EnterFortSuccess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_CS_EnterFortSuccess::MergeFrom(const GuildMSG_CS_EnterFortSuccess& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_CS_EnterFortSuccess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_CS_EnterFortSuccess::CopyFrom(const GuildMSG_CS_EnterFortSuccess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_CS_EnterFortSuccess::IsInitialized() const {

  return true;
}

void GuildMSG_CS_EnterFortSuccess::Swap(GuildMSG_CS_EnterFortSuccess* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_CS_EnterFortSuccess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_CS_EnterFortSuccess_descriptor_;
  metadata.reflection = GuildMSG_CS_EnterFortSuccess_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_CS_ReqCancelJoin::kGuildidFieldNumber;
#endif  // !_MSC_VER

GuildMSG_CS_ReqCancelJoin::GuildMSG_CS_ReqCancelJoin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_CS_ReqCancelJoin::InitAsDefaultInstance() {
}

GuildMSG_CS_ReqCancelJoin::GuildMSG_CS_ReqCancelJoin(const GuildMSG_CS_ReqCancelJoin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_CS_ReqCancelJoin::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_CS_ReqCancelJoin::~GuildMSG_CS_ReqCancelJoin() {
  SharedDtor();
}

void GuildMSG_CS_ReqCancelJoin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_CS_ReqCancelJoin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqCancelJoin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_CS_ReqCancelJoin_descriptor_;
}

const GuildMSG_CS_ReqCancelJoin& GuildMSG_CS_ReqCancelJoin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_CS_ReqCancelJoin* GuildMSG_CS_ReqCancelJoin::default_instance_ = NULL;

GuildMSG_CS_ReqCancelJoin* GuildMSG_CS_ReqCancelJoin::New() const {
  return new GuildMSG_CS_ReqCancelJoin;
}

void GuildMSG_CS_ReqCancelJoin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_CS_ReqCancelJoin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 guildid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_CS_ReqCancelJoin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 guildid = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guildid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_CS_ReqCancelJoin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 guildid = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guildid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_CS_ReqCancelJoin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 guildid = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_CS_ReqCancelJoin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_CS_ReqCancelJoin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_CS_ReqCancelJoin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_CS_ReqCancelJoin::MergeFrom(const GuildMSG_CS_ReqCancelJoin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_CS_ReqCancelJoin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_CS_ReqCancelJoin::CopyFrom(const GuildMSG_CS_ReqCancelJoin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_CS_ReqCancelJoin::IsInitialized() const {

  return true;
}

void GuildMSG_CS_ReqCancelJoin::Swap(GuildMSG_CS_ReqCancelJoin* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_CS_ReqCancelJoin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_CS_ReqCancelJoin_descriptor_;
  metadata.reflection = GuildMSG_CS_ReqCancelJoin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_SC_AckCancelJoin::kResultFieldNumber;
#endif  // !_MSC_VER

GuildMSG_SC_AckCancelJoin::GuildMSG_SC_AckCancelJoin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_SC_AckCancelJoin::InitAsDefaultInstance() {
}

GuildMSG_SC_AckCancelJoin::GuildMSG_SC_AckCancelJoin(const GuildMSG_SC_AckCancelJoin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_SC_AckCancelJoin::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_SC_AckCancelJoin::~GuildMSG_SC_AckCancelJoin() {
  SharedDtor();
}

void GuildMSG_SC_AckCancelJoin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_SC_AckCancelJoin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_SC_AckCancelJoin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_SC_AckCancelJoin_descriptor_;
}

const GuildMSG_SC_AckCancelJoin& GuildMSG_SC_AckCancelJoin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_SC_AckCancelJoin* GuildMSG_SC_AckCancelJoin::default_instance_ = NULL;

GuildMSG_SC_AckCancelJoin* GuildMSG_SC_AckCancelJoin::New() const {
  return new GuildMSG_SC_AckCancelJoin;
}

void GuildMSG_SC_AckCancelJoin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_SC_AckCancelJoin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_SC_AckCancelJoin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_SC_AckCancelJoin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_SC_AckCancelJoin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_SC_AckCancelJoin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_SC_AckCancelJoin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_SC_AckCancelJoin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_SC_AckCancelJoin::MergeFrom(const GuildMSG_SC_AckCancelJoin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_SC_AckCancelJoin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_SC_AckCancelJoin::CopyFrom(const GuildMSG_SC_AckCancelJoin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_SC_AckCancelJoin::IsInitialized() const {

  return true;
}

void GuildMSG_SC_AckCancelJoin::Swap(GuildMSG_SC_AckCancelJoin* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_SC_AckCancelJoin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_SC_AckCancelJoin_descriptor_;
  metadata.reflection = GuildMSG_SC_AckCancelJoin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GuildMSG_CS_ReqEnterGuildIntruder::GuildMSG_CS_ReqEnterGuildIntruder()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_CS_ReqEnterGuildIntruder::InitAsDefaultInstance() {
}

GuildMSG_CS_ReqEnterGuildIntruder::GuildMSG_CS_ReqEnterGuildIntruder(const GuildMSG_CS_ReqEnterGuildIntruder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_CS_ReqEnterGuildIntruder::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_CS_ReqEnterGuildIntruder::~GuildMSG_CS_ReqEnterGuildIntruder() {
  SharedDtor();
}

void GuildMSG_CS_ReqEnterGuildIntruder::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_CS_ReqEnterGuildIntruder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqEnterGuildIntruder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_CS_ReqEnterGuildIntruder_descriptor_;
}

const GuildMSG_CS_ReqEnterGuildIntruder& GuildMSG_CS_ReqEnterGuildIntruder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_CS_ReqEnterGuildIntruder* GuildMSG_CS_ReqEnterGuildIntruder::default_instance_ = NULL;

GuildMSG_CS_ReqEnterGuildIntruder* GuildMSG_CS_ReqEnterGuildIntruder::New() const {
  return new GuildMSG_CS_ReqEnterGuildIntruder;
}

void GuildMSG_CS_ReqEnterGuildIntruder::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_CS_ReqEnterGuildIntruder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GuildMSG_CS_ReqEnterGuildIntruder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_CS_ReqEnterGuildIntruder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_CS_ReqEnterGuildIntruder::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_CS_ReqEnterGuildIntruder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_CS_ReqEnterGuildIntruder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_CS_ReqEnterGuildIntruder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_CS_ReqEnterGuildIntruder::MergeFrom(const GuildMSG_CS_ReqEnterGuildIntruder& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_CS_ReqEnterGuildIntruder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_CS_ReqEnterGuildIntruder::CopyFrom(const GuildMSG_CS_ReqEnterGuildIntruder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_CS_ReqEnterGuildIntruder::IsInitialized() const {

  return true;
}

void GuildMSG_CS_ReqEnterGuildIntruder::Swap(GuildMSG_CS_ReqEnterGuildIntruder* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_CS_ReqEnterGuildIntruder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_CS_ReqEnterGuildIntruder_descriptor_;
  metadata.reflection = GuildMSG_CS_ReqEnterGuildIntruder_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GuildMSG_CS_ReqEnterGuildIntruderOK::GuildMSG_CS_ReqEnterGuildIntruderOK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_CS_ReqEnterGuildIntruderOK::InitAsDefaultInstance() {
}

GuildMSG_CS_ReqEnterGuildIntruderOK::GuildMSG_CS_ReqEnterGuildIntruderOK(const GuildMSG_CS_ReqEnterGuildIntruderOK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_CS_ReqEnterGuildIntruderOK::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_CS_ReqEnterGuildIntruderOK::~GuildMSG_CS_ReqEnterGuildIntruderOK() {
  SharedDtor();
}

void GuildMSG_CS_ReqEnterGuildIntruderOK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_CS_ReqEnterGuildIntruderOK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqEnterGuildIntruderOK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_CS_ReqEnterGuildIntruderOK_descriptor_;
}

const GuildMSG_CS_ReqEnterGuildIntruderOK& GuildMSG_CS_ReqEnterGuildIntruderOK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_CS_ReqEnterGuildIntruderOK* GuildMSG_CS_ReqEnterGuildIntruderOK::default_instance_ = NULL;

GuildMSG_CS_ReqEnterGuildIntruderOK* GuildMSG_CS_ReqEnterGuildIntruderOK::New() const {
  return new GuildMSG_CS_ReqEnterGuildIntruderOK;
}

void GuildMSG_CS_ReqEnterGuildIntruderOK::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_CS_ReqEnterGuildIntruderOK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GuildMSG_CS_ReqEnterGuildIntruderOK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_CS_ReqEnterGuildIntruderOK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_CS_ReqEnterGuildIntruderOK::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_CS_ReqEnterGuildIntruderOK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_CS_ReqEnterGuildIntruderOK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_CS_ReqEnterGuildIntruderOK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_CS_ReqEnterGuildIntruderOK::MergeFrom(const GuildMSG_CS_ReqEnterGuildIntruderOK& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_CS_ReqEnterGuildIntruderOK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_CS_ReqEnterGuildIntruderOK::CopyFrom(const GuildMSG_CS_ReqEnterGuildIntruderOK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_CS_ReqEnterGuildIntruderOK::IsInitialized() const {

  return true;
}

void GuildMSG_CS_ReqEnterGuildIntruderOK::Swap(GuildMSG_CS_ReqEnterGuildIntruderOK* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_CS_ReqEnterGuildIntruderOK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_CS_ReqEnterGuildIntruderOK_descriptor_;
  metadata.reflection = GuildMSG_CS_ReqEnterGuildIntruderOK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GuildMSG_CS_ReqLeaveGuildIntruder::GuildMSG_CS_ReqLeaveGuildIntruder()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_CS_ReqLeaveGuildIntruder::InitAsDefaultInstance() {
}

GuildMSG_CS_ReqLeaveGuildIntruder::GuildMSG_CS_ReqLeaveGuildIntruder(const GuildMSG_CS_ReqLeaveGuildIntruder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_CS_ReqLeaveGuildIntruder::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_CS_ReqLeaveGuildIntruder::~GuildMSG_CS_ReqLeaveGuildIntruder() {
  SharedDtor();
}

void GuildMSG_CS_ReqLeaveGuildIntruder::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_CS_ReqLeaveGuildIntruder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqLeaveGuildIntruder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_CS_ReqLeaveGuildIntruder_descriptor_;
}

const GuildMSG_CS_ReqLeaveGuildIntruder& GuildMSG_CS_ReqLeaveGuildIntruder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_CS_ReqLeaveGuildIntruder* GuildMSG_CS_ReqLeaveGuildIntruder::default_instance_ = NULL;

GuildMSG_CS_ReqLeaveGuildIntruder* GuildMSG_CS_ReqLeaveGuildIntruder::New() const {
  return new GuildMSG_CS_ReqLeaveGuildIntruder;
}

void GuildMSG_CS_ReqLeaveGuildIntruder::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_CS_ReqLeaveGuildIntruder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GuildMSG_CS_ReqLeaveGuildIntruder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_CS_ReqLeaveGuildIntruder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_CS_ReqLeaveGuildIntruder::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_CS_ReqLeaveGuildIntruder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_CS_ReqLeaveGuildIntruder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_CS_ReqLeaveGuildIntruder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_CS_ReqLeaveGuildIntruder::MergeFrom(const GuildMSG_CS_ReqLeaveGuildIntruder& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_CS_ReqLeaveGuildIntruder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_CS_ReqLeaveGuildIntruder::CopyFrom(const GuildMSG_CS_ReqLeaveGuildIntruder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_CS_ReqLeaveGuildIntruder::IsInitialized() const {

  return true;
}

void GuildMSG_CS_ReqLeaveGuildIntruder::Swap(GuildMSG_CS_ReqLeaveGuildIntruder* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_CS_ReqLeaveGuildIntruder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_CS_ReqLeaveGuildIntruder_descriptor_;
  metadata.reflection = GuildMSG_CS_ReqLeaveGuildIntruder_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_SC_AckEnterGuildIntruder::kMapidFieldNumber;
const int GuildMSG_SC_AckEnterGuildIntruder::kPtFieldNumber;
const int GuildMSG_SC_AckEnterGuildIntruder::kDirFieldNumber;
const int GuildMSG_SC_AckEnterGuildIntruder::kLayerFieldNumber;
#endif  // !_MSC_VER

GuildMSG_SC_AckEnterGuildIntruder::GuildMSG_SC_AckEnterGuildIntruder()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_SC_AckEnterGuildIntruder::InitAsDefaultInstance() {
  pt_ = const_cast< ::proto::message::Point3D*>(&::proto::message::Point3D::default_instance());
}

GuildMSG_SC_AckEnterGuildIntruder::GuildMSG_SC_AckEnterGuildIntruder(const GuildMSG_SC_AckEnterGuildIntruder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_SC_AckEnterGuildIntruder::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0u;
  pt_ = NULL;
  dir_ = 0;
  layer_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_SC_AckEnterGuildIntruder::~GuildMSG_SC_AckEnterGuildIntruder() {
  SharedDtor();
}

void GuildMSG_SC_AckEnterGuildIntruder::SharedDtor() {
  if (this != default_instance_) {
    delete pt_;
  }
}

void GuildMSG_SC_AckEnterGuildIntruder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_SC_AckEnterGuildIntruder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_SC_AckEnterGuildIntruder_descriptor_;
}

const GuildMSG_SC_AckEnterGuildIntruder& GuildMSG_SC_AckEnterGuildIntruder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_SC_AckEnterGuildIntruder* GuildMSG_SC_AckEnterGuildIntruder::default_instance_ = NULL;

GuildMSG_SC_AckEnterGuildIntruder* GuildMSG_SC_AckEnterGuildIntruder::New() const {
  return new GuildMSG_SC_AckEnterGuildIntruder;
}

void GuildMSG_SC_AckEnterGuildIntruder::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0u;
    if (has_pt()) {
      if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
    }
    dir_ = 0;
    layer_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_SC_AckEnterGuildIntruder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pt;
        break;
      }

      // optional .proto.message.Point3D pt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_dir;
        break;
      }

      // optional float dir = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_layer;
        break;
      }

      // optional int32 layer = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_SC_AckEnterGuildIntruder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mapid = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mapid(), output);
  }

  // optional .proto.message.Point3D pt = 2;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pt(), output);
  }

  // optional float dir = 3;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->dir(), output);
  }

  // optional int32 layer = 4;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->layer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_SC_AckEnterGuildIntruder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mapid = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mapid(), target);
  }

  // optional .proto.message.Point3D pt = 2;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pt(), target);
  }

  // optional float dir = 3;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->dir(), target);
  }

  // optional int32 layer = 4;
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->layer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_SC_AckEnterGuildIntruder::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mapid = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // optional .proto.message.Point3D pt = 2;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

    // optional float dir = 3;
    if (has_dir()) {
      total_size += 1 + 4;
    }

    // optional int32 layer = 4;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_SC_AckEnterGuildIntruder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_SC_AckEnterGuildIntruder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_SC_AckEnterGuildIntruder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_SC_AckEnterGuildIntruder::MergeFrom(const GuildMSG_SC_AckEnterGuildIntruder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_pt()) {
      mutable_pt()->::proto::message::Point3D::MergeFrom(from.pt());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_layer()) {
      set_layer(from.layer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_SC_AckEnterGuildIntruder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_SC_AckEnterGuildIntruder::CopyFrom(const GuildMSG_SC_AckEnterGuildIntruder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_SC_AckEnterGuildIntruder::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GuildMSG_SC_AckEnterGuildIntruder::Swap(GuildMSG_SC_AckEnterGuildIntruder* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(pt_, other->pt_);
    std::swap(dir_, other->dir_);
    std::swap(layer_, other->layer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_SC_AckEnterGuildIntruder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_SC_AckEnterGuildIntruder_descriptor_;
  metadata.reflection = GuildMSG_SC_AckEnterGuildIntruder_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GuildMSG_SC_AckGuildIntruderEnd::GuildMSG_SC_AckGuildIntruderEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_SC_AckGuildIntruderEnd::InitAsDefaultInstance() {
}

GuildMSG_SC_AckGuildIntruderEnd::GuildMSG_SC_AckGuildIntruderEnd(const GuildMSG_SC_AckGuildIntruderEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_SC_AckGuildIntruderEnd::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_SC_AckGuildIntruderEnd::~GuildMSG_SC_AckGuildIntruderEnd() {
  SharedDtor();
}

void GuildMSG_SC_AckGuildIntruderEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_SC_AckGuildIntruderEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_SC_AckGuildIntruderEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_SC_AckGuildIntruderEnd_descriptor_;
}

const GuildMSG_SC_AckGuildIntruderEnd& GuildMSG_SC_AckGuildIntruderEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_SC_AckGuildIntruderEnd* GuildMSG_SC_AckGuildIntruderEnd::default_instance_ = NULL;

GuildMSG_SC_AckGuildIntruderEnd* GuildMSG_SC_AckGuildIntruderEnd::New() const {
  return new GuildMSG_SC_AckGuildIntruderEnd;
}

void GuildMSG_SC_AckGuildIntruderEnd::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_SC_AckGuildIntruderEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GuildMSG_SC_AckGuildIntruderEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_SC_AckGuildIntruderEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_SC_AckGuildIntruderEnd::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_SC_AckGuildIntruderEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_SC_AckGuildIntruderEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_SC_AckGuildIntruderEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_SC_AckGuildIntruderEnd::MergeFrom(const GuildMSG_SC_AckGuildIntruderEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_SC_AckGuildIntruderEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_SC_AckGuildIntruderEnd::CopyFrom(const GuildMSG_SC_AckGuildIntruderEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_SC_AckGuildIntruderEnd::IsInitialized() const {

  return true;
}

void GuildMSG_SC_AckGuildIntruderEnd::Swap(GuildMSG_SC_AckGuildIntruderEnd* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_SC_AckGuildIntruderEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_SC_AckGuildIntruderEnd_descriptor_;
  metadata.reflection = GuildMSG_SC_AckGuildIntruderEnd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_SC_AckGuildIntruderInit::kSurplustimeFieldNumber;
const int GuildMSG_SC_AckGuildIntruderInit::kTimesFieldNumber;
const int GuildMSG_SC_AckGuildIntruderInit::kRewardPercentFieldNumber;
const int GuildMSG_SC_AckGuildIntruderInit::kChestListFieldNumber;
#endif  // !_MSC_VER

GuildMSG_SC_AckGuildIntruderInit::GuildMSG_SC_AckGuildIntruderInit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_SC_AckGuildIntruderInit::InitAsDefaultInstance() {
}

GuildMSG_SC_AckGuildIntruderInit::GuildMSG_SC_AckGuildIntruderInit(const GuildMSG_SC_AckGuildIntruderInit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_SC_AckGuildIntruderInit::SharedCtor() {
  _cached_size_ = 0;
  surplustime_ = 0;
  times_ = 0;
  reward_percent_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_SC_AckGuildIntruderInit::~GuildMSG_SC_AckGuildIntruderInit() {
  SharedDtor();
}

void GuildMSG_SC_AckGuildIntruderInit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_SC_AckGuildIntruderInit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_SC_AckGuildIntruderInit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_SC_AckGuildIntruderInit_descriptor_;
}

const GuildMSG_SC_AckGuildIntruderInit& GuildMSG_SC_AckGuildIntruderInit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_SC_AckGuildIntruderInit* GuildMSG_SC_AckGuildIntruderInit::default_instance_ = NULL;

GuildMSG_SC_AckGuildIntruderInit* GuildMSG_SC_AckGuildIntruderInit::New() const {
  return new GuildMSG_SC_AckGuildIntruderInit;
}

void GuildMSG_SC_AckGuildIntruderInit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    surplustime_ = 0;
    times_ = 0;
    reward_percent_ = 0;
  }
  chest_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_SC_AckGuildIntruderInit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 surplustime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &surplustime_)));
          set_has_surplustime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_times;
        break;
      }

      // optional int32 times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reward_percent;
        break;
      }

      // optional int32 reward_percent = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_percent_)));
          set_has_reward_percent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_chest_list;
        break;
      }

      // repeated .proto.message.IDTimes chest_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chest_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chest_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_chest_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_SC_AckGuildIntruderInit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 surplustime = 1;
  if (has_surplustime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->surplustime(), output);
  }

  // optional int32 times = 2;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->times(), output);
  }

  // optional int32 reward_percent = 3;
  if (has_reward_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->reward_percent(), output);
  }

  // repeated .proto.message.IDTimes chest_list = 4;
  for (int i = 0; i < this->chest_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->chest_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_SC_AckGuildIntruderInit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 surplustime = 1;
  if (has_surplustime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->surplustime(), target);
  }

  // optional int32 times = 2;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->times(), target);
  }

  // optional int32 reward_percent = 3;
  if (has_reward_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->reward_percent(), target);
  }

  // repeated .proto.message.IDTimes chest_list = 4;
  for (int i = 0; i < this->chest_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->chest_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_SC_AckGuildIntruderInit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 surplustime = 1;
    if (has_surplustime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->surplustime());
    }

    // optional int32 times = 2;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

    // optional int32 reward_percent = 3;
    if (has_reward_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_percent());
    }

  }
  // repeated .proto.message.IDTimes chest_list = 4;
  total_size += 1 * this->chest_list_size();
  for (int i = 0; i < this->chest_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chest_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_SC_AckGuildIntruderInit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_SC_AckGuildIntruderInit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_SC_AckGuildIntruderInit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_SC_AckGuildIntruderInit::MergeFrom(const GuildMSG_SC_AckGuildIntruderInit& from) {
  GOOGLE_CHECK_NE(&from, this);
  chest_list_.MergeFrom(from.chest_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_surplustime()) {
      set_surplustime(from.surplustime());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_reward_percent()) {
      set_reward_percent(from.reward_percent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_SC_AckGuildIntruderInit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_SC_AckGuildIntruderInit::CopyFrom(const GuildMSG_SC_AckGuildIntruderInit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_SC_AckGuildIntruderInit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GuildMSG_SC_AckGuildIntruderInit::Swap(GuildMSG_SC_AckGuildIntruderInit* other) {
  if (other != this) {
    std::swap(surplustime_, other->surplustime_);
    std::swap(times_, other->times_);
    std::swap(reward_percent_, other->reward_percent_);
    chest_list_.Swap(&other->chest_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_SC_AckGuildIntruderInit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_SC_AckGuildIntruderInit_descriptor_;
  metadata.reflection = GuildMSG_SC_AckGuildIntruderInit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_SC_AckGuildIntruderTime::kTimesFieldNumber;
#endif  // !_MSC_VER

GuildMSG_SC_AckGuildIntruderTime::GuildMSG_SC_AckGuildIntruderTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_SC_AckGuildIntruderTime::InitAsDefaultInstance() {
}

GuildMSG_SC_AckGuildIntruderTime::GuildMSG_SC_AckGuildIntruderTime(const GuildMSG_SC_AckGuildIntruderTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_SC_AckGuildIntruderTime::SharedCtor() {
  _cached_size_ = 0;
  times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_SC_AckGuildIntruderTime::~GuildMSG_SC_AckGuildIntruderTime() {
  SharedDtor();
}

void GuildMSG_SC_AckGuildIntruderTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_SC_AckGuildIntruderTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_SC_AckGuildIntruderTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_SC_AckGuildIntruderTime_descriptor_;
}

const GuildMSG_SC_AckGuildIntruderTime& GuildMSG_SC_AckGuildIntruderTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_SC_AckGuildIntruderTime* GuildMSG_SC_AckGuildIntruderTime::default_instance_ = NULL;

GuildMSG_SC_AckGuildIntruderTime* GuildMSG_SC_AckGuildIntruderTime::New() const {
  return new GuildMSG_SC_AckGuildIntruderTime;
}

void GuildMSG_SC_AckGuildIntruderTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    times_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_SC_AckGuildIntruderTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 times = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_SC_AckGuildIntruderTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 times = 1;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_SC_AckGuildIntruderTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 times = 1;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_SC_AckGuildIntruderTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 times = 1;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_SC_AckGuildIntruderTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_SC_AckGuildIntruderTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_SC_AckGuildIntruderTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_SC_AckGuildIntruderTime::MergeFrom(const GuildMSG_SC_AckGuildIntruderTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_times()) {
      set_times(from.times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_SC_AckGuildIntruderTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_SC_AckGuildIntruderTime::CopyFrom(const GuildMSG_SC_AckGuildIntruderTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_SC_AckGuildIntruderTime::IsInitialized() const {

  return true;
}

void GuildMSG_SC_AckGuildIntruderTime::Swap(GuildMSG_SC_AckGuildIntruderTime* other) {
  if (other != this) {
    std::swap(times_, other->times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_SC_AckGuildIntruderTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_SC_AckGuildIntruderTime_descriptor_;
  metadata.reflection = GuildMSG_SC_AckGuildIntruderTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_SC_GuildIntruderReward::kRewardPercentFieldNumber;
#endif  // !_MSC_VER

GuildMSG_SC_GuildIntruderReward::GuildMSG_SC_GuildIntruderReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_SC_GuildIntruderReward::InitAsDefaultInstance() {
}

GuildMSG_SC_GuildIntruderReward::GuildMSG_SC_GuildIntruderReward(const GuildMSG_SC_GuildIntruderReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_SC_GuildIntruderReward::SharedCtor() {
  _cached_size_ = 0;
  reward_percent_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_SC_GuildIntruderReward::~GuildMSG_SC_GuildIntruderReward() {
  SharedDtor();
}

void GuildMSG_SC_GuildIntruderReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_SC_GuildIntruderReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_SC_GuildIntruderReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_SC_GuildIntruderReward_descriptor_;
}

const GuildMSG_SC_GuildIntruderReward& GuildMSG_SC_GuildIntruderReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_SC_GuildIntruderReward* GuildMSG_SC_GuildIntruderReward::default_instance_ = NULL;

GuildMSG_SC_GuildIntruderReward* GuildMSG_SC_GuildIntruderReward::New() const {
  return new GuildMSG_SC_GuildIntruderReward;
}

void GuildMSG_SC_GuildIntruderReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reward_percent_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_SC_GuildIntruderReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 reward_percent = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_percent_)));
          set_has_reward_percent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_SC_GuildIntruderReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 reward_percent = 1;
  if (has_reward_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reward_percent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_SC_GuildIntruderReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 reward_percent = 1;
  if (has_reward_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->reward_percent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_SC_GuildIntruderReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 reward_percent = 1;
    if (has_reward_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_percent());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_SC_GuildIntruderReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_SC_GuildIntruderReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_SC_GuildIntruderReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_SC_GuildIntruderReward::MergeFrom(const GuildMSG_SC_GuildIntruderReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reward_percent()) {
      set_reward_percent(from.reward_percent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_SC_GuildIntruderReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_SC_GuildIntruderReward::CopyFrom(const GuildMSG_SC_GuildIntruderReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_SC_GuildIntruderReward::IsInitialized() const {

  return true;
}

void GuildMSG_SC_GuildIntruderReward::Swap(GuildMSG_SC_GuildIntruderReward* other) {
  if (other != this) {
    std::swap(reward_percent_, other->reward_percent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_SC_GuildIntruderReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_SC_GuildIntruderReward_descriptor_;
  metadata.reflection = GuildMSG_SC_GuildIntruderReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_SC_NotifyStopImpeachment::kResultFieldNumber;
const int GuildMSG_SC_NotifyStopImpeachment::kOwnnernameFieldNumber;
#endif  // !_MSC_VER

GuildMSG_SC_NotifyStopImpeachment::GuildMSG_SC_NotifyStopImpeachment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_SC_NotifyStopImpeachment::InitAsDefaultInstance() {
}

GuildMSG_SC_NotifyStopImpeachment::GuildMSG_SC_NotifyStopImpeachment(const GuildMSG_SC_NotifyStopImpeachment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_SC_NotifyStopImpeachment::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ownnername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_SC_NotifyStopImpeachment::~GuildMSG_SC_NotifyStopImpeachment() {
  SharedDtor();
}

void GuildMSG_SC_NotifyStopImpeachment::SharedDtor() {
  if (ownnername_ != &::google::protobuf::internal::kEmptyString) {
    delete ownnername_;
  }
  if (this != default_instance_) {
  }
}

void GuildMSG_SC_NotifyStopImpeachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_SC_NotifyStopImpeachment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_SC_NotifyStopImpeachment_descriptor_;
}

const GuildMSG_SC_NotifyStopImpeachment& GuildMSG_SC_NotifyStopImpeachment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_SC_NotifyStopImpeachment* GuildMSG_SC_NotifyStopImpeachment::default_instance_ = NULL;

GuildMSG_SC_NotifyStopImpeachment* GuildMSG_SC_NotifyStopImpeachment::New() const {
  return new GuildMSG_SC_NotifyStopImpeachment;
}

void GuildMSG_SC_NotifyStopImpeachment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    if (has_ownnername()) {
      if (ownnername_ != &::google::protobuf::internal::kEmptyString) {
        ownnername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_SC_NotifyStopImpeachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ownnername;
        break;
      }

      // optional string ownnername = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ownnername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ownnername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ownnername().data(), this->ownnername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_SC_NotifyStopImpeachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional string ownnername = 2;
  if (has_ownnername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ownnername().data(), this->ownnername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ownnername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_SC_NotifyStopImpeachment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional string ownnername = 2;
  if (has_ownnername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ownnername().data(), this->ownnername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ownnername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_SC_NotifyStopImpeachment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional string ownnername = 2;
    if (has_ownnername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ownnername());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_SC_NotifyStopImpeachment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_SC_NotifyStopImpeachment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_SC_NotifyStopImpeachment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_SC_NotifyStopImpeachment::MergeFrom(const GuildMSG_SC_NotifyStopImpeachment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_ownnername()) {
      set_ownnername(from.ownnername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_SC_NotifyStopImpeachment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_SC_NotifyStopImpeachment::CopyFrom(const GuildMSG_SC_NotifyStopImpeachment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_SC_NotifyStopImpeachment::IsInitialized() const {

  return true;
}

void GuildMSG_SC_NotifyStopImpeachment::Swap(GuildMSG_SC_NotifyStopImpeachment* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(ownnername_, other->ownnername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_SC_NotifyStopImpeachment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_SC_NotifyStopImpeachment_descriptor_;
  metadata.reflection = GuildMSG_SC_NotifyStopImpeachment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_SC_NotifyContext::kContextidFieldNumber;
const int GuildMSG_SC_NotifyContext::kContextparFieldNumber;
#endif  // !_MSC_VER

GuildMSG_SC_NotifyContext::GuildMSG_SC_NotifyContext()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_SC_NotifyContext::InitAsDefaultInstance() {
}

GuildMSG_SC_NotifyContext::GuildMSG_SC_NotifyContext(const GuildMSG_SC_NotifyContext& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_SC_NotifyContext::SharedCtor() {
  _cached_size_ = 0;
  contextid_ = 0u;
  contextpar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_SC_NotifyContext::~GuildMSG_SC_NotifyContext() {
  SharedDtor();
}

void GuildMSG_SC_NotifyContext::SharedDtor() {
  if (contextpar_ != &::google::protobuf::internal::kEmptyString) {
    delete contextpar_;
  }
  if (this != default_instance_) {
  }
}

void GuildMSG_SC_NotifyContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_SC_NotifyContext::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_SC_NotifyContext_descriptor_;
}

const GuildMSG_SC_NotifyContext& GuildMSG_SC_NotifyContext::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_SC_NotifyContext* GuildMSG_SC_NotifyContext::default_instance_ = NULL;

GuildMSG_SC_NotifyContext* GuildMSG_SC_NotifyContext::New() const {
  return new GuildMSG_SC_NotifyContext;
}

void GuildMSG_SC_NotifyContext::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    contextid_ = 0u;
    if (has_contextpar()) {
      if (contextpar_ != &::google::protobuf::internal::kEmptyString) {
        contextpar_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_SC_NotifyContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 contextid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contextid_)));
          set_has_contextid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_contextpar;
        break;
      }

      // optional string contextpar = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contextpar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contextpar()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contextpar().data(), this->contextpar().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_SC_NotifyContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 contextid = 1;
  if (has_contextid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->contextid(), output);
  }

  // optional string contextpar = 2;
  if (has_contextpar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contextpar().data(), this->contextpar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->contextpar(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_SC_NotifyContext::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 contextid = 1;
  if (has_contextid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->contextid(), target);
  }

  // optional string contextpar = 2;
  if (has_contextpar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contextpar().data(), this->contextpar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->contextpar(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_SC_NotifyContext::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 contextid = 1;
    if (has_contextid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->contextid());
    }

    // optional string contextpar = 2;
    if (has_contextpar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contextpar());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_SC_NotifyContext::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_SC_NotifyContext* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_SC_NotifyContext*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_SC_NotifyContext::MergeFrom(const GuildMSG_SC_NotifyContext& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_contextid()) {
      set_contextid(from.contextid());
    }
    if (from.has_contextpar()) {
      set_contextpar(from.contextpar());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_SC_NotifyContext::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_SC_NotifyContext::CopyFrom(const GuildMSG_SC_NotifyContext& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_SC_NotifyContext::IsInitialized() const {

  return true;
}

void GuildMSG_SC_NotifyContext::Swap(GuildMSG_SC_NotifyContext* other) {
  if (other != this) {
    std::swap(contextid_, other->contextid_);
    std::swap(contextpar_, other->contextpar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_SC_NotifyContext::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_SC_NotifyContext_descriptor_;
  metadata.reflection = GuildMSG_SC_NotifyContext_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_CS_ReqSetBossOpen::kIsTodayFieldNumber;
const int GuildMSG_CS_ReqSetBossOpen::kHourFieldNumber;
const int GuildMSG_CS_ReqSetBossOpen::kMinuFieldNumber;
#endif  // !_MSC_VER

GuildMSG_CS_ReqSetBossOpen::GuildMSG_CS_ReqSetBossOpen()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_CS_ReqSetBossOpen::InitAsDefaultInstance() {
}

GuildMSG_CS_ReqSetBossOpen::GuildMSG_CS_ReqSetBossOpen(const GuildMSG_CS_ReqSetBossOpen& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_CS_ReqSetBossOpen::SharedCtor() {
  _cached_size_ = 0;
  istoday_ = 0u;
  hour_ = 0u;
  minu_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_CS_ReqSetBossOpen::~GuildMSG_CS_ReqSetBossOpen() {
  SharedDtor();
}

void GuildMSG_CS_ReqSetBossOpen::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_CS_ReqSetBossOpen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqSetBossOpen::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_CS_ReqSetBossOpen_descriptor_;
}

const GuildMSG_CS_ReqSetBossOpen& GuildMSG_CS_ReqSetBossOpen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_CS_ReqSetBossOpen* GuildMSG_CS_ReqSetBossOpen::default_instance_ = NULL;

GuildMSG_CS_ReqSetBossOpen* GuildMSG_CS_ReqSetBossOpen::New() const {
  return new GuildMSG_CS_ReqSetBossOpen;
}

void GuildMSG_CS_ReqSetBossOpen::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    istoday_ = 0u;
    hour_ = 0u;
    minu_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_CS_ReqSetBossOpen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 isToday = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &istoday_)));
          set_has_istoday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hour;
        break;
      }

      // optional uint32 hour = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hour_)));
          set_has_hour();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_minu;
        break;
      }

      // optional uint32 minu = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minu_)));
          set_has_minu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_CS_ReqSetBossOpen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 isToday = 1;
  if (has_istoday()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->istoday(), output);
  }

  // optional uint32 hour = 2;
  if (has_hour()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hour(), output);
  }

  // optional uint32 minu = 3;
  if (has_minu()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->minu(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_CS_ReqSetBossOpen::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 isToday = 1;
  if (has_istoday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->istoday(), target);
  }

  // optional uint32 hour = 2;
  if (has_hour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hour(), target);
  }

  // optional uint32 minu = 3;
  if (has_minu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->minu(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_CS_ReqSetBossOpen::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 isToday = 1;
    if (has_istoday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->istoday());
    }

    // optional uint32 hour = 2;
    if (has_hour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hour());
    }

    // optional uint32 minu = 3;
    if (has_minu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minu());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_CS_ReqSetBossOpen::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_CS_ReqSetBossOpen* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_CS_ReqSetBossOpen*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_CS_ReqSetBossOpen::MergeFrom(const GuildMSG_CS_ReqSetBossOpen& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_istoday()) {
      set_istoday(from.istoday());
    }
    if (from.has_hour()) {
      set_hour(from.hour());
    }
    if (from.has_minu()) {
      set_minu(from.minu());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_CS_ReqSetBossOpen::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_CS_ReqSetBossOpen::CopyFrom(const GuildMSG_CS_ReqSetBossOpen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_CS_ReqSetBossOpen::IsInitialized() const {

  return true;
}

void GuildMSG_CS_ReqSetBossOpen::Swap(GuildMSG_CS_ReqSetBossOpen* other) {
  if (other != this) {
    std::swap(istoday_, other->istoday_);
    std::swap(hour_, other->hour_);
    std::swap(minu_, other->minu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_CS_ReqSetBossOpen::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_CS_ReqSetBossOpen_descriptor_;
  metadata.reflection = GuildMSG_CS_ReqSetBossOpen_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_SC_AckBossInfo::kResultFieldNumber;
const int GuildMSG_SC_AckBossInfo::kInfoFieldNumber;
#endif  // !_MSC_VER

GuildMSG_SC_AckBossInfo::GuildMSG_SC_AckBossInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_SC_AckBossInfo::InitAsDefaultInstance() {
  info_ = const_cast< ::proto::message::GuildBoss*>(&::proto::message::GuildBoss::default_instance());
}

GuildMSG_SC_AckBossInfo::GuildMSG_SC_AckBossInfo(const GuildMSG_SC_AckBossInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_SC_AckBossInfo::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_SC_AckBossInfo::~GuildMSG_SC_AckBossInfo() {
  SharedDtor();
}

void GuildMSG_SC_AckBossInfo::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void GuildMSG_SC_AckBossInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_SC_AckBossInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_SC_AckBossInfo_descriptor_;
}

const GuildMSG_SC_AckBossInfo& GuildMSG_SC_AckBossInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_SC_AckBossInfo* GuildMSG_SC_AckBossInfo::default_instance_ = NULL;

GuildMSG_SC_AckBossInfo* GuildMSG_SC_AckBossInfo::New() const {
  return new GuildMSG_SC_AckBossInfo;
}

void GuildMSG_SC_AckBossInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    if (has_info()) {
      if (info_ != NULL) info_->::proto::message::GuildBoss::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_SC_AckBossInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .proto.message.GuildBoss info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_SC_AckBossInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional .proto.message.GuildBoss info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_SC_AckBossInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional .proto.message.GuildBoss info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_SC_AckBossInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional .proto.message.GuildBoss info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_SC_AckBossInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_SC_AckBossInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_SC_AckBossInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_SC_AckBossInfo::MergeFrom(const GuildMSG_SC_AckBossInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_info()) {
      mutable_info()->::proto::message::GuildBoss::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_SC_AckBossInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_SC_AckBossInfo::CopyFrom(const GuildMSG_SC_AckBossInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_SC_AckBossInfo::IsInitialized() const {

  return true;
}

void GuildMSG_SC_AckBossInfo::Swap(GuildMSG_SC_AckBossInfo* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_SC_AckBossInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_SC_AckBossInfo_descriptor_;
  metadata.reflection = GuildMSG_SC_AckBossInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_SC_NotifyBossDie::kStatusFieldNumber;
#endif  // !_MSC_VER

GuildMSG_SC_NotifyBossDie::GuildMSG_SC_NotifyBossDie()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_SC_NotifyBossDie::InitAsDefaultInstance() {
}

GuildMSG_SC_NotifyBossDie::GuildMSG_SC_NotifyBossDie(const GuildMSG_SC_NotifyBossDie& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_SC_NotifyBossDie::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_SC_NotifyBossDie::~GuildMSG_SC_NotifyBossDie() {
  SharedDtor();
}

void GuildMSG_SC_NotifyBossDie::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_SC_NotifyBossDie::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_SC_NotifyBossDie::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_SC_NotifyBossDie_descriptor_;
}

const GuildMSG_SC_NotifyBossDie& GuildMSG_SC_NotifyBossDie::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_SC_NotifyBossDie* GuildMSG_SC_NotifyBossDie::default_instance_ = NULL;

GuildMSG_SC_NotifyBossDie* GuildMSG_SC_NotifyBossDie::New() const {
  return new GuildMSG_SC_NotifyBossDie;
}

void GuildMSG_SC_NotifyBossDie::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_SC_NotifyBossDie::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_SC_NotifyBossDie::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_SC_NotifyBossDie::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_SC_NotifyBossDie::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_SC_NotifyBossDie::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_SC_NotifyBossDie* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_SC_NotifyBossDie*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_SC_NotifyBossDie::MergeFrom(const GuildMSG_SC_NotifyBossDie& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_SC_NotifyBossDie::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_SC_NotifyBossDie::CopyFrom(const GuildMSG_SC_NotifyBossDie& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_SC_NotifyBossDie::IsInitialized() const {

  return true;
}

void GuildMSG_SC_NotifyBossDie::Swap(GuildMSG_SC_NotifyBossDie* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_SC_NotifyBossDie::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_SC_NotifyBossDie_descriptor_;
  metadata.reflection = GuildMSG_SC_NotifyBossDie_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_CS_ReqInvitePlayer::kPlayeridFieldNumber;
#endif  // !_MSC_VER

GuildMSG_CS_ReqInvitePlayer::GuildMSG_CS_ReqInvitePlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_CS_ReqInvitePlayer::InitAsDefaultInstance() {
}

GuildMSG_CS_ReqInvitePlayer::GuildMSG_CS_ReqInvitePlayer(const GuildMSG_CS_ReqInvitePlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_CS_ReqInvitePlayer::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_CS_ReqInvitePlayer::~GuildMSG_CS_ReqInvitePlayer() {
  SharedDtor();
}

void GuildMSG_CS_ReqInvitePlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_CS_ReqInvitePlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqInvitePlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_CS_ReqInvitePlayer_descriptor_;
}

const GuildMSG_CS_ReqInvitePlayer& GuildMSG_CS_ReqInvitePlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_CS_ReqInvitePlayer* GuildMSG_CS_ReqInvitePlayer::default_instance_ = NULL;

GuildMSG_CS_ReqInvitePlayer* GuildMSG_CS_ReqInvitePlayer::New() const {
  return new GuildMSG_CS_ReqInvitePlayer;
}

void GuildMSG_CS_ReqInvitePlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_CS_ReqInvitePlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_CS_ReqInvitePlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_CS_ReqInvitePlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_CS_ReqInvitePlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_CS_ReqInvitePlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_CS_ReqInvitePlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_CS_ReqInvitePlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_CS_ReqInvitePlayer::MergeFrom(const GuildMSG_CS_ReqInvitePlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_CS_ReqInvitePlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_CS_ReqInvitePlayer::CopyFrom(const GuildMSG_CS_ReqInvitePlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_CS_ReqInvitePlayer::IsInitialized() const {

  return true;
}

void GuildMSG_CS_ReqInvitePlayer::Swap(GuildMSG_CS_ReqInvitePlayer* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_CS_ReqInvitePlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_CS_ReqInvitePlayer_descriptor_;
  metadata.reflection = GuildMSG_CS_ReqInvitePlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_SC_AckInvitePlayer::kResultFieldNumber;
#endif  // !_MSC_VER

GuildMSG_SC_AckInvitePlayer::GuildMSG_SC_AckInvitePlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_SC_AckInvitePlayer::InitAsDefaultInstance() {
}

GuildMSG_SC_AckInvitePlayer::GuildMSG_SC_AckInvitePlayer(const GuildMSG_SC_AckInvitePlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_SC_AckInvitePlayer::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_SC_AckInvitePlayer::~GuildMSG_SC_AckInvitePlayer() {
  SharedDtor();
}

void GuildMSG_SC_AckInvitePlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_SC_AckInvitePlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_SC_AckInvitePlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_SC_AckInvitePlayer_descriptor_;
}

const GuildMSG_SC_AckInvitePlayer& GuildMSG_SC_AckInvitePlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_SC_AckInvitePlayer* GuildMSG_SC_AckInvitePlayer::default_instance_ = NULL;

GuildMSG_SC_AckInvitePlayer* GuildMSG_SC_AckInvitePlayer::New() const {
  return new GuildMSG_SC_AckInvitePlayer;
}

void GuildMSG_SC_AckInvitePlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_SC_AckInvitePlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_SC_AckInvitePlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_SC_AckInvitePlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_SC_AckInvitePlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_SC_AckInvitePlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_SC_AckInvitePlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_SC_AckInvitePlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_SC_AckInvitePlayer::MergeFrom(const GuildMSG_SC_AckInvitePlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_SC_AckInvitePlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_SC_AckInvitePlayer::CopyFrom(const GuildMSG_SC_AckInvitePlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_SC_AckInvitePlayer::IsInitialized() const {

  return true;
}

void GuildMSG_SC_AckInvitePlayer::Swap(GuildMSG_SC_AckInvitePlayer* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_SC_AckInvitePlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_SC_AckInvitePlayer_descriptor_;
  metadata.reflection = GuildMSG_SC_AckInvitePlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_SC_NotifyInvitePlayer::kInviterFieldNumber;
const int GuildMSG_SC_NotifyInvitePlayer::kGuildidFieldNumber;
const int GuildMSG_SC_NotifyInvitePlayer::kGuildnameFieldNumber;
#endif  // !_MSC_VER

GuildMSG_SC_NotifyInvitePlayer::GuildMSG_SC_NotifyInvitePlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_SC_NotifyInvitePlayer::InitAsDefaultInstance() {
}

GuildMSG_SC_NotifyInvitePlayer::GuildMSG_SC_NotifyInvitePlayer(const GuildMSG_SC_NotifyInvitePlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_SC_NotifyInvitePlayer::SharedCtor() {
  _cached_size_ = 0;
  inviter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guildid_ = GOOGLE_ULONGLONG(0);
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_SC_NotifyInvitePlayer::~GuildMSG_SC_NotifyInvitePlayer() {
  SharedDtor();
}

void GuildMSG_SC_NotifyInvitePlayer::SharedDtor() {
  if (inviter_ != &::google::protobuf::internal::kEmptyString) {
    delete inviter_;
  }
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (this != default_instance_) {
  }
}

void GuildMSG_SC_NotifyInvitePlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_SC_NotifyInvitePlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_SC_NotifyInvitePlayer_descriptor_;
}

const GuildMSG_SC_NotifyInvitePlayer& GuildMSG_SC_NotifyInvitePlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_SC_NotifyInvitePlayer* GuildMSG_SC_NotifyInvitePlayer::default_instance_ = NULL;

GuildMSG_SC_NotifyInvitePlayer* GuildMSG_SC_NotifyInvitePlayer::New() const {
  return new GuildMSG_SC_NotifyInvitePlayer;
}

void GuildMSG_SC_NotifyInvitePlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_inviter()) {
      if (inviter_ != &::google::protobuf::internal::kEmptyString) {
        inviter_->clear();
      }
    }
    guildid_ = GOOGLE_ULONGLONG(0);
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_SC_NotifyInvitePlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string inviter = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inviter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->inviter().data(), this->inviter().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guildid;
        break;
      }

      // optional uint64 guildid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_guildname;
        break;
      }

      // optional string guildname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_SC_NotifyInvitePlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string inviter = 1;
  if (has_inviter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inviter().data(), this->inviter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->inviter(), output);
  }

  // optional uint64 guildid = 2;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guildid(), output);
  }

  // optional string guildname = 3;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->guildname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_SC_NotifyInvitePlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string inviter = 1;
  if (has_inviter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inviter().data(), this->inviter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->inviter(), target);
  }

  // optional uint64 guildid = 2;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guildid(), target);
  }

  // optional string guildname = 3;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->guildname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_SC_NotifyInvitePlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string inviter = 1;
    if (has_inviter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inviter());
    }

    // optional uint64 guildid = 2;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional string guildname = 3;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_SC_NotifyInvitePlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_SC_NotifyInvitePlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_SC_NotifyInvitePlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_SC_NotifyInvitePlayer::MergeFrom(const GuildMSG_SC_NotifyInvitePlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_inviter()) {
      set_inviter(from.inviter());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_SC_NotifyInvitePlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_SC_NotifyInvitePlayer::CopyFrom(const GuildMSG_SC_NotifyInvitePlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_SC_NotifyInvitePlayer::IsInitialized() const {

  return true;
}

void GuildMSG_SC_NotifyInvitePlayer::Swap(GuildMSG_SC_NotifyInvitePlayer* other) {
  if (other != this) {
    std::swap(inviter_, other->inviter_);
    std::swap(guildid_, other->guildid_);
    std::swap(guildname_, other->guildname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_SC_NotifyInvitePlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_SC_NotifyInvitePlayer_descriptor_;
  metadata.reflection = GuildMSG_SC_NotifyInvitePlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_CS_ReqInviteJoin::kIsJoinFieldNumber;
const int GuildMSG_CS_ReqInviteJoin::kGuildidFieldNumber;
#endif  // !_MSC_VER

GuildMSG_CS_ReqInviteJoin::GuildMSG_CS_ReqInviteJoin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_CS_ReqInviteJoin::InitAsDefaultInstance() {
}

GuildMSG_CS_ReqInviteJoin::GuildMSG_CS_ReqInviteJoin(const GuildMSG_CS_ReqInviteJoin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_CS_ReqInviteJoin::SharedCtor() {
  _cached_size_ = 0;
  isjoin_ = 0u;
  guildid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_CS_ReqInviteJoin::~GuildMSG_CS_ReqInviteJoin() {
  SharedDtor();
}

void GuildMSG_CS_ReqInviteJoin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_CS_ReqInviteJoin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqInviteJoin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_CS_ReqInviteJoin_descriptor_;
}

const GuildMSG_CS_ReqInviteJoin& GuildMSG_CS_ReqInviteJoin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_CS_ReqInviteJoin* GuildMSG_CS_ReqInviteJoin::default_instance_ = NULL;

GuildMSG_CS_ReqInviteJoin* GuildMSG_CS_ReqInviteJoin::New() const {
  return new GuildMSG_CS_ReqInviteJoin;
}

void GuildMSG_CS_ReqInviteJoin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isjoin_ = 0u;
    guildid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_CS_ReqInviteJoin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 isJoin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isjoin_)));
          set_has_isjoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guildid;
        break;
      }

      // optional uint64 guildid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_CS_ReqInviteJoin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 isJoin = 1;
  if (has_isjoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->isjoin(), output);
  }

  // optional uint64 guildid = 2;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guildid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_CS_ReqInviteJoin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 isJoin = 1;
  if (has_isjoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->isjoin(), target);
  }

  // optional uint64 guildid = 2;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guildid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_CS_ReqInviteJoin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 isJoin = 1;
    if (has_isjoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isjoin());
    }

    // optional uint64 guildid = 2;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_CS_ReqInviteJoin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_CS_ReqInviteJoin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_CS_ReqInviteJoin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_CS_ReqInviteJoin::MergeFrom(const GuildMSG_CS_ReqInviteJoin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isjoin()) {
      set_isjoin(from.isjoin());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_CS_ReqInviteJoin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_CS_ReqInviteJoin::CopyFrom(const GuildMSG_CS_ReqInviteJoin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_CS_ReqInviteJoin::IsInitialized() const {

  return true;
}

void GuildMSG_CS_ReqInviteJoin::Swap(GuildMSG_CS_ReqInviteJoin* other) {
  if (other != this) {
    std::swap(isjoin_, other->isjoin_);
    std::swap(guildid_, other->guildid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_CS_ReqInviteJoin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_CS_ReqInviteJoin_descriptor_;
  metadata.reflection = GuildMSG_CS_ReqInviteJoin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_SC_AckInviteJoin::kResultFieldNumber;
#endif  // !_MSC_VER

GuildMSG_SC_AckInviteJoin::GuildMSG_SC_AckInviteJoin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_SC_AckInviteJoin::InitAsDefaultInstance() {
}

GuildMSG_SC_AckInviteJoin::GuildMSG_SC_AckInviteJoin(const GuildMSG_SC_AckInviteJoin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_SC_AckInviteJoin::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_SC_AckInviteJoin::~GuildMSG_SC_AckInviteJoin() {
  SharedDtor();
}

void GuildMSG_SC_AckInviteJoin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_SC_AckInviteJoin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_SC_AckInviteJoin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_SC_AckInviteJoin_descriptor_;
}

const GuildMSG_SC_AckInviteJoin& GuildMSG_SC_AckInviteJoin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_SC_AckInviteJoin* GuildMSG_SC_AckInviteJoin::default_instance_ = NULL;

GuildMSG_SC_AckInviteJoin* GuildMSG_SC_AckInviteJoin::New() const {
  return new GuildMSG_SC_AckInviteJoin;
}

void GuildMSG_SC_AckInviteJoin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_SC_AckInviteJoin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_SC_AckInviteJoin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_SC_AckInviteJoin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_SC_AckInviteJoin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_SC_AckInviteJoin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_SC_AckInviteJoin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_SC_AckInviteJoin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_SC_AckInviteJoin::MergeFrom(const GuildMSG_SC_AckInviteJoin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_SC_AckInviteJoin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_SC_AckInviteJoin::CopyFrom(const GuildMSG_SC_AckInviteJoin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_SC_AckInviteJoin::IsInitialized() const {

  return true;
}

void GuildMSG_SC_AckInviteJoin::Swap(GuildMSG_SC_AckInviteJoin* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_SC_AckInviteJoin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_SC_AckInviteJoin_descriptor_;
  metadata.reflection = GuildMSG_SC_AckInviteJoin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GuildMSG_CS_ReqGuildWarehouse::GuildMSG_CS_ReqGuildWarehouse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_CS_ReqGuildWarehouse::InitAsDefaultInstance() {
}

GuildMSG_CS_ReqGuildWarehouse::GuildMSG_CS_ReqGuildWarehouse(const GuildMSG_CS_ReqGuildWarehouse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_CS_ReqGuildWarehouse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_CS_ReqGuildWarehouse::~GuildMSG_CS_ReqGuildWarehouse() {
  SharedDtor();
}

void GuildMSG_CS_ReqGuildWarehouse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_CS_ReqGuildWarehouse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqGuildWarehouse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_CS_ReqGuildWarehouse_descriptor_;
}

const GuildMSG_CS_ReqGuildWarehouse& GuildMSG_CS_ReqGuildWarehouse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_CS_ReqGuildWarehouse* GuildMSG_CS_ReqGuildWarehouse::default_instance_ = NULL;

GuildMSG_CS_ReqGuildWarehouse* GuildMSG_CS_ReqGuildWarehouse::New() const {
  return new GuildMSG_CS_ReqGuildWarehouse;
}

void GuildMSG_CS_ReqGuildWarehouse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_CS_ReqGuildWarehouse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GuildMSG_CS_ReqGuildWarehouse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_CS_ReqGuildWarehouse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_CS_ReqGuildWarehouse::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_CS_ReqGuildWarehouse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_CS_ReqGuildWarehouse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_CS_ReqGuildWarehouse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_CS_ReqGuildWarehouse::MergeFrom(const GuildMSG_CS_ReqGuildWarehouse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_CS_ReqGuildWarehouse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_CS_ReqGuildWarehouse::CopyFrom(const GuildMSG_CS_ReqGuildWarehouse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_CS_ReqGuildWarehouse::IsInitialized() const {

  return true;
}

void GuildMSG_CS_ReqGuildWarehouse::Swap(GuildMSG_CS_ReqGuildWarehouse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_CS_ReqGuildWarehouse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_CS_ReqGuildWarehouse_descriptor_;
  metadata.reflection = GuildMSG_CS_ReqGuildWarehouse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_SC_AckGuildWarehouse::kGuildequipFieldNumber;
const int GuildMSG_SC_AckGuildWarehouse::kGridnumFieldNumber;
const int GuildMSG_SC_AckGuildWarehouse::kBuynumFieldNumber;
#endif  // !_MSC_VER

GuildMSG_SC_AckGuildWarehouse::GuildMSG_SC_AckGuildWarehouse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_SC_AckGuildWarehouse::InitAsDefaultInstance() {
}

GuildMSG_SC_AckGuildWarehouse::GuildMSG_SC_AckGuildWarehouse(const GuildMSG_SC_AckGuildWarehouse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_SC_AckGuildWarehouse::SharedCtor() {
  _cached_size_ = 0;
  gridnum_ = 0u;
  buynum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_SC_AckGuildWarehouse::~GuildMSG_SC_AckGuildWarehouse() {
  SharedDtor();
}

void GuildMSG_SC_AckGuildWarehouse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_SC_AckGuildWarehouse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_SC_AckGuildWarehouse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_SC_AckGuildWarehouse_descriptor_;
}

const GuildMSG_SC_AckGuildWarehouse& GuildMSG_SC_AckGuildWarehouse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_SC_AckGuildWarehouse* GuildMSG_SC_AckGuildWarehouse::default_instance_ = NULL;

GuildMSG_SC_AckGuildWarehouse* GuildMSG_SC_AckGuildWarehouse::New() const {
  return new GuildMSG_SC_AckGuildWarehouse;
}

void GuildMSG_SC_AckGuildWarehouse::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    gridnum_ = 0u;
    buynum_ = 0u;
  }
  guildequip_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_SC_AckGuildWarehouse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.Equip guildequip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildequip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guildequip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_guildequip;
        if (input->ExpectTag(16)) goto parse_gridnum;
        break;
      }

      // optional uint32 gridnum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gridnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gridnum_)));
          set_has_gridnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_buynum;
        break;
      }

      // optional uint32 buynum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buynum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buynum_)));
          set_has_buynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_SC_AckGuildWarehouse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.Equip guildequip = 1;
  for (int i = 0; i < this->guildequip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->guildequip(i), output);
  }

  // optional uint32 gridnum = 2;
  if (has_gridnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gridnum(), output);
  }

  // optional uint32 buynum = 3;
  if (has_buynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->buynum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_SC_AckGuildWarehouse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.Equip guildequip = 1;
  for (int i = 0; i < this->guildequip_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->guildequip(i), target);
  }

  // optional uint32 gridnum = 2;
  if (has_gridnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gridnum(), target);
  }

  // optional uint32 buynum = 3;
  if (has_buynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->buynum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_SC_AckGuildWarehouse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 gridnum = 2;
    if (has_gridnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gridnum());
    }

    // optional uint32 buynum = 3;
    if (has_buynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buynum());
    }

  }
  // repeated .proto.message.Equip guildequip = 1;
  total_size += 1 * this->guildequip_size();
  for (int i = 0; i < this->guildequip_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guildequip(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_SC_AckGuildWarehouse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_SC_AckGuildWarehouse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_SC_AckGuildWarehouse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_SC_AckGuildWarehouse::MergeFrom(const GuildMSG_SC_AckGuildWarehouse& from) {
  GOOGLE_CHECK_NE(&from, this);
  guildequip_.MergeFrom(from.guildequip_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_gridnum()) {
      set_gridnum(from.gridnum());
    }
    if (from.has_buynum()) {
      set_buynum(from.buynum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_SC_AckGuildWarehouse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_SC_AckGuildWarehouse::CopyFrom(const GuildMSG_SC_AckGuildWarehouse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_SC_AckGuildWarehouse::IsInitialized() const {

  return true;
}

void GuildMSG_SC_AckGuildWarehouse::Swap(GuildMSG_SC_AckGuildWarehouse* other) {
  if (other != this) {
    guildequip_.Swap(&other->guildequip_);
    std::swap(gridnum_, other->gridnum_);
    std::swap(buynum_, other->buynum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_SC_AckGuildWarehouse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_SC_AckGuildWarehouse_descriptor_;
  metadata.reflection = GuildMSG_SC_AckGuildWarehouse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_CS_ReqDonateEquip::kEquipuuidFieldNumber;
#endif  // !_MSC_VER

GuildMSG_CS_ReqDonateEquip::GuildMSG_CS_ReqDonateEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_CS_ReqDonateEquip::InitAsDefaultInstance() {
}

GuildMSG_CS_ReqDonateEquip::GuildMSG_CS_ReqDonateEquip(const GuildMSG_CS_ReqDonateEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_CS_ReqDonateEquip::SharedCtor() {
  _cached_size_ = 0;
  equipuuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_CS_ReqDonateEquip::~GuildMSG_CS_ReqDonateEquip() {
  SharedDtor();
}

void GuildMSG_CS_ReqDonateEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_CS_ReqDonateEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqDonateEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_CS_ReqDonateEquip_descriptor_;
}

const GuildMSG_CS_ReqDonateEquip& GuildMSG_CS_ReqDonateEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_CS_ReqDonateEquip* GuildMSG_CS_ReqDonateEquip::default_instance_ = NULL;

GuildMSG_CS_ReqDonateEquip* GuildMSG_CS_ReqDonateEquip::New() const {
  return new GuildMSG_CS_ReqDonateEquip;
}

void GuildMSG_CS_ReqDonateEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equipuuid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_CS_ReqDonateEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 equipuuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &equipuuid_)));
          set_has_equipuuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_CS_ReqDonateEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 equipuuid = 1;
  if (has_equipuuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->equipuuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_CS_ReqDonateEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 equipuuid = 1;
  if (has_equipuuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->equipuuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_CS_ReqDonateEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 equipuuid = 1;
    if (has_equipuuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->equipuuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_CS_ReqDonateEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_CS_ReqDonateEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_CS_ReqDonateEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_CS_ReqDonateEquip::MergeFrom(const GuildMSG_CS_ReqDonateEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equipuuid()) {
      set_equipuuid(from.equipuuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_CS_ReqDonateEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_CS_ReqDonateEquip::CopyFrom(const GuildMSG_CS_ReqDonateEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_CS_ReqDonateEquip::IsInitialized() const {

  return true;
}

void GuildMSG_CS_ReqDonateEquip::Swap(GuildMSG_CS_ReqDonateEquip* other) {
  if (other != this) {
    std::swap(equipuuid_, other->equipuuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_CS_ReqDonateEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_CS_ReqDonateEquip_descriptor_;
  metadata.reflection = GuildMSG_CS_ReqDonateEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_CS_ReqConversionEquip::kEquipuuidFieldNumber;
#endif  // !_MSC_VER

GuildMSG_CS_ReqConversionEquip::GuildMSG_CS_ReqConversionEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_CS_ReqConversionEquip::InitAsDefaultInstance() {
}

GuildMSG_CS_ReqConversionEquip::GuildMSG_CS_ReqConversionEquip(const GuildMSG_CS_ReqConversionEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_CS_ReqConversionEquip::SharedCtor() {
  _cached_size_ = 0;
  equipuuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_CS_ReqConversionEquip::~GuildMSG_CS_ReqConversionEquip() {
  SharedDtor();
}

void GuildMSG_CS_ReqConversionEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_CS_ReqConversionEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqConversionEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_CS_ReqConversionEquip_descriptor_;
}

const GuildMSG_CS_ReqConversionEquip& GuildMSG_CS_ReqConversionEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_CS_ReqConversionEquip* GuildMSG_CS_ReqConversionEquip::default_instance_ = NULL;

GuildMSG_CS_ReqConversionEquip* GuildMSG_CS_ReqConversionEquip::New() const {
  return new GuildMSG_CS_ReqConversionEquip;
}

void GuildMSG_CS_ReqConversionEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equipuuid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_CS_ReqConversionEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 equipuuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &equipuuid_)));
          set_has_equipuuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_CS_ReqConversionEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 equipuuid = 1;
  if (has_equipuuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->equipuuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_CS_ReqConversionEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 equipuuid = 1;
  if (has_equipuuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->equipuuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_CS_ReqConversionEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 equipuuid = 1;
    if (has_equipuuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->equipuuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_CS_ReqConversionEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_CS_ReqConversionEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_CS_ReqConversionEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_CS_ReqConversionEquip::MergeFrom(const GuildMSG_CS_ReqConversionEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equipuuid()) {
      set_equipuuid(from.equipuuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_CS_ReqConversionEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_CS_ReqConversionEquip::CopyFrom(const GuildMSG_CS_ReqConversionEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_CS_ReqConversionEquip::IsInitialized() const {

  return true;
}

void GuildMSG_CS_ReqConversionEquip::Swap(GuildMSG_CS_ReqConversionEquip* other) {
  if (other != this) {
    std::swap(equipuuid_, other->equipuuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_CS_ReqConversionEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_CS_ReqConversionEquip_descriptor_;
  metadata.reflection = GuildMSG_CS_ReqConversionEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_CS_ReqDelGuildEquip::kEquiplistFieldNumber;
#endif  // !_MSC_VER

GuildMSG_CS_ReqDelGuildEquip::GuildMSG_CS_ReqDelGuildEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_CS_ReqDelGuildEquip::InitAsDefaultInstance() {
}

GuildMSG_CS_ReqDelGuildEquip::GuildMSG_CS_ReqDelGuildEquip(const GuildMSG_CS_ReqDelGuildEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_CS_ReqDelGuildEquip::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_CS_ReqDelGuildEquip::~GuildMSG_CS_ReqDelGuildEquip() {
  SharedDtor();
}

void GuildMSG_CS_ReqDelGuildEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_CS_ReqDelGuildEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_CS_ReqDelGuildEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_CS_ReqDelGuildEquip_descriptor_;
}

const GuildMSG_CS_ReqDelGuildEquip& GuildMSG_CS_ReqDelGuildEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_CS_ReqDelGuildEquip* GuildMSG_CS_ReqDelGuildEquip::default_instance_ = NULL;

GuildMSG_CS_ReqDelGuildEquip* GuildMSG_CS_ReqDelGuildEquip::New() const {
  return new GuildMSG_CS_ReqDelGuildEquip;
}

void GuildMSG_CS_ReqDelGuildEquip::Clear() {
  equiplist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_CS_ReqDelGuildEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 equiplist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equiplist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_equiplist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_equiplist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_equiplist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_CS_ReqDelGuildEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 equiplist = 1;
  for (int i = 0; i < this->equiplist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->equiplist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_CS_ReqDelGuildEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 equiplist = 1;
  for (int i = 0; i < this->equiplist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->equiplist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_CS_ReqDelGuildEquip::ByteSize() const {
  int total_size = 0;

  // repeated uint64 equiplist = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->equiplist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->equiplist(i));
    }
    total_size += 1 * this->equiplist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_CS_ReqDelGuildEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_CS_ReqDelGuildEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_CS_ReqDelGuildEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_CS_ReqDelGuildEquip::MergeFrom(const GuildMSG_CS_ReqDelGuildEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  equiplist_.MergeFrom(from.equiplist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_CS_ReqDelGuildEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_CS_ReqDelGuildEquip::CopyFrom(const GuildMSG_CS_ReqDelGuildEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_CS_ReqDelGuildEquip::IsInitialized() const {

  return true;
}

void GuildMSG_CS_ReqDelGuildEquip::Swap(GuildMSG_CS_ReqDelGuildEquip* other) {
  if (other != this) {
    equiplist_.Swap(&other->equiplist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_CS_ReqDelGuildEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_CS_ReqDelGuildEquip_descriptor_;
  metadata.reflection = GuildMSG_CS_ReqDelGuildEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMSG_SC_AckGuildEquipRecord::kDepositlistFieldNumber;
const int GuildMSG_SC_AckGuildEquipRecord::kFetchlistFieldNumber;
#endif  // !_MSC_VER

GuildMSG_SC_AckGuildEquipRecord::GuildMSG_SC_AckGuildEquipRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMSG_SC_AckGuildEquipRecord::InitAsDefaultInstance() {
}

GuildMSG_SC_AckGuildEquipRecord::GuildMSG_SC_AckGuildEquipRecord(const GuildMSG_SC_AckGuildEquipRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMSG_SC_AckGuildEquipRecord::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMSG_SC_AckGuildEquipRecord::~GuildMSG_SC_AckGuildEquipRecord() {
  SharedDtor();
}

void GuildMSG_SC_AckGuildEquipRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMSG_SC_AckGuildEquipRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMSG_SC_AckGuildEquipRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMSG_SC_AckGuildEquipRecord_descriptor_;
}

const GuildMSG_SC_AckGuildEquipRecord& GuildMSG_SC_AckGuildEquipRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

GuildMSG_SC_AckGuildEquipRecord* GuildMSG_SC_AckGuildEquipRecord::default_instance_ = NULL;

GuildMSG_SC_AckGuildEquipRecord* GuildMSG_SC_AckGuildEquipRecord::New() const {
  return new GuildMSG_SC_AckGuildEquipRecord;
}

void GuildMSG_SC_AckGuildEquipRecord::Clear() {
  depositlist_.Clear();
  fetchlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMSG_SC_AckGuildEquipRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.RecordData depositlist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_depositlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_depositlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_depositlist;
        if (input->ExpectTag(18)) goto parse_fetchlist;
        break;
      }

      // repeated .proto.message.RecordData fetchlist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fetchlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fetchlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fetchlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMSG_SC_AckGuildEquipRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.RecordData depositlist = 1;
  for (int i = 0; i < this->depositlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->depositlist(i), output);
  }

  // repeated .proto.message.RecordData fetchlist = 2;
  for (int i = 0; i < this->fetchlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fetchlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMSG_SC_AckGuildEquipRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.RecordData depositlist = 1;
  for (int i = 0; i < this->depositlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->depositlist(i), target);
  }

  // repeated .proto.message.RecordData fetchlist = 2;
  for (int i = 0; i < this->fetchlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fetchlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMSG_SC_AckGuildEquipRecord::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.RecordData depositlist = 1;
  total_size += 1 * this->depositlist_size();
  for (int i = 0; i < this->depositlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->depositlist(i));
  }

  // repeated .proto.message.RecordData fetchlist = 2;
  total_size += 1 * this->fetchlist_size();
  for (int i = 0; i < this->fetchlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fetchlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMSG_SC_AckGuildEquipRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMSG_SC_AckGuildEquipRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMSG_SC_AckGuildEquipRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMSG_SC_AckGuildEquipRecord::MergeFrom(const GuildMSG_SC_AckGuildEquipRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  depositlist_.MergeFrom(from.depositlist_);
  fetchlist_.MergeFrom(from.fetchlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMSG_SC_AckGuildEquipRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMSG_SC_AckGuildEquipRecord::CopyFrom(const GuildMSG_SC_AckGuildEquipRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMSG_SC_AckGuildEquipRecord::IsInitialized() const {

  return true;
}

void GuildMSG_SC_AckGuildEquipRecord::Swap(GuildMSG_SC_AckGuildEquipRecord* other) {
  if (other != this) {
    depositlist_.Swap(&other->depositlist_);
    fetchlist_.Swap(&other->fetchlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMSG_SC_AckGuildEquipRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMSG_SC_AckGuildEquipRecord_descriptor_;
  metadata.reflection = GuildMSG_SC_AckGuildEquipRecord_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

// @@protoc_insertion_point(global_scope)
