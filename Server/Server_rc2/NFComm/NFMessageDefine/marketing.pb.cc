// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: marketing.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "marketing.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

namespace {

const ::google::protobuf::Descriptor* SingleChargeBigGiftData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleChargeBigGiftData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_CS_LimitCharge_Query_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_CS_LimitCharge_Query_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_SC_LimitCharge_Query_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_SC_LimitCharge_Query_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_CS_LimitCharge_Do_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_CS_LimitCharge_Do_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_SC_LimitCharge_Do_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_SC_LimitCharge_Do_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoAllLimitChargeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoAllLimitChargeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoAllChargeBigGiftInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoAllChargeBigGiftInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoAllTotelChargeGiftInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoAllTotelChargeGiftInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SingleSevenDayInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleSevenDayInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoAllSevenDayTargetInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoAllSevenDayTargetInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_CS_DailyFirstCharge_Query_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_CS_DailyFirstCharge_Query_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_CS_DailyFirstCharge_Do_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_CS_DailyFirstCharge_Do_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_SC_DailyFirstCharge_Query_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_SC_DailyFirstCharge_Query_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_SC_DailyFirstCharge_Do_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_SC_DailyFirstCharge_Do_reflection_ = NULL;
const ::google::protobuf::Descriptor* Marketing_CS_QuerySevenDayTargetInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Marketing_CS_QuerySevenDayTargetInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Marketing_SC_QuerySevenDayTargetInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Marketing_SC_QuerySevenDayTargetInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Marketing_CS_GetSevenDayTargetReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Marketing_CS_GetSevenDayTargetReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Marketing_SC_GetSevenDayTargetReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Marketing_SC_GetSevenDayTargetReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_CS_GetSevenDayTargetIntegralAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_CS_GetSevenDayTargetIntegralAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_SC_GetSevenDayTargetIntegralAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_SC_GetSevenDayTargetIntegralAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Marketing_SC_UpdateServerOpenDay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Marketing_SC_UpdateServerOpenDay_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_CS_DiamondDouble_GetHistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_CS_DiamondDouble_GetHistory_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_SC_DiamondDouble_GetHistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_SC_DiamondDouble_GetHistory_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_SC_DiamondDouble_Roll_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_SC_DiamondDouble_Roll_reflection_ = NULL;
const ::google::protobuf::Descriptor* SingleInvestReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleInvestReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* SingleInvestMent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleInvestMent_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_CS_Investment_GetInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_CS_Investment_GetInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_CS_Investment_DoReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_CS_Investment_DoReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_CS_Investment_Open_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_CS_Investment_Open_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_SC_Investment_GetInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_SC_Investment_GetInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_SC_Investment_DoReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_SC_Investment_DoReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_SC_Investment_Open_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_SC_Investment_Open_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoAllInvestmentInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoAllInvestmentInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoAllDailyFirstChargeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoAllDailyFirstChargeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RouletteHistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RouletteHistory_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_CS_Roulette_Do_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_CS_Roulette_Do_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_SC_Roulette_Do_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_SC_Roulette_Do_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_CS_Roulette_Exchange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_CS_Roulette_Exchange_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_SC_Roulette_Exchange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_SC_Roulette_Exchange_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_CS_Roulette_GetHistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_CS_Roulette_GetHistory_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_SC_Roulette_GetHistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_SC_Roulette_GetHistory_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_SC_Change_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_SC_Change_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_SC_Roulette_ExchangeCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_SC_Roulette_ExchangeCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContinuousChargeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContinuousChargeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_CS_ContinuousCharge_Query_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_CS_ContinuousCharge_Query_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_SC_ContinuousCharge_Query_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_SC_ContinuousCharge_Query_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_CS_ContinuousCharge_Do_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_CS_ContinuousCharge_Do_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_SC_ContinuousCharge_Do_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_SC_ContinuousCharge_Do_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpecialSaleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpecialSaleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_CS_SpecialSale_Query_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_CS_SpecialSale_Query_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_SC_SpecialSale_Query_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_SC_SpecialSale_Query_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_CS_SpecialSale_Do_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_CS_SpecialSale_Do_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_SC_SpecialSale_Do_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_SC_SpecialSale_Do_reflection_ = NULL;
const ::google::protobuf::Descriptor* LostTreasureRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LostTreasureRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* LostTreasure_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LostTreasure_reflection_ = NULL;
const ::google::protobuf::Descriptor* LostTreasureBag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LostTreasureBag_reflection_ = NULL;
const ::google::protobuf::Descriptor* LostTreasureInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LostTreasureInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_CS_LostTreasure_Do_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_CS_LostTreasure_Do_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_SC_LostTreasure_Do_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_SC_LostTreasure_Do_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_CS_LostTreasure_Exchange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_CS_LostTreasure_Exchange_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_SC_LostTreasure_Exchange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_SC_LostTreasure_Exchange_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_CS_LostTreasure_Query_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_CS_LostTreasure_Query_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_SC_LostTreasure_Query_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_SC_LostTreasure_Query_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_CS_LostTreasure_Fetch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_CS_LostTreasure_Fetch_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_SC_LostTreasure_Fetch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_SC_LostTreasure_Fetch_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_CS_LostTreasure_QueryRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_CS_LostTreasure_QueryRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_SC_LostTreasure_QueryRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_SC_LostTreasure_QueryRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneyTreeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneyTreeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_CS_MoneyTree_Query_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_CS_MoneyTree_Query_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_SC_MoneyTree_Query_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_SC_MoneyTree_Query_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_CS_MoneyTree_Do_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_CS_MoneyTree_Do_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_SC_MoneyTree_Do_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_SC_MoneyTree_Do_reflection_ = NULL;
const ::google::protobuf::Descriptor* DiscountStoreInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DiscountStoreInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_CS_DiscountStore_Query_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_CS_DiscountStore_Query_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_SC_DiscountStore_Query_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_SC_DiscountStore_Query_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_CS_DiscountStore_Do_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_CS_DiscountStore_Do_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_SC_DiscountStore_Do_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_SC_DiscountStore_Do_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* eActivityDataType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_marketing_2eproto() {
  protobuf_AddDesc_marketing_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "marketing.proto");
  GOOGLE_CHECK(file != NULL);
  SingleChargeBigGiftData_descriptor_ = file->message_type(0);
  static const int SingleChargeBigGiftData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleChargeBigGiftData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleChargeBigGiftData, isrecived_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleChargeBigGiftData, progress_),
  };
  SingleChargeBigGiftData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SingleChargeBigGiftData_descriptor_,
      SingleChargeBigGiftData::default_instance_,
      SingleChargeBigGiftData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleChargeBigGiftData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleChargeBigGiftData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SingleChargeBigGiftData));
  Activity_CS_LimitCharge_Query_descriptor_ = file->message_type(1);
  static const int Activity_CS_LimitCharge_Query_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_LimitCharge_Query, activitytype_),
  };
  Activity_CS_LimitCharge_Query_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_CS_LimitCharge_Query_descriptor_,
      Activity_CS_LimitCharge_Query::default_instance_,
      Activity_CS_LimitCharge_Query_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_LimitCharge_Query, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_LimitCharge_Query, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_CS_LimitCharge_Query));
  Activity_SC_LimitCharge_Query_descriptor_ = file->message_type(2);
  static const int Activity_SC_LimitCharge_Query_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_LimitCharge_Query, activitytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_LimitCharge_Query, info_),
  };
  Activity_SC_LimitCharge_Query_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_SC_LimitCharge_Query_descriptor_,
      Activity_SC_LimitCharge_Query::default_instance_,
      Activity_SC_LimitCharge_Query_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_LimitCharge_Query, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_LimitCharge_Query, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_SC_LimitCharge_Query));
  Activity_CS_LimitCharge_Do_descriptor_ = file->message_type(3);
  static const int Activity_CS_LimitCharge_Do_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_LimitCharge_Do, activitytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_LimitCharge_Do, nid_),
  };
  Activity_CS_LimitCharge_Do_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_CS_LimitCharge_Do_descriptor_,
      Activity_CS_LimitCharge_Do::default_instance_,
      Activity_CS_LimitCharge_Do_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_LimitCharge_Do, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_LimitCharge_Do, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_CS_LimitCharge_Do));
  Activity_SC_LimitCharge_Do_descriptor_ = file->message_type(4);
  static const int Activity_SC_LimitCharge_Do_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_LimitCharge_Do, activitytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_LimitCharge_Do, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_LimitCharge_Do, dropid_),
  };
  Activity_SC_LimitCharge_Do_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_SC_LimitCharge_Do_descriptor_,
      Activity_SC_LimitCharge_Do::default_instance_,
      Activity_SC_LimitCharge_Do_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_LimitCharge_Do, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_LimitCharge_Do, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_SC_LimitCharge_Do));
  ProtoAllLimitChargeInfo_descriptor_ = file->message_type(5);
  static const int ProtoAllLimitChargeInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAllLimitChargeInfo, limitchargeinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAllLimitChargeInfo, chargebiggiftinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAllLimitChargeInfo, totalchargegiftinfo_),
  };
  ProtoAllLimitChargeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoAllLimitChargeInfo_descriptor_,
      ProtoAllLimitChargeInfo::default_instance_,
      ProtoAllLimitChargeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAllLimitChargeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAllLimitChargeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoAllLimitChargeInfo));
  ProtoAllChargeBigGiftInfo_descriptor_ = file->message_type(6);
  static const int ProtoAllChargeBigGiftInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAllChargeBigGiftInfo, info_),
  };
  ProtoAllChargeBigGiftInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoAllChargeBigGiftInfo_descriptor_,
      ProtoAllChargeBigGiftInfo::default_instance_,
      ProtoAllChargeBigGiftInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAllChargeBigGiftInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAllChargeBigGiftInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoAllChargeBigGiftInfo));
  ProtoAllTotelChargeGiftInfo_descriptor_ = file->message_type(7);
  static const int ProtoAllTotelChargeGiftInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAllTotelChargeGiftInfo, info_),
  };
  ProtoAllTotelChargeGiftInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoAllTotelChargeGiftInfo_descriptor_,
      ProtoAllTotelChargeGiftInfo::default_instance_,
      ProtoAllTotelChargeGiftInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAllTotelChargeGiftInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAllTotelChargeGiftInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoAllTotelChargeGiftInfo));
  SingleSevenDayInfo_descriptor_ = file->message_type(8);
  static const int SingleSevenDayInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleSevenDayInfo, nid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleSevenDayInfo, nprogress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleSevenDayInfo, status_),
  };
  SingleSevenDayInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SingleSevenDayInfo_descriptor_,
      SingleSevenDayInfo::default_instance_,
      SingleSevenDayInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleSevenDayInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleSevenDayInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SingleSevenDayInfo));
  ProtoAllSevenDayTargetInfo_descriptor_ = file->message_type(9);
  static const int ProtoAllSevenDayTargetInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAllSevenDayTargetInfo, allinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAllSevenDayTargetInfo, received_awards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAllSevenDayTargetInfo, activity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAllSevenDayTargetInfo, integral_),
  };
  ProtoAllSevenDayTargetInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoAllSevenDayTargetInfo_descriptor_,
      ProtoAllSevenDayTargetInfo::default_instance_,
      ProtoAllSevenDayTargetInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAllSevenDayTargetInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAllSevenDayTargetInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoAllSevenDayTargetInfo));
  Activity_CS_DailyFirstCharge_Query_descriptor_ = file->message_type(10);
  static const int Activity_CS_DailyFirstCharge_Query_offsets_[1] = {
  };
  Activity_CS_DailyFirstCharge_Query_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_CS_DailyFirstCharge_Query_descriptor_,
      Activity_CS_DailyFirstCharge_Query::default_instance_,
      Activity_CS_DailyFirstCharge_Query_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_DailyFirstCharge_Query, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_DailyFirstCharge_Query, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_CS_DailyFirstCharge_Query));
  Activity_CS_DailyFirstCharge_Do_descriptor_ = file->message_type(11);
  static const int Activity_CS_DailyFirstCharge_Do_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_DailyFirstCharge_Do, isfirst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_DailyFirstCharge_Do, dailyfirstid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_DailyFirstCharge_Do, indexid_),
  };
  Activity_CS_DailyFirstCharge_Do_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_CS_DailyFirstCharge_Do_descriptor_,
      Activity_CS_DailyFirstCharge_Do::default_instance_,
      Activity_CS_DailyFirstCharge_Do_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_DailyFirstCharge_Do, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_DailyFirstCharge_Do, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_CS_DailyFirstCharge_Do));
  Activity_SC_DailyFirstCharge_Query_descriptor_ = file->message_type(12);
  static const int Activity_SC_DailyFirstCharge_Query_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_DailyFirstCharge_Query, firstawardstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_DailyFirstCharge_Query, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_DailyFirstCharge_Query, todaytotal_),
  };
  Activity_SC_DailyFirstCharge_Query_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_SC_DailyFirstCharge_Query_descriptor_,
      Activity_SC_DailyFirstCharge_Query::default_instance_,
      Activity_SC_DailyFirstCharge_Query_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_DailyFirstCharge_Query, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_DailyFirstCharge_Query, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_SC_DailyFirstCharge_Query));
  Activity_SC_DailyFirstCharge_Do_descriptor_ = file->message_type(13);
  static const int Activity_SC_DailyFirstCharge_Do_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_DailyFirstCharge_Do, result_),
  };
  Activity_SC_DailyFirstCharge_Do_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_SC_DailyFirstCharge_Do_descriptor_,
      Activity_SC_DailyFirstCharge_Do::default_instance_,
      Activity_SC_DailyFirstCharge_Do_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_DailyFirstCharge_Do, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_DailyFirstCharge_Do, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_SC_DailyFirstCharge_Do));
  Marketing_CS_QuerySevenDayTargetInfo_descriptor_ = file->message_type(14);
  static const int Marketing_CS_QuerySevenDayTargetInfo_offsets_[1] = {
  };
  Marketing_CS_QuerySevenDayTargetInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Marketing_CS_QuerySevenDayTargetInfo_descriptor_,
      Marketing_CS_QuerySevenDayTargetInfo::default_instance_,
      Marketing_CS_QuerySevenDayTargetInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Marketing_CS_QuerySevenDayTargetInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Marketing_CS_QuerySevenDayTargetInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Marketing_CS_QuerySevenDayTargetInfo));
  Marketing_SC_QuerySevenDayTargetInfo_descriptor_ = file->message_type(15);
  static const int Marketing_SC_QuerySevenDayTargetInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Marketing_SC_QuerySevenDayTargetInfo, allinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Marketing_SC_QuerySevenDayTargetInfo, received_awards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Marketing_SC_QuerySevenDayTargetInfo, integral_),
  };
  Marketing_SC_QuerySevenDayTargetInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Marketing_SC_QuerySevenDayTargetInfo_descriptor_,
      Marketing_SC_QuerySevenDayTargetInfo::default_instance_,
      Marketing_SC_QuerySevenDayTargetInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Marketing_SC_QuerySevenDayTargetInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Marketing_SC_QuerySevenDayTargetInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Marketing_SC_QuerySevenDayTargetInfo));
  Marketing_CS_GetSevenDayTargetReward_descriptor_ = file->message_type(16);
  static const int Marketing_CS_GetSevenDayTargetReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Marketing_CS_GetSevenDayTargetReward, rewardid_),
  };
  Marketing_CS_GetSevenDayTargetReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Marketing_CS_GetSevenDayTargetReward_descriptor_,
      Marketing_CS_GetSevenDayTargetReward::default_instance_,
      Marketing_CS_GetSevenDayTargetReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Marketing_CS_GetSevenDayTargetReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Marketing_CS_GetSevenDayTargetReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Marketing_CS_GetSevenDayTargetReward));
  Marketing_SC_GetSevenDayTargetReward_descriptor_ = file->message_type(17);
  static const int Marketing_SC_GetSevenDayTargetReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Marketing_SC_GetSevenDayTargetReward, ret_),
  };
  Marketing_SC_GetSevenDayTargetReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Marketing_SC_GetSevenDayTargetReward_descriptor_,
      Marketing_SC_GetSevenDayTargetReward::default_instance_,
      Marketing_SC_GetSevenDayTargetReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Marketing_SC_GetSevenDayTargetReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Marketing_SC_GetSevenDayTargetReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Marketing_SC_GetSevenDayTargetReward));
  Activity_CS_GetSevenDayTargetIntegralAward_descriptor_ = file->message_type(18);
  static const int Activity_CS_GetSevenDayTargetIntegralAward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_GetSevenDayTargetIntegralAward, id_),
  };
  Activity_CS_GetSevenDayTargetIntegralAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_CS_GetSevenDayTargetIntegralAward_descriptor_,
      Activity_CS_GetSevenDayTargetIntegralAward::default_instance_,
      Activity_CS_GetSevenDayTargetIntegralAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_GetSevenDayTargetIntegralAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_GetSevenDayTargetIntegralAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_CS_GetSevenDayTargetIntegralAward));
  Activity_SC_GetSevenDayTargetIntegralAward_descriptor_ = file->message_type(19);
  static const int Activity_SC_GetSevenDayTargetIntegralAward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_GetSevenDayTargetIntegralAward, res_),
  };
  Activity_SC_GetSevenDayTargetIntegralAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_SC_GetSevenDayTargetIntegralAward_descriptor_,
      Activity_SC_GetSevenDayTargetIntegralAward::default_instance_,
      Activity_SC_GetSevenDayTargetIntegralAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_GetSevenDayTargetIntegralAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_GetSevenDayTargetIntegralAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_SC_GetSevenDayTargetIntegralAward));
  Marketing_SC_UpdateServerOpenDay_descriptor_ = file->message_type(20);
  static const int Marketing_SC_UpdateServerOpenDay_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Marketing_SC_UpdateServerOpenDay, yearnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Marketing_SC_UpdateServerOpenDay, monnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Marketing_SC_UpdateServerOpenDay, daynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Marketing_SC_UpdateServerOpenDay, tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Marketing_SC_UpdateServerOpenDay, opendaynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Marketing_SC_UpdateServerOpenDay, nowtick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Marketing_SC_UpdateServerOpenDay, islogin_),
  };
  Marketing_SC_UpdateServerOpenDay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Marketing_SC_UpdateServerOpenDay_descriptor_,
      Marketing_SC_UpdateServerOpenDay::default_instance_,
      Marketing_SC_UpdateServerOpenDay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Marketing_SC_UpdateServerOpenDay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Marketing_SC_UpdateServerOpenDay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Marketing_SC_UpdateServerOpenDay));
  Activity_CS_DiamondDouble_GetHistory_descriptor_ = file->message_type(21);
  static const int Activity_CS_DiamondDouble_GetHistory_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_DiamondDouble_GetHistory, type_),
  };
  Activity_CS_DiamondDouble_GetHistory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_CS_DiamondDouble_GetHistory_descriptor_,
      Activity_CS_DiamondDouble_GetHistory::default_instance_,
      Activity_CS_DiamondDouble_GetHistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_DiamondDouble_GetHistory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_DiamondDouble_GetHistory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_CS_DiamondDouble_GetHistory));
  Activity_SC_DiamondDouble_GetHistory_descriptor_ = file->message_type(22);
  static const int Activity_SC_DiamondDouble_GetHistory_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_DiamondDouble_GetHistory, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_DiamondDouble_GetHistory, history_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_DiamondDouble_GetHistory, uirolltimes_),
  };
  Activity_SC_DiamondDouble_GetHistory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_SC_DiamondDouble_GetHistory_descriptor_,
      Activity_SC_DiamondDouble_GetHistory::default_instance_,
      Activity_SC_DiamondDouble_GetHistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_DiamondDouble_GetHistory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_DiamondDouble_GetHistory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_SC_DiamondDouble_GetHistory));
  Activity_SC_DiamondDouble_Roll_descriptor_ = file->message_type(23);
  static const int Activity_SC_DiamondDouble_Roll_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_DiamondDouble_Roll, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_DiamondDouble_Roll, dimaond_),
  };
  Activity_SC_DiamondDouble_Roll_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_SC_DiamondDouble_Roll_descriptor_,
      Activity_SC_DiamondDouble_Roll::default_instance_,
      Activity_SC_DiamondDouble_Roll_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_DiamondDouble_Roll, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_DiamondDouble_Roll, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_SC_DiamondDouble_Roll));
  SingleInvestReward_descriptor_ = file->message_type(24);
  static const int SingleInvestReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleInvestReward, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleInvestReward, isget_),
  };
  SingleInvestReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SingleInvestReward_descriptor_,
      SingleInvestReward::default_instance_,
      SingleInvestReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleInvestReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleInvestReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SingleInvestReward));
  SingleInvestMent_descriptor_ = file->message_type(25);
  static const int SingleInvestMent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleInvestMent, nactivenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleInvestMent, nrewardlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleInvestMent, ninitnum_),
  };
  SingleInvestMent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SingleInvestMent_descriptor_,
      SingleInvestMent::default_instance_,
      SingleInvestMent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleInvestMent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleInvestMent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SingleInvestMent));
  Activity_CS_Investment_GetInfo_descriptor_ = file->message_type(26);
  static const int Activity_CS_Investment_GetInfo_offsets_[1] = {
  };
  Activity_CS_Investment_GetInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_CS_Investment_GetInfo_descriptor_,
      Activity_CS_Investment_GetInfo::default_instance_,
      Activity_CS_Investment_GetInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_Investment_GetInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_Investment_GetInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_CS_Investment_GetInfo));
  Activity_CS_Investment_DoReward_descriptor_ = file->message_type(27);
  static const int Activity_CS_Investment_DoReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_Investment_DoReward, nactivenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_Investment_DoReward, target_),
  };
  Activity_CS_Investment_DoReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_CS_Investment_DoReward_descriptor_,
      Activity_CS_Investment_DoReward::default_instance_,
      Activity_CS_Investment_DoReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_Investment_DoReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_Investment_DoReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_CS_Investment_DoReward));
  Activity_CS_Investment_Open_descriptor_ = file->message_type(28);
  static const int Activity_CS_Investment_Open_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_Investment_Open, nactivenum_),
  };
  Activity_CS_Investment_Open_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_CS_Investment_Open_descriptor_,
      Activity_CS_Investment_Open::default_instance_,
      Activity_CS_Investment_Open_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_Investment_Open, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_Investment_Open, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_CS_Investment_Open));
  Activity_SC_Investment_GetInfo_descriptor_ = file->message_type(29);
  static const int Activity_SC_Investment_GetInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_Investment_GetInfo, investlist_),
  };
  Activity_SC_Investment_GetInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_SC_Investment_GetInfo_descriptor_,
      Activity_SC_Investment_GetInfo::default_instance_,
      Activity_SC_Investment_GetInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_Investment_GetInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_Investment_GetInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_SC_Investment_GetInfo));
  Activity_SC_Investment_DoReward_descriptor_ = file->message_type(30);
  static const int Activity_SC_Investment_DoReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_Investment_DoReward, ret_),
  };
  Activity_SC_Investment_DoReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_SC_Investment_DoReward_descriptor_,
      Activity_SC_Investment_DoReward::default_instance_,
      Activity_SC_Investment_DoReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_Investment_DoReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_Investment_DoReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_SC_Investment_DoReward));
  Activity_SC_Investment_Open_descriptor_ = file->message_type(31);
  static const int Activity_SC_Investment_Open_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_Investment_Open, ret_),
  };
  Activity_SC_Investment_Open_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_SC_Investment_Open_descriptor_,
      Activity_SC_Investment_Open::default_instance_,
      Activity_SC_Investment_Open_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_Investment_Open, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_Investment_Open, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_SC_Investment_Open));
  ProtoAllInvestmentInfo_descriptor_ = file->message_type(32);
  static const int ProtoAllInvestmentInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAllInvestmentInfo, investlist_),
  };
  ProtoAllInvestmentInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoAllInvestmentInfo_descriptor_,
      ProtoAllInvestmentInfo::default_instance_,
      ProtoAllInvestmentInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAllInvestmentInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAllInvestmentInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoAllInvestmentInfo));
  ProtoAllDailyFirstChargeInfo_descriptor_ = file->message_type(33);
  static const int ProtoAllDailyFirstChargeInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAllDailyFirstChargeInfo, isfirstcharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAllDailyFirstChargeInfo, dailycharge_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAllDailyFirstChargeInfo, todaychargenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAllDailyFirstChargeInfo, lastchargettick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAllDailyFirstChargeInfo, firstchargettick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAllDailyFirstChargeInfo, dailychargeactiveid_),
  };
  ProtoAllDailyFirstChargeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoAllDailyFirstChargeInfo_descriptor_,
      ProtoAllDailyFirstChargeInfo::default_instance_,
      ProtoAllDailyFirstChargeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAllDailyFirstChargeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAllDailyFirstChargeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoAllDailyFirstChargeInfo));
  RouletteHistory_descriptor_ = file->message_type(34);
  static const int RouletteHistory_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouletteHistory, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouletteHistory, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouletteHistory, itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouletteHistory, cost_),
  };
  RouletteHistory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RouletteHistory_descriptor_,
      RouletteHistory::default_instance_,
      RouletteHistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouletteHistory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouletteHistory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RouletteHistory));
  Activity_CS_Roulette_Do_descriptor_ = file->message_type(35);
  static const int Activity_CS_Roulette_Do_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_Roulette_Do, type_),
  };
  Activity_CS_Roulette_Do_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_CS_Roulette_Do_descriptor_,
      Activity_CS_Roulette_Do::default_instance_,
      Activity_CS_Roulette_Do_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_Roulette_Do, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_Roulette_Do, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_CS_Roulette_Do));
  Activity_SC_Roulette_Do_descriptor_ = file->message_type(36);
  static const int Activity_SC_Roulette_Do_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_Roulette_Do, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_Roulette_Do, cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_Roulette_Do, reward_list_),
  };
  Activity_SC_Roulette_Do_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_SC_Roulette_Do_descriptor_,
      Activity_SC_Roulette_Do::default_instance_,
      Activity_SC_Roulette_Do_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_Roulette_Do, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_Roulette_Do, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_SC_Roulette_Do));
  Activity_CS_Roulette_Exchange_descriptor_ = file->message_type(37);
  static const int Activity_CS_Roulette_Exchange_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_Roulette_Exchange, id_),
  };
  Activity_CS_Roulette_Exchange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_CS_Roulette_Exchange_descriptor_,
      Activity_CS_Roulette_Exchange::default_instance_,
      Activity_CS_Roulette_Exchange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_Roulette_Exchange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_Roulette_Exchange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_CS_Roulette_Exchange));
  Activity_SC_Roulette_Exchange_descriptor_ = file->message_type(38);
  static const int Activity_SC_Roulette_Exchange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_Roulette_Exchange, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_Roulette_Exchange, result_),
  };
  Activity_SC_Roulette_Exchange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_SC_Roulette_Exchange_descriptor_,
      Activity_SC_Roulette_Exchange::default_instance_,
      Activity_SC_Roulette_Exchange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_Roulette_Exchange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_Roulette_Exchange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_SC_Roulette_Exchange));
  Activity_CS_Roulette_GetHistory_descriptor_ = file->message_type(39);
  static const int Activity_CS_Roulette_GetHistory_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_Roulette_GetHistory, type_),
  };
  Activity_CS_Roulette_GetHistory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_CS_Roulette_GetHistory_descriptor_,
      Activity_CS_Roulette_GetHistory::default_instance_,
      Activity_CS_Roulette_GetHistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_Roulette_GetHistory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_Roulette_GetHistory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_CS_Roulette_GetHistory));
  Activity_SC_Roulette_GetHistory_descriptor_ = file->message_type(40);
  static const int Activity_SC_Roulette_GetHistory_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_Roulette_GetHistory, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_Roulette_GetHistory, history_list_),
  };
  Activity_SC_Roulette_GetHistory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_SC_Roulette_GetHistory_descriptor_,
      Activity_SC_Roulette_GetHistory::default_instance_,
      Activity_SC_Roulette_GetHistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_Roulette_GetHistory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_Roulette_GetHistory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_SC_Roulette_GetHistory));
  Activity_SC_Change_descriptor_ = file->message_type(41);
  static const int Activity_SC_Change_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_Change, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_Change, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_Change, data_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_Change, data_),
  };
  Activity_SC_Change_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_SC_Change_descriptor_,
      Activity_SC_Change::default_instance_,
      Activity_SC_Change_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_Change, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_Change, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_SC_Change));
  Activity_SC_Roulette_ExchangeCount_descriptor_ = file->message_type(42);
  static const int Activity_SC_Roulette_ExchangeCount_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_Roulette_ExchangeCount, exchange_count_),
  };
  Activity_SC_Roulette_ExchangeCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_SC_Roulette_ExchangeCount_descriptor_,
      Activity_SC_Roulette_ExchangeCount::default_instance_,
      Activity_SC_Roulette_ExchangeCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_Roulette_ExchangeCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_Roulette_ExchangeCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_SC_Roulette_ExchangeCount));
  ContinuousChargeInfo_descriptor_ = file->message_type(43);
  static const int ContinuousChargeInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContinuousChargeInfo, activity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContinuousChargeInfo, today_diamonds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContinuousChargeInfo, days_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContinuousChargeInfo, received_awards_),
  };
  ContinuousChargeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContinuousChargeInfo_descriptor_,
      ContinuousChargeInfo::default_instance_,
      ContinuousChargeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContinuousChargeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContinuousChargeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContinuousChargeInfo));
  Activity_CS_ContinuousCharge_Query_descriptor_ = file->message_type(44);
  static const int Activity_CS_ContinuousCharge_Query_offsets_[1] = {
  };
  Activity_CS_ContinuousCharge_Query_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_CS_ContinuousCharge_Query_descriptor_,
      Activity_CS_ContinuousCharge_Query::default_instance_,
      Activity_CS_ContinuousCharge_Query_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_ContinuousCharge_Query, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_ContinuousCharge_Query, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_CS_ContinuousCharge_Query));
  Activity_SC_ContinuousCharge_Query_descriptor_ = file->message_type(45);
  static const int Activity_SC_ContinuousCharge_Query_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_ContinuousCharge_Query, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_ContinuousCharge_Query, info_),
  };
  Activity_SC_ContinuousCharge_Query_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_SC_ContinuousCharge_Query_descriptor_,
      Activity_SC_ContinuousCharge_Query::default_instance_,
      Activity_SC_ContinuousCharge_Query_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_ContinuousCharge_Query, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_ContinuousCharge_Query, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_SC_ContinuousCharge_Query));
  Activity_CS_ContinuousCharge_Do_descriptor_ = file->message_type(46);
  static const int Activity_CS_ContinuousCharge_Do_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_ContinuousCharge_Do, id_),
  };
  Activity_CS_ContinuousCharge_Do_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_CS_ContinuousCharge_Do_descriptor_,
      Activity_CS_ContinuousCharge_Do::default_instance_,
      Activity_CS_ContinuousCharge_Do_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_ContinuousCharge_Do, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_ContinuousCharge_Do, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_CS_ContinuousCharge_Do));
  Activity_SC_ContinuousCharge_Do_descriptor_ = file->message_type(47);
  static const int Activity_SC_ContinuousCharge_Do_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_ContinuousCharge_Do, res_),
  };
  Activity_SC_ContinuousCharge_Do_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_SC_ContinuousCharge_Do_descriptor_,
      Activity_SC_ContinuousCharge_Do::default_instance_,
      Activity_SC_ContinuousCharge_Do_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_ContinuousCharge_Do, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_ContinuousCharge_Do, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_SC_ContinuousCharge_Do));
  SpecialSaleInfo_descriptor_ = file->message_type(48);
  static const int SpecialSaleInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialSaleInfo, activity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialSaleInfo, received_awards_),
  };
  SpecialSaleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpecialSaleInfo_descriptor_,
      SpecialSaleInfo::default_instance_,
      SpecialSaleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialSaleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialSaleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpecialSaleInfo));
  Activity_CS_SpecialSale_Query_descriptor_ = file->message_type(49);
  static const int Activity_CS_SpecialSale_Query_offsets_[1] = {
  };
  Activity_CS_SpecialSale_Query_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_CS_SpecialSale_Query_descriptor_,
      Activity_CS_SpecialSale_Query::default_instance_,
      Activity_CS_SpecialSale_Query_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_SpecialSale_Query, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_SpecialSale_Query, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_CS_SpecialSale_Query));
  Activity_SC_SpecialSale_Query_descriptor_ = file->message_type(50);
  static const int Activity_SC_SpecialSale_Query_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_SpecialSale_Query, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_SpecialSale_Query, info_),
  };
  Activity_SC_SpecialSale_Query_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_SC_SpecialSale_Query_descriptor_,
      Activity_SC_SpecialSale_Query::default_instance_,
      Activity_SC_SpecialSale_Query_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_SpecialSale_Query, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_SpecialSale_Query, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_SC_SpecialSale_Query));
  Activity_CS_SpecialSale_Do_descriptor_ = file->message_type(51);
  static const int Activity_CS_SpecialSale_Do_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_SpecialSale_Do, id_),
  };
  Activity_CS_SpecialSale_Do_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_CS_SpecialSale_Do_descriptor_,
      Activity_CS_SpecialSale_Do::default_instance_,
      Activity_CS_SpecialSale_Do_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_SpecialSale_Do, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_SpecialSale_Do, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_CS_SpecialSale_Do));
  Activity_SC_SpecialSale_Do_descriptor_ = file->message_type(52);
  static const int Activity_SC_SpecialSale_Do_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_SpecialSale_Do, res_),
  };
  Activity_SC_SpecialSale_Do_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_SC_SpecialSale_Do_descriptor_,
      Activity_SC_SpecialSale_Do::default_instance_,
      Activity_SC_SpecialSale_Do_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_SpecialSale_Do, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_SpecialSale_Do, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_SC_SpecialSale_Do));
  LostTreasureRecord_descriptor_ = file->message_type(53);
  static const int LostTreasureRecord_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LostTreasureRecord, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LostTreasureRecord, item_),
  };
  LostTreasureRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LostTreasureRecord_descriptor_,
      LostTreasureRecord::default_instance_,
      LostTreasureRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LostTreasureRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LostTreasureRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LostTreasureRecord));
  LostTreasure_descriptor_ = file->message_type(54);
  static const int LostTreasure_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LostTreasure, records_),
  };
  LostTreasure_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LostTreasure_descriptor_,
      LostTreasure::default_instance_,
      LostTreasure_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LostTreasure, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LostTreasure, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LostTreasure));
  LostTreasureBag_descriptor_ = file->message_type(55);
  static const int LostTreasureBag_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LostTreasureBag, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LostTreasureBag, equips_),
  };
  LostTreasureBag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LostTreasureBag_descriptor_,
      LostTreasureBag::default_instance_,
      LostTreasureBag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LostTreasureBag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LostTreasureBag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LostTreasureBag));
  LostTreasureInfo_descriptor_ = file->message_type(56);
  static const int LostTreasureInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LostTreasureInfo, integral_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LostTreasureInfo, bag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LostTreasureInfo, records_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LostTreasureInfo, record_forever_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LostTreasureInfo, record_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LostTreasureInfo, record_week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LostTreasureInfo, times_),
  };
  LostTreasureInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LostTreasureInfo_descriptor_,
      LostTreasureInfo::default_instance_,
      LostTreasureInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LostTreasureInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LostTreasureInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LostTreasureInfo));
  Activity_CS_LostTreasure_Do_descriptor_ = file->message_type(57);
  static const int Activity_CS_LostTreasure_Do_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_LostTreasure_Do, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_LostTreasure_Do, opt_),
  };
  Activity_CS_LostTreasure_Do_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_CS_LostTreasure_Do_descriptor_,
      Activity_CS_LostTreasure_Do::default_instance_,
      Activity_CS_LostTreasure_Do_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_LostTreasure_Do, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_LostTreasure_Do, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_CS_LostTreasure_Do));
  Activity_SC_LostTreasure_Do_descriptor_ = file->message_type(58);
  static const int Activity_SC_LostTreasure_Do_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_LostTreasure_Do, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_LostTreasure_Do, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_LostTreasure_Do, integral_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_LostTreasure_Do, items_),
  };
  Activity_SC_LostTreasure_Do_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_SC_LostTreasure_Do_descriptor_,
      Activity_SC_LostTreasure_Do::default_instance_,
      Activity_SC_LostTreasure_Do_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_LostTreasure_Do, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_LostTreasure_Do, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_SC_LostTreasure_Do));
  Activity_CS_LostTreasure_Exchange_descriptor_ = file->message_type(59);
  static const int Activity_CS_LostTreasure_Exchange_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_LostTreasure_Exchange, id_),
  };
  Activity_CS_LostTreasure_Exchange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_CS_LostTreasure_Exchange_descriptor_,
      Activity_CS_LostTreasure_Exchange::default_instance_,
      Activity_CS_LostTreasure_Exchange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_LostTreasure_Exchange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_LostTreasure_Exchange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_CS_LostTreasure_Exchange));
  Activity_SC_LostTreasure_Exchange_descriptor_ = file->message_type(60);
  static const int Activity_SC_LostTreasure_Exchange_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_LostTreasure_Exchange, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_LostTreasure_Exchange, integral_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_LostTreasure_Exchange, id_),
  };
  Activity_SC_LostTreasure_Exchange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_SC_LostTreasure_Exchange_descriptor_,
      Activity_SC_LostTreasure_Exchange::default_instance_,
      Activity_SC_LostTreasure_Exchange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_LostTreasure_Exchange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_LostTreasure_Exchange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_SC_LostTreasure_Exchange));
  Activity_CS_LostTreasure_Query_descriptor_ = file->message_type(61);
  static const int Activity_CS_LostTreasure_Query_offsets_[1] = {
  };
  Activity_CS_LostTreasure_Query_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_CS_LostTreasure_Query_descriptor_,
      Activity_CS_LostTreasure_Query::default_instance_,
      Activity_CS_LostTreasure_Query_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_LostTreasure_Query, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_LostTreasure_Query, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_CS_LostTreasure_Query));
  Activity_SC_LostTreasure_Query_descriptor_ = file->message_type(62);
  static const int Activity_SC_LostTreasure_Query_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_LostTreasure_Query, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_LostTreasure_Query, info_),
  };
  Activity_SC_LostTreasure_Query_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_SC_LostTreasure_Query_descriptor_,
      Activity_SC_LostTreasure_Query::default_instance_,
      Activity_SC_LostTreasure_Query_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_LostTreasure_Query, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_LostTreasure_Query, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_SC_LostTreasure_Query));
  Activity_CS_LostTreasure_Fetch_descriptor_ = file->message_type(63);
  static const int Activity_CS_LostTreasure_Fetch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_LostTreasure_Fetch, uuid_),
  };
  Activity_CS_LostTreasure_Fetch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_CS_LostTreasure_Fetch_descriptor_,
      Activity_CS_LostTreasure_Fetch::default_instance_,
      Activity_CS_LostTreasure_Fetch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_LostTreasure_Fetch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_LostTreasure_Fetch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_CS_LostTreasure_Fetch));
  Activity_SC_LostTreasure_Fetch_descriptor_ = file->message_type(64);
  static const int Activity_SC_LostTreasure_Fetch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_LostTreasure_Fetch, res_),
  };
  Activity_SC_LostTreasure_Fetch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_SC_LostTreasure_Fetch_descriptor_,
      Activity_SC_LostTreasure_Fetch::default_instance_,
      Activity_SC_LostTreasure_Fetch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_LostTreasure_Fetch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_LostTreasure_Fetch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_SC_LostTreasure_Fetch));
  Activity_CS_LostTreasure_QueryRecord_descriptor_ = file->message_type(65);
  static const int Activity_CS_LostTreasure_QueryRecord_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_LostTreasure_QueryRecord, from_),
  };
  Activity_CS_LostTreasure_QueryRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_CS_LostTreasure_QueryRecord_descriptor_,
      Activity_CS_LostTreasure_QueryRecord::default_instance_,
      Activity_CS_LostTreasure_QueryRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_LostTreasure_QueryRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_LostTreasure_QueryRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_CS_LostTreasure_QueryRecord));
  Activity_SC_LostTreasure_QueryRecord_descriptor_ = file->message_type(66);
  static const int Activity_SC_LostTreasure_QueryRecord_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_LostTreasure_QueryRecord, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_LostTreasure_QueryRecord, records_),
  };
  Activity_SC_LostTreasure_QueryRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_SC_LostTreasure_QueryRecord_descriptor_,
      Activity_SC_LostTreasure_QueryRecord::default_instance_,
      Activity_SC_LostTreasure_QueryRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_LostTreasure_QueryRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_LostTreasure_QueryRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_SC_LostTreasure_QueryRecord));
  MoneyTreeInfo_descriptor_ = file->message_type(67);
  static const int MoneyTreeInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyTreeInfo, money_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyTreeInfo, money_free_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyTreeInfo, last_free_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyTreeInfo, exp_times_),
  };
  MoneyTreeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneyTreeInfo_descriptor_,
      MoneyTreeInfo::default_instance_,
      MoneyTreeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyTreeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyTreeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneyTreeInfo));
  Activity_CS_MoneyTree_Query_descriptor_ = file->message_type(68);
  static const int Activity_CS_MoneyTree_Query_offsets_[1] = {
  };
  Activity_CS_MoneyTree_Query_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_CS_MoneyTree_Query_descriptor_,
      Activity_CS_MoneyTree_Query::default_instance_,
      Activity_CS_MoneyTree_Query_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_MoneyTree_Query, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_MoneyTree_Query, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_CS_MoneyTree_Query));
  Activity_SC_MoneyTree_Query_descriptor_ = file->message_type(69);
  static const int Activity_SC_MoneyTree_Query_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_MoneyTree_Query, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_MoneyTree_Query, info_),
  };
  Activity_SC_MoneyTree_Query_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_SC_MoneyTree_Query_descriptor_,
      Activity_SC_MoneyTree_Query::default_instance_,
      Activity_SC_MoneyTree_Query_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_MoneyTree_Query, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_MoneyTree_Query, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_SC_MoneyTree_Query));
  Activity_CS_MoneyTree_Do_descriptor_ = file->message_type(70);
  static const int Activity_CS_MoneyTree_Do_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_MoneyTree_Do, id_),
  };
  Activity_CS_MoneyTree_Do_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_CS_MoneyTree_Do_descriptor_,
      Activity_CS_MoneyTree_Do::default_instance_,
      Activity_CS_MoneyTree_Do_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_MoneyTree_Do, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_MoneyTree_Do, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_CS_MoneyTree_Do));
  Activity_SC_MoneyTree_Do_descriptor_ = file->message_type(71);
  static const int Activity_SC_MoneyTree_Do_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_MoneyTree_Do, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_MoneyTree_Do, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_MoneyTree_Do, index_),
  };
  Activity_SC_MoneyTree_Do_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_SC_MoneyTree_Do_descriptor_,
      Activity_SC_MoneyTree_Do::default_instance_,
      Activity_SC_MoneyTree_Do_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_MoneyTree_Do, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_MoneyTree_Do, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_SC_MoneyTree_Do));
  DiscountStoreInfo_descriptor_ = file->message_type(72);
  static const int DiscountStoreInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscountStoreInfo, records_),
  };
  DiscountStoreInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DiscountStoreInfo_descriptor_,
      DiscountStoreInfo::default_instance_,
      DiscountStoreInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscountStoreInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscountStoreInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DiscountStoreInfo));
  Activity_CS_DiscountStore_Query_descriptor_ = file->message_type(73);
  static const int Activity_CS_DiscountStore_Query_offsets_[1] = {
  };
  Activity_CS_DiscountStore_Query_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_CS_DiscountStore_Query_descriptor_,
      Activity_CS_DiscountStore_Query::default_instance_,
      Activity_CS_DiscountStore_Query_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_DiscountStore_Query, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_DiscountStore_Query, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_CS_DiscountStore_Query));
  Activity_SC_DiscountStore_Query_descriptor_ = file->message_type(74);
  static const int Activity_SC_DiscountStore_Query_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_DiscountStore_Query, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_DiscountStore_Query, info_),
  };
  Activity_SC_DiscountStore_Query_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_SC_DiscountStore_Query_descriptor_,
      Activity_SC_DiscountStore_Query::default_instance_,
      Activity_SC_DiscountStore_Query_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_DiscountStore_Query, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_DiscountStore_Query, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_SC_DiscountStore_Query));
  Activity_CS_DiscountStore_Do_descriptor_ = file->message_type(75);
  static const int Activity_CS_DiscountStore_Do_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_DiscountStore_Do, id_),
  };
  Activity_CS_DiscountStore_Do_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_CS_DiscountStore_Do_descriptor_,
      Activity_CS_DiscountStore_Do::default_instance_,
      Activity_CS_DiscountStore_Do_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_DiscountStore_Do, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_CS_DiscountStore_Do, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_CS_DiscountStore_Do));
  Activity_SC_DiscountStore_Do_descriptor_ = file->message_type(76);
  static const int Activity_SC_DiscountStore_Do_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_DiscountStore_Do, res_),
  };
  Activity_SC_DiscountStore_Do_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_SC_DiscountStore_Do_descriptor_,
      Activity_SC_DiscountStore_Do::default_instance_,
      Activity_SC_DiscountStore_Do_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_DiscountStore_Do, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_SC_DiscountStore_Do, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_SC_DiscountStore_Do));
  eActivityDataType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_marketing_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SingleChargeBigGiftData_descriptor_, &SingleChargeBigGiftData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_CS_LimitCharge_Query_descriptor_, &Activity_CS_LimitCharge_Query::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_SC_LimitCharge_Query_descriptor_, &Activity_SC_LimitCharge_Query::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_CS_LimitCharge_Do_descriptor_, &Activity_CS_LimitCharge_Do::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_SC_LimitCharge_Do_descriptor_, &Activity_SC_LimitCharge_Do::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoAllLimitChargeInfo_descriptor_, &ProtoAllLimitChargeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoAllChargeBigGiftInfo_descriptor_, &ProtoAllChargeBigGiftInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoAllTotelChargeGiftInfo_descriptor_, &ProtoAllTotelChargeGiftInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SingleSevenDayInfo_descriptor_, &SingleSevenDayInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoAllSevenDayTargetInfo_descriptor_, &ProtoAllSevenDayTargetInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_CS_DailyFirstCharge_Query_descriptor_, &Activity_CS_DailyFirstCharge_Query::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_CS_DailyFirstCharge_Do_descriptor_, &Activity_CS_DailyFirstCharge_Do::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_SC_DailyFirstCharge_Query_descriptor_, &Activity_SC_DailyFirstCharge_Query::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_SC_DailyFirstCharge_Do_descriptor_, &Activity_SC_DailyFirstCharge_Do::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Marketing_CS_QuerySevenDayTargetInfo_descriptor_, &Marketing_CS_QuerySevenDayTargetInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Marketing_SC_QuerySevenDayTargetInfo_descriptor_, &Marketing_SC_QuerySevenDayTargetInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Marketing_CS_GetSevenDayTargetReward_descriptor_, &Marketing_CS_GetSevenDayTargetReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Marketing_SC_GetSevenDayTargetReward_descriptor_, &Marketing_SC_GetSevenDayTargetReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_CS_GetSevenDayTargetIntegralAward_descriptor_, &Activity_CS_GetSevenDayTargetIntegralAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_SC_GetSevenDayTargetIntegralAward_descriptor_, &Activity_SC_GetSevenDayTargetIntegralAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Marketing_SC_UpdateServerOpenDay_descriptor_, &Marketing_SC_UpdateServerOpenDay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_CS_DiamondDouble_GetHistory_descriptor_, &Activity_CS_DiamondDouble_GetHistory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_SC_DiamondDouble_GetHistory_descriptor_, &Activity_SC_DiamondDouble_GetHistory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_SC_DiamondDouble_Roll_descriptor_, &Activity_SC_DiamondDouble_Roll::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SingleInvestReward_descriptor_, &SingleInvestReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SingleInvestMent_descriptor_, &SingleInvestMent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_CS_Investment_GetInfo_descriptor_, &Activity_CS_Investment_GetInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_CS_Investment_DoReward_descriptor_, &Activity_CS_Investment_DoReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_CS_Investment_Open_descriptor_, &Activity_CS_Investment_Open::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_SC_Investment_GetInfo_descriptor_, &Activity_SC_Investment_GetInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_SC_Investment_DoReward_descriptor_, &Activity_SC_Investment_DoReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_SC_Investment_Open_descriptor_, &Activity_SC_Investment_Open::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoAllInvestmentInfo_descriptor_, &ProtoAllInvestmentInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoAllDailyFirstChargeInfo_descriptor_, &ProtoAllDailyFirstChargeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RouletteHistory_descriptor_, &RouletteHistory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_CS_Roulette_Do_descriptor_, &Activity_CS_Roulette_Do::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_SC_Roulette_Do_descriptor_, &Activity_SC_Roulette_Do::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_CS_Roulette_Exchange_descriptor_, &Activity_CS_Roulette_Exchange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_SC_Roulette_Exchange_descriptor_, &Activity_SC_Roulette_Exchange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_CS_Roulette_GetHistory_descriptor_, &Activity_CS_Roulette_GetHistory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_SC_Roulette_GetHistory_descriptor_, &Activity_SC_Roulette_GetHistory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_SC_Change_descriptor_, &Activity_SC_Change::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_SC_Roulette_ExchangeCount_descriptor_, &Activity_SC_Roulette_ExchangeCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContinuousChargeInfo_descriptor_, &ContinuousChargeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_CS_ContinuousCharge_Query_descriptor_, &Activity_CS_ContinuousCharge_Query::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_SC_ContinuousCharge_Query_descriptor_, &Activity_SC_ContinuousCharge_Query::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_CS_ContinuousCharge_Do_descriptor_, &Activity_CS_ContinuousCharge_Do::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_SC_ContinuousCharge_Do_descriptor_, &Activity_SC_ContinuousCharge_Do::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpecialSaleInfo_descriptor_, &SpecialSaleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_CS_SpecialSale_Query_descriptor_, &Activity_CS_SpecialSale_Query::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_SC_SpecialSale_Query_descriptor_, &Activity_SC_SpecialSale_Query::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_CS_SpecialSale_Do_descriptor_, &Activity_CS_SpecialSale_Do::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_SC_SpecialSale_Do_descriptor_, &Activity_SC_SpecialSale_Do::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LostTreasureRecord_descriptor_, &LostTreasureRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LostTreasure_descriptor_, &LostTreasure::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LostTreasureBag_descriptor_, &LostTreasureBag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LostTreasureInfo_descriptor_, &LostTreasureInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_CS_LostTreasure_Do_descriptor_, &Activity_CS_LostTreasure_Do::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_SC_LostTreasure_Do_descriptor_, &Activity_SC_LostTreasure_Do::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_CS_LostTreasure_Exchange_descriptor_, &Activity_CS_LostTreasure_Exchange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_SC_LostTreasure_Exchange_descriptor_, &Activity_SC_LostTreasure_Exchange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_CS_LostTreasure_Query_descriptor_, &Activity_CS_LostTreasure_Query::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_SC_LostTreasure_Query_descriptor_, &Activity_SC_LostTreasure_Query::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_CS_LostTreasure_Fetch_descriptor_, &Activity_CS_LostTreasure_Fetch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_SC_LostTreasure_Fetch_descriptor_, &Activity_SC_LostTreasure_Fetch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_CS_LostTreasure_QueryRecord_descriptor_, &Activity_CS_LostTreasure_QueryRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_SC_LostTreasure_QueryRecord_descriptor_, &Activity_SC_LostTreasure_QueryRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneyTreeInfo_descriptor_, &MoneyTreeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_CS_MoneyTree_Query_descriptor_, &Activity_CS_MoneyTree_Query::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_SC_MoneyTree_Query_descriptor_, &Activity_SC_MoneyTree_Query::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_CS_MoneyTree_Do_descriptor_, &Activity_CS_MoneyTree_Do::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_SC_MoneyTree_Do_descriptor_, &Activity_SC_MoneyTree_Do::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DiscountStoreInfo_descriptor_, &DiscountStoreInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_CS_DiscountStore_Query_descriptor_, &Activity_CS_DiscountStore_Query::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_SC_DiscountStore_Query_descriptor_, &Activity_SC_DiscountStore_Query::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_CS_DiscountStore_Do_descriptor_, &Activity_CS_DiscountStore_Do::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_SC_DiscountStore_Do_descriptor_, &Activity_SC_DiscountStore_Do::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_marketing_2eproto() {
  delete SingleChargeBigGiftData::default_instance_;
  delete SingleChargeBigGiftData_reflection_;
  delete Activity_CS_LimitCharge_Query::default_instance_;
  delete Activity_CS_LimitCharge_Query_reflection_;
  delete Activity_SC_LimitCharge_Query::default_instance_;
  delete Activity_SC_LimitCharge_Query_reflection_;
  delete Activity_CS_LimitCharge_Do::default_instance_;
  delete Activity_CS_LimitCharge_Do_reflection_;
  delete Activity_SC_LimitCharge_Do::default_instance_;
  delete Activity_SC_LimitCharge_Do_reflection_;
  delete ProtoAllLimitChargeInfo::default_instance_;
  delete ProtoAllLimitChargeInfo_reflection_;
  delete ProtoAllChargeBigGiftInfo::default_instance_;
  delete ProtoAllChargeBigGiftInfo_reflection_;
  delete ProtoAllTotelChargeGiftInfo::default_instance_;
  delete ProtoAllTotelChargeGiftInfo_reflection_;
  delete SingleSevenDayInfo::default_instance_;
  delete SingleSevenDayInfo_reflection_;
  delete ProtoAllSevenDayTargetInfo::default_instance_;
  delete ProtoAllSevenDayTargetInfo_reflection_;
  delete Activity_CS_DailyFirstCharge_Query::default_instance_;
  delete Activity_CS_DailyFirstCharge_Query_reflection_;
  delete Activity_CS_DailyFirstCharge_Do::default_instance_;
  delete Activity_CS_DailyFirstCharge_Do_reflection_;
  delete Activity_SC_DailyFirstCharge_Query::default_instance_;
  delete Activity_SC_DailyFirstCharge_Query_reflection_;
  delete Activity_SC_DailyFirstCharge_Do::default_instance_;
  delete Activity_SC_DailyFirstCharge_Do_reflection_;
  delete Marketing_CS_QuerySevenDayTargetInfo::default_instance_;
  delete Marketing_CS_QuerySevenDayTargetInfo_reflection_;
  delete Marketing_SC_QuerySevenDayTargetInfo::default_instance_;
  delete Marketing_SC_QuerySevenDayTargetInfo_reflection_;
  delete Marketing_CS_GetSevenDayTargetReward::default_instance_;
  delete Marketing_CS_GetSevenDayTargetReward_reflection_;
  delete Marketing_SC_GetSevenDayTargetReward::default_instance_;
  delete Marketing_SC_GetSevenDayTargetReward_reflection_;
  delete Activity_CS_GetSevenDayTargetIntegralAward::default_instance_;
  delete Activity_CS_GetSevenDayTargetIntegralAward_reflection_;
  delete Activity_SC_GetSevenDayTargetIntegralAward::default_instance_;
  delete Activity_SC_GetSevenDayTargetIntegralAward_reflection_;
  delete Marketing_SC_UpdateServerOpenDay::default_instance_;
  delete Marketing_SC_UpdateServerOpenDay_reflection_;
  delete Activity_CS_DiamondDouble_GetHistory::default_instance_;
  delete Activity_CS_DiamondDouble_GetHistory_reflection_;
  delete Activity_SC_DiamondDouble_GetHistory::default_instance_;
  delete Activity_SC_DiamondDouble_GetHistory_reflection_;
  delete Activity_SC_DiamondDouble_Roll::default_instance_;
  delete Activity_SC_DiamondDouble_Roll_reflection_;
  delete SingleInvestReward::default_instance_;
  delete SingleInvestReward_reflection_;
  delete SingleInvestMent::default_instance_;
  delete SingleInvestMent_reflection_;
  delete Activity_CS_Investment_GetInfo::default_instance_;
  delete Activity_CS_Investment_GetInfo_reflection_;
  delete Activity_CS_Investment_DoReward::default_instance_;
  delete Activity_CS_Investment_DoReward_reflection_;
  delete Activity_CS_Investment_Open::default_instance_;
  delete Activity_CS_Investment_Open_reflection_;
  delete Activity_SC_Investment_GetInfo::default_instance_;
  delete Activity_SC_Investment_GetInfo_reflection_;
  delete Activity_SC_Investment_DoReward::default_instance_;
  delete Activity_SC_Investment_DoReward_reflection_;
  delete Activity_SC_Investment_Open::default_instance_;
  delete Activity_SC_Investment_Open_reflection_;
  delete ProtoAllInvestmentInfo::default_instance_;
  delete ProtoAllInvestmentInfo_reflection_;
  delete ProtoAllDailyFirstChargeInfo::default_instance_;
  delete ProtoAllDailyFirstChargeInfo_reflection_;
  delete RouletteHistory::default_instance_;
  delete RouletteHistory_reflection_;
  delete Activity_CS_Roulette_Do::default_instance_;
  delete Activity_CS_Roulette_Do_reflection_;
  delete Activity_SC_Roulette_Do::default_instance_;
  delete Activity_SC_Roulette_Do_reflection_;
  delete Activity_CS_Roulette_Exchange::default_instance_;
  delete Activity_CS_Roulette_Exchange_reflection_;
  delete Activity_SC_Roulette_Exchange::default_instance_;
  delete Activity_SC_Roulette_Exchange_reflection_;
  delete Activity_CS_Roulette_GetHistory::default_instance_;
  delete Activity_CS_Roulette_GetHistory_reflection_;
  delete Activity_SC_Roulette_GetHistory::default_instance_;
  delete Activity_SC_Roulette_GetHistory_reflection_;
  delete Activity_SC_Change::default_instance_;
  delete Activity_SC_Change_reflection_;
  delete Activity_SC_Roulette_ExchangeCount::default_instance_;
  delete Activity_SC_Roulette_ExchangeCount_reflection_;
  delete ContinuousChargeInfo::default_instance_;
  delete ContinuousChargeInfo_reflection_;
  delete Activity_CS_ContinuousCharge_Query::default_instance_;
  delete Activity_CS_ContinuousCharge_Query_reflection_;
  delete Activity_SC_ContinuousCharge_Query::default_instance_;
  delete Activity_SC_ContinuousCharge_Query_reflection_;
  delete Activity_CS_ContinuousCharge_Do::default_instance_;
  delete Activity_CS_ContinuousCharge_Do_reflection_;
  delete Activity_SC_ContinuousCharge_Do::default_instance_;
  delete Activity_SC_ContinuousCharge_Do_reflection_;
  delete SpecialSaleInfo::default_instance_;
  delete SpecialSaleInfo_reflection_;
  delete Activity_CS_SpecialSale_Query::default_instance_;
  delete Activity_CS_SpecialSale_Query_reflection_;
  delete Activity_SC_SpecialSale_Query::default_instance_;
  delete Activity_SC_SpecialSale_Query_reflection_;
  delete Activity_CS_SpecialSale_Do::default_instance_;
  delete Activity_CS_SpecialSale_Do_reflection_;
  delete Activity_SC_SpecialSale_Do::default_instance_;
  delete Activity_SC_SpecialSale_Do_reflection_;
  delete LostTreasureRecord::default_instance_;
  delete LostTreasureRecord_reflection_;
  delete LostTreasure::default_instance_;
  delete LostTreasure_reflection_;
  delete LostTreasureBag::default_instance_;
  delete LostTreasureBag_reflection_;
  delete LostTreasureInfo::default_instance_;
  delete LostTreasureInfo_reflection_;
  delete Activity_CS_LostTreasure_Do::default_instance_;
  delete Activity_CS_LostTreasure_Do_reflection_;
  delete Activity_SC_LostTreasure_Do::default_instance_;
  delete Activity_SC_LostTreasure_Do_reflection_;
  delete Activity_CS_LostTreasure_Exchange::default_instance_;
  delete Activity_CS_LostTreasure_Exchange_reflection_;
  delete Activity_SC_LostTreasure_Exchange::default_instance_;
  delete Activity_SC_LostTreasure_Exchange_reflection_;
  delete Activity_CS_LostTreasure_Query::default_instance_;
  delete Activity_CS_LostTreasure_Query_reflection_;
  delete Activity_SC_LostTreasure_Query::default_instance_;
  delete Activity_SC_LostTreasure_Query_reflection_;
  delete Activity_CS_LostTreasure_Fetch::default_instance_;
  delete Activity_CS_LostTreasure_Fetch_reflection_;
  delete Activity_SC_LostTreasure_Fetch::default_instance_;
  delete Activity_SC_LostTreasure_Fetch_reflection_;
  delete Activity_CS_LostTreasure_QueryRecord::default_instance_;
  delete Activity_CS_LostTreasure_QueryRecord_reflection_;
  delete Activity_SC_LostTreasure_QueryRecord::default_instance_;
  delete Activity_SC_LostTreasure_QueryRecord_reflection_;
  delete MoneyTreeInfo::default_instance_;
  delete MoneyTreeInfo_reflection_;
  delete Activity_CS_MoneyTree_Query::default_instance_;
  delete Activity_CS_MoneyTree_Query_reflection_;
  delete Activity_SC_MoneyTree_Query::default_instance_;
  delete Activity_SC_MoneyTree_Query_reflection_;
  delete Activity_CS_MoneyTree_Do::default_instance_;
  delete Activity_CS_MoneyTree_Do_reflection_;
  delete Activity_SC_MoneyTree_Do::default_instance_;
  delete Activity_SC_MoneyTree_Do_reflection_;
  delete DiscountStoreInfo::default_instance_;
  delete DiscountStoreInfo_reflection_;
  delete Activity_CS_DiscountStore_Query::default_instance_;
  delete Activity_CS_DiscountStore_Query_reflection_;
  delete Activity_SC_DiscountStore_Query::default_instance_;
  delete Activity_SC_DiscountStore_Query_reflection_;
  delete Activity_CS_DiscountStore_Do::default_instance_;
  delete Activity_CS_DiscountStore_Do_reflection_;
  delete Activity_SC_DiscountStore_Do::default_instance_;
  delete Activity_SC_DiscountStore_Do_reflection_;
}

void protobuf_AddDesc_marketing_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::message::protobuf_AddDesc_common_2eproto();
  ::proto::message::protobuf_AddDesc_item_2eproto();
  ::proto::message::protobuf_AddDesc_welfare_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017marketing.proto\022\rproto.message\032\014common"
    ".proto\032\nitem.proto\032\rwelfare.proto\"J\n\027Sin"
    "gleChargeBigGiftData\022\n\n\002id\030\001 \002(\005\022\021\n\tisre"
    "cived\030\002 \002(\005\022\020\n\010progress\030\003 \001(\005\"5\n\035Activit"
    "y_CS_LimitCharge_Query\022\024\n\014activityType\030\001"
    " \002(\005\"k\n\035Activity_SC_LimitCharge_Query\022\024\n"
    "\014activityType\030\001 \002(\005\0224\n\004info\030\002 \003(\0132&.prot"
    "o.message.SingleChargeBigGiftData\"\?\n\032Act"
    "ivity_CS_LimitCharge_Do\022\024\n\014activityType\030"
    "\001 \002(\005\022\013\n\003nID\030\002 \002(\005\"R\n\032Activity_SC_LimitC"
    "harge_Do\022\024\n\014activityType\030\001 \002(\005\022\016\n\006result"
    "\030\002 \002(\r\022\016\n\006dropid\030\003 \001(\r\"\342\001\n\027ProtoAllLimit"
    "ChargeInfo\022\?\n\017LimitChargeinfo\030\001 \003(\0132&.pr"
    "oto.message.SingleChargeBigGiftData\022A\n\021C"
    "hargeBigGiftinfo\030\002 \003(\0132&.proto.message.S"
    "ingleChargeBigGiftData\022C\n\023TotalChargeGif"
    "tinfo\030\003 \003(\0132&.proto.message.SingleCharge"
    "BigGiftData\"Q\n\031ProtoAllChargeBigGiftInfo"
    "\0224\n\004info\030\001 \003(\0132&.proto.message.SingleCha"
    "rgeBigGiftData\"S\n\033ProtoAllTotelChargeGif"
    "tInfo\0224\n\004info\030\001 \003(\0132&.proto.message.Sing"
    "leChargeBigGiftData\"D\n\022SingleSevenDayInf"
    "o\022\013\n\003nID\030\001 \002(\005\022\021\n\tnProgress\030\002 \002(\005\022\016\n\006sta"
    "tus\030\003 \002(\005\"\220\001\n\032ProtoAllSevenDayTargetInfo"
    "\0222\n\007allInfo\030\001 \003(\0132!.proto.message.Single"
    "SevenDayInfo\022\027\n\017received_awards\030\002 \003(\r\022\023\n"
    "\013activity_id\030\003 \001(\r\022\020\n\010integral\030\004 \001(\r\"$\n\""
    "Activity_CS_DailyFirstCharge_Query\"Y\n\037Ac"
    "tivity_CS_DailyFirstCharge_Do\022\017\n\007isFirst"
    "\030\001 \002(\010\022\024\n\014dailyFirstId\030\002 \001(\005\022\017\n\007indexId\030"
    "\003 \001(\005\"\200\001\n\"Activity_SC_DailyFirstCharge_Q"
    "uery\022\030\n\020firstawardstatus\030\001 \002(\005\022,\n\004info\030\002"
    " \003(\0132\036.proto.message.SingleAwardData\022\022\n\n"
    "todayTotal\030\003 \002(\005\"1\n\037Activity_SC_DailyFir"
    "stCharge_Do\022\016\n\006result\030\001 \002(\r\"&\n$Marketing"
    "_CS_QuerySevenDayTargetInfo\"\205\001\n$Marketin"
    "g_SC_QuerySevenDayTargetInfo\0222\n\007allInfo\030"
    "\001 \003(\0132!.proto.message.SingleSevenDayInfo"
    "\022\027\n\017received_awards\030\002 \003(\005\022\020\n\010integral\030\003 "
    "\001(\005\"8\n$Marketing_CS_GetSevenDayTargetRew"
    "ard\022\020\n\010rewardId\030\001 \002(\005\"3\n$Marketing_SC_Ge"
    "tSevenDayTargetReward\022\013\n\003ret\030\001 \002(\005\"8\n*Ac"
    "tivity_CS_GetSevenDayTargetIntegralAward"
    "\022\n\n\002id\030\001 \002(\005\"9\n*Activity_SC_GetSevenDayT"
    "argetIntegralAward\022\013\n\003res\030\001 \002(\005\"\227\001\n Mark"
    "eting_SC_UpdateServerOpenDay\022\017\n\007yearNum\030"
    "\001 \001(\005\022\016\n\006MonNum\030\002 \001(\005\022\016\n\006dayNum\030\003 \001(\005\022\014\n"
    "\004tick\030\004 \001(\004\022\022\n\nopenDayNum\030\005 \001(\005\022\017\n\007nowti"
    "ck\030\006 \001(\004\022\017\n\007isLogin\030\007 \001(\010\"4\n$Activity_CS"
    "_DiamondDouble_GetHistory\022\014\n\004type\030\001 \001(\r\""
    "\204\001\n$Activity_SC_DiamondDouble_GetHistory"
    "\022\014\n\004type\030\001 \001(\r\0229\n\014history_list\030\002 \003(\0132#.p"
    "roto.message.DiamondDoubleHistory\022\023\n\013uiR"
    "ollTimes\030\003 \001(\r\"A\n\036Activity_SC_DiamondDou"
    "ble_Roll\022\016\n\006result\030\001 \001(\r\022\017\n\007dimaond\030\002 \001("
    "\r\"3\n\022SingleInvestReward\022\016\n\006target\030\001 \001(\005\022"
    "\r\n\005isGet\030\002 \001(\010\"p\n\020SingleInvestMent\022\022\n\nnA"
    "ctiveNum\030\001 \001(\005\0226\n\013nRewardList\030\002 \003(\0132!.pr"
    "oto.message.SingleInvestReward\022\020\n\010nInitN"
    "um\030\003 \001(\003\" \n\036Activity_CS_Investment_GetIn"
    "fo\"E\n\037Activity_CS_Investment_DoReward\022\022\n"
    "\nnActiveNum\030\001 \001(\005\022\016\n\006target\030\002 \001(\005\"1\n\033Act"
    "ivity_CS_Investment_Open\022\022\n\nnActiveNum\030\001"
    " \001(\005\"U\n\036Activity_SC_Investment_GetInfo\0223"
    "\n\nInvestList\030\001 \003(\0132\037.proto.message.Singl"
    "eInvestMent\".\n\037Activity_SC_Investment_Do"
    "Reward\022\013\n\003ret\030\001 \001(\005\"*\n\033Activity_SC_Inves"
    "tment_Open\022\013\n\003ret\030\001 \001(\005\"M\n\026ProtoAllInves"
    "tmentInfo\0223\n\nInvestList\030\001 \003(\0132\037.proto.me"
    "ssage.SingleInvestMent\"\327\001\n\034ProtoAllDaily"
    "FirstChargeInfo\022\025\n\risfirstcharge\030\001 \001(\005\0228"
    "\n\020dailycharge_data\030\002 \003(\0132\036.proto.message"
    ".SingleAwardData\022\026\n\016todaychargenum\030\003 \001(\005"
    "\022\027\n\017lastChargettick\030\004 \001(\r\022\030\n\020firstCharge"
    "ttick\030\005 \001(\r\022\033\n\023dailychargeActiveId\030\006 \001(\005"
    "\"N\n\017RouletteHistory\022\014\n\004name\030\001 \001(\t\022\016\n\006ite"
    "mid\030\002 \001(\r\022\017\n\007itemnum\030\003 \001(\r\022\014\n\004cost\030\004 \001(\r"
    "\"\'\n\027Activity_CS_Roulette_Do\022\014\n\004type\030\001 \001("
    "\r\"b\n\027Activity_SC_Roulette_Do\022\016\n\006result\030\001"
    " \001(\r\022\014\n\004cost\030\002 \001(\r\022)\n\013reward_list\030\003 \003(\0132"
    "\024.proto.message.IDNum\"+\n\035Activity_CS_Rou"
    "lette_Exchange\022\n\n\002id\030\001 \001(\r\";\n\035Activity_S"
    "C_Roulette_Exchange\022\n\n\002id\030\001 \001(\r\022\016\n\006resul"
    "t\030\002 \001(\r\"/\n\037Activity_CS_Roulette_GetHisto"
    "ry\022\014\n\004type\030\001 \001(\r\"e\n\037Activity_SC_Roulette"
    "_GetHistory\022\014\n\004type\030\001 \001(\r\0224\n\014history_lis"
    "t\030\002 \003(\0132\036.proto.message.RouletteHistory\""
    "O\n\022Activity_SC_Change\022\014\n\004type\030\001 \002(\r\022\n\n\002i"
    "d\030\002 \002(\r\022\021\n\tdata_type\030\003 \002(\r\022\014\n\004data\030\004 \003(\005"
    "\"R\n\"Activity_SC_Roulette_ExchangeCount\022,"
    "\n\016exchange_count\030\003 \003(\0132\024.proto.message.I"
    "DNum\"\200\001\n\024ContinuousChargeInfo\022\023\n\013activit"
    "y_id\030\001 \002(\r\022\026\n\016today_diamonds\030\002 \001(\r\022\"\n\004da"
    "ys\030\003 \003(\0132\024.proto.message.IDNum\022\027\n\017receiv"
    "ed_awards\030\004 \003(\r\"$\n\"Activity_CS_Continuou"
    "sCharge_Query\"d\n\"Activity_SC_ContinuousC"
    "harge_Query\022\013\n\003res\030\001 \002(\005\0221\n\004info\030\002 \001(\0132#"
    ".proto.message.ContinuousChargeInfo\"-\n\037A"
    "ctivity_CS_ContinuousCharge_Do\022\n\n\002id\030\001 \002"
    "(\r\".\n\037Activity_SC_ContinuousCharge_Do\022\013\n"
    "\003res\030\001 \002(\005\"\?\n\017SpecialSaleInfo\022\023\n\013activit"
    "y_id\030\001 \002(\r\022\027\n\017received_awards\030\002 \003(\r\"\037\n\035A"
    "ctivity_CS_SpecialSale_Query\"Z\n\035Activity"
    "_SC_SpecialSale_Query\022\013\n\003res\030\001 \002(\005\022,\n\004in"
    "fo\030\002 \001(\0132\036.proto.message.SpecialSaleInfo"
    "\"(\n\032Activity_CS_SpecialSale_Do\022\n\n\002id\030\001 \002"
    "(\r\")\n\032Activity_SC_SpecialSale_Do\022\013\n\003res\030"
    "\001 \002(\005\"F\n\022LostTreasureRecord\022\014\n\004name\030\001 \001("
    "\t\022\"\n\004item\030\002 \002(\0132\024.proto.message.IDNum\"B\n"
    "\014LostTreasure\0222\n\007records\030\001 \003(\0132!.proto.m"
    "essage.LostTreasureRecord\"[\n\017LostTreasur"
    "eBag\022\"\n\005items\030\001 \003(\0132\023.proto.message.Item"
    "\022$\n\006equips\030\002 \003(\0132\024.proto.message.Equip\"\212"
    "\002\n\020LostTreasureInfo\022\020\n\010integral\030\001 \001(\r\022+\n"
    "\003bag\030\002 \001(\0132\036.proto.message.LostTreasureB"
    "ag\022%\n\007records\030\003 \003(\0132\024.proto.message.IDNu"
    "m\022,\n\016record_forever\030\004 \003(\0132\024.proto.messag"
    "e.IDNum\022(\n\nrecord_day\030\005 \003(\0132\024.proto.mess"
    "age.IDNum\022)\n\013record_week\030\006 \003(\0132\024.proto.m"
    "essage.IDNum\022\r\n\005times\030\007 \001(\r\"6\n\033Activity_"
    "CS_LostTreasure_Do\022\n\n\002id\030\001 \002(\r\022\013\n\003opt\030\002 "
    "\001(\r\"m\n\033Activity_SC_LostTreasure_Do\022\013\n\003re"
    "s\030\001 \002(\005\022\n\n\002id\030\002 \002(\r\022\020\n\010integral\030\003 \001(\r\022#\n"
    "\005items\030\004 \003(\0132\024.proto.message.IDNum\"/\n!Ac"
    "tivity_CS_LostTreasure_Exchange\022\n\n\002id\030\001 "
    "\002(\r\"N\n!Activity_SC_LostTreasure_Exchange"
    "\022\013\n\003res\030\001 \002(\r\022\020\n\010integral\030\002 \001(\r\022\n\n\002id\030\003 "
    "\001(\r\" \n\036Activity_CS_LostTreasure_Query\"\\\n"
    "\036Activity_SC_LostTreasure_Query\022\013\n\003res\030\001"
    " \002(\005\022-\n\004info\030\002 \001(\0132\037.proto.message.LostT"
    "reasureInfo\".\n\036Activity_CS_LostTreasure_"
    "Fetch\022\014\n\004uuid\030\001 \002(\004\"-\n\036Activity_SC_LostT"
    "reasure_Fetch\022\013\n\003res\030\001 \002(\005\"4\n$Activity_C"
    "S_LostTreasure_QueryRecord\022\014\n\004from\030\001 \001(\r"
    "\"g\n$Activity_SC_LostTreasure_QueryRecord"
    "\022\013\n\003res\030\001 \002(\005\0222\n\007records\030\002 \003(\0132!.proto.m"
    "essage.LostTreasureRecord\"i\n\rMoneyTreeIn"
    "fo\022\023\n\013money_times\030\001 \001(\r\022\030\n\020money_free_ti"
    "mes\030\002 \001(\r\022\026\n\016last_free_time\030\003 \001(\004\022\021\n\texp"
    "_times\030\004 \002(\r\"\035\n\033Activity_CS_MoneyTree_Qu"
    "ery\"V\n\033Activity_SC_MoneyTree_Query\022\013\n\003re"
    "s\030\001 \002(\005\022*\n\004info\030\002 \001(\0132\034.proto.message.Mo"
    "neyTreeInfo\"&\n\030Activity_CS_MoneyTree_Do\022"
    "\n\n\002id\030\001 \002(\r\"B\n\030Activity_SC_MoneyTree_Do\022"
    "\013\n\003res\030\001 \002(\005\022\n\n\002id\030\002 \002(\r\022\r\n\005index\030\003 \001(\r\""
    ":\n\021DiscountStoreInfo\022%\n\007records\030\001 \003(\0132\024."
    "proto.message.IDNum\"!\n\037Activity_CS_Disco"
    "untStore_Query\"^\n\037Activity_SC_DiscountSt"
    "ore_Query\022\013\n\003res\030\001 \002(\005\022.\n\004info\030\002 \001(\0132 .p"
    "roto.message.DiscountStoreInfo\"*\n\034Activi"
    "ty_CS_DiscountStore_Do\022\n\n\002id\030\001 \002(\005\"+\n\034Ac"
    "tivity_SC_DiscountStore_Do\022\013\n\003res\030\001 \002(\005*"
    "l\n\021eActivityDataType\022/\n+eActivityData_Co"
    "ntinuousCharge_TodayDiamond\020\001\022&\n\"eActivi"
    "tyData_ContinuousCharge_Day\020\002B\017\n\rproto.m"
    "essage", 6206);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "marketing.proto", &protobuf_RegisterTypes);
  SingleChargeBigGiftData::default_instance_ = new SingleChargeBigGiftData();
  Activity_CS_LimitCharge_Query::default_instance_ = new Activity_CS_LimitCharge_Query();
  Activity_SC_LimitCharge_Query::default_instance_ = new Activity_SC_LimitCharge_Query();
  Activity_CS_LimitCharge_Do::default_instance_ = new Activity_CS_LimitCharge_Do();
  Activity_SC_LimitCharge_Do::default_instance_ = new Activity_SC_LimitCharge_Do();
  ProtoAllLimitChargeInfo::default_instance_ = new ProtoAllLimitChargeInfo();
  ProtoAllChargeBigGiftInfo::default_instance_ = new ProtoAllChargeBigGiftInfo();
  ProtoAllTotelChargeGiftInfo::default_instance_ = new ProtoAllTotelChargeGiftInfo();
  SingleSevenDayInfo::default_instance_ = new SingleSevenDayInfo();
  ProtoAllSevenDayTargetInfo::default_instance_ = new ProtoAllSevenDayTargetInfo();
  Activity_CS_DailyFirstCharge_Query::default_instance_ = new Activity_CS_DailyFirstCharge_Query();
  Activity_CS_DailyFirstCharge_Do::default_instance_ = new Activity_CS_DailyFirstCharge_Do();
  Activity_SC_DailyFirstCharge_Query::default_instance_ = new Activity_SC_DailyFirstCharge_Query();
  Activity_SC_DailyFirstCharge_Do::default_instance_ = new Activity_SC_DailyFirstCharge_Do();
  Marketing_CS_QuerySevenDayTargetInfo::default_instance_ = new Marketing_CS_QuerySevenDayTargetInfo();
  Marketing_SC_QuerySevenDayTargetInfo::default_instance_ = new Marketing_SC_QuerySevenDayTargetInfo();
  Marketing_CS_GetSevenDayTargetReward::default_instance_ = new Marketing_CS_GetSevenDayTargetReward();
  Marketing_SC_GetSevenDayTargetReward::default_instance_ = new Marketing_SC_GetSevenDayTargetReward();
  Activity_CS_GetSevenDayTargetIntegralAward::default_instance_ = new Activity_CS_GetSevenDayTargetIntegralAward();
  Activity_SC_GetSevenDayTargetIntegralAward::default_instance_ = new Activity_SC_GetSevenDayTargetIntegralAward();
  Marketing_SC_UpdateServerOpenDay::default_instance_ = new Marketing_SC_UpdateServerOpenDay();
  Activity_CS_DiamondDouble_GetHistory::default_instance_ = new Activity_CS_DiamondDouble_GetHistory();
  Activity_SC_DiamondDouble_GetHistory::default_instance_ = new Activity_SC_DiamondDouble_GetHistory();
  Activity_SC_DiamondDouble_Roll::default_instance_ = new Activity_SC_DiamondDouble_Roll();
  SingleInvestReward::default_instance_ = new SingleInvestReward();
  SingleInvestMent::default_instance_ = new SingleInvestMent();
  Activity_CS_Investment_GetInfo::default_instance_ = new Activity_CS_Investment_GetInfo();
  Activity_CS_Investment_DoReward::default_instance_ = new Activity_CS_Investment_DoReward();
  Activity_CS_Investment_Open::default_instance_ = new Activity_CS_Investment_Open();
  Activity_SC_Investment_GetInfo::default_instance_ = new Activity_SC_Investment_GetInfo();
  Activity_SC_Investment_DoReward::default_instance_ = new Activity_SC_Investment_DoReward();
  Activity_SC_Investment_Open::default_instance_ = new Activity_SC_Investment_Open();
  ProtoAllInvestmentInfo::default_instance_ = new ProtoAllInvestmentInfo();
  ProtoAllDailyFirstChargeInfo::default_instance_ = new ProtoAllDailyFirstChargeInfo();
  RouletteHistory::default_instance_ = new RouletteHistory();
  Activity_CS_Roulette_Do::default_instance_ = new Activity_CS_Roulette_Do();
  Activity_SC_Roulette_Do::default_instance_ = new Activity_SC_Roulette_Do();
  Activity_CS_Roulette_Exchange::default_instance_ = new Activity_CS_Roulette_Exchange();
  Activity_SC_Roulette_Exchange::default_instance_ = new Activity_SC_Roulette_Exchange();
  Activity_CS_Roulette_GetHistory::default_instance_ = new Activity_CS_Roulette_GetHistory();
  Activity_SC_Roulette_GetHistory::default_instance_ = new Activity_SC_Roulette_GetHistory();
  Activity_SC_Change::default_instance_ = new Activity_SC_Change();
  Activity_SC_Roulette_ExchangeCount::default_instance_ = new Activity_SC_Roulette_ExchangeCount();
  ContinuousChargeInfo::default_instance_ = new ContinuousChargeInfo();
  Activity_CS_ContinuousCharge_Query::default_instance_ = new Activity_CS_ContinuousCharge_Query();
  Activity_SC_ContinuousCharge_Query::default_instance_ = new Activity_SC_ContinuousCharge_Query();
  Activity_CS_ContinuousCharge_Do::default_instance_ = new Activity_CS_ContinuousCharge_Do();
  Activity_SC_ContinuousCharge_Do::default_instance_ = new Activity_SC_ContinuousCharge_Do();
  SpecialSaleInfo::default_instance_ = new SpecialSaleInfo();
  Activity_CS_SpecialSale_Query::default_instance_ = new Activity_CS_SpecialSale_Query();
  Activity_SC_SpecialSale_Query::default_instance_ = new Activity_SC_SpecialSale_Query();
  Activity_CS_SpecialSale_Do::default_instance_ = new Activity_CS_SpecialSale_Do();
  Activity_SC_SpecialSale_Do::default_instance_ = new Activity_SC_SpecialSale_Do();
  LostTreasureRecord::default_instance_ = new LostTreasureRecord();
  LostTreasure::default_instance_ = new LostTreasure();
  LostTreasureBag::default_instance_ = new LostTreasureBag();
  LostTreasureInfo::default_instance_ = new LostTreasureInfo();
  Activity_CS_LostTreasure_Do::default_instance_ = new Activity_CS_LostTreasure_Do();
  Activity_SC_LostTreasure_Do::default_instance_ = new Activity_SC_LostTreasure_Do();
  Activity_CS_LostTreasure_Exchange::default_instance_ = new Activity_CS_LostTreasure_Exchange();
  Activity_SC_LostTreasure_Exchange::default_instance_ = new Activity_SC_LostTreasure_Exchange();
  Activity_CS_LostTreasure_Query::default_instance_ = new Activity_CS_LostTreasure_Query();
  Activity_SC_LostTreasure_Query::default_instance_ = new Activity_SC_LostTreasure_Query();
  Activity_CS_LostTreasure_Fetch::default_instance_ = new Activity_CS_LostTreasure_Fetch();
  Activity_SC_LostTreasure_Fetch::default_instance_ = new Activity_SC_LostTreasure_Fetch();
  Activity_CS_LostTreasure_QueryRecord::default_instance_ = new Activity_CS_LostTreasure_QueryRecord();
  Activity_SC_LostTreasure_QueryRecord::default_instance_ = new Activity_SC_LostTreasure_QueryRecord();
  MoneyTreeInfo::default_instance_ = new MoneyTreeInfo();
  Activity_CS_MoneyTree_Query::default_instance_ = new Activity_CS_MoneyTree_Query();
  Activity_SC_MoneyTree_Query::default_instance_ = new Activity_SC_MoneyTree_Query();
  Activity_CS_MoneyTree_Do::default_instance_ = new Activity_CS_MoneyTree_Do();
  Activity_SC_MoneyTree_Do::default_instance_ = new Activity_SC_MoneyTree_Do();
  DiscountStoreInfo::default_instance_ = new DiscountStoreInfo();
  Activity_CS_DiscountStore_Query::default_instance_ = new Activity_CS_DiscountStore_Query();
  Activity_SC_DiscountStore_Query::default_instance_ = new Activity_SC_DiscountStore_Query();
  Activity_CS_DiscountStore_Do::default_instance_ = new Activity_CS_DiscountStore_Do();
  Activity_SC_DiscountStore_Do::default_instance_ = new Activity_SC_DiscountStore_Do();
  SingleChargeBigGiftData::default_instance_->InitAsDefaultInstance();
  Activity_CS_LimitCharge_Query::default_instance_->InitAsDefaultInstance();
  Activity_SC_LimitCharge_Query::default_instance_->InitAsDefaultInstance();
  Activity_CS_LimitCharge_Do::default_instance_->InitAsDefaultInstance();
  Activity_SC_LimitCharge_Do::default_instance_->InitAsDefaultInstance();
  ProtoAllLimitChargeInfo::default_instance_->InitAsDefaultInstance();
  ProtoAllChargeBigGiftInfo::default_instance_->InitAsDefaultInstance();
  ProtoAllTotelChargeGiftInfo::default_instance_->InitAsDefaultInstance();
  SingleSevenDayInfo::default_instance_->InitAsDefaultInstance();
  ProtoAllSevenDayTargetInfo::default_instance_->InitAsDefaultInstance();
  Activity_CS_DailyFirstCharge_Query::default_instance_->InitAsDefaultInstance();
  Activity_CS_DailyFirstCharge_Do::default_instance_->InitAsDefaultInstance();
  Activity_SC_DailyFirstCharge_Query::default_instance_->InitAsDefaultInstance();
  Activity_SC_DailyFirstCharge_Do::default_instance_->InitAsDefaultInstance();
  Marketing_CS_QuerySevenDayTargetInfo::default_instance_->InitAsDefaultInstance();
  Marketing_SC_QuerySevenDayTargetInfo::default_instance_->InitAsDefaultInstance();
  Marketing_CS_GetSevenDayTargetReward::default_instance_->InitAsDefaultInstance();
  Marketing_SC_GetSevenDayTargetReward::default_instance_->InitAsDefaultInstance();
  Activity_CS_GetSevenDayTargetIntegralAward::default_instance_->InitAsDefaultInstance();
  Activity_SC_GetSevenDayTargetIntegralAward::default_instance_->InitAsDefaultInstance();
  Marketing_SC_UpdateServerOpenDay::default_instance_->InitAsDefaultInstance();
  Activity_CS_DiamondDouble_GetHistory::default_instance_->InitAsDefaultInstance();
  Activity_SC_DiamondDouble_GetHistory::default_instance_->InitAsDefaultInstance();
  Activity_SC_DiamondDouble_Roll::default_instance_->InitAsDefaultInstance();
  SingleInvestReward::default_instance_->InitAsDefaultInstance();
  SingleInvestMent::default_instance_->InitAsDefaultInstance();
  Activity_CS_Investment_GetInfo::default_instance_->InitAsDefaultInstance();
  Activity_CS_Investment_DoReward::default_instance_->InitAsDefaultInstance();
  Activity_CS_Investment_Open::default_instance_->InitAsDefaultInstance();
  Activity_SC_Investment_GetInfo::default_instance_->InitAsDefaultInstance();
  Activity_SC_Investment_DoReward::default_instance_->InitAsDefaultInstance();
  Activity_SC_Investment_Open::default_instance_->InitAsDefaultInstance();
  ProtoAllInvestmentInfo::default_instance_->InitAsDefaultInstance();
  ProtoAllDailyFirstChargeInfo::default_instance_->InitAsDefaultInstance();
  RouletteHistory::default_instance_->InitAsDefaultInstance();
  Activity_CS_Roulette_Do::default_instance_->InitAsDefaultInstance();
  Activity_SC_Roulette_Do::default_instance_->InitAsDefaultInstance();
  Activity_CS_Roulette_Exchange::default_instance_->InitAsDefaultInstance();
  Activity_SC_Roulette_Exchange::default_instance_->InitAsDefaultInstance();
  Activity_CS_Roulette_GetHistory::default_instance_->InitAsDefaultInstance();
  Activity_SC_Roulette_GetHistory::default_instance_->InitAsDefaultInstance();
  Activity_SC_Change::default_instance_->InitAsDefaultInstance();
  Activity_SC_Roulette_ExchangeCount::default_instance_->InitAsDefaultInstance();
  ContinuousChargeInfo::default_instance_->InitAsDefaultInstance();
  Activity_CS_ContinuousCharge_Query::default_instance_->InitAsDefaultInstance();
  Activity_SC_ContinuousCharge_Query::default_instance_->InitAsDefaultInstance();
  Activity_CS_ContinuousCharge_Do::default_instance_->InitAsDefaultInstance();
  Activity_SC_ContinuousCharge_Do::default_instance_->InitAsDefaultInstance();
  SpecialSaleInfo::default_instance_->InitAsDefaultInstance();
  Activity_CS_SpecialSale_Query::default_instance_->InitAsDefaultInstance();
  Activity_SC_SpecialSale_Query::default_instance_->InitAsDefaultInstance();
  Activity_CS_SpecialSale_Do::default_instance_->InitAsDefaultInstance();
  Activity_SC_SpecialSale_Do::default_instance_->InitAsDefaultInstance();
  LostTreasureRecord::default_instance_->InitAsDefaultInstance();
  LostTreasure::default_instance_->InitAsDefaultInstance();
  LostTreasureBag::default_instance_->InitAsDefaultInstance();
  LostTreasureInfo::default_instance_->InitAsDefaultInstance();
  Activity_CS_LostTreasure_Do::default_instance_->InitAsDefaultInstance();
  Activity_SC_LostTreasure_Do::default_instance_->InitAsDefaultInstance();
  Activity_CS_LostTreasure_Exchange::default_instance_->InitAsDefaultInstance();
  Activity_SC_LostTreasure_Exchange::default_instance_->InitAsDefaultInstance();
  Activity_CS_LostTreasure_Query::default_instance_->InitAsDefaultInstance();
  Activity_SC_LostTreasure_Query::default_instance_->InitAsDefaultInstance();
  Activity_CS_LostTreasure_Fetch::default_instance_->InitAsDefaultInstance();
  Activity_SC_LostTreasure_Fetch::default_instance_->InitAsDefaultInstance();
  Activity_CS_LostTreasure_QueryRecord::default_instance_->InitAsDefaultInstance();
  Activity_SC_LostTreasure_QueryRecord::default_instance_->InitAsDefaultInstance();
  MoneyTreeInfo::default_instance_->InitAsDefaultInstance();
  Activity_CS_MoneyTree_Query::default_instance_->InitAsDefaultInstance();
  Activity_SC_MoneyTree_Query::default_instance_->InitAsDefaultInstance();
  Activity_CS_MoneyTree_Do::default_instance_->InitAsDefaultInstance();
  Activity_SC_MoneyTree_Do::default_instance_->InitAsDefaultInstance();
  DiscountStoreInfo::default_instance_->InitAsDefaultInstance();
  Activity_CS_DiscountStore_Query::default_instance_->InitAsDefaultInstance();
  Activity_SC_DiscountStore_Query::default_instance_->InitAsDefaultInstance();
  Activity_CS_DiscountStore_Do::default_instance_->InitAsDefaultInstance();
  Activity_SC_DiscountStore_Do::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_marketing_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_marketing_2eproto {
  StaticDescriptorInitializer_marketing_2eproto() {
    protobuf_AddDesc_marketing_2eproto();
  }
} static_descriptor_initializer_marketing_2eproto_;
const ::google::protobuf::EnumDescriptor* eActivityDataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eActivityDataType_descriptor_;
}
bool eActivityDataType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int SingleChargeBigGiftData::kIdFieldNumber;
const int SingleChargeBigGiftData::kIsrecivedFieldNumber;
const int SingleChargeBigGiftData::kProgressFieldNumber;
#endif  // !_MSC_VER

SingleChargeBigGiftData::SingleChargeBigGiftData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SingleChargeBigGiftData::InitAsDefaultInstance() {
}

SingleChargeBigGiftData::SingleChargeBigGiftData(const SingleChargeBigGiftData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SingleChargeBigGiftData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  isrecived_ = 0;
  progress_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleChargeBigGiftData::~SingleChargeBigGiftData() {
  SharedDtor();
}

void SingleChargeBigGiftData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SingleChargeBigGiftData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleChargeBigGiftData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleChargeBigGiftData_descriptor_;
}

const SingleChargeBigGiftData& SingleChargeBigGiftData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

SingleChargeBigGiftData* SingleChargeBigGiftData::default_instance_ = NULL;

SingleChargeBigGiftData* SingleChargeBigGiftData::New() const {
  return new SingleChargeBigGiftData;
}

void SingleChargeBigGiftData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    isrecived_ = 0;
    progress_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SingleChargeBigGiftData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isrecived;
        break;
      }

      // required int32 isrecived = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isrecived:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isrecived_)));
          set_has_isrecived();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_progress;
        break;
      }

      // optional int32 progress = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &progress_)));
          set_has_progress();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SingleChargeBigGiftData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 isrecived = 2;
  if (has_isrecived()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->isrecived(), output);
  }

  // optional int32 progress = 3;
  if (has_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->progress(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SingleChargeBigGiftData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 isrecived = 2;
  if (has_isrecived()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->isrecived(), target);
  }

  // optional int32 progress = 3;
  if (has_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->progress(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SingleChargeBigGiftData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 isrecived = 2;
    if (has_isrecived()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isrecived());
    }

    // optional int32 progress = 3;
    if (has_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->progress());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleChargeBigGiftData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SingleChargeBigGiftData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SingleChargeBigGiftData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleChargeBigGiftData::MergeFrom(const SingleChargeBigGiftData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_isrecived()) {
      set_isrecived(from.isrecived());
    }
    if (from.has_progress()) {
      set_progress(from.progress());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SingleChargeBigGiftData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleChargeBigGiftData::CopyFrom(const SingleChargeBigGiftData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleChargeBigGiftData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SingleChargeBigGiftData::Swap(SingleChargeBigGiftData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(isrecived_, other->isrecived_);
    std::swap(progress_, other->progress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SingleChargeBigGiftData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SingleChargeBigGiftData_descriptor_;
  metadata.reflection = SingleChargeBigGiftData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity_CS_LimitCharge_Query::kActivityTypeFieldNumber;
#endif  // !_MSC_VER

Activity_CS_LimitCharge_Query::Activity_CS_LimitCharge_Query()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_CS_LimitCharge_Query::InitAsDefaultInstance() {
}

Activity_CS_LimitCharge_Query::Activity_CS_LimitCharge_Query(const Activity_CS_LimitCharge_Query& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_CS_LimitCharge_Query::SharedCtor() {
  _cached_size_ = 0;
  activitytype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_CS_LimitCharge_Query::~Activity_CS_LimitCharge_Query() {
  SharedDtor();
}

void Activity_CS_LimitCharge_Query::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity_CS_LimitCharge_Query::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_CS_LimitCharge_Query::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_CS_LimitCharge_Query_descriptor_;
}

const Activity_CS_LimitCharge_Query& Activity_CS_LimitCharge_Query::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

Activity_CS_LimitCharge_Query* Activity_CS_LimitCharge_Query::default_instance_ = NULL;

Activity_CS_LimitCharge_Query* Activity_CS_LimitCharge_Query::New() const {
  return new Activity_CS_LimitCharge_Query;
}

void Activity_CS_LimitCharge_Query::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activitytype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_CS_LimitCharge_Query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 activityType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activitytype_)));
          set_has_activitytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity_CS_LimitCharge_Query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 activityType = 1;
  if (has_activitytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->activitytype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_CS_LimitCharge_Query::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 activityType = 1;
  if (has_activitytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->activitytype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_CS_LimitCharge_Query::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 activityType = 1;
    if (has_activitytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activitytype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_CS_LimitCharge_Query::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_CS_LimitCharge_Query* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_CS_LimitCharge_Query*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_CS_LimitCharge_Query::MergeFrom(const Activity_CS_LimitCharge_Query& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activitytype()) {
      set_activitytype(from.activitytype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_CS_LimitCharge_Query::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_CS_LimitCharge_Query::CopyFrom(const Activity_CS_LimitCharge_Query& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_CS_LimitCharge_Query::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Activity_CS_LimitCharge_Query::Swap(Activity_CS_LimitCharge_Query* other) {
  if (other != this) {
    std::swap(activitytype_, other->activitytype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_CS_LimitCharge_Query::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_CS_LimitCharge_Query_descriptor_;
  metadata.reflection = Activity_CS_LimitCharge_Query_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity_SC_LimitCharge_Query::kActivityTypeFieldNumber;
const int Activity_SC_LimitCharge_Query::kInfoFieldNumber;
#endif  // !_MSC_VER

Activity_SC_LimitCharge_Query::Activity_SC_LimitCharge_Query()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_SC_LimitCharge_Query::InitAsDefaultInstance() {
}

Activity_SC_LimitCharge_Query::Activity_SC_LimitCharge_Query(const Activity_SC_LimitCharge_Query& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_SC_LimitCharge_Query::SharedCtor() {
  _cached_size_ = 0;
  activitytype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_SC_LimitCharge_Query::~Activity_SC_LimitCharge_Query() {
  SharedDtor();
}

void Activity_SC_LimitCharge_Query::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity_SC_LimitCharge_Query::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_SC_LimitCharge_Query::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_SC_LimitCharge_Query_descriptor_;
}

const Activity_SC_LimitCharge_Query& Activity_SC_LimitCharge_Query::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

Activity_SC_LimitCharge_Query* Activity_SC_LimitCharge_Query::default_instance_ = NULL;

Activity_SC_LimitCharge_Query* Activity_SC_LimitCharge_Query::New() const {
  return new Activity_SC_LimitCharge_Query;
}

void Activity_SC_LimitCharge_Query::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activitytype_ = 0;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_SC_LimitCharge_Query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 activityType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activitytype_)));
          set_has_activitytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .proto.message.SingleChargeBigGiftData info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity_SC_LimitCharge_Query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 activityType = 1;
  if (has_activitytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->activitytype(), output);
  }

  // repeated .proto.message.SingleChargeBigGiftData info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_SC_LimitCharge_Query::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 activityType = 1;
  if (has_activitytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->activitytype(), target);
  }

  // repeated .proto.message.SingleChargeBigGiftData info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_SC_LimitCharge_Query::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 activityType = 1;
    if (has_activitytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activitytype());
    }

  }
  // repeated .proto.message.SingleChargeBigGiftData info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_SC_LimitCharge_Query::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_SC_LimitCharge_Query* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_SC_LimitCharge_Query*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_SC_LimitCharge_Query::MergeFrom(const Activity_SC_LimitCharge_Query& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activitytype()) {
      set_activitytype(from.activitytype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_SC_LimitCharge_Query::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_SC_LimitCharge_Query::CopyFrom(const Activity_SC_LimitCharge_Query& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_SC_LimitCharge_Query::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void Activity_SC_LimitCharge_Query::Swap(Activity_SC_LimitCharge_Query* other) {
  if (other != this) {
    std::swap(activitytype_, other->activitytype_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_SC_LimitCharge_Query::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_SC_LimitCharge_Query_descriptor_;
  metadata.reflection = Activity_SC_LimitCharge_Query_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity_CS_LimitCharge_Do::kActivityTypeFieldNumber;
const int Activity_CS_LimitCharge_Do::kNIDFieldNumber;
#endif  // !_MSC_VER

Activity_CS_LimitCharge_Do::Activity_CS_LimitCharge_Do()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_CS_LimitCharge_Do::InitAsDefaultInstance() {
}

Activity_CS_LimitCharge_Do::Activity_CS_LimitCharge_Do(const Activity_CS_LimitCharge_Do& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_CS_LimitCharge_Do::SharedCtor() {
  _cached_size_ = 0;
  activitytype_ = 0;
  nid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_CS_LimitCharge_Do::~Activity_CS_LimitCharge_Do() {
  SharedDtor();
}

void Activity_CS_LimitCharge_Do::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity_CS_LimitCharge_Do::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_CS_LimitCharge_Do::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_CS_LimitCharge_Do_descriptor_;
}

const Activity_CS_LimitCharge_Do& Activity_CS_LimitCharge_Do::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

Activity_CS_LimitCharge_Do* Activity_CS_LimitCharge_Do::default_instance_ = NULL;

Activity_CS_LimitCharge_Do* Activity_CS_LimitCharge_Do::New() const {
  return new Activity_CS_LimitCharge_Do;
}

void Activity_CS_LimitCharge_Do::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activitytype_ = 0;
    nid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_CS_LimitCharge_Do::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 activityType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activitytype_)));
          set_has_activitytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nID;
        break;
      }

      // required int32 nID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nid_)));
          set_has_nid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity_CS_LimitCharge_Do::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 activityType = 1;
  if (has_activitytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->activitytype(), output);
  }

  // required int32 nID = 2;
  if (has_nid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_CS_LimitCharge_Do::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 activityType = 1;
  if (has_activitytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->activitytype(), target);
  }

  // required int32 nID = 2;
  if (has_nid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_CS_LimitCharge_Do::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 activityType = 1;
    if (has_activitytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activitytype());
    }

    // required int32 nID = 2;
    if (has_nid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_CS_LimitCharge_Do::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_CS_LimitCharge_Do* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_CS_LimitCharge_Do*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_CS_LimitCharge_Do::MergeFrom(const Activity_CS_LimitCharge_Do& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activitytype()) {
      set_activitytype(from.activitytype());
    }
    if (from.has_nid()) {
      set_nid(from.nid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_CS_LimitCharge_Do::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_CS_LimitCharge_Do::CopyFrom(const Activity_CS_LimitCharge_Do& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_CS_LimitCharge_Do::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Activity_CS_LimitCharge_Do::Swap(Activity_CS_LimitCharge_Do* other) {
  if (other != this) {
    std::swap(activitytype_, other->activitytype_);
    std::swap(nid_, other->nid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_CS_LimitCharge_Do::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_CS_LimitCharge_Do_descriptor_;
  metadata.reflection = Activity_CS_LimitCharge_Do_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity_SC_LimitCharge_Do::kActivityTypeFieldNumber;
const int Activity_SC_LimitCharge_Do::kResultFieldNumber;
const int Activity_SC_LimitCharge_Do::kDropidFieldNumber;
#endif  // !_MSC_VER

Activity_SC_LimitCharge_Do::Activity_SC_LimitCharge_Do()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_SC_LimitCharge_Do::InitAsDefaultInstance() {
}

Activity_SC_LimitCharge_Do::Activity_SC_LimitCharge_Do(const Activity_SC_LimitCharge_Do& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_SC_LimitCharge_Do::SharedCtor() {
  _cached_size_ = 0;
  activitytype_ = 0;
  result_ = 0u;
  dropid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_SC_LimitCharge_Do::~Activity_SC_LimitCharge_Do() {
  SharedDtor();
}

void Activity_SC_LimitCharge_Do::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity_SC_LimitCharge_Do::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_SC_LimitCharge_Do::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_SC_LimitCharge_Do_descriptor_;
}

const Activity_SC_LimitCharge_Do& Activity_SC_LimitCharge_Do::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

Activity_SC_LimitCharge_Do* Activity_SC_LimitCharge_Do::default_instance_ = NULL;

Activity_SC_LimitCharge_Do* Activity_SC_LimitCharge_Do::New() const {
  return new Activity_SC_LimitCharge_Do;
}

void Activity_SC_LimitCharge_Do::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activitytype_ = 0;
    result_ = 0u;
    dropid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_SC_LimitCharge_Do::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 activityType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activitytype_)));
          set_has_activitytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required uint32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dropid;
        break;
      }

      // optional uint32 dropid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dropid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dropid_)));
          set_has_dropid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity_SC_LimitCharge_Do::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 activityType = 1;
  if (has_activitytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->activitytype(), output);
  }

  // required uint32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result(), output);
  }

  // optional uint32 dropid = 3;
  if (has_dropid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dropid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_SC_LimitCharge_Do::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 activityType = 1;
  if (has_activitytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->activitytype(), target);
  }

  // required uint32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result(), target);
  }

  // optional uint32 dropid = 3;
  if (has_dropid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dropid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_SC_LimitCharge_Do::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 activityType = 1;
    if (has_activitytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activitytype());
    }

    // required uint32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional uint32 dropid = 3;
    if (has_dropid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dropid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_SC_LimitCharge_Do::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_SC_LimitCharge_Do* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_SC_LimitCharge_Do*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_SC_LimitCharge_Do::MergeFrom(const Activity_SC_LimitCharge_Do& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activitytype()) {
      set_activitytype(from.activitytype());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_dropid()) {
      set_dropid(from.dropid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_SC_LimitCharge_Do::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_SC_LimitCharge_Do::CopyFrom(const Activity_SC_LimitCharge_Do& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_SC_LimitCharge_Do::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Activity_SC_LimitCharge_Do::Swap(Activity_SC_LimitCharge_Do* other) {
  if (other != this) {
    std::swap(activitytype_, other->activitytype_);
    std::swap(result_, other->result_);
    std::swap(dropid_, other->dropid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_SC_LimitCharge_Do::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_SC_LimitCharge_Do_descriptor_;
  metadata.reflection = Activity_SC_LimitCharge_Do_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoAllLimitChargeInfo::kLimitChargeinfoFieldNumber;
const int ProtoAllLimitChargeInfo::kChargeBigGiftinfoFieldNumber;
const int ProtoAllLimitChargeInfo::kTotalChargeGiftinfoFieldNumber;
#endif  // !_MSC_VER

ProtoAllLimitChargeInfo::ProtoAllLimitChargeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoAllLimitChargeInfo::InitAsDefaultInstance() {
}

ProtoAllLimitChargeInfo::ProtoAllLimitChargeInfo(const ProtoAllLimitChargeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoAllLimitChargeInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoAllLimitChargeInfo::~ProtoAllLimitChargeInfo() {
  SharedDtor();
}

void ProtoAllLimitChargeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoAllLimitChargeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoAllLimitChargeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoAllLimitChargeInfo_descriptor_;
}

const ProtoAllLimitChargeInfo& ProtoAllLimitChargeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

ProtoAllLimitChargeInfo* ProtoAllLimitChargeInfo::default_instance_ = NULL;

ProtoAllLimitChargeInfo* ProtoAllLimitChargeInfo::New() const {
  return new ProtoAllLimitChargeInfo;
}

void ProtoAllLimitChargeInfo::Clear() {
  limitchargeinfo_.Clear();
  chargebiggiftinfo_.Clear();
  totalchargegiftinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoAllLimitChargeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.SingleChargeBigGiftData LimitChargeinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LimitChargeinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_limitchargeinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_LimitChargeinfo;
        if (input->ExpectTag(18)) goto parse_ChargeBigGiftinfo;
        break;
      }

      // repeated .proto.message.SingleChargeBigGiftData ChargeBigGiftinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ChargeBigGiftinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chargebiggiftinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ChargeBigGiftinfo;
        if (input->ExpectTag(26)) goto parse_TotalChargeGiftinfo;
        break;
      }

      // repeated .proto.message.SingleChargeBigGiftData TotalChargeGiftinfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TotalChargeGiftinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_totalchargegiftinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_TotalChargeGiftinfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoAllLimitChargeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.SingleChargeBigGiftData LimitChargeinfo = 1;
  for (int i = 0; i < this->limitchargeinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->limitchargeinfo(i), output);
  }

  // repeated .proto.message.SingleChargeBigGiftData ChargeBigGiftinfo = 2;
  for (int i = 0; i < this->chargebiggiftinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->chargebiggiftinfo(i), output);
  }

  // repeated .proto.message.SingleChargeBigGiftData TotalChargeGiftinfo = 3;
  for (int i = 0; i < this->totalchargegiftinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->totalchargegiftinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoAllLimitChargeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.SingleChargeBigGiftData LimitChargeinfo = 1;
  for (int i = 0; i < this->limitchargeinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->limitchargeinfo(i), target);
  }

  // repeated .proto.message.SingleChargeBigGiftData ChargeBigGiftinfo = 2;
  for (int i = 0; i < this->chargebiggiftinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->chargebiggiftinfo(i), target);
  }

  // repeated .proto.message.SingleChargeBigGiftData TotalChargeGiftinfo = 3;
  for (int i = 0; i < this->totalchargegiftinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->totalchargegiftinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoAllLimitChargeInfo::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.SingleChargeBigGiftData LimitChargeinfo = 1;
  total_size += 1 * this->limitchargeinfo_size();
  for (int i = 0; i < this->limitchargeinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->limitchargeinfo(i));
  }

  // repeated .proto.message.SingleChargeBigGiftData ChargeBigGiftinfo = 2;
  total_size += 1 * this->chargebiggiftinfo_size();
  for (int i = 0; i < this->chargebiggiftinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chargebiggiftinfo(i));
  }

  // repeated .proto.message.SingleChargeBigGiftData TotalChargeGiftinfo = 3;
  total_size += 1 * this->totalchargegiftinfo_size();
  for (int i = 0; i < this->totalchargegiftinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->totalchargegiftinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoAllLimitChargeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoAllLimitChargeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoAllLimitChargeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoAllLimitChargeInfo::MergeFrom(const ProtoAllLimitChargeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  limitchargeinfo_.MergeFrom(from.limitchargeinfo_);
  chargebiggiftinfo_.MergeFrom(from.chargebiggiftinfo_);
  totalchargegiftinfo_.MergeFrom(from.totalchargegiftinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoAllLimitChargeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoAllLimitChargeInfo::CopyFrom(const ProtoAllLimitChargeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoAllLimitChargeInfo::IsInitialized() const {

  for (int i = 0; i < limitchargeinfo_size(); i++) {
    if (!this->limitchargeinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < chargebiggiftinfo_size(); i++) {
    if (!this->chargebiggiftinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < totalchargegiftinfo_size(); i++) {
    if (!this->totalchargegiftinfo(i).IsInitialized()) return false;
  }
  return true;
}

void ProtoAllLimitChargeInfo::Swap(ProtoAllLimitChargeInfo* other) {
  if (other != this) {
    limitchargeinfo_.Swap(&other->limitchargeinfo_);
    chargebiggiftinfo_.Swap(&other->chargebiggiftinfo_);
    totalchargegiftinfo_.Swap(&other->totalchargegiftinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoAllLimitChargeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoAllLimitChargeInfo_descriptor_;
  metadata.reflection = ProtoAllLimitChargeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoAllChargeBigGiftInfo::kInfoFieldNumber;
#endif  // !_MSC_VER

ProtoAllChargeBigGiftInfo::ProtoAllChargeBigGiftInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoAllChargeBigGiftInfo::InitAsDefaultInstance() {
}

ProtoAllChargeBigGiftInfo::ProtoAllChargeBigGiftInfo(const ProtoAllChargeBigGiftInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoAllChargeBigGiftInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoAllChargeBigGiftInfo::~ProtoAllChargeBigGiftInfo() {
  SharedDtor();
}

void ProtoAllChargeBigGiftInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoAllChargeBigGiftInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoAllChargeBigGiftInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoAllChargeBigGiftInfo_descriptor_;
}

const ProtoAllChargeBigGiftInfo& ProtoAllChargeBigGiftInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

ProtoAllChargeBigGiftInfo* ProtoAllChargeBigGiftInfo::default_instance_ = NULL;

ProtoAllChargeBigGiftInfo* ProtoAllChargeBigGiftInfo::New() const {
  return new ProtoAllChargeBigGiftInfo;
}

void ProtoAllChargeBigGiftInfo::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoAllChargeBigGiftInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.SingleChargeBigGiftData info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoAllChargeBigGiftInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.SingleChargeBigGiftData info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoAllChargeBigGiftInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.SingleChargeBigGiftData info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoAllChargeBigGiftInfo::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.SingleChargeBigGiftData info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoAllChargeBigGiftInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoAllChargeBigGiftInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoAllChargeBigGiftInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoAllChargeBigGiftInfo::MergeFrom(const ProtoAllChargeBigGiftInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoAllChargeBigGiftInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoAllChargeBigGiftInfo::CopyFrom(const ProtoAllChargeBigGiftInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoAllChargeBigGiftInfo::IsInitialized() const {

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void ProtoAllChargeBigGiftInfo::Swap(ProtoAllChargeBigGiftInfo* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoAllChargeBigGiftInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoAllChargeBigGiftInfo_descriptor_;
  metadata.reflection = ProtoAllChargeBigGiftInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoAllTotelChargeGiftInfo::kInfoFieldNumber;
#endif  // !_MSC_VER

ProtoAllTotelChargeGiftInfo::ProtoAllTotelChargeGiftInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoAllTotelChargeGiftInfo::InitAsDefaultInstance() {
}

ProtoAllTotelChargeGiftInfo::ProtoAllTotelChargeGiftInfo(const ProtoAllTotelChargeGiftInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoAllTotelChargeGiftInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoAllTotelChargeGiftInfo::~ProtoAllTotelChargeGiftInfo() {
  SharedDtor();
}

void ProtoAllTotelChargeGiftInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoAllTotelChargeGiftInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoAllTotelChargeGiftInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoAllTotelChargeGiftInfo_descriptor_;
}

const ProtoAllTotelChargeGiftInfo& ProtoAllTotelChargeGiftInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

ProtoAllTotelChargeGiftInfo* ProtoAllTotelChargeGiftInfo::default_instance_ = NULL;

ProtoAllTotelChargeGiftInfo* ProtoAllTotelChargeGiftInfo::New() const {
  return new ProtoAllTotelChargeGiftInfo;
}

void ProtoAllTotelChargeGiftInfo::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoAllTotelChargeGiftInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.SingleChargeBigGiftData info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoAllTotelChargeGiftInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.SingleChargeBigGiftData info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoAllTotelChargeGiftInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.SingleChargeBigGiftData info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoAllTotelChargeGiftInfo::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.SingleChargeBigGiftData info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoAllTotelChargeGiftInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoAllTotelChargeGiftInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoAllTotelChargeGiftInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoAllTotelChargeGiftInfo::MergeFrom(const ProtoAllTotelChargeGiftInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoAllTotelChargeGiftInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoAllTotelChargeGiftInfo::CopyFrom(const ProtoAllTotelChargeGiftInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoAllTotelChargeGiftInfo::IsInitialized() const {

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void ProtoAllTotelChargeGiftInfo::Swap(ProtoAllTotelChargeGiftInfo* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoAllTotelChargeGiftInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoAllTotelChargeGiftInfo_descriptor_;
  metadata.reflection = ProtoAllTotelChargeGiftInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SingleSevenDayInfo::kNIDFieldNumber;
const int SingleSevenDayInfo::kNProgressFieldNumber;
const int SingleSevenDayInfo::kStatusFieldNumber;
#endif  // !_MSC_VER

SingleSevenDayInfo::SingleSevenDayInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SingleSevenDayInfo::InitAsDefaultInstance() {
}

SingleSevenDayInfo::SingleSevenDayInfo(const SingleSevenDayInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SingleSevenDayInfo::SharedCtor() {
  _cached_size_ = 0;
  nid_ = 0;
  nprogress_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleSevenDayInfo::~SingleSevenDayInfo() {
  SharedDtor();
}

void SingleSevenDayInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SingleSevenDayInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleSevenDayInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleSevenDayInfo_descriptor_;
}

const SingleSevenDayInfo& SingleSevenDayInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

SingleSevenDayInfo* SingleSevenDayInfo::default_instance_ = NULL;

SingleSevenDayInfo* SingleSevenDayInfo::New() const {
  return new SingleSevenDayInfo;
}

void SingleSevenDayInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nid_ = 0;
    nprogress_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SingleSevenDayInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nid_)));
          set_has_nid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nProgress;
        break;
      }

      // required int32 nProgress = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nProgress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nprogress_)));
          set_has_nprogress();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required int32 status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SingleSevenDayInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 nID = 1;
  if (has_nid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nid(), output);
  }

  // required int32 nProgress = 2;
  if (has_nprogress()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nprogress(), output);
  }

  // required int32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SingleSevenDayInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 nID = 1;
  if (has_nid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nid(), target);
  }

  // required int32 nProgress = 2;
  if (has_nprogress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nprogress(), target);
  }

  // required int32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SingleSevenDayInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nID = 1;
    if (has_nid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nid());
    }

    // required int32 nProgress = 2;
    if (has_nprogress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nprogress());
    }

    // required int32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleSevenDayInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SingleSevenDayInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SingleSevenDayInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleSevenDayInfo::MergeFrom(const SingleSevenDayInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nid()) {
      set_nid(from.nid());
    }
    if (from.has_nprogress()) {
      set_nprogress(from.nprogress());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SingleSevenDayInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleSevenDayInfo::CopyFrom(const SingleSevenDayInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleSevenDayInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SingleSevenDayInfo::Swap(SingleSevenDayInfo* other) {
  if (other != this) {
    std::swap(nid_, other->nid_);
    std::swap(nprogress_, other->nprogress_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SingleSevenDayInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SingleSevenDayInfo_descriptor_;
  metadata.reflection = SingleSevenDayInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoAllSevenDayTargetInfo::kAllInfoFieldNumber;
const int ProtoAllSevenDayTargetInfo::kReceivedAwardsFieldNumber;
const int ProtoAllSevenDayTargetInfo::kActivityIdFieldNumber;
const int ProtoAllSevenDayTargetInfo::kIntegralFieldNumber;
#endif  // !_MSC_VER

ProtoAllSevenDayTargetInfo::ProtoAllSevenDayTargetInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoAllSevenDayTargetInfo::InitAsDefaultInstance() {
}

ProtoAllSevenDayTargetInfo::ProtoAllSevenDayTargetInfo(const ProtoAllSevenDayTargetInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoAllSevenDayTargetInfo::SharedCtor() {
  _cached_size_ = 0;
  activity_id_ = 0u;
  integral_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoAllSevenDayTargetInfo::~ProtoAllSevenDayTargetInfo() {
  SharedDtor();
}

void ProtoAllSevenDayTargetInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoAllSevenDayTargetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoAllSevenDayTargetInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoAllSevenDayTargetInfo_descriptor_;
}

const ProtoAllSevenDayTargetInfo& ProtoAllSevenDayTargetInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

ProtoAllSevenDayTargetInfo* ProtoAllSevenDayTargetInfo::default_instance_ = NULL;

ProtoAllSevenDayTargetInfo* ProtoAllSevenDayTargetInfo::New() const {
  return new ProtoAllSevenDayTargetInfo;
}

void ProtoAllSevenDayTargetInfo::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    activity_id_ = 0u;
    integral_ = 0u;
  }
  allinfo_.Clear();
  received_awards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoAllSevenDayTargetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.SingleSevenDayInfo allInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_allInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_allinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_allInfo;
        if (input->ExpectTag(16)) goto parse_received_awards;
        break;
      }

      // repeated uint32 received_awards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_received_awards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_received_awards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_received_awards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_received_awards;
        if (input->ExpectTag(24)) goto parse_activity_id;
        break;
      }

      // optional uint32 activity_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activity_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activity_id_)));
          set_has_activity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_integral;
        break;
      }

      // optional uint32 integral = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_integral:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &integral_)));
          set_has_integral();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoAllSevenDayTargetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.SingleSevenDayInfo allInfo = 1;
  for (int i = 0; i < this->allinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->allinfo(i), output);
  }

  // repeated uint32 received_awards = 2;
  for (int i = 0; i < this->received_awards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->received_awards(i), output);
  }

  // optional uint32 activity_id = 3;
  if (has_activity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->activity_id(), output);
  }

  // optional uint32 integral = 4;
  if (has_integral()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->integral(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoAllSevenDayTargetInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.SingleSevenDayInfo allInfo = 1;
  for (int i = 0; i < this->allinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->allinfo(i), target);
  }

  // repeated uint32 received_awards = 2;
  for (int i = 0; i < this->received_awards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->received_awards(i), target);
  }

  // optional uint32 activity_id = 3;
  if (has_activity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->activity_id(), target);
  }

  // optional uint32 integral = 4;
  if (has_integral()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->integral(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoAllSevenDayTargetInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint32 activity_id = 3;
    if (has_activity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activity_id());
    }

    // optional uint32 integral = 4;
    if (has_integral()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->integral());
    }

  }
  // repeated .proto.message.SingleSevenDayInfo allInfo = 1;
  total_size += 1 * this->allinfo_size();
  for (int i = 0; i < this->allinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->allinfo(i));
  }

  // repeated uint32 received_awards = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->received_awards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->received_awards(i));
    }
    total_size += 1 * this->received_awards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoAllSevenDayTargetInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoAllSevenDayTargetInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoAllSevenDayTargetInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoAllSevenDayTargetInfo::MergeFrom(const ProtoAllSevenDayTargetInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  allinfo_.MergeFrom(from.allinfo_);
  received_awards_.MergeFrom(from.received_awards_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_activity_id()) {
      set_activity_id(from.activity_id());
    }
    if (from.has_integral()) {
      set_integral(from.integral());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoAllSevenDayTargetInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoAllSevenDayTargetInfo::CopyFrom(const ProtoAllSevenDayTargetInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoAllSevenDayTargetInfo::IsInitialized() const {

  for (int i = 0; i < allinfo_size(); i++) {
    if (!this->allinfo(i).IsInitialized()) return false;
  }
  return true;
}

void ProtoAllSevenDayTargetInfo::Swap(ProtoAllSevenDayTargetInfo* other) {
  if (other != this) {
    allinfo_.Swap(&other->allinfo_);
    received_awards_.Swap(&other->received_awards_);
    std::swap(activity_id_, other->activity_id_);
    std::swap(integral_, other->integral_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoAllSevenDayTargetInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoAllSevenDayTargetInfo_descriptor_;
  metadata.reflection = ProtoAllSevenDayTargetInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Activity_CS_DailyFirstCharge_Query::Activity_CS_DailyFirstCharge_Query()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_CS_DailyFirstCharge_Query::InitAsDefaultInstance() {
}

Activity_CS_DailyFirstCharge_Query::Activity_CS_DailyFirstCharge_Query(const Activity_CS_DailyFirstCharge_Query& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_CS_DailyFirstCharge_Query::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_CS_DailyFirstCharge_Query::~Activity_CS_DailyFirstCharge_Query() {
  SharedDtor();
}

void Activity_CS_DailyFirstCharge_Query::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity_CS_DailyFirstCharge_Query::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_CS_DailyFirstCharge_Query::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_CS_DailyFirstCharge_Query_descriptor_;
}

const Activity_CS_DailyFirstCharge_Query& Activity_CS_DailyFirstCharge_Query::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

Activity_CS_DailyFirstCharge_Query* Activity_CS_DailyFirstCharge_Query::default_instance_ = NULL;

Activity_CS_DailyFirstCharge_Query* Activity_CS_DailyFirstCharge_Query::New() const {
  return new Activity_CS_DailyFirstCharge_Query;
}

void Activity_CS_DailyFirstCharge_Query::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_CS_DailyFirstCharge_Query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Activity_CS_DailyFirstCharge_Query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_CS_DailyFirstCharge_Query::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_CS_DailyFirstCharge_Query::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_CS_DailyFirstCharge_Query::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_CS_DailyFirstCharge_Query* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_CS_DailyFirstCharge_Query*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_CS_DailyFirstCharge_Query::MergeFrom(const Activity_CS_DailyFirstCharge_Query& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_CS_DailyFirstCharge_Query::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_CS_DailyFirstCharge_Query::CopyFrom(const Activity_CS_DailyFirstCharge_Query& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_CS_DailyFirstCharge_Query::IsInitialized() const {

  return true;
}

void Activity_CS_DailyFirstCharge_Query::Swap(Activity_CS_DailyFirstCharge_Query* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_CS_DailyFirstCharge_Query::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_CS_DailyFirstCharge_Query_descriptor_;
  metadata.reflection = Activity_CS_DailyFirstCharge_Query_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity_CS_DailyFirstCharge_Do::kIsFirstFieldNumber;
const int Activity_CS_DailyFirstCharge_Do::kDailyFirstIdFieldNumber;
const int Activity_CS_DailyFirstCharge_Do::kIndexIdFieldNumber;
#endif  // !_MSC_VER

Activity_CS_DailyFirstCharge_Do::Activity_CS_DailyFirstCharge_Do()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_CS_DailyFirstCharge_Do::InitAsDefaultInstance() {
}

Activity_CS_DailyFirstCharge_Do::Activity_CS_DailyFirstCharge_Do(const Activity_CS_DailyFirstCharge_Do& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_CS_DailyFirstCharge_Do::SharedCtor() {
  _cached_size_ = 0;
  isfirst_ = false;
  dailyfirstid_ = 0;
  indexid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_CS_DailyFirstCharge_Do::~Activity_CS_DailyFirstCharge_Do() {
  SharedDtor();
}

void Activity_CS_DailyFirstCharge_Do::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity_CS_DailyFirstCharge_Do::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_CS_DailyFirstCharge_Do::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_CS_DailyFirstCharge_Do_descriptor_;
}

const Activity_CS_DailyFirstCharge_Do& Activity_CS_DailyFirstCharge_Do::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

Activity_CS_DailyFirstCharge_Do* Activity_CS_DailyFirstCharge_Do::default_instance_ = NULL;

Activity_CS_DailyFirstCharge_Do* Activity_CS_DailyFirstCharge_Do::New() const {
  return new Activity_CS_DailyFirstCharge_Do;
}

void Activity_CS_DailyFirstCharge_Do::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isfirst_ = false;
    dailyfirstid_ = 0;
    indexid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_CS_DailyFirstCharge_Do::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isFirst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfirst_)));
          set_has_isfirst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dailyFirstId;
        break;
      }

      // optional int32 dailyFirstId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dailyFirstId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dailyfirstid_)));
          set_has_dailyfirstid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_indexId;
        break;
      }

      // optional int32 indexId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_indexId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &indexid_)));
          set_has_indexid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity_CS_DailyFirstCharge_Do::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool isFirst = 1;
  if (has_isfirst()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isfirst(), output);
  }

  // optional int32 dailyFirstId = 2;
  if (has_dailyfirstid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dailyfirstid(), output);
  }

  // optional int32 indexId = 3;
  if (has_indexid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->indexid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_CS_DailyFirstCharge_Do::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool isFirst = 1;
  if (has_isfirst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isfirst(), target);
  }

  // optional int32 dailyFirstId = 2;
  if (has_dailyfirstid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dailyfirstid(), target);
  }

  // optional int32 indexId = 3;
  if (has_indexid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->indexid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_CS_DailyFirstCharge_Do::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isFirst = 1;
    if (has_isfirst()) {
      total_size += 1 + 1;
    }

    // optional int32 dailyFirstId = 2;
    if (has_dailyfirstid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dailyfirstid());
    }

    // optional int32 indexId = 3;
    if (has_indexid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->indexid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_CS_DailyFirstCharge_Do::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_CS_DailyFirstCharge_Do* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_CS_DailyFirstCharge_Do*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_CS_DailyFirstCharge_Do::MergeFrom(const Activity_CS_DailyFirstCharge_Do& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isfirst()) {
      set_isfirst(from.isfirst());
    }
    if (from.has_dailyfirstid()) {
      set_dailyfirstid(from.dailyfirstid());
    }
    if (from.has_indexid()) {
      set_indexid(from.indexid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_CS_DailyFirstCharge_Do::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_CS_DailyFirstCharge_Do::CopyFrom(const Activity_CS_DailyFirstCharge_Do& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_CS_DailyFirstCharge_Do::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Activity_CS_DailyFirstCharge_Do::Swap(Activity_CS_DailyFirstCharge_Do* other) {
  if (other != this) {
    std::swap(isfirst_, other->isfirst_);
    std::swap(dailyfirstid_, other->dailyfirstid_);
    std::swap(indexid_, other->indexid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_CS_DailyFirstCharge_Do::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_CS_DailyFirstCharge_Do_descriptor_;
  metadata.reflection = Activity_CS_DailyFirstCharge_Do_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity_SC_DailyFirstCharge_Query::kFirstawardstatusFieldNumber;
const int Activity_SC_DailyFirstCharge_Query::kInfoFieldNumber;
const int Activity_SC_DailyFirstCharge_Query::kTodayTotalFieldNumber;
#endif  // !_MSC_VER

Activity_SC_DailyFirstCharge_Query::Activity_SC_DailyFirstCharge_Query()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_SC_DailyFirstCharge_Query::InitAsDefaultInstance() {
}

Activity_SC_DailyFirstCharge_Query::Activity_SC_DailyFirstCharge_Query(const Activity_SC_DailyFirstCharge_Query& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_SC_DailyFirstCharge_Query::SharedCtor() {
  _cached_size_ = 0;
  firstawardstatus_ = 0;
  todaytotal_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_SC_DailyFirstCharge_Query::~Activity_SC_DailyFirstCharge_Query() {
  SharedDtor();
}

void Activity_SC_DailyFirstCharge_Query::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity_SC_DailyFirstCharge_Query::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_SC_DailyFirstCharge_Query::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_SC_DailyFirstCharge_Query_descriptor_;
}

const Activity_SC_DailyFirstCharge_Query& Activity_SC_DailyFirstCharge_Query::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

Activity_SC_DailyFirstCharge_Query* Activity_SC_DailyFirstCharge_Query::default_instance_ = NULL;

Activity_SC_DailyFirstCharge_Query* Activity_SC_DailyFirstCharge_Query::New() const {
  return new Activity_SC_DailyFirstCharge_Query;
}

void Activity_SC_DailyFirstCharge_Query::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    firstawardstatus_ = 0;
    todaytotal_ = 0;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_SC_DailyFirstCharge_Query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 firstawardstatus = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &firstawardstatus_)));
          set_has_firstawardstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .proto.message.SingleAwardData info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectTag(24)) goto parse_todayTotal;
        break;
      }

      // required int32 todayTotal = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_todayTotal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &todaytotal_)));
          set_has_todaytotal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity_SC_DailyFirstCharge_Query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 firstawardstatus = 1;
  if (has_firstawardstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->firstawardstatus(), output);
  }

  // repeated .proto.message.SingleAwardData info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  // required int32 todayTotal = 3;
  if (has_todaytotal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->todaytotal(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_SC_DailyFirstCharge_Query::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 firstawardstatus = 1;
  if (has_firstawardstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->firstawardstatus(), target);
  }

  // repeated .proto.message.SingleAwardData info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  // required int32 todayTotal = 3;
  if (has_todaytotal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->todaytotal(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_SC_DailyFirstCharge_Query::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 firstawardstatus = 1;
    if (has_firstawardstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->firstawardstatus());
    }

    // required int32 todayTotal = 3;
    if (has_todaytotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->todaytotal());
    }

  }
  // repeated .proto.message.SingleAwardData info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_SC_DailyFirstCharge_Query::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_SC_DailyFirstCharge_Query* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_SC_DailyFirstCharge_Query*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_SC_DailyFirstCharge_Query::MergeFrom(const Activity_SC_DailyFirstCharge_Query& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_firstawardstatus()) {
      set_firstawardstatus(from.firstawardstatus());
    }
    if (from.has_todaytotal()) {
      set_todaytotal(from.todaytotal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_SC_DailyFirstCharge_Query::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_SC_DailyFirstCharge_Query::CopyFrom(const Activity_SC_DailyFirstCharge_Query& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_SC_DailyFirstCharge_Query::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void Activity_SC_DailyFirstCharge_Query::Swap(Activity_SC_DailyFirstCharge_Query* other) {
  if (other != this) {
    std::swap(firstawardstatus_, other->firstawardstatus_);
    info_.Swap(&other->info_);
    std::swap(todaytotal_, other->todaytotal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_SC_DailyFirstCharge_Query::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_SC_DailyFirstCharge_Query_descriptor_;
  metadata.reflection = Activity_SC_DailyFirstCharge_Query_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity_SC_DailyFirstCharge_Do::kResultFieldNumber;
#endif  // !_MSC_VER

Activity_SC_DailyFirstCharge_Do::Activity_SC_DailyFirstCharge_Do()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_SC_DailyFirstCharge_Do::InitAsDefaultInstance() {
}

Activity_SC_DailyFirstCharge_Do::Activity_SC_DailyFirstCharge_Do(const Activity_SC_DailyFirstCharge_Do& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_SC_DailyFirstCharge_Do::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_SC_DailyFirstCharge_Do::~Activity_SC_DailyFirstCharge_Do() {
  SharedDtor();
}

void Activity_SC_DailyFirstCharge_Do::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity_SC_DailyFirstCharge_Do::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_SC_DailyFirstCharge_Do::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_SC_DailyFirstCharge_Do_descriptor_;
}

const Activity_SC_DailyFirstCharge_Do& Activity_SC_DailyFirstCharge_Do::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

Activity_SC_DailyFirstCharge_Do* Activity_SC_DailyFirstCharge_Do::default_instance_ = NULL;

Activity_SC_DailyFirstCharge_Do* Activity_SC_DailyFirstCharge_Do::New() const {
  return new Activity_SC_DailyFirstCharge_Do;
}

void Activity_SC_DailyFirstCharge_Do::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_SC_DailyFirstCharge_Do::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity_SC_DailyFirstCharge_Do::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_SC_DailyFirstCharge_Do::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_SC_DailyFirstCharge_Do::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_SC_DailyFirstCharge_Do::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_SC_DailyFirstCharge_Do* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_SC_DailyFirstCharge_Do*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_SC_DailyFirstCharge_Do::MergeFrom(const Activity_SC_DailyFirstCharge_Do& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_SC_DailyFirstCharge_Do::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_SC_DailyFirstCharge_Do::CopyFrom(const Activity_SC_DailyFirstCharge_Do& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_SC_DailyFirstCharge_Do::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Activity_SC_DailyFirstCharge_Do::Swap(Activity_SC_DailyFirstCharge_Do* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_SC_DailyFirstCharge_Do::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_SC_DailyFirstCharge_Do_descriptor_;
  metadata.reflection = Activity_SC_DailyFirstCharge_Do_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Marketing_CS_QuerySevenDayTargetInfo::Marketing_CS_QuerySevenDayTargetInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Marketing_CS_QuerySevenDayTargetInfo::InitAsDefaultInstance() {
}

Marketing_CS_QuerySevenDayTargetInfo::Marketing_CS_QuerySevenDayTargetInfo(const Marketing_CS_QuerySevenDayTargetInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Marketing_CS_QuerySevenDayTargetInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Marketing_CS_QuerySevenDayTargetInfo::~Marketing_CS_QuerySevenDayTargetInfo() {
  SharedDtor();
}

void Marketing_CS_QuerySevenDayTargetInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Marketing_CS_QuerySevenDayTargetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Marketing_CS_QuerySevenDayTargetInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Marketing_CS_QuerySevenDayTargetInfo_descriptor_;
}

const Marketing_CS_QuerySevenDayTargetInfo& Marketing_CS_QuerySevenDayTargetInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

Marketing_CS_QuerySevenDayTargetInfo* Marketing_CS_QuerySevenDayTargetInfo::default_instance_ = NULL;

Marketing_CS_QuerySevenDayTargetInfo* Marketing_CS_QuerySevenDayTargetInfo::New() const {
  return new Marketing_CS_QuerySevenDayTargetInfo;
}

void Marketing_CS_QuerySevenDayTargetInfo::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Marketing_CS_QuerySevenDayTargetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Marketing_CS_QuerySevenDayTargetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Marketing_CS_QuerySevenDayTargetInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Marketing_CS_QuerySevenDayTargetInfo::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Marketing_CS_QuerySevenDayTargetInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Marketing_CS_QuerySevenDayTargetInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Marketing_CS_QuerySevenDayTargetInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Marketing_CS_QuerySevenDayTargetInfo::MergeFrom(const Marketing_CS_QuerySevenDayTargetInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Marketing_CS_QuerySevenDayTargetInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Marketing_CS_QuerySevenDayTargetInfo::CopyFrom(const Marketing_CS_QuerySevenDayTargetInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Marketing_CS_QuerySevenDayTargetInfo::IsInitialized() const {

  return true;
}

void Marketing_CS_QuerySevenDayTargetInfo::Swap(Marketing_CS_QuerySevenDayTargetInfo* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Marketing_CS_QuerySevenDayTargetInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Marketing_CS_QuerySevenDayTargetInfo_descriptor_;
  metadata.reflection = Marketing_CS_QuerySevenDayTargetInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Marketing_SC_QuerySevenDayTargetInfo::kAllInfoFieldNumber;
const int Marketing_SC_QuerySevenDayTargetInfo::kReceivedAwardsFieldNumber;
const int Marketing_SC_QuerySevenDayTargetInfo::kIntegralFieldNumber;
#endif  // !_MSC_VER

Marketing_SC_QuerySevenDayTargetInfo::Marketing_SC_QuerySevenDayTargetInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Marketing_SC_QuerySevenDayTargetInfo::InitAsDefaultInstance() {
}

Marketing_SC_QuerySevenDayTargetInfo::Marketing_SC_QuerySevenDayTargetInfo(const Marketing_SC_QuerySevenDayTargetInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Marketing_SC_QuerySevenDayTargetInfo::SharedCtor() {
  _cached_size_ = 0;
  integral_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Marketing_SC_QuerySevenDayTargetInfo::~Marketing_SC_QuerySevenDayTargetInfo() {
  SharedDtor();
}

void Marketing_SC_QuerySevenDayTargetInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Marketing_SC_QuerySevenDayTargetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Marketing_SC_QuerySevenDayTargetInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Marketing_SC_QuerySevenDayTargetInfo_descriptor_;
}

const Marketing_SC_QuerySevenDayTargetInfo& Marketing_SC_QuerySevenDayTargetInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

Marketing_SC_QuerySevenDayTargetInfo* Marketing_SC_QuerySevenDayTargetInfo::default_instance_ = NULL;

Marketing_SC_QuerySevenDayTargetInfo* Marketing_SC_QuerySevenDayTargetInfo::New() const {
  return new Marketing_SC_QuerySevenDayTargetInfo;
}

void Marketing_SC_QuerySevenDayTargetInfo::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    integral_ = 0;
  }
  allinfo_.Clear();
  received_awards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Marketing_SC_QuerySevenDayTargetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.SingleSevenDayInfo allInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_allInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_allinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_allInfo;
        if (input->ExpectTag(16)) goto parse_received_awards;
        break;
      }

      // repeated int32 received_awards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_received_awards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_received_awards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_received_awards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_received_awards;
        if (input->ExpectTag(24)) goto parse_integral;
        break;
      }

      // optional int32 integral = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_integral:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &integral_)));
          set_has_integral();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Marketing_SC_QuerySevenDayTargetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.SingleSevenDayInfo allInfo = 1;
  for (int i = 0; i < this->allinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->allinfo(i), output);
  }

  // repeated int32 received_awards = 2;
  for (int i = 0; i < this->received_awards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->received_awards(i), output);
  }

  // optional int32 integral = 3;
  if (has_integral()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->integral(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Marketing_SC_QuerySevenDayTargetInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.SingleSevenDayInfo allInfo = 1;
  for (int i = 0; i < this->allinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->allinfo(i), target);
  }

  // repeated int32 received_awards = 2;
  for (int i = 0; i < this->received_awards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->received_awards(i), target);
  }

  // optional int32 integral = 3;
  if (has_integral()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->integral(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Marketing_SC_QuerySevenDayTargetInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional int32 integral = 3;
    if (has_integral()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->integral());
    }

  }
  // repeated .proto.message.SingleSevenDayInfo allInfo = 1;
  total_size += 1 * this->allinfo_size();
  for (int i = 0; i < this->allinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->allinfo(i));
  }

  // repeated int32 received_awards = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->received_awards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->received_awards(i));
    }
    total_size += 1 * this->received_awards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Marketing_SC_QuerySevenDayTargetInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Marketing_SC_QuerySevenDayTargetInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Marketing_SC_QuerySevenDayTargetInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Marketing_SC_QuerySevenDayTargetInfo::MergeFrom(const Marketing_SC_QuerySevenDayTargetInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  allinfo_.MergeFrom(from.allinfo_);
  received_awards_.MergeFrom(from.received_awards_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_integral()) {
      set_integral(from.integral());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Marketing_SC_QuerySevenDayTargetInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Marketing_SC_QuerySevenDayTargetInfo::CopyFrom(const Marketing_SC_QuerySevenDayTargetInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Marketing_SC_QuerySevenDayTargetInfo::IsInitialized() const {

  for (int i = 0; i < allinfo_size(); i++) {
    if (!this->allinfo(i).IsInitialized()) return false;
  }
  return true;
}

void Marketing_SC_QuerySevenDayTargetInfo::Swap(Marketing_SC_QuerySevenDayTargetInfo* other) {
  if (other != this) {
    allinfo_.Swap(&other->allinfo_);
    received_awards_.Swap(&other->received_awards_);
    std::swap(integral_, other->integral_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Marketing_SC_QuerySevenDayTargetInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Marketing_SC_QuerySevenDayTargetInfo_descriptor_;
  metadata.reflection = Marketing_SC_QuerySevenDayTargetInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Marketing_CS_GetSevenDayTargetReward::kRewardIdFieldNumber;
#endif  // !_MSC_VER

Marketing_CS_GetSevenDayTargetReward::Marketing_CS_GetSevenDayTargetReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Marketing_CS_GetSevenDayTargetReward::InitAsDefaultInstance() {
}

Marketing_CS_GetSevenDayTargetReward::Marketing_CS_GetSevenDayTargetReward(const Marketing_CS_GetSevenDayTargetReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Marketing_CS_GetSevenDayTargetReward::SharedCtor() {
  _cached_size_ = 0;
  rewardid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Marketing_CS_GetSevenDayTargetReward::~Marketing_CS_GetSevenDayTargetReward() {
  SharedDtor();
}

void Marketing_CS_GetSevenDayTargetReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Marketing_CS_GetSevenDayTargetReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Marketing_CS_GetSevenDayTargetReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Marketing_CS_GetSevenDayTargetReward_descriptor_;
}

const Marketing_CS_GetSevenDayTargetReward& Marketing_CS_GetSevenDayTargetReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

Marketing_CS_GetSevenDayTargetReward* Marketing_CS_GetSevenDayTargetReward::default_instance_ = NULL;

Marketing_CS_GetSevenDayTargetReward* Marketing_CS_GetSevenDayTargetReward::New() const {
  return new Marketing_CS_GetSevenDayTargetReward;
}

void Marketing_CS_GetSevenDayTargetReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rewardid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Marketing_CS_GetSevenDayTargetReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rewardId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rewardid_)));
          set_has_rewardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Marketing_CS_GetSevenDayTargetReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rewardId = 1;
  if (has_rewardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rewardid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Marketing_CS_GetSevenDayTargetReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 rewardId = 1;
  if (has_rewardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rewardid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Marketing_CS_GetSevenDayTargetReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rewardId = 1;
    if (has_rewardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rewardid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Marketing_CS_GetSevenDayTargetReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Marketing_CS_GetSevenDayTargetReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Marketing_CS_GetSevenDayTargetReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Marketing_CS_GetSevenDayTargetReward::MergeFrom(const Marketing_CS_GetSevenDayTargetReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rewardid()) {
      set_rewardid(from.rewardid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Marketing_CS_GetSevenDayTargetReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Marketing_CS_GetSevenDayTargetReward::CopyFrom(const Marketing_CS_GetSevenDayTargetReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Marketing_CS_GetSevenDayTargetReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Marketing_CS_GetSevenDayTargetReward::Swap(Marketing_CS_GetSevenDayTargetReward* other) {
  if (other != this) {
    std::swap(rewardid_, other->rewardid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Marketing_CS_GetSevenDayTargetReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Marketing_CS_GetSevenDayTargetReward_descriptor_;
  metadata.reflection = Marketing_CS_GetSevenDayTargetReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Marketing_SC_GetSevenDayTargetReward::kRetFieldNumber;
#endif  // !_MSC_VER

Marketing_SC_GetSevenDayTargetReward::Marketing_SC_GetSevenDayTargetReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Marketing_SC_GetSevenDayTargetReward::InitAsDefaultInstance() {
}

Marketing_SC_GetSevenDayTargetReward::Marketing_SC_GetSevenDayTargetReward(const Marketing_SC_GetSevenDayTargetReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Marketing_SC_GetSevenDayTargetReward::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Marketing_SC_GetSevenDayTargetReward::~Marketing_SC_GetSevenDayTargetReward() {
  SharedDtor();
}

void Marketing_SC_GetSevenDayTargetReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Marketing_SC_GetSevenDayTargetReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Marketing_SC_GetSevenDayTargetReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Marketing_SC_GetSevenDayTargetReward_descriptor_;
}

const Marketing_SC_GetSevenDayTargetReward& Marketing_SC_GetSevenDayTargetReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

Marketing_SC_GetSevenDayTargetReward* Marketing_SC_GetSevenDayTargetReward::default_instance_ = NULL;

Marketing_SC_GetSevenDayTargetReward* Marketing_SC_GetSevenDayTargetReward::New() const {
  return new Marketing_SC_GetSevenDayTargetReward;
}

void Marketing_SC_GetSevenDayTargetReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Marketing_SC_GetSevenDayTargetReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Marketing_SC_GetSevenDayTargetReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Marketing_SC_GetSevenDayTargetReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Marketing_SC_GetSevenDayTargetReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Marketing_SC_GetSevenDayTargetReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Marketing_SC_GetSevenDayTargetReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Marketing_SC_GetSevenDayTargetReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Marketing_SC_GetSevenDayTargetReward::MergeFrom(const Marketing_SC_GetSevenDayTargetReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Marketing_SC_GetSevenDayTargetReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Marketing_SC_GetSevenDayTargetReward::CopyFrom(const Marketing_SC_GetSevenDayTargetReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Marketing_SC_GetSevenDayTargetReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Marketing_SC_GetSevenDayTargetReward::Swap(Marketing_SC_GetSevenDayTargetReward* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Marketing_SC_GetSevenDayTargetReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Marketing_SC_GetSevenDayTargetReward_descriptor_;
  metadata.reflection = Marketing_SC_GetSevenDayTargetReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity_CS_GetSevenDayTargetIntegralAward::kIdFieldNumber;
#endif  // !_MSC_VER

Activity_CS_GetSevenDayTargetIntegralAward::Activity_CS_GetSevenDayTargetIntegralAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_CS_GetSevenDayTargetIntegralAward::InitAsDefaultInstance() {
}

Activity_CS_GetSevenDayTargetIntegralAward::Activity_CS_GetSevenDayTargetIntegralAward(const Activity_CS_GetSevenDayTargetIntegralAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_CS_GetSevenDayTargetIntegralAward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_CS_GetSevenDayTargetIntegralAward::~Activity_CS_GetSevenDayTargetIntegralAward() {
  SharedDtor();
}

void Activity_CS_GetSevenDayTargetIntegralAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity_CS_GetSevenDayTargetIntegralAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_CS_GetSevenDayTargetIntegralAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_CS_GetSevenDayTargetIntegralAward_descriptor_;
}

const Activity_CS_GetSevenDayTargetIntegralAward& Activity_CS_GetSevenDayTargetIntegralAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

Activity_CS_GetSevenDayTargetIntegralAward* Activity_CS_GetSevenDayTargetIntegralAward::default_instance_ = NULL;

Activity_CS_GetSevenDayTargetIntegralAward* Activity_CS_GetSevenDayTargetIntegralAward::New() const {
  return new Activity_CS_GetSevenDayTargetIntegralAward;
}

void Activity_CS_GetSevenDayTargetIntegralAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_CS_GetSevenDayTargetIntegralAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity_CS_GetSevenDayTargetIntegralAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_CS_GetSevenDayTargetIntegralAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_CS_GetSevenDayTargetIntegralAward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_CS_GetSevenDayTargetIntegralAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_CS_GetSevenDayTargetIntegralAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_CS_GetSevenDayTargetIntegralAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_CS_GetSevenDayTargetIntegralAward::MergeFrom(const Activity_CS_GetSevenDayTargetIntegralAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_CS_GetSevenDayTargetIntegralAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_CS_GetSevenDayTargetIntegralAward::CopyFrom(const Activity_CS_GetSevenDayTargetIntegralAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_CS_GetSevenDayTargetIntegralAward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Activity_CS_GetSevenDayTargetIntegralAward::Swap(Activity_CS_GetSevenDayTargetIntegralAward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_CS_GetSevenDayTargetIntegralAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_CS_GetSevenDayTargetIntegralAward_descriptor_;
  metadata.reflection = Activity_CS_GetSevenDayTargetIntegralAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity_SC_GetSevenDayTargetIntegralAward::kResFieldNumber;
#endif  // !_MSC_VER

Activity_SC_GetSevenDayTargetIntegralAward::Activity_SC_GetSevenDayTargetIntegralAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_SC_GetSevenDayTargetIntegralAward::InitAsDefaultInstance() {
}

Activity_SC_GetSevenDayTargetIntegralAward::Activity_SC_GetSevenDayTargetIntegralAward(const Activity_SC_GetSevenDayTargetIntegralAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_SC_GetSevenDayTargetIntegralAward::SharedCtor() {
  _cached_size_ = 0;
  res_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_SC_GetSevenDayTargetIntegralAward::~Activity_SC_GetSevenDayTargetIntegralAward() {
  SharedDtor();
}

void Activity_SC_GetSevenDayTargetIntegralAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity_SC_GetSevenDayTargetIntegralAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_SC_GetSevenDayTargetIntegralAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_SC_GetSevenDayTargetIntegralAward_descriptor_;
}

const Activity_SC_GetSevenDayTargetIntegralAward& Activity_SC_GetSevenDayTargetIntegralAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

Activity_SC_GetSevenDayTargetIntegralAward* Activity_SC_GetSevenDayTargetIntegralAward::default_instance_ = NULL;

Activity_SC_GetSevenDayTargetIntegralAward* Activity_SC_GetSevenDayTargetIntegralAward::New() const {
  return new Activity_SC_GetSevenDayTargetIntegralAward;
}

void Activity_SC_GetSevenDayTargetIntegralAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    res_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_SC_GetSevenDayTargetIntegralAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 res = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &res_)));
          set_has_res();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity_SC_GetSevenDayTargetIntegralAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 res = 1;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->res(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_SC_GetSevenDayTargetIntegralAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 res = 1;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->res(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_SC_GetSevenDayTargetIntegralAward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 res = 1;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->res());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_SC_GetSevenDayTargetIntegralAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_SC_GetSevenDayTargetIntegralAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_SC_GetSevenDayTargetIntegralAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_SC_GetSevenDayTargetIntegralAward::MergeFrom(const Activity_SC_GetSevenDayTargetIntegralAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_res()) {
      set_res(from.res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_SC_GetSevenDayTargetIntegralAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_SC_GetSevenDayTargetIntegralAward::CopyFrom(const Activity_SC_GetSevenDayTargetIntegralAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_SC_GetSevenDayTargetIntegralAward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Activity_SC_GetSevenDayTargetIntegralAward::Swap(Activity_SC_GetSevenDayTargetIntegralAward* other) {
  if (other != this) {
    std::swap(res_, other->res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_SC_GetSevenDayTargetIntegralAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_SC_GetSevenDayTargetIntegralAward_descriptor_;
  metadata.reflection = Activity_SC_GetSevenDayTargetIntegralAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Marketing_SC_UpdateServerOpenDay::kYearNumFieldNumber;
const int Marketing_SC_UpdateServerOpenDay::kMonNumFieldNumber;
const int Marketing_SC_UpdateServerOpenDay::kDayNumFieldNumber;
const int Marketing_SC_UpdateServerOpenDay::kTickFieldNumber;
const int Marketing_SC_UpdateServerOpenDay::kOpenDayNumFieldNumber;
const int Marketing_SC_UpdateServerOpenDay::kNowtickFieldNumber;
const int Marketing_SC_UpdateServerOpenDay::kIsLoginFieldNumber;
#endif  // !_MSC_VER

Marketing_SC_UpdateServerOpenDay::Marketing_SC_UpdateServerOpenDay()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Marketing_SC_UpdateServerOpenDay::InitAsDefaultInstance() {
}

Marketing_SC_UpdateServerOpenDay::Marketing_SC_UpdateServerOpenDay(const Marketing_SC_UpdateServerOpenDay& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Marketing_SC_UpdateServerOpenDay::SharedCtor() {
  _cached_size_ = 0;
  yearnum_ = 0;
  monnum_ = 0;
  daynum_ = 0;
  tick_ = GOOGLE_ULONGLONG(0);
  opendaynum_ = 0;
  nowtick_ = GOOGLE_ULONGLONG(0);
  islogin_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Marketing_SC_UpdateServerOpenDay::~Marketing_SC_UpdateServerOpenDay() {
  SharedDtor();
}

void Marketing_SC_UpdateServerOpenDay::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Marketing_SC_UpdateServerOpenDay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Marketing_SC_UpdateServerOpenDay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Marketing_SC_UpdateServerOpenDay_descriptor_;
}

const Marketing_SC_UpdateServerOpenDay& Marketing_SC_UpdateServerOpenDay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

Marketing_SC_UpdateServerOpenDay* Marketing_SC_UpdateServerOpenDay::default_instance_ = NULL;

Marketing_SC_UpdateServerOpenDay* Marketing_SC_UpdateServerOpenDay::New() const {
  return new Marketing_SC_UpdateServerOpenDay;
}

void Marketing_SC_UpdateServerOpenDay::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    yearnum_ = 0;
    monnum_ = 0;
    daynum_ = 0;
    tick_ = GOOGLE_ULONGLONG(0);
    opendaynum_ = 0;
    nowtick_ = GOOGLE_ULONGLONG(0);
    islogin_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Marketing_SC_UpdateServerOpenDay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 yearNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &yearnum_)));
          set_has_yearnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_MonNum;
        break;
      }

      // optional int32 MonNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MonNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monnum_)));
          set_has_monnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dayNum;
        break;
      }

      // optional int32 dayNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dayNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &daynum_)));
          set_has_daynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tick;
        break;
      }

      // optional uint64 tick = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tick_)));
          set_has_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_openDayNum;
        break;
      }

      // optional int32 openDayNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_openDayNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opendaynum_)));
          set_has_opendaynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_nowtick;
        break;
      }

      // optional uint64 nowtick = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nowtick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nowtick_)));
          set_has_nowtick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_isLogin;
        break;
      }

      // optional bool isLogin = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isLogin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islogin_)));
          set_has_islogin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Marketing_SC_UpdateServerOpenDay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 yearNum = 1;
  if (has_yearnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->yearnum(), output);
  }

  // optional int32 MonNum = 2;
  if (has_monnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->monnum(), output);
  }

  // optional int32 dayNum = 3;
  if (has_daynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->daynum(), output);
  }

  // optional uint64 tick = 4;
  if (has_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->tick(), output);
  }

  // optional int32 openDayNum = 5;
  if (has_opendaynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->opendaynum(), output);
  }

  // optional uint64 nowtick = 6;
  if (has_nowtick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->nowtick(), output);
  }

  // optional bool isLogin = 7;
  if (has_islogin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->islogin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Marketing_SC_UpdateServerOpenDay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 yearNum = 1;
  if (has_yearnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->yearnum(), target);
  }

  // optional int32 MonNum = 2;
  if (has_monnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->monnum(), target);
  }

  // optional int32 dayNum = 3;
  if (has_daynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->daynum(), target);
  }

  // optional uint64 tick = 4;
  if (has_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->tick(), target);
  }

  // optional int32 openDayNum = 5;
  if (has_opendaynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->opendaynum(), target);
  }

  // optional uint64 nowtick = 6;
  if (has_nowtick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->nowtick(), target);
  }

  // optional bool isLogin = 7;
  if (has_islogin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->islogin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Marketing_SC_UpdateServerOpenDay::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 yearNum = 1;
    if (has_yearnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->yearnum());
    }

    // optional int32 MonNum = 2;
    if (has_monnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monnum());
    }

    // optional int32 dayNum = 3;
    if (has_daynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daynum());
    }

    // optional uint64 tick = 4;
    if (has_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tick());
    }

    // optional int32 openDayNum = 5;
    if (has_opendaynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opendaynum());
    }

    // optional uint64 nowtick = 6;
    if (has_nowtick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nowtick());
    }

    // optional bool isLogin = 7;
    if (has_islogin()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Marketing_SC_UpdateServerOpenDay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Marketing_SC_UpdateServerOpenDay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Marketing_SC_UpdateServerOpenDay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Marketing_SC_UpdateServerOpenDay::MergeFrom(const Marketing_SC_UpdateServerOpenDay& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_yearnum()) {
      set_yearnum(from.yearnum());
    }
    if (from.has_monnum()) {
      set_monnum(from.monnum());
    }
    if (from.has_daynum()) {
      set_daynum(from.daynum());
    }
    if (from.has_tick()) {
      set_tick(from.tick());
    }
    if (from.has_opendaynum()) {
      set_opendaynum(from.opendaynum());
    }
    if (from.has_nowtick()) {
      set_nowtick(from.nowtick());
    }
    if (from.has_islogin()) {
      set_islogin(from.islogin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Marketing_SC_UpdateServerOpenDay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Marketing_SC_UpdateServerOpenDay::CopyFrom(const Marketing_SC_UpdateServerOpenDay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Marketing_SC_UpdateServerOpenDay::IsInitialized() const {

  return true;
}

void Marketing_SC_UpdateServerOpenDay::Swap(Marketing_SC_UpdateServerOpenDay* other) {
  if (other != this) {
    std::swap(yearnum_, other->yearnum_);
    std::swap(monnum_, other->monnum_);
    std::swap(daynum_, other->daynum_);
    std::swap(tick_, other->tick_);
    std::swap(opendaynum_, other->opendaynum_);
    std::swap(nowtick_, other->nowtick_);
    std::swap(islogin_, other->islogin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Marketing_SC_UpdateServerOpenDay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Marketing_SC_UpdateServerOpenDay_descriptor_;
  metadata.reflection = Marketing_SC_UpdateServerOpenDay_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity_CS_DiamondDouble_GetHistory::kTypeFieldNumber;
#endif  // !_MSC_VER

Activity_CS_DiamondDouble_GetHistory::Activity_CS_DiamondDouble_GetHistory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_CS_DiamondDouble_GetHistory::InitAsDefaultInstance() {
}

Activity_CS_DiamondDouble_GetHistory::Activity_CS_DiamondDouble_GetHistory(const Activity_CS_DiamondDouble_GetHistory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_CS_DiamondDouble_GetHistory::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_CS_DiamondDouble_GetHistory::~Activity_CS_DiamondDouble_GetHistory() {
  SharedDtor();
}

void Activity_CS_DiamondDouble_GetHistory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity_CS_DiamondDouble_GetHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_CS_DiamondDouble_GetHistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_CS_DiamondDouble_GetHistory_descriptor_;
}

const Activity_CS_DiamondDouble_GetHistory& Activity_CS_DiamondDouble_GetHistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

Activity_CS_DiamondDouble_GetHistory* Activity_CS_DiamondDouble_GetHistory::default_instance_ = NULL;

Activity_CS_DiamondDouble_GetHistory* Activity_CS_DiamondDouble_GetHistory::New() const {
  return new Activity_CS_DiamondDouble_GetHistory;
}

void Activity_CS_DiamondDouble_GetHistory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_CS_DiamondDouble_GetHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity_CS_DiamondDouble_GetHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_CS_DiamondDouble_GetHistory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_CS_DiamondDouble_GetHistory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_CS_DiamondDouble_GetHistory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_CS_DiamondDouble_GetHistory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_CS_DiamondDouble_GetHistory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_CS_DiamondDouble_GetHistory::MergeFrom(const Activity_CS_DiamondDouble_GetHistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_CS_DiamondDouble_GetHistory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_CS_DiamondDouble_GetHistory::CopyFrom(const Activity_CS_DiamondDouble_GetHistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_CS_DiamondDouble_GetHistory::IsInitialized() const {

  return true;
}

void Activity_CS_DiamondDouble_GetHistory::Swap(Activity_CS_DiamondDouble_GetHistory* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_CS_DiamondDouble_GetHistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_CS_DiamondDouble_GetHistory_descriptor_;
  metadata.reflection = Activity_CS_DiamondDouble_GetHistory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity_SC_DiamondDouble_GetHistory::kTypeFieldNumber;
const int Activity_SC_DiamondDouble_GetHistory::kHistoryListFieldNumber;
const int Activity_SC_DiamondDouble_GetHistory::kUiRollTimesFieldNumber;
#endif  // !_MSC_VER

Activity_SC_DiamondDouble_GetHistory::Activity_SC_DiamondDouble_GetHistory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_SC_DiamondDouble_GetHistory::InitAsDefaultInstance() {
}

Activity_SC_DiamondDouble_GetHistory::Activity_SC_DiamondDouble_GetHistory(const Activity_SC_DiamondDouble_GetHistory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_SC_DiamondDouble_GetHistory::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  uirolltimes_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_SC_DiamondDouble_GetHistory::~Activity_SC_DiamondDouble_GetHistory() {
  SharedDtor();
}

void Activity_SC_DiamondDouble_GetHistory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity_SC_DiamondDouble_GetHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_SC_DiamondDouble_GetHistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_SC_DiamondDouble_GetHistory_descriptor_;
}

const Activity_SC_DiamondDouble_GetHistory& Activity_SC_DiamondDouble_GetHistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

Activity_SC_DiamondDouble_GetHistory* Activity_SC_DiamondDouble_GetHistory::default_instance_ = NULL;

Activity_SC_DiamondDouble_GetHistory* Activity_SC_DiamondDouble_GetHistory::New() const {
  return new Activity_SC_DiamondDouble_GetHistory;
}

void Activity_SC_DiamondDouble_GetHistory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    uirolltimes_ = 0u;
  }
  history_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_SC_DiamondDouble_GetHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_history_list;
        break;
      }

      // repeated .proto.message.DiamondDoubleHistory history_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_history_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_history_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_history_list;
        if (input->ExpectTag(24)) goto parse_uiRollTimes;
        break;
      }

      // optional uint32 uiRollTimes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiRollTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uirolltimes_)));
          set_has_uirolltimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity_SC_DiamondDouble_GetHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // repeated .proto.message.DiamondDoubleHistory history_list = 2;
  for (int i = 0; i < this->history_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->history_list(i), output);
  }

  // optional uint32 uiRollTimes = 3;
  if (has_uirolltimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uirolltimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_SC_DiamondDouble_GetHistory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // repeated .proto.message.DiamondDoubleHistory history_list = 2;
  for (int i = 0; i < this->history_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->history_list(i), target);
  }

  // optional uint32 uiRollTimes = 3;
  if (has_uirolltimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uirolltimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_SC_DiamondDouble_GetHistory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 uiRollTimes = 3;
    if (has_uirolltimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uirolltimes());
    }

  }
  // repeated .proto.message.DiamondDoubleHistory history_list = 2;
  total_size += 1 * this->history_list_size();
  for (int i = 0; i < this->history_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->history_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_SC_DiamondDouble_GetHistory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_SC_DiamondDouble_GetHistory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_SC_DiamondDouble_GetHistory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_SC_DiamondDouble_GetHistory::MergeFrom(const Activity_SC_DiamondDouble_GetHistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  history_list_.MergeFrom(from.history_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_uirolltimes()) {
      set_uirolltimes(from.uirolltimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_SC_DiamondDouble_GetHistory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_SC_DiamondDouble_GetHistory::CopyFrom(const Activity_SC_DiamondDouble_GetHistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_SC_DiamondDouble_GetHistory::IsInitialized() const {

  return true;
}

void Activity_SC_DiamondDouble_GetHistory::Swap(Activity_SC_DiamondDouble_GetHistory* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    history_list_.Swap(&other->history_list_);
    std::swap(uirolltimes_, other->uirolltimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_SC_DiamondDouble_GetHistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_SC_DiamondDouble_GetHistory_descriptor_;
  metadata.reflection = Activity_SC_DiamondDouble_GetHistory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity_SC_DiamondDouble_Roll::kResultFieldNumber;
const int Activity_SC_DiamondDouble_Roll::kDimaondFieldNumber;
#endif  // !_MSC_VER

Activity_SC_DiamondDouble_Roll::Activity_SC_DiamondDouble_Roll()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_SC_DiamondDouble_Roll::InitAsDefaultInstance() {
}

Activity_SC_DiamondDouble_Roll::Activity_SC_DiamondDouble_Roll(const Activity_SC_DiamondDouble_Roll& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_SC_DiamondDouble_Roll::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  dimaond_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_SC_DiamondDouble_Roll::~Activity_SC_DiamondDouble_Roll() {
  SharedDtor();
}

void Activity_SC_DiamondDouble_Roll::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity_SC_DiamondDouble_Roll::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_SC_DiamondDouble_Roll::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_SC_DiamondDouble_Roll_descriptor_;
}

const Activity_SC_DiamondDouble_Roll& Activity_SC_DiamondDouble_Roll::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

Activity_SC_DiamondDouble_Roll* Activity_SC_DiamondDouble_Roll::default_instance_ = NULL;

Activity_SC_DiamondDouble_Roll* Activity_SC_DiamondDouble_Roll::New() const {
  return new Activity_SC_DiamondDouble_Roll;
}

void Activity_SC_DiamondDouble_Roll::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    dimaond_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_SC_DiamondDouble_Roll::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dimaond;
        break;
      }

      // optional uint32 dimaond = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dimaond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dimaond_)));
          set_has_dimaond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity_SC_DiamondDouble_Roll::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional uint32 dimaond = 2;
  if (has_dimaond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dimaond(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_SC_DiamondDouble_Roll::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional uint32 dimaond = 2;
  if (has_dimaond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dimaond(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_SC_DiamondDouble_Roll::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional uint32 dimaond = 2;
    if (has_dimaond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dimaond());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_SC_DiamondDouble_Roll::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_SC_DiamondDouble_Roll* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_SC_DiamondDouble_Roll*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_SC_DiamondDouble_Roll::MergeFrom(const Activity_SC_DiamondDouble_Roll& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_dimaond()) {
      set_dimaond(from.dimaond());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_SC_DiamondDouble_Roll::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_SC_DiamondDouble_Roll::CopyFrom(const Activity_SC_DiamondDouble_Roll& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_SC_DiamondDouble_Roll::IsInitialized() const {

  return true;
}

void Activity_SC_DiamondDouble_Roll::Swap(Activity_SC_DiamondDouble_Roll* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(dimaond_, other->dimaond_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_SC_DiamondDouble_Roll::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_SC_DiamondDouble_Roll_descriptor_;
  metadata.reflection = Activity_SC_DiamondDouble_Roll_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SingleInvestReward::kTargetFieldNumber;
const int SingleInvestReward::kIsGetFieldNumber;
#endif  // !_MSC_VER

SingleInvestReward::SingleInvestReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SingleInvestReward::InitAsDefaultInstance() {
}

SingleInvestReward::SingleInvestReward(const SingleInvestReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SingleInvestReward::SharedCtor() {
  _cached_size_ = 0;
  target_ = 0;
  isget_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleInvestReward::~SingleInvestReward() {
  SharedDtor();
}

void SingleInvestReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SingleInvestReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleInvestReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleInvestReward_descriptor_;
}

const SingleInvestReward& SingleInvestReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

SingleInvestReward* SingleInvestReward::default_instance_ = NULL;

SingleInvestReward* SingleInvestReward::New() const {
  return new SingleInvestReward;
}

void SingleInvestReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    target_ = 0;
    isget_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SingleInvestReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 target = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_)));
          set_has_target();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isGet;
        break;
      }

      // optional bool isGet = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isGet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isget_)));
          set_has_isget();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SingleInvestReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 target = 1;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->target(), output);
  }

  // optional bool isGet = 2;
  if (has_isget()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isget(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SingleInvestReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 target = 1;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->target(), target);
  }

  // optional bool isGet = 2;
  if (has_isget()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isget(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SingleInvestReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 target = 1;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target());
    }

    // optional bool isGet = 2;
    if (has_isget()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleInvestReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SingleInvestReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SingleInvestReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleInvestReward::MergeFrom(const SingleInvestReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target()) {
      set_target(from.target());
    }
    if (from.has_isget()) {
      set_isget(from.isget());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SingleInvestReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleInvestReward::CopyFrom(const SingleInvestReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleInvestReward::IsInitialized() const {

  return true;
}

void SingleInvestReward::Swap(SingleInvestReward* other) {
  if (other != this) {
    std::swap(target_, other->target_);
    std::swap(isget_, other->isget_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SingleInvestReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SingleInvestReward_descriptor_;
  metadata.reflection = SingleInvestReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SingleInvestMent::kNActiveNumFieldNumber;
const int SingleInvestMent::kNRewardListFieldNumber;
const int SingleInvestMent::kNInitNumFieldNumber;
#endif  // !_MSC_VER

SingleInvestMent::SingleInvestMent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SingleInvestMent::InitAsDefaultInstance() {
}

SingleInvestMent::SingleInvestMent(const SingleInvestMent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SingleInvestMent::SharedCtor() {
  _cached_size_ = 0;
  nactivenum_ = 0;
  ninitnum_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleInvestMent::~SingleInvestMent() {
  SharedDtor();
}

void SingleInvestMent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SingleInvestMent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleInvestMent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleInvestMent_descriptor_;
}

const SingleInvestMent& SingleInvestMent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

SingleInvestMent* SingleInvestMent::default_instance_ = NULL;

SingleInvestMent* SingleInvestMent::New() const {
  return new SingleInvestMent;
}

void SingleInvestMent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nactivenum_ = 0;
    ninitnum_ = GOOGLE_LONGLONG(0);
  }
  nrewardlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SingleInvestMent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nActiveNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nactivenum_)));
          set_has_nactivenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nRewardList;
        break;
      }

      // repeated .proto.message.SingleInvestReward nRewardList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nRewardList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nrewardlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nRewardList;
        if (input->ExpectTag(24)) goto parse_nInitNum;
        break;
      }

      // optional int64 nInitNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nInitNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ninitnum_)));
          set_has_ninitnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SingleInvestMent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 nActiveNum = 1;
  if (has_nactivenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nactivenum(), output);
  }

  // repeated .proto.message.SingleInvestReward nRewardList = 2;
  for (int i = 0; i < this->nrewardlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->nrewardlist(i), output);
  }

  // optional int64 nInitNum = 3;
  if (has_ninitnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->ninitnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SingleInvestMent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 nActiveNum = 1;
  if (has_nactivenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nactivenum(), target);
  }

  // repeated .proto.message.SingleInvestReward nRewardList = 2;
  for (int i = 0; i < this->nrewardlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->nrewardlist(i), target);
  }

  // optional int64 nInitNum = 3;
  if (has_ninitnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->ninitnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SingleInvestMent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 nActiveNum = 1;
    if (has_nactivenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nactivenum());
    }

    // optional int64 nInitNum = 3;
    if (has_ninitnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ninitnum());
    }

  }
  // repeated .proto.message.SingleInvestReward nRewardList = 2;
  total_size += 1 * this->nrewardlist_size();
  for (int i = 0; i < this->nrewardlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nrewardlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleInvestMent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SingleInvestMent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SingleInvestMent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleInvestMent::MergeFrom(const SingleInvestMent& from) {
  GOOGLE_CHECK_NE(&from, this);
  nrewardlist_.MergeFrom(from.nrewardlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nactivenum()) {
      set_nactivenum(from.nactivenum());
    }
    if (from.has_ninitnum()) {
      set_ninitnum(from.ninitnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SingleInvestMent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleInvestMent::CopyFrom(const SingleInvestMent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleInvestMent::IsInitialized() const {

  return true;
}

void SingleInvestMent::Swap(SingleInvestMent* other) {
  if (other != this) {
    std::swap(nactivenum_, other->nactivenum_);
    nrewardlist_.Swap(&other->nrewardlist_);
    std::swap(ninitnum_, other->ninitnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SingleInvestMent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SingleInvestMent_descriptor_;
  metadata.reflection = SingleInvestMent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Activity_CS_Investment_GetInfo::Activity_CS_Investment_GetInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_CS_Investment_GetInfo::InitAsDefaultInstance() {
}

Activity_CS_Investment_GetInfo::Activity_CS_Investment_GetInfo(const Activity_CS_Investment_GetInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_CS_Investment_GetInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_CS_Investment_GetInfo::~Activity_CS_Investment_GetInfo() {
  SharedDtor();
}

void Activity_CS_Investment_GetInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity_CS_Investment_GetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_CS_Investment_GetInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_CS_Investment_GetInfo_descriptor_;
}

const Activity_CS_Investment_GetInfo& Activity_CS_Investment_GetInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

Activity_CS_Investment_GetInfo* Activity_CS_Investment_GetInfo::default_instance_ = NULL;

Activity_CS_Investment_GetInfo* Activity_CS_Investment_GetInfo::New() const {
  return new Activity_CS_Investment_GetInfo;
}

void Activity_CS_Investment_GetInfo::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_CS_Investment_GetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Activity_CS_Investment_GetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_CS_Investment_GetInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_CS_Investment_GetInfo::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_CS_Investment_GetInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_CS_Investment_GetInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_CS_Investment_GetInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_CS_Investment_GetInfo::MergeFrom(const Activity_CS_Investment_GetInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_CS_Investment_GetInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_CS_Investment_GetInfo::CopyFrom(const Activity_CS_Investment_GetInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_CS_Investment_GetInfo::IsInitialized() const {

  return true;
}

void Activity_CS_Investment_GetInfo::Swap(Activity_CS_Investment_GetInfo* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_CS_Investment_GetInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_CS_Investment_GetInfo_descriptor_;
  metadata.reflection = Activity_CS_Investment_GetInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity_CS_Investment_DoReward::kNActiveNumFieldNumber;
const int Activity_CS_Investment_DoReward::kTargetFieldNumber;
#endif  // !_MSC_VER

Activity_CS_Investment_DoReward::Activity_CS_Investment_DoReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_CS_Investment_DoReward::InitAsDefaultInstance() {
}

Activity_CS_Investment_DoReward::Activity_CS_Investment_DoReward(const Activity_CS_Investment_DoReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_CS_Investment_DoReward::SharedCtor() {
  _cached_size_ = 0;
  nactivenum_ = 0;
  target_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_CS_Investment_DoReward::~Activity_CS_Investment_DoReward() {
  SharedDtor();
}

void Activity_CS_Investment_DoReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity_CS_Investment_DoReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_CS_Investment_DoReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_CS_Investment_DoReward_descriptor_;
}

const Activity_CS_Investment_DoReward& Activity_CS_Investment_DoReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

Activity_CS_Investment_DoReward* Activity_CS_Investment_DoReward::default_instance_ = NULL;

Activity_CS_Investment_DoReward* Activity_CS_Investment_DoReward::New() const {
  return new Activity_CS_Investment_DoReward;
}

void Activity_CS_Investment_DoReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nactivenum_ = 0;
    target_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_CS_Investment_DoReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nActiveNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nactivenum_)));
          set_has_nactivenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_target;
        break;
      }

      // optional int32 target = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_)));
          set_has_target();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity_CS_Investment_DoReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 nActiveNum = 1;
  if (has_nactivenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nactivenum(), output);
  }

  // optional int32 target = 2;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->target(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_CS_Investment_DoReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 nActiveNum = 1;
  if (has_nactivenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nactivenum(), target);
  }

  // optional int32 target = 2;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->target(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_CS_Investment_DoReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 nActiveNum = 1;
    if (has_nactivenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nactivenum());
    }

    // optional int32 target = 2;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_CS_Investment_DoReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_CS_Investment_DoReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_CS_Investment_DoReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_CS_Investment_DoReward::MergeFrom(const Activity_CS_Investment_DoReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nactivenum()) {
      set_nactivenum(from.nactivenum());
    }
    if (from.has_target()) {
      set_target(from.target());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_CS_Investment_DoReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_CS_Investment_DoReward::CopyFrom(const Activity_CS_Investment_DoReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_CS_Investment_DoReward::IsInitialized() const {

  return true;
}

void Activity_CS_Investment_DoReward::Swap(Activity_CS_Investment_DoReward* other) {
  if (other != this) {
    std::swap(nactivenum_, other->nactivenum_);
    std::swap(target_, other->target_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_CS_Investment_DoReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_CS_Investment_DoReward_descriptor_;
  metadata.reflection = Activity_CS_Investment_DoReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity_CS_Investment_Open::kNActiveNumFieldNumber;
#endif  // !_MSC_VER

Activity_CS_Investment_Open::Activity_CS_Investment_Open()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_CS_Investment_Open::InitAsDefaultInstance() {
}

Activity_CS_Investment_Open::Activity_CS_Investment_Open(const Activity_CS_Investment_Open& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_CS_Investment_Open::SharedCtor() {
  _cached_size_ = 0;
  nactivenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_CS_Investment_Open::~Activity_CS_Investment_Open() {
  SharedDtor();
}

void Activity_CS_Investment_Open::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity_CS_Investment_Open::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_CS_Investment_Open::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_CS_Investment_Open_descriptor_;
}

const Activity_CS_Investment_Open& Activity_CS_Investment_Open::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

Activity_CS_Investment_Open* Activity_CS_Investment_Open::default_instance_ = NULL;

Activity_CS_Investment_Open* Activity_CS_Investment_Open::New() const {
  return new Activity_CS_Investment_Open;
}

void Activity_CS_Investment_Open::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nactivenum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_CS_Investment_Open::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nActiveNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nactivenum_)));
          set_has_nactivenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity_CS_Investment_Open::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 nActiveNum = 1;
  if (has_nactivenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nactivenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_CS_Investment_Open::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 nActiveNum = 1;
  if (has_nactivenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nactivenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_CS_Investment_Open::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 nActiveNum = 1;
    if (has_nactivenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nactivenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_CS_Investment_Open::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_CS_Investment_Open* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_CS_Investment_Open*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_CS_Investment_Open::MergeFrom(const Activity_CS_Investment_Open& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nactivenum()) {
      set_nactivenum(from.nactivenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_CS_Investment_Open::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_CS_Investment_Open::CopyFrom(const Activity_CS_Investment_Open& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_CS_Investment_Open::IsInitialized() const {

  return true;
}

void Activity_CS_Investment_Open::Swap(Activity_CS_Investment_Open* other) {
  if (other != this) {
    std::swap(nactivenum_, other->nactivenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_CS_Investment_Open::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_CS_Investment_Open_descriptor_;
  metadata.reflection = Activity_CS_Investment_Open_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity_SC_Investment_GetInfo::kInvestListFieldNumber;
#endif  // !_MSC_VER

Activity_SC_Investment_GetInfo::Activity_SC_Investment_GetInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_SC_Investment_GetInfo::InitAsDefaultInstance() {
}

Activity_SC_Investment_GetInfo::Activity_SC_Investment_GetInfo(const Activity_SC_Investment_GetInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_SC_Investment_GetInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_SC_Investment_GetInfo::~Activity_SC_Investment_GetInfo() {
  SharedDtor();
}

void Activity_SC_Investment_GetInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity_SC_Investment_GetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_SC_Investment_GetInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_SC_Investment_GetInfo_descriptor_;
}

const Activity_SC_Investment_GetInfo& Activity_SC_Investment_GetInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

Activity_SC_Investment_GetInfo* Activity_SC_Investment_GetInfo::default_instance_ = NULL;

Activity_SC_Investment_GetInfo* Activity_SC_Investment_GetInfo::New() const {
  return new Activity_SC_Investment_GetInfo;
}

void Activity_SC_Investment_GetInfo::Clear() {
  investlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_SC_Investment_GetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.SingleInvestMent InvestList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InvestList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_investlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_InvestList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity_SC_Investment_GetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.SingleInvestMent InvestList = 1;
  for (int i = 0; i < this->investlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->investlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_SC_Investment_GetInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.SingleInvestMent InvestList = 1;
  for (int i = 0; i < this->investlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->investlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_SC_Investment_GetInfo::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.SingleInvestMent InvestList = 1;
  total_size += 1 * this->investlist_size();
  for (int i = 0; i < this->investlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->investlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_SC_Investment_GetInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_SC_Investment_GetInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_SC_Investment_GetInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_SC_Investment_GetInfo::MergeFrom(const Activity_SC_Investment_GetInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  investlist_.MergeFrom(from.investlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_SC_Investment_GetInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_SC_Investment_GetInfo::CopyFrom(const Activity_SC_Investment_GetInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_SC_Investment_GetInfo::IsInitialized() const {

  return true;
}

void Activity_SC_Investment_GetInfo::Swap(Activity_SC_Investment_GetInfo* other) {
  if (other != this) {
    investlist_.Swap(&other->investlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_SC_Investment_GetInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_SC_Investment_GetInfo_descriptor_;
  metadata.reflection = Activity_SC_Investment_GetInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity_SC_Investment_DoReward::kRetFieldNumber;
#endif  // !_MSC_VER

Activity_SC_Investment_DoReward::Activity_SC_Investment_DoReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_SC_Investment_DoReward::InitAsDefaultInstance() {
}

Activity_SC_Investment_DoReward::Activity_SC_Investment_DoReward(const Activity_SC_Investment_DoReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_SC_Investment_DoReward::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_SC_Investment_DoReward::~Activity_SC_Investment_DoReward() {
  SharedDtor();
}

void Activity_SC_Investment_DoReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity_SC_Investment_DoReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_SC_Investment_DoReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_SC_Investment_DoReward_descriptor_;
}

const Activity_SC_Investment_DoReward& Activity_SC_Investment_DoReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

Activity_SC_Investment_DoReward* Activity_SC_Investment_DoReward::default_instance_ = NULL;

Activity_SC_Investment_DoReward* Activity_SC_Investment_DoReward::New() const {
  return new Activity_SC_Investment_DoReward;
}

void Activity_SC_Investment_DoReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_SC_Investment_DoReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity_SC_Investment_DoReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_SC_Investment_DoReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_SC_Investment_DoReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_SC_Investment_DoReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_SC_Investment_DoReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_SC_Investment_DoReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_SC_Investment_DoReward::MergeFrom(const Activity_SC_Investment_DoReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_SC_Investment_DoReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_SC_Investment_DoReward::CopyFrom(const Activity_SC_Investment_DoReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_SC_Investment_DoReward::IsInitialized() const {

  return true;
}

void Activity_SC_Investment_DoReward::Swap(Activity_SC_Investment_DoReward* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_SC_Investment_DoReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_SC_Investment_DoReward_descriptor_;
  metadata.reflection = Activity_SC_Investment_DoReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity_SC_Investment_Open::kRetFieldNumber;
#endif  // !_MSC_VER

Activity_SC_Investment_Open::Activity_SC_Investment_Open()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_SC_Investment_Open::InitAsDefaultInstance() {
}

Activity_SC_Investment_Open::Activity_SC_Investment_Open(const Activity_SC_Investment_Open& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_SC_Investment_Open::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_SC_Investment_Open::~Activity_SC_Investment_Open() {
  SharedDtor();
}

void Activity_SC_Investment_Open::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity_SC_Investment_Open::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_SC_Investment_Open::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_SC_Investment_Open_descriptor_;
}

const Activity_SC_Investment_Open& Activity_SC_Investment_Open::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

Activity_SC_Investment_Open* Activity_SC_Investment_Open::default_instance_ = NULL;

Activity_SC_Investment_Open* Activity_SC_Investment_Open::New() const {
  return new Activity_SC_Investment_Open;
}

void Activity_SC_Investment_Open::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_SC_Investment_Open::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity_SC_Investment_Open::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_SC_Investment_Open::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_SC_Investment_Open::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_SC_Investment_Open::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_SC_Investment_Open* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_SC_Investment_Open*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_SC_Investment_Open::MergeFrom(const Activity_SC_Investment_Open& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_SC_Investment_Open::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_SC_Investment_Open::CopyFrom(const Activity_SC_Investment_Open& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_SC_Investment_Open::IsInitialized() const {

  return true;
}

void Activity_SC_Investment_Open::Swap(Activity_SC_Investment_Open* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_SC_Investment_Open::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_SC_Investment_Open_descriptor_;
  metadata.reflection = Activity_SC_Investment_Open_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoAllInvestmentInfo::kInvestListFieldNumber;
#endif  // !_MSC_VER

ProtoAllInvestmentInfo::ProtoAllInvestmentInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoAllInvestmentInfo::InitAsDefaultInstance() {
}

ProtoAllInvestmentInfo::ProtoAllInvestmentInfo(const ProtoAllInvestmentInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoAllInvestmentInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoAllInvestmentInfo::~ProtoAllInvestmentInfo() {
  SharedDtor();
}

void ProtoAllInvestmentInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoAllInvestmentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoAllInvestmentInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoAllInvestmentInfo_descriptor_;
}

const ProtoAllInvestmentInfo& ProtoAllInvestmentInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

ProtoAllInvestmentInfo* ProtoAllInvestmentInfo::default_instance_ = NULL;

ProtoAllInvestmentInfo* ProtoAllInvestmentInfo::New() const {
  return new ProtoAllInvestmentInfo;
}

void ProtoAllInvestmentInfo::Clear() {
  investlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoAllInvestmentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.SingleInvestMent InvestList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InvestList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_investlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_InvestList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoAllInvestmentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.SingleInvestMent InvestList = 1;
  for (int i = 0; i < this->investlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->investlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoAllInvestmentInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.SingleInvestMent InvestList = 1;
  for (int i = 0; i < this->investlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->investlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoAllInvestmentInfo::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.SingleInvestMent InvestList = 1;
  total_size += 1 * this->investlist_size();
  for (int i = 0; i < this->investlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->investlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoAllInvestmentInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoAllInvestmentInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoAllInvestmentInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoAllInvestmentInfo::MergeFrom(const ProtoAllInvestmentInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  investlist_.MergeFrom(from.investlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoAllInvestmentInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoAllInvestmentInfo::CopyFrom(const ProtoAllInvestmentInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoAllInvestmentInfo::IsInitialized() const {

  return true;
}

void ProtoAllInvestmentInfo::Swap(ProtoAllInvestmentInfo* other) {
  if (other != this) {
    investlist_.Swap(&other->investlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoAllInvestmentInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoAllInvestmentInfo_descriptor_;
  metadata.reflection = ProtoAllInvestmentInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoAllDailyFirstChargeInfo::kIsfirstchargeFieldNumber;
const int ProtoAllDailyFirstChargeInfo::kDailychargeDataFieldNumber;
const int ProtoAllDailyFirstChargeInfo::kTodaychargenumFieldNumber;
const int ProtoAllDailyFirstChargeInfo::kLastChargettickFieldNumber;
const int ProtoAllDailyFirstChargeInfo::kFirstChargettickFieldNumber;
const int ProtoAllDailyFirstChargeInfo::kDailychargeActiveIdFieldNumber;
#endif  // !_MSC_VER

ProtoAllDailyFirstChargeInfo::ProtoAllDailyFirstChargeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoAllDailyFirstChargeInfo::InitAsDefaultInstance() {
}

ProtoAllDailyFirstChargeInfo::ProtoAllDailyFirstChargeInfo(const ProtoAllDailyFirstChargeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoAllDailyFirstChargeInfo::SharedCtor() {
  _cached_size_ = 0;
  isfirstcharge_ = 0;
  todaychargenum_ = 0;
  lastchargettick_ = 0u;
  firstchargettick_ = 0u;
  dailychargeactiveid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoAllDailyFirstChargeInfo::~ProtoAllDailyFirstChargeInfo() {
  SharedDtor();
}

void ProtoAllDailyFirstChargeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoAllDailyFirstChargeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoAllDailyFirstChargeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoAllDailyFirstChargeInfo_descriptor_;
}

const ProtoAllDailyFirstChargeInfo& ProtoAllDailyFirstChargeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

ProtoAllDailyFirstChargeInfo* ProtoAllDailyFirstChargeInfo::default_instance_ = NULL;

ProtoAllDailyFirstChargeInfo* ProtoAllDailyFirstChargeInfo::New() const {
  return new ProtoAllDailyFirstChargeInfo;
}

void ProtoAllDailyFirstChargeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isfirstcharge_ = 0;
    todaychargenum_ = 0;
    lastchargettick_ = 0u;
    firstchargettick_ = 0u;
    dailychargeactiveid_ = 0;
  }
  dailycharge_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoAllDailyFirstChargeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 isfirstcharge = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isfirstcharge_)));
          set_has_isfirstcharge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dailycharge_data;
        break;
      }

      // repeated .proto.message.SingleAwardData dailycharge_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dailycharge_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dailycharge_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dailycharge_data;
        if (input->ExpectTag(24)) goto parse_todaychargenum;
        break;
      }

      // optional int32 todaychargenum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_todaychargenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &todaychargenum_)));
          set_has_todaychargenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lastChargettick;
        break;
      }

      // optional uint32 lastChargettick = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastChargettick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastchargettick_)));
          set_has_lastchargettick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_firstChargettick;
        break;
      }

      // optional uint32 firstChargettick = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_firstChargettick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &firstchargettick_)));
          set_has_firstchargettick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_dailychargeActiveId;
        break;
      }

      // optional int32 dailychargeActiveId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dailychargeActiveId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dailychargeactiveid_)));
          set_has_dailychargeactiveid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoAllDailyFirstChargeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 isfirstcharge = 1;
  if (has_isfirstcharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->isfirstcharge(), output);
  }

  // repeated .proto.message.SingleAwardData dailycharge_data = 2;
  for (int i = 0; i < this->dailycharge_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dailycharge_data(i), output);
  }

  // optional int32 todaychargenum = 3;
  if (has_todaychargenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->todaychargenum(), output);
  }

  // optional uint32 lastChargettick = 4;
  if (has_lastchargettick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lastchargettick(), output);
  }

  // optional uint32 firstChargettick = 5;
  if (has_firstchargettick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->firstchargettick(), output);
  }

  // optional int32 dailychargeActiveId = 6;
  if (has_dailychargeactiveid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->dailychargeactiveid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoAllDailyFirstChargeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 isfirstcharge = 1;
  if (has_isfirstcharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->isfirstcharge(), target);
  }

  // repeated .proto.message.SingleAwardData dailycharge_data = 2;
  for (int i = 0; i < this->dailycharge_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dailycharge_data(i), target);
  }

  // optional int32 todaychargenum = 3;
  if (has_todaychargenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->todaychargenum(), target);
  }

  // optional uint32 lastChargettick = 4;
  if (has_lastchargettick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lastchargettick(), target);
  }

  // optional uint32 firstChargettick = 5;
  if (has_firstchargettick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->firstchargettick(), target);
  }

  // optional int32 dailychargeActiveId = 6;
  if (has_dailychargeactiveid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->dailychargeactiveid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoAllDailyFirstChargeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 isfirstcharge = 1;
    if (has_isfirstcharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isfirstcharge());
    }

    // optional int32 todaychargenum = 3;
    if (has_todaychargenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->todaychargenum());
    }

    // optional uint32 lastChargettick = 4;
    if (has_lastchargettick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastchargettick());
    }

    // optional uint32 firstChargettick = 5;
    if (has_firstchargettick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->firstchargettick());
    }

    // optional int32 dailychargeActiveId = 6;
    if (has_dailychargeactiveid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dailychargeactiveid());
    }

  }
  // repeated .proto.message.SingleAwardData dailycharge_data = 2;
  total_size += 1 * this->dailycharge_data_size();
  for (int i = 0; i < this->dailycharge_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dailycharge_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoAllDailyFirstChargeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoAllDailyFirstChargeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoAllDailyFirstChargeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoAllDailyFirstChargeInfo::MergeFrom(const ProtoAllDailyFirstChargeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  dailycharge_data_.MergeFrom(from.dailycharge_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isfirstcharge()) {
      set_isfirstcharge(from.isfirstcharge());
    }
    if (from.has_todaychargenum()) {
      set_todaychargenum(from.todaychargenum());
    }
    if (from.has_lastchargettick()) {
      set_lastchargettick(from.lastchargettick());
    }
    if (from.has_firstchargettick()) {
      set_firstchargettick(from.firstchargettick());
    }
    if (from.has_dailychargeactiveid()) {
      set_dailychargeactiveid(from.dailychargeactiveid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoAllDailyFirstChargeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoAllDailyFirstChargeInfo::CopyFrom(const ProtoAllDailyFirstChargeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoAllDailyFirstChargeInfo::IsInitialized() const {

  for (int i = 0; i < dailycharge_data_size(); i++) {
    if (!this->dailycharge_data(i).IsInitialized()) return false;
  }
  return true;
}

void ProtoAllDailyFirstChargeInfo::Swap(ProtoAllDailyFirstChargeInfo* other) {
  if (other != this) {
    std::swap(isfirstcharge_, other->isfirstcharge_);
    dailycharge_data_.Swap(&other->dailycharge_data_);
    std::swap(todaychargenum_, other->todaychargenum_);
    std::swap(lastchargettick_, other->lastchargettick_);
    std::swap(firstchargettick_, other->firstchargettick_);
    std::swap(dailychargeactiveid_, other->dailychargeactiveid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoAllDailyFirstChargeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoAllDailyFirstChargeInfo_descriptor_;
  metadata.reflection = ProtoAllDailyFirstChargeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RouletteHistory::kNameFieldNumber;
const int RouletteHistory::kItemidFieldNumber;
const int RouletteHistory::kItemnumFieldNumber;
const int RouletteHistory::kCostFieldNumber;
#endif  // !_MSC_VER

RouletteHistory::RouletteHistory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RouletteHistory::InitAsDefaultInstance() {
}

RouletteHistory::RouletteHistory(const RouletteHistory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RouletteHistory::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  itemid_ = 0u;
  itemnum_ = 0u;
  cost_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RouletteHistory::~RouletteHistory() {
  SharedDtor();
}

void RouletteHistory::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void RouletteHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RouletteHistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RouletteHistory_descriptor_;
}

const RouletteHistory& RouletteHistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

RouletteHistory* RouletteHistory::default_instance_ = NULL;

RouletteHistory* RouletteHistory::New() const {
  return new RouletteHistory;
}

void RouletteHistory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    itemid_ = 0u;
    itemnum_ = 0u;
    cost_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RouletteHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemid;
        break;
      }

      // optional uint32 itemid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemnum;
        break;
      }

      // optional uint32 itemnum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cost;
        break;
      }

      // optional uint32 cost = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_)));
          set_has_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RouletteHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional uint32 itemid = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemid(), output);
  }

  // optional uint32 itemnum = 3;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->itemnum(), output);
  }

  // optional uint32 cost = 4;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cost(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RouletteHistory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 itemid = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemid(), target);
  }

  // optional uint32 itemnum = 3;
  if (has_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->itemnum(), target);
  }

  // optional uint32 cost = 4;
  if (has_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cost(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RouletteHistory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 itemid = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 itemnum = 3;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemnum());
    }

    // optional uint32 cost = 4;
    if (has_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RouletteHistory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RouletteHistory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RouletteHistory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RouletteHistory::MergeFrom(const RouletteHistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
    if (from.has_cost()) {
      set_cost(from.cost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RouletteHistory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouletteHistory::CopyFrom(const RouletteHistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouletteHistory::IsInitialized() const {

  return true;
}

void RouletteHistory::Swap(RouletteHistory* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(itemid_, other->itemid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(cost_, other->cost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RouletteHistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RouletteHistory_descriptor_;
  metadata.reflection = RouletteHistory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity_CS_Roulette_Do::kTypeFieldNumber;
#endif  // !_MSC_VER

Activity_CS_Roulette_Do::Activity_CS_Roulette_Do()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_CS_Roulette_Do::InitAsDefaultInstance() {
}

Activity_CS_Roulette_Do::Activity_CS_Roulette_Do(const Activity_CS_Roulette_Do& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_CS_Roulette_Do::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_CS_Roulette_Do::~Activity_CS_Roulette_Do() {
  SharedDtor();
}

void Activity_CS_Roulette_Do::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity_CS_Roulette_Do::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_CS_Roulette_Do::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_CS_Roulette_Do_descriptor_;
}

const Activity_CS_Roulette_Do& Activity_CS_Roulette_Do::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

Activity_CS_Roulette_Do* Activity_CS_Roulette_Do::default_instance_ = NULL;

Activity_CS_Roulette_Do* Activity_CS_Roulette_Do::New() const {
  return new Activity_CS_Roulette_Do;
}

void Activity_CS_Roulette_Do::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_CS_Roulette_Do::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity_CS_Roulette_Do::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_CS_Roulette_Do::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_CS_Roulette_Do::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_CS_Roulette_Do::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_CS_Roulette_Do* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_CS_Roulette_Do*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_CS_Roulette_Do::MergeFrom(const Activity_CS_Roulette_Do& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_CS_Roulette_Do::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_CS_Roulette_Do::CopyFrom(const Activity_CS_Roulette_Do& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_CS_Roulette_Do::IsInitialized() const {

  return true;
}

void Activity_CS_Roulette_Do::Swap(Activity_CS_Roulette_Do* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_CS_Roulette_Do::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_CS_Roulette_Do_descriptor_;
  metadata.reflection = Activity_CS_Roulette_Do_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity_SC_Roulette_Do::kResultFieldNumber;
const int Activity_SC_Roulette_Do::kCostFieldNumber;
const int Activity_SC_Roulette_Do::kRewardListFieldNumber;
#endif  // !_MSC_VER

Activity_SC_Roulette_Do::Activity_SC_Roulette_Do()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_SC_Roulette_Do::InitAsDefaultInstance() {
}

Activity_SC_Roulette_Do::Activity_SC_Roulette_Do(const Activity_SC_Roulette_Do& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_SC_Roulette_Do::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  cost_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_SC_Roulette_Do::~Activity_SC_Roulette_Do() {
  SharedDtor();
}

void Activity_SC_Roulette_Do::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity_SC_Roulette_Do::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_SC_Roulette_Do::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_SC_Roulette_Do_descriptor_;
}

const Activity_SC_Roulette_Do& Activity_SC_Roulette_Do::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

Activity_SC_Roulette_Do* Activity_SC_Roulette_Do::default_instance_ = NULL;

Activity_SC_Roulette_Do* Activity_SC_Roulette_Do::New() const {
  return new Activity_SC_Roulette_Do;
}

void Activity_SC_Roulette_Do::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    cost_ = 0u;
  }
  reward_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_SC_Roulette_Do::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cost;
        break;
      }

      // optional uint32 cost = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_)));
          set_has_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_reward_list;
        break;
      }

      // repeated .proto.message.IDNum reward_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_reward_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity_SC_Roulette_Do::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional uint32 cost = 2;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cost(), output);
  }

  // repeated .proto.message.IDNum reward_list = 3;
  for (int i = 0; i < this->reward_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->reward_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_SC_Roulette_Do::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional uint32 cost = 2;
  if (has_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cost(), target);
  }

  // repeated .proto.message.IDNum reward_list = 3;
  for (int i = 0; i < this->reward_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->reward_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_SC_Roulette_Do::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional uint32 cost = 2;
    if (has_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost());
    }

  }
  // repeated .proto.message.IDNum reward_list = 3;
  total_size += 1 * this->reward_list_size();
  for (int i = 0; i < this->reward_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_SC_Roulette_Do::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_SC_Roulette_Do* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_SC_Roulette_Do*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_SC_Roulette_Do::MergeFrom(const Activity_SC_Roulette_Do& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_list_.MergeFrom(from.reward_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_cost()) {
      set_cost(from.cost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_SC_Roulette_Do::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_SC_Roulette_Do::CopyFrom(const Activity_SC_Roulette_Do& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_SC_Roulette_Do::IsInitialized() const {

  return true;
}

void Activity_SC_Roulette_Do::Swap(Activity_SC_Roulette_Do* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(cost_, other->cost_);
    reward_list_.Swap(&other->reward_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_SC_Roulette_Do::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_SC_Roulette_Do_descriptor_;
  metadata.reflection = Activity_SC_Roulette_Do_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity_CS_Roulette_Exchange::kIdFieldNumber;
#endif  // !_MSC_VER

Activity_CS_Roulette_Exchange::Activity_CS_Roulette_Exchange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_CS_Roulette_Exchange::InitAsDefaultInstance() {
}

Activity_CS_Roulette_Exchange::Activity_CS_Roulette_Exchange(const Activity_CS_Roulette_Exchange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_CS_Roulette_Exchange::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_CS_Roulette_Exchange::~Activity_CS_Roulette_Exchange() {
  SharedDtor();
}

void Activity_CS_Roulette_Exchange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity_CS_Roulette_Exchange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_CS_Roulette_Exchange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_CS_Roulette_Exchange_descriptor_;
}

const Activity_CS_Roulette_Exchange& Activity_CS_Roulette_Exchange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

Activity_CS_Roulette_Exchange* Activity_CS_Roulette_Exchange::default_instance_ = NULL;

Activity_CS_Roulette_Exchange* Activity_CS_Roulette_Exchange::New() const {
  return new Activity_CS_Roulette_Exchange;
}

void Activity_CS_Roulette_Exchange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_CS_Roulette_Exchange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity_CS_Roulette_Exchange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_CS_Roulette_Exchange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_CS_Roulette_Exchange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_CS_Roulette_Exchange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_CS_Roulette_Exchange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_CS_Roulette_Exchange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_CS_Roulette_Exchange::MergeFrom(const Activity_CS_Roulette_Exchange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_CS_Roulette_Exchange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_CS_Roulette_Exchange::CopyFrom(const Activity_CS_Roulette_Exchange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_CS_Roulette_Exchange::IsInitialized() const {

  return true;
}

void Activity_CS_Roulette_Exchange::Swap(Activity_CS_Roulette_Exchange* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_CS_Roulette_Exchange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_CS_Roulette_Exchange_descriptor_;
  metadata.reflection = Activity_CS_Roulette_Exchange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity_SC_Roulette_Exchange::kIdFieldNumber;
const int Activity_SC_Roulette_Exchange::kResultFieldNumber;
#endif  // !_MSC_VER

Activity_SC_Roulette_Exchange::Activity_SC_Roulette_Exchange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_SC_Roulette_Exchange::InitAsDefaultInstance() {
}

Activity_SC_Roulette_Exchange::Activity_SC_Roulette_Exchange(const Activity_SC_Roulette_Exchange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_SC_Roulette_Exchange::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_SC_Roulette_Exchange::~Activity_SC_Roulette_Exchange() {
  SharedDtor();
}

void Activity_SC_Roulette_Exchange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity_SC_Roulette_Exchange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_SC_Roulette_Exchange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_SC_Roulette_Exchange_descriptor_;
}

const Activity_SC_Roulette_Exchange& Activity_SC_Roulette_Exchange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

Activity_SC_Roulette_Exchange* Activity_SC_Roulette_Exchange::default_instance_ = NULL;

Activity_SC_Roulette_Exchange* Activity_SC_Roulette_Exchange::New() const {
  return new Activity_SC_Roulette_Exchange;
}

void Activity_SC_Roulette_Exchange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_SC_Roulette_Exchange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional uint32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity_SC_Roulette_Exchange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_SC_Roulette_Exchange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_SC_Roulette_Exchange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_SC_Roulette_Exchange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_SC_Roulette_Exchange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_SC_Roulette_Exchange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_SC_Roulette_Exchange::MergeFrom(const Activity_SC_Roulette_Exchange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_SC_Roulette_Exchange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_SC_Roulette_Exchange::CopyFrom(const Activity_SC_Roulette_Exchange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_SC_Roulette_Exchange::IsInitialized() const {

  return true;
}

void Activity_SC_Roulette_Exchange::Swap(Activity_SC_Roulette_Exchange* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_SC_Roulette_Exchange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_SC_Roulette_Exchange_descriptor_;
  metadata.reflection = Activity_SC_Roulette_Exchange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity_CS_Roulette_GetHistory::kTypeFieldNumber;
#endif  // !_MSC_VER

Activity_CS_Roulette_GetHistory::Activity_CS_Roulette_GetHistory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_CS_Roulette_GetHistory::InitAsDefaultInstance() {
}

Activity_CS_Roulette_GetHistory::Activity_CS_Roulette_GetHistory(const Activity_CS_Roulette_GetHistory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_CS_Roulette_GetHistory::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_CS_Roulette_GetHistory::~Activity_CS_Roulette_GetHistory() {
  SharedDtor();
}

void Activity_CS_Roulette_GetHistory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity_CS_Roulette_GetHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_CS_Roulette_GetHistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_CS_Roulette_GetHistory_descriptor_;
}

const Activity_CS_Roulette_GetHistory& Activity_CS_Roulette_GetHistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

Activity_CS_Roulette_GetHistory* Activity_CS_Roulette_GetHistory::default_instance_ = NULL;

Activity_CS_Roulette_GetHistory* Activity_CS_Roulette_GetHistory::New() const {
  return new Activity_CS_Roulette_GetHistory;
}

void Activity_CS_Roulette_GetHistory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_CS_Roulette_GetHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity_CS_Roulette_GetHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_CS_Roulette_GetHistory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_CS_Roulette_GetHistory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_CS_Roulette_GetHistory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_CS_Roulette_GetHistory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_CS_Roulette_GetHistory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_CS_Roulette_GetHistory::MergeFrom(const Activity_CS_Roulette_GetHistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_CS_Roulette_GetHistory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_CS_Roulette_GetHistory::CopyFrom(const Activity_CS_Roulette_GetHistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_CS_Roulette_GetHistory::IsInitialized() const {

  return true;
}

void Activity_CS_Roulette_GetHistory::Swap(Activity_CS_Roulette_GetHistory* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_CS_Roulette_GetHistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_CS_Roulette_GetHistory_descriptor_;
  metadata.reflection = Activity_CS_Roulette_GetHistory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity_SC_Roulette_GetHistory::kTypeFieldNumber;
const int Activity_SC_Roulette_GetHistory::kHistoryListFieldNumber;
#endif  // !_MSC_VER

Activity_SC_Roulette_GetHistory::Activity_SC_Roulette_GetHistory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_SC_Roulette_GetHistory::InitAsDefaultInstance() {
}

Activity_SC_Roulette_GetHistory::Activity_SC_Roulette_GetHistory(const Activity_SC_Roulette_GetHistory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_SC_Roulette_GetHistory::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_SC_Roulette_GetHistory::~Activity_SC_Roulette_GetHistory() {
  SharedDtor();
}

void Activity_SC_Roulette_GetHistory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity_SC_Roulette_GetHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_SC_Roulette_GetHistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_SC_Roulette_GetHistory_descriptor_;
}

const Activity_SC_Roulette_GetHistory& Activity_SC_Roulette_GetHistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

Activity_SC_Roulette_GetHistory* Activity_SC_Roulette_GetHistory::default_instance_ = NULL;

Activity_SC_Roulette_GetHistory* Activity_SC_Roulette_GetHistory::New() const {
  return new Activity_SC_Roulette_GetHistory;
}

void Activity_SC_Roulette_GetHistory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
  }
  history_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_SC_Roulette_GetHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_history_list;
        break;
      }

      // repeated .proto.message.RouletteHistory history_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_history_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_history_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_history_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity_SC_Roulette_GetHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // repeated .proto.message.RouletteHistory history_list = 2;
  for (int i = 0; i < this->history_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->history_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_SC_Roulette_GetHistory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // repeated .proto.message.RouletteHistory history_list = 2;
  for (int i = 0; i < this->history_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->history_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_SC_Roulette_GetHistory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  // repeated .proto.message.RouletteHistory history_list = 2;
  total_size += 1 * this->history_list_size();
  for (int i = 0; i < this->history_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->history_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_SC_Roulette_GetHistory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_SC_Roulette_GetHistory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_SC_Roulette_GetHistory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_SC_Roulette_GetHistory::MergeFrom(const Activity_SC_Roulette_GetHistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  history_list_.MergeFrom(from.history_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_SC_Roulette_GetHistory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_SC_Roulette_GetHistory::CopyFrom(const Activity_SC_Roulette_GetHistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_SC_Roulette_GetHistory::IsInitialized() const {

  return true;
}

void Activity_SC_Roulette_GetHistory::Swap(Activity_SC_Roulette_GetHistory* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    history_list_.Swap(&other->history_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_SC_Roulette_GetHistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_SC_Roulette_GetHistory_descriptor_;
  metadata.reflection = Activity_SC_Roulette_GetHistory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity_SC_Change::kTypeFieldNumber;
const int Activity_SC_Change::kIdFieldNumber;
const int Activity_SC_Change::kDataTypeFieldNumber;
const int Activity_SC_Change::kDataFieldNumber;
#endif  // !_MSC_VER

Activity_SC_Change::Activity_SC_Change()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_SC_Change::InitAsDefaultInstance() {
}

Activity_SC_Change::Activity_SC_Change(const Activity_SC_Change& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_SC_Change::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  id_ = 0u;
  data_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_SC_Change::~Activity_SC_Change() {
  SharedDtor();
}

void Activity_SC_Change::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity_SC_Change::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_SC_Change::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_SC_Change_descriptor_;
}

const Activity_SC_Change& Activity_SC_Change::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

Activity_SC_Change* Activity_SC_Change::default_instance_ = NULL;

Activity_SC_Change* Activity_SC_Change::New() const {
  return new Activity_SC_Change;
}

void Activity_SC_Change::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    id_ = 0u;
    data_type_ = 0u;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_SC_Change::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_data_type;
        break;
      }

      // required uint32 data_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_type_)));
          set_has_data_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_data;
        break;
      }

      // repeated int32 data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity_SC_Change::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // required uint32 data_type = 3;
  if (has_data_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->data_type(), output);
  }

  // repeated int32 data = 4;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_SC_Change::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // required uint32 data_type = 3;
  if (has_data_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->data_type(), target);
  }

  // repeated int32 data = 4;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_SC_Change::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 data_type = 3;
    if (has_data_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_type());
    }

  }
  // repeated int32 data = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->data(i));
    }
    total_size += 1 * this->data_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_SC_Change::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_SC_Change* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_SC_Change*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_SC_Change::MergeFrom(const Activity_SC_Change& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_data_type()) {
      set_data_type(from.data_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_SC_Change::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_SC_Change::CopyFrom(const Activity_SC_Change& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_SC_Change::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Activity_SC_Change::Swap(Activity_SC_Change* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(data_type_, other->data_type_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_SC_Change::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_SC_Change_descriptor_;
  metadata.reflection = Activity_SC_Change_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity_SC_Roulette_ExchangeCount::kExchangeCountFieldNumber;
#endif  // !_MSC_VER

Activity_SC_Roulette_ExchangeCount::Activity_SC_Roulette_ExchangeCount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_SC_Roulette_ExchangeCount::InitAsDefaultInstance() {
}

Activity_SC_Roulette_ExchangeCount::Activity_SC_Roulette_ExchangeCount(const Activity_SC_Roulette_ExchangeCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_SC_Roulette_ExchangeCount::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_SC_Roulette_ExchangeCount::~Activity_SC_Roulette_ExchangeCount() {
  SharedDtor();
}

void Activity_SC_Roulette_ExchangeCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity_SC_Roulette_ExchangeCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_SC_Roulette_ExchangeCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_SC_Roulette_ExchangeCount_descriptor_;
}

const Activity_SC_Roulette_ExchangeCount& Activity_SC_Roulette_ExchangeCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

Activity_SC_Roulette_ExchangeCount* Activity_SC_Roulette_ExchangeCount::default_instance_ = NULL;

Activity_SC_Roulette_ExchangeCount* Activity_SC_Roulette_ExchangeCount::New() const {
  return new Activity_SC_Roulette_ExchangeCount;
}

void Activity_SC_Roulette_ExchangeCount::Clear() {
  exchange_count_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_SC_Roulette_ExchangeCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.IDNum exchange_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exchange_count:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_exchange_count()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_exchange_count;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity_SC_Roulette_ExchangeCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.IDNum exchange_count = 3;
  for (int i = 0; i < this->exchange_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->exchange_count(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_SC_Roulette_ExchangeCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.IDNum exchange_count = 3;
  for (int i = 0; i < this->exchange_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->exchange_count(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_SC_Roulette_ExchangeCount::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.IDNum exchange_count = 3;
  total_size += 1 * this->exchange_count_size();
  for (int i = 0; i < this->exchange_count_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->exchange_count(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_SC_Roulette_ExchangeCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_SC_Roulette_ExchangeCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_SC_Roulette_ExchangeCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_SC_Roulette_ExchangeCount::MergeFrom(const Activity_SC_Roulette_ExchangeCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  exchange_count_.MergeFrom(from.exchange_count_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_SC_Roulette_ExchangeCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_SC_Roulette_ExchangeCount::CopyFrom(const Activity_SC_Roulette_ExchangeCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_SC_Roulette_ExchangeCount::IsInitialized() const {

  return true;
}

void Activity_SC_Roulette_ExchangeCount::Swap(Activity_SC_Roulette_ExchangeCount* other) {
  if (other != this) {
    exchange_count_.Swap(&other->exchange_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_SC_Roulette_ExchangeCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_SC_Roulette_ExchangeCount_descriptor_;
  metadata.reflection = Activity_SC_Roulette_ExchangeCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContinuousChargeInfo::kActivityIdFieldNumber;
const int ContinuousChargeInfo::kTodayDiamondsFieldNumber;
const int ContinuousChargeInfo::kDaysFieldNumber;
const int ContinuousChargeInfo::kReceivedAwardsFieldNumber;
#endif  // !_MSC_VER

ContinuousChargeInfo::ContinuousChargeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContinuousChargeInfo::InitAsDefaultInstance() {
}

ContinuousChargeInfo::ContinuousChargeInfo(const ContinuousChargeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContinuousChargeInfo::SharedCtor() {
  _cached_size_ = 0;
  activity_id_ = 0u;
  today_diamonds_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContinuousChargeInfo::~ContinuousChargeInfo() {
  SharedDtor();
}

void ContinuousChargeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContinuousChargeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContinuousChargeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContinuousChargeInfo_descriptor_;
}

const ContinuousChargeInfo& ContinuousChargeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

ContinuousChargeInfo* ContinuousChargeInfo::default_instance_ = NULL;

ContinuousChargeInfo* ContinuousChargeInfo::New() const {
  return new ContinuousChargeInfo;
}

void ContinuousChargeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activity_id_ = 0u;
    today_diamonds_ = 0u;
  }
  days_.Clear();
  received_awards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContinuousChargeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 activity_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activity_id_)));
          set_has_activity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_today_diamonds;
        break;
      }

      // optional uint32 today_diamonds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_diamonds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_diamonds_)));
          set_has_today_diamonds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_days;
        break;
      }

      // repeated .proto.message.IDNum days = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_days:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_days()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_days;
        if (input->ExpectTag(32)) goto parse_received_awards;
        break;
      }

      // repeated uint32 received_awards = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_received_awards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_received_awards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_received_awards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_received_awards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContinuousChargeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 activity_id = 1;
  if (has_activity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->activity_id(), output);
  }

  // optional uint32 today_diamonds = 2;
  if (has_today_diamonds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->today_diamonds(), output);
  }

  // repeated .proto.message.IDNum days = 3;
  for (int i = 0; i < this->days_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->days(i), output);
  }

  // repeated uint32 received_awards = 4;
  for (int i = 0; i < this->received_awards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->received_awards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContinuousChargeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 activity_id = 1;
  if (has_activity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->activity_id(), target);
  }

  // optional uint32 today_diamonds = 2;
  if (has_today_diamonds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->today_diamonds(), target);
  }

  // repeated .proto.message.IDNum days = 3;
  for (int i = 0; i < this->days_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->days(i), target);
  }

  // repeated uint32 received_awards = 4;
  for (int i = 0; i < this->received_awards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->received_awards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContinuousChargeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 activity_id = 1;
    if (has_activity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activity_id());
    }

    // optional uint32 today_diamonds = 2;
    if (has_today_diamonds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_diamonds());
    }

  }
  // repeated .proto.message.IDNum days = 3;
  total_size += 1 * this->days_size();
  for (int i = 0; i < this->days_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->days(i));
  }

  // repeated uint32 received_awards = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->received_awards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->received_awards(i));
    }
    total_size += 1 * this->received_awards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContinuousChargeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContinuousChargeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContinuousChargeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContinuousChargeInfo::MergeFrom(const ContinuousChargeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  days_.MergeFrom(from.days_);
  received_awards_.MergeFrom(from.received_awards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activity_id()) {
      set_activity_id(from.activity_id());
    }
    if (from.has_today_diamonds()) {
      set_today_diamonds(from.today_diamonds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContinuousChargeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContinuousChargeInfo::CopyFrom(const ContinuousChargeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContinuousChargeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ContinuousChargeInfo::Swap(ContinuousChargeInfo* other) {
  if (other != this) {
    std::swap(activity_id_, other->activity_id_);
    std::swap(today_diamonds_, other->today_diamonds_);
    days_.Swap(&other->days_);
    received_awards_.Swap(&other->received_awards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContinuousChargeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContinuousChargeInfo_descriptor_;
  metadata.reflection = ContinuousChargeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Activity_CS_ContinuousCharge_Query::Activity_CS_ContinuousCharge_Query()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_CS_ContinuousCharge_Query::InitAsDefaultInstance() {
}

Activity_CS_ContinuousCharge_Query::Activity_CS_ContinuousCharge_Query(const Activity_CS_ContinuousCharge_Query& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_CS_ContinuousCharge_Query::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_CS_ContinuousCharge_Query::~Activity_CS_ContinuousCharge_Query() {
  SharedDtor();
}

void Activity_CS_ContinuousCharge_Query::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity_CS_ContinuousCharge_Query::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_CS_ContinuousCharge_Query::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_CS_ContinuousCharge_Query_descriptor_;
}

const Activity_CS_ContinuousCharge_Query& Activity_CS_ContinuousCharge_Query::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

Activity_CS_ContinuousCharge_Query* Activity_CS_ContinuousCharge_Query::default_instance_ = NULL;

Activity_CS_ContinuousCharge_Query* Activity_CS_ContinuousCharge_Query::New() const {
  return new Activity_CS_ContinuousCharge_Query;
}

void Activity_CS_ContinuousCharge_Query::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_CS_ContinuousCharge_Query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Activity_CS_ContinuousCharge_Query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_CS_ContinuousCharge_Query::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_CS_ContinuousCharge_Query::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_CS_ContinuousCharge_Query::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_CS_ContinuousCharge_Query* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_CS_ContinuousCharge_Query*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_CS_ContinuousCharge_Query::MergeFrom(const Activity_CS_ContinuousCharge_Query& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_CS_ContinuousCharge_Query::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_CS_ContinuousCharge_Query::CopyFrom(const Activity_CS_ContinuousCharge_Query& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_CS_ContinuousCharge_Query::IsInitialized() const {

  return true;
}

void Activity_CS_ContinuousCharge_Query::Swap(Activity_CS_ContinuousCharge_Query* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_CS_ContinuousCharge_Query::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_CS_ContinuousCharge_Query_descriptor_;
  metadata.reflection = Activity_CS_ContinuousCharge_Query_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity_SC_ContinuousCharge_Query::kResFieldNumber;
const int Activity_SC_ContinuousCharge_Query::kInfoFieldNumber;
#endif  // !_MSC_VER

Activity_SC_ContinuousCharge_Query::Activity_SC_ContinuousCharge_Query()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_SC_ContinuousCharge_Query::InitAsDefaultInstance() {
  info_ = const_cast< ::proto::message::ContinuousChargeInfo*>(&::proto::message::ContinuousChargeInfo::default_instance());
}

Activity_SC_ContinuousCharge_Query::Activity_SC_ContinuousCharge_Query(const Activity_SC_ContinuousCharge_Query& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_SC_ContinuousCharge_Query::SharedCtor() {
  _cached_size_ = 0;
  res_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_SC_ContinuousCharge_Query::~Activity_SC_ContinuousCharge_Query() {
  SharedDtor();
}

void Activity_SC_ContinuousCharge_Query::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void Activity_SC_ContinuousCharge_Query::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_SC_ContinuousCharge_Query::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_SC_ContinuousCharge_Query_descriptor_;
}

const Activity_SC_ContinuousCharge_Query& Activity_SC_ContinuousCharge_Query::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

Activity_SC_ContinuousCharge_Query* Activity_SC_ContinuousCharge_Query::default_instance_ = NULL;

Activity_SC_ContinuousCharge_Query* Activity_SC_ContinuousCharge_Query::New() const {
  return new Activity_SC_ContinuousCharge_Query;
}

void Activity_SC_ContinuousCharge_Query::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    res_ = 0;
    if (has_info()) {
      if (info_ != NULL) info_->::proto::message::ContinuousChargeInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_SC_ContinuousCharge_Query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 res = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &res_)));
          set_has_res();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .proto.message.ContinuousChargeInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity_SC_ContinuousCharge_Query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 res = 1;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->res(), output);
  }

  // optional .proto.message.ContinuousChargeInfo info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_SC_ContinuousCharge_Query::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 res = 1;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->res(), target);
  }

  // optional .proto.message.ContinuousChargeInfo info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_SC_ContinuousCharge_Query::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 res = 1;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->res());
    }

    // optional .proto.message.ContinuousChargeInfo info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_SC_ContinuousCharge_Query::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_SC_ContinuousCharge_Query* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_SC_ContinuousCharge_Query*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_SC_ContinuousCharge_Query::MergeFrom(const Activity_SC_ContinuousCharge_Query& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_res()) {
      set_res(from.res());
    }
    if (from.has_info()) {
      mutable_info()->::proto::message::ContinuousChargeInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_SC_ContinuousCharge_Query::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_SC_ContinuousCharge_Query::CopyFrom(const Activity_SC_ContinuousCharge_Query& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_SC_ContinuousCharge_Query::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void Activity_SC_ContinuousCharge_Query::Swap(Activity_SC_ContinuousCharge_Query* other) {
  if (other != this) {
    std::swap(res_, other->res_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_SC_ContinuousCharge_Query::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_SC_ContinuousCharge_Query_descriptor_;
  metadata.reflection = Activity_SC_ContinuousCharge_Query_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity_CS_ContinuousCharge_Do::kIdFieldNumber;
#endif  // !_MSC_VER

Activity_CS_ContinuousCharge_Do::Activity_CS_ContinuousCharge_Do()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_CS_ContinuousCharge_Do::InitAsDefaultInstance() {
}

Activity_CS_ContinuousCharge_Do::Activity_CS_ContinuousCharge_Do(const Activity_CS_ContinuousCharge_Do& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_CS_ContinuousCharge_Do::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_CS_ContinuousCharge_Do::~Activity_CS_ContinuousCharge_Do() {
  SharedDtor();
}

void Activity_CS_ContinuousCharge_Do::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity_CS_ContinuousCharge_Do::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_CS_ContinuousCharge_Do::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_CS_ContinuousCharge_Do_descriptor_;
}

const Activity_CS_ContinuousCharge_Do& Activity_CS_ContinuousCharge_Do::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

Activity_CS_ContinuousCharge_Do* Activity_CS_ContinuousCharge_Do::default_instance_ = NULL;

Activity_CS_ContinuousCharge_Do* Activity_CS_ContinuousCharge_Do::New() const {
  return new Activity_CS_ContinuousCharge_Do;
}

void Activity_CS_ContinuousCharge_Do::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_CS_ContinuousCharge_Do::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity_CS_ContinuousCharge_Do::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_CS_ContinuousCharge_Do::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_CS_ContinuousCharge_Do::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_CS_ContinuousCharge_Do::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_CS_ContinuousCharge_Do* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_CS_ContinuousCharge_Do*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_CS_ContinuousCharge_Do::MergeFrom(const Activity_CS_ContinuousCharge_Do& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_CS_ContinuousCharge_Do::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_CS_ContinuousCharge_Do::CopyFrom(const Activity_CS_ContinuousCharge_Do& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_CS_ContinuousCharge_Do::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Activity_CS_ContinuousCharge_Do::Swap(Activity_CS_ContinuousCharge_Do* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_CS_ContinuousCharge_Do::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_CS_ContinuousCharge_Do_descriptor_;
  metadata.reflection = Activity_CS_ContinuousCharge_Do_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity_SC_ContinuousCharge_Do::kResFieldNumber;
#endif  // !_MSC_VER

Activity_SC_ContinuousCharge_Do::Activity_SC_ContinuousCharge_Do()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_SC_ContinuousCharge_Do::InitAsDefaultInstance() {
}

Activity_SC_ContinuousCharge_Do::Activity_SC_ContinuousCharge_Do(const Activity_SC_ContinuousCharge_Do& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_SC_ContinuousCharge_Do::SharedCtor() {
  _cached_size_ = 0;
  res_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_SC_ContinuousCharge_Do::~Activity_SC_ContinuousCharge_Do() {
  SharedDtor();
}

void Activity_SC_ContinuousCharge_Do::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity_SC_ContinuousCharge_Do::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_SC_ContinuousCharge_Do::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_SC_ContinuousCharge_Do_descriptor_;
}

const Activity_SC_ContinuousCharge_Do& Activity_SC_ContinuousCharge_Do::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

Activity_SC_ContinuousCharge_Do* Activity_SC_ContinuousCharge_Do::default_instance_ = NULL;

Activity_SC_ContinuousCharge_Do* Activity_SC_ContinuousCharge_Do::New() const {
  return new Activity_SC_ContinuousCharge_Do;
}

void Activity_SC_ContinuousCharge_Do::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    res_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_SC_ContinuousCharge_Do::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 res = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &res_)));
          set_has_res();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity_SC_ContinuousCharge_Do::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 res = 1;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->res(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_SC_ContinuousCharge_Do::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 res = 1;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->res(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_SC_ContinuousCharge_Do::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 res = 1;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->res());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_SC_ContinuousCharge_Do::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_SC_ContinuousCharge_Do* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_SC_ContinuousCharge_Do*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_SC_ContinuousCharge_Do::MergeFrom(const Activity_SC_ContinuousCharge_Do& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_res()) {
      set_res(from.res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_SC_ContinuousCharge_Do::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_SC_ContinuousCharge_Do::CopyFrom(const Activity_SC_ContinuousCharge_Do& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_SC_ContinuousCharge_Do::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Activity_SC_ContinuousCharge_Do::Swap(Activity_SC_ContinuousCharge_Do* other) {
  if (other != this) {
    std::swap(res_, other->res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_SC_ContinuousCharge_Do::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_SC_ContinuousCharge_Do_descriptor_;
  metadata.reflection = Activity_SC_ContinuousCharge_Do_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpecialSaleInfo::kActivityIdFieldNumber;
const int SpecialSaleInfo::kReceivedAwardsFieldNumber;
#endif  // !_MSC_VER

SpecialSaleInfo::SpecialSaleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SpecialSaleInfo::InitAsDefaultInstance() {
}

SpecialSaleInfo::SpecialSaleInfo(const SpecialSaleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SpecialSaleInfo::SharedCtor() {
  _cached_size_ = 0;
  activity_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpecialSaleInfo::~SpecialSaleInfo() {
  SharedDtor();
}

void SpecialSaleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SpecialSaleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpecialSaleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpecialSaleInfo_descriptor_;
}

const SpecialSaleInfo& SpecialSaleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

SpecialSaleInfo* SpecialSaleInfo::default_instance_ = NULL;

SpecialSaleInfo* SpecialSaleInfo::New() const {
  return new SpecialSaleInfo;
}

void SpecialSaleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activity_id_ = 0u;
  }
  received_awards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpecialSaleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 activity_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activity_id_)));
          set_has_activity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_received_awards;
        break;
      }

      // repeated uint32 received_awards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_received_awards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_received_awards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_received_awards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_received_awards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpecialSaleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 activity_id = 1;
  if (has_activity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->activity_id(), output);
  }

  // repeated uint32 received_awards = 2;
  for (int i = 0; i < this->received_awards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->received_awards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SpecialSaleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 activity_id = 1;
  if (has_activity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->activity_id(), target);
  }

  // repeated uint32 received_awards = 2;
  for (int i = 0; i < this->received_awards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->received_awards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SpecialSaleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 activity_id = 1;
    if (has_activity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activity_id());
    }

  }
  // repeated uint32 received_awards = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->received_awards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->received_awards(i));
    }
    total_size += 1 * this->received_awards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpecialSaleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpecialSaleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpecialSaleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpecialSaleInfo::MergeFrom(const SpecialSaleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  received_awards_.MergeFrom(from.received_awards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activity_id()) {
      set_activity_id(from.activity_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpecialSaleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpecialSaleInfo::CopyFrom(const SpecialSaleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecialSaleInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SpecialSaleInfo::Swap(SpecialSaleInfo* other) {
  if (other != this) {
    std::swap(activity_id_, other->activity_id_);
    received_awards_.Swap(&other->received_awards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpecialSaleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpecialSaleInfo_descriptor_;
  metadata.reflection = SpecialSaleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Activity_CS_SpecialSale_Query::Activity_CS_SpecialSale_Query()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_CS_SpecialSale_Query::InitAsDefaultInstance() {
}

Activity_CS_SpecialSale_Query::Activity_CS_SpecialSale_Query(const Activity_CS_SpecialSale_Query& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_CS_SpecialSale_Query::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_CS_SpecialSale_Query::~Activity_CS_SpecialSale_Query() {
  SharedDtor();
}

void Activity_CS_SpecialSale_Query::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity_CS_SpecialSale_Query::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_CS_SpecialSale_Query::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_CS_SpecialSale_Query_descriptor_;
}

const Activity_CS_SpecialSale_Query& Activity_CS_SpecialSale_Query::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

Activity_CS_SpecialSale_Query* Activity_CS_SpecialSale_Query::default_instance_ = NULL;

Activity_CS_SpecialSale_Query* Activity_CS_SpecialSale_Query::New() const {
  return new Activity_CS_SpecialSale_Query;
}

void Activity_CS_SpecialSale_Query::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_CS_SpecialSale_Query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Activity_CS_SpecialSale_Query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_CS_SpecialSale_Query::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_CS_SpecialSale_Query::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_CS_SpecialSale_Query::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_CS_SpecialSale_Query* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_CS_SpecialSale_Query*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_CS_SpecialSale_Query::MergeFrom(const Activity_CS_SpecialSale_Query& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_CS_SpecialSale_Query::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_CS_SpecialSale_Query::CopyFrom(const Activity_CS_SpecialSale_Query& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_CS_SpecialSale_Query::IsInitialized() const {

  return true;
}

void Activity_CS_SpecialSale_Query::Swap(Activity_CS_SpecialSale_Query* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_CS_SpecialSale_Query::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_CS_SpecialSale_Query_descriptor_;
  metadata.reflection = Activity_CS_SpecialSale_Query_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity_SC_SpecialSale_Query::kResFieldNumber;
const int Activity_SC_SpecialSale_Query::kInfoFieldNumber;
#endif  // !_MSC_VER

Activity_SC_SpecialSale_Query::Activity_SC_SpecialSale_Query()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_SC_SpecialSale_Query::InitAsDefaultInstance() {
  info_ = const_cast< ::proto::message::SpecialSaleInfo*>(&::proto::message::SpecialSaleInfo::default_instance());
}

Activity_SC_SpecialSale_Query::Activity_SC_SpecialSale_Query(const Activity_SC_SpecialSale_Query& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_SC_SpecialSale_Query::SharedCtor() {
  _cached_size_ = 0;
  res_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_SC_SpecialSale_Query::~Activity_SC_SpecialSale_Query() {
  SharedDtor();
}

void Activity_SC_SpecialSale_Query::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void Activity_SC_SpecialSale_Query::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_SC_SpecialSale_Query::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_SC_SpecialSale_Query_descriptor_;
}

const Activity_SC_SpecialSale_Query& Activity_SC_SpecialSale_Query::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

Activity_SC_SpecialSale_Query* Activity_SC_SpecialSale_Query::default_instance_ = NULL;

Activity_SC_SpecialSale_Query* Activity_SC_SpecialSale_Query::New() const {
  return new Activity_SC_SpecialSale_Query;
}

void Activity_SC_SpecialSale_Query::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    res_ = 0;
    if (has_info()) {
      if (info_ != NULL) info_->::proto::message::SpecialSaleInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_SC_SpecialSale_Query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 res = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &res_)));
          set_has_res();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .proto.message.SpecialSaleInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity_SC_SpecialSale_Query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 res = 1;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->res(), output);
  }

  // optional .proto.message.SpecialSaleInfo info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_SC_SpecialSale_Query::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 res = 1;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->res(), target);
  }

  // optional .proto.message.SpecialSaleInfo info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_SC_SpecialSale_Query::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 res = 1;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->res());
    }

    // optional .proto.message.SpecialSaleInfo info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_SC_SpecialSale_Query::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_SC_SpecialSale_Query* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_SC_SpecialSale_Query*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_SC_SpecialSale_Query::MergeFrom(const Activity_SC_SpecialSale_Query& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_res()) {
      set_res(from.res());
    }
    if (from.has_info()) {
      mutable_info()->::proto::message::SpecialSaleInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_SC_SpecialSale_Query::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_SC_SpecialSale_Query::CopyFrom(const Activity_SC_SpecialSale_Query& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_SC_SpecialSale_Query::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void Activity_SC_SpecialSale_Query::Swap(Activity_SC_SpecialSale_Query* other) {
  if (other != this) {
    std::swap(res_, other->res_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_SC_SpecialSale_Query::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_SC_SpecialSale_Query_descriptor_;
  metadata.reflection = Activity_SC_SpecialSale_Query_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity_CS_SpecialSale_Do::kIdFieldNumber;
#endif  // !_MSC_VER

Activity_CS_SpecialSale_Do::Activity_CS_SpecialSale_Do()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_CS_SpecialSale_Do::InitAsDefaultInstance() {
}

Activity_CS_SpecialSale_Do::Activity_CS_SpecialSale_Do(const Activity_CS_SpecialSale_Do& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_CS_SpecialSale_Do::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_CS_SpecialSale_Do::~Activity_CS_SpecialSale_Do() {
  SharedDtor();
}

void Activity_CS_SpecialSale_Do::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity_CS_SpecialSale_Do::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_CS_SpecialSale_Do::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_CS_SpecialSale_Do_descriptor_;
}

const Activity_CS_SpecialSale_Do& Activity_CS_SpecialSale_Do::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

Activity_CS_SpecialSale_Do* Activity_CS_SpecialSale_Do::default_instance_ = NULL;

Activity_CS_SpecialSale_Do* Activity_CS_SpecialSale_Do::New() const {
  return new Activity_CS_SpecialSale_Do;
}

void Activity_CS_SpecialSale_Do::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_CS_SpecialSale_Do::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity_CS_SpecialSale_Do::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_CS_SpecialSale_Do::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_CS_SpecialSale_Do::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_CS_SpecialSale_Do::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_CS_SpecialSale_Do* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_CS_SpecialSale_Do*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_CS_SpecialSale_Do::MergeFrom(const Activity_CS_SpecialSale_Do& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_CS_SpecialSale_Do::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_CS_SpecialSale_Do::CopyFrom(const Activity_CS_SpecialSale_Do& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_CS_SpecialSale_Do::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Activity_CS_SpecialSale_Do::Swap(Activity_CS_SpecialSale_Do* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_CS_SpecialSale_Do::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_CS_SpecialSale_Do_descriptor_;
  metadata.reflection = Activity_CS_SpecialSale_Do_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity_SC_SpecialSale_Do::kResFieldNumber;
#endif  // !_MSC_VER

Activity_SC_SpecialSale_Do::Activity_SC_SpecialSale_Do()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_SC_SpecialSale_Do::InitAsDefaultInstance() {
}

Activity_SC_SpecialSale_Do::Activity_SC_SpecialSale_Do(const Activity_SC_SpecialSale_Do& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_SC_SpecialSale_Do::SharedCtor() {
  _cached_size_ = 0;
  res_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_SC_SpecialSale_Do::~Activity_SC_SpecialSale_Do() {
  SharedDtor();
}

void Activity_SC_SpecialSale_Do::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity_SC_SpecialSale_Do::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_SC_SpecialSale_Do::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_SC_SpecialSale_Do_descriptor_;
}

const Activity_SC_SpecialSale_Do& Activity_SC_SpecialSale_Do::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

Activity_SC_SpecialSale_Do* Activity_SC_SpecialSale_Do::default_instance_ = NULL;

Activity_SC_SpecialSale_Do* Activity_SC_SpecialSale_Do::New() const {
  return new Activity_SC_SpecialSale_Do;
}

void Activity_SC_SpecialSale_Do::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    res_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_SC_SpecialSale_Do::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 res = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &res_)));
          set_has_res();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity_SC_SpecialSale_Do::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 res = 1;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->res(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_SC_SpecialSale_Do::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 res = 1;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->res(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_SC_SpecialSale_Do::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 res = 1;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->res());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_SC_SpecialSale_Do::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_SC_SpecialSale_Do* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_SC_SpecialSale_Do*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_SC_SpecialSale_Do::MergeFrom(const Activity_SC_SpecialSale_Do& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_res()) {
      set_res(from.res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_SC_SpecialSale_Do::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_SC_SpecialSale_Do::CopyFrom(const Activity_SC_SpecialSale_Do& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_SC_SpecialSale_Do::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Activity_SC_SpecialSale_Do::Swap(Activity_SC_SpecialSale_Do* other) {
  if (other != this) {
    std::swap(res_, other->res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_SC_SpecialSale_Do::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_SC_SpecialSale_Do_descriptor_;
  metadata.reflection = Activity_SC_SpecialSale_Do_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LostTreasureRecord::kNameFieldNumber;
const int LostTreasureRecord::kItemFieldNumber;
#endif  // !_MSC_VER

LostTreasureRecord::LostTreasureRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LostTreasureRecord::InitAsDefaultInstance() {
  item_ = const_cast< ::proto::message::IDNum*>(&::proto::message::IDNum::default_instance());
}

LostTreasureRecord::LostTreasureRecord(const LostTreasureRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LostTreasureRecord::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LostTreasureRecord::~LostTreasureRecord() {
  SharedDtor();
}

void LostTreasureRecord::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete item_;
  }
}

void LostTreasureRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LostTreasureRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LostTreasureRecord_descriptor_;
}

const LostTreasureRecord& LostTreasureRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

LostTreasureRecord* LostTreasureRecord::default_instance_ = NULL;

LostTreasureRecord* LostTreasureRecord::New() const {
  return new LostTreasureRecord;
}

void LostTreasureRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_item()) {
      if (item_ != NULL) item_->::proto::message::IDNum::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LostTreasureRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // required .proto.message.IDNum item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LostTreasureRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required .proto.message.IDNum item = 2;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LostTreasureRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .proto.message.IDNum item = 2;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LostTreasureRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .proto.message.IDNum item = 2;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LostTreasureRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LostTreasureRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LostTreasureRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LostTreasureRecord::MergeFrom(const LostTreasureRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_item()) {
      mutable_item()->::proto::message::IDNum::MergeFrom(from.item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LostTreasureRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LostTreasureRecord::CopyFrom(const LostTreasureRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LostTreasureRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void LostTreasureRecord::Swap(LostTreasureRecord* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(item_, other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LostTreasureRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LostTreasureRecord_descriptor_;
  metadata.reflection = LostTreasureRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LostTreasure::kRecordsFieldNumber;
#endif  // !_MSC_VER

LostTreasure::LostTreasure()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LostTreasure::InitAsDefaultInstance() {
}

LostTreasure::LostTreasure(const LostTreasure& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LostTreasure::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LostTreasure::~LostTreasure() {
  SharedDtor();
}

void LostTreasure::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LostTreasure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LostTreasure::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LostTreasure_descriptor_;
}

const LostTreasure& LostTreasure::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

LostTreasure* LostTreasure::default_instance_ = NULL;

LostTreasure* LostTreasure::New() const {
  return new LostTreasure;
}

void LostTreasure::Clear() {
  records_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LostTreasure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.LostTreasureRecord records = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_records()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_records;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LostTreasure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.LostTreasureRecord records = 1;
  for (int i = 0; i < this->records_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->records(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LostTreasure::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.LostTreasureRecord records = 1;
  for (int i = 0; i < this->records_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->records(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LostTreasure::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.LostTreasureRecord records = 1;
  total_size += 1 * this->records_size();
  for (int i = 0; i < this->records_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->records(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LostTreasure::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LostTreasure* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LostTreasure*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LostTreasure::MergeFrom(const LostTreasure& from) {
  GOOGLE_CHECK_NE(&from, this);
  records_.MergeFrom(from.records_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LostTreasure::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LostTreasure::CopyFrom(const LostTreasure& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LostTreasure::IsInitialized() const {

  for (int i = 0; i < records_size(); i++) {
    if (!this->records(i).IsInitialized()) return false;
  }
  return true;
}

void LostTreasure::Swap(LostTreasure* other) {
  if (other != this) {
    records_.Swap(&other->records_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LostTreasure::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LostTreasure_descriptor_;
  metadata.reflection = LostTreasure_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LostTreasureBag::kItemsFieldNumber;
const int LostTreasureBag::kEquipsFieldNumber;
#endif  // !_MSC_VER

LostTreasureBag::LostTreasureBag()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LostTreasureBag::InitAsDefaultInstance() {
}

LostTreasureBag::LostTreasureBag(const LostTreasureBag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LostTreasureBag::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LostTreasureBag::~LostTreasureBag() {
  SharedDtor();
}

void LostTreasureBag::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LostTreasureBag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LostTreasureBag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LostTreasureBag_descriptor_;
}

const LostTreasureBag& LostTreasureBag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

LostTreasureBag* LostTreasureBag::default_instance_ = NULL;

LostTreasureBag* LostTreasureBag::New() const {
  return new LostTreasureBag;
}

void LostTreasureBag::Clear() {
  items_.Clear();
  equips_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LostTreasureBag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.Item items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectTag(18)) goto parse_equips;
        break;
      }

      // repeated .proto.message.Equip equips = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equips()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_equips;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LostTreasureBag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.Item items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  // repeated .proto.message.Equip equips = 2;
  for (int i = 0; i < this->equips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equips(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LostTreasureBag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.Item items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  // repeated .proto.message.Equip equips = 2;
  for (int i = 0; i < this->equips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equips(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LostTreasureBag::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.Item items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  // repeated .proto.message.Equip equips = 2;
  total_size += 1 * this->equips_size();
  for (int i = 0; i < this->equips_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equips(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LostTreasureBag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LostTreasureBag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LostTreasureBag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LostTreasureBag::MergeFrom(const LostTreasureBag& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  equips_.MergeFrom(from.equips_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LostTreasureBag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LostTreasureBag::CopyFrom(const LostTreasureBag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LostTreasureBag::IsInitialized() const {

  return true;
}

void LostTreasureBag::Swap(LostTreasureBag* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    equips_.Swap(&other->equips_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LostTreasureBag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LostTreasureBag_descriptor_;
  metadata.reflection = LostTreasureBag_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LostTreasureInfo::kIntegralFieldNumber;
const int LostTreasureInfo::kBagFieldNumber;
const int LostTreasureInfo::kRecordsFieldNumber;
const int LostTreasureInfo::kRecordForeverFieldNumber;
const int LostTreasureInfo::kRecordDayFieldNumber;
const int LostTreasureInfo::kRecordWeekFieldNumber;
const int LostTreasureInfo::kTimesFieldNumber;
#endif  // !_MSC_VER

LostTreasureInfo::LostTreasureInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LostTreasureInfo::InitAsDefaultInstance() {
  bag_ = const_cast< ::proto::message::LostTreasureBag*>(&::proto::message::LostTreasureBag::default_instance());
}

LostTreasureInfo::LostTreasureInfo(const LostTreasureInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LostTreasureInfo::SharedCtor() {
  _cached_size_ = 0;
  integral_ = 0u;
  bag_ = NULL;
  times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LostTreasureInfo::~LostTreasureInfo() {
  SharedDtor();
}

void LostTreasureInfo::SharedDtor() {
  if (this != default_instance_) {
    delete bag_;
  }
}

void LostTreasureInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LostTreasureInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LostTreasureInfo_descriptor_;
}

const LostTreasureInfo& LostTreasureInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

LostTreasureInfo* LostTreasureInfo::default_instance_ = NULL;

LostTreasureInfo* LostTreasureInfo::New() const {
  return new LostTreasureInfo;
}

void LostTreasureInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    integral_ = 0u;
    if (has_bag()) {
      if (bag_ != NULL) bag_->::proto::message::LostTreasureBag::Clear();
    }
    times_ = 0u;
  }
  records_.Clear();
  record_forever_.Clear();
  record_day_.Clear();
  record_week_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LostTreasureInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 integral = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &integral_)));
          set_has_integral();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bag;
        break;
      }

      // optional .proto.message.LostTreasureBag bag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bag()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_records;
        break;
      }

      // repeated .proto.message.IDNum records = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_records()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_records;
        if (input->ExpectTag(34)) goto parse_record_forever;
        break;
      }

      // repeated .proto.message.IDNum record_forever = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record_forever:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record_forever()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_record_forever;
        if (input->ExpectTag(42)) goto parse_record_day;
        break;
      }

      // repeated .proto.message.IDNum record_day = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record_day:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record_day()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_record_day;
        if (input->ExpectTag(50)) goto parse_record_week;
        break;
      }

      // repeated .proto.message.IDNum record_week = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record_week:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record_week()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_record_week;
        if (input->ExpectTag(56)) goto parse_times;
        break;
      }

      // optional uint32 times = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LostTreasureInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 integral = 1;
  if (has_integral()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->integral(), output);
  }

  // optional .proto.message.LostTreasureBag bag = 2;
  if (has_bag()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bag(), output);
  }

  // repeated .proto.message.IDNum records = 3;
  for (int i = 0; i < this->records_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->records(i), output);
  }

  // repeated .proto.message.IDNum record_forever = 4;
  for (int i = 0; i < this->record_forever_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->record_forever(i), output);
  }

  // repeated .proto.message.IDNum record_day = 5;
  for (int i = 0; i < this->record_day_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->record_day(i), output);
  }

  // repeated .proto.message.IDNum record_week = 6;
  for (int i = 0; i < this->record_week_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->record_week(i), output);
  }

  // optional uint32 times = 7;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LostTreasureInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 integral = 1;
  if (has_integral()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->integral(), target);
  }

  // optional .proto.message.LostTreasureBag bag = 2;
  if (has_bag()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bag(), target);
  }

  // repeated .proto.message.IDNum records = 3;
  for (int i = 0; i < this->records_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->records(i), target);
  }

  // repeated .proto.message.IDNum record_forever = 4;
  for (int i = 0; i < this->record_forever_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->record_forever(i), target);
  }

  // repeated .proto.message.IDNum record_day = 5;
  for (int i = 0; i < this->record_day_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->record_day(i), target);
  }

  // repeated .proto.message.IDNum record_week = 6;
  for (int i = 0; i < this->record_week_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->record_week(i), target);
  }

  // optional uint32 times = 7;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LostTreasureInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 integral = 1;
    if (has_integral()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->integral());
    }

    // optional .proto.message.LostTreasureBag bag = 2;
    if (has_bag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bag());
    }

    // optional uint32 times = 7;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->times());
    }

  }
  // repeated .proto.message.IDNum records = 3;
  total_size += 1 * this->records_size();
  for (int i = 0; i < this->records_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->records(i));
  }

  // repeated .proto.message.IDNum record_forever = 4;
  total_size += 1 * this->record_forever_size();
  for (int i = 0; i < this->record_forever_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record_forever(i));
  }

  // repeated .proto.message.IDNum record_day = 5;
  total_size += 1 * this->record_day_size();
  for (int i = 0; i < this->record_day_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record_day(i));
  }

  // repeated .proto.message.IDNum record_week = 6;
  total_size += 1 * this->record_week_size();
  for (int i = 0; i < this->record_week_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record_week(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LostTreasureInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LostTreasureInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LostTreasureInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LostTreasureInfo::MergeFrom(const LostTreasureInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  records_.MergeFrom(from.records_);
  record_forever_.MergeFrom(from.record_forever_);
  record_day_.MergeFrom(from.record_day_);
  record_week_.MergeFrom(from.record_week_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_integral()) {
      set_integral(from.integral());
    }
    if (from.has_bag()) {
      mutable_bag()->::proto::message::LostTreasureBag::MergeFrom(from.bag());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LostTreasureInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LostTreasureInfo::CopyFrom(const LostTreasureInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LostTreasureInfo::IsInitialized() const {

  return true;
}

void LostTreasureInfo::Swap(LostTreasureInfo* other) {
  if (other != this) {
    std::swap(integral_, other->integral_);
    std::swap(bag_, other->bag_);
    records_.Swap(&other->records_);
    record_forever_.Swap(&other->record_forever_);
    record_day_.Swap(&other->record_day_);
    record_week_.Swap(&other->record_week_);
    std::swap(times_, other->times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LostTreasureInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LostTreasureInfo_descriptor_;
  metadata.reflection = LostTreasureInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity_CS_LostTreasure_Do::kIdFieldNumber;
const int Activity_CS_LostTreasure_Do::kOptFieldNumber;
#endif  // !_MSC_VER

Activity_CS_LostTreasure_Do::Activity_CS_LostTreasure_Do()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_CS_LostTreasure_Do::InitAsDefaultInstance() {
}

Activity_CS_LostTreasure_Do::Activity_CS_LostTreasure_Do(const Activity_CS_LostTreasure_Do& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_CS_LostTreasure_Do::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  opt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_CS_LostTreasure_Do::~Activity_CS_LostTreasure_Do() {
  SharedDtor();
}

void Activity_CS_LostTreasure_Do::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity_CS_LostTreasure_Do::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_CS_LostTreasure_Do::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_CS_LostTreasure_Do_descriptor_;
}

const Activity_CS_LostTreasure_Do& Activity_CS_LostTreasure_Do::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

Activity_CS_LostTreasure_Do* Activity_CS_LostTreasure_Do::default_instance_ = NULL;

Activity_CS_LostTreasure_Do* Activity_CS_LostTreasure_Do::New() const {
  return new Activity_CS_LostTreasure_Do;
}

void Activity_CS_LostTreasure_Do::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    opt_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_CS_LostTreasure_Do::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_opt;
        break;
      }

      // optional uint32 opt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opt_)));
          set_has_opt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity_CS_LostTreasure_Do::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 opt = 2;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->opt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_CS_LostTreasure_Do::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 opt = 2;
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->opt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_CS_LostTreasure_Do::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 opt = 2;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_CS_LostTreasure_Do::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_CS_LostTreasure_Do* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_CS_LostTreasure_Do*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_CS_LostTreasure_Do::MergeFrom(const Activity_CS_LostTreasure_Do& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_opt()) {
      set_opt(from.opt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_CS_LostTreasure_Do::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_CS_LostTreasure_Do::CopyFrom(const Activity_CS_LostTreasure_Do& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_CS_LostTreasure_Do::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Activity_CS_LostTreasure_Do::Swap(Activity_CS_LostTreasure_Do* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(opt_, other->opt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_CS_LostTreasure_Do::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_CS_LostTreasure_Do_descriptor_;
  metadata.reflection = Activity_CS_LostTreasure_Do_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity_SC_LostTreasure_Do::kResFieldNumber;
const int Activity_SC_LostTreasure_Do::kIdFieldNumber;
const int Activity_SC_LostTreasure_Do::kIntegralFieldNumber;
const int Activity_SC_LostTreasure_Do::kItemsFieldNumber;
#endif  // !_MSC_VER

Activity_SC_LostTreasure_Do::Activity_SC_LostTreasure_Do()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_SC_LostTreasure_Do::InitAsDefaultInstance() {
}

Activity_SC_LostTreasure_Do::Activity_SC_LostTreasure_Do(const Activity_SC_LostTreasure_Do& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_SC_LostTreasure_Do::SharedCtor() {
  _cached_size_ = 0;
  res_ = 0;
  id_ = 0u;
  integral_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_SC_LostTreasure_Do::~Activity_SC_LostTreasure_Do() {
  SharedDtor();
}

void Activity_SC_LostTreasure_Do::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity_SC_LostTreasure_Do::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_SC_LostTreasure_Do::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_SC_LostTreasure_Do_descriptor_;
}

const Activity_SC_LostTreasure_Do& Activity_SC_LostTreasure_Do::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

Activity_SC_LostTreasure_Do* Activity_SC_LostTreasure_Do::default_instance_ = NULL;

Activity_SC_LostTreasure_Do* Activity_SC_LostTreasure_Do::New() const {
  return new Activity_SC_LostTreasure_Do;
}

void Activity_SC_LostTreasure_Do::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    res_ = 0;
    id_ = 0u;
    integral_ = 0u;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_SC_LostTreasure_Do::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 res = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &res_)));
          set_has_res();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_integral;
        break;
      }

      // optional uint32 integral = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_integral:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &integral_)));
          set_has_integral();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_items;
        break;
      }

      // repeated .proto.message.IDNum items = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity_SC_LostTreasure_Do::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 res = 1;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->res(), output);
  }

  // required uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // optional uint32 integral = 3;
  if (has_integral()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->integral(), output);
  }

  // repeated .proto.message.IDNum items = 4;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_SC_LostTreasure_Do::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 res = 1;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->res(), target);
  }

  // required uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // optional uint32 integral = 3;
  if (has_integral()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->integral(), target);
  }

  // repeated .proto.message.IDNum items = 4;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_SC_LostTreasure_Do::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 res = 1;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->res());
    }

    // required uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 integral = 3;
    if (has_integral()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->integral());
    }

  }
  // repeated .proto.message.IDNum items = 4;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_SC_LostTreasure_Do::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_SC_LostTreasure_Do* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_SC_LostTreasure_Do*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_SC_LostTreasure_Do::MergeFrom(const Activity_SC_LostTreasure_Do& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_res()) {
      set_res(from.res());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_integral()) {
      set_integral(from.integral());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_SC_LostTreasure_Do::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_SC_LostTreasure_Do::CopyFrom(const Activity_SC_LostTreasure_Do& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_SC_LostTreasure_Do::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Activity_SC_LostTreasure_Do::Swap(Activity_SC_LostTreasure_Do* other) {
  if (other != this) {
    std::swap(res_, other->res_);
    std::swap(id_, other->id_);
    std::swap(integral_, other->integral_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_SC_LostTreasure_Do::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_SC_LostTreasure_Do_descriptor_;
  metadata.reflection = Activity_SC_LostTreasure_Do_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity_CS_LostTreasure_Exchange::kIdFieldNumber;
#endif  // !_MSC_VER

Activity_CS_LostTreasure_Exchange::Activity_CS_LostTreasure_Exchange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_CS_LostTreasure_Exchange::InitAsDefaultInstance() {
}

Activity_CS_LostTreasure_Exchange::Activity_CS_LostTreasure_Exchange(const Activity_CS_LostTreasure_Exchange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_CS_LostTreasure_Exchange::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_CS_LostTreasure_Exchange::~Activity_CS_LostTreasure_Exchange() {
  SharedDtor();
}

void Activity_CS_LostTreasure_Exchange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity_CS_LostTreasure_Exchange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_CS_LostTreasure_Exchange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_CS_LostTreasure_Exchange_descriptor_;
}

const Activity_CS_LostTreasure_Exchange& Activity_CS_LostTreasure_Exchange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

Activity_CS_LostTreasure_Exchange* Activity_CS_LostTreasure_Exchange::default_instance_ = NULL;

Activity_CS_LostTreasure_Exchange* Activity_CS_LostTreasure_Exchange::New() const {
  return new Activity_CS_LostTreasure_Exchange;
}

void Activity_CS_LostTreasure_Exchange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_CS_LostTreasure_Exchange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity_CS_LostTreasure_Exchange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_CS_LostTreasure_Exchange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_CS_LostTreasure_Exchange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_CS_LostTreasure_Exchange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_CS_LostTreasure_Exchange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_CS_LostTreasure_Exchange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_CS_LostTreasure_Exchange::MergeFrom(const Activity_CS_LostTreasure_Exchange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_CS_LostTreasure_Exchange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_CS_LostTreasure_Exchange::CopyFrom(const Activity_CS_LostTreasure_Exchange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_CS_LostTreasure_Exchange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Activity_CS_LostTreasure_Exchange::Swap(Activity_CS_LostTreasure_Exchange* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_CS_LostTreasure_Exchange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_CS_LostTreasure_Exchange_descriptor_;
  metadata.reflection = Activity_CS_LostTreasure_Exchange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity_SC_LostTreasure_Exchange::kResFieldNumber;
const int Activity_SC_LostTreasure_Exchange::kIntegralFieldNumber;
const int Activity_SC_LostTreasure_Exchange::kIdFieldNumber;
#endif  // !_MSC_VER

Activity_SC_LostTreasure_Exchange::Activity_SC_LostTreasure_Exchange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_SC_LostTreasure_Exchange::InitAsDefaultInstance() {
}

Activity_SC_LostTreasure_Exchange::Activity_SC_LostTreasure_Exchange(const Activity_SC_LostTreasure_Exchange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_SC_LostTreasure_Exchange::SharedCtor() {
  _cached_size_ = 0;
  res_ = 0u;
  integral_ = 0u;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_SC_LostTreasure_Exchange::~Activity_SC_LostTreasure_Exchange() {
  SharedDtor();
}

void Activity_SC_LostTreasure_Exchange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity_SC_LostTreasure_Exchange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_SC_LostTreasure_Exchange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_SC_LostTreasure_Exchange_descriptor_;
}

const Activity_SC_LostTreasure_Exchange& Activity_SC_LostTreasure_Exchange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

Activity_SC_LostTreasure_Exchange* Activity_SC_LostTreasure_Exchange::default_instance_ = NULL;

Activity_SC_LostTreasure_Exchange* Activity_SC_LostTreasure_Exchange::New() const {
  return new Activity_SC_LostTreasure_Exchange;
}

void Activity_SC_LostTreasure_Exchange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    res_ = 0u;
    integral_ = 0u;
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_SC_LostTreasure_Exchange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 res = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &res_)));
          set_has_res();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_integral;
        break;
      }

      // optional uint32 integral = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_integral:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &integral_)));
          set_has_integral();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity_SC_LostTreasure_Exchange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 res = 1;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->res(), output);
  }

  // optional uint32 integral = 2;
  if (has_integral()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->integral(), output);
  }

  // optional uint32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_SC_LostTreasure_Exchange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 res = 1;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->res(), target);
  }

  // optional uint32 integral = 2;
  if (has_integral()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->integral(), target);
  }

  // optional uint32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_SC_LostTreasure_Exchange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 res = 1;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->res());
    }

    // optional uint32 integral = 2;
    if (has_integral()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->integral());
    }

    // optional uint32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_SC_LostTreasure_Exchange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_SC_LostTreasure_Exchange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_SC_LostTreasure_Exchange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_SC_LostTreasure_Exchange::MergeFrom(const Activity_SC_LostTreasure_Exchange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_res()) {
      set_res(from.res());
    }
    if (from.has_integral()) {
      set_integral(from.integral());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_SC_LostTreasure_Exchange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_SC_LostTreasure_Exchange::CopyFrom(const Activity_SC_LostTreasure_Exchange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_SC_LostTreasure_Exchange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Activity_SC_LostTreasure_Exchange::Swap(Activity_SC_LostTreasure_Exchange* other) {
  if (other != this) {
    std::swap(res_, other->res_);
    std::swap(integral_, other->integral_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_SC_LostTreasure_Exchange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_SC_LostTreasure_Exchange_descriptor_;
  metadata.reflection = Activity_SC_LostTreasure_Exchange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Activity_CS_LostTreasure_Query::Activity_CS_LostTreasure_Query()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_CS_LostTreasure_Query::InitAsDefaultInstance() {
}

Activity_CS_LostTreasure_Query::Activity_CS_LostTreasure_Query(const Activity_CS_LostTreasure_Query& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_CS_LostTreasure_Query::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_CS_LostTreasure_Query::~Activity_CS_LostTreasure_Query() {
  SharedDtor();
}

void Activity_CS_LostTreasure_Query::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity_CS_LostTreasure_Query::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_CS_LostTreasure_Query::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_CS_LostTreasure_Query_descriptor_;
}

const Activity_CS_LostTreasure_Query& Activity_CS_LostTreasure_Query::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

Activity_CS_LostTreasure_Query* Activity_CS_LostTreasure_Query::default_instance_ = NULL;

Activity_CS_LostTreasure_Query* Activity_CS_LostTreasure_Query::New() const {
  return new Activity_CS_LostTreasure_Query;
}

void Activity_CS_LostTreasure_Query::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_CS_LostTreasure_Query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Activity_CS_LostTreasure_Query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_CS_LostTreasure_Query::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_CS_LostTreasure_Query::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_CS_LostTreasure_Query::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_CS_LostTreasure_Query* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_CS_LostTreasure_Query*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_CS_LostTreasure_Query::MergeFrom(const Activity_CS_LostTreasure_Query& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_CS_LostTreasure_Query::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_CS_LostTreasure_Query::CopyFrom(const Activity_CS_LostTreasure_Query& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_CS_LostTreasure_Query::IsInitialized() const {

  return true;
}

void Activity_CS_LostTreasure_Query::Swap(Activity_CS_LostTreasure_Query* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_CS_LostTreasure_Query::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_CS_LostTreasure_Query_descriptor_;
  metadata.reflection = Activity_CS_LostTreasure_Query_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity_SC_LostTreasure_Query::kResFieldNumber;
const int Activity_SC_LostTreasure_Query::kInfoFieldNumber;
#endif  // !_MSC_VER

Activity_SC_LostTreasure_Query::Activity_SC_LostTreasure_Query()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_SC_LostTreasure_Query::InitAsDefaultInstance() {
  info_ = const_cast< ::proto::message::LostTreasureInfo*>(&::proto::message::LostTreasureInfo::default_instance());
}

Activity_SC_LostTreasure_Query::Activity_SC_LostTreasure_Query(const Activity_SC_LostTreasure_Query& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_SC_LostTreasure_Query::SharedCtor() {
  _cached_size_ = 0;
  res_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_SC_LostTreasure_Query::~Activity_SC_LostTreasure_Query() {
  SharedDtor();
}

void Activity_SC_LostTreasure_Query::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void Activity_SC_LostTreasure_Query::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_SC_LostTreasure_Query::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_SC_LostTreasure_Query_descriptor_;
}

const Activity_SC_LostTreasure_Query& Activity_SC_LostTreasure_Query::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

Activity_SC_LostTreasure_Query* Activity_SC_LostTreasure_Query::default_instance_ = NULL;

Activity_SC_LostTreasure_Query* Activity_SC_LostTreasure_Query::New() const {
  return new Activity_SC_LostTreasure_Query;
}

void Activity_SC_LostTreasure_Query::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    res_ = 0;
    if (has_info()) {
      if (info_ != NULL) info_->::proto::message::LostTreasureInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_SC_LostTreasure_Query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 res = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &res_)));
          set_has_res();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .proto.message.LostTreasureInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity_SC_LostTreasure_Query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 res = 1;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->res(), output);
  }

  // optional .proto.message.LostTreasureInfo info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_SC_LostTreasure_Query::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 res = 1;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->res(), target);
  }

  // optional .proto.message.LostTreasureInfo info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_SC_LostTreasure_Query::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 res = 1;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->res());
    }

    // optional .proto.message.LostTreasureInfo info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_SC_LostTreasure_Query::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_SC_LostTreasure_Query* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_SC_LostTreasure_Query*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_SC_LostTreasure_Query::MergeFrom(const Activity_SC_LostTreasure_Query& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_res()) {
      set_res(from.res());
    }
    if (from.has_info()) {
      mutable_info()->::proto::message::LostTreasureInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_SC_LostTreasure_Query::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_SC_LostTreasure_Query::CopyFrom(const Activity_SC_LostTreasure_Query& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_SC_LostTreasure_Query::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Activity_SC_LostTreasure_Query::Swap(Activity_SC_LostTreasure_Query* other) {
  if (other != this) {
    std::swap(res_, other->res_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_SC_LostTreasure_Query::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_SC_LostTreasure_Query_descriptor_;
  metadata.reflection = Activity_SC_LostTreasure_Query_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity_CS_LostTreasure_Fetch::kUuidFieldNumber;
#endif  // !_MSC_VER

Activity_CS_LostTreasure_Fetch::Activity_CS_LostTreasure_Fetch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_CS_LostTreasure_Fetch::InitAsDefaultInstance() {
}

Activity_CS_LostTreasure_Fetch::Activity_CS_LostTreasure_Fetch(const Activity_CS_LostTreasure_Fetch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_CS_LostTreasure_Fetch::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_CS_LostTreasure_Fetch::~Activity_CS_LostTreasure_Fetch() {
  SharedDtor();
}

void Activity_CS_LostTreasure_Fetch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity_CS_LostTreasure_Fetch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_CS_LostTreasure_Fetch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_CS_LostTreasure_Fetch_descriptor_;
}

const Activity_CS_LostTreasure_Fetch& Activity_CS_LostTreasure_Fetch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

Activity_CS_LostTreasure_Fetch* Activity_CS_LostTreasure_Fetch::default_instance_ = NULL;

Activity_CS_LostTreasure_Fetch* Activity_CS_LostTreasure_Fetch::New() const {
  return new Activity_CS_LostTreasure_Fetch;
}

void Activity_CS_LostTreasure_Fetch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uuid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_CS_LostTreasure_Fetch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity_CS_LostTreasure_Fetch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_CS_LostTreasure_Fetch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_CS_LostTreasure_Fetch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_CS_LostTreasure_Fetch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_CS_LostTreasure_Fetch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_CS_LostTreasure_Fetch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_CS_LostTreasure_Fetch::MergeFrom(const Activity_CS_LostTreasure_Fetch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_CS_LostTreasure_Fetch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_CS_LostTreasure_Fetch::CopyFrom(const Activity_CS_LostTreasure_Fetch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_CS_LostTreasure_Fetch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Activity_CS_LostTreasure_Fetch::Swap(Activity_CS_LostTreasure_Fetch* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_CS_LostTreasure_Fetch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_CS_LostTreasure_Fetch_descriptor_;
  metadata.reflection = Activity_CS_LostTreasure_Fetch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity_SC_LostTreasure_Fetch::kResFieldNumber;
#endif  // !_MSC_VER

Activity_SC_LostTreasure_Fetch::Activity_SC_LostTreasure_Fetch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_SC_LostTreasure_Fetch::InitAsDefaultInstance() {
}

Activity_SC_LostTreasure_Fetch::Activity_SC_LostTreasure_Fetch(const Activity_SC_LostTreasure_Fetch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_SC_LostTreasure_Fetch::SharedCtor() {
  _cached_size_ = 0;
  res_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_SC_LostTreasure_Fetch::~Activity_SC_LostTreasure_Fetch() {
  SharedDtor();
}

void Activity_SC_LostTreasure_Fetch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity_SC_LostTreasure_Fetch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_SC_LostTreasure_Fetch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_SC_LostTreasure_Fetch_descriptor_;
}

const Activity_SC_LostTreasure_Fetch& Activity_SC_LostTreasure_Fetch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

Activity_SC_LostTreasure_Fetch* Activity_SC_LostTreasure_Fetch::default_instance_ = NULL;

Activity_SC_LostTreasure_Fetch* Activity_SC_LostTreasure_Fetch::New() const {
  return new Activity_SC_LostTreasure_Fetch;
}

void Activity_SC_LostTreasure_Fetch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    res_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_SC_LostTreasure_Fetch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 res = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &res_)));
          set_has_res();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity_SC_LostTreasure_Fetch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 res = 1;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->res(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_SC_LostTreasure_Fetch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 res = 1;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->res(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_SC_LostTreasure_Fetch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 res = 1;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->res());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_SC_LostTreasure_Fetch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_SC_LostTreasure_Fetch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_SC_LostTreasure_Fetch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_SC_LostTreasure_Fetch::MergeFrom(const Activity_SC_LostTreasure_Fetch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_res()) {
      set_res(from.res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_SC_LostTreasure_Fetch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_SC_LostTreasure_Fetch::CopyFrom(const Activity_SC_LostTreasure_Fetch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_SC_LostTreasure_Fetch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Activity_SC_LostTreasure_Fetch::Swap(Activity_SC_LostTreasure_Fetch* other) {
  if (other != this) {
    std::swap(res_, other->res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_SC_LostTreasure_Fetch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_SC_LostTreasure_Fetch_descriptor_;
  metadata.reflection = Activity_SC_LostTreasure_Fetch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity_CS_LostTreasure_QueryRecord::kFromFieldNumber;
#endif  // !_MSC_VER

Activity_CS_LostTreasure_QueryRecord::Activity_CS_LostTreasure_QueryRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_CS_LostTreasure_QueryRecord::InitAsDefaultInstance() {
}

Activity_CS_LostTreasure_QueryRecord::Activity_CS_LostTreasure_QueryRecord(const Activity_CS_LostTreasure_QueryRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_CS_LostTreasure_QueryRecord::SharedCtor() {
  _cached_size_ = 0;
  from_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_CS_LostTreasure_QueryRecord::~Activity_CS_LostTreasure_QueryRecord() {
  SharedDtor();
}

void Activity_CS_LostTreasure_QueryRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity_CS_LostTreasure_QueryRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_CS_LostTreasure_QueryRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_CS_LostTreasure_QueryRecord_descriptor_;
}

const Activity_CS_LostTreasure_QueryRecord& Activity_CS_LostTreasure_QueryRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

Activity_CS_LostTreasure_QueryRecord* Activity_CS_LostTreasure_QueryRecord::default_instance_ = NULL;

Activity_CS_LostTreasure_QueryRecord* Activity_CS_LostTreasure_QueryRecord::New() const {
  return new Activity_CS_LostTreasure_QueryRecord;
}

void Activity_CS_LostTreasure_QueryRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    from_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_CS_LostTreasure_QueryRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 from = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_)));
          set_has_from();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity_CS_LostTreasure_QueryRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 from = 1;
  if (has_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->from(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_CS_LostTreasure_QueryRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 from = 1;
  if (has_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->from(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_CS_LostTreasure_QueryRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 from = 1;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_CS_LostTreasure_QueryRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_CS_LostTreasure_QueryRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_CS_LostTreasure_QueryRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_CS_LostTreasure_QueryRecord::MergeFrom(const Activity_CS_LostTreasure_QueryRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from()) {
      set_from(from.from());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_CS_LostTreasure_QueryRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_CS_LostTreasure_QueryRecord::CopyFrom(const Activity_CS_LostTreasure_QueryRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_CS_LostTreasure_QueryRecord::IsInitialized() const {

  return true;
}

void Activity_CS_LostTreasure_QueryRecord::Swap(Activity_CS_LostTreasure_QueryRecord* other) {
  if (other != this) {
    std::swap(from_, other->from_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_CS_LostTreasure_QueryRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_CS_LostTreasure_QueryRecord_descriptor_;
  metadata.reflection = Activity_CS_LostTreasure_QueryRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity_SC_LostTreasure_QueryRecord::kResFieldNumber;
const int Activity_SC_LostTreasure_QueryRecord::kRecordsFieldNumber;
#endif  // !_MSC_VER

Activity_SC_LostTreasure_QueryRecord::Activity_SC_LostTreasure_QueryRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_SC_LostTreasure_QueryRecord::InitAsDefaultInstance() {
}

Activity_SC_LostTreasure_QueryRecord::Activity_SC_LostTreasure_QueryRecord(const Activity_SC_LostTreasure_QueryRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_SC_LostTreasure_QueryRecord::SharedCtor() {
  _cached_size_ = 0;
  res_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_SC_LostTreasure_QueryRecord::~Activity_SC_LostTreasure_QueryRecord() {
  SharedDtor();
}

void Activity_SC_LostTreasure_QueryRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity_SC_LostTreasure_QueryRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_SC_LostTreasure_QueryRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_SC_LostTreasure_QueryRecord_descriptor_;
}

const Activity_SC_LostTreasure_QueryRecord& Activity_SC_LostTreasure_QueryRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

Activity_SC_LostTreasure_QueryRecord* Activity_SC_LostTreasure_QueryRecord::default_instance_ = NULL;

Activity_SC_LostTreasure_QueryRecord* Activity_SC_LostTreasure_QueryRecord::New() const {
  return new Activity_SC_LostTreasure_QueryRecord;
}

void Activity_SC_LostTreasure_QueryRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    res_ = 0;
  }
  records_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_SC_LostTreasure_QueryRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 res = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &res_)));
          set_has_res();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_records;
        break;
      }

      // repeated .proto.message.LostTreasureRecord records = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_records()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_records;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity_SC_LostTreasure_QueryRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 res = 1;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->res(), output);
  }

  // repeated .proto.message.LostTreasureRecord records = 2;
  for (int i = 0; i < this->records_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->records(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_SC_LostTreasure_QueryRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 res = 1;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->res(), target);
  }

  // repeated .proto.message.LostTreasureRecord records = 2;
  for (int i = 0; i < this->records_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->records(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_SC_LostTreasure_QueryRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 res = 1;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->res());
    }

  }
  // repeated .proto.message.LostTreasureRecord records = 2;
  total_size += 1 * this->records_size();
  for (int i = 0; i < this->records_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->records(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_SC_LostTreasure_QueryRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_SC_LostTreasure_QueryRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_SC_LostTreasure_QueryRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_SC_LostTreasure_QueryRecord::MergeFrom(const Activity_SC_LostTreasure_QueryRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  records_.MergeFrom(from.records_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_res()) {
      set_res(from.res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_SC_LostTreasure_QueryRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_SC_LostTreasure_QueryRecord::CopyFrom(const Activity_SC_LostTreasure_QueryRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_SC_LostTreasure_QueryRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < records_size(); i++) {
    if (!this->records(i).IsInitialized()) return false;
  }
  return true;
}

void Activity_SC_LostTreasure_QueryRecord::Swap(Activity_SC_LostTreasure_QueryRecord* other) {
  if (other != this) {
    std::swap(res_, other->res_);
    records_.Swap(&other->records_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_SC_LostTreasure_QueryRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_SC_LostTreasure_QueryRecord_descriptor_;
  metadata.reflection = Activity_SC_LostTreasure_QueryRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoneyTreeInfo::kMoneyTimesFieldNumber;
const int MoneyTreeInfo::kMoneyFreeTimesFieldNumber;
const int MoneyTreeInfo::kLastFreeTimeFieldNumber;
const int MoneyTreeInfo::kExpTimesFieldNumber;
#endif  // !_MSC_VER

MoneyTreeInfo::MoneyTreeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoneyTreeInfo::InitAsDefaultInstance() {
}

MoneyTreeInfo::MoneyTreeInfo(const MoneyTreeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoneyTreeInfo::SharedCtor() {
  _cached_size_ = 0;
  money_times_ = 0u;
  money_free_times_ = 0u;
  last_free_time_ = GOOGLE_ULONGLONG(0);
  exp_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneyTreeInfo::~MoneyTreeInfo() {
  SharedDtor();
}

void MoneyTreeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MoneyTreeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneyTreeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneyTreeInfo_descriptor_;
}

const MoneyTreeInfo& MoneyTreeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

MoneyTreeInfo* MoneyTreeInfo::default_instance_ = NULL;

MoneyTreeInfo* MoneyTreeInfo::New() const {
  return new MoneyTreeInfo;
}

void MoneyTreeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    money_times_ = 0u;
    money_free_times_ = 0u;
    last_free_time_ = GOOGLE_ULONGLONG(0);
    exp_times_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneyTreeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 money_times = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &money_times_)));
          set_has_money_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_money_free_times;
        break;
      }

      // optional uint32 money_free_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money_free_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &money_free_times_)));
          set_has_money_free_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_last_free_time;
        break;
      }

      // optional uint64 last_free_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_free_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_free_time_)));
          set_has_last_free_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exp_times;
        break;
      }

      // required uint32 exp_times = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_times_)));
          set_has_exp_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoneyTreeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 money_times = 1;
  if (has_money_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->money_times(), output);
  }

  // optional uint32 money_free_times = 2;
  if (has_money_free_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->money_free_times(), output);
  }

  // optional uint64 last_free_time = 3;
  if (has_last_free_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->last_free_time(), output);
  }

  // required uint32 exp_times = 4;
  if (has_exp_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->exp_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoneyTreeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 money_times = 1;
  if (has_money_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->money_times(), target);
  }

  // optional uint32 money_free_times = 2;
  if (has_money_free_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->money_free_times(), target);
  }

  // optional uint64 last_free_time = 3;
  if (has_last_free_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->last_free_time(), target);
  }

  // required uint32 exp_times = 4;
  if (has_exp_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->exp_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoneyTreeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 money_times = 1;
    if (has_money_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->money_times());
    }

    // optional uint32 money_free_times = 2;
    if (has_money_free_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->money_free_times());
    }

    // optional uint64 last_free_time = 3;
    if (has_last_free_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_free_time());
    }

    // required uint32 exp_times = 4;
    if (has_exp_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp_times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneyTreeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneyTreeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneyTreeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneyTreeInfo::MergeFrom(const MoneyTreeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_money_times()) {
      set_money_times(from.money_times());
    }
    if (from.has_money_free_times()) {
      set_money_free_times(from.money_free_times());
    }
    if (from.has_last_free_time()) {
      set_last_free_time(from.last_free_time());
    }
    if (from.has_exp_times()) {
      set_exp_times(from.exp_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneyTreeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneyTreeInfo::CopyFrom(const MoneyTreeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneyTreeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;

  return true;
}

void MoneyTreeInfo::Swap(MoneyTreeInfo* other) {
  if (other != this) {
    std::swap(money_times_, other->money_times_);
    std::swap(money_free_times_, other->money_free_times_);
    std::swap(last_free_time_, other->last_free_time_);
    std::swap(exp_times_, other->exp_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneyTreeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneyTreeInfo_descriptor_;
  metadata.reflection = MoneyTreeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Activity_CS_MoneyTree_Query::Activity_CS_MoneyTree_Query()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_CS_MoneyTree_Query::InitAsDefaultInstance() {
}

Activity_CS_MoneyTree_Query::Activity_CS_MoneyTree_Query(const Activity_CS_MoneyTree_Query& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_CS_MoneyTree_Query::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_CS_MoneyTree_Query::~Activity_CS_MoneyTree_Query() {
  SharedDtor();
}

void Activity_CS_MoneyTree_Query::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity_CS_MoneyTree_Query::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_CS_MoneyTree_Query::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_CS_MoneyTree_Query_descriptor_;
}

const Activity_CS_MoneyTree_Query& Activity_CS_MoneyTree_Query::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

Activity_CS_MoneyTree_Query* Activity_CS_MoneyTree_Query::default_instance_ = NULL;

Activity_CS_MoneyTree_Query* Activity_CS_MoneyTree_Query::New() const {
  return new Activity_CS_MoneyTree_Query;
}

void Activity_CS_MoneyTree_Query::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_CS_MoneyTree_Query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Activity_CS_MoneyTree_Query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_CS_MoneyTree_Query::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_CS_MoneyTree_Query::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_CS_MoneyTree_Query::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_CS_MoneyTree_Query* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_CS_MoneyTree_Query*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_CS_MoneyTree_Query::MergeFrom(const Activity_CS_MoneyTree_Query& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_CS_MoneyTree_Query::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_CS_MoneyTree_Query::CopyFrom(const Activity_CS_MoneyTree_Query& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_CS_MoneyTree_Query::IsInitialized() const {

  return true;
}

void Activity_CS_MoneyTree_Query::Swap(Activity_CS_MoneyTree_Query* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_CS_MoneyTree_Query::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_CS_MoneyTree_Query_descriptor_;
  metadata.reflection = Activity_CS_MoneyTree_Query_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity_SC_MoneyTree_Query::kResFieldNumber;
const int Activity_SC_MoneyTree_Query::kInfoFieldNumber;
#endif  // !_MSC_VER

Activity_SC_MoneyTree_Query::Activity_SC_MoneyTree_Query()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_SC_MoneyTree_Query::InitAsDefaultInstance() {
  info_ = const_cast< ::proto::message::MoneyTreeInfo*>(&::proto::message::MoneyTreeInfo::default_instance());
}

Activity_SC_MoneyTree_Query::Activity_SC_MoneyTree_Query(const Activity_SC_MoneyTree_Query& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_SC_MoneyTree_Query::SharedCtor() {
  _cached_size_ = 0;
  res_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_SC_MoneyTree_Query::~Activity_SC_MoneyTree_Query() {
  SharedDtor();
}

void Activity_SC_MoneyTree_Query::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void Activity_SC_MoneyTree_Query::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_SC_MoneyTree_Query::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_SC_MoneyTree_Query_descriptor_;
}

const Activity_SC_MoneyTree_Query& Activity_SC_MoneyTree_Query::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

Activity_SC_MoneyTree_Query* Activity_SC_MoneyTree_Query::default_instance_ = NULL;

Activity_SC_MoneyTree_Query* Activity_SC_MoneyTree_Query::New() const {
  return new Activity_SC_MoneyTree_Query;
}

void Activity_SC_MoneyTree_Query::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    res_ = 0;
    if (has_info()) {
      if (info_ != NULL) info_->::proto::message::MoneyTreeInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_SC_MoneyTree_Query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 res = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &res_)));
          set_has_res();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .proto.message.MoneyTreeInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity_SC_MoneyTree_Query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 res = 1;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->res(), output);
  }

  // optional .proto.message.MoneyTreeInfo info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_SC_MoneyTree_Query::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 res = 1;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->res(), target);
  }

  // optional .proto.message.MoneyTreeInfo info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_SC_MoneyTree_Query::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 res = 1;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->res());
    }

    // optional .proto.message.MoneyTreeInfo info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_SC_MoneyTree_Query::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_SC_MoneyTree_Query* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_SC_MoneyTree_Query*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_SC_MoneyTree_Query::MergeFrom(const Activity_SC_MoneyTree_Query& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_res()) {
      set_res(from.res());
    }
    if (from.has_info()) {
      mutable_info()->::proto::message::MoneyTreeInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_SC_MoneyTree_Query::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_SC_MoneyTree_Query::CopyFrom(const Activity_SC_MoneyTree_Query& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_SC_MoneyTree_Query::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void Activity_SC_MoneyTree_Query::Swap(Activity_SC_MoneyTree_Query* other) {
  if (other != this) {
    std::swap(res_, other->res_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_SC_MoneyTree_Query::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_SC_MoneyTree_Query_descriptor_;
  metadata.reflection = Activity_SC_MoneyTree_Query_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity_CS_MoneyTree_Do::kIdFieldNumber;
#endif  // !_MSC_VER

Activity_CS_MoneyTree_Do::Activity_CS_MoneyTree_Do()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_CS_MoneyTree_Do::InitAsDefaultInstance() {
}

Activity_CS_MoneyTree_Do::Activity_CS_MoneyTree_Do(const Activity_CS_MoneyTree_Do& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_CS_MoneyTree_Do::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_CS_MoneyTree_Do::~Activity_CS_MoneyTree_Do() {
  SharedDtor();
}

void Activity_CS_MoneyTree_Do::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity_CS_MoneyTree_Do::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_CS_MoneyTree_Do::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_CS_MoneyTree_Do_descriptor_;
}

const Activity_CS_MoneyTree_Do& Activity_CS_MoneyTree_Do::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

Activity_CS_MoneyTree_Do* Activity_CS_MoneyTree_Do::default_instance_ = NULL;

Activity_CS_MoneyTree_Do* Activity_CS_MoneyTree_Do::New() const {
  return new Activity_CS_MoneyTree_Do;
}

void Activity_CS_MoneyTree_Do::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_CS_MoneyTree_Do::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity_CS_MoneyTree_Do::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_CS_MoneyTree_Do::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_CS_MoneyTree_Do::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_CS_MoneyTree_Do::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_CS_MoneyTree_Do* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_CS_MoneyTree_Do*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_CS_MoneyTree_Do::MergeFrom(const Activity_CS_MoneyTree_Do& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_CS_MoneyTree_Do::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_CS_MoneyTree_Do::CopyFrom(const Activity_CS_MoneyTree_Do& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_CS_MoneyTree_Do::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Activity_CS_MoneyTree_Do::Swap(Activity_CS_MoneyTree_Do* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_CS_MoneyTree_Do::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_CS_MoneyTree_Do_descriptor_;
  metadata.reflection = Activity_CS_MoneyTree_Do_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity_SC_MoneyTree_Do::kResFieldNumber;
const int Activity_SC_MoneyTree_Do::kIdFieldNumber;
const int Activity_SC_MoneyTree_Do::kIndexFieldNumber;
#endif  // !_MSC_VER

Activity_SC_MoneyTree_Do::Activity_SC_MoneyTree_Do()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_SC_MoneyTree_Do::InitAsDefaultInstance() {
}

Activity_SC_MoneyTree_Do::Activity_SC_MoneyTree_Do(const Activity_SC_MoneyTree_Do& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_SC_MoneyTree_Do::SharedCtor() {
  _cached_size_ = 0;
  res_ = 0;
  id_ = 0u;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_SC_MoneyTree_Do::~Activity_SC_MoneyTree_Do() {
  SharedDtor();
}

void Activity_SC_MoneyTree_Do::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity_SC_MoneyTree_Do::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_SC_MoneyTree_Do::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_SC_MoneyTree_Do_descriptor_;
}

const Activity_SC_MoneyTree_Do& Activity_SC_MoneyTree_Do::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

Activity_SC_MoneyTree_Do* Activity_SC_MoneyTree_Do::default_instance_ = NULL;

Activity_SC_MoneyTree_Do* Activity_SC_MoneyTree_Do::New() const {
  return new Activity_SC_MoneyTree_Do;
}

void Activity_SC_MoneyTree_Do::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    res_ = 0;
    id_ = 0u;
    index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_SC_MoneyTree_Do::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 res = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &res_)));
          set_has_res();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // optional uint32 index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity_SC_MoneyTree_Do::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 res = 1;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->res(), output);
  }

  // required uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // optional uint32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_SC_MoneyTree_Do::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 res = 1;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->res(), target);
  }

  // required uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // optional uint32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_SC_MoneyTree_Do::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 res = 1;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->res());
    }

    // required uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_SC_MoneyTree_Do::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_SC_MoneyTree_Do* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_SC_MoneyTree_Do*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_SC_MoneyTree_Do::MergeFrom(const Activity_SC_MoneyTree_Do& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_res()) {
      set_res(from.res());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_SC_MoneyTree_Do::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_SC_MoneyTree_Do::CopyFrom(const Activity_SC_MoneyTree_Do& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_SC_MoneyTree_Do::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Activity_SC_MoneyTree_Do::Swap(Activity_SC_MoneyTree_Do* other) {
  if (other != this) {
    std::swap(res_, other->res_);
    std::swap(id_, other->id_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_SC_MoneyTree_Do::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_SC_MoneyTree_Do_descriptor_;
  metadata.reflection = Activity_SC_MoneyTree_Do_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DiscountStoreInfo::kRecordsFieldNumber;
#endif  // !_MSC_VER

DiscountStoreInfo::DiscountStoreInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DiscountStoreInfo::InitAsDefaultInstance() {
}

DiscountStoreInfo::DiscountStoreInfo(const DiscountStoreInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DiscountStoreInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DiscountStoreInfo::~DiscountStoreInfo() {
  SharedDtor();
}

void DiscountStoreInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DiscountStoreInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DiscountStoreInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiscountStoreInfo_descriptor_;
}

const DiscountStoreInfo& DiscountStoreInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

DiscountStoreInfo* DiscountStoreInfo::default_instance_ = NULL;

DiscountStoreInfo* DiscountStoreInfo::New() const {
  return new DiscountStoreInfo;
}

void DiscountStoreInfo::Clear() {
  records_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DiscountStoreInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.IDNum records = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_records()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_records;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DiscountStoreInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.IDNum records = 1;
  for (int i = 0; i < this->records_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->records(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DiscountStoreInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.IDNum records = 1;
  for (int i = 0; i < this->records_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->records(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DiscountStoreInfo::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.IDNum records = 1;
  total_size += 1 * this->records_size();
  for (int i = 0; i < this->records_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->records(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DiscountStoreInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DiscountStoreInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DiscountStoreInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DiscountStoreInfo::MergeFrom(const DiscountStoreInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  records_.MergeFrom(from.records_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DiscountStoreInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiscountStoreInfo::CopyFrom(const DiscountStoreInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiscountStoreInfo::IsInitialized() const {

  return true;
}

void DiscountStoreInfo::Swap(DiscountStoreInfo* other) {
  if (other != this) {
    records_.Swap(&other->records_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DiscountStoreInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DiscountStoreInfo_descriptor_;
  metadata.reflection = DiscountStoreInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Activity_CS_DiscountStore_Query::Activity_CS_DiscountStore_Query()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_CS_DiscountStore_Query::InitAsDefaultInstance() {
}

Activity_CS_DiscountStore_Query::Activity_CS_DiscountStore_Query(const Activity_CS_DiscountStore_Query& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_CS_DiscountStore_Query::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_CS_DiscountStore_Query::~Activity_CS_DiscountStore_Query() {
  SharedDtor();
}

void Activity_CS_DiscountStore_Query::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity_CS_DiscountStore_Query::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_CS_DiscountStore_Query::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_CS_DiscountStore_Query_descriptor_;
}

const Activity_CS_DiscountStore_Query& Activity_CS_DiscountStore_Query::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

Activity_CS_DiscountStore_Query* Activity_CS_DiscountStore_Query::default_instance_ = NULL;

Activity_CS_DiscountStore_Query* Activity_CS_DiscountStore_Query::New() const {
  return new Activity_CS_DiscountStore_Query;
}

void Activity_CS_DiscountStore_Query::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_CS_DiscountStore_Query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Activity_CS_DiscountStore_Query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_CS_DiscountStore_Query::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_CS_DiscountStore_Query::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_CS_DiscountStore_Query::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_CS_DiscountStore_Query* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_CS_DiscountStore_Query*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_CS_DiscountStore_Query::MergeFrom(const Activity_CS_DiscountStore_Query& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_CS_DiscountStore_Query::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_CS_DiscountStore_Query::CopyFrom(const Activity_CS_DiscountStore_Query& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_CS_DiscountStore_Query::IsInitialized() const {

  return true;
}

void Activity_CS_DiscountStore_Query::Swap(Activity_CS_DiscountStore_Query* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_CS_DiscountStore_Query::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_CS_DiscountStore_Query_descriptor_;
  metadata.reflection = Activity_CS_DiscountStore_Query_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity_SC_DiscountStore_Query::kResFieldNumber;
const int Activity_SC_DiscountStore_Query::kInfoFieldNumber;
#endif  // !_MSC_VER

Activity_SC_DiscountStore_Query::Activity_SC_DiscountStore_Query()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_SC_DiscountStore_Query::InitAsDefaultInstance() {
  info_ = const_cast< ::proto::message::DiscountStoreInfo*>(&::proto::message::DiscountStoreInfo::default_instance());
}

Activity_SC_DiscountStore_Query::Activity_SC_DiscountStore_Query(const Activity_SC_DiscountStore_Query& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_SC_DiscountStore_Query::SharedCtor() {
  _cached_size_ = 0;
  res_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_SC_DiscountStore_Query::~Activity_SC_DiscountStore_Query() {
  SharedDtor();
}

void Activity_SC_DiscountStore_Query::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void Activity_SC_DiscountStore_Query::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_SC_DiscountStore_Query::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_SC_DiscountStore_Query_descriptor_;
}

const Activity_SC_DiscountStore_Query& Activity_SC_DiscountStore_Query::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

Activity_SC_DiscountStore_Query* Activity_SC_DiscountStore_Query::default_instance_ = NULL;

Activity_SC_DiscountStore_Query* Activity_SC_DiscountStore_Query::New() const {
  return new Activity_SC_DiscountStore_Query;
}

void Activity_SC_DiscountStore_Query::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    res_ = 0;
    if (has_info()) {
      if (info_ != NULL) info_->::proto::message::DiscountStoreInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_SC_DiscountStore_Query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 res = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &res_)));
          set_has_res();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .proto.message.DiscountStoreInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity_SC_DiscountStore_Query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 res = 1;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->res(), output);
  }

  // optional .proto.message.DiscountStoreInfo info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_SC_DiscountStore_Query::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 res = 1;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->res(), target);
  }

  // optional .proto.message.DiscountStoreInfo info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_SC_DiscountStore_Query::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 res = 1;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->res());
    }

    // optional .proto.message.DiscountStoreInfo info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_SC_DiscountStore_Query::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_SC_DiscountStore_Query* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_SC_DiscountStore_Query*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_SC_DiscountStore_Query::MergeFrom(const Activity_SC_DiscountStore_Query& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_res()) {
      set_res(from.res());
    }
    if (from.has_info()) {
      mutable_info()->::proto::message::DiscountStoreInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_SC_DiscountStore_Query::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_SC_DiscountStore_Query::CopyFrom(const Activity_SC_DiscountStore_Query& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_SC_DiscountStore_Query::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Activity_SC_DiscountStore_Query::Swap(Activity_SC_DiscountStore_Query* other) {
  if (other != this) {
    std::swap(res_, other->res_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_SC_DiscountStore_Query::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_SC_DiscountStore_Query_descriptor_;
  metadata.reflection = Activity_SC_DiscountStore_Query_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity_CS_DiscountStore_Do::kIdFieldNumber;
#endif  // !_MSC_VER

Activity_CS_DiscountStore_Do::Activity_CS_DiscountStore_Do()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_CS_DiscountStore_Do::InitAsDefaultInstance() {
}

Activity_CS_DiscountStore_Do::Activity_CS_DiscountStore_Do(const Activity_CS_DiscountStore_Do& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_CS_DiscountStore_Do::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_CS_DiscountStore_Do::~Activity_CS_DiscountStore_Do() {
  SharedDtor();
}

void Activity_CS_DiscountStore_Do::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity_CS_DiscountStore_Do::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_CS_DiscountStore_Do::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_CS_DiscountStore_Do_descriptor_;
}

const Activity_CS_DiscountStore_Do& Activity_CS_DiscountStore_Do::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

Activity_CS_DiscountStore_Do* Activity_CS_DiscountStore_Do::default_instance_ = NULL;

Activity_CS_DiscountStore_Do* Activity_CS_DiscountStore_Do::New() const {
  return new Activity_CS_DiscountStore_Do;
}

void Activity_CS_DiscountStore_Do::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_CS_DiscountStore_Do::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity_CS_DiscountStore_Do::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_CS_DiscountStore_Do::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_CS_DiscountStore_Do::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_CS_DiscountStore_Do::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_CS_DiscountStore_Do* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_CS_DiscountStore_Do*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_CS_DiscountStore_Do::MergeFrom(const Activity_CS_DiscountStore_Do& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_CS_DiscountStore_Do::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_CS_DiscountStore_Do::CopyFrom(const Activity_CS_DiscountStore_Do& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_CS_DiscountStore_Do::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Activity_CS_DiscountStore_Do::Swap(Activity_CS_DiscountStore_Do* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_CS_DiscountStore_Do::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_CS_DiscountStore_Do_descriptor_;
  metadata.reflection = Activity_CS_DiscountStore_Do_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity_SC_DiscountStore_Do::kResFieldNumber;
#endif  // !_MSC_VER

Activity_SC_DiscountStore_Do::Activity_SC_DiscountStore_Do()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_SC_DiscountStore_Do::InitAsDefaultInstance() {
}

Activity_SC_DiscountStore_Do::Activity_SC_DiscountStore_Do(const Activity_SC_DiscountStore_Do& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_SC_DiscountStore_Do::SharedCtor() {
  _cached_size_ = 0;
  res_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_SC_DiscountStore_Do::~Activity_SC_DiscountStore_Do() {
  SharedDtor();
}

void Activity_SC_DiscountStore_Do::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity_SC_DiscountStore_Do::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_SC_DiscountStore_Do::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_SC_DiscountStore_Do_descriptor_;
}

const Activity_SC_DiscountStore_Do& Activity_SC_DiscountStore_Do::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketing_2eproto();
  return *default_instance_;
}

Activity_SC_DiscountStore_Do* Activity_SC_DiscountStore_Do::default_instance_ = NULL;

Activity_SC_DiscountStore_Do* Activity_SC_DiscountStore_Do::New() const {
  return new Activity_SC_DiscountStore_Do;
}

void Activity_SC_DiscountStore_Do::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    res_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_SC_DiscountStore_Do::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 res = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &res_)));
          set_has_res();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity_SC_DiscountStore_Do::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 res = 1;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->res(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_SC_DiscountStore_Do::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 res = 1;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->res(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_SC_DiscountStore_Do::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 res = 1;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->res());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_SC_DiscountStore_Do::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_SC_DiscountStore_Do* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_SC_DiscountStore_Do*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_SC_DiscountStore_Do::MergeFrom(const Activity_SC_DiscountStore_Do& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_res()) {
      set_res(from.res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_SC_DiscountStore_Do::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_SC_DiscountStore_Do::CopyFrom(const Activity_SC_DiscountStore_Do& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_SC_DiscountStore_Do::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Activity_SC_DiscountStore_Do::Swap(Activity_SC_DiscountStore_Do* other) {
  if (other != this) {
    std::swap(res_, other->res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_SC_DiscountStore_Do::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_SC_DiscountStore_Do_descriptor_;
  metadata.reflection = Activity_SC_DiscountStore_Do_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

// @@protoc_insertion_point(global_scope)
