// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pvp.proto

#ifndef PROTOBUF_pvp_2eproto__INCLUDED
#define PROTOBUF_pvp_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_pvp_2eproto();
void protobuf_AssignDesc_pvp_2eproto();
void protobuf_ShutdownFile_pvp_2eproto();

class PVPSyncPlayerInfo;
class PVP_CP_NoticeConnectOK;
class PVP_PC_SyncOnePlayer;
class PVP_PC_SyncMultiPlayer;
class PVP_PC_RemovePlayer;
class PVP_CP_LeaveAttack;
class PVP_PC_LoadBattle;
class PVP_CP_LoadBattleOk;
class PVPBuffer;
class PVP_PC_LoadPVPBuffer;
class PVP_PC_AddPVPBuffer;
class PVP_PC_DelPVPBuffer;
class PVP_CP_DoPVPBuffer;
class PVPFlagEvent;
class PVP_PC_LoadPVPFlagEvent;
class PVP_CP_CaptureFlag;
class PVP_PC_DelFlag;
class PVP_CP_SubmitFlag;
class PVP_PC_AddFlag;
class PVP_PC_DesFlag;
class PVP_PC_AttackEnd;
class KillRanking;
class PVP_PC_KillRanking;
class IntegralRanking;
class PVP_PC_IntegralRanking;
class PVP_PC_Dismiss;
class PVP_CP_PVPSurrender;
class PVP_PC_BattleBegin;

// ===================================================================

class PVPSyncPlayerInfo : public ::google::protobuf::Message {
 public:
  PVPSyncPlayerInfo();
  virtual ~PVPSyncPlayerInfo();

  PVPSyncPlayerInfo(const PVPSyncPlayerInfo& from);

  inline PVPSyncPlayerInfo& operator=(const PVPSyncPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PVPSyncPlayerInfo& default_instance();

  void Swap(PVPSyncPlayerInfo* other);

  // implements Message ----------------------------------------------

  PVPSyncPlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PVPSyncPlayerInfo& from);
  void MergeFrom(const PVPSyncPlayerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 nPlayerId = 1;
  inline bool has_nplayerid() const;
  inline void clear_nplayerid();
  static const int kNPlayerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 nplayerid() const;
  inline void set_nplayerid(::google::protobuf::uint32 value);

  // required .proto.message.Point3D pt = 2;
  inline bool has_pt() const;
  inline void clear_pt();
  static const int kPtFieldNumber = 2;
  inline const ::proto::message::Point3D& pt() const;
  inline ::proto::message::Point3D* mutable_pt();
  inline ::proto::message::Point3D* release_pt();
  inline void set_allocated_pt(::proto::message::Point3D* pt);

  // required float dir = 3;
  inline bool has_dir() const;
  inline void clear_dir();
  static const int kDirFieldNumber = 3;
  inline float dir() const;
  inline void set_dir(float value);

  // optional string Name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 MaxHP = 5;
  inline bool has_maxhp() const;
  inline void clear_maxhp();
  static const int kMaxHPFieldNumber = 5;
  inline ::google::protobuf::int32 maxhp() const;
  inline void set_maxhp(::google::protobuf::int32 value);

  // optional int32 CurHP = 6;
  inline bool has_curhp() const;
  inline void clear_curhp();
  static const int kCurHPFieldNumber = 6;
  inline ::google::protobuf::int32 curhp() const;
  inline void set_curhp(::google::protobuf::int32 value);

  // optional int32 Level = 7;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 7;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // repeated int32 Mod = 8;
  inline int mod_size() const;
  inline void clear_mod();
  static const int kModFieldNumber = 8;
  inline ::google::protobuf::int32 mod(int index) const;
  inline void set_mod(int index, ::google::protobuf::int32 value);
  inline void add_mod(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      mod() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_mod();

  // optional int32 career = 9;
  inline bool has_career() const;
  inline void clear_career();
  static const int kCareerFieldNumber = 9;
  inline ::google::protobuf::int32 career() const;
  inline void set_career(::google::protobuf::int32 value);

  // optional int32 Velocity = 10;
  inline bool has_velocity() const;
  inline void clear_velocity();
  static const int kVelocityFieldNumber = 10;
  inline ::google::protobuf::int32 velocity() const;
  inline void set_velocity(::google::protobuf::int32 value);

  // optional int32 camp = 11;
  inline bool has_camp() const;
  inline void clear_camp();
  static const int kCampFieldNumber = 11;
  inline ::google::protobuf::int32 camp() const;
  inline void set_camp(::google::protobuf::int32 value);

  // repeated uint32 bufferID = 12;
  inline int bufferid_size() const;
  inline void clear_bufferid();
  static const int kBufferIDFieldNumber = 12;
  inline ::google::protobuf::uint32 bufferid(int index) const;
  inline void set_bufferid(int index, ::google::protobuf::uint32 value);
  inline void add_bufferid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      bufferid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_bufferid();

  // optional uint64 Status = 13;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 13;
  inline ::google::protobuf::uint64 status() const;
  inline void set_status(::google::protobuf::uint64 value);

  // repeated int32 skill_id_list = 14;
  inline int skill_id_list_size() const;
  inline void clear_skill_id_list();
  static const int kSkillIdListFieldNumber = 14;
  inline ::google::protobuf::int32 skill_id_list(int index) const;
  inline void set_skill_id_list(int index, ::google::protobuf::int32 value);
  inline void add_skill_id_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      skill_id_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_skill_id_list();

  // optional int32 FlagCamp = 15;
  inline bool has_flagcamp() const;
  inline void clear_flagcamp();
  static const int kFlagCampFieldNumber = 15;
  inline ::google::protobuf::int32 flagcamp() const;
  inline void set_flagcamp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.PVPSyncPlayerInfo)
 private:
  inline void set_has_nplayerid();
  inline void clear_has_nplayerid();
  inline void set_has_pt();
  inline void clear_has_pt();
  inline void set_has_dir();
  inline void clear_has_dir();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_maxhp();
  inline void clear_has_maxhp();
  inline void set_has_curhp();
  inline void clear_has_curhp();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_career();
  inline void clear_has_career();
  inline void set_has_velocity();
  inline void clear_has_velocity();
  inline void set_has_camp();
  inline void clear_has_camp();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_flagcamp();
  inline void clear_has_flagcamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::message::Point3D* pt_;
  ::google::protobuf::uint32 nplayerid_;
  float dir_;
  ::std::string* name_;
  ::google::protobuf::int32 maxhp_;
  ::google::protobuf::int32 curhp_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > mod_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 career_;
  ::google::protobuf::int32 velocity_;
  ::google::protobuf::int32 camp_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > bufferid_;
  ::google::protobuf::uint64 status_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > skill_id_list_;
  ::google::protobuf::int32 flagcamp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  friend void  protobuf_AddDesc_pvp_2eproto();
  friend void protobuf_AssignDesc_pvp_2eproto();
  friend void protobuf_ShutdownFile_pvp_2eproto();

  void InitAsDefaultInstance();
  static PVPSyncPlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class PVP_CP_NoticeConnectOK : public ::google::protobuf::Message {
 public:
  PVP_CP_NoticeConnectOK();
  virtual ~PVP_CP_NoticeConnectOK();

  PVP_CP_NoticeConnectOK(const PVP_CP_NoticeConnectOK& from);

  inline PVP_CP_NoticeConnectOK& operator=(const PVP_CP_NoticeConnectOK& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PVP_CP_NoticeConnectOK& default_instance();

  void Swap(PVP_CP_NoticeConnectOK* other);

  // implements Message ----------------------------------------------

  PVP_CP_NoticeConnectOK* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PVP_CP_NoticeConnectOK& from);
  void MergeFrom(const PVP_CP_NoticeConnectOK& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 CharId = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.message.PVP_CP_NoticeConnectOK)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_pvp_2eproto();
  friend void protobuf_AssignDesc_pvp_2eproto();
  friend void protobuf_ShutdownFile_pvp_2eproto();

  void InitAsDefaultInstance();
  static PVP_CP_NoticeConnectOK* default_instance_;
};
// -------------------------------------------------------------------

class PVP_PC_SyncOnePlayer : public ::google::protobuf::Message {
 public:
  PVP_PC_SyncOnePlayer();
  virtual ~PVP_PC_SyncOnePlayer();

  PVP_PC_SyncOnePlayer(const PVP_PC_SyncOnePlayer& from);

  inline PVP_PC_SyncOnePlayer& operator=(const PVP_PC_SyncOnePlayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PVP_PC_SyncOnePlayer& default_instance();

  void Swap(PVP_PC_SyncOnePlayer* other);

  // implements Message ----------------------------------------------

  PVP_PC_SyncOnePlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PVP_PC_SyncOnePlayer& from);
  void MergeFrom(const PVP_PC_SyncOnePlayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .proto.message.PVPSyncPlayerInfo data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::proto::message::PVPSyncPlayerInfo& data() const;
  inline ::proto::message::PVPSyncPlayerInfo* mutable_data();
  inline ::proto::message::PVPSyncPlayerInfo* release_data();
  inline void set_allocated_data(::proto::message::PVPSyncPlayerInfo* data);

  // @@protoc_insertion_point(class_scope:proto.message.PVP_PC_SyncOnePlayer)
 private:
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::message::PVPSyncPlayerInfo* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_pvp_2eproto();
  friend void protobuf_AssignDesc_pvp_2eproto();
  friend void protobuf_ShutdownFile_pvp_2eproto();

  void InitAsDefaultInstance();
  static PVP_PC_SyncOnePlayer* default_instance_;
};
// -------------------------------------------------------------------

class PVP_PC_SyncMultiPlayer : public ::google::protobuf::Message {
 public:
  PVP_PC_SyncMultiPlayer();
  virtual ~PVP_PC_SyncMultiPlayer();

  PVP_PC_SyncMultiPlayer(const PVP_PC_SyncMultiPlayer& from);

  inline PVP_PC_SyncMultiPlayer& operator=(const PVP_PC_SyncMultiPlayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PVP_PC_SyncMultiPlayer& default_instance();

  void Swap(PVP_PC_SyncMultiPlayer* other);

  // implements Message ----------------------------------------------

  PVP_PC_SyncMultiPlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PVP_PC_SyncMultiPlayer& from);
  void MergeFrom(const PVP_PC_SyncMultiPlayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.message.PVPSyncPlayerInfo data_list = 1;
  inline int data_list_size() const;
  inline void clear_data_list();
  static const int kDataListFieldNumber = 1;
  inline const ::proto::message::PVPSyncPlayerInfo& data_list(int index) const;
  inline ::proto::message::PVPSyncPlayerInfo* mutable_data_list(int index);
  inline ::proto::message::PVPSyncPlayerInfo* add_data_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::PVPSyncPlayerInfo >&
      data_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::PVPSyncPlayerInfo >*
      mutable_data_list();

  // @@protoc_insertion_point(class_scope:proto.message.PVP_PC_SyncMultiPlayer)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::message::PVPSyncPlayerInfo > data_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_pvp_2eproto();
  friend void protobuf_AssignDesc_pvp_2eproto();
  friend void protobuf_ShutdownFile_pvp_2eproto();

  void InitAsDefaultInstance();
  static PVP_PC_SyncMultiPlayer* default_instance_;
};
// -------------------------------------------------------------------

class PVP_PC_RemovePlayer : public ::google::protobuf::Message {
 public:
  PVP_PC_RemovePlayer();
  virtual ~PVP_PC_RemovePlayer();

  PVP_PC_RemovePlayer(const PVP_PC_RemovePlayer& from);

  inline PVP_PC_RemovePlayer& operator=(const PVP_PC_RemovePlayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PVP_PC_RemovePlayer& default_instance();

  void Swap(PVP_PC_RemovePlayer* other);

  // implements Message ----------------------------------------------

  PVP_PC_RemovePlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PVP_PC_RemovePlayer& from);
  void MergeFrom(const PVP_PC_RemovePlayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 PlyId = 1;
  inline bool has_plyid() const;
  inline void clear_plyid();
  static const int kPlyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 plyid() const;
  inline void set_plyid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.PVP_PC_RemovePlayer)
 private:
  inline void set_has_plyid();
  inline void clear_has_plyid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 plyid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_pvp_2eproto();
  friend void protobuf_AssignDesc_pvp_2eproto();
  friend void protobuf_ShutdownFile_pvp_2eproto();

  void InitAsDefaultInstance();
  static PVP_PC_RemovePlayer* default_instance_;
};
// -------------------------------------------------------------------

class PVP_CP_LeaveAttack : public ::google::protobuf::Message {
 public:
  PVP_CP_LeaveAttack();
  virtual ~PVP_CP_LeaveAttack();

  PVP_CP_LeaveAttack(const PVP_CP_LeaveAttack& from);

  inline PVP_CP_LeaveAttack& operator=(const PVP_CP_LeaveAttack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PVP_CP_LeaveAttack& default_instance();

  void Swap(PVP_CP_LeaveAttack* other);

  // implements Message ----------------------------------------------

  PVP_CP_LeaveAttack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PVP_CP_LeaveAttack& from);
  void MergeFrom(const PVP_CP_LeaveAttack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.message.PVP_CP_LeaveAttack)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_pvp_2eproto();
  friend void protobuf_AssignDesc_pvp_2eproto();
  friend void protobuf_ShutdownFile_pvp_2eproto();

  void InitAsDefaultInstance();
  static PVP_CP_LeaveAttack* default_instance_;
};
// -------------------------------------------------------------------

class PVP_PC_LoadBattle : public ::google::protobuf::Message {
 public:
  PVP_PC_LoadBattle();
  virtual ~PVP_PC_LoadBattle();

  PVP_PC_LoadBattle(const PVP_PC_LoadBattle& from);

  inline PVP_PC_LoadBattle& operator=(const PVP_PC_LoadBattle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PVP_PC_LoadBattle& default_instance();

  void Swap(PVP_PC_LoadBattle* other);

  // implements Message ----------------------------------------------

  PVP_PC_LoadBattle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PVP_PC_LoadBattle& from);
  void MergeFrom(const PVP_PC_LoadBattle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 player_id() const;
  inline void set_player_id(::google::protobuf::uint32 value);

  // required uint32 BattleId = 2;
  inline bool has_battleid() const;
  inline void clear_battleid();
  static const int kBattleIdFieldNumber = 2;
  inline ::google::protobuf::uint32 battleid() const;
  inline void set_battleid(::google::protobuf::uint32 value);

  // optional .proto.message.Point3D pt = 3;
  inline bool has_pt() const;
  inline void clear_pt();
  static const int kPtFieldNumber = 3;
  inline const ::proto::message::Point3D& pt() const;
  inline ::proto::message::Point3D* mutable_pt();
  inline ::proto::message::Point3D* release_pt();
  inline void set_allocated_pt(::proto::message::Point3D* pt);

  // optional float Dir = 4;
  inline bool has_dir() const;
  inline void clear_dir();
  static const int kDirFieldNumber = 4;
  inline float dir() const;
  inline void set_dir(float value);

  // optional int32 camp = 5;
  inline bool has_camp() const;
  inline void clear_camp();
  static const int kCampFieldNumber = 5;
  inline ::google::protobuf::int32 camp() const;
  inline void set_camp(::google::protobuf::int32 value);

  // optional int32 Layer = 6;
  inline bool has_layer() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 6;
  inline ::google::protobuf::int32 layer() const;
  inline void set_layer(::google::protobuf::int32 value);

  // optional int32 SurplusTime = 7;
  inline bool has_surplustime() const;
  inline void clear_surplustime();
  static const int kSurplusTimeFieldNumber = 7;
  inline ::google::protobuf::int32 surplustime() const;
  inline void set_surplustime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.PVP_PC_LoadBattle)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_battleid();
  inline void clear_has_battleid();
  inline void set_has_pt();
  inline void clear_has_pt();
  inline void set_has_dir();
  inline void clear_has_dir();
  inline void set_has_camp();
  inline void clear_has_camp();
  inline void set_has_layer();
  inline void clear_has_layer();
  inline void set_has_surplustime();
  inline void clear_has_surplustime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 player_id_;
  ::google::protobuf::uint32 battleid_;
  ::proto::message::Point3D* pt_;
  float dir_;
  ::google::protobuf::int32 camp_;
  ::google::protobuf::int32 layer_;
  ::google::protobuf::int32 surplustime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_pvp_2eproto();
  friend void protobuf_AssignDesc_pvp_2eproto();
  friend void protobuf_ShutdownFile_pvp_2eproto();

  void InitAsDefaultInstance();
  static PVP_PC_LoadBattle* default_instance_;
};
// -------------------------------------------------------------------

class PVP_CP_LoadBattleOk : public ::google::protobuf::Message {
 public:
  PVP_CP_LoadBattleOk();
  virtual ~PVP_CP_LoadBattleOk();

  PVP_CP_LoadBattleOk(const PVP_CP_LoadBattleOk& from);

  inline PVP_CP_LoadBattleOk& operator=(const PVP_CP_LoadBattleOk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PVP_CP_LoadBattleOk& default_instance();

  void Swap(PVP_CP_LoadBattleOk* other);

  // implements Message ----------------------------------------------

  PVP_CP_LoadBattleOk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PVP_CP_LoadBattleOk& from);
  void MergeFrom(const PVP_CP_LoadBattleOk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.message.PVP_CP_LoadBattleOk)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_pvp_2eproto();
  friend void protobuf_AssignDesc_pvp_2eproto();
  friend void protobuf_ShutdownFile_pvp_2eproto();

  void InitAsDefaultInstance();
  static PVP_CP_LoadBattleOk* default_instance_;
};
// -------------------------------------------------------------------

class PVPBuffer : public ::google::protobuf::Message {
 public:
  PVPBuffer();
  virtual ~PVPBuffer();

  PVPBuffer(const PVPBuffer& from);

  inline PVPBuffer& operator=(const PVPBuffer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PVPBuffer& default_instance();

  void Swap(PVPBuffer* other);

  // implements Message ----------------------------------------------

  PVPBuffer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PVPBuffer& from);
  void MergeFrom(const PVPBuffer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 EventId = 1;
  inline bool has_eventid() const;
  inline void clear_eventid();
  static const int kEventIdFieldNumber = 1;
  inline ::google::protobuf::uint32 eventid() const;
  inline void set_eventid(::google::protobuf::uint32 value);

  // optional .proto.message.Point3D pt = 2;
  inline bool has_pt() const;
  inline void clear_pt();
  static const int kPtFieldNumber = 2;
  inline const ::proto::message::Point3D& pt() const;
  inline ::proto::message::Point3D* mutable_pt();
  inline ::proto::message::Point3D* release_pt();
  inline void set_allocated_pt(::proto::message::Point3D* pt);

  // optional float Dir = 3;
  inline bool has_dir() const;
  inline void clear_dir();
  static const int kDirFieldNumber = 3;
  inline float dir() const;
  inline void set_dir(float value);

  // optional float Radius = 4;
  inline bool has_radius() const;
  inline void clear_radius();
  static const int kRadiusFieldNumber = 4;
  inline float radius() const;
  inline void set_radius(float value);

  // optional int32 nBufferId = 5;
  inline bool has_nbufferid() const;
  inline void clear_nbufferid();
  static const int kNBufferIdFieldNumber = 5;
  inline ::google::protobuf::int32 nbufferid() const;
  inline void set_nbufferid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.PVPBuffer)
 private:
  inline void set_has_eventid();
  inline void clear_has_eventid();
  inline void set_has_pt();
  inline void clear_has_pt();
  inline void set_has_dir();
  inline void clear_has_dir();
  inline void set_has_radius();
  inline void clear_has_radius();
  inline void set_has_nbufferid();
  inline void clear_has_nbufferid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::message::Point3D* pt_;
  ::google::protobuf::uint32 eventid_;
  float dir_;
  float radius_;
  ::google::protobuf::int32 nbufferid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_pvp_2eproto();
  friend void protobuf_AssignDesc_pvp_2eproto();
  friend void protobuf_ShutdownFile_pvp_2eproto();

  void InitAsDefaultInstance();
  static PVPBuffer* default_instance_;
};
// -------------------------------------------------------------------

class PVP_PC_LoadPVPBuffer : public ::google::protobuf::Message {
 public:
  PVP_PC_LoadPVPBuffer();
  virtual ~PVP_PC_LoadPVPBuffer();

  PVP_PC_LoadPVPBuffer(const PVP_PC_LoadPVPBuffer& from);

  inline PVP_PC_LoadPVPBuffer& operator=(const PVP_PC_LoadPVPBuffer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PVP_PC_LoadPVPBuffer& default_instance();

  void Swap(PVP_PC_LoadPVPBuffer* other);

  // implements Message ----------------------------------------------

  PVP_PC_LoadPVPBuffer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PVP_PC_LoadPVPBuffer& from);
  void MergeFrom(const PVP_PC_LoadPVPBuffer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.message.PVPBuffer event_list = 1;
  inline int event_list_size() const;
  inline void clear_event_list();
  static const int kEventListFieldNumber = 1;
  inline const ::proto::message::PVPBuffer& event_list(int index) const;
  inline ::proto::message::PVPBuffer* mutable_event_list(int index);
  inline ::proto::message::PVPBuffer* add_event_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::PVPBuffer >&
      event_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::PVPBuffer >*
      mutable_event_list();

  // @@protoc_insertion_point(class_scope:proto.message.PVP_PC_LoadPVPBuffer)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::message::PVPBuffer > event_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_pvp_2eproto();
  friend void protobuf_AssignDesc_pvp_2eproto();
  friend void protobuf_ShutdownFile_pvp_2eproto();

  void InitAsDefaultInstance();
  static PVP_PC_LoadPVPBuffer* default_instance_;
};
// -------------------------------------------------------------------

class PVP_PC_AddPVPBuffer : public ::google::protobuf::Message {
 public:
  PVP_PC_AddPVPBuffer();
  virtual ~PVP_PC_AddPVPBuffer();

  PVP_PC_AddPVPBuffer(const PVP_PC_AddPVPBuffer& from);

  inline PVP_PC_AddPVPBuffer& operator=(const PVP_PC_AddPVPBuffer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PVP_PC_AddPVPBuffer& default_instance();

  void Swap(PVP_PC_AddPVPBuffer* other);

  // implements Message ----------------------------------------------

  PVP_PC_AddPVPBuffer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PVP_PC_AddPVPBuffer& from);
  void MergeFrom(const PVP_PC_AddPVPBuffer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .proto.message.PVPBuffer event = 1;
  inline bool has_event() const;
  inline void clear_event();
  static const int kEventFieldNumber = 1;
  inline const ::proto::message::PVPBuffer& event() const;
  inline ::proto::message::PVPBuffer* mutable_event();
  inline ::proto::message::PVPBuffer* release_event();
  inline void set_allocated_event(::proto::message::PVPBuffer* event);

  // @@protoc_insertion_point(class_scope:proto.message.PVP_PC_AddPVPBuffer)
 private:
  inline void set_has_event();
  inline void clear_has_event();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::message::PVPBuffer* event_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_pvp_2eproto();
  friend void protobuf_AssignDesc_pvp_2eproto();
  friend void protobuf_ShutdownFile_pvp_2eproto();

  void InitAsDefaultInstance();
  static PVP_PC_AddPVPBuffer* default_instance_;
};
// -------------------------------------------------------------------

class PVP_PC_DelPVPBuffer : public ::google::protobuf::Message {
 public:
  PVP_PC_DelPVPBuffer();
  virtual ~PVP_PC_DelPVPBuffer();

  PVP_PC_DelPVPBuffer(const PVP_PC_DelPVPBuffer& from);

  inline PVP_PC_DelPVPBuffer& operator=(const PVP_PC_DelPVPBuffer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PVP_PC_DelPVPBuffer& default_instance();

  void Swap(PVP_PC_DelPVPBuffer* other);

  // implements Message ----------------------------------------------

  PVP_PC_DelPVPBuffer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PVP_PC_DelPVPBuffer& from);
  void MergeFrom(const PVP_PC_DelPVPBuffer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 EventId = 1;
  inline bool has_eventid() const;
  inline void clear_eventid();
  static const int kEventIdFieldNumber = 1;
  inline ::google::protobuf::uint32 eventid() const;
  inline void set_eventid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.PVP_PC_DelPVPBuffer)
 private:
  inline void set_has_eventid();
  inline void clear_has_eventid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 eventid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_pvp_2eproto();
  friend void protobuf_AssignDesc_pvp_2eproto();
  friend void protobuf_ShutdownFile_pvp_2eproto();

  void InitAsDefaultInstance();
  static PVP_PC_DelPVPBuffer* default_instance_;
};
// -------------------------------------------------------------------

class PVP_CP_DoPVPBuffer : public ::google::protobuf::Message {
 public:
  PVP_CP_DoPVPBuffer();
  virtual ~PVP_CP_DoPVPBuffer();

  PVP_CP_DoPVPBuffer(const PVP_CP_DoPVPBuffer& from);

  inline PVP_CP_DoPVPBuffer& operator=(const PVP_CP_DoPVPBuffer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PVP_CP_DoPVPBuffer& default_instance();

  void Swap(PVP_CP_DoPVPBuffer* other);

  // implements Message ----------------------------------------------

  PVP_CP_DoPVPBuffer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PVP_CP_DoPVPBuffer& from);
  void MergeFrom(const PVP_CP_DoPVPBuffer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 EventId = 1;
  inline bool has_eventid() const;
  inline void clear_eventid();
  static const int kEventIdFieldNumber = 1;
  inline ::google::protobuf::uint32 eventid() const;
  inline void set_eventid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.PVP_CP_DoPVPBuffer)
 private:
  inline void set_has_eventid();
  inline void clear_has_eventid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 eventid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_pvp_2eproto();
  friend void protobuf_AssignDesc_pvp_2eproto();
  friend void protobuf_ShutdownFile_pvp_2eproto();

  void InitAsDefaultInstance();
  static PVP_CP_DoPVPBuffer* default_instance_;
};
// -------------------------------------------------------------------

class PVPFlagEvent : public ::google::protobuf::Message {
 public:
  PVPFlagEvent();
  virtual ~PVPFlagEvent();

  PVPFlagEvent(const PVPFlagEvent& from);

  inline PVPFlagEvent& operator=(const PVPFlagEvent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PVPFlagEvent& default_instance();

  void Swap(PVPFlagEvent* other);

  // implements Message ----------------------------------------------

  PVPFlagEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PVPFlagEvent& from);
  void MergeFrom(const PVPFlagEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 EventId = 1;
  inline bool has_eventid() const;
  inline void clear_eventid();
  static const int kEventIdFieldNumber = 1;
  inline ::google::protobuf::uint32 eventid() const;
  inline void set_eventid(::google::protobuf::uint32 value);

  // optional .proto.message.Point3D pt = 2;
  inline bool has_pt() const;
  inline void clear_pt();
  static const int kPtFieldNumber = 2;
  inline const ::proto::message::Point3D& pt() const;
  inline ::proto::message::Point3D* mutable_pt();
  inline ::proto::message::Point3D* release_pt();
  inline void set_allocated_pt(::proto::message::Point3D* pt);

  // optional float Dir = 3;
  inline bool has_dir() const;
  inline void clear_dir();
  static const int kDirFieldNumber = 3;
  inline float dir() const;
  inline void set_dir(float value);

  // optional float Radius = 4;
  inline bool has_radius() const;
  inline void clear_radius();
  static const int kRadiusFieldNumber = 4;
  inline float radius() const;
  inline void set_radius(float value);

  // optional int32 nBufferId = 5;
  inline bool has_nbufferid() const;
  inline void clear_nbufferid();
  static const int kNBufferIdFieldNumber = 5;
  inline ::google::protobuf::int32 nbufferid() const;
  inline void set_nbufferid(::google::protobuf::int32 value);

  // optional int32 camp = 6;
  inline bool has_camp() const;
  inline void clear_camp();
  static const int kCampFieldNumber = 6;
  inline ::google::protobuf::int32 camp() const;
  inline void set_camp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.PVPFlagEvent)
 private:
  inline void set_has_eventid();
  inline void clear_has_eventid();
  inline void set_has_pt();
  inline void clear_has_pt();
  inline void set_has_dir();
  inline void clear_has_dir();
  inline void set_has_radius();
  inline void clear_has_radius();
  inline void set_has_nbufferid();
  inline void clear_has_nbufferid();
  inline void set_has_camp();
  inline void clear_has_camp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::message::Point3D* pt_;
  ::google::protobuf::uint32 eventid_;
  float dir_;
  float radius_;
  ::google::protobuf::int32 nbufferid_;
  ::google::protobuf::int32 camp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_pvp_2eproto();
  friend void protobuf_AssignDesc_pvp_2eproto();
  friend void protobuf_ShutdownFile_pvp_2eproto();

  void InitAsDefaultInstance();
  static PVPFlagEvent* default_instance_;
};
// -------------------------------------------------------------------

class PVP_PC_LoadPVPFlagEvent : public ::google::protobuf::Message {
 public:
  PVP_PC_LoadPVPFlagEvent();
  virtual ~PVP_PC_LoadPVPFlagEvent();

  PVP_PC_LoadPVPFlagEvent(const PVP_PC_LoadPVPFlagEvent& from);

  inline PVP_PC_LoadPVPFlagEvent& operator=(const PVP_PC_LoadPVPFlagEvent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PVP_PC_LoadPVPFlagEvent& default_instance();

  void Swap(PVP_PC_LoadPVPFlagEvent* other);

  // implements Message ----------------------------------------------

  PVP_PC_LoadPVPFlagEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PVP_PC_LoadPVPFlagEvent& from);
  void MergeFrom(const PVP_PC_LoadPVPFlagEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.message.PVPFlagEvent flag_list = 1;
  inline int flag_list_size() const;
  inline void clear_flag_list();
  static const int kFlagListFieldNumber = 1;
  inline const ::proto::message::PVPFlagEvent& flag_list(int index) const;
  inline ::proto::message::PVPFlagEvent* mutable_flag_list(int index);
  inline ::proto::message::PVPFlagEvent* add_flag_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::PVPFlagEvent >&
      flag_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::PVPFlagEvent >*
      mutable_flag_list();

  // @@protoc_insertion_point(class_scope:proto.message.PVP_PC_LoadPVPFlagEvent)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::message::PVPFlagEvent > flag_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_pvp_2eproto();
  friend void protobuf_AssignDesc_pvp_2eproto();
  friend void protobuf_ShutdownFile_pvp_2eproto();

  void InitAsDefaultInstance();
  static PVP_PC_LoadPVPFlagEvent* default_instance_;
};
// -------------------------------------------------------------------

class PVP_CP_CaptureFlag : public ::google::protobuf::Message {
 public:
  PVP_CP_CaptureFlag();
  virtual ~PVP_CP_CaptureFlag();

  PVP_CP_CaptureFlag(const PVP_CP_CaptureFlag& from);

  inline PVP_CP_CaptureFlag& operator=(const PVP_CP_CaptureFlag& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PVP_CP_CaptureFlag& default_instance();

  void Swap(PVP_CP_CaptureFlag* other);

  // implements Message ----------------------------------------------

  PVP_CP_CaptureFlag* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PVP_CP_CaptureFlag& from);
  void MergeFrom(const PVP_CP_CaptureFlag& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 EventId = 1;
  inline bool has_eventid() const;
  inline void clear_eventid();
  static const int kEventIdFieldNumber = 1;
  inline ::google::protobuf::uint32 eventid() const;
  inline void set_eventid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.PVP_CP_CaptureFlag)
 private:
  inline void set_has_eventid();
  inline void clear_has_eventid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 eventid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_pvp_2eproto();
  friend void protobuf_AssignDesc_pvp_2eproto();
  friend void protobuf_ShutdownFile_pvp_2eproto();

  void InitAsDefaultInstance();
  static PVP_CP_CaptureFlag* default_instance_;
};
// -------------------------------------------------------------------

class PVP_PC_DelFlag : public ::google::protobuf::Message {
 public:
  PVP_PC_DelFlag();
  virtual ~PVP_PC_DelFlag();

  PVP_PC_DelFlag(const PVP_PC_DelFlag& from);

  inline PVP_PC_DelFlag& operator=(const PVP_PC_DelFlag& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PVP_PC_DelFlag& default_instance();

  void Swap(PVP_PC_DelFlag* other);

  // implements Message ----------------------------------------------

  PVP_PC_DelFlag* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PVP_PC_DelFlag& from);
  void MergeFrom(const PVP_PC_DelFlag& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 EventId = 1;
  inline bool has_eventid() const;
  inline void clear_eventid();
  static const int kEventIdFieldNumber = 1;
  inline ::google::protobuf::uint32 eventid() const;
  inline void set_eventid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.PVP_PC_DelFlag)
 private:
  inline void set_has_eventid();
  inline void clear_has_eventid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 eventid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_pvp_2eproto();
  friend void protobuf_AssignDesc_pvp_2eproto();
  friend void protobuf_ShutdownFile_pvp_2eproto();

  void InitAsDefaultInstance();
  static PVP_PC_DelFlag* default_instance_;
};
// -------------------------------------------------------------------

class PVP_CP_SubmitFlag : public ::google::protobuf::Message {
 public:
  PVP_CP_SubmitFlag();
  virtual ~PVP_CP_SubmitFlag();

  PVP_CP_SubmitFlag(const PVP_CP_SubmitFlag& from);

  inline PVP_CP_SubmitFlag& operator=(const PVP_CP_SubmitFlag& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PVP_CP_SubmitFlag& default_instance();

  void Swap(PVP_CP_SubmitFlag* other);

  // implements Message ----------------------------------------------

  PVP_CP_SubmitFlag* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PVP_CP_SubmitFlag& from);
  void MergeFrom(const PVP_CP_SubmitFlag& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 EventId = 1;
  inline bool has_eventid() const;
  inline void clear_eventid();
  static const int kEventIdFieldNumber = 1;
  inline ::google::protobuf::uint32 eventid() const;
  inline void set_eventid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.PVP_CP_SubmitFlag)
 private:
  inline void set_has_eventid();
  inline void clear_has_eventid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 eventid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_pvp_2eproto();
  friend void protobuf_AssignDesc_pvp_2eproto();
  friend void protobuf_ShutdownFile_pvp_2eproto();

  void InitAsDefaultInstance();
  static PVP_CP_SubmitFlag* default_instance_;
};
// -------------------------------------------------------------------

class PVP_PC_AddFlag : public ::google::protobuf::Message {
 public:
  PVP_PC_AddFlag();
  virtual ~PVP_PC_AddFlag();

  PVP_PC_AddFlag(const PVP_PC_AddFlag& from);

  inline PVP_PC_AddFlag& operator=(const PVP_PC_AddFlag& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PVP_PC_AddFlag& default_instance();

  void Swap(PVP_PC_AddFlag* other);

  // implements Message ----------------------------------------------

  PVP_PC_AddFlag* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PVP_PC_AddFlag& from);
  void MergeFrom(const PVP_PC_AddFlag& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .proto.message.PVPFlagEvent flag = 1;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 1;
  inline const ::proto::message::PVPFlagEvent& flag() const;
  inline ::proto::message::PVPFlagEvent* mutable_flag();
  inline ::proto::message::PVPFlagEvent* release_flag();
  inline void set_allocated_flag(::proto::message::PVPFlagEvent* flag);

  // @@protoc_insertion_point(class_scope:proto.message.PVP_PC_AddFlag)
 private:
  inline void set_has_flag();
  inline void clear_has_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::message::PVPFlagEvent* flag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_pvp_2eproto();
  friend void protobuf_AssignDesc_pvp_2eproto();
  friend void protobuf_ShutdownFile_pvp_2eproto();

  void InitAsDefaultInstance();
  static PVP_PC_AddFlag* default_instance_;
};
// -------------------------------------------------------------------

class PVP_PC_DesFlag : public ::google::protobuf::Message {
 public:
  PVP_PC_DesFlag();
  virtual ~PVP_PC_DesFlag();

  PVP_PC_DesFlag(const PVP_PC_DesFlag& from);

  inline PVP_PC_DesFlag& operator=(const PVP_PC_DesFlag& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PVP_PC_DesFlag& default_instance();

  void Swap(PVP_PC_DesFlag* other);

  // implements Message ----------------------------------------------

  PVP_PC_DesFlag* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PVP_PC_DesFlag& from);
  void MergeFrom(const PVP_PC_DesFlag& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.message.Point3D pt = 1;
  inline bool has_pt() const;
  inline void clear_pt();
  static const int kPtFieldNumber = 1;
  inline const ::proto::message::Point3D& pt() const;
  inline ::proto::message::Point3D* mutable_pt();
  inline ::proto::message::Point3D* release_pt();
  inline void set_allocated_pt(::proto::message::Point3D* pt);

  // optional float Radius = 2;
  inline bool has_radius() const;
  inline void clear_radius();
  static const int kRadiusFieldNumber = 2;
  inline float radius() const;
  inline void set_radius(float value);

  // @@protoc_insertion_point(class_scope:proto.message.PVP_PC_DesFlag)
 private:
  inline void set_has_pt();
  inline void clear_has_pt();
  inline void set_has_radius();
  inline void clear_has_radius();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::message::Point3D* pt_;
  float radius_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_pvp_2eproto();
  friend void protobuf_AssignDesc_pvp_2eproto();
  friend void protobuf_ShutdownFile_pvp_2eproto();

  void InitAsDefaultInstance();
  static PVP_PC_DesFlag* default_instance_;
};
// -------------------------------------------------------------------

class PVP_PC_AttackEnd : public ::google::protobuf::Message {
 public:
  PVP_PC_AttackEnd();
  virtual ~PVP_PC_AttackEnd();

  PVP_PC_AttackEnd(const PVP_PC_AttackEnd& from);

  inline PVP_PC_AttackEnd& operator=(const PVP_PC_AttackEnd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PVP_PC_AttackEnd& default_instance();

  void Swap(PVP_PC_AttackEnd* other);

  // implements Message ----------------------------------------------

  PVP_PC_AttackEnd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PVP_PC_AttackEnd& from);
  void MergeFrom(const PVP_PC_AttackEnd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 winCmap = 1;
  inline bool has_wincmap() const;
  inline void clear_wincmap();
  static const int kWinCmapFieldNumber = 1;
  inline ::google::protobuf::int32 wincmap() const;
  inline void set_wincmap(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.PVP_PC_AttackEnd)
 private:
  inline void set_has_wincmap();
  inline void clear_has_wincmap();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 wincmap_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_pvp_2eproto();
  friend void protobuf_AssignDesc_pvp_2eproto();
  friend void protobuf_ShutdownFile_pvp_2eproto();

  void InitAsDefaultInstance();
  static PVP_PC_AttackEnd* default_instance_;
};
// -------------------------------------------------------------------

class KillRanking : public ::google::protobuf::Message {
 public:
  KillRanking();
  virtual ~KillRanking();

  KillRanking(const KillRanking& from);

  inline KillRanking& operator=(const KillRanking& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KillRanking& default_instance();

  void Swap(KillRanking* other);

  // implements Message ----------------------------------------------

  KillRanking* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KillRanking& from);
  void MergeFrom(const KillRanking& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 PlyID = 1;
  inline bool has_plyid() const;
  inline void clear_plyid();
  static const int kPlyIDFieldNumber = 1;
  inline ::google::protobuf::int32 plyid() const;
  inline void set_plyid(::google::protobuf::int32 value);

  // optional int32 KillNum = 2;
  inline bool has_killnum() const;
  inline void clear_killnum();
  static const int kKillNumFieldNumber = 2;
  inline ::google::protobuf::int32 killnum() const;
  inline void set_killnum(::google::protobuf::int32 value);

  // optional int32 DieNum = 3;
  inline bool has_dienum() const;
  inline void clear_dienum();
  static const int kDieNumFieldNumber = 3;
  inline ::google::protobuf::int32 dienum() const;
  inline void set_dienum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.KillRanking)
 private:
  inline void set_has_plyid();
  inline void clear_has_plyid();
  inline void set_has_killnum();
  inline void clear_has_killnum();
  inline void set_has_dienum();
  inline void clear_has_dienum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 plyid_;
  ::google::protobuf::int32 killnum_;
  ::google::protobuf::int32 dienum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_pvp_2eproto();
  friend void protobuf_AssignDesc_pvp_2eproto();
  friend void protobuf_ShutdownFile_pvp_2eproto();

  void InitAsDefaultInstance();
  static KillRanking* default_instance_;
};
// -------------------------------------------------------------------

class PVP_PC_KillRanking : public ::google::protobuf::Message {
 public:
  PVP_PC_KillRanking();
  virtual ~PVP_PC_KillRanking();

  PVP_PC_KillRanking(const PVP_PC_KillRanking& from);

  inline PVP_PC_KillRanking& operator=(const PVP_PC_KillRanking& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PVP_PC_KillRanking& default_instance();

  void Swap(PVP_PC_KillRanking* other);

  // implements Message ----------------------------------------------

  PVP_PC_KillRanking* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PVP_PC_KillRanking& from);
  void MergeFrom(const PVP_PC_KillRanking& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.message.KillRanking list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::proto::message::KillRanking& list(int index) const;
  inline ::proto::message::KillRanking* mutable_list(int index);
  inline ::proto::message::KillRanking* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::KillRanking >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::KillRanking >*
      mutable_list();

  // @@protoc_insertion_point(class_scope:proto.message.PVP_PC_KillRanking)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::message::KillRanking > list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_pvp_2eproto();
  friend void protobuf_AssignDesc_pvp_2eproto();
  friend void protobuf_ShutdownFile_pvp_2eproto();

  void InitAsDefaultInstance();
  static PVP_PC_KillRanking* default_instance_;
};
// -------------------------------------------------------------------

class IntegralRanking : public ::google::protobuf::Message {
 public:
  IntegralRanking();
  virtual ~IntegralRanking();

  IntegralRanking(const IntegralRanking& from);

  inline IntegralRanking& operator=(const IntegralRanking& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IntegralRanking& default_instance();

  void Swap(IntegralRanking* other);

  // implements Message ----------------------------------------------

  IntegralRanking* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IntegralRanking& from);
  void MergeFrom(const IntegralRanking& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 PlyID = 1;
  inline bool has_plyid() const;
  inline void clear_plyid();
  static const int kPlyIDFieldNumber = 1;
  inline ::google::protobuf::int32 plyid() const;
  inline void set_plyid(::google::protobuf::int32 value);

  // optional int32 Integral = 2;
  inline bool has_integral() const;
  inline void clear_integral();
  static const int kIntegralFieldNumber = 2;
  inline ::google::protobuf::int32 integral() const;
  inline void set_integral(::google::protobuf::int32 value);

  // optional int32 flagNum = 3;
  inline bool has_flagnum() const;
  inline void clear_flagnum();
  static const int kFlagNumFieldNumber = 3;
  inline ::google::protobuf::int32 flagnum() const;
  inline void set_flagnum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.IntegralRanking)
 private:
  inline void set_has_plyid();
  inline void clear_has_plyid();
  inline void set_has_integral();
  inline void clear_has_integral();
  inline void set_has_flagnum();
  inline void clear_has_flagnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 plyid_;
  ::google::protobuf::int32 integral_;
  ::google::protobuf::int32 flagnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_pvp_2eproto();
  friend void protobuf_AssignDesc_pvp_2eproto();
  friend void protobuf_ShutdownFile_pvp_2eproto();

  void InitAsDefaultInstance();
  static IntegralRanking* default_instance_;
};
// -------------------------------------------------------------------

class PVP_PC_IntegralRanking : public ::google::protobuf::Message {
 public:
  PVP_PC_IntegralRanking();
  virtual ~PVP_PC_IntegralRanking();

  PVP_PC_IntegralRanking(const PVP_PC_IntegralRanking& from);

  inline PVP_PC_IntegralRanking& operator=(const PVP_PC_IntegralRanking& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PVP_PC_IntegralRanking& default_instance();

  void Swap(PVP_PC_IntegralRanking* other);

  // implements Message ----------------------------------------------

  PVP_PC_IntegralRanking* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PVP_PC_IntegralRanking& from);
  void MergeFrom(const PVP_PC_IntegralRanking& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.message.IntegralRanking list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::proto::message::IntegralRanking& list(int index) const;
  inline ::proto::message::IntegralRanking* mutable_list(int index);
  inline ::proto::message::IntegralRanking* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::IntegralRanking >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::IntegralRanking >*
      mutable_list();

  // @@protoc_insertion_point(class_scope:proto.message.PVP_PC_IntegralRanking)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::message::IntegralRanking > list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_pvp_2eproto();
  friend void protobuf_AssignDesc_pvp_2eproto();
  friend void protobuf_ShutdownFile_pvp_2eproto();

  void InitAsDefaultInstance();
  static PVP_PC_IntegralRanking* default_instance_;
};
// -------------------------------------------------------------------

class PVP_PC_Dismiss : public ::google::protobuf::Message {
 public:
  PVP_PC_Dismiss();
  virtual ~PVP_PC_Dismiss();

  PVP_PC_Dismiss(const PVP_PC_Dismiss& from);

  inline PVP_PC_Dismiss& operator=(const PVP_PC_Dismiss& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PVP_PC_Dismiss& default_instance();

  void Swap(PVP_PC_Dismiss* other);

  // implements Message ----------------------------------------------

  PVP_PC_Dismiss* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PVP_PC_Dismiss& from);
  void MergeFrom(const PVP_PC_Dismiss& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.message.PVP_PC_Dismiss)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_pvp_2eproto();
  friend void protobuf_AssignDesc_pvp_2eproto();
  friend void protobuf_ShutdownFile_pvp_2eproto();

  void InitAsDefaultInstance();
  static PVP_PC_Dismiss* default_instance_;
};
// -------------------------------------------------------------------

class PVP_CP_PVPSurrender : public ::google::protobuf::Message {
 public:
  PVP_CP_PVPSurrender();
  virtual ~PVP_CP_PVPSurrender();

  PVP_CP_PVPSurrender(const PVP_CP_PVPSurrender& from);

  inline PVP_CP_PVPSurrender& operator=(const PVP_CP_PVPSurrender& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PVP_CP_PVPSurrender& default_instance();

  void Swap(PVP_CP_PVPSurrender* other);

  // implements Message ----------------------------------------------

  PVP_CP_PVPSurrender* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PVP_CP_PVPSurrender& from);
  void MergeFrom(const PVP_CP_PVPSurrender& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.message.PVP_CP_PVPSurrender)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_pvp_2eproto();
  friend void protobuf_AssignDesc_pvp_2eproto();
  friend void protobuf_ShutdownFile_pvp_2eproto();

  void InitAsDefaultInstance();
  static PVP_CP_PVPSurrender* default_instance_;
};
// -------------------------------------------------------------------

class PVP_PC_BattleBegin : public ::google::protobuf::Message {
 public:
  PVP_PC_BattleBegin();
  virtual ~PVP_PC_BattleBegin();

  PVP_PC_BattleBegin(const PVP_PC_BattleBegin& from);

  inline PVP_PC_BattleBegin& operator=(const PVP_PC_BattleBegin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PVP_PC_BattleBegin& default_instance();

  void Swap(PVP_PC_BattleBegin* other);

  // implements Message ----------------------------------------------

  PVP_PC_BattleBegin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PVP_PC_BattleBegin& from);
  void MergeFrom(const PVP_PC_BattleBegin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 battletype = 1;
  inline bool has_battletype() const;
  inline void clear_battletype();
  static const int kBattletypeFieldNumber = 1;
  inline ::google::protobuf::uint32 battletype() const;
  inline void set_battletype(::google::protobuf::uint32 value);

  // optional uint64 starttime = 2;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStarttimeFieldNumber = 2;
  inline ::google::protobuf::uint64 starttime() const;
  inline void set_starttime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.message.PVP_PC_BattleBegin)
 private:
  inline void set_has_battletype();
  inline void clear_has_battletype();
  inline void set_has_starttime();
  inline void clear_has_starttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 starttime_;
  ::google::protobuf::uint32 battletype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_pvp_2eproto();
  friend void protobuf_AssignDesc_pvp_2eproto();
  friend void protobuf_ShutdownFile_pvp_2eproto();

  void InitAsDefaultInstance();
  static PVP_PC_BattleBegin* default_instance_;
};
// ===================================================================


// ===================================================================

// PVPSyncPlayerInfo

// required uint32 nPlayerId = 1;
inline bool PVPSyncPlayerInfo::has_nplayerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PVPSyncPlayerInfo::set_has_nplayerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PVPSyncPlayerInfo::clear_has_nplayerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PVPSyncPlayerInfo::clear_nplayerid() {
  nplayerid_ = 0u;
  clear_has_nplayerid();
}
inline ::google::protobuf::uint32 PVPSyncPlayerInfo::nplayerid() const {
  return nplayerid_;
}
inline void PVPSyncPlayerInfo::set_nplayerid(::google::protobuf::uint32 value) {
  set_has_nplayerid();
  nplayerid_ = value;
}

// required .proto.message.Point3D pt = 2;
inline bool PVPSyncPlayerInfo::has_pt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PVPSyncPlayerInfo::set_has_pt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PVPSyncPlayerInfo::clear_has_pt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PVPSyncPlayerInfo::clear_pt() {
  if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
  clear_has_pt();
}
inline const ::proto::message::Point3D& PVPSyncPlayerInfo::pt() const {
  return pt_ != NULL ? *pt_ : *default_instance_->pt_;
}
inline ::proto::message::Point3D* PVPSyncPlayerInfo::mutable_pt() {
  set_has_pt();
  if (pt_ == NULL) pt_ = new ::proto::message::Point3D;
  return pt_;
}
inline ::proto::message::Point3D* PVPSyncPlayerInfo::release_pt() {
  clear_has_pt();
  ::proto::message::Point3D* temp = pt_;
  pt_ = NULL;
  return temp;
}
inline void PVPSyncPlayerInfo::set_allocated_pt(::proto::message::Point3D* pt) {
  delete pt_;
  pt_ = pt;
  if (pt) {
    set_has_pt();
  } else {
    clear_has_pt();
  }
}

// required float dir = 3;
inline bool PVPSyncPlayerInfo::has_dir() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PVPSyncPlayerInfo::set_has_dir() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PVPSyncPlayerInfo::clear_has_dir() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PVPSyncPlayerInfo::clear_dir() {
  dir_ = 0;
  clear_has_dir();
}
inline float PVPSyncPlayerInfo::dir() const {
  return dir_;
}
inline void PVPSyncPlayerInfo::set_dir(float value) {
  set_has_dir();
  dir_ = value;
}

// optional string Name = 4;
inline bool PVPSyncPlayerInfo::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PVPSyncPlayerInfo::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PVPSyncPlayerInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PVPSyncPlayerInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PVPSyncPlayerInfo::name() const {
  return *name_;
}
inline void PVPSyncPlayerInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PVPSyncPlayerInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PVPSyncPlayerInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PVPSyncPlayerInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PVPSyncPlayerInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PVPSyncPlayerInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 MaxHP = 5;
inline bool PVPSyncPlayerInfo::has_maxhp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PVPSyncPlayerInfo::set_has_maxhp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PVPSyncPlayerInfo::clear_has_maxhp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PVPSyncPlayerInfo::clear_maxhp() {
  maxhp_ = 0;
  clear_has_maxhp();
}
inline ::google::protobuf::int32 PVPSyncPlayerInfo::maxhp() const {
  return maxhp_;
}
inline void PVPSyncPlayerInfo::set_maxhp(::google::protobuf::int32 value) {
  set_has_maxhp();
  maxhp_ = value;
}

// optional int32 CurHP = 6;
inline bool PVPSyncPlayerInfo::has_curhp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PVPSyncPlayerInfo::set_has_curhp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PVPSyncPlayerInfo::clear_has_curhp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PVPSyncPlayerInfo::clear_curhp() {
  curhp_ = 0;
  clear_has_curhp();
}
inline ::google::protobuf::int32 PVPSyncPlayerInfo::curhp() const {
  return curhp_;
}
inline void PVPSyncPlayerInfo::set_curhp(::google::protobuf::int32 value) {
  set_has_curhp();
  curhp_ = value;
}

// optional int32 Level = 7;
inline bool PVPSyncPlayerInfo::has_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PVPSyncPlayerInfo::set_has_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PVPSyncPlayerInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PVPSyncPlayerInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 PVPSyncPlayerInfo::level() const {
  return level_;
}
inline void PVPSyncPlayerInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// repeated int32 Mod = 8;
inline int PVPSyncPlayerInfo::mod_size() const {
  return mod_.size();
}
inline void PVPSyncPlayerInfo::clear_mod() {
  mod_.Clear();
}
inline ::google::protobuf::int32 PVPSyncPlayerInfo::mod(int index) const {
  return mod_.Get(index);
}
inline void PVPSyncPlayerInfo::set_mod(int index, ::google::protobuf::int32 value) {
  mod_.Set(index, value);
}
inline void PVPSyncPlayerInfo::add_mod(::google::protobuf::int32 value) {
  mod_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PVPSyncPlayerInfo::mod() const {
  return mod_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PVPSyncPlayerInfo::mutable_mod() {
  return &mod_;
}

// optional int32 career = 9;
inline bool PVPSyncPlayerInfo::has_career() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PVPSyncPlayerInfo::set_has_career() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PVPSyncPlayerInfo::clear_has_career() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PVPSyncPlayerInfo::clear_career() {
  career_ = 0;
  clear_has_career();
}
inline ::google::protobuf::int32 PVPSyncPlayerInfo::career() const {
  return career_;
}
inline void PVPSyncPlayerInfo::set_career(::google::protobuf::int32 value) {
  set_has_career();
  career_ = value;
}

// optional int32 Velocity = 10;
inline bool PVPSyncPlayerInfo::has_velocity() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PVPSyncPlayerInfo::set_has_velocity() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PVPSyncPlayerInfo::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PVPSyncPlayerInfo::clear_velocity() {
  velocity_ = 0;
  clear_has_velocity();
}
inline ::google::protobuf::int32 PVPSyncPlayerInfo::velocity() const {
  return velocity_;
}
inline void PVPSyncPlayerInfo::set_velocity(::google::protobuf::int32 value) {
  set_has_velocity();
  velocity_ = value;
}

// optional int32 camp = 11;
inline bool PVPSyncPlayerInfo::has_camp() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PVPSyncPlayerInfo::set_has_camp() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PVPSyncPlayerInfo::clear_has_camp() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PVPSyncPlayerInfo::clear_camp() {
  camp_ = 0;
  clear_has_camp();
}
inline ::google::protobuf::int32 PVPSyncPlayerInfo::camp() const {
  return camp_;
}
inline void PVPSyncPlayerInfo::set_camp(::google::protobuf::int32 value) {
  set_has_camp();
  camp_ = value;
}

// repeated uint32 bufferID = 12;
inline int PVPSyncPlayerInfo::bufferid_size() const {
  return bufferid_.size();
}
inline void PVPSyncPlayerInfo::clear_bufferid() {
  bufferid_.Clear();
}
inline ::google::protobuf::uint32 PVPSyncPlayerInfo::bufferid(int index) const {
  return bufferid_.Get(index);
}
inline void PVPSyncPlayerInfo::set_bufferid(int index, ::google::protobuf::uint32 value) {
  bufferid_.Set(index, value);
}
inline void PVPSyncPlayerInfo::add_bufferid(::google::protobuf::uint32 value) {
  bufferid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PVPSyncPlayerInfo::bufferid() const {
  return bufferid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PVPSyncPlayerInfo::mutable_bufferid() {
  return &bufferid_;
}

// optional uint64 Status = 13;
inline bool PVPSyncPlayerInfo::has_status() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PVPSyncPlayerInfo::set_has_status() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PVPSyncPlayerInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PVPSyncPlayerInfo::clear_status() {
  status_ = GOOGLE_ULONGLONG(0);
  clear_has_status();
}
inline ::google::protobuf::uint64 PVPSyncPlayerInfo::status() const {
  return status_;
}
inline void PVPSyncPlayerInfo::set_status(::google::protobuf::uint64 value) {
  set_has_status();
  status_ = value;
}

// repeated int32 skill_id_list = 14;
inline int PVPSyncPlayerInfo::skill_id_list_size() const {
  return skill_id_list_.size();
}
inline void PVPSyncPlayerInfo::clear_skill_id_list() {
  skill_id_list_.Clear();
}
inline ::google::protobuf::int32 PVPSyncPlayerInfo::skill_id_list(int index) const {
  return skill_id_list_.Get(index);
}
inline void PVPSyncPlayerInfo::set_skill_id_list(int index, ::google::protobuf::int32 value) {
  skill_id_list_.Set(index, value);
}
inline void PVPSyncPlayerInfo::add_skill_id_list(::google::protobuf::int32 value) {
  skill_id_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PVPSyncPlayerInfo::skill_id_list() const {
  return skill_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PVPSyncPlayerInfo::mutable_skill_id_list() {
  return &skill_id_list_;
}

// optional int32 FlagCamp = 15;
inline bool PVPSyncPlayerInfo::has_flagcamp() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PVPSyncPlayerInfo::set_has_flagcamp() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PVPSyncPlayerInfo::clear_has_flagcamp() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PVPSyncPlayerInfo::clear_flagcamp() {
  flagcamp_ = 0;
  clear_has_flagcamp();
}
inline ::google::protobuf::int32 PVPSyncPlayerInfo::flagcamp() const {
  return flagcamp_;
}
inline void PVPSyncPlayerInfo::set_flagcamp(::google::protobuf::int32 value) {
  set_has_flagcamp();
  flagcamp_ = value;
}

// -------------------------------------------------------------------

// PVP_CP_NoticeConnectOK

// required uint64 CharId = 1;
inline bool PVP_CP_NoticeConnectOK::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PVP_CP_NoticeConnectOK::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PVP_CP_NoticeConnectOK::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PVP_CP_NoticeConnectOK::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 PVP_CP_NoticeConnectOK::charid() const {
  return charid_;
}
inline void PVP_CP_NoticeConnectOK::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// PVP_PC_SyncOnePlayer

// required .proto.message.PVPSyncPlayerInfo data = 1;
inline bool PVP_PC_SyncOnePlayer::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PVP_PC_SyncOnePlayer::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PVP_PC_SyncOnePlayer::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PVP_PC_SyncOnePlayer::clear_data() {
  if (data_ != NULL) data_->::proto::message::PVPSyncPlayerInfo::Clear();
  clear_has_data();
}
inline const ::proto::message::PVPSyncPlayerInfo& PVP_PC_SyncOnePlayer::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::proto::message::PVPSyncPlayerInfo* PVP_PC_SyncOnePlayer::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::proto::message::PVPSyncPlayerInfo;
  return data_;
}
inline ::proto::message::PVPSyncPlayerInfo* PVP_PC_SyncOnePlayer::release_data() {
  clear_has_data();
  ::proto::message::PVPSyncPlayerInfo* temp = data_;
  data_ = NULL;
  return temp;
}
inline void PVP_PC_SyncOnePlayer::set_allocated_data(::proto::message::PVPSyncPlayerInfo* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// PVP_PC_SyncMultiPlayer

// repeated .proto.message.PVPSyncPlayerInfo data_list = 1;
inline int PVP_PC_SyncMultiPlayer::data_list_size() const {
  return data_list_.size();
}
inline void PVP_PC_SyncMultiPlayer::clear_data_list() {
  data_list_.Clear();
}
inline const ::proto::message::PVPSyncPlayerInfo& PVP_PC_SyncMultiPlayer::data_list(int index) const {
  return data_list_.Get(index);
}
inline ::proto::message::PVPSyncPlayerInfo* PVP_PC_SyncMultiPlayer::mutable_data_list(int index) {
  return data_list_.Mutable(index);
}
inline ::proto::message::PVPSyncPlayerInfo* PVP_PC_SyncMultiPlayer::add_data_list() {
  return data_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::PVPSyncPlayerInfo >&
PVP_PC_SyncMultiPlayer::data_list() const {
  return data_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::PVPSyncPlayerInfo >*
PVP_PC_SyncMultiPlayer::mutable_data_list() {
  return &data_list_;
}

// -------------------------------------------------------------------

// PVP_PC_RemovePlayer

// required uint32 PlyId = 1;
inline bool PVP_PC_RemovePlayer::has_plyid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PVP_PC_RemovePlayer::set_has_plyid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PVP_PC_RemovePlayer::clear_has_plyid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PVP_PC_RemovePlayer::clear_plyid() {
  plyid_ = 0u;
  clear_has_plyid();
}
inline ::google::protobuf::uint32 PVP_PC_RemovePlayer::plyid() const {
  return plyid_;
}
inline void PVP_PC_RemovePlayer::set_plyid(::google::protobuf::uint32 value) {
  set_has_plyid();
  plyid_ = value;
}

// -------------------------------------------------------------------

// PVP_CP_LeaveAttack

// -------------------------------------------------------------------

// PVP_PC_LoadBattle

// optional uint32 player_id = 1;
inline bool PVP_PC_LoadBattle::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PVP_PC_LoadBattle::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PVP_PC_LoadBattle::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PVP_PC_LoadBattle::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
inline ::google::protobuf::uint32 PVP_PC_LoadBattle::player_id() const {
  return player_id_;
}
inline void PVP_PC_LoadBattle::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
}

// required uint32 BattleId = 2;
inline bool PVP_PC_LoadBattle::has_battleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PVP_PC_LoadBattle::set_has_battleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PVP_PC_LoadBattle::clear_has_battleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PVP_PC_LoadBattle::clear_battleid() {
  battleid_ = 0u;
  clear_has_battleid();
}
inline ::google::protobuf::uint32 PVP_PC_LoadBattle::battleid() const {
  return battleid_;
}
inline void PVP_PC_LoadBattle::set_battleid(::google::protobuf::uint32 value) {
  set_has_battleid();
  battleid_ = value;
}

// optional .proto.message.Point3D pt = 3;
inline bool PVP_PC_LoadBattle::has_pt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PVP_PC_LoadBattle::set_has_pt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PVP_PC_LoadBattle::clear_has_pt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PVP_PC_LoadBattle::clear_pt() {
  if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
  clear_has_pt();
}
inline const ::proto::message::Point3D& PVP_PC_LoadBattle::pt() const {
  return pt_ != NULL ? *pt_ : *default_instance_->pt_;
}
inline ::proto::message::Point3D* PVP_PC_LoadBattle::mutable_pt() {
  set_has_pt();
  if (pt_ == NULL) pt_ = new ::proto::message::Point3D;
  return pt_;
}
inline ::proto::message::Point3D* PVP_PC_LoadBattle::release_pt() {
  clear_has_pt();
  ::proto::message::Point3D* temp = pt_;
  pt_ = NULL;
  return temp;
}
inline void PVP_PC_LoadBattle::set_allocated_pt(::proto::message::Point3D* pt) {
  delete pt_;
  pt_ = pt;
  if (pt) {
    set_has_pt();
  } else {
    clear_has_pt();
  }
}

// optional float Dir = 4;
inline bool PVP_PC_LoadBattle::has_dir() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PVP_PC_LoadBattle::set_has_dir() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PVP_PC_LoadBattle::clear_has_dir() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PVP_PC_LoadBattle::clear_dir() {
  dir_ = 0;
  clear_has_dir();
}
inline float PVP_PC_LoadBattle::dir() const {
  return dir_;
}
inline void PVP_PC_LoadBattle::set_dir(float value) {
  set_has_dir();
  dir_ = value;
}

// optional int32 camp = 5;
inline bool PVP_PC_LoadBattle::has_camp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PVP_PC_LoadBattle::set_has_camp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PVP_PC_LoadBattle::clear_has_camp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PVP_PC_LoadBattle::clear_camp() {
  camp_ = 0;
  clear_has_camp();
}
inline ::google::protobuf::int32 PVP_PC_LoadBattle::camp() const {
  return camp_;
}
inline void PVP_PC_LoadBattle::set_camp(::google::protobuf::int32 value) {
  set_has_camp();
  camp_ = value;
}

// optional int32 Layer = 6;
inline bool PVP_PC_LoadBattle::has_layer() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PVP_PC_LoadBattle::set_has_layer() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PVP_PC_LoadBattle::clear_has_layer() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PVP_PC_LoadBattle::clear_layer() {
  layer_ = 0;
  clear_has_layer();
}
inline ::google::protobuf::int32 PVP_PC_LoadBattle::layer() const {
  return layer_;
}
inline void PVP_PC_LoadBattle::set_layer(::google::protobuf::int32 value) {
  set_has_layer();
  layer_ = value;
}

// optional int32 SurplusTime = 7;
inline bool PVP_PC_LoadBattle::has_surplustime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PVP_PC_LoadBattle::set_has_surplustime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PVP_PC_LoadBattle::clear_has_surplustime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PVP_PC_LoadBattle::clear_surplustime() {
  surplustime_ = 0;
  clear_has_surplustime();
}
inline ::google::protobuf::int32 PVP_PC_LoadBattle::surplustime() const {
  return surplustime_;
}
inline void PVP_PC_LoadBattle::set_surplustime(::google::protobuf::int32 value) {
  set_has_surplustime();
  surplustime_ = value;
}

// -------------------------------------------------------------------

// PVP_CP_LoadBattleOk

// -------------------------------------------------------------------

// PVPBuffer

// required uint32 EventId = 1;
inline bool PVPBuffer::has_eventid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PVPBuffer::set_has_eventid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PVPBuffer::clear_has_eventid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PVPBuffer::clear_eventid() {
  eventid_ = 0u;
  clear_has_eventid();
}
inline ::google::protobuf::uint32 PVPBuffer::eventid() const {
  return eventid_;
}
inline void PVPBuffer::set_eventid(::google::protobuf::uint32 value) {
  set_has_eventid();
  eventid_ = value;
}

// optional .proto.message.Point3D pt = 2;
inline bool PVPBuffer::has_pt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PVPBuffer::set_has_pt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PVPBuffer::clear_has_pt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PVPBuffer::clear_pt() {
  if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
  clear_has_pt();
}
inline const ::proto::message::Point3D& PVPBuffer::pt() const {
  return pt_ != NULL ? *pt_ : *default_instance_->pt_;
}
inline ::proto::message::Point3D* PVPBuffer::mutable_pt() {
  set_has_pt();
  if (pt_ == NULL) pt_ = new ::proto::message::Point3D;
  return pt_;
}
inline ::proto::message::Point3D* PVPBuffer::release_pt() {
  clear_has_pt();
  ::proto::message::Point3D* temp = pt_;
  pt_ = NULL;
  return temp;
}
inline void PVPBuffer::set_allocated_pt(::proto::message::Point3D* pt) {
  delete pt_;
  pt_ = pt;
  if (pt) {
    set_has_pt();
  } else {
    clear_has_pt();
  }
}

// optional float Dir = 3;
inline bool PVPBuffer::has_dir() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PVPBuffer::set_has_dir() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PVPBuffer::clear_has_dir() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PVPBuffer::clear_dir() {
  dir_ = 0;
  clear_has_dir();
}
inline float PVPBuffer::dir() const {
  return dir_;
}
inline void PVPBuffer::set_dir(float value) {
  set_has_dir();
  dir_ = value;
}

// optional float Radius = 4;
inline bool PVPBuffer::has_radius() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PVPBuffer::set_has_radius() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PVPBuffer::clear_has_radius() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PVPBuffer::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
inline float PVPBuffer::radius() const {
  return radius_;
}
inline void PVPBuffer::set_radius(float value) {
  set_has_radius();
  radius_ = value;
}

// optional int32 nBufferId = 5;
inline bool PVPBuffer::has_nbufferid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PVPBuffer::set_has_nbufferid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PVPBuffer::clear_has_nbufferid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PVPBuffer::clear_nbufferid() {
  nbufferid_ = 0;
  clear_has_nbufferid();
}
inline ::google::protobuf::int32 PVPBuffer::nbufferid() const {
  return nbufferid_;
}
inline void PVPBuffer::set_nbufferid(::google::protobuf::int32 value) {
  set_has_nbufferid();
  nbufferid_ = value;
}

// -------------------------------------------------------------------

// PVP_PC_LoadPVPBuffer

// repeated .proto.message.PVPBuffer event_list = 1;
inline int PVP_PC_LoadPVPBuffer::event_list_size() const {
  return event_list_.size();
}
inline void PVP_PC_LoadPVPBuffer::clear_event_list() {
  event_list_.Clear();
}
inline const ::proto::message::PVPBuffer& PVP_PC_LoadPVPBuffer::event_list(int index) const {
  return event_list_.Get(index);
}
inline ::proto::message::PVPBuffer* PVP_PC_LoadPVPBuffer::mutable_event_list(int index) {
  return event_list_.Mutable(index);
}
inline ::proto::message::PVPBuffer* PVP_PC_LoadPVPBuffer::add_event_list() {
  return event_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::PVPBuffer >&
PVP_PC_LoadPVPBuffer::event_list() const {
  return event_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::PVPBuffer >*
PVP_PC_LoadPVPBuffer::mutable_event_list() {
  return &event_list_;
}

// -------------------------------------------------------------------

// PVP_PC_AddPVPBuffer

// required .proto.message.PVPBuffer event = 1;
inline bool PVP_PC_AddPVPBuffer::has_event() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PVP_PC_AddPVPBuffer::set_has_event() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PVP_PC_AddPVPBuffer::clear_has_event() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PVP_PC_AddPVPBuffer::clear_event() {
  if (event_ != NULL) event_->::proto::message::PVPBuffer::Clear();
  clear_has_event();
}
inline const ::proto::message::PVPBuffer& PVP_PC_AddPVPBuffer::event() const {
  return event_ != NULL ? *event_ : *default_instance_->event_;
}
inline ::proto::message::PVPBuffer* PVP_PC_AddPVPBuffer::mutable_event() {
  set_has_event();
  if (event_ == NULL) event_ = new ::proto::message::PVPBuffer;
  return event_;
}
inline ::proto::message::PVPBuffer* PVP_PC_AddPVPBuffer::release_event() {
  clear_has_event();
  ::proto::message::PVPBuffer* temp = event_;
  event_ = NULL;
  return temp;
}
inline void PVP_PC_AddPVPBuffer::set_allocated_event(::proto::message::PVPBuffer* event) {
  delete event_;
  event_ = event;
  if (event) {
    set_has_event();
  } else {
    clear_has_event();
  }
}

// -------------------------------------------------------------------

// PVP_PC_DelPVPBuffer

// required uint32 EventId = 1;
inline bool PVP_PC_DelPVPBuffer::has_eventid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PVP_PC_DelPVPBuffer::set_has_eventid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PVP_PC_DelPVPBuffer::clear_has_eventid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PVP_PC_DelPVPBuffer::clear_eventid() {
  eventid_ = 0u;
  clear_has_eventid();
}
inline ::google::protobuf::uint32 PVP_PC_DelPVPBuffer::eventid() const {
  return eventid_;
}
inline void PVP_PC_DelPVPBuffer::set_eventid(::google::protobuf::uint32 value) {
  set_has_eventid();
  eventid_ = value;
}

// -------------------------------------------------------------------

// PVP_CP_DoPVPBuffer

// required uint32 EventId = 1;
inline bool PVP_CP_DoPVPBuffer::has_eventid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PVP_CP_DoPVPBuffer::set_has_eventid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PVP_CP_DoPVPBuffer::clear_has_eventid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PVP_CP_DoPVPBuffer::clear_eventid() {
  eventid_ = 0u;
  clear_has_eventid();
}
inline ::google::protobuf::uint32 PVP_CP_DoPVPBuffer::eventid() const {
  return eventid_;
}
inline void PVP_CP_DoPVPBuffer::set_eventid(::google::protobuf::uint32 value) {
  set_has_eventid();
  eventid_ = value;
}

// -------------------------------------------------------------------

// PVPFlagEvent

// required uint32 EventId = 1;
inline bool PVPFlagEvent::has_eventid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PVPFlagEvent::set_has_eventid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PVPFlagEvent::clear_has_eventid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PVPFlagEvent::clear_eventid() {
  eventid_ = 0u;
  clear_has_eventid();
}
inline ::google::protobuf::uint32 PVPFlagEvent::eventid() const {
  return eventid_;
}
inline void PVPFlagEvent::set_eventid(::google::protobuf::uint32 value) {
  set_has_eventid();
  eventid_ = value;
}

// optional .proto.message.Point3D pt = 2;
inline bool PVPFlagEvent::has_pt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PVPFlagEvent::set_has_pt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PVPFlagEvent::clear_has_pt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PVPFlagEvent::clear_pt() {
  if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
  clear_has_pt();
}
inline const ::proto::message::Point3D& PVPFlagEvent::pt() const {
  return pt_ != NULL ? *pt_ : *default_instance_->pt_;
}
inline ::proto::message::Point3D* PVPFlagEvent::mutable_pt() {
  set_has_pt();
  if (pt_ == NULL) pt_ = new ::proto::message::Point3D;
  return pt_;
}
inline ::proto::message::Point3D* PVPFlagEvent::release_pt() {
  clear_has_pt();
  ::proto::message::Point3D* temp = pt_;
  pt_ = NULL;
  return temp;
}
inline void PVPFlagEvent::set_allocated_pt(::proto::message::Point3D* pt) {
  delete pt_;
  pt_ = pt;
  if (pt) {
    set_has_pt();
  } else {
    clear_has_pt();
  }
}

// optional float Dir = 3;
inline bool PVPFlagEvent::has_dir() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PVPFlagEvent::set_has_dir() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PVPFlagEvent::clear_has_dir() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PVPFlagEvent::clear_dir() {
  dir_ = 0;
  clear_has_dir();
}
inline float PVPFlagEvent::dir() const {
  return dir_;
}
inline void PVPFlagEvent::set_dir(float value) {
  set_has_dir();
  dir_ = value;
}

// optional float Radius = 4;
inline bool PVPFlagEvent::has_radius() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PVPFlagEvent::set_has_radius() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PVPFlagEvent::clear_has_radius() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PVPFlagEvent::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
inline float PVPFlagEvent::radius() const {
  return radius_;
}
inline void PVPFlagEvent::set_radius(float value) {
  set_has_radius();
  radius_ = value;
}

// optional int32 nBufferId = 5;
inline bool PVPFlagEvent::has_nbufferid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PVPFlagEvent::set_has_nbufferid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PVPFlagEvent::clear_has_nbufferid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PVPFlagEvent::clear_nbufferid() {
  nbufferid_ = 0;
  clear_has_nbufferid();
}
inline ::google::protobuf::int32 PVPFlagEvent::nbufferid() const {
  return nbufferid_;
}
inline void PVPFlagEvent::set_nbufferid(::google::protobuf::int32 value) {
  set_has_nbufferid();
  nbufferid_ = value;
}

// optional int32 camp = 6;
inline bool PVPFlagEvent::has_camp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PVPFlagEvent::set_has_camp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PVPFlagEvent::clear_has_camp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PVPFlagEvent::clear_camp() {
  camp_ = 0;
  clear_has_camp();
}
inline ::google::protobuf::int32 PVPFlagEvent::camp() const {
  return camp_;
}
inline void PVPFlagEvent::set_camp(::google::protobuf::int32 value) {
  set_has_camp();
  camp_ = value;
}

// -------------------------------------------------------------------

// PVP_PC_LoadPVPFlagEvent

// repeated .proto.message.PVPFlagEvent flag_list = 1;
inline int PVP_PC_LoadPVPFlagEvent::flag_list_size() const {
  return flag_list_.size();
}
inline void PVP_PC_LoadPVPFlagEvent::clear_flag_list() {
  flag_list_.Clear();
}
inline const ::proto::message::PVPFlagEvent& PVP_PC_LoadPVPFlagEvent::flag_list(int index) const {
  return flag_list_.Get(index);
}
inline ::proto::message::PVPFlagEvent* PVP_PC_LoadPVPFlagEvent::mutable_flag_list(int index) {
  return flag_list_.Mutable(index);
}
inline ::proto::message::PVPFlagEvent* PVP_PC_LoadPVPFlagEvent::add_flag_list() {
  return flag_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::PVPFlagEvent >&
PVP_PC_LoadPVPFlagEvent::flag_list() const {
  return flag_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::PVPFlagEvent >*
PVP_PC_LoadPVPFlagEvent::mutable_flag_list() {
  return &flag_list_;
}

// -------------------------------------------------------------------

// PVP_CP_CaptureFlag

// required uint32 EventId = 1;
inline bool PVP_CP_CaptureFlag::has_eventid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PVP_CP_CaptureFlag::set_has_eventid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PVP_CP_CaptureFlag::clear_has_eventid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PVP_CP_CaptureFlag::clear_eventid() {
  eventid_ = 0u;
  clear_has_eventid();
}
inline ::google::protobuf::uint32 PVP_CP_CaptureFlag::eventid() const {
  return eventid_;
}
inline void PVP_CP_CaptureFlag::set_eventid(::google::protobuf::uint32 value) {
  set_has_eventid();
  eventid_ = value;
}

// -------------------------------------------------------------------

// PVP_PC_DelFlag

// required uint32 EventId = 1;
inline bool PVP_PC_DelFlag::has_eventid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PVP_PC_DelFlag::set_has_eventid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PVP_PC_DelFlag::clear_has_eventid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PVP_PC_DelFlag::clear_eventid() {
  eventid_ = 0u;
  clear_has_eventid();
}
inline ::google::protobuf::uint32 PVP_PC_DelFlag::eventid() const {
  return eventid_;
}
inline void PVP_PC_DelFlag::set_eventid(::google::protobuf::uint32 value) {
  set_has_eventid();
  eventid_ = value;
}

// -------------------------------------------------------------------

// PVP_CP_SubmitFlag

// required uint32 EventId = 1;
inline bool PVP_CP_SubmitFlag::has_eventid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PVP_CP_SubmitFlag::set_has_eventid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PVP_CP_SubmitFlag::clear_has_eventid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PVP_CP_SubmitFlag::clear_eventid() {
  eventid_ = 0u;
  clear_has_eventid();
}
inline ::google::protobuf::uint32 PVP_CP_SubmitFlag::eventid() const {
  return eventid_;
}
inline void PVP_CP_SubmitFlag::set_eventid(::google::protobuf::uint32 value) {
  set_has_eventid();
  eventid_ = value;
}

// -------------------------------------------------------------------

// PVP_PC_AddFlag

// required .proto.message.PVPFlagEvent flag = 1;
inline bool PVP_PC_AddFlag::has_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PVP_PC_AddFlag::set_has_flag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PVP_PC_AddFlag::clear_has_flag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PVP_PC_AddFlag::clear_flag() {
  if (flag_ != NULL) flag_->::proto::message::PVPFlagEvent::Clear();
  clear_has_flag();
}
inline const ::proto::message::PVPFlagEvent& PVP_PC_AddFlag::flag() const {
  return flag_ != NULL ? *flag_ : *default_instance_->flag_;
}
inline ::proto::message::PVPFlagEvent* PVP_PC_AddFlag::mutable_flag() {
  set_has_flag();
  if (flag_ == NULL) flag_ = new ::proto::message::PVPFlagEvent;
  return flag_;
}
inline ::proto::message::PVPFlagEvent* PVP_PC_AddFlag::release_flag() {
  clear_has_flag();
  ::proto::message::PVPFlagEvent* temp = flag_;
  flag_ = NULL;
  return temp;
}
inline void PVP_PC_AddFlag::set_allocated_flag(::proto::message::PVPFlagEvent* flag) {
  delete flag_;
  flag_ = flag;
  if (flag) {
    set_has_flag();
  } else {
    clear_has_flag();
  }
}

// -------------------------------------------------------------------

// PVP_PC_DesFlag

// optional .proto.message.Point3D pt = 1;
inline bool PVP_PC_DesFlag::has_pt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PVP_PC_DesFlag::set_has_pt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PVP_PC_DesFlag::clear_has_pt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PVP_PC_DesFlag::clear_pt() {
  if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
  clear_has_pt();
}
inline const ::proto::message::Point3D& PVP_PC_DesFlag::pt() const {
  return pt_ != NULL ? *pt_ : *default_instance_->pt_;
}
inline ::proto::message::Point3D* PVP_PC_DesFlag::mutable_pt() {
  set_has_pt();
  if (pt_ == NULL) pt_ = new ::proto::message::Point3D;
  return pt_;
}
inline ::proto::message::Point3D* PVP_PC_DesFlag::release_pt() {
  clear_has_pt();
  ::proto::message::Point3D* temp = pt_;
  pt_ = NULL;
  return temp;
}
inline void PVP_PC_DesFlag::set_allocated_pt(::proto::message::Point3D* pt) {
  delete pt_;
  pt_ = pt;
  if (pt) {
    set_has_pt();
  } else {
    clear_has_pt();
  }
}

// optional float Radius = 2;
inline bool PVP_PC_DesFlag::has_radius() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PVP_PC_DesFlag::set_has_radius() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PVP_PC_DesFlag::clear_has_radius() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PVP_PC_DesFlag::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
inline float PVP_PC_DesFlag::radius() const {
  return radius_;
}
inline void PVP_PC_DesFlag::set_radius(float value) {
  set_has_radius();
  radius_ = value;
}

// -------------------------------------------------------------------

// PVP_PC_AttackEnd

// required int32 winCmap = 1;
inline bool PVP_PC_AttackEnd::has_wincmap() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PVP_PC_AttackEnd::set_has_wincmap() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PVP_PC_AttackEnd::clear_has_wincmap() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PVP_PC_AttackEnd::clear_wincmap() {
  wincmap_ = 0;
  clear_has_wincmap();
}
inline ::google::protobuf::int32 PVP_PC_AttackEnd::wincmap() const {
  return wincmap_;
}
inline void PVP_PC_AttackEnd::set_wincmap(::google::protobuf::int32 value) {
  set_has_wincmap();
  wincmap_ = value;
}

// -------------------------------------------------------------------

// KillRanking

// required int32 PlyID = 1;
inline bool KillRanking::has_plyid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KillRanking::set_has_plyid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KillRanking::clear_has_plyid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KillRanking::clear_plyid() {
  plyid_ = 0;
  clear_has_plyid();
}
inline ::google::protobuf::int32 KillRanking::plyid() const {
  return plyid_;
}
inline void KillRanking::set_plyid(::google::protobuf::int32 value) {
  set_has_plyid();
  plyid_ = value;
}

// optional int32 KillNum = 2;
inline bool KillRanking::has_killnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KillRanking::set_has_killnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KillRanking::clear_has_killnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KillRanking::clear_killnum() {
  killnum_ = 0;
  clear_has_killnum();
}
inline ::google::protobuf::int32 KillRanking::killnum() const {
  return killnum_;
}
inline void KillRanking::set_killnum(::google::protobuf::int32 value) {
  set_has_killnum();
  killnum_ = value;
}

// optional int32 DieNum = 3;
inline bool KillRanking::has_dienum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void KillRanking::set_has_dienum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void KillRanking::clear_has_dienum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void KillRanking::clear_dienum() {
  dienum_ = 0;
  clear_has_dienum();
}
inline ::google::protobuf::int32 KillRanking::dienum() const {
  return dienum_;
}
inline void KillRanking::set_dienum(::google::protobuf::int32 value) {
  set_has_dienum();
  dienum_ = value;
}

// -------------------------------------------------------------------

// PVP_PC_KillRanking

// repeated .proto.message.KillRanking list = 1;
inline int PVP_PC_KillRanking::list_size() const {
  return list_.size();
}
inline void PVP_PC_KillRanking::clear_list() {
  list_.Clear();
}
inline const ::proto::message::KillRanking& PVP_PC_KillRanking::list(int index) const {
  return list_.Get(index);
}
inline ::proto::message::KillRanking* PVP_PC_KillRanking::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::proto::message::KillRanking* PVP_PC_KillRanking::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::KillRanking >&
PVP_PC_KillRanking::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::KillRanking >*
PVP_PC_KillRanking::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// IntegralRanking

// required int32 PlyID = 1;
inline bool IntegralRanking::has_plyid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IntegralRanking::set_has_plyid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IntegralRanking::clear_has_plyid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IntegralRanking::clear_plyid() {
  plyid_ = 0;
  clear_has_plyid();
}
inline ::google::protobuf::int32 IntegralRanking::plyid() const {
  return plyid_;
}
inline void IntegralRanking::set_plyid(::google::protobuf::int32 value) {
  set_has_plyid();
  plyid_ = value;
}

// optional int32 Integral = 2;
inline bool IntegralRanking::has_integral() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IntegralRanking::set_has_integral() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IntegralRanking::clear_has_integral() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IntegralRanking::clear_integral() {
  integral_ = 0;
  clear_has_integral();
}
inline ::google::protobuf::int32 IntegralRanking::integral() const {
  return integral_;
}
inline void IntegralRanking::set_integral(::google::protobuf::int32 value) {
  set_has_integral();
  integral_ = value;
}

// optional int32 flagNum = 3;
inline bool IntegralRanking::has_flagnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IntegralRanking::set_has_flagnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IntegralRanking::clear_has_flagnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IntegralRanking::clear_flagnum() {
  flagnum_ = 0;
  clear_has_flagnum();
}
inline ::google::protobuf::int32 IntegralRanking::flagnum() const {
  return flagnum_;
}
inline void IntegralRanking::set_flagnum(::google::protobuf::int32 value) {
  set_has_flagnum();
  flagnum_ = value;
}

// -------------------------------------------------------------------

// PVP_PC_IntegralRanking

// repeated .proto.message.IntegralRanking list = 1;
inline int PVP_PC_IntegralRanking::list_size() const {
  return list_.size();
}
inline void PVP_PC_IntegralRanking::clear_list() {
  list_.Clear();
}
inline const ::proto::message::IntegralRanking& PVP_PC_IntegralRanking::list(int index) const {
  return list_.Get(index);
}
inline ::proto::message::IntegralRanking* PVP_PC_IntegralRanking::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::proto::message::IntegralRanking* PVP_PC_IntegralRanking::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::IntegralRanking >&
PVP_PC_IntegralRanking::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::IntegralRanking >*
PVP_PC_IntegralRanking::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// PVP_PC_Dismiss

// -------------------------------------------------------------------

// PVP_CP_PVPSurrender

// -------------------------------------------------------------------

// PVP_PC_BattleBegin

// optional uint32 battletype = 1;
inline bool PVP_PC_BattleBegin::has_battletype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PVP_PC_BattleBegin::set_has_battletype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PVP_PC_BattleBegin::clear_has_battletype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PVP_PC_BattleBegin::clear_battletype() {
  battletype_ = 0u;
  clear_has_battletype();
}
inline ::google::protobuf::uint32 PVP_PC_BattleBegin::battletype() const {
  return battletype_;
}
inline void PVP_PC_BattleBegin::set_battletype(::google::protobuf::uint32 value) {
  set_has_battletype();
  battletype_ = value;
}

// optional uint64 starttime = 2;
inline bool PVP_PC_BattleBegin::has_starttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PVP_PC_BattleBegin::set_has_starttime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PVP_PC_BattleBegin::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PVP_PC_BattleBegin::clear_starttime() {
  starttime_ = GOOGLE_ULONGLONG(0);
  clear_has_starttime();
}
inline ::google::protobuf::uint64 PVP_PC_BattleBegin::starttime() const {
  return starttime_;
}
inline void PVP_PC_BattleBegin::set_starttime(::google::protobuf::uint64 value) {
  set_has_starttime();
  starttime_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pvp_2eproto__INCLUDED
