// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mercenary.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mercenary.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

namespace {

const ::google::protobuf::Descriptor* ProtoMerEquipCell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoMerEquipCell_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoMerCellInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoMerCellInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoMerAllCellInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoMerAllCellInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mercenary_SC_MercenaryDead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mercenary_SC_MercenaryDead_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mercenary_CS_GetMerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mercenary_CS_GetMerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mercenary_SC_GetMerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mercenary_SC_GetMerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mercenary_SC_UpdateSingleMerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mercenary_SC_UpdateSingleMerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mercenary_CS_OperaCell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mercenary_CS_OperaCell_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mercenary_SC_OperaCell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mercenary_SC_OperaCell_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mercenary_CS_PutOnMerEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mercenary_CS_PutOnMerEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mercenary_SC_PutOnMerEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mercenary_SC_PutOnMerEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mercenary_CS_GetOffMerEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mercenary_CS_GetOffMerEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mercenary_SC_GetOffMerEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mercenary_SC_GetOffMerEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mercenary_CS_UpgSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mercenary_CS_UpgSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mercenary_SC_UpgSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mercenary_SC_UpgSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mercenary_CS_ChangeAI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mercenary_CS_ChangeAI_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mercenary_SC_ChangeAI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mercenary_SC_ChangeAI_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mercenary_2eproto() {
  protobuf_AddDesc_mercenary_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mercenary.proto");
  GOOGLE_CHECK(file != NULL);
  ProtoMerEquipCell_descriptor_ = file->message_type(0);
  static const int ProtoMerEquipCell_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMerEquipCell, equipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMerEquipCell, isopen_),
  };
  ProtoMerEquipCell_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoMerEquipCell_descriptor_,
      ProtoMerEquipCell::default_instance_,
      ProtoMerEquipCell_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMerEquipCell, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMerEquipCell, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoMerEquipCell));
  ProtoMerCellInfo_descriptor_ = file->message_type(1);
  static const int ProtoMerCellInfo_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMerCellInfo, cellid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMerCellInfo, isactive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMerCellInfo, isuse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMerCellInfo, mercenaryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMerCellInfo, strlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMerCellInfo, luckyvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMerCellInfo, activeskills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMerCellInfo, passskills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMerCellInfo, activetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMerCellInfo, activenowvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMerCellInfo, equips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMerCellInfo, merequipgird_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMerCellInfo, isdead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMerCellInfo, relivetick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMerCellInfo, hprate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMerCellInfo, eatfoodid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMerCellInfo, eatfoodnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMerCellInfo, skillbooks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMerCellInfo, ranking_),
  };
  ProtoMerCellInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoMerCellInfo_descriptor_,
      ProtoMerCellInfo::default_instance_,
      ProtoMerCellInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMerCellInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMerCellInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoMerCellInfo));
  ProtoMerAllCellInfo_descriptor_ = file->message_type(2);
  static const int ProtoMerAllCellInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMerAllCellInfo, allinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMerAllCellInfo, aistatus_),
  };
  ProtoMerAllCellInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoMerAllCellInfo_descriptor_,
      ProtoMerAllCellInfo::default_instance_,
      ProtoMerAllCellInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMerAllCellInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMerAllCellInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoMerAllCellInfo));
  Mercenary_SC_MercenaryDead_descriptor_ = file->message_type(3);
  static const int Mercenary_SC_MercenaryDead_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mercenary_SC_MercenaryDead, cellid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mercenary_SC_MercenaryDead, relivetick_),
  };
  Mercenary_SC_MercenaryDead_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mercenary_SC_MercenaryDead_descriptor_,
      Mercenary_SC_MercenaryDead::default_instance_,
      Mercenary_SC_MercenaryDead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mercenary_SC_MercenaryDead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mercenary_SC_MercenaryDead, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mercenary_SC_MercenaryDead));
  Mercenary_CS_GetMerInfo_descriptor_ = file->message_type(4);
  static const int Mercenary_CS_GetMerInfo_offsets_[1] = {
  };
  Mercenary_CS_GetMerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mercenary_CS_GetMerInfo_descriptor_,
      Mercenary_CS_GetMerInfo::default_instance_,
      Mercenary_CS_GetMerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mercenary_CS_GetMerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mercenary_CS_GetMerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mercenary_CS_GetMerInfo));
  Mercenary_SC_GetMerInfo_descriptor_ = file->message_type(5);
  static const int Mercenary_SC_GetMerInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mercenary_SC_GetMerInfo, infolist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mercenary_SC_GetMerInfo, generalskills_),
  };
  Mercenary_SC_GetMerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mercenary_SC_GetMerInfo_descriptor_,
      Mercenary_SC_GetMerInfo::default_instance_,
      Mercenary_SC_GetMerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mercenary_SC_GetMerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mercenary_SC_GetMerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mercenary_SC_GetMerInfo));
  Mercenary_SC_UpdateSingleMerInfo_descriptor_ = file->message_type(6);
  static const int Mercenary_SC_UpdateSingleMerInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mercenary_SC_UpdateSingleMerInfo, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mercenary_SC_UpdateSingleMerInfo, generalskills_),
  };
  Mercenary_SC_UpdateSingleMerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mercenary_SC_UpdateSingleMerInfo_descriptor_,
      Mercenary_SC_UpdateSingleMerInfo::default_instance_,
      Mercenary_SC_UpdateSingleMerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mercenary_SC_UpdateSingleMerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mercenary_SC_UpdateSingleMerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mercenary_SC_UpdateSingleMerInfo));
  Mercenary_CS_OperaCell_descriptor_ = file->message_type(7);
  static const int Mercenary_CS_OperaCell_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mercenary_CS_OperaCell, cellid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mercenary_CS_OperaCell, operatype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mercenary_CS_OperaCell, param_),
  };
  Mercenary_CS_OperaCell_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mercenary_CS_OperaCell_descriptor_,
      Mercenary_CS_OperaCell::default_instance_,
      Mercenary_CS_OperaCell_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mercenary_CS_OperaCell, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mercenary_CS_OperaCell, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mercenary_CS_OperaCell));
  Mercenary_SC_OperaCell_descriptor_ = file->message_type(8);
  static const int Mercenary_SC_OperaCell_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mercenary_SC_OperaCell, ret_),
  };
  Mercenary_SC_OperaCell_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mercenary_SC_OperaCell_descriptor_,
      Mercenary_SC_OperaCell::default_instance_,
      Mercenary_SC_OperaCell_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mercenary_SC_OperaCell, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mercenary_SC_OperaCell, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mercenary_SC_OperaCell));
  Mercenary_CS_PutOnMerEquip_descriptor_ = file->message_type(9);
  static const int Mercenary_CS_PutOnMerEquip_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mercenary_CS_PutOnMerEquip, cellid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mercenary_CS_PutOnMerEquip, uuid_),
  };
  Mercenary_CS_PutOnMerEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mercenary_CS_PutOnMerEquip_descriptor_,
      Mercenary_CS_PutOnMerEquip::default_instance_,
      Mercenary_CS_PutOnMerEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mercenary_CS_PutOnMerEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mercenary_CS_PutOnMerEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mercenary_CS_PutOnMerEquip));
  Mercenary_SC_PutOnMerEquip_descriptor_ = file->message_type(10);
  static const int Mercenary_SC_PutOnMerEquip_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mercenary_SC_PutOnMerEquip, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mercenary_SC_PutOnMerEquip, mercellid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mercenary_SC_PutOnMerEquip, equip_list_),
  };
  Mercenary_SC_PutOnMerEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mercenary_SC_PutOnMerEquip_descriptor_,
      Mercenary_SC_PutOnMerEquip::default_instance_,
      Mercenary_SC_PutOnMerEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mercenary_SC_PutOnMerEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mercenary_SC_PutOnMerEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mercenary_SC_PutOnMerEquip));
  Mercenary_CS_GetOffMerEquip_descriptor_ = file->message_type(11);
  static const int Mercenary_CS_GetOffMerEquip_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mercenary_CS_GetOffMerEquip, cellid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mercenary_CS_GetOffMerEquip, uuid_),
  };
  Mercenary_CS_GetOffMerEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mercenary_CS_GetOffMerEquip_descriptor_,
      Mercenary_CS_GetOffMerEquip::default_instance_,
      Mercenary_CS_GetOffMerEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mercenary_CS_GetOffMerEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mercenary_CS_GetOffMerEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mercenary_CS_GetOffMerEquip));
  Mercenary_SC_GetOffMerEquip_descriptor_ = file->message_type(12);
  static const int Mercenary_SC_GetOffMerEquip_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mercenary_SC_GetOffMerEquip, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mercenary_SC_GetOffMerEquip, mercellid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mercenary_SC_GetOffMerEquip, equip_list_),
  };
  Mercenary_SC_GetOffMerEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mercenary_SC_GetOffMerEquip_descriptor_,
      Mercenary_SC_GetOffMerEquip::default_instance_,
      Mercenary_SC_GetOffMerEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mercenary_SC_GetOffMerEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mercenary_SC_GetOffMerEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mercenary_SC_GetOffMerEquip));
  Mercenary_CS_UpgSkill_descriptor_ = file->message_type(13);
  static const int Mercenary_CS_UpgSkill_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mercenary_CS_UpgSkill, skillid_),
  };
  Mercenary_CS_UpgSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mercenary_CS_UpgSkill_descriptor_,
      Mercenary_CS_UpgSkill::default_instance_,
      Mercenary_CS_UpgSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mercenary_CS_UpgSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mercenary_CS_UpgSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mercenary_CS_UpgSkill));
  Mercenary_SC_UpgSkill_descriptor_ = file->message_type(14);
  static const int Mercenary_SC_UpgSkill_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mercenary_SC_UpgSkill, ret_),
  };
  Mercenary_SC_UpgSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mercenary_SC_UpgSkill_descriptor_,
      Mercenary_SC_UpgSkill::default_instance_,
      Mercenary_SC_UpgSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mercenary_SC_UpgSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mercenary_SC_UpgSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mercenary_SC_UpgSkill));
  Mercenary_CS_ChangeAI_descriptor_ = file->message_type(15);
  static const int Mercenary_CS_ChangeAI_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mercenary_CS_ChangeAI, status_),
  };
  Mercenary_CS_ChangeAI_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mercenary_CS_ChangeAI_descriptor_,
      Mercenary_CS_ChangeAI::default_instance_,
      Mercenary_CS_ChangeAI_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mercenary_CS_ChangeAI, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mercenary_CS_ChangeAI, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mercenary_CS_ChangeAI));
  Mercenary_SC_ChangeAI_descriptor_ = file->message_type(16);
  static const int Mercenary_SC_ChangeAI_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mercenary_SC_ChangeAI, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mercenary_SC_ChangeAI, status_),
  };
  Mercenary_SC_ChangeAI_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mercenary_SC_ChangeAI_descriptor_,
      Mercenary_SC_ChangeAI::default_instance_,
      Mercenary_SC_ChangeAI_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mercenary_SC_ChangeAI, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mercenary_SC_ChangeAI, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mercenary_SC_ChangeAI));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mercenary_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoMerEquipCell_descriptor_, &ProtoMerEquipCell::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoMerCellInfo_descriptor_, &ProtoMerCellInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoMerAllCellInfo_descriptor_, &ProtoMerAllCellInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mercenary_SC_MercenaryDead_descriptor_, &Mercenary_SC_MercenaryDead::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mercenary_CS_GetMerInfo_descriptor_, &Mercenary_CS_GetMerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mercenary_SC_GetMerInfo_descriptor_, &Mercenary_SC_GetMerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mercenary_SC_UpdateSingleMerInfo_descriptor_, &Mercenary_SC_UpdateSingleMerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mercenary_CS_OperaCell_descriptor_, &Mercenary_CS_OperaCell::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mercenary_SC_OperaCell_descriptor_, &Mercenary_SC_OperaCell::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mercenary_CS_PutOnMerEquip_descriptor_, &Mercenary_CS_PutOnMerEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mercenary_SC_PutOnMerEquip_descriptor_, &Mercenary_SC_PutOnMerEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mercenary_CS_GetOffMerEquip_descriptor_, &Mercenary_CS_GetOffMerEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mercenary_SC_GetOffMerEquip_descriptor_, &Mercenary_SC_GetOffMerEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mercenary_CS_UpgSkill_descriptor_, &Mercenary_CS_UpgSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mercenary_SC_UpgSkill_descriptor_, &Mercenary_SC_UpgSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mercenary_CS_ChangeAI_descriptor_, &Mercenary_CS_ChangeAI::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mercenary_SC_ChangeAI_descriptor_, &Mercenary_SC_ChangeAI::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mercenary_2eproto() {
  delete ProtoMerEquipCell::default_instance_;
  delete ProtoMerEquipCell_reflection_;
  delete ProtoMerCellInfo::default_instance_;
  delete ProtoMerCellInfo_reflection_;
  delete ProtoMerAllCellInfo::default_instance_;
  delete ProtoMerAllCellInfo_reflection_;
  delete Mercenary_SC_MercenaryDead::default_instance_;
  delete Mercenary_SC_MercenaryDead_reflection_;
  delete Mercenary_CS_GetMerInfo::default_instance_;
  delete Mercenary_CS_GetMerInfo_reflection_;
  delete Mercenary_SC_GetMerInfo::default_instance_;
  delete Mercenary_SC_GetMerInfo_reflection_;
  delete Mercenary_SC_UpdateSingleMerInfo::default_instance_;
  delete Mercenary_SC_UpdateSingleMerInfo_reflection_;
  delete Mercenary_CS_OperaCell::default_instance_;
  delete Mercenary_CS_OperaCell_reflection_;
  delete Mercenary_SC_OperaCell::default_instance_;
  delete Mercenary_SC_OperaCell_reflection_;
  delete Mercenary_CS_PutOnMerEquip::default_instance_;
  delete Mercenary_CS_PutOnMerEquip_reflection_;
  delete Mercenary_SC_PutOnMerEquip::default_instance_;
  delete Mercenary_SC_PutOnMerEquip_reflection_;
  delete Mercenary_CS_GetOffMerEquip::default_instance_;
  delete Mercenary_CS_GetOffMerEquip_reflection_;
  delete Mercenary_SC_GetOffMerEquip::default_instance_;
  delete Mercenary_SC_GetOffMerEquip_reflection_;
  delete Mercenary_CS_UpgSkill::default_instance_;
  delete Mercenary_CS_UpgSkill_reflection_;
  delete Mercenary_SC_UpgSkill::default_instance_;
  delete Mercenary_SC_UpgSkill_reflection_;
  delete Mercenary_CS_ChangeAI::default_instance_;
  delete Mercenary_CS_ChangeAI_reflection_;
  delete Mercenary_SC_ChangeAI::default_instance_;
  delete Mercenary_SC_ChangeAI_reflection_;
}

void protobuf_AddDesc_mercenary_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::message::protobuf_AddDesc_common_2eproto();
  ::proto::message::protobuf_AddDesc_skill_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017mercenary.proto\022\rproto.message\032\014common"
    ".proto\032\013skill.proto\"4\n\021ProtoMerEquipCell"
    "\022\017\n\007equipid\030\001 \002(\r\022\016\n\006isOpen\030\002 \002(\010\"\264\003\n\020Pr"
    "otoMerCellInfo\022\016\n\006cellId\030\001 \002(\r\022\020\n\010isActi"
    "ve\030\002 \001(\010\022\r\n\005isUse\030\003 \001(\010\022\023\n\013mercenaryId\030\004"
    " \001(\r\022\r\n\005strLv\030\005 \001(\r\022\022\n\nluckyValue\030\006 \001(\r\022"
    "\024\n\014activeSkills\030\007 \003(\r\022\022\n\npassSkills\030\010 \003("
    "\r\022\022\n\nactiveType\030\t \001(\r\022\026\n\016activeNowValue\030"
    "\n \001(\r\0220\n\006equips\030\013 \003(\0132 .proto.message.Pr"
    "otoMerEquipCell\022/\n\021merequipgird_list\030\014 \003"
    "(\0132\024.proto.message.Equip\022\016\n\006isDead\030\r \001(\010"
    "\022\022\n\nReliveTick\030\016 \001(\003\022\016\n\006HpRate\030\017 \001(\005\022\021\n\t"
    "eatFoodId\030\020 \001(\r\022\022\n\neatFoodNum\030\021 \001(\r\022\022\n\ns"
    "killbooks\030\022 \003(\r\022\017\n\007ranking\030\023 \001(\r\"Y\n\023Prot"
    "oMerAllCellInfo\0220\n\007allInfo\030\001 \003(\0132\037.proto"
    ".message.ProtoMerCellInfo\022\020\n\010AIStatus\030\002 "
    "\001(\r\"@\n\032Mercenary_SC_MercenaryDead\022\016\n\006cel"
    "lId\030\001 \002(\r\022\022\n\nReliveTick\030\002 \001(\003\"\031\n\027Mercena"
    "ry_CS_GetMerInfo\"c\n\027Mercenary_SC_GetMerI"
    "nfo\0221\n\010infoList\030\001 \003(\0132\037.proto.message.Pr"
    "otoMerCellInfo\022\025\n\rgeneralSkills\030\002 \003(\005\"h\n"
    " Mercenary_SC_UpdateSingleMerInfo\022-\n\004inf"
    "o\030\001 \001(\0132\037.proto.message.ProtoMerCellInfo"
    "\022\025\n\rgeneralSkills\030\002 \003(\005\"J\n\026Mercenary_CS_"
    "OperaCell\022\016\n\006cellId\030\001 \002(\r\022\021\n\toperaType\030\002"
    " \002(\r\022\r\n\005param\030\003 \001(\r\"%\n\026Mercenary_SC_Oper"
    "aCell\022\013\n\003ret\030\001 \002(\005\":\n\032Mercenary_CS_PutOn"
    "MerEquip\022\016\n\006cellId\030\001 \002(\r\022\014\n\004uuid\030\002 \002(\004\"i"
    "\n\032Mercenary_SC_PutOnMerEquip\022\016\n\006result\030\001"
    " \001(\005\022\021\n\tmerCellId\030\002 \001(\005\022(\n\nequip_list\030\003 "
    "\003(\0132\024.proto.message.Equip\";\n\033Mercenary_C"
    "S_GetOffMerEquip\022\016\n\006cellID\030\001 \001(\r\022\014\n\004uuid"
    "\030\002 \002(\004\"j\n\033Mercenary_SC_GetOffMerEquip\022\016\n"
    "\006result\030\001 \001(\005\022\021\n\tmerCellId\030\002 \001(\005\022(\n\nequi"
    "p_list\030\003 \001(\0132\024.proto.message.Equip\"(\n\025Me"
    "rcenary_CS_UpgSkill\022\017\n\007skillid\030\001 \002(\005\"$\n\025"
    "Mercenary_SC_UpgSkill\022\013\n\003ret\030\001 \002(\005\"\'\n\025Me"
    "rcenary_CS_ChangeAI\022\016\n\006status\030\001 \002(\005\"4\n\025M"
    "ercenary_SC_ChangeAI\022\013\n\003ret\030\001 \002(\005\022\016\n\006sta"
    "tus\030\002 \002(\005B\017\n\rproto.message", 1586);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mercenary.proto", &protobuf_RegisterTypes);
  ProtoMerEquipCell::default_instance_ = new ProtoMerEquipCell();
  ProtoMerCellInfo::default_instance_ = new ProtoMerCellInfo();
  ProtoMerAllCellInfo::default_instance_ = new ProtoMerAllCellInfo();
  Mercenary_SC_MercenaryDead::default_instance_ = new Mercenary_SC_MercenaryDead();
  Mercenary_CS_GetMerInfo::default_instance_ = new Mercenary_CS_GetMerInfo();
  Mercenary_SC_GetMerInfo::default_instance_ = new Mercenary_SC_GetMerInfo();
  Mercenary_SC_UpdateSingleMerInfo::default_instance_ = new Mercenary_SC_UpdateSingleMerInfo();
  Mercenary_CS_OperaCell::default_instance_ = new Mercenary_CS_OperaCell();
  Mercenary_SC_OperaCell::default_instance_ = new Mercenary_SC_OperaCell();
  Mercenary_CS_PutOnMerEquip::default_instance_ = new Mercenary_CS_PutOnMerEquip();
  Mercenary_SC_PutOnMerEquip::default_instance_ = new Mercenary_SC_PutOnMerEquip();
  Mercenary_CS_GetOffMerEquip::default_instance_ = new Mercenary_CS_GetOffMerEquip();
  Mercenary_SC_GetOffMerEquip::default_instance_ = new Mercenary_SC_GetOffMerEquip();
  Mercenary_CS_UpgSkill::default_instance_ = new Mercenary_CS_UpgSkill();
  Mercenary_SC_UpgSkill::default_instance_ = new Mercenary_SC_UpgSkill();
  Mercenary_CS_ChangeAI::default_instance_ = new Mercenary_CS_ChangeAI();
  Mercenary_SC_ChangeAI::default_instance_ = new Mercenary_SC_ChangeAI();
  ProtoMerEquipCell::default_instance_->InitAsDefaultInstance();
  ProtoMerCellInfo::default_instance_->InitAsDefaultInstance();
  ProtoMerAllCellInfo::default_instance_->InitAsDefaultInstance();
  Mercenary_SC_MercenaryDead::default_instance_->InitAsDefaultInstance();
  Mercenary_CS_GetMerInfo::default_instance_->InitAsDefaultInstance();
  Mercenary_SC_GetMerInfo::default_instance_->InitAsDefaultInstance();
  Mercenary_SC_UpdateSingleMerInfo::default_instance_->InitAsDefaultInstance();
  Mercenary_CS_OperaCell::default_instance_->InitAsDefaultInstance();
  Mercenary_SC_OperaCell::default_instance_->InitAsDefaultInstance();
  Mercenary_CS_PutOnMerEquip::default_instance_->InitAsDefaultInstance();
  Mercenary_SC_PutOnMerEquip::default_instance_->InitAsDefaultInstance();
  Mercenary_CS_GetOffMerEquip::default_instance_->InitAsDefaultInstance();
  Mercenary_SC_GetOffMerEquip::default_instance_->InitAsDefaultInstance();
  Mercenary_CS_UpgSkill::default_instance_->InitAsDefaultInstance();
  Mercenary_SC_UpgSkill::default_instance_->InitAsDefaultInstance();
  Mercenary_CS_ChangeAI::default_instance_->InitAsDefaultInstance();
  Mercenary_SC_ChangeAI::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mercenary_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mercenary_2eproto {
  StaticDescriptorInitializer_mercenary_2eproto() {
    protobuf_AddDesc_mercenary_2eproto();
  }
} static_descriptor_initializer_mercenary_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ProtoMerEquipCell::kEquipidFieldNumber;
const int ProtoMerEquipCell::kIsOpenFieldNumber;
#endif  // !_MSC_VER

ProtoMerEquipCell::ProtoMerEquipCell()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoMerEquipCell::InitAsDefaultInstance() {
}

ProtoMerEquipCell::ProtoMerEquipCell(const ProtoMerEquipCell& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoMerEquipCell::SharedCtor() {
  _cached_size_ = 0;
  equipid_ = 0u;
  isopen_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoMerEquipCell::~ProtoMerEquipCell() {
  SharedDtor();
}

void ProtoMerEquipCell::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoMerEquipCell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoMerEquipCell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoMerEquipCell_descriptor_;
}

const ProtoMerEquipCell& ProtoMerEquipCell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mercenary_2eproto();
  return *default_instance_;
}

ProtoMerEquipCell* ProtoMerEquipCell::default_instance_ = NULL;

ProtoMerEquipCell* ProtoMerEquipCell::New() const {
  return new ProtoMerEquipCell;
}

void ProtoMerEquipCell::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equipid_ = 0u;
    isopen_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoMerEquipCell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 equipid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equipid_)));
          set_has_equipid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isOpen;
        break;
      }

      // required bool isOpen = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isOpen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isopen_)));
          set_has_isopen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoMerEquipCell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 equipid = 1;
  if (has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->equipid(), output);
  }

  // required bool isOpen = 2;
  if (has_isopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isopen(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoMerEquipCell::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 equipid = 1;
  if (has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->equipid(), target);
  }

  // required bool isOpen = 2;
  if (has_isopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isopen(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoMerEquipCell::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 equipid = 1;
    if (has_equipid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equipid());
    }

    // required bool isOpen = 2;
    if (has_isopen()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoMerEquipCell::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoMerEquipCell* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoMerEquipCell*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoMerEquipCell::MergeFrom(const ProtoMerEquipCell& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equipid()) {
      set_equipid(from.equipid());
    }
    if (from.has_isopen()) {
      set_isopen(from.isopen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoMerEquipCell::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoMerEquipCell::CopyFrom(const ProtoMerEquipCell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoMerEquipCell::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ProtoMerEquipCell::Swap(ProtoMerEquipCell* other) {
  if (other != this) {
    std::swap(equipid_, other->equipid_);
    std::swap(isopen_, other->isopen_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoMerEquipCell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoMerEquipCell_descriptor_;
  metadata.reflection = ProtoMerEquipCell_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoMerCellInfo::kCellIdFieldNumber;
const int ProtoMerCellInfo::kIsActiveFieldNumber;
const int ProtoMerCellInfo::kIsUseFieldNumber;
const int ProtoMerCellInfo::kMercenaryIdFieldNumber;
const int ProtoMerCellInfo::kStrLvFieldNumber;
const int ProtoMerCellInfo::kLuckyValueFieldNumber;
const int ProtoMerCellInfo::kActiveSkillsFieldNumber;
const int ProtoMerCellInfo::kPassSkillsFieldNumber;
const int ProtoMerCellInfo::kActiveTypeFieldNumber;
const int ProtoMerCellInfo::kActiveNowValueFieldNumber;
const int ProtoMerCellInfo::kEquipsFieldNumber;
const int ProtoMerCellInfo::kMerequipgirdListFieldNumber;
const int ProtoMerCellInfo::kIsDeadFieldNumber;
const int ProtoMerCellInfo::kReliveTickFieldNumber;
const int ProtoMerCellInfo::kHpRateFieldNumber;
const int ProtoMerCellInfo::kEatFoodIdFieldNumber;
const int ProtoMerCellInfo::kEatFoodNumFieldNumber;
const int ProtoMerCellInfo::kSkillbooksFieldNumber;
const int ProtoMerCellInfo::kRankingFieldNumber;
#endif  // !_MSC_VER

ProtoMerCellInfo::ProtoMerCellInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoMerCellInfo::InitAsDefaultInstance() {
}

ProtoMerCellInfo::ProtoMerCellInfo(const ProtoMerCellInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoMerCellInfo::SharedCtor() {
  _cached_size_ = 0;
  cellid_ = 0u;
  isactive_ = false;
  isuse_ = false;
  mercenaryid_ = 0u;
  strlv_ = 0u;
  luckyvalue_ = 0u;
  activetype_ = 0u;
  activenowvalue_ = 0u;
  isdead_ = false;
  relivetick_ = GOOGLE_LONGLONG(0);
  hprate_ = 0;
  eatfoodid_ = 0u;
  eatfoodnum_ = 0u;
  ranking_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoMerCellInfo::~ProtoMerCellInfo() {
  SharedDtor();
}

void ProtoMerCellInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoMerCellInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoMerCellInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoMerCellInfo_descriptor_;
}

const ProtoMerCellInfo& ProtoMerCellInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mercenary_2eproto();
  return *default_instance_;
}

ProtoMerCellInfo* ProtoMerCellInfo::default_instance_ = NULL;

ProtoMerCellInfo* ProtoMerCellInfo::New() const {
  return new ProtoMerCellInfo;
}

void ProtoMerCellInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cellid_ = 0u;
    isactive_ = false;
    isuse_ = false;
    mercenaryid_ = 0u;
    strlv_ = 0u;
    luckyvalue_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    activetype_ = 0u;
    activenowvalue_ = 0u;
    isdead_ = false;
    relivetick_ = GOOGLE_LONGLONG(0);
    hprate_ = 0;
    eatfoodid_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    eatfoodnum_ = 0u;
    ranking_ = 0u;
  }
  activeskills_.Clear();
  passskills_.Clear();
  equips_.Clear();
  merequipgird_list_.Clear();
  skillbooks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoMerCellInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cellId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cellid_)));
          set_has_cellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isActive;
        break;
      }

      // optional bool isActive = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isActive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isactive_)));
          set_has_isactive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isUse;
        break;
      }

      // optional bool isUse = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isUse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isuse_)));
          set_has_isuse();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mercenaryId;
        break;
      }

      // optional uint32 mercenaryId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mercenaryId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mercenaryid_)));
          set_has_mercenaryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_strLv;
        break;
      }

      // optional uint32 strLv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strlv_)));
          set_has_strlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_luckyValue;
        break;
      }

      // optional uint32 luckyValue = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_luckyValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &luckyvalue_)));
          set_has_luckyvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_activeSkills;
        break;
      }

      // repeated uint32 activeSkills = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activeSkills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_activeskills())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_activeskills())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_activeSkills;
        if (input->ExpectTag(64)) goto parse_passSkills;
        break;
      }

      // repeated uint32 passSkills = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_passSkills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_passskills())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_passskills())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_passSkills;
        if (input->ExpectTag(72)) goto parse_activeType;
        break;
      }

      // optional uint32 activeType = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activeType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activetype_)));
          set_has_activetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_activeNowValue;
        break;
      }

      // optional uint32 activeNowValue = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activeNowValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activenowvalue_)));
          set_has_activenowvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_equips;
        break;
      }

      // repeated .proto.message.ProtoMerEquipCell equips = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equips()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_equips;
        if (input->ExpectTag(98)) goto parse_merequipgird_list;
        break;
      }

      // repeated .proto.message.Equip merequipgird_list = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_merequipgird_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_merequipgird_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_merequipgird_list;
        if (input->ExpectTag(104)) goto parse_isDead;
        break;
      }

      // optional bool isDead = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isDead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdead_)));
          set_has_isdead();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_ReliveTick;
        break;
      }

      // optional int64 ReliveTick = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ReliveTick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &relivetick_)));
          set_has_relivetick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_HpRate;
        break;
      }

      // optional int32 HpRate = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HpRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hprate_)));
          set_has_hprate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_eatFoodId;
        break;
      }

      // optional uint32 eatFoodId = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eatFoodId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eatfoodid_)));
          set_has_eatfoodid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_eatFoodNum;
        break;
      }

      // optional uint32 eatFoodNum = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eatFoodNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eatfoodnum_)));
          set_has_eatfoodnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_skillbooks;
        break;
      }

      // repeated uint32 skillbooks = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillbooks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 144, input, this->mutable_skillbooks())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_skillbooks())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_skillbooks;
        if (input->ExpectTag(152)) goto parse_ranking;
        break;
      }

      // optional uint32 ranking = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ranking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ranking_)));
          set_has_ranking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoMerCellInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 cellId = 1;
  if (has_cellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cellid(), output);
  }

  // optional bool isActive = 2;
  if (has_isactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isactive(), output);
  }

  // optional bool isUse = 3;
  if (has_isuse()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isuse(), output);
  }

  // optional uint32 mercenaryId = 4;
  if (has_mercenaryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mercenaryid(), output);
  }

  // optional uint32 strLv = 5;
  if (has_strlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->strlv(), output);
  }

  // optional uint32 luckyValue = 6;
  if (has_luckyvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->luckyvalue(), output);
  }

  // repeated uint32 activeSkills = 7;
  for (int i = 0; i < this->activeskills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->activeskills(i), output);
  }

  // repeated uint32 passSkills = 8;
  for (int i = 0; i < this->passskills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->passskills(i), output);
  }

  // optional uint32 activeType = 9;
  if (has_activetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->activetype(), output);
  }

  // optional uint32 activeNowValue = 10;
  if (has_activenowvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->activenowvalue(), output);
  }

  // repeated .proto.message.ProtoMerEquipCell equips = 11;
  for (int i = 0; i < this->equips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->equips(i), output);
  }

  // repeated .proto.message.Equip merequipgird_list = 12;
  for (int i = 0; i < this->merequipgird_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->merequipgird_list(i), output);
  }

  // optional bool isDead = 13;
  if (has_isdead()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->isdead(), output);
  }

  // optional int64 ReliveTick = 14;
  if (has_relivetick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->relivetick(), output);
  }

  // optional int32 HpRate = 15;
  if (has_hprate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->hprate(), output);
  }

  // optional uint32 eatFoodId = 16;
  if (has_eatfoodid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->eatfoodid(), output);
  }

  // optional uint32 eatFoodNum = 17;
  if (has_eatfoodnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->eatfoodnum(), output);
  }

  // repeated uint32 skillbooks = 18;
  for (int i = 0; i < this->skillbooks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      18, this->skillbooks(i), output);
  }

  // optional uint32 ranking = 19;
  if (has_ranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->ranking(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoMerCellInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 cellId = 1;
  if (has_cellid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cellid(), target);
  }

  // optional bool isActive = 2;
  if (has_isactive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isactive(), target);
  }

  // optional bool isUse = 3;
  if (has_isuse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isuse(), target);
  }

  // optional uint32 mercenaryId = 4;
  if (has_mercenaryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->mercenaryid(), target);
  }

  // optional uint32 strLv = 5;
  if (has_strlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->strlv(), target);
  }

  // optional uint32 luckyValue = 6;
  if (has_luckyvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->luckyvalue(), target);
  }

  // repeated uint32 activeSkills = 7;
  for (int i = 0; i < this->activeskills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->activeskills(i), target);
  }

  // repeated uint32 passSkills = 8;
  for (int i = 0; i < this->passskills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->passskills(i), target);
  }

  // optional uint32 activeType = 9;
  if (has_activetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->activetype(), target);
  }

  // optional uint32 activeNowValue = 10;
  if (has_activenowvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->activenowvalue(), target);
  }

  // repeated .proto.message.ProtoMerEquipCell equips = 11;
  for (int i = 0; i < this->equips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->equips(i), target);
  }

  // repeated .proto.message.Equip merequipgird_list = 12;
  for (int i = 0; i < this->merequipgird_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->merequipgird_list(i), target);
  }

  // optional bool isDead = 13;
  if (has_isdead()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->isdead(), target);
  }

  // optional int64 ReliveTick = 14;
  if (has_relivetick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->relivetick(), target);
  }

  // optional int32 HpRate = 15;
  if (has_hprate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->hprate(), target);
  }

  // optional uint32 eatFoodId = 16;
  if (has_eatfoodid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->eatfoodid(), target);
  }

  // optional uint32 eatFoodNum = 17;
  if (has_eatfoodnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->eatfoodnum(), target);
  }

  // repeated uint32 skillbooks = 18;
  for (int i = 0; i < this->skillbooks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(18, this->skillbooks(i), target);
  }

  // optional uint32 ranking = 19;
  if (has_ranking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->ranking(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoMerCellInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cellId = 1;
    if (has_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cellid());
    }

    // optional bool isActive = 2;
    if (has_isactive()) {
      total_size += 1 + 1;
    }

    // optional bool isUse = 3;
    if (has_isuse()) {
      total_size += 1 + 1;
    }

    // optional uint32 mercenaryId = 4;
    if (has_mercenaryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mercenaryid());
    }

    // optional uint32 strLv = 5;
    if (has_strlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strlv());
    }

    // optional uint32 luckyValue = 6;
    if (has_luckyvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->luckyvalue());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 activeType = 9;
    if (has_activetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activetype());
    }

    // optional uint32 activeNowValue = 10;
    if (has_activenowvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activenowvalue());
    }

    // optional bool isDead = 13;
    if (has_isdead()) {
      total_size += 1 + 1;
    }

    // optional int64 ReliveTick = 14;
    if (has_relivetick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->relivetick());
    }

    // optional int32 HpRate = 15;
    if (has_hprate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hprate());
    }

    // optional uint32 eatFoodId = 16;
    if (has_eatfoodid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eatfoodid());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 eatFoodNum = 17;
    if (has_eatfoodnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eatfoodnum());
    }

    // optional uint32 ranking = 19;
    if (has_ranking()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ranking());
    }

  }
  // repeated uint32 activeSkills = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->activeskills_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->activeskills(i));
    }
    total_size += 1 * this->activeskills_size() + data_size;
  }

  // repeated uint32 passSkills = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->passskills_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->passskills(i));
    }
    total_size += 1 * this->passskills_size() + data_size;
  }

  // repeated .proto.message.ProtoMerEquipCell equips = 11;
  total_size += 1 * this->equips_size();
  for (int i = 0; i < this->equips_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equips(i));
  }

  // repeated .proto.message.Equip merequipgird_list = 12;
  total_size += 1 * this->merequipgird_list_size();
  for (int i = 0; i < this->merequipgird_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->merequipgird_list(i));
  }

  // repeated uint32 skillbooks = 18;
  {
    int data_size = 0;
    for (int i = 0; i < this->skillbooks_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->skillbooks(i));
    }
    total_size += 2 * this->skillbooks_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoMerCellInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoMerCellInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoMerCellInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoMerCellInfo::MergeFrom(const ProtoMerCellInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  activeskills_.MergeFrom(from.activeskills_);
  passskills_.MergeFrom(from.passskills_);
  equips_.MergeFrom(from.equips_);
  merequipgird_list_.MergeFrom(from.merequipgird_list_);
  skillbooks_.MergeFrom(from.skillbooks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cellid()) {
      set_cellid(from.cellid());
    }
    if (from.has_isactive()) {
      set_isactive(from.isactive());
    }
    if (from.has_isuse()) {
      set_isuse(from.isuse());
    }
    if (from.has_mercenaryid()) {
      set_mercenaryid(from.mercenaryid());
    }
    if (from.has_strlv()) {
      set_strlv(from.strlv());
    }
    if (from.has_luckyvalue()) {
      set_luckyvalue(from.luckyvalue());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_activetype()) {
      set_activetype(from.activetype());
    }
    if (from.has_activenowvalue()) {
      set_activenowvalue(from.activenowvalue());
    }
    if (from.has_isdead()) {
      set_isdead(from.isdead());
    }
    if (from.has_relivetick()) {
      set_relivetick(from.relivetick());
    }
    if (from.has_hprate()) {
      set_hprate(from.hprate());
    }
    if (from.has_eatfoodid()) {
      set_eatfoodid(from.eatfoodid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_eatfoodnum()) {
      set_eatfoodnum(from.eatfoodnum());
    }
    if (from.has_ranking()) {
      set_ranking(from.ranking());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoMerCellInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoMerCellInfo::CopyFrom(const ProtoMerCellInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoMerCellInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < equips_size(); i++) {
    if (!this->equips(i).IsInitialized()) return false;
  }
  return true;
}

void ProtoMerCellInfo::Swap(ProtoMerCellInfo* other) {
  if (other != this) {
    std::swap(cellid_, other->cellid_);
    std::swap(isactive_, other->isactive_);
    std::swap(isuse_, other->isuse_);
    std::swap(mercenaryid_, other->mercenaryid_);
    std::swap(strlv_, other->strlv_);
    std::swap(luckyvalue_, other->luckyvalue_);
    activeskills_.Swap(&other->activeskills_);
    passskills_.Swap(&other->passskills_);
    std::swap(activetype_, other->activetype_);
    std::swap(activenowvalue_, other->activenowvalue_);
    equips_.Swap(&other->equips_);
    merequipgird_list_.Swap(&other->merequipgird_list_);
    std::swap(isdead_, other->isdead_);
    std::swap(relivetick_, other->relivetick_);
    std::swap(hprate_, other->hprate_);
    std::swap(eatfoodid_, other->eatfoodid_);
    std::swap(eatfoodnum_, other->eatfoodnum_);
    skillbooks_.Swap(&other->skillbooks_);
    std::swap(ranking_, other->ranking_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoMerCellInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoMerCellInfo_descriptor_;
  metadata.reflection = ProtoMerCellInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoMerAllCellInfo::kAllInfoFieldNumber;
const int ProtoMerAllCellInfo::kAIStatusFieldNumber;
#endif  // !_MSC_VER

ProtoMerAllCellInfo::ProtoMerAllCellInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoMerAllCellInfo::InitAsDefaultInstance() {
}

ProtoMerAllCellInfo::ProtoMerAllCellInfo(const ProtoMerAllCellInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoMerAllCellInfo::SharedCtor() {
  _cached_size_ = 0;
  aistatus_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoMerAllCellInfo::~ProtoMerAllCellInfo() {
  SharedDtor();
}

void ProtoMerAllCellInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoMerAllCellInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoMerAllCellInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoMerAllCellInfo_descriptor_;
}

const ProtoMerAllCellInfo& ProtoMerAllCellInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mercenary_2eproto();
  return *default_instance_;
}

ProtoMerAllCellInfo* ProtoMerAllCellInfo::default_instance_ = NULL;

ProtoMerAllCellInfo* ProtoMerAllCellInfo::New() const {
  return new ProtoMerAllCellInfo;
}

void ProtoMerAllCellInfo::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    aistatus_ = 0u;
  }
  allinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoMerAllCellInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.ProtoMerCellInfo allInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_allInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_allinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_allInfo;
        if (input->ExpectTag(16)) goto parse_AIStatus;
        break;
      }

      // optional uint32 AIStatus = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AIStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aistatus_)));
          set_has_aistatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoMerAllCellInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.ProtoMerCellInfo allInfo = 1;
  for (int i = 0; i < this->allinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->allinfo(i), output);
  }

  // optional uint32 AIStatus = 2;
  if (has_aistatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->aistatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoMerAllCellInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.ProtoMerCellInfo allInfo = 1;
  for (int i = 0; i < this->allinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->allinfo(i), target);
  }

  // optional uint32 AIStatus = 2;
  if (has_aistatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->aistatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoMerAllCellInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 AIStatus = 2;
    if (has_aistatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aistatus());
    }

  }
  // repeated .proto.message.ProtoMerCellInfo allInfo = 1;
  total_size += 1 * this->allinfo_size();
  for (int i = 0; i < this->allinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->allinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoMerAllCellInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoMerAllCellInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoMerAllCellInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoMerAllCellInfo::MergeFrom(const ProtoMerAllCellInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  allinfo_.MergeFrom(from.allinfo_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_aistatus()) {
      set_aistatus(from.aistatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoMerAllCellInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoMerAllCellInfo::CopyFrom(const ProtoMerAllCellInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoMerAllCellInfo::IsInitialized() const {

  for (int i = 0; i < allinfo_size(); i++) {
    if (!this->allinfo(i).IsInitialized()) return false;
  }
  return true;
}

void ProtoMerAllCellInfo::Swap(ProtoMerAllCellInfo* other) {
  if (other != this) {
    allinfo_.Swap(&other->allinfo_);
    std::swap(aistatus_, other->aistatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoMerAllCellInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoMerAllCellInfo_descriptor_;
  metadata.reflection = ProtoMerAllCellInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Mercenary_SC_MercenaryDead::kCellIdFieldNumber;
const int Mercenary_SC_MercenaryDead::kReliveTickFieldNumber;
#endif  // !_MSC_VER

Mercenary_SC_MercenaryDead::Mercenary_SC_MercenaryDead()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Mercenary_SC_MercenaryDead::InitAsDefaultInstance() {
}

Mercenary_SC_MercenaryDead::Mercenary_SC_MercenaryDead(const Mercenary_SC_MercenaryDead& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Mercenary_SC_MercenaryDead::SharedCtor() {
  _cached_size_ = 0;
  cellid_ = 0u;
  relivetick_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mercenary_SC_MercenaryDead::~Mercenary_SC_MercenaryDead() {
  SharedDtor();
}

void Mercenary_SC_MercenaryDead::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Mercenary_SC_MercenaryDead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mercenary_SC_MercenaryDead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mercenary_SC_MercenaryDead_descriptor_;
}

const Mercenary_SC_MercenaryDead& Mercenary_SC_MercenaryDead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mercenary_2eproto();
  return *default_instance_;
}

Mercenary_SC_MercenaryDead* Mercenary_SC_MercenaryDead::default_instance_ = NULL;

Mercenary_SC_MercenaryDead* Mercenary_SC_MercenaryDead::New() const {
  return new Mercenary_SC_MercenaryDead;
}

void Mercenary_SC_MercenaryDead::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cellid_ = 0u;
    relivetick_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mercenary_SC_MercenaryDead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cellId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cellid_)));
          set_has_cellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ReliveTick;
        break;
      }

      // optional int64 ReliveTick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ReliveTick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &relivetick_)));
          set_has_relivetick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Mercenary_SC_MercenaryDead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 cellId = 1;
  if (has_cellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cellid(), output);
  }

  // optional int64 ReliveTick = 2;
  if (has_relivetick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->relivetick(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Mercenary_SC_MercenaryDead::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 cellId = 1;
  if (has_cellid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cellid(), target);
  }

  // optional int64 ReliveTick = 2;
  if (has_relivetick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->relivetick(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Mercenary_SC_MercenaryDead::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cellId = 1;
    if (has_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cellid());
    }

    // optional int64 ReliveTick = 2;
    if (has_relivetick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->relivetick());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mercenary_SC_MercenaryDead::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mercenary_SC_MercenaryDead* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mercenary_SC_MercenaryDead*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mercenary_SC_MercenaryDead::MergeFrom(const Mercenary_SC_MercenaryDead& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cellid()) {
      set_cellid(from.cellid());
    }
    if (from.has_relivetick()) {
      set_relivetick(from.relivetick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mercenary_SC_MercenaryDead::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mercenary_SC_MercenaryDead::CopyFrom(const Mercenary_SC_MercenaryDead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mercenary_SC_MercenaryDead::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Mercenary_SC_MercenaryDead::Swap(Mercenary_SC_MercenaryDead* other) {
  if (other != this) {
    std::swap(cellid_, other->cellid_);
    std::swap(relivetick_, other->relivetick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mercenary_SC_MercenaryDead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mercenary_SC_MercenaryDead_descriptor_;
  metadata.reflection = Mercenary_SC_MercenaryDead_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Mercenary_CS_GetMerInfo::Mercenary_CS_GetMerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Mercenary_CS_GetMerInfo::InitAsDefaultInstance() {
}

Mercenary_CS_GetMerInfo::Mercenary_CS_GetMerInfo(const Mercenary_CS_GetMerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Mercenary_CS_GetMerInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mercenary_CS_GetMerInfo::~Mercenary_CS_GetMerInfo() {
  SharedDtor();
}

void Mercenary_CS_GetMerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Mercenary_CS_GetMerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mercenary_CS_GetMerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mercenary_CS_GetMerInfo_descriptor_;
}

const Mercenary_CS_GetMerInfo& Mercenary_CS_GetMerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mercenary_2eproto();
  return *default_instance_;
}

Mercenary_CS_GetMerInfo* Mercenary_CS_GetMerInfo::default_instance_ = NULL;

Mercenary_CS_GetMerInfo* Mercenary_CS_GetMerInfo::New() const {
  return new Mercenary_CS_GetMerInfo;
}

void Mercenary_CS_GetMerInfo::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mercenary_CS_GetMerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Mercenary_CS_GetMerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Mercenary_CS_GetMerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Mercenary_CS_GetMerInfo::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mercenary_CS_GetMerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mercenary_CS_GetMerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mercenary_CS_GetMerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mercenary_CS_GetMerInfo::MergeFrom(const Mercenary_CS_GetMerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mercenary_CS_GetMerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mercenary_CS_GetMerInfo::CopyFrom(const Mercenary_CS_GetMerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mercenary_CS_GetMerInfo::IsInitialized() const {

  return true;
}

void Mercenary_CS_GetMerInfo::Swap(Mercenary_CS_GetMerInfo* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mercenary_CS_GetMerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mercenary_CS_GetMerInfo_descriptor_;
  metadata.reflection = Mercenary_CS_GetMerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Mercenary_SC_GetMerInfo::kInfoListFieldNumber;
const int Mercenary_SC_GetMerInfo::kGeneralSkillsFieldNumber;
#endif  // !_MSC_VER

Mercenary_SC_GetMerInfo::Mercenary_SC_GetMerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Mercenary_SC_GetMerInfo::InitAsDefaultInstance() {
}

Mercenary_SC_GetMerInfo::Mercenary_SC_GetMerInfo(const Mercenary_SC_GetMerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Mercenary_SC_GetMerInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mercenary_SC_GetMerInfo::~Mercenary_SC_GetMerInfo() {
  SharedDtor();
}

void Mercenary_SC_GetMerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Mercenary_SC_GetMerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mercenary_SC_GetMerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mercenary_SC_GetMerInfo_descriptor_;
}

const Mercenary_SC_GetMerInfo& Mercenary_SC_GetMerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mercenary_2eproto();
  return *default_instance_;
}

Mercenary_SC_GetMerInfo* Mercenary_SC_GetMerInfo::default_instance_ = NULL;

Mercenary_SC_GetMerInfo* Mercenary_SC_GetMerInfo::New() const {
  return new Mercenary_SC_GetMerInfo;
}

void Mercenary_SC_GetMerInfo::Clear() {
  infolist_.Clear();
  generalskills_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mercenary_SC_GetMerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.ProtoMerCellInfo infoList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infoList;
        if (input->ExpectTag(16)) goto parse_generalSkills;
        break;
      }

      // repeated int32 generalSkills = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_generalSkills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_generalskills())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_generalskills())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_generalSkills;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Mercenary_SC_GetMerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.ProtoMerCellInfo infoList = 1;
  for (int i = 0; i < this->infolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infolist(i), output);
  }

  // repeated int32 generalSkills = 2;
  for (int i = 0; i < this->generalskills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->generalskills(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Mercenary_SC_GetMerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.ProtoMerCellInfo infoList = 1;
  for (int i = 0; i < this->infolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infolist(i), target);
  }

  // repeated int32 generalSkills = 2;
  for (int i = 0; i < this->generalskills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->generalskills(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Mercenary_SC_GetMerInfo::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.ProtoMerCellInfo infoList = 1;
  total_size += 1 * this->infolist_size();
  for (int i = 0; i < this->infolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infolist(i));
  }

  // repeated int32 generalSkills = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->generalskills_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->generalskills(i));
    }
    total_size += 1 * this->generalskills_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mercenary_SC_GetMerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mercenary_SC_GetMerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mercenary_SC_GetMerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mercenary_SC_GetMerInfo::MergeFrom(const Mercenary_SC_GetMerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  infolist_.MergeFrom(from.infolist_);
  generalskills_.MergeFrom(from.generalskills_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mercenary_SC_GetMerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mercenary_SC_GetMerInfo::CopyFrom(const Mercenary_SC_GetMerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mercenary_SC_GetMerInfo::IsInitialized() const {

  for (int i = 0; i < infolist_size(); i++) {
    if (!this->infolist(i).IsInitialized()) return false;
  }
  return true;
}

void Mercenary_SC_GetMerInfo::Swap(Mercenary_SC_GetMerInfo* other) {
  if (other != this) {
    infolist_.Swap(&other->infolist_);
    generalskills_.Swap(&other->generalskills_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mercenary_SC_GetMerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mercenary_SC_GetMerInfo_descriptor_;
  metadata.reflection = Mercenary_SC_GetMerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Mercenary_SC_UpdateSingleMerInfo::kInfoFieldNumber;
const int Mercenary_SC_UpdateSingleMerInfo::kGeneralSkillsFieldNumber;
#endif  // !_MSC_VER

Mercenary_SC_UpdateSingleMerInfo::Mercenary_SC_UpdateSingleMerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Mercenary_SC_UpdateSingleMerInfo::InitAsDefaultInstance() {
  info_ = const_cast< ::proto::message::ProtoMerCellInfo*>(&::proto::message::ProtoMerCellInfo::default_instance());
}

Mercenary_SC_UpdateSingleMerInfo::Mercenary_SC_UpdateSingleMerInfo(const Mercenary_SC_UpdateSingleMerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Mercenary_SC_UpdateSingleMerInfo::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mercenary_SC_UpdateSingleMerInfo::~Mercenary_SC_UpdateSingleMerInfo() {
  SharedDtor();
}

void Mercenary_SC_UpdateSingleMerInfo::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void Mercenary_SC_UpdateSingleMerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mercenary_SC_UpdateSingleMerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mercenary_SC_UpdateSingleMerInfo_descriptor_;
}

const Mercenary_SC_UpdateSingleMerInfo& Mercenary_SC_UpdateSingleMerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mercenary_2eproto();
  return *default_instance_;
}

Mercenary_SC_UpdateSingleMerInfo* Mercenary_SC_UpdateSingleMerInfo::default_instance_ = NULL;

Mercenary_SC_UpdateSingleMerInfo* Mercenary_SC_UpdateSingleMerInfo::New() const {
  return new Mercenary_SC_UpdateSingleMerInfo;
}

void Mercenary_SC_UpdateSingleMerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::proto::message::ProtoMerCellInfo::Clear();
    }
  }
  generalskills_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mercenary_SC_UpdateSingleMerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.message.ProtoMerCellInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_generalSkills;
        break;
      }

      // repeated int32 generalSkills = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_generalSkills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_generalskills())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_generalskills())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_generalSkills;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Mercenary_SC_UpdateSingleMerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.message.ProtoMerCellInfo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  // repeated int32 generalSkills = 2;
  for (int i = 0; i < this->generalskills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->generalskills(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Mercenary_SC_UpdateSingleMerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.message.ProtoMerCellInfo info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  // repeated int32 generalSkills = 2;
  for (int i = 0; i < this->generalskills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->generalskills(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Mercenary_SC_UpdateSingleMerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.message.ProtoMerCellInfo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  // repeated int32 generalSkills = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->generalskills_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->generalskills(i));
    }
    total_size += 1 * this->generalskills_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mercenary_SC_UpdateSingleMerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mercenary_SC_UpdateSingleMerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mercenary_SC_UpdateSingleMerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mercenary_SC_UpdateSingleMerInfo::MergeFrom(const Mercenary_SC_UpdateSingleMerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  generalskills_.MergeFrom(from.generalskills_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::proto::message::ProtoMerCellInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mercenary_SC_UpdateSingleMerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mercenary_SC_UpdateSingleMerInfo::CopyFrom(const Mercenary_SC_UpdateSingleMerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mercenary_SC_UpdateSingleMerInfo::IsInitialized() const {

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void Mercenary_SC_UpdateSingleMerInfo::Swap(Mercenary_SC_UpdateSingleMerInfo* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    generalskills_.Swap(&other->generalskills_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mercenary_SC_UpdateSingleMerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mercenary_SC_UpdateSingleMerInfo_descriptor_;
  metadata.reflection = Mercenary_SC_UpdateSingleMerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Mercenary_CS_OperaCell::kCellIdFieldNumber;
const int Mercenary_CS_OperaCell::kOperaTypeFieldNumber;
const int Mercenary_CS_OperaCell::kParamFieldNumber;
#endif  // !_MSC_VER

Mercenary_CS_OperaCell::Mercenary_CS_OperaCell()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Mercenary_CS_OperaCell::InitAsDefaultInstance() {
}

Mercenary_CS_OperaCell::Mercenary_CS_OperaCell(const Mercenary_CS_OperaCell& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Mercenary_CS_OperaCell::SharedCtor() {
  _cached_size_ = 0;
  cellid_ = 0u;
  operatype_ = 0u;
  param_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mercenary_CS_OperaCell::~Mercenary_CS_OperaCell() {
  SharedDtor();
}

void Mercenary_CS_OperaCell::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Mercenary_CS_OperaCell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mercenary_CS_OperaCell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mercenary_CS_OperaCell_descriptor_;
}

const Mercenary_CS_OperaCell& Mercenary_CS_OperaCell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mercenary_2eproto();
  return *default_instance_;
}

Mercenary_CS_OperaCell* Mercenary_CS_OperaCell::default_instance_ = NULL;

Mercenary_CS_OperaCell* Mercenary_CS_OperaCell::New() const {
  return new Mercenary_CS_OperaCell;
}

void Mercenary_CS_OperaCell::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cellid_ = 0u;
    operatype_ = 0u;
    param_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mercenary_CS_OperaCell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cellId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cellid_)));
          set_has_cellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_operaType;
        break;
      }

      // required uint32 operaType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operaType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operatype_)));
          set_has_operatype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_param;
        break;
      }

      // optional uint32 param = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param_)));
          set_has_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Mercenary_CS_OperaCell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 cellId = 1;
  if (has_cellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cellid(), output);
  }

  // required uint32 operaType = 2;
  if (has_operatype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->operatype(), output);
  }

  // optional uint32 param = 3;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Mercenary_CS_OperaCell::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 cellId = 1;
  if (has_cellid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cellid(), target);
  }

  // required uint32 operaType = 2;
  if (has_operatype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->operatype(), target);
  }

  // optional uint32 param = 3;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Mercenary_CS_OperaCell::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cellId = 1;
    if (has_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cellid());
    }

    // required uint32 operaType = 2;
    if (has_operatype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operatype());
    }

    // optional uint32 param = 3;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mercenary_CS_OperaCell::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mercenary_CS_OperaCell* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mercenary_CS_OperaCell*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mercenary_CS_OperaCell::MergeFrom(const Mercenary_CS_OperaCell& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cellid()) {
      set_cellid(from.cellid());
    }
    if (from.has_operatype()) {
      set_operatype(from.operatype());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mercenary_CS_OperaCell::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mercenary_CS_OperaCell::CopyFrom(const Mercenary_CS_OperaCell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mercenary_CS_OperaCell::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Mercenary_CS_OperaCell::Swap(Mercenary_CS_OperaCell* other) {
  if (other != this) {
    std::swap(cellid_, other->cellid_);
    std::swap(operatype_, other->operatype_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mercenary_CS_OperaCell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mercenary_CS_OperaCell_descriptor_;
  metadata.reflection = Mercenary_CS_OperaCell_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Mercenary_SC_OperaCell::kRetFieldNumber;
#endif  // !_MSC_VER

Mercenary_SC_OperaCell::Mercenary_SC_OperaCell()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Mercenary_SC_OperaCell::InitAsDefaultInstance() {
}

Mercenary_SC_OperaCell::Mercenary_SC_OperaCell(const Mercenary_SC_OperaCell& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Mercenary_SC_OperaCell::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mercenary_SC_OperaCell::~Mercenary_SC_OperaCell() {
  SharedDtor();
}

void Mercenary_SC_OperaCell::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Mercenary_SC_OperaCell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mercenary_SC_OperaCell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mercenary_SC_OperaCell_descriptor_;
}

const Mercenary_SC_OperaCell& Mercenary_SC_OperaCell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mercenary_2eproto();
  return *default_instance_;
}

Mercenary_SC_OperaCell* Mercenary_SC_OperaCell::default_instance_ = NULL;

Mercenary_SC_OperaCell* Mercenary_SC_OperaCell::New() const {
  return new Mercenary_SC_OperaCell;
}

void Mercenary_SC_OperaCell::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mercenary_SC_OperaCell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Mercenary_SC_OperaCell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Mercenary_SC_OperaCell::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Mercenary_SC_OperaCell::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mercenary_SC_OperaCell::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mercenary_SC_OperaCell* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mercenary_SC_OperaCell*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mercenary_SC_OperaCell::MergeFrom(const Mercenary_SC_OperaCell& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mercenary_SC_OperaCell::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mercenary_SC_OperaCell::CopyFrom(const Mercenary_SC_OperaCell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mercenary_SC_OperaCell::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Mercenary_SC_OperaCell::Swap(Mercenary_SC_OperaCell* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mercenary_SC_OperaCell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mercenary_SC_OperaCell_descriptor_;
  metadata.reflection = Mercenary_SC_OperaCell_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Mercenary_CS_PutOnMerEquip::kCellIdFieldNumber;
const int Mercenary_CS_PutOnMerEquip::kUuidFieldNumber;
#endif  // !_MSC_VER

Mercenary_CS_PutOnMerEquip::Mercenary_CS_PutOnMerEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Mercenary_CS_PutOnMerEquip::InitAsDefaultInstance() {
}

Mercenary_CS_PutOnMerEquip::Mercenary_CS_PutOnMerEquip(const Mercenary_CS_PutOnMerEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Mercenary_CS_PutOnMerEquip::SharedCtor() {
  _cached_size_ = 0;
  cellid_ = 0u;
  uuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mercenary_CS_PutOnMerEquip::~Mercenary_CS_PutOnMerEquip() {
  SharedDtor();
}

void Mercenary_CS_PutOnMerEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Mercenary_CS_PutOnMerEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mercenary_CS_PutOnMerEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mercenary_CS_PutOnMerEquip_descriptor_;
}

const Mercenary_CS_PutOnMerEquip& Mercenary_CS_PutOnMerEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mercenary_2eproto();
  return *default_instance_;
}

Mercenary_CS_PutOnMerEquip* Mercenary_CS_PutOnMerEquip::default_instance_ = NULL;

Mercenary_CS_PutOnMerEquip* Mercenary_CS_PutOnMerEquip::New() const {
  return new Mercenary_CS_PutOnMerEquip;
}

void Mercenary_CS_PutOnMerEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cellid_ = 0u;
    uuid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mercenary_CS_PutOnMerEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cellId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cellid_)));
          set_has_cellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // required uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Mercenary_CS_PutOnMerEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 cellId = 1;
  if (has_cellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cellid(), output);
  }

  // required uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Mercenary_CS_PutOnMerEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 cellId = 1;
  if (has_cellid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cellid(), target);
  }

  // required uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Mercenary_CS_PutOnMerEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cellId = 1;
    if (has_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cellid());
    }

    // required uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mercenary_CS_PutOnMerEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mercenary_CS_PutOnMerEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mercenary_CS_PutOnMerEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mercenary_CS_PutOnMerEquip::MergeFrom(const Mercenary_CS_PutOnMerEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cellid()) {
      set_cellid(from.cellid());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mercenary_CS_PutOnMerEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mercenary_CS_PutOnMerEquip::CopyFrom(const Mercenary_CS_PutOnMerEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mercenary_CS_PutOnMerEquip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Mercenary_CS_PutOnMerEquip::Swap(Mercenary_CS_PutOnMerEquip* other) {
  if (other != this) {
    std::swap(cellid_, other->cellid_);
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mercenary_CS_PutOnMerEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mercenary_CS_PutOnMerEquip_descriptor_;
  metadata.reflection = Mercenary_CS_PutOnMerEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Mercenary_SC_PutOnMerEquip::kResultFieldNumber;
const int Mercenary_SC_PutOnMerEquip::kMerCellIdFieldNumber;
const int Mercenary_SC_PutOnMerEquip::kEquipListFieldNumber;
#endif  // !_MSC_VER

Mercenary_SC_PutOnMerEquip::Mercenary_SC_PutOnMerEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Mercenary_SC_PutOnMerEquip::InitAsDefaultInstance() {
}

Mercenary_SC_PutOnMerEquip::Mercenary_SC_PutOnMerEquip(const Mercenary_SC_PutOnMerEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Mercenary_SC_PutOnMerEquip::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  mercellid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mercenary_SC_PutOnMerEquip::~Mercenary_SC_PutOnMerEquip() {
  SharedDtor();
}

void Mercenary_SC_PutOnMerEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Mercenary_SC_PutOnMerEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mercenary_SC_PutOnMerEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mercenary_SC_PutOnMerEquip_descriptor_;
}

const Mercenary_SC_PutOnMerEquip& Mercenary_SC_PutOnMerEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mercenary_2eproto();
  return *default_instance_;
}

Mercenary_SC_PutOnMerEquip* Mercenary_SC_PutOnMerEquip::default_instance_ = NULL;

Mercenary_SC_PutOnMerEquip* Mercenary_SC_PutOnMerEquip::New() const {
  return new Mercenary_SC_PutOnMerEquip;
}

void Mercenary_SC_PutOnMerEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    mercellid_ = 0;
  }
  equip_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mercenary_SC_PutOnMerEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_merCellId;
        break;
      }

      // optional int32 merCellId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_merCellId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mercellid_)));
          set_has_mercellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_equip_list;
        break;
      }

      // repeated .proto.message.Equip equip_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_equip_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Mercenary_SC_PutOnMerEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 merCellId = 2;
  if (has_mercellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mercellid(), output);
  }

  // repeated .proto.message.Equip equip_list = 3;
  for (int i = 0; i < this->equip_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->equip_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Mercenary_SC_PutOnMerEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 merCellId = 2;
  if (has_mercellid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mercellid(), target);
  }

  // repeated .proto.message.Equip equip_list = 3;
  for (int i = 0; i < this->equip_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->equip_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Mercenary_SC_PutOnMerEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 merCellId = 2;
    if (has_mercellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mercellid());
    }

  }
  // repeated .proto.message.Equip equip_list = 3;
  total_size += 1 * this->equip_list_size();
  for (int i = 0; i < this->equip_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mercenary_SC_PutOnMerEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mercenary_SC_PutOnMerEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mercenary_SC_PutOnMerEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mercenary_SC_PutOnMerEquip::MergeFrom(const Mercenary_SC_PutOnMerEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_list_.MergeFrom(from.equip_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_mercellid()) {
      set_mercellid(from.mercellid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mercenary_SC_PutOnMerEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mercenary_SC_PutOnMerEquip::CopyFrom(const Mercenary_SC_PutOnMerEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mercenary_SC_PutOnMerEquip::IsInitialized() const {

  return true;
}

void Mercenary_SC_PutOnMerEquip::Swap(Mercenary_SC_PutOnMerEquip* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(mercellid_, other->mercellid_);
    equip_list_.Swap(&other->equip_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mercenary_SC_PutOnMerEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mercenary_SC_PutOnMerEquip_descriptor_;
  metadata.reflection = Mercenary_SC_PutOnMerEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Mercenary_CS_GetOffMerEquip::kCellIDFieldNumber;
const int Mercenary_CS_GetOffMerEquip::kUuidFieldNumber;
#endif  // !_MSC_VER

Mercenary_CS_GetOffMerEquip::Mercenary_CS_GetOffMerEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Mercenary_CS_GetOffMerEquip::InitAsDefaultInstance() {
}

Mercenary_CS_GetOffMerEquip::Mercenary_CS_GetOffMerEquip(const Mercenary_CS_GetOffMerEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Mercenary_CS_GetOffMerEquip::SharedCtor() {
  _cached_size_ = 0;
  cellid_ = 0u;
  uuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mercenary_CS_GetOffMerEquip::~Mercenary_CS_GetOffMerEquip() {
  SharedDtor();
}

void Mercenary_CS_GetOffMerEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Mercenary_CS_GetOffMerEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mercenary_CS_GetOffMerEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mercenary_CS_GetOffMerEquip_descriptor_;
}

const Mercenary_CS_GetOffMerEquip& Mercenary_CS_GetOffMerEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mercenary_2eproto();
  return *default_instance_;
}

Mercenary_CS_GetOffMerEquip* Mercenary_CS_GetOffMerEquip::default_instance_ = NULL;

Mercenary_CS_GetOffMerEquip* Mercenary_CS_GetOffMerEquip::New() const {
  return new Mercenary_CS_GetOffMerEquip;
}

void Mercenary_CS_GetOffMerEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cellid_ = 0u;
    uuid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mercenary_CS_GetOffMerEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cellID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cellid_)));
          set_has_cellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // required uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Mercenary_CS_GetOffMerEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cellID = 1;
  if (has_cellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cellid(), output);
  }

  // required uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Mercenary_CS_GetOffMerEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cellID = 1;
  if (has_cellid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cellid(), target);
  }

  // required uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Mercenary_CS_GetOffMerEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cellID = 1;
    if (has_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cellid());
    }

    // required uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mercenary_CS_GetOffMerEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mercenary_CS_GetOffMerEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mercenary_CS_GetOffMerEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mercenary_CS_GetOffMerEquip::MergeFrom(const Mercenary_CS_GetOffMerEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cellid()) {
      set_cellid(from.cellid());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mercenary_CS_GetOffMerEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mercenary_CS_GetOffMerEquip::CopyFrom(const Mercenary_CS_GetOffMerEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mercenary_CS_GetOffMerEquip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void Mercenary_CS_GetOffMerEquip::Swap(Mercenary_CS_GetOffMerEquip* other) {
  if (other != this) {
    std::swap(cellid_, other->cellid_);
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mercenary_CS_GetOffMerEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mercenary_CS_GetOffMerEquip_descriptor_;
  metadata.reflection = Mercenary_CS_GetOffMerEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Mercenary_SC_GetOffMerEquip::kResultFieldNumber;
const int Mercenary_SC_GetOffMerEquip::kMerCellIdFieldNumber;
const int Mercenary_SC_GetOffMerEquip::kEquipListFieldNumber;
#endif  // !_MSC_VER

Mercenary_SC_GetOffMerEquip::Mercenary_SC_GetOffMerEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Mercenary_SC_GetOffMerEquip::InitAsDefaultInstance() {
  equip_list_ = const_cast< ::proto::message::Equip*>(&::proto::message::Equip::default_instance());
}

Mercenary_SC_GetOffMerEquip::Mercenary_SC_GetOffMerEquip(const Mercenary_SC_GetOffMerEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Mercenary_SC_GetOffMerEquip::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  mercellid_ = 0;
  equip_list_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mercenary_SC_GetOffMerEquip::~Mercenary_SC_GetOffMerEquip() {
  SharedDtor();
}

void Mercenary_SC_GetOffMerEquip::SharedDtor() {
  if (this != default_instance_) {
    delete equip_list_;
  }
}

void Mercenary_SC_GetOffMerEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mercenary_SC_GetOffMerEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mercenary_SC_GetOffMerEquip_descriptor_;
}

const Mercenary_SC_GetOffMerEquip& Mercenary_SC_GetOffMerEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mercenary_2eproto();
  return *default_instance_;
}

Mercenary_SC_GetOffMerEquip* Mercenary_SC_GetOffMerEquip::default_instance_ = NULL;

Mercenary_SC_GetOffMerEquip* Mercenary_SC_GetOffMerEquip::New() const {
  return new Mercenary_SC_GetOffMerEquip;
}

void Mercenary_SC_GetOffMerEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    mercellid_ = 0;
    if (has_equip_list()) {
      if (equip_list_ != NULL) equip_list_->::proto::message::Equip::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mercenary_SC_GetOffMerEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_merCellId;
        break;
      }

      // optional int32 merCellId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_merCellId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mercellid_)));
          set_has_mercellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_equip_list;
        break;
      }

      // optional .proto.message.Equip equip_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equip_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Mercenary_SC_GetOffMerEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 merCellId = 2;
  if (has_mercellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mercellid(), output);
  }

  // optional .proto.message.Equip equip_list = 3;
  if (has_equip_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->equip_list(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Mercenary_SC_GetOffMerEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 merCellId = 2;
  if (has_mercellid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mercellid(), target);
  }

  // optional .proto.message.Equip equip_list = 3;
  if (has_equip_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->equip_list(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Mercenary_SC_GetOffMerEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 merCellId = 2;
    if (has_mercellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mercellid());
    }

    // optional .proto.message.Equip equip_list = 3;
    if (has_equip_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equip_list());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mercenary_SC_GetOffMerEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mercenary_SC_GetOffMerEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mercenary_SC_GetOffMerEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mercenary_SC_GetOffMerEquip::MergeFrom(const Mercenary_SC_GetOffMerEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_mercellid()) {
      set_mercellid(from.mercellid());
    }
    if (from.has_equip_list()) {
      mutable_equip_list()->::proto::message::Equip::MergeFrom(from.equip_list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mercenary_SC_GetOffMerEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mercenary_SC_GetOffMerEquip::CopyFrom(const Mercenary_SC_GetOffMerEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mercenary_SC_GetOffMerEquip::IsInitialized() const {

  return true;
}

void Mercenary_SC_GetOffMerEquip::Swap(Mercenary_SC_GetOffMerEquip* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(mercellid_, other->mercellid_);
    std::swap(equip_list_, other->equip_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mercenary_SC_GetOffMerEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mercenary_SC_GetOffMerEquip_descriptor_;
  metadata.reflection = Mercenary_SC_GetOffMerEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Mercenary_CS_UpgSkill::kSkillidFieldNumber;
#endif  // !_MSC_VER

Mercenary_CS_UpgSkill::Mercenary_CS_UpgSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Mercenary_CS_UpgSkill::InitAsDefaultInstance() {
}

Mercenary_CS_UpgSkill::Mercenary_CS_UpgSkill(const Mercenary_CS_UpgSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Mercenary_CS_UpgSkill::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mercenary_CS_UpgSkill::~Mercenary_CS_UpgSkill() {
  SharedDtor();
}

void Mercenary_CS_UpgSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Mercenary_CS_UpgSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mercenary_CS_UpgSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mercenary_CS_UpgSkill_descriptor_;
}

const Mercenary_CS_UpgSkill& Mercenary_CS_UpgSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mercenary_2eproto();
  return *default_instance_;
}

Mercenary_CS_UpgSkill* Mercenary_CS_UpgSkill::default_instance_ = NULL;

Mercenary_CS_UpgSkill* Mercenary_CS_UpgSkill::New() const {
  return new Mercenary_CS_UpgSkill;
}

void Mercenary_CS_UpgSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mercenary_CS_UpgSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 skillid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Mercenary_CS_UpgSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 skillid = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skillid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Mercenary_CS_UpgSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 skillid = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skillid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Mercenary_CS_UpgSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 skillid = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mercenary_CS_UpgSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mercenary_CS_UpgSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mercenary_CS_UpgSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mercenary_CS_UpgSkill::MergeFrom(const Mercenary_CS_UpgSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mercenary_CS_UpgSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mercenary_CS_UpgSkill::CopyFrom(const Mercenary_CS_UpgSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mercenary_CS_UpgSkill::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Mercenary_CS_UpgSkill::Swap(Mercenary_CS_UpgSkill* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mercenary_CS_UpgSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mercenary_CS_UpgSkill_descriptor_;
  metadata.reflection = Mercenary_CS_UpgSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Mercenary_SC_UpgSkill::kRetFieldNumber;
#endif  // !_MSC_VER

Mercenary_SC_UpgSkill::Mercenary_SC_UpgSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Mercenary_SC_UpgSkill::InitAsDefaultInstance() {
}

Mercenary_SC_UpgSkill::Mercenary_SC_UpgSkill(const Mercenary_SC_UpgSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Mercenary_SC_UpgSkill::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mercenary_SC_UpgSkill::~Mercenary_SC_UpgSkill() {
  SharedDtor();
}

void Mercenary_SC_UpgSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Mercenary_SC_UpgSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mercenary_SC_UpgSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mercenary_SC_UpgSkill_descriptor_;
}

const Mercenary_SC_UpgSkill& Mercenary_SC_UpgSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mercenary_2eproto();
  return *default_instance_;
}

Mercenary_SC_UpgSkill* Mercenary_SC_UpgSkill::default_instance_ = NULL;

Mercenary_SC_UpgSkill* Mercenary_SC_UpgSkill::New() const {
  return new Mercenary_SC_UpgSkill;
}

void Mercenary_SC_UpgSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mercenary_SC_UpgSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Mercenary_SC_UpgSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Mercenary_SC_UpgSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Mercenary_SC_UpgSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mercenary_SC_UpgSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mercenary_SC_UpgSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mercenary_SC_UpgSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mercenary_SC_UpgSkill::MergeFrom(const Mercenary_SC_UpgSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mercenary_SC_UpgSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mercenary_SC_UpgSkill::CopyFrom(const Mercenary_SC_UpgSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mercenary_SC_UpgSkill::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Mercenary_SC_UpgSkill::Swap(Mercenary_SC_UpgSkill* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mercenary_SC_UpgSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mercenary_SC_UpgSkill_descriptor_;
  metadata.reflection = Mercenary_SC_UpgSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Mercenary_CS_ChangeAI::kStatusFieldNumber;
#endif  // !_MSC_VER

Mercenary_CS_ChangeAI::Mercenary_CS_ChangeAI()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Mercenary_CS_ChangeAI::InitAsDefaultInstance() {
}

Mercenary_CS_ChangeAI::Mercenary_CS_ChangeAI(const Mercenary_CS_ChangeAI& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Mercenary_CS_ChangeAI::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mercenary_CS_ChangeAI::~Mercenary_CS_ChangeAI() {
  SharedDtor();
}

void Mercenary_CS_ChangeAI::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Mercenary_CS_ChangeAI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mercenary_CS_ChangeAI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mercenary_CS_ChangeAI_descriptor_;
}

const Mercenary_CS_ChangeAI& Mercenary_CS_ChangeAI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mercenary_2eproto();
  return *default_instance_;
}

Mercenary_CS_ChangeAI* Mercenary_CS_ChangeAI::default_instance_ = NULL;

Mercenary_CS_ChangeAI* Mercenary_CS_ChangeAI::New() const {
  return new Mercenary_CS_ChangeAI;
}

void Mercenary_CS_ChangeAI::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mercenary_CS_ChangeAI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Mercenary_CS_ChangeAI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Mercenary_CS_ChangeAI::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Mercenary_CS_ChangeAI::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mercenary_CS_ChangeAI::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mercenary_CS_ChangeAI* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mercenary_CS_ChangeAI*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mercenary_CS_ChangeAI::MergeFrom(const Mercenary_CS_ChangeAI& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mercenary_CS_ChangeAI::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mercenary_CS_ChangeAI::CopyFrom(const Mercenary_CS_ChangeAI& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mercenary_CS_ChangeAI::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Mercenary_CS_ChangeAI::Swap(Mercenary_CS_ChangeAI* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mercenary_CS_ChangeAI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mercenary_CS_ChangeAI_descriptor_;
  metadata.reflection = Mercenary_CS_ChangeAI_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Mercenary_SC_ChangeAI::kRetFieldNumber;
const int Mercenary_SC_ChangeAI::kStatusFieldNumber;
#endif  // !_MSC_VER

Mercenary_SC_ChangeAI::Mercenary_SC_ChangeAI()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Mercenary_SC_ChangeAI::InitAsDefaultInstance() {
}

Mercenary_SC_ChangeAI::Mercenary_SC_ChangeAI(const Mercenary_SC_ChangeAI& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Mercenary_SC_ChangeAI::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mercenary_SC_ChangeAI::~Mercenary_SC_ChangeAI() {
  SharedDtor();
}

void Mercenary_SC_ChangeAI::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Mercenary_SC_ChangeAI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mercenary_SC_ChangeAI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mercenary_SC_ChangeAI_descriptor_;
}

const Mercenary_SC_ChangeAI& Mercenary_SC_ChangeAI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mercenary_2eproto();
  return *default_instance_;
}

Mercenary_SC_ChangeAI* Mercenary_SC_ChangeAI::default_instance_ = NULL;

Mercenary_SC_ChangeAI* Mercenary_SC_ChangeAI::New() const {
  return new Mercenary_SC_ChangeAI;
}

void Mercenary_SC_ChangeAI::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mercenary_SC_ChangeAI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required int32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Mercenary_SC_ChangeAI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // required int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Mercenary_SC_ChangeAI::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // required int32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Mercenary_SC_ChangeAI::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // required int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mercenary_SC_ChangeAI::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mercenary_SC_ChangeAI* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mercenary_SC_ChangeAI*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mercenary_SC_ChangeAI::MergeFrom(const Mercenary_SC_ChangeAI& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mercenary_SC_ChangeAI::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mercenary_SC_ChangeAI::CopyFrom(const Mercenary_SC_ChangeAI& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mercenary_SC_ChangeAI::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Mercenary_SC_ChangeAI::Swap(Mercenary_SC_ChangeAI* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mercenary_SC_ChangeAI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mercenary_SC_ChangeAI_descriptor_;
  metadata.reflection = Mercenary_SC_ChangeAI_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

// @@protoc_insertion_point(global_scope)
