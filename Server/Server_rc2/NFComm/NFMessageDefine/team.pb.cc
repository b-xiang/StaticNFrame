// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: team.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "team.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

namespace {

const ::google::protobuf::Descriptor* ProtoTeamManInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoTeamManInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoTeamInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoTeamInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Team_SC_UpdateTeamLevelInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Team_SC_UpdateTeamLevelInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoTeamListTeamInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoTeamListTeamInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoTeamOutObj_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoTeamOutObj_reflection_ = NULL;
const ::google::protobuf::Descriptor* Team_CS_SetTeamOutObj_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Team_CS_SetTeamOutObj_reflection_ = NULL;
const ::google::protobuf::Descriptor* Team_SC_SetTeamOutObj_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Team_SC_SetTeamOutObj_reflection_ = NULL;
const ::google::protobuf::Descriptor* Team_CS_MatchingQueueInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Team_CS_MatchingQueueInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Team_SC_MatchingQueueInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Team_SC_MatchingQueueInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Team_CS_GetTeamList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Team_CS_GetTeamList_reflection_ = NULL;
const ::google::protobuf::Descriptor* Team_SC_GetTeamList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Team_SC_GetTeamList_reflection_ = NULL;
const ::google::protobuf::Descriptor* Team_CS_CreateTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Team_CS_CreateTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* Team_SC_CreateTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Team_SC_CreateTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* Team_CS_ApplyTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Team_CS_ApplyTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* Team_SC_ApplyTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Team_SC_ApplyTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* Team_CS_TeamQuit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Team_CS_TeamQuit_reflection_ = NULL;
const ::google::protobuf::Descriptor* Team_SC_TeamQuit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Team_SC_TeamQuit_reflection_ = NULL;
const ::google::protobuf::Descriptor* Team_CS_TeamAppoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Team_CS_TeamAppoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* Team_SC_TeamAppoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Team_SC_TeamAppoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* Team_CS_TeamKick_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Team_CS_TeamKick_reflection_ = NULL;
const ::google::protobuf::Descriptor* Team_SC_TeamKick_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Team_SC_TeamKick_reflection_ = NULL;
const ::google::protobuf::Descriptor* Team_CS_TempLeave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Team_CS_TempLeave_reflection_ = NULL;
const ::google::protobuf::Descriptor* Team_SC_TempLeave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Team_SC_TempLeave_reflection_ = NULL;
const ::google::protobuf::Descriptor* Team_CS_TeamAuto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Team_CS_TeamAuto_reflection_ = NULL;
const ::google::protobuf::Descriptor* Team_SC_TeamAuto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Team_SC_TeamAuto_reflection_ = NULL;
const ::google::protobuf::Descriptor* Team_CS_MemberAuto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Team_CS_MemberAuto_reflection_ = NULL;
const ::google::protobuf::Descriptor* Team_SC_MemberAuto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Team_SC_MemberAuto_reflection_ = NULL;
const ::google::protobuf::Descriptor* Team_CS_TeamInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Team_CS_TeamInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* Team_SC_TeamInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Team_SC_TeamInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* Team_CS_SetTeamBeInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Team_CS_SetTeamBeInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* Team_SC_SetTeamBeInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Team_SC_SetTeamBeInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* Team_CS_SetTeamAllow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Team_CS_SetTeamAllow_reflection_ = NULL;
const ::google::protobuf::Descriptor* Team_SC_SetTeamAllow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Team_SC_SetTeamAllow_reflection_ = NULL;
const ::google::protobuf::Descriptor* Team_CS_SetTeamAllowOneTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Team_CS_SetTeamAllowOneTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* Team_SC_SetTeamAllowOneTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Team_SC_SetTeamAllowOneTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* Team_CS_UpdateTeamInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Team_CS_UpdateTeamInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Team_SC_UpdateTeamInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Team_SC_UpdateTeamInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Team_SC_UpdateTeamBeInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Team_SC_UpdateTeamBeInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* Team_SC_UpdateApplyList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Team_SC_UpdateApplyList_reflection_ = NULL;
const ::google::protobuf::Descriptor* Team_SC_UpdateTeamMemberTick_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Team_SC_UpdateTeamMemberTick_reflection_ = NULL;
const ::google::protobuf::Descriptor* Team_CS_FollowLeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Team_CS_FollowLeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* Team_SC_FollowLeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Team_SC_FollowLeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* Team_CS_SummonFollower_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Team_CS_SummonFollower_reflection_ = NULL;
const ::google::protobuf::Descriptor* Team_SC_SummonFollower_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Team_SC_SummonFollower_reflection_ = NULL;
const ::google::protobuf::Descriptor* Team_SC_LeaderSummon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Team_SC_LeaderSummon_reflection_ = NULL;
const ::google::protobuf::Descriptor* Team_CS_SetIgnoreTeamInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Team_CS_SetIgnoreTeamInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* Team_SC_SetIgnoreTeamInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Team_SC_SetIgnoreTeamInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* Team_CS_QueryIgnoreTeamInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Team_CS_QueryIgnoreTeamInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* Team_SC_QueryIgnoreTeamInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Team_SC_QueryIgnoreTeamInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* Team_SC_ErrorInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Team_SC_ErrorInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoTeamManHPInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoTeamManHPInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Team_SC_UpdateCurrentHp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Team_SC_UpdateCurrentHp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Team_CS_TeamReady_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Team_CS_TeamReady_reflection_ = NULL;
const ::google::protobuf::Descriptor* Team_SC_TeamReady_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Team_SC_TeamReady_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_team_2eproto() {
  protobuf_AddDesc_team_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "team.proto");
  GOOGLE_CHECK(file != NULL);
  ProtoTeamManInfo_descriptor_ = file->message_type(0);
  static const int ProtoTeamManInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamManInfo, plyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamManInfo, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamManInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamManInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamManInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamManInfo, equipid_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamManInfo, plyuuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamManInfo, identity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamManInfo, combat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamManInfo, isready_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamManInfo, demonhunterlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamManInfo, suit_id_),
  };
  ProtoTeamManInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoTeamManInfo_descriptor_,
      ProtoTeamManInfo::default_instance_,
      ProtoTeamManInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamManInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamManInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoTeamManInfo));
  ProtoTeamInfo_descriptor_ = file->message_type(1);
  static const int ProtoTeamInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamInfo, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamInfo, numlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamInfo, leaderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamInfo, teamauto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamInfo, teamoutobj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamInfo, teammanlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamInfo, needcombat_),
  };
  ProtoTeamInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoTeamInfo_descriptor_,
      ProtoTeamInfo::default_instance_,
      ProtoTeamInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoTeamInfo));
  Team_SC_UpdateTeamLevelInfo_descriptor_ = file->message_type(2);
  static const int Team_SC_UpdateTeamLevelInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_UpdateTeamLevelInfo, plyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_UpdateTeamLevelInfo, level_),
  };
  Team_SC_UpdateTeamLevelInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Team_SC_UpdateTeamLevelInfo_descriptor_,
      Team_SC_UpdateTeamLevelInfo::default_instance_,
      Team_SC_UpdateTeamLevelInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_UpdateTeamLevelInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_UpdateTeamLevelInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Team_SC_UpdateTeamLevelInfo));
  ProtoTeamListTeamInfo_descriptor_ = file->message_type(3);
  static const int ProtoTeamListTeamInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamListTeamInfo, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamListTeamInfo, peoplenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamListTeamInfo, numlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamListTeamInfo, leaderinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamListTeamInfo, teamoutobj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamListTeamInfo, totalcombat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamListTeamInfo, leadercombat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamListTeamInfo, needcombat_),
  };
  ProtoTeamListTeamInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoTeamListTeamInfo_descriptor_,
      ProtoTeamListTeamInfo::default_instance_,
      ProtoTeamListTeamInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamListTeamInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamListTeamInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoTeamListTeamInfo));
  ProtoTeamOutObj_descriptor_ = file->message_type(4);
  static const int ProtoTeamOutObj_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamOutObj, obj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamOutObj, levelmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamOutObj, levelmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamOutObj, needcombat_),
  };
  ProtoTeamOutObj_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoTeamOutObj_descriptor_,
      ProtoTeamOutObj::default_instance_,
      ProtoTeamOutObj_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamOutObj, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamOutObj, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoTeamOutObj));
  Team_CS_SetTeamOutObj_descriptor_ = file->message_type(5);
  static const int Team_CS_SetTeamOutObj_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_SetTeamOutObj, obj_),
  };
  Team_CS_SetTeamOutObj_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Team_CS_SetTeamOutObj_descriptor_,
      Team_CS_SetTeamOutObj::default_instance_,
      Team_CS_SetTeamOutObj_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_SetTeamOutObj, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_SetTeamOutObj, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Team_CS_SetTeamOutObj));
  Team_SC_SetTeamOutObj_descriptor_ = file->message_type(6);
  static const int Team_SC_SetTeamOutObj_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_SetTeamOutObj, result_),
  };
  Team_SC_SetTeamOutObj_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Team_SC_SetTeamOutObj_descriptor_,
      Team_SC_SetTeamOutObj::default_instance_,
      Team_SC_SetTeamOutObj_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_SetTeamOutObj, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_SetTeamOutObj, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Team_SC_SetTeamOutObj));
  Team_CS_MatchingQueueInfo_descriptor_ = file->message_type(7);
  static const int Team_CS_MatchingQueueInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_MatchingQueueInfo, obj_),
  };
  Team_CS_MatchingQueueInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Team_CS_MatchingQueueInfo_descriptor_,
      Team_CS_MatchingQueueInfo::default_instance_,
      Team_CS_MatchingQueueInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_MatchingQueueInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_MatchingQueueInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Team_CS_MatchingQueueInfo));
  Team_SC_MatchingQueueInfo_descriptor_ = file->message_type(8);
  static const int Team_SC_MatchingQueueInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_MatchingQueueInfo, nteamnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_MatchingQueueInfo, nsinglenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_MatchingQueueInfo, obj_),
  };
  Team_SC_MatchingQueueInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Team_SC_MatchingQueueInfo_descriptor_,
      Team_SC_MatchingQueueInfo::default_instance_,
      Team_SC_MatchingQueueInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_MatchingQueueInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_MatchingQueueInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Team_SC_MatchingQueueInfo));
  Team_CS_GetTeamList_descriptor_ = file->message_type(9);
  static const int Team_CS_GetTeamList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_GetTeamList, obj_),
  };
  Team_CS_GetTeamList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Team_CS_GetTeamList_descriptor_,
      Team_CS_GetTeamList::default_instance_,
      Team_CS_GetTeamList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_GetTeamList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_GetTeamList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Team_CS_GetTeamList));
  Team_SC_GetTeamList_descriptor_ = file->message_type(10);
  static const int Team_SC_GetTeamList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_GetTeamList, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_GetTeamList, teaminfo_),
  };
  Team_SC_GetTeamList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Team_SC_GetTeamList_descriptor_,
      Team_SC_GetTeamList::default_instance_,
      Team_SC_GetTeamList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_GetTeamList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_GetTeamList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Team_SC_GetTeamList));
  Team_CS_CreateTeam_descriptor_ = file->message_type(11);
  static const int Team_CS_CreateTeam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_CreateTeam, needcombat_),
  };
  Team_CS_CreateTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Team_CS_CreateTeam_descriptor_,
      Team_CS_CreateTeam::default_instance_,
      Team_CS_CreateTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_CreateTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_CreateTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Team_CS_CreateTeam));
  Team_SC_CreateTeam_descriptor_ = file->message_type(12);
  static const int Team_SC_CreateTeam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_CreateTeam, result_),
  };
  Team_SC_CreateTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Team_SC_CreateTeam_descriptor_,
      Team_SC_CreateTeam::default_instance_,
      Team_SC_CreateTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_CreateTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_CreateTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Team_SC_CreateTeam));
  Team_CS_ApplyTeam_descriptor_ = file->message_type(13);
  static const int Team_CS_ApplyTeam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_ApplyTeam, teamid_),
  };
  Team_CS_ApplyTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Team_CS_ApplyTeam_descriptor_,
      Team_CS_ApplyTeam::default_instance_,
      Team_CS_ApplyTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_ApplyTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_ApplyTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Team_CS_ApplyTeam));
  Team_SC_ApplyTeam_descriptor_ = file->message_type(14);
  static const int Team_SC_ApplyTeam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_ApplyTeam, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_ApplyTeam, teamid_),
  };
  Team_SC_ApplyTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Team_SC_ApplyTeam_descriptor_,
      Team_SC_ApplyTeam::default_instance_,
      Team_SC_ApplyTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_ApplyTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_ApplyTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Team_SC_ApplyTeam));
  Team_CS_TeamQuit_descriptor_ = file->message_type(15);
  static const int Team_CS_TeamQuit_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_TeamQuit, teamid_),
  };
  Team_CS_TeamQuit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Team_CS_TeamQuit_descriptor_,
      Team_CS_TeamQuit::default_instance_,
      Team_CS_TeamQuit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_TeamQuit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_TeamQuit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Team_CS_TeamQuit));
  Team_SC_TeamQuit_descriptor_ = file->message_type(16);
  static const int Team_SC_TeamQuit_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_TeamQuit, result_),
  };
  Team_SC_TeamQuit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Team_SC_TeamQuit_descriptor_,
      Team_SC_TeamQuit::default_instance_,
      Team_SC_TeamQuit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_TeamQuit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_TeamQuit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Team_SC_TeamQuit));
  Team_CS_TeamAppoint_descriptor_ = file->message_type(17);
  static const int Team_CS_TeamAppoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_TeamAppoint, plyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_TeamAppoint, appoint_),
  };
  Team_CS_TeamAppoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Team_CS_TeamAppoint_descriptor_,
      Team_CS_TeamAppoint::default_instance_,
      Team_CS_TeamAppoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_TeamAppoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_TeamAppoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Team_CS_TeamAppoint));
  Team_SC_TeamAppoint_descriptor_ = file->message_type(18);
  static const int Team_SC_TeamAppoint_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_TeamAppoint, result_),
  };
  Team_SC_TeamAppoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Team_SC_TeamAppoint_descriptor_,
      Team_SC_TeamAppoint::default_instance_,
      Team_SC_TeamAppoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_TeamAppoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_TeamAppoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Team_SC_TeamAppoint));
  Team_CS_TeamKick_descriptor_ = file->message_type(19);
  static const int Team_CS_TeamKick_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_TeamKick, plyid_),
  };
  Team_CS_TeamKick_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Team_CS_TeamKick_descriptor_,
      Team_CS_TeamKick::default_instance_,
      Team_CS_TeamKick_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_TeamKick, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_TeamKick, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Team_CS_TeamKick));
  Team_SC_TeamKick_descriptor_ = file->message_type(20);
  static const int Team_SC_TeamKick_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_TeamKick, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_TeamKick, bekickname_),
  };
  Team_SC_TeamKick_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Team_SC_TeamKick_descriptor_,
      Team_SC_TeamKick::default_instance_,
      Team_SC_TeamKick_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_TeamKick, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_TeamKick, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Team_SC_TeamKick));
  Team_CS_TempLeave_descriptor_ = file->message_type(21);
  static const int Team_CS_TempLeave_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_TempLeave, plyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_TempLeave, status_),
  };
  Team_CS_TempLeave_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Team_CS_TempLeave_descriptor_,
      Team_CS_TempLeave::default_instance_,
      Team_CS_TempLeave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_TempLeave, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_TempLeave, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Team_CS_TempLeave));
  Team_SC_TempLeave_descriptor_ = file->message_type(22);
  static const int Team_SC_TempLeave_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_TempLeave, result_),
  };
  Team_SC_TempLeave_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Team_SC_TempLeave_descriptor_,
      Team_SC_TempLeave::default_instance_,
      Team_SC_TempLeave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_TempLeave, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_TempLeave, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Team_SC_TempLeave));
  Team_CS_TeamAuto_descriptor_ = file->message_type(23);
  static const int Team_CS_TeamAuto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_TeamAuto, isauto_),
  };
  Team_CS_TeamAuto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Team_CS_TeamAuto_descriptor_,
      Team_CS_TeamAuto::default_instance_,
      Team_CS_TeamAuto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_TeamAuto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_TeamAuto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Team_CS_TeamAuto));
  Team_SC_TeamAuto_descriptor_ = file->message_type(24);
  static const int Team_SC_TeamAuto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_TeamAuto, result_),
  };
  Team_SC_TeamAuto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Team_SC_TeamAuto_descriptor_,
      Team_SC_TeamAuto::default_instance_,
      Team_SC_TeamAuto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_TeamAuto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_TeamAuto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Team_SC_TeamAuto));
  Team_CS_MemberAuto_descriptor_ = file->message_type(25);
  static const int Team_CS_MemberAuto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_MemberAuto, isauto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_MemberAuto, obj_),
  };
  Team_CS_MemberAuto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Team_CS_MemberAuto_descriptor_,
      Team_CS_MemberAuto::default_instance_,
      Team_CS_MemberAuto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_MemberAuto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_MemberAuto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Team_CS_MemberAuto));
  Team_SC_MemberAuto_descriptor_ = file->message_type(26);
  static const int Team_SC_MemberAuto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_MemberAuto, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_MemberAuto, isauto_),
  };
  Team_SC_MemberAuto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Team_SC_MemberAuto_descriptor_,
      Team_SC_MemberAuto::default_instance_,
      Team_SC_MemberAuto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_MemberAuto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_MemberAuto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Team_SC_MemberAuto));
  Team_CS_TeamInvite_descriptor_ = file->message_type(27);
  static const int Team_CS_TeamInvite_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_TeamInvite, plyid_),
  };
  Team_CS_TeamInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Team_CS_TeamInvite_descriptor_,
      Team_CS_TeamInvite::default_instance_,
      Team_CS_TeamInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_TeamInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_TeamInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Team_CS_TeamInvite));
  Team_SC_TeamInvite_descriptor_ = file->message_type(28);
  static const int Team_SC_TeamInvite_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_TeamInvite, result_),
  };
  Team_SC_TeamInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Team_SC_TeamInvite_descriptor_,
      Team_SC_TeamInvite::default_instance_,
      Team_SC_TeamInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_TeamInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_TeamInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Team_SC_TeamInvite));
  Team_CS_SetTeamBeInvite_descriptor_ = file->message_type(29);
  static const int Team_CS_SetTeamBeInvite_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_SetTeamBeInvite, allow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_SetTeamBeInvite, teamid_),
  };
  Team_CS_SetTeamBeInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Team_CS_SetTeamBeInvite_descriptor_,
      Team_CS_SetTeamBeInvite::default_instance_,
      Team_CS_SetTeamBeInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_SetTeamBeInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_SetTeamBeInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Team_CS_SetTeamBeInvite));
  Team_SC_SetTeamBeInvite_descriptor_ = file->message_type(30);
  static const int Team_SC_SetTeamBeInvite_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_SetTeamBeInvite, result_),
  };
  Team_SC_SetTeamBeInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Team_SC_SetTeamBeInvite_descriptor_,
      Team_SC_SetTeamBeInvite::default_instance_,
      Team_SC_SetTeamBeInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_SetTeamBeInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_SetTeamBeInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Team_SC_SetTeamBeInvite));
  Team_CS_SetTeamAllow_descriptor_ = file->message_type(31);
  static const int Team_CS_SetTeamAllow_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_SetTeamAllow, plyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_SetTeamAllow, allow_),
  };
  Team_CS_SetTeamAllow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Team_CS_SetTeamAllow_descriptor_,
      Team_CS_SetTeamAllow::default_instance_,
      Team_CS_SetTeamAllow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_SetTeamAllow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_SetTeamAllow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Team_CS_SetTeamAllow));
  Team_SC_SetTeamAllow_descriptor_ = file->message_type(32);
  static const int Team_SC_SetTeamAllow_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_SetTeamAllow, result_),
  };
  Team_SC_SetTeamAllow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Team_SC_SetTeamAllow_descriptor_,
      Team_SC_SetTeamAllow::default_instance_,
      Team_SC_SetTeamAllow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_SetTeamAllow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_SetTeamAllow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Team_SC_SetTeamAllow));
  Team_CS_SetTeamAllowOneTime_descriptor_ = file->message_type(33);
  static const int Team_CS_SetTeamAllowOneTime_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_SetTeamAllowOneTime, allow_),
  };
  Team_CS_SetTeamAllowOneTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Team_CS_SetTeamAllowOneTime_descriptor_,
      Team_CS_SetTeamAllowOneTime::default_instance_,
      Team_CS_SetTeamAllowOneTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_SetTeamAllowOneTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_SetTeamAllowOneTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Team_CS_SetTeamAllowOneTime));
  Team_SC_SetTeamAllowOneTime_descriptor_ = file->message_type(34);
  static const int Team_SC_SetTeamAllowOneTime_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_SetTeamAllowOneTime, result_),
  };
  Team_SC_SetTeamAllowOneTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Team_SC_SetTeamAllowOneTime_descriptor_,
      Team_SC_SetTeamAllowOneTime::default_instance_,
      Team_SC_SetTeamAllowOneTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_SetTeamAllowOneTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_SetTeamAllowOneTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Team_SC_SetTeamAllowOneTime));
  Team_CS_UpdateTeamInfo_descriptor_ = file->message_type(35);
  static const int Team_CS_UpdateTeamInfo_offsets_[1] = {
  };
  Team_CS_UpdateTeamInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Team_CS_UpdateTeamInfo_descriptor_,
      Team_CS_UpdateTeamInfo::default_instance_,
      Team_CS_UpdateTeamInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_UpdateTeamInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_UpdateTeamInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Team_CS_UpdateTeamInfo));
  Team_SC_UpdateTeamInfo_descriptor_ = file->message_type(36);
  static const int Team_SC_UpdateTeamInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_UpdateTeamInfo, teaminfo_),
  };
  Team_SC_UpdateTeamInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Team_SC_UpdateTeamInfo_descriptor_,
      Team_SC_UpdateTeamInfo::default_instance_,
      Team_SC_UpdateTeamInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_UpdateTeamInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_UpdateTeamInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Team_SC_UpdateTeamInfo));
  Team_SC_UpdateTeamBeInvite_descriptor_ = file->message_type(37);
  static const int Team_SC_UpdateTeamBeInvite_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_UpdateTeamBeInvite, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_UpdateTeamBeInvite, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_UpdateTeamBeInvite, obj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_UpdateTeamBeInvite, teamnum_),
  };
  Team_SC_UpdateTeamBeInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Team_SC_UpdateTeamBeInvite_descriptor_,
      Team_SC_UpdateTeamBeInvite::default_instance_,
      Team_SC_UpdateTeamBeInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_UpdateTeamBeInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_UpdateTeamBeInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Team_SC_UpdateTeamBeInvite));
  Team_SC_UpdateApplyList_descriptor_ = file->message_type(38);
  static const int Team_SC_UpdateApplyList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_UpdateApplyList, teammanlist_),
  };
  Team_SC_UpdateApplyList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Team_SC_UpdateApplyList_descriptor_,
      Team_SC_UpdateApplyList::default_instance_,
      Team_SC_UpdateApplyList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_UpdateApplyList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_UpdateApplyList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Team_SC_UpdateApplyList));
  Team_SC_UpdateTeamMemberTick_descriptor_ = file->message_type(39);
  static const int Team_SC_UpdateTeamMemberTick_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_UpdateTeamMemberTick, name_),
  };
  Team_SC_UpdateTeamMemberTick_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Team_SC_UpdateTeamMemberTick_descriptor_,
      Team_SC_UpdateTeamMemberTick::default_instance_,
      Team_SC_UpdateTeamMemberTick_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_UpdateTeamMemberTick, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_UpdateTeamMemberTick, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Team_SC_UpdateTeamMemberTick));
  Team_CS_FollowLeader_descriptor_ = file->message_type(40);
  static const int Team_CS_FollowLeader_offsets_[1] = {
  };
  Team_CS_FollowLeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Team_CS_FollowLeader_descriptor_,
      Team_CS_FollowLeader::default_instance_,
      Team_CS_FollowLeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_FollowLeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_FollowLeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Team_CS_FollowLeader));
  Team_SC_FollowLeader_descriptor_ = file->message_type(41);
  static const int Team_SC_FollowLeader_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_FollowLeader, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_FollowLeader, changemap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_FollowLeader, pt_),
  };
  Team_SC_FollowLeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Team_SC_FollowLeader_descriptor_,
      Team_SC_FollowLeader::default_instance_,
      Team_SC_FollowLeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_FollowLeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_FollowLeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Team_SC_FollowLeader));
  Team_CS_SummonFollower_descriptor_ = file->message_type(42);
  static const int Team_CS_SummonFollower_offsets_[1] = {
  };
  Team_CS_SummonFollower_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Team_CS_SummonFollower_descriptor_,
      Team_CS_SummonFollower::default_instance_,
      Team_CS_SummonFollower_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_SummonFollower, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_SummonFollower, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Team_CS_SummonFollower));
  Team_SC_SummonFollower_descriptor_ = file->message_type(43);
  static const int Team_SC_SummonFollower_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_SummonFollower, result_),
  };
  Team_SC_SummonFollower_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Team_SC_SummonFollower_descriptor_,
      Team_SC_SummonFollower::default_instance_,
      Team_SC_SummonFollower_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_SummonFollower, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_SummonFollower, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Team_SC_SummonFollower));
  Team_SC_LeaderSummon_descriptor_ = file->message_type(44);
  static const int Team_SC_LeaderSummon_offsets_[1] = {
  };
  Team_SC_LeaderSummon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Team_SC_LeaderSummon_descriptor_,
      Team_SC_LeaderSummon::default_instance_,
      Team_SC_LeaderSummon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_LeaderSummon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_LeaderSummon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Team_SC_LeaderSummon));
  Team_CS_SetIgnoreTeamInvite_descriptor_ = file->message_type(45);
  static const int Team_CS_SetIgnoreTeamInvite_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_SetIgnoreTeamInvite, allow_),
  };
  Team_CS_SetIgnoreTeamInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Team_CS_SetIgnoreTeamInvite_descriptor_,
      Team_CS_SetIgnoreTeamInvite::default_instance_,
      Team_CS_SetIgnoreTeamInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_SetIgnoreTeamInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_SetIgnoreTeamInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Team_CS_SetIgnoreTeamInvite));
  Team_SC_SetIgnoreTeamInvite_descriptor_ = file->message_type(46);
  static const int Team_SC_SetIgnoreTeamInvite_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_SetIgnoreTeamInvite, result_),
  };
  Team_SC_SetIgnoreTeamInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Team_SC_SetIgnoreTeamInvite_descriptor_,
      Team_SC_SetIgnoreTeamInvite::default_instance_,
      Team_SC_SetIgnoreTeamInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_SetIgnoreTeamInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_SetIgnoreTeamInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Team_SC_SetIgnoreTeamInvite));
  Team_CS_QueryIgnoreTeamInvite_descriptor_ = file->message_type(47);
  static const int Team_CS_QueryIgnoreTeamInvite_offsets_[1] = {
  };
  Team_CS_QueryIgnoreTeamInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Team_CS_QueryIgnoreTeamInvite_descriptor_,
      Team_CS_QueryIgnoreTeamInvite::default_instance_,
      Team_CS_QueryIgnoreTeamInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_QueryIgnoreTeamInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_QueryIgnoreTeamInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Team_CS_QueryIgnoreTeamInvite));
  Team_SC_QueryIgnoreTeamInvite_descriptor_ = file->message_type(48);
  static const int Team_SC_QueryIgnoreTeamInvite_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_QueryIgnoreTeamInvite, allow_),
  };
  Team_SC_QueryIgnoreTeamInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Team_SC_QueryIgnoreTeamInvite_descriptor_,
      Team_SC_QueryIgnoreTeamInvite::default_instance_,
      Team_SC_QueryIgnoreTeamInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_QueryIgnoreTeamInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_QueryIgnoreTeamInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Team_SC_QueryIgnoreTeamInvite));
  Team_SC_ErrorInfo_descriptor_ = file->message_type(49);
  static const int Team_SC_ErrorInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_ErrorInfo, result_),
  };
  Team_SC_ErrorInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Team_SC_ErrorInfo_descriptor_,
      Team_SC_ErrorInfo::default_instance_,
      Team_SC_ErrorInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_ErrorInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_ErrorInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Team_SC_ErrorInfo));
  ProtoTeamManHPInfo_descriptor_ = file->message_type(50);
  static const int ProtoTeamManHPInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamManHPInfo, plyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamManHPInfo, maxhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamManHPInfo, hp_),
  };
  ProtoTeamManHPInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoTeamManHPInfo_descriptor_,
      ProtoTeamManHPInfo::default_instance_,
      ProtoTeamManHPInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamManHPInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamManHPInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoTeamManHPInfo));
  Team_SC_UpdateCurrentHp_descriptor_ = file->message_type(51);
  static const int Team_SC_UpdateCurrentHp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_UpdateCurrentHp, hplist_),
  };
  Team_SC_UpdateCurrentHp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Team_SC_UpdateCurrentHp_descriptor_,
      Team_SC_UpdateCurrentHp::default_instance_,
      Team_SC_UpdateCurrentHp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_UpdateCurrentHp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_UpdateCurrentHp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Team_SC_UpdateCurrentHp));
  Team_CS_TeamReady_descriptor_ = file->message_type(52);
  static const int Team_CS_TeamReady_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_TeamReady, status_),
  };
  Team_CS_TeamReady_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Team_CS_TeamReady_descriptor_,
      Team_CS_TeamReady::default_instance_,
      Team_CS_TeamReady_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_TeamReady, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_CS_TeamReady, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Team_CS_TeamReady));
  Team_SC_TeamReady_descriptor_ = file->message_type(53);
  static const int Team_SC_TeamReady_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_TeamReady, result_),
  };
  Team_SC_TeamReady_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Team_SC_TeamReady_descriptor_,
      Team_SC_TeamReady::default_instance_,
      Team_SC_TeamReady_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_TeamReady, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team_SC_TeamReady, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Team_SC_TeamReady));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_team_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoTeamManInfo_descriptor_, &ProtoTeamManInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoTeamInfo_descriptor_, &ProtoTeamInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Team_SC_UpdateTeamLevelInfo_descriptor_, &Team_SC_UpdateTeamLevelInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoTeamListTeamInfo_descriptor_, &ProtoTeamListTeamInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoTeamOutObj_descriptor_, &ProtoTeamOutObj::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Team_CS_SetTeamOutObj_descriptor_, &Team_CS_SetTeamOutObj::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Team_SC_SetTeamOutObj_descriptor_, &Team_SC_SetTeamOutObj::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Team_CS_MatchingQueueInfo_descriptor_, &Team_CS_MatchingQueueInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Team_SC_MatchingQueueInfo_descriptor_, &Team_SC_MatchingQueueInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Team_CS_GetTeamList_descriptor_, &Team_CS_GetTeamList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Team_SC_GetTeamList_descriptor_, &Team_SC_GetTeamList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Team_CS_CreateTeam_descriptor_, &Team_CS_CreateTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Team_SC_CreateTeam_descriptor_, &Team_SC_CreateTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Team_CS_ApplyTeam_descriptor_, &Team_CS_ApplyTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Team_SC_ApplyTeam_descriptor_, &Team_SC_ApplyTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Team_CS_TeamQuit_descriptor_, &Team_CS_TeamQuit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Team_SC_TeamQuit_descriptor_, &Team_SC_TeamQuit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Team_CS_TeamAppoint_descriptor_, &Team_CS_TeamAppoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Team_SC_TeamAppoint_descriptor_, &Team_SC_TeamAppoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Team_CS_TeamKick_descriptor_, &Team_CS_TeamKick::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Team_SC_TeamKick_descriptor_, &Team_SC_TeamKick::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Team_CS_TempLeave_descriptor_, &Team_CS_TempLeave::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Team_SC_TempLeave_descriptor_, &Team_SC_TempLeave::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Team_CS_TeamAuto_descriptor_, &Team_CS_TeamAuto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Team_SC_TeamAuto_descriptor_, &Team_SC_TeamAuto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Team_CS_MemberAuto_descriptor_, &Team_CS_MemberAuto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Team_SC_MemberAuto_descriptor_, &Team_SC_MemberAuto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Team_CS_TeamInvite_descriptor_, &Team_CS_TeamInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Team_SC_TeamInvite_descriptor_, &Team_SC_TeamInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Team_CS_SetTeamBeInvite_descriptor_, &Team_CS_SetTeamBeInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Team_SC_SetTeamBeInvite_descriptor_, &Team_SC_SetTeamBeInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Team_CS_SetTeamAllow_descriptor_, &Team_CS_SetTeamAllow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Team_SC_SetTeamAllow_descriptor_, &Team_SC_SetTeamAllow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Team_CS_SetTeamAllowOneTime_descriptor_, &Team_CS_SetTeamAllowOneTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Team_SC_SetTeamAllowOneTime_descriptor_, &Team_SC_SetTeamAllowOneTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Team_CS_UpdateTeamInfo_descriptor_, &Team_CS_UpdateTeamInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Team_SC_UpdateTeamInfo_descriptor_, &Team_SC_UpdateTeamInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Team_SC_UpdateTeamBeInvite_descriptor_, &Team_SC_UpdateTeamBeInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Team_SC_UpdateApplyList_descriptor_, &Team_SC_UpdateApplyList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Team_SC_UpdateTeamMemberTick_descriptor_, &Team_SC_UpdateTeamMemberTick::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Team_CS_FollowLeader_descriptor_, &Team_CS_FollowLeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Team_SC_FollowLeader_descriptor_, &Team_SC_FollowLeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Team_CS_SummonFollower_descriptor_, &Team_CS_SummonFollower::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Team_SC_SummonFollower_descriptor_, &Team_SC_SummonFollower::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Team_SC_LeaderSummon_descriptor_, &Team_SC_LeaderSummon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Team_CS_SetIgnoreTeamInvite_descriptor_, &Team_CS_SetIgnoreTeamInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Team_SC_SetIgnoreTeamInvite_descriptor_, &Team_SC_SetIgnoreTeamInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Team_CS_QueryIgnoreTeamInvite_descriptor_, &Team_CS_QueryIgnoreTeamInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Team_SC_QueryIgnoreTeamInvite_descriptor_, &Team_SC_QueryIgnoreTeamInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Team_SC_ErrorInfo_descriptor_, &Team_SC_ErrorInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoTeamManHPInfo_descriptor_, &ProtoTeamManHPInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Team_SC_UpdateCurrentHp_descriptor_, &Team_SC_UpdateCurrentHp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Team_CS_TeamReady_descriptor_, &Team_CS_TeamReady::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Team_SC_TeamReady_descriptor_, &Team_SC_TeamReady::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_team_2eproto() {
  delete ProtoTeamManInfo::default_instance_;
  delete ProtoTeamManInfo_reflection_;
  delete ProtoTeamInfo::default_instance_;
  delete ProtoTeamInfo_reflection_;
  delete Team_SC_UpdateTeamLevelInfo::default_instance_;
  delete Team_SC_UpdateTeamLevelInfo_reflection_;
  delete ProtoTeamListTeamInfo::default_instance_;
  delete ProtoTeamListTeamInfo_reflection_;
  delete ProtoTeamOutObj::default_instance_;
  delete ProtoTeamOutObj_reflection_;
  delete Team_CS_SetTeamOutObj::default_instance_;
  delete Team_CS_SetTeamOutObj_reflection_;
  delete Team_SC_SetTeamOutObj::default_instance_;
  delete Team_SC_SetTeamOutObj_reflection_;
  delete Team_CS_MatchingQueueInfo::default_instance_;
  delete Team_CS_MatchingQueueInfo_reflection_;
  delete Team_SC_MatchingQueueInfo::default_instance_;
  delete Team_SC_MatchingQueueInfo_reflection_;
  delete Team_CS_GetTeamList::default_instance_;
  delete Team_CS_GetTeamList_reflection_;
  delete Team_SC_GetTeamList::default_instance_;
  delete Team_SC_GetTeamList_reflection_;
  delete Team_CS_CreateTeam::default_instance_;
  delete Team_CS_CreateTeam_reflection_;
  delete Team_SC_CreateTeam::default_instance_;
  delete Team_SC_CreateTeam_reflection_;
  delete Team_CS_ApplyTeam::default_instance_;
  delete Team_CS_ApplyTeam_reflection_;
  delete Team_SC_ApplyTeam::default_instance_;
  delete Team_SC_ApplyTeam_reflection_;
  delete Team_CS_TeamQuit::default_instance_;
  delete Team_CS_TeamQuit_reflection_;
  delete Team_SC_TeamQuit::default_instance_;
  delete Team_SC_TeamQuit_reflection_;
  delete Team_CS_TeamAppoint::default_instance_;
  delete Team_CS_TeamAppoint_reflection_;
  delete Team_SC_TeamAppoint::default_instance_;
  delete Team_SC_TeamAppoint_reflection_;
  delete Team_CS_TeamKick::default_instance_;
  delete Team_CS_TeamKick_reflection_;
  delete Team_SC_TeamKick::default_instance_;
  delete Team_SC_TeamKick_reflection_;
  delete Team_CS_TempLeave::default_instance_;
  delete Team_CS_TempLeave_reflection_;
  delete Team_SC_TempLeave::default_instance_;
  delete Team_SC_TempLeave_reflection_;
  delete Team_CS_TeamAuto::default_instance_;
  delete Team_CS_TeamAuto_reflection_;
  delete Team_SC_TeamAuto::default_instance_;
  delete Team_SC_TeamAuto_reflection_;
  delete Team_CS_MemberAuto::default_instance_;
  delete Team_CS_MemberAuto_reflection_;
  delete Team_SC_MemberAuto::default_instance_;
  delete Team_SC_MemberAuto_reflection_;
  delete Team_CS_TeamInvite::default_instance_;
  delete Team_CS_TeamInvite_reflection_;
  delete Team_SC_TeamInvite::default_instance_;
  delete Team_SC_TeamInvite_reflection_;
  delete Team_CS_SetTeamBeInvite::default_instance_;
  delete Team_CS_SetTeamBeInvite_reflection_;
  delete Team_SC_SetTeamBeInvite::default_instance_;
  delete Team_SC_SetTeamBeInvite_reflection_;
  delete Team_CS_SetTeamAllow::default_instance_;
  delete Team_CS_SetTeamAllow_reflection_;
  delete Team_SC_SetTeamAllow::default_instance_;
  delete Team_SC_SetTeamAllow_reflection_;
  delete Team_CS_SetTeamAllowOneTime::default_instance_;
  delete Team_CS_SetTeamAllowOneTime_reflection_;
  delete Team_SC_SetTeamAllowOneTime::default_instance_;
  delete Team_SC_SetTeamAllowOneTime_reflection_;
  delete Team_CS_UpdateTeamInfo::default_instance_;
  delete Team_CS_UpdateTeamInfo_reflection_;
  delete Team_SC_UpdateTeamInfo::default_instance_;
  delete Team_SC_UpdateTeamInfo_reflection_;
  delete Team_SC_UpdateTeamBeInvite::default_instance_;
  delete Team_SC_UpdateTeamBeInvite_reflection_;
  delete Team_SC_UpdateApplyList::default_instance_;
  delete Team_SC_UpdateApplyList_reflection_;
  delete Team_SC_UpdateTeamMemberTick::default_instance_;
  delete Team_SC_UpdateTeamMemberTick_reflection_;
  delete Team_CS_FollowLeader::default_instance_;
  delete Team_CS_FollowLeader_reflection_;
  delete Team_SC_FollowLeader::default_instance_;
  delete Team_SC_FollowLeader_reflection_;
  delete Team_CS_SummonFollower::default_instance_;
  delete Team_CS_SummonFollower_reflection_;
  delete Team_SC_SummonFollower::default_instance_;
  delete Team_SC_SummonFollower_reflection_;
  delete Team_SC_LeaderSummon::default_instance_;
  delete Team_SC_LeaderSummon_reflection_;
  delete Team_CS_SetIgnoreTeamInvite::default_instance_;
  delete Team_CS_SetIgnoreTeamInvite_reflection_;
  delete Team_SC_SetIgnoreTeamInvite::default_instance_;
  delete Team_SC_SetIgnoreTeamInvite_reflection_;
  delete Team_CS_QueryIgnoreTeamInvite::default_instance_;
  delete Team_CS_QueryIgnoreTeamInvite_reflection_;
  delete Team_SC_QueryIgnoreTeamInvite::default_instance_;
  delete Team_SC_QueryIgnoreTeamInvite_reflection_;
  delete Team_SC_ErrorInfo::default_instance_;
  delete Team_SC_ErrorInfo_reflection_;
  delete ProtoTeamManHPInfo::default_instance_;
  delete ProtoTeamManHPInfo_reflection_;
  delete Team_SC_UpdateCurrentHp::default_instance_;
  delete Team_SC_UpdateCurrentHp_reflection_;
  delete Team_CS_TeamReady::default_instance_;
  delete Team_CS_TeamReady_reflection_;
  delete Team_SC_TeamReady::default_instance_;
  delete Team_SC_TeamReady_reflection_;
}

void protobuf_AddDesc_team_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::message::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nteam.proto\022\rproto.message\032\014common.prot"
    "o\"\340\001\n\020ProtoTeamManInfo\022\r\n\005plyId\030\001 \002(\r\022\013\n"
    "\003job\030\002 \002(\005\022\r\n\005level\030\003 \002(\005\022\016\n\006status\030\004 \001("
    "\005\022\014\n\004name\030\005 \002(\t\022\024\n\014equipID_list\030\006 \003(\005\022\017\n"
    "\007plyuuid\030\007 \001(\004\022\020\n\010identity\030\010 \001(\005\022\016\n\006comb"
    "at\030\t \001(\005\022\017\n\007isReady\030\n \001(\010\022\030\n\020Demonhunter"
    "level\030\013 \001(\005\022\017\n\007suit_id\030\014 \001(\r\"\323\001\n\rProtoTe"
    "amInfo\022\016\n\006teamId\030\001 \002(\005\022\020\n\010numLimit\030\002 \002(\005"
    "\022\020\n\010leaderId\030\003 \001(\r\022\020\n\010teamAuto\030\004 \002(\005\0222\n\n"
    "teamOutObj\030\005 \001(\0132\036.proto.message.ProtoTe"
    "amOutObj\0224\n\013teamManList\030\006 \003(\0132\037.proto.me"
    "ssage.ProtoTeamManInfo\022\022\n\nneedCombat\030\007 \001"
    "(\005\";\n\033Team_SC_UpdateTeamLevelInfo\022\r\n\005ply"
    "Id\030\001 \002(\005\022\r\n\005level\030\002 \002(\005\"\364\001\n\025ProtoTeamLis"
    "tTeamInfo\022\016\n\006teamId\030\001 \002(\005\022\021\n\tpeopleNum\030\002"
    " \002(\005\022\020\n\010numLimit\030\003 \002(\005\0223\n\nleaderInfo\030\004 \001"
    "(\0132\037.proto.message.ProtoTeamManInfo\0222\n\nt"
    "eamOutObj\030\005 \001(\0132\036.proto.message.ProtoTea"
    "mOutObj\022\023\n\013totalCombat\030\006 \001(\005\022\024\n\014leaderCo"
    "mbat\030\007 \001(\005\022\022\n\nneedCombat\030\010 \001(\005\"V\n\017ProtoT"
    "eamOutObj\022\013\n\003obj\030\001 \002(\005\022\020\n\010levelMin\030\002 \002(\005"
    "\022\020\n\010levelMax\030\003 \002(\005\022\022\n\nneedComBat\030\004 \002(\005\"D"
    "\n\025Team_CS_SetTeamOutObj\022+\n\003obj\030\001 \002(\0132\036.p"
    "roto.message.ProtoTeamOutObj\"\'\n\025Team_SC_"
    "SetTeamOutObj\022\016\n\006result\030\001 \002(\005\"(\n\031Team_CS"
    "_MatchingQueueInfo\022\013\n\003obj\030\001 \002(\005\"N\n\031Team_"
    "SC_MatchingQueueInfo\022\020\n\010nTeamNum\030\001 \002(\005\022\022"
    "\n\nnSingleNum\030\002 \002(\005\022\013\n\003obj\030\003 \002(\005\"\"\n\023Team_"
    "CS_GetTeamList\022\013\n\003obj\030\001 \002(\005\"]\n\023Team_SC_G"
    "etTeamList\022\016\n\006result\030\001 \002(\005\0226\n\010teamInfo\030\002"
    " \003(\0132$.proto.message.ProtoTeamListTeamIn"
    "fo\"(\n\022Team_CS_CreateTeam\022\022\n\nneedCombat\030\001"
    " \001(\005\"$\n\022Team_SC_CreateTeam\022\016\n\006result\030\001 \002"
    "(\005\"#\n\021Team_CS_ApplyTeam\022\016\n\006teamId\030\001 \002(\005\""
    "3\n\021Team_SC_ApplyTeam\022\016\n\006result\030\001 \002(\005\022\016\n\006"
    "teamId\030\002 \001(\005\"\"\n\020Team_CS_TeamQuit\022\016\n\006team"
    "Id\030\001 \002(\005\"\"\n\020Team_SC_TeamQuit\022\016\n\006result\030\001"
    " \002(\005\"5\n\023Team_CS_TeamAppoint\022\r\n\005plyId\030\001 \002"
    "(\r\022\017\n\007appoint\030\002 \002(\005\"%\n\023Team_SC_TeamAppoi"
    "nt\022\016\n\006result\030\001 \002(\005\"!\n\020Team_CS_TeamKick\022\r"
    "\n\005plyId\030\001 \002(\r\"6\n\020Team_SC_TeamKick\022\016\n\006res"
    "ult\030\001 \002(\005\022\022\n\nbeKickName\030\002 \001(\t\"2\n\021Team_CS"
    "_TempLeave\022\r\n\005plyId\030\001 \002(\r\022\016\n\006status\030\002 \002("
    "\005\"#\n\021Team_SC_TempLeave\022\016\n\006result\030\001 \002(\005\"\""
    "\n\020Team_CS_TeamAuto\022\016\n\006isAuto\030\001 \002(\005\"\"\n\020Te"
    "am_SC_TeamAuto\022\016\n\006result\030\001 \002(\005\"1\n\022Team_C"
    "S_MemberAuto\022\016\n\006isAuto\030\001 \002(\005\022\013\n\003obj\030\002 \002("
    "\005\"4\n\022Team_SC_MemberAuto\022\016\n\006result\030\001 \002(\005\022"
    "\016\n\006isAuto\030\002 \002(\005\"#\n\022Team_CS_TeamInvite\022\r\n"
    "\005plyId\030\001 \002(\004\"$\n\022Team_SC_TeamInvite\022\016\n\006re"
    "sult\030\001 \002(\005\"8\n\027Team_CS_SetTeamBeInvite\022\r\n"
    "\005allow\030\001 \002(\010\022\016\n\006teamId\030\002 \002(\005\")\n\027Team_SC_"
    "SetTeamBeInvite\022\016\n\006result\030\001 \002(\005\"4\n\024Team_"
    "CS_SetTeamAllow\022\r\n\005plyId\030\001 \002(\r\022\r\n\005allow\030"
    "\002 \002(\010\"&\n\024Team_SC_SetTeamAllow\022\016\n\006result\030"
    "\001 \002(\005\",\n\033Team_CS_SetTeamAllowOneTime\022\r\n\005"
    "allow\030\001 \002(\010\"-\n\033Team_SC_SetTeamAllowOneTi"
    "me\022\016\n\006result\030\001 \002(\005\"\030\n\026Team_CS_UpdateTeam"
    "Info\"H\n\026Team_SC_UpdateTeamInfo\022.\n\010teamIn"
    "fo\030\001 \001(\0132\034.proto.message.ProtoTeamInfo\"X"
    "\n\032Team_SC_UpdateTeamBeInvite\022\016\n\006teamId\030\001"
    " \002(\005\022\014\n\004name\030\002 \001(\t\022\013\n\003obj\030\003 \001(\005\022\017\n\007teamn"
    "um\030\004 \001(\005\"O\n\027Team_SC_UpdateApplyList\0224\n\013t"
    "eamManList\030\001 \003(\0132\037.proto.message.ProtoTe"
    "amManInfo\",\n\034Team_SC_UpdateTeamMemberTic"
    "k\022\014\n\004name\030\001 \001(\t\"\026\n\024Team_CS_FollowLeader\""
    "]\n\024Team_SC_FollowLeader\022\016\n\006result\030\001 \002(\005\022"
    "\021\n\tchangeMap\030\002 \001(\010\022\"\n\002pt\030\003 \001(\0132\026.proto.m"
    "essage.Point3D\"\030\n\026Team_CS_SummonFollower"
    "\"(\n\026Team_SC_SummonFollower\022\016\n\006result\030\001 \002"
    "(\005\"\026\n\024Team_SC_LeaderSummon\",\n\033Team_CS_Se"
    "tIgnoreTeamInvite\022\r\n\005allow\030\001 \002(\010\"-\n\033Team"
    "_SC_SetIgnoreTeamInvite\022\016\n\006result\030\001 \002(\005\""
    "\037\n\035Team_CS_QueryIgnoreTeamInvite\".\n\035Team"
    "_SC_QueryIgnoreTeamInvite\022\r\n\005allow\030\001 \002(\010"
    "\"#\n\021Team_SC_ErrorInfo\022\016\n\006result\030\001 \002(\005\">\n"
    "\022ProtoTeamManHPInfo\022\r\n\005plyId\030\001 \002(\r\022\r\n\005ma"
    "xHp\030\002 \002(\r\022\n\n\002Hp\030\003 \002(\r\"L\n\027Team_SC_UpdateC"
    "urrentHp\0221\n\006HpList\030\001 \003(\0132!.proto.message"
    ".ProtoTeamManHPInfo\"#\n\021Team_CS_TeamReady"
    "\022\016\n\006status\030\001 \002(\010\"#\n\021Team_SC_TeamReady\022\016\n"
    "\006result\030\001 \002(\005", 3253);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "team.proto", &protobuf_RegisterTypes);
  ProtoTeamManInfo::default_instance_ = new ProtoTeamManInfo();
  ProtoTeamInfo::default_instance_ = new ProtoTeamInfo();
  Team_SC_UpdateTeamLevelInfo::default_instance_ = new Team_SC_UpdateTeamLevelInfo();
  ProtoTeamListTeamInfo::default_instance_ = new ProtoTeamListTeamInfo();
  ProtoTeamOutObj::default_instance_ = new ProtoTeamOutObj();
  Team_CS_SetTeamOutObj::default_instance_ = new Team_CS_SetTeamOutObj();
  Team_SC_SetTeamOutObj::default_instance_ = new Team_SC_SetTeamOutObj();
  Team_CS_MatchingQueueInfo::default_instance_ = new Team_CS_MatchingQueueInfo();
  Team_SC_MatchingQueueInfo::default_instance_ = new Team_SC_MatchingQueueInfo();
  Team_CS_GetTeamList::default_instance_ = new Team_CS_GetTeamList();
  Team_SC_GetTeamList::default_instance_ = new Team_SC_GetTeamList();
  Team_CS_CreateTeam::default_instance_ = new Team_CS_CreateTeam();
  Team_SC_CreateTeam::default_instance_ = new Team_SC_CreateTeam();
  Team_CS_ApplyTeam::default_instance_ = new Team_CS_ApplyTeam();
  Team_SC_ApplyTeam::default_instance_ = new Team_SC_ApplyTeam();
  Team_CS_TeamQuit::default_instance_ = new Team_CS_TeamQuit();
  Team_SC_TeamQuit::default_instance_ = new Team_SC_TeamQuit();
  Team_CS_TeamAppoint::default_instance_ = new Team_CS_TeamAppoint();
  Team_SC_TeamAppoint::default_instance_ = new Team_SC_TeamAppoint();
  Team_CS_TeamKick::default_instance_ = new Team_CS_TeamKick();
  Team_SC_TeamKick::default_instance_ = new Team_SC_TeamKick();
  Team_CS_TempLeave::default_instance_ = new Team_CS_TempLeave();
  Team_SC_TempLeave::default_instance_ = new Team_SC_TempLeave();
  Team_CS_TeamAuto::default_instance_ = new Team_CS_TeamAuto();
  Team_SC_TeamAuto::default_instance_ = new Team_SC_TeamAuto();
  Team_CS_MemberAuto::default_instance_ = new Team_CS_MemberAuto();
  Team_SC_MemberAuto::default_instance_ = new Team_SC_MemberAuto();
  Team_CS_TeamInvite::default_instance_ = new Team_CS_TeamInvite();
  Team_SC_TeamInvite::default_instance_ = new Team_SC_TeamInvite();
  Team_CS_SetTeamBeInvite::default_instance_ = new Team_CS_SetTeamBeInvite();
  Team_SC_SetTeamBeInvite::default_instance_ = new Team_SC_SetTeamBeInvite();
  Team_CS_SetTeamAllow::default_instance_ = new Team_CS_SetTeamAllow();
  Team_SC_SetTeamAllow::default_instance_ = new Team_SC_SetTeamAllow();
  Team_CS_SetTeamAllowOneTime::default_instance_ = new Team_CS_SetTeamAllowOneTime();
  Team_SC_SetTeamAllowOneTime::default_instance_ = new Team_SC_SetTeamAllowOneTime();
  Team_CS_UpdateTeamInfo::default_instance_ = new Team_CS_UpdateTeamInfo();
  Team_SC_UpdateTeamInfo::default_instance_ = new Team_SC_UpdateTeamInfo();
  Team_SC_UpdateTeamBeInvite::default_instance_ = new Team_SC_UpdateTeamBeInvite();
  Team_SC_UpdateApplyList::default_instance_ = new Team_SC_UpdateApplyList();
  Team_SC_UpdateTeamMemberTick::default_instance_ = new Team_SC_UpdateTeamMemberTick();
  Team_CS_FollowLeader::default_instance_ = new Team_CS_FollowLeader();
  Team_SC_FollowLeader::default_instance_ = new Team_SC_FollowLeader();
  Team_CS_SummonFollower::default_instance_ = new Team_CS_SummonFollower();
  Team_SC_SummonFollower::default_instance_ = new Team_SC_SummonFollower();
  Team_SC_LeaderSummon::default_instance_ = new Team_SC_LeaderSummon();
  Team_CS_SetIgnoreTeamInvite::default_instance_ = new Team_CS_SetIgnoreTeamInvite();
  Team_SC_SetIgnoreTeamInvite::default_instance_ = new Team_SC_SetIgnoreTeamInvite();
  Team_CS_QueryIgnoreTeamInvite::default_instance_ = new Team_CS_QueryIgnoreTeamInvite();
  Team_SC_QueryIgnoreTeamInvite::default_instance_ = new Team_SC_QueryIgnoreTeamInvite();
  Team_SC_ErrorInfo::default_instance_ = new Team_SC_ErrorInfo();
  ProtoTeamManHPInfo::default_instance_ = new ProtoTeamManHPInfo();
  Team_SC_UpdateCurrentHp::default_instance_ = new Team_SC_UpdateCurrentHp();
  Team_CS_TeamReady::default_instance_ = new Team_CS_TeamReady();
  Team_SC_TeamReady::default_instance_ = new Team_SC_TeamReady();
  ProtoTeamManInfo::default_instance_->InitAsDefaultInstance();
  ProtoTeamInfo::default_instance_->InitAsDefaultInstance();
  Team_SC_UpdateTeamLevelInfo::default_instance_->InitAsDefaultInstance();
  ProtoTeamListTeamInfo::default_instance_->InitAsDefaultInstance();
  ProtoTeamOutObj::default_instance_->InitAsDefaultInstance();
  Team_CS_SetTeamOutObj::default_instance_->InitAsDefaultInstance();
  Team_SC_SetTeamOutObj::default_instance_->InitAsDefaultInstance();
  Team_CS_MatchingQueueInfo::default_instance_->InitAsDefaultInstance();
  Team_SC_MatchingQueueInfo::default_instance_->InitAsDefaultInstance();
  Team_CS_GetTeamList::default_instance_->InitAsDefaultInstance();
  Team_SC_GetTeamList::default_instance_->InitAsDefaultInstance();
  Team_CS_CreateTeam::default_instance_->InitAsDefaultInstance();
  Team_SC_CreateTeam::default_instance_->InitAsDefaultInstance();
  Team_CS_ApplyTeam::default_instance_->InitAsDefaultInstance();
  Team_SC_ApplyTeam::default_instance_->InitAsDefaultInstance();
  Team_CS_TeamQuit::default_instance_->InitAsDefaultInstance();
  Team_SC_TeamQuit::default_instance_->InitAsDefaultInstance();
  Team_CS_TeamAppoint::default_instance_->InitAsDefaultInstance();
  Team_SC_TeamAppoint::default_instance_->InitAsDefaultInstance();
  Team_CS_TeamKick::default_instance_->InitAsDefaultInstance();
  Team_SC_TeamKick::default_instance_->InitAsDefaultInstance();
  Team_CS_TempLeave::default_instance_->InitAsDefaultInstance();
  Team_SC_TempLeave::default_instance_->InitAsDefaultInstance();
  Team_CS_TeamAuto::default_instance_->InitAsDefaultInstance();
  Team_SC_TeamAuto::default_instance_->InitAsDefaultInstance();
  Team_CS_MemberAuto::default_instance_->InitAsDefaultInstance();
  Team_SC_MemberAuto::default_instance_->InitAsDefaultInstance();
  Team_CS_TeamInvite::default_instance_->InitAsDefaultInstance();
  Team_SC_TeamInvite::default_instance_->InitAsDefaultInstance();
  Team_CS_SetTeamBeInvite::default_instance_->InitAsDefaultInstance();
  Team_SC_SetTeamBeInvite::default_instance_->InitAsDefaultInstance();
  Team_CS_SetTeamAllow::default_instance_->InitAsDefaultInstance();
  Team_SC_SetTeamAllow::default_instance_->InitAsDefaultInstance();
  Team_CS_SetTeamAllowOneTime::default_instance_->InitAsDefaultInstance();
  Team_SC_SetTeamAllowOneTime::default_instance_->InitAsDefaultInstance();
  Team_CS_UpdateTeamInfo::default_instance_->InitAsDefaultInstance();
  Team_SC_UpdateTeamInfo::default_instance_->InitAsDefaultInstance();
  Team_SC_UpdateTeamBeInvite::default_instance_->InitAsDefaultInstance();
  Team_SC_UpdateApplyList::default_instance_->InitAsDefaultInstance();
  Team_SC_UpdateTeamMemberTick::default_instance_->InitAsDefaultInstance();
  Team_CS_FollowLeader::default_instance_->InitAsDefaultInstance();
  Team_SC_FollowLeader::default_instance_->InitAsDefaultInstance();
  Team_CS_SummonFollower::default_instance_->InitAsDefaultInstance();
  Team_SC_SummonFollower::default_instance_->InitAsDefaultInstance();
  Team_SC_LeaderSummon::default_instance_->InitAsDefaultInstance();
  Team_CS_SetIgnoreTeamInvite::default_instance_->InitAsDefaultInstance();
  Team_SC_SetIgnoreTeamInvite::default_instance_->InitAsDefaultInstance();
  Team_CS_QueryIgnoreTeamInvite::default_instance_->InitAsDefaultInstance();
  Team_SC_QueryIgnoreTeamInvite::default_instance_->InitAsDefaultInstance();
  Team_SC_ErrorInfo::default_instance_->InitAsDefaultInstance();
  ProtoTeamManHPInfo::default_instance_->InitAsDefaultInstance();
  Team_SC_UpdateCurrentHp::default_instance_->InitAsDefaultInstance();
  Team_CS_TeamReady::default_instance_->InitAsDefaultInstance();
  Team_SC_TeamReady::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_team_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_team_2eproto {
  StaticDescriptorInitializer_team_2eproto() {
    protobuf_AddDesc_team_2eproto();
  }
} static_descriptor_initializer_team_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ProtoTeamManInfo::kPlyIdFieldNumber;
const int ProtoTeamManInfo::kJobFieldNumber;
const int ProtoTeamManInfo::kLevelFieldNumber;
const int ProtoTeamManInfo::kStatusFieldNumber;
const int ProtoTeamManInfo::kNameFieldNumber;
const int ProtoTeamManInfo::kEquipIDListFieldNumber;
const int ProtoTeamManInfo::kPlyuuidFieldNumber;
const int ProtoTeamManInfo::kIdentityFieldNumber;
const int ProtoTeamManInfo::kCombatFieldNumber;
const int ProtoTeamManInfo::kIsReadyFieldNumber;
const int ProtoTeamManInfo::kDemonhunterlevelFieldNumber;
const int ProtoTeamManInfo::kSuitIdFieldNumber;
#endif  // !_MSC_VER

ProtoTeamManInfo::ProtoTeamManInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoTeamManInfo::InitAsDefaultInstance() {
}

ProtoTeamManInfo::ProtoTeamManInfo(const ProtoTeamManInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoTeamManInfo::SharedCtor() {
  _cached_size_ = 0;
  plyid_ = 0u;
  job_ = 0;
  level_ = 0;
  status_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  plyuuid_ = GOOGLE_ULONGLONG(0);
  identity_ = 0;
  combat_ = 0;
  isready_ = false;
  demonhunterlevel_ = 0;
  suit_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoTeamManInfo::~ProtoTeamManInfo() {
  SharedDtor();
}

void ProtoTeamManInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ProtoTeamManInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoTeamManInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoTeamManInfo_descriptor_;
}

const ProtoTeamManInfo& ProtoTeamManInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2eproto();
  return *default_instance_;
}

ProtoTeamManInfo* ProtoTeamManInfo::default_instance_ = NULL;

ProtoTeamManInfo* ProtoTeamManInfo::New() const {
  return new ProtoTeamManInfo;
}

void ProtoTeamManInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    plyid_ = 0u;
    job_ = 0;
    level_ = 0;
    status_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    plyuuid_ = GOOGLE_ULONGLONG(0);
    identity_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    combat_ = 0;
    isready_ = false;
    demonhunterlevel_ = 0;
    suit_id_ = 0u;
  }
  equipid_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoTeamManInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 plyId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plyid_)));
          set_has_plyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_job;
        break;
      }

      // required int32 job = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // optional int32 status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // required string name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_equipID_list;
        break;
      }

      // repeated int32 equipID_list = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipID_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_equipid_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_equipid_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_equipID_list;
        if (input->ExpectTag(56)) goto parse_plyuuid;
        break;
      }

      // optional uint64 plyuuid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_plyuuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &plyuuid_)));
          set_has_plyuuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_identity;
        break;
      }

      // optional int32 identity = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_identity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &identity_)));
          set_has_identity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_combat;
        break;
      }

      // optional int32 combat = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_combat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combat_)));
          set_has_combat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_isReady;
        break;
      }

      // optional bool isReady = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isReady:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isready_)));
          set_has_isready();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_Demonhunterlevel;
        break;
      }

      // optional int32 Demonhunterlevel = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Demonhunterlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &demonhunterlevel_)));
          set_has_demonhunterlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_suit_id;
        break;
      }

      // optional uint32 suit_id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_suit_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &suit_id_)));
          set_has_suit_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoTeamManInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 plyId = 1;
  if (has_plyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->plyid(), output);
  }

  // required int32 job = 2;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->job(), output);
  }

  // required int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // optional int32 status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->status(), output);
  }

  // required string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->name(), output);
  }

  // repeated int32 equipID_list = 6;
  for (int i = 0; i < this->equipid_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->equipid_list(i), output);
  }

  // optional uint64 plyuuid = 7;
  if (has_plyuuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->plyuuid(), output);
  }

  // optional int32 identity = 8;
  if (has_identity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->identity(), output);
  }

  // optional int32 combat = 9;
  if (has_combat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->combat(), output);
  }

  // optional bool isReady = 10;
  if (has_isready()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->isready(), output);
  }

  // optional int32 Demonhunterlevel = 11;
  if (has_demonhunterlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->demonhunterlevel(), output);
  }

  // optional uint32 suit_id = 12;
  if (has_suit_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->suit_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoTeamManInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 plyId = 1;
  if (has_plyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->plyid(), target);
  }

  // required int32 job = 2;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->job(), target);
  }

  // required int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // optional int32 status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->status(), target);
  }

  // required string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // repeated int32 equipID_list = 6;
  for (int i = 0; i < this->equipid_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->equipid_list(i), target);
  }

  // optional uint64 plyuuid = 7;
  if (has_plyuuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->plyuuid(), target);
  }

  // optional int32 identity = 8;
  if (has_identity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->identity(), target);
  }

  // optional int32 combat = 9;
  if (has_combat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->combat(), target);
  }

  // optional bool isReady = 10;
  if (has_isready()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->isready(), target);
  }

  // optional int32 Demonhunterlevel = 11;
  if (has_demonhunterlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->demonhunterlevel(), target);
  }

  // optional uint32 suit_id = 12;
  if (has_suit_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->suit_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoTeamManInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 plyId = 1;
    if (has_plyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->plyid());
    }

    // required int32 job = 2;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->job());
    }

    // required int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // required string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint64 plyuuid = 7;
    if (has_plyuuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->plyuuid());
    }

    // optional int32 identity = 8;
    if (has_identity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->identity());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 combat = 9;
    if (has_combat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->combat());
    }

    // optional bool isReady = 10;
    if (has_isready()) {
      total_size += 1 + 1;
    }

    // optional int32 Demonhunterlevel = 11;
    if (has_demonhunterlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->demonhunterlevel());
    }

    // optional uint32 suit_id = 12;
    if (has_suit_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->suit_id());
    }

  }
  // repeated int32 equipID_list = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->equipid_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->equipid_list(i));
    }
    total_size += 1 * this->equipid_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoTeamManInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoTeamManInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoTeamManInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoTeamManInfo::MergeFrom(const ProtoTeamManInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipid_list_.MergeFrom(from.equipid_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plyid()) {
      set_plyid(from.plyid());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_plyuuid()) {
      set_plyuuid(from.plyuuid());
    }
    if (from.has_identity()) {
      set_identity(from.identity());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_combat()) {
      set_combat(from.combat());
    }
    if (from.has_isready()) {
      set_isready(from.isready());
    }
    if (from.has_demonhunterlevel()) {
      set_demonhunterlevel(from.demonhunterlevel());
    }
    if (from.has_suit_id()) {
      set_suit_id(from.suit_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoTeamManInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoTeamManInfo::CopyFrom(const ProtoTeamManInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoTeamManInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;

  return true;
}

void ProtoTeamManInfo::Swap(ProtoTeamManInfo* other) {
  if (other != this) {
    std::swap(plyid_, other->plyid_);
    std::swap(job_, other->job_);
    std::swap(level_, other->level_);
    std::swap(status_, other->status_);
    std::swap(name_, other->name_);
    equipid_list_.Swap(&other->equipid_list_);
    std::swap(plyuuid_, other->plyuuid_);
    std::swap(identity_, other->identity_);
    std::swap(combat_, other->combat_);
    std::swap(isready_, other->isready_);
    std::swap(demonhunterlevel_, other->demonhunterlevel_);
    std::swap(suit_id_, other->suit_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoTeamManInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoTeamManInfo_descriptor_;
  metadata.reflection = ProtoTeamManInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoTeamInfo::kTeamIdFieldNumber;
const int ProtoTeamInfo::kNumLimitFieldNumber;
const int ProtoTeamInfo::kLeaderIdFieldNumber;
const int ProtoTeamInfo::kTeamAutoFieldNumber;
const int ProtoTeamInfo::kTeamOutObjFieldNumber;
const int ProtoTeamInfo::kTeamManListFieldNumber;
const int ProtoTeamInfo::kNeedCombatFieldNumber;
#endif  // !_MSC_VER

ProtoTeamInfo::ProtoTeamInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoTeamInfo::InitAsDefaultInstance() {
  teamoutobj_ = const_cast< ::proto::message::ProtoTeamOutObj*>(&::proto::message::ProtoTeamOutObj::default_instance());
}

ProtoTeamInfo::ProtoTeamInfo(const ProtoTeamInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoTeamInfo::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = 0;
  numlimit_ = 0;
  leaderid_ = 0u;
  teamauto_ = 0;
  teamoutobj_ = NULL;
  needcombat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoTeamInfo::~ProtoTeamInfo() {
  SharedDtor();
}

void ProtoTeamInfo::SharedDtor() {
  if (this != default_instance_) {
    delete teamoutobj_;
  }
}

void ProtoTeamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoTeamInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoTeamInfo_descriptor_;
}

const ProtoTeamInfo& ProtoTeamInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2eproto();
  return *default_instance_;
}

ProtoTeamInfo* ProtoTeamInfo::default_instance_ = NULL;

ProtoTeamInfo* ProtoTeamInfo::New() const {
  return new ProtoTeamInfo;
}

void ProtoTeamInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    teamid_ = 0;
    numlimit_ = 0;
    leaderid_ = 0u;
    teamauto_ = 0;
    if (has_teamoutobj()) {
      if (teamoutobj_ != NULL) teamoutobj_->::proto::message::ProtoTeamOutObj::Clear();
    }
    needcombat_ = 0;
  }
  teammanlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoTeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 teamId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_numLimit;
        break;
      }

      // required int32 numLimit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numlimit_)));
          set_has_numlimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_leaderId;
        break;
      }

      // optional uint32 leaderId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leaderId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leaderid_)));
          set_has_leaderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_teamAuto;
        break;
      }

      // required int32 teamAuto = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamAuto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamauto_)));
          set_has_teamauto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_teamOutObj;
        break;
      }

      // optional .proto.message.ProtoTeamOutObj teamOutObj = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_teamOutObj:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_teamoutobj()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_teamManList;
        break;
      }

      // repeated .proto.message.ProtoTeamManInfo teamManList = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_teamManList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teammanlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_teamManList;
        if (input->ExpectTag(56)) goto parse_needCombat;
        break;
      }

      // optional int32 needCombat = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needCombat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &needcombat_)));
          set_has_needcombat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoTeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 teamId = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->teamid(), output);
  }

  // required int32 numLimit = 2;
  if (has_numlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->numlimit(), output);
  }

  // optional uint32 leaderId = 3;
  if (has_leaderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->leaderid(), output);
  }

  // required int32 teamAuto = 4;
  if (has_teamauto()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->teamauto(), output);
  }

  // optional .proto.message.ProtoTeamOutObj teamOutObj = 5;
  if (has_teamoutobj()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->teamoutobj(), output);
  }

  // repeated .proto.message.ProtoTeamManInfo teamManList = 6;
  for (int i = 0; i < this->teammanlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->teammanlist(i), output);
  }

  // optional int32 needCombat = 7;
  if (has_needcombat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->needcombat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoTeamInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 teamId = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->teamid(), target);
  }

  // required int32 numLimit = 2;
  if (has_numlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->numlimit(), target);
  }

  // optional uint32 leaderId = 3;
  if (has_leaderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->leaderid(), target);
  }

  // required int32 teamAuto = 4;
  if (has_teamauto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->teamauto(), target);
  }

  // optional .proto.message.ProtoTeamOutObj teamOutObj = 5;
  if (has_teamoutobj()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->teamoutobj(), target);
  }

  // repeated .proto.message.ProtoTeamManInfo teamManList = 6;
  for (int i = 0; i < this->teammanlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->teammanlist(i), target);
  }

  // optional int32 needCombat = 7;
  if (has_needcombat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->needcombat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoTeamInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 teamId = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamid());
    }

    // required int32 numLimit = 2;
    if (has_numlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numlimit());
    }

    // optional uint32 leaderId = 3;
    if (has_leaderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leaderid());
    }

    // required int32 teamAuto = 4;
    if (has_teamauto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamauto());
    }

    // optional .proto.message.ProtoTeamOutObj teamOutObj = 5;
    if (has_teamoutobj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->teamoutobj());
    }

    // optional int32 needCombat = 7;
    if (has_needcombat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->needcombat());
    }

  }
  // repeated .proto.message.ProtoTeamManInfo teamManList = 6;
  total_size += 1 * this->teammanlist_size();
  for (int i = 0; i < this->teammanlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teammanlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoTeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoTeamInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoTeamInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoTeamInfo::MergeFrom(const ProtoTeamInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  teammanlist_.MergeFrom(from.teammanlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_numlimit()) {
      set_numlimit(from.numlimit());
    }
    if (from.has_leaderid()) {
      set_leaderid(from.leaderid());
    }
    if (from.has_teamauto()) {
      set_teamauto(from.teamauto());
    }
    if (from.has_teamoutobj()) {
      mutable_teamoutobj()->::proto::message::ProtoTeamOutObj::MergeFrom(from.teamoutobj());
    }
    if (from.has_needcombat()) {
      set_needcombat(from.needcombat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoTeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoTeamInfo::CopyFrom(const ProtoTeamInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoTeamInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  if (has_teamoutobj()) {
    if (!this->teamoutobj().IsInitialized()) return false;
  }
  for (int i = 0; i < teammanlist_size(); i++) {
    if (!this->teammanlist(i).IsInitialized()) return false;
  }
  return true;
}

void ProtoTeamInfo::Swap(ProtoTeamInfo* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(numlimit_, other->numlimit_);
    std::swap(leaderid_, other->leaderid_);
    std::swap(teamauto_, other->teamauto_);
    std::swap(teamoutobj_, other->teamoutobj_);
    teammanlist_.Swap(&other->teammanlist_);
    std::swap(needcombat_, other->needcombat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoTeamInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoTeamInfo_descriptor_;
  metadata.reflection = ProtoTeamInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Team_SC_UpdateTeamLevelInfo::kPlyIdFieldNumber;
const int Team_SC_UpdateTeamLevelInfo::kLevelFieldNumber;
#endif  // !_MSC_VER

Team_SC_UpdateTeamLevelInfo::Team_SC_UpdateTeamLevelInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Team_SC_UpdateTeamLevelInfo::InitAsDefaultInstance() {
}

Team_SC_UpdateTeamLevelInfo::Team_SC_UpdateTeamLevelInfo(const Team_SC_UpdateTeamLevelInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Team_SC_UpdateTeamLevelInfo::SharedCtor() {
  _cached_size_ = 0;
  plyid_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Team_SC_UpdateTeamLevelInfo::~Team_SC_UpdateTeamLevelInfo() {
  SharedDtor();
}

void Team_SC_UpdateTeamLevelInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Team_SC_UpdateTeamLevelInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Team_SC_UpdateTeamLevelInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Team_SC_UpdateTeamLevelInfo_descriptor_;
}

const Team_SC_UpdateTeamLevelInfo& Team_SC_UpdateTeamLevelInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2eproto();
  return *default_instance_;
}

Team_SC_UpdateTeamLevelInfo* Team_SC_UpdateTeamLevelInfo::default_instance_ = NULL;

Team_SC_UpdateTeamLevelInfo* Team_SC_UpdateTeamLevelInfo::New() const {
  return new Team_SC_UpdateTeamLevelInfo;
}

void Team_SC_UpdateTeamLevelInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    plyid_ = 0;
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Team_SC_UpdateTeamLevelInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 plyId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plyid_)));
          set_has_plyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Team_SC_UpdateTeamLevelInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 plyId = 1;
  if (has_plyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->plyid(), output);
  }

  // required int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Team_SC_UpdateTeamLevelInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 plyId = 1;
  if (has_plyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->plyid(), target);
  }

  // required int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Team_SC_UpdateTeamLevelInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 plyId = 1;
    if (has_plyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plyid());
    }

    // required int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Team_SC_UpdateTeamLevelInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Team_SC_UpdateTeamLevelInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Team_SC_UpdateTeamLevelInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Team_SC_UpdateTeamLevelInfo::MergeFrom(const Team_SC_UpdateTeamLevelInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plyid()) {
      set_plyid(from.plyid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Team_SC_UpdateTeamLevelInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Team_SC_UpdateTeamLevelInfo::CopyFrom(const Team_SC_UpdateTeamLevelInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Team_SC_UpdateTeamLevelInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Team_SC_UpdateTeamLevelInfo::Swap(Team_SC_UpdateTeamLevelInfo* other) {
  if (other != this) {
    std::swap(plyid_, other->plyid_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Team_SC_UpdateTeamLevelInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Team_SC_UpdateTeamLevelInfo_descriptor_;
  metadata.reflection = Team_SC_UpdateTeamLevelInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoTeamListTeamInfo::kTeamIdFieldNumber;
const int ProtoTeamListTeamInfo::kPeopleNumFieldNumber;
const int ProtoTeamListTeamInfo::kNumLimitFieldNumber;
const int ProtoTeamListTeamInfo::kLeaderInfoFieldNumber;
const int ProtoTeamListTeamInfo::kTeamOutObjFieldNumber;
const int ProtoTeamListTeamInfo::kTotalCombatFieldNumber;
const int ProtoTeamListTeamInfo::kLeaderCombatFieldNumber;
const int ProtoTeamListTeamInfo::kNeedCombatFieldNumber;
#endif  // !_MSC_VER

ProtoTeamListTeamInfo::ProtoTeamListTeamInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoTeamListTeamInfo::InitAsDefaultInstance() {
  leaderinfo_ = const_cast< ::proto::message::ProtoTeamManInfo*>(&::proto::message::ProtoTeamManInfo::default_instance());
  teamoutobj_ = const_cast< ::proto::message::ProtoTeamOutObj*>(&::proto::message::ProtoTeamOutObj::default_instance());
}

ProtoTeamListTeamInfo::ProtoTeamListTeamInfo(const ProtoTeamListTeamInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoTeamListTeamInfo::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = 0;
  peoplenum_ = 0;
  numlimit_ = 0;
  leaderinfo_ = NULL;
  teamoutobj_ = NULL;
  totalcombat_ = 0;
  leadercombat_ = 0;
  needcombat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoTeamListTeamInfo::~ProtoTeamListTeamInfo() {
  SharedDtor();
}

void ProtoTeamListTeamInfo::SharedDtor() {
  if (this != default_instance_) {
    delete leaderinfo_;
    delete teamoutobj_;
  }
}

void ProtoTeamListTeamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoTeamListTeamInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoTeamListTeamInfo_descriptor_;
}

const ProtoTeamListTeamInfo& ProtoTeamListTeamInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2eproto();
  return *default_instance_;
}

ProtoTeamListTeamInfo* ProtoTeamListTeamInfo::default_instance_ = NULL;

ProtoTeamListTeamInfo* ProtoTeamListTeamInfo::New() const {
  return new ProtoTeamListTeamInfo;
}

void ProtoTeamListTeamInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    teamid_ = 0;
    peoplenum_ = 0;
    numlimit_ = 0;
    if (has_leaderinfo()) {
      if (leaderinfo_ != NULL) leaderinfo_->::proto::message::ProtoTeamManInfo::Clear();
    }
    if (has_teamoutobj()) {
      if (teamoutobj_ != NULL) teamoutobj_->::proto::message::ProtoTeamOutObj::Clear();
    }
    totalcombat_ = 0;
    leadercombat_ = 0;
    needcombat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoTeamListTeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 teamId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_peopleNum;
        break;
      }

      // required int32 peopleNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_peopleNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &peoplenum_)));
          set_has_peoplenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_numLimit;
        break;
      }

      // required int32 numLimit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numlimit_)));
          set_has_numlimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_leaderInfo;
        break;
      }

      // optional .proto.message.ProtoTeamManInfo leaderInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leaderInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leaderinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_teamOutObj;
        break;
      }

      // optional .proto.message.ProtoTeamOutObj teamOutObj = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_teamOutObj:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_teamoutobj()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_totalCombat;
        break;
      }

      // optional int32 totalCombat = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalCombat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalcombat_)));
          set_has_totalcombat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_leaderCombat;
        break;
      }

      // optional int32 leaderCombat = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leaderCombat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leadercombat_)));
          set_has_leadercombat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_needCombat;
        break;
      }

      // optional int32 needCombat = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needCombat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &needcombat_)));
          set_has_needcombat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoTeamListTeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 teamId = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->teamid(), output);
  }

  // required int32 peopleNum = 2;
  if (has_peoplenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->peoplenum(), output);
  }

  // required int32 numLimit = 3;
  if (has_numlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->numlimit(), output);
  }

  // optional .proto.message.ProtoTeamManInfo leaderInfo = 4;
  if (has_leaderinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->leaderinfo(), output);
  }

  // optional .proto.message.ProtoTeamOutObj teamOutObj = 5;
  if (has_teamoutobj()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->teamoutobj(), output);
  }

  // optional int32 totalCombat = 6;
  if (has_totalcombat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->totalcombat(), output);
  }

  // optional int32 leaderCombat = 7;
  if (has_leadercombat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->leadercombat(), output);
  }

  // optional int32 needCombat = 8;
  if (has_needcombat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->needcombat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoTeamListTeamInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 teamId = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->teamid(), target);
  }

  // required int32 peopleNum = 2;
  if (has_peoplenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->peoplenum(), target);
  }

  // required int32 numLimit = 3;
  if (has_numlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->numlimit(), target);
  }

  // optional .proto.message.ProtoTeamManInfo leaderInfo = 4;
  if (has_leaderinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->leaderinfo(), target);
  }

  // optional .proto.message.ProtoTeamOutObj teamOutObj = 5;
  if (has_teamoutobj()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->teamoutobj(), target);
  }

  // optional int32 totalCombat = 6;
  if (has_totalcombat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->totalcombat(), target);
  }

  // optional int32 leaderCombat = 7;
  if (has_leadercombat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->leadercombat(), target);
  }

  // optional int32 needCombat = 8;
  if (has_needcombat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->needcombat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoTeamListTeamInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 teamId = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamid());
    }

    // required int32 peopleNum = 2;
    if (has_peoplenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->peoplenum());
    }

    // required int32 numLimit = 3;
    if (has_numlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numlimit());
    }

    // optional .proto.message.ProtoTeamManInfo leaderInfo = 4;
    if (has_leaderinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->leaderinfo());
    }

    // optional .proto.message.ProtoTeamOutObj teamOutObj = 5;
    if (has_teamoutobj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->teamoutobj());
    }

    // optional int32 totalCombat = 6;
    if (has_totalcombat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalcombat());
    }

    // optional int32 leaderCombat = 7;
    if (has_leadercombat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leadercombat());
    }

    // optional int32 needCombat = 8;
    if (has_needcombat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->needcombat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoTeamListTeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoTeamListTeamInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoTeamListTeamInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoTeamListTeamInfo::MergeFrom(const ProtoTeamListTeamInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_peoplenum()) {
      set_peoplenum(from.peoplenum());
    }
    if (from.has_numlimit()) {
      set_numlimit(from.numlimit());
    }
    if (from.has_leaderinfo()) {
      mutable_leaderinfo()->::proto::message::ProtoTeamManInfo::MergeFrom(from.leaderinfo());
    }
    if (from.has_teamoutobj()) {
      mutable_teamoutobj()->::proto::message::ProtoTeamOutObj::MergeFrom(from.teamoutobj());
    }
    if (from.has_totalcombat()) {
      set_totalcombat(from.totalcombat());
    }
    if (from.has_leadercombat()) {
      set_leadercombat(from.leadercombat());
    }
    if (from.has_needcombat()) {
      set_needcombat(from.needcombat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoTeamListTeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoTeamListTeamInfo::CopyFrom(const ProtoTeamListTeamInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoTeamListTeamInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_leaderinfo()) {
    if (!this->leaderinfo().IsInitialized()) return false;
  }
  if (has_teamoutobj()) {
    if (!this->teamoutobj().IsInitialized()) return false;
  }
  return true;
}

void ProtoTeamListTeamInfo::Swap(ProtoTeamListTeamInfo* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(peoplenum_, other->peoplenum_);
    std::swap(numlimit_, other->numlimit_);
    std::swap(leaderinfo_, other->leaderinfo_);
    std::swap(teamoutobj_, other->teamoutobj_);
    std::swap(totalcombat_, other->totalcombat_);
    std::swap(leadercombat_, other->leadercombat_);
    std::swap(needcombat_, other->needcombat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoTeamListTeamInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoTeamListTeamInfo_descriptor_;
  metadata.reflection = ProtoTeamListTeamInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoTeamOutObj::kObjFieldNumber;
const int ProtoTeamOutObj::kLevelMinFieldNumber;
const int ProtoTeamOutObj::kLevelMaxFieldNumber;
const int ProtoTeamOutObj::kNeedComBatFieldNumber;
#endif  // !_MSC_VER

ProtoTeamOutObj::ProtoTeamOutObj()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoTeamOutObj::InitAsDefaultInstance() {
}

ProtoTeamOutObj::ProtoTeamOutObj(const ProtoTeamOutObj& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoTeamOutObj::SharedCtor() {
  _cached_size_ = 0;
  obj_ = 0;
  levelmin_ = 0;
  levelmax_ = 0;
  needcombat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoTeamOutObj::~ProtoTeamOutObj() {
  SharedDtor();
}

void ProtoTeamOutObj::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoTeamOutObj::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoTeamOutObj::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoTeamOutObj_descriptor_;
}

const ProtoTeamOutObj& ProtoTeamOutObj::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2eproto();
  return *default_instance_;
}

ProtoTeamOutObj* ProtoTeamOutObj::default_instance_ = NULL;

ProtoTeamOutObj* ProtoTeamOutObj::New() const {
  return new ProtoTeamOutObj;
}

void ProtoTeamOutObj::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    obj_ = 0;
    levelmin_ = 0;
    levelmax_ = 0;
    needcombat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoTeamOutObj::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 obj = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obj_)));
          set_has_obj();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_levelMin;
        break;
      }

      // required int32 levelMin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_levelMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &levelmin_)));
          set_has_levelmin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_levelMax;
        break;
      }

      // required int32 levelMax = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_levelMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &levelmax_)));
          set_has_levelmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_needComBat;
        break;
      }

      // required int32 needComBat = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needComBat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &needcombat_)));
          set_has_needcombat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoTeamOutObj::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 obj = 1;
  if (has_obj()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->obj(), output);
  }

  // required int32 levelMin = 2;
  if (has_levelmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->levelmin(), output);
  }

  // required int32 levelMax = 3;
  if (has_levelmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->levelmax(), output);
  }

  // required int32 needComBat = 4;
  if (has_needcombat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->needcombat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoTeamOutObj::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 obj = 1;
  if (has_obj()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->obj(), target);
  }

  // required int32 levelMin = 2;
  if (has_levelmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->levelmin(), target);
  }

  // required int32 levelMax = 3;
  if (has_levelmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->levelmax(), target);
  }

  // required int32 needComBat = 4;
  if (has_needcombat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->needcombat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoTeamOutObj::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 obj = 1;
    if (has_obj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obj());
    }

    // required int32 levelMin = 2;
    if (has_levelmin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->levelmin());
    }

    // required int32 levelMax = 3;
    if (has_levelmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->levelmax());
    }

    // required int32 needComBat = 4;
    if (has_needcombat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->needcombat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoTeamOutObj::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoTeamOutObj* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoTeamOutObj*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoTeamOutObj::MergeFrom(const ProtoTeamOutObj& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_obj()) {
      set_obj(from.obj());
    }
    if (from.has_levelmin()) {
      set_levelmin(from.levelmin());
    }
    if (from.has_levelmax()) {
      set_levelmax(from.levelmax());
    }
    if (from.has_needcombat()) {
      set_needcombat(from.needcombat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoTeamOutObj::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoTeamOutObj::CopyFrom(const ProtoTeamOutObj& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoTeamOutObj::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ProtoTeamOutObj::Swap(ProtoTeamOutObj* other) {
  if (other != this) {
    std::swap(obj_, other->obj_);
    std::swap(levelmin_, other->levelmin_);
    std::swap(levelmax_, other->levelmax_);
    std::swap(needcombat_, other->needcombat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoTeamOutObj::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoTeamOutObj_descriptor_;
  metadata.reflection = ProtoTeamOutObj_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Team_CS_SetTeamOutObj::kObjFieldNumber;
#endif  // !_MSC_VER

Team_CS_SetTeamOutObj::Team_CS_SetTeamOutObj()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Team_CS_SetTeamOutObj::InitAsDefaultInstance() {
  obj_ = const_cast< ::proto::message::ProtoTeamOutObj*>(&::proto::message::ProtoTeamOutObj::default_instance());
}

Team_CS_SetTeamOutObj::Team_CS_SetTeamOutObj(const Team_CS_SetTeamOutObj& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Team_CS_SetTeamOutObj::SharedCtor() {
  _cached_size_ = 0;
  obj_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Team_CS_SetTeamOutObj::~Team_CS_SetTeamOutObj() {
  SharedDtor();
}

void Team_CS_SetTeamOutObj::SharedDtor() {
  if (this != default_instance_) {
    delete obj_;
  }
}

void Team_CS_SetTeamOutObj::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Team_CS_SetTeamOutObj::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Team_CS_SetTeamOutObj_descriptor_;
}

const Team_CS_SetTeamOutObj& Team_CS_SetTeamOutObj::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2eproto();
  return *default_instance_;
}

Team_CS_SetTeamOutObj* Team_CS_SetTeamOutObj::default_instance_ = NULL;

Team_CS_SetTeamOutObj* Team_CS_SetTeamOutObj::New() const {
  return new Team_CS_SetTeamOutObj;
}

void Team_CS_SetTeamOutObj::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_obj()) {
      if (obj_ != NULL) obj_->::proto::message::ProtoTeamOutObj::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Team_CS_SetTeamOutObj::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.message.ProtoTeamOutObj obj = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_obj()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Team_CS_SetTeamOutObj::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .proto.message.ProtoTeamOutObj obj = 1;
  if (has_obj()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->obj(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Team_CS_SetTeamOutObj::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .proto.message.ProtoTeamOutObj obj = 1;
  if (has_obj()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->obj(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Team_CS_SetTeamOutObj::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto.message.ProtoTeamOutObj obj = 1;
    if (has_obj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->obj());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Team_CS_SetTeamOutObj::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Team_CS_SetTeamOutObj* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Team_CS_SetTeamOutObj*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Team_CS_SetTeamOutObj::MergeFrom(const Team_CS_SetTeamOutObj& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_obj()) {
      mutable_obj()->::proto::message::ProtoTeamOutObj::MergeFrom(from.obj());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Team_CS_SetTeamOutObj::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Team_CS_SetTeamOutObj::CopyFrom(const Team_CS_SetTeamOutObj& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Team_CS_SetTeamOutObj::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_obj()) {
    if (!this->obj().IsInitialized()) return false;
  }
  return true;
}

void Team_CS_SetTeamOutObj::Swap(Team_CS_SetTeamOutObj* other) {
  if (other != this) {
    std::swap(obj_, other->obj_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Team_CS_SetTeamOutObj::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Team_CS_SetTeamOutObj_descriptor_;
  metadata.reflection = Team_CS_SetTeamOutObj_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Team_SC_SetTeamOutObj::kResultFieldNumber;
#endif  // !_MSC_VER

Team_SC_SetTeamOutObj::Team_SC_SetTeamOutObj()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Team_SC_SetTeamOutObj::InitAsDefaultInstance() {
}

Team_SC_SetTeamOutObj::Team_SC_SetTeamOutObj(const Team_SC_SetTeamOutObj& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Team_SC_SetTeamOutObj::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Team_SC_SetTeamOutObj::~Team_SC_SetTeamOutObj() {
  SharedDtor();
}

void Team_SC_SetTeamOutObj::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Team_SC_SetTeamOutObj::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Team_SC_SetTeamOutObj::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Team_SC_SetTeamOutObj_descriptor_;
}

const Team_SC_SetTeamOutObj& Team_SC_SetTeamOutObj::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2eproto();
  return *default_instance_;
}

Team_SC_SetTeamOutObj* Team_SC_SetTeamOutObj::default_instance_ = NULL;

Team_SC_SetTeamOutObj* Team_SC_SetTeamOutObj::New() const {
  return new Team_SC_SetTeamOutObj;
}

void Team_SC_SetTeamOutObj::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Team_SC_SetTeamOutObj::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Team_SC_SetTeamOutObj::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Team_SC_SetTeamOutObj::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Team_SC_SetTeamOutObj::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Team_SC_SetTeamOutObj::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Team_SC_SetTeamOutObj* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Team_SC_SetTeamOutObj*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Team_SC_SetTeamOutObj::MergeFrom(const Team_SC_SetTeamOutObj& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Team_SC_SetTeamOutObj::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Team_SC_SetTeamOutObj::CopyFrom(const Team_SC_SetTeamOutObj& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Team_SC_SetTeamOutObj::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Team_SC_SetTeamOutObj::Swap(Team_SC_SetTeamOutObj* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Team_SC_SetTeamOutObj::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Team_SC_SetTeamOutObj_descriptor_;
  metadata.reflection = Team_SC_SetTeamOutObj_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Team_CS_MatchingQueueInfo::kObjFieldNumber;
#endif  // !_MSC_VER

Team_CS_MatchingQueueInfo::Team_CS_MatchingQueueInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Team_CS_MatchingQueueInfo::InitAsDefaultInstance() {
}

Team_CS_MatchingQueueInfo::Team_CS_MatchingQueueInfo(const Team_CS_MatchingQueueInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Team_CS_MatchingQueueInfo::SharedCtor() {
  _cached_size_ = 0;
  obj_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Team_CS_MatchingQueueInfo::~Team_CS_MatchingQueueInfo() {
  SharedDtor();
}

void Team_CS_MatchingQueueInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Team_CS_MatchingQueueInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Team_CS_MatchingQueueInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Team_CS_MatchingQueueInfo_descriptor_;
}

const Team_CS_MatchingQueueInfo& Team_CS_MatchingQueueInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2eproto();
  return *default_instance_;
}

Team_CS_MatchingQueueInfo* Team_CS_MatchingQueueInfo::default_instance_ = NULL;

Team_CS_MatchingQueueInfo* Team_CS_MatchingQueueInfo::New() const {
  return new Team_CS_MatchingQueueInfo;
}

void Team_CS_MatchingQueueInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    obj_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Team_CS_MatchingQueueInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 obj = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obj_)));
          set_has_obj();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Team_CS_MatchingQueueInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 obj = 1;
  if (has_obj()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->obj(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Team_CS_MatchingQueueInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 obj = 1;
  if (has_obj()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->obj(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Team_CS_MatchingQueueInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 obj = 1;
    if (has_obj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obj());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Team_CS_MatchingQueueInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Team_CS_MatchingQueueInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Team_CS_MatchingQueueInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Team_CS_MatchingQueueInfo::MergeFrom(const Team_CS_MatchingQueueInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_obj()) {
      set_obj(from.obj());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Team_CS_MatchingQueueInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Team_CS_MatchingQueueInfo::CopyFrom(const Team_CS_MatchingQueueInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Team_CS_MatchingQueueInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Team_CS_MatchingQueueInfo::Swap(Team_CS_MatchingQueueInfo* other) {
  if (other != this) {
    std::swap(obj_, other->obj_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Team_CS_MatchingQueueInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Team_CS_MatchingQueueInfo_descriptor_;
  metadata.reflection = Team_CS_MatchingQueueInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Team_SC_MatchingQueueInfo::kNTeamNumFieldNumber;
const int Team_SC_MatchingQueueInfo::kNSingleNumFieldNumber;
const int Team_SC_MatchingQueueInfo::kObjFieldNumber;
#endif  // !_MSC_VER

Team_SC_MatchingQueueInfo::Team_SC_MatchingQueueInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Team_SC_MatchingQueueInfo::InitAsDefaultInstance() {
}

Team_SC_MatchingQueueInfo::Team_SC_MatchingQueueInfo(const Team_SC_MatchingQueueInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Team_SC_MatchingQueueInfo::SharedCtor() {
  _cached_size_ = 0;
  nteamnum_ = 0;
  nsinglenum_ = 0;
  obj_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Team_SC_MatchingQueueInfo::~Team_SC_MatchingQueueInfo() {
  SharedDtor();
}

void Team_SC_MatchingQueueInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Team_SC_MatchingQueueInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Team_SC_MatchingQueueInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Team_SC_MatchingQueueInfo_descriptor_;
}

const Team_SC_MatchingQueueInfo& Team_SC_MatchingQueueInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2eproto();
  return *default_instance_;
}

Team_SC_MatchingQueueInfo* Team_SC_MatchingQueueInfo::default_instance_ = NULL;

Team_SC_MatchingQueueInfo* Team_SC_MatchingQueueInfo::New() const {
  return new Team_SC_MatchingQueueInfo;
}

void Team_SC_MatchingQueueInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nteamnum_ = 0;
    nsinglenum_ = 0;
    obj_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Team_SC_MatchingQueueInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nTeamNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nteamnum_)));
          set_has_nteamnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nSingleNum;
        break;
      }

      // required int32 nSingleNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nSingleNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nsinglenum_)));
          set_has_nsinglenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_obj;
        break;
      }

      // required int32 obj = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_obj:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obj_)));
          set_has_obj();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Team_SC_MatchingQueueInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 nTeamNum = 1;
  if (has_nteamnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nteamnum(), output);
  }

  // required int32 nSingleNum = 2;
  if (has_nsinglenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nsinglenum(), output);
  }

  // required int32 obj = 3;
  if (has_obj()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->obj(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Team_SC_MatchingQueueInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 nTeamNum = 1;
  if (has_nteamnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nteamnum(), target);
  }

  // required int32 nSingleNum = 2;
  if (has_nsinglenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nsinglenum(), target);
  }

  // required int32 obj = 3;
  if (has_obj()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->obj(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Team_SC_MatchingQueueInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nTeamNum = 1;
    if (has_nteamnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nteamnum());
    }

    // required int32 nSingleNum = 2;
    if (has_nsinglenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nsinglenum());
    }

    // required int32 obj = 3;
    if (has_obj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obj());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Team_SC_MatchingQueueInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Team_SC_MatchingQueueInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Team_SC_MatchingQueueInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Team_SC_MatchingQueueInfo::MergeFrom(const Team_SC_MatchingQueueInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nteamnum()) {
      set_nteamnum(from.nteamnum());
    }
    if (from.has_nsinglenum()) {
      set_nsinglenum(from.nsinglenum());
    }
    if (from.has_obj()) {
      set_obj(from.obj());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Team_SC_MatchingQueueInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Team_SC_MatchingQueueInfo::CopyFrom(const Team_SC_MatchingQueueInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Team_SC_MatchingQueueInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Team_SC_MatchingQueueInfo::Swap(Team_SC_MatchingQueueInfo* other) {
  if (other != this) {
    std::swap(nteamnum_, other->nteamnum_);
    std::swap(nsinglenum_, other->nsinglenum_);
    std::swap(obj_, other->obj_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Team_SC_MatchingQueueInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Team_SC_MatchingQueueInfo_descriptor_;
  metadata.reflection = Team_SC_MatchingQueueInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Team_CS_GetTeamList::kObjFieldNumber;
#endif  // !_MSC_VER

Team_CS_GetTeamList::Team_CS_GetTeamList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Team_CS_GetTeamList::InitAsDefaultInstance() {
}

Team_CS_GetTeamList::Team_CS_GetTeamList(const Team_CS_GetTeamList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Team_CS_GetTeamList::SharedCtor() {
  _cached_size_ = 0;
  obj_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Team_CS_GetTeamList::~Team_CS_GetTeamList() {
  SharedDtor();
}

void Team_CS_GetTeamList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Team_CS_GetTeamList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Team_CS_GetTeamList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Team_CS_GetTeamList_descriptor_;
}

const Team_CS_GetTeamList& Team_CS_GetTeamList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2eproto();
  return *default_instance_;
}

Team_CS_GetTeamList* Team_CS_GetTeamList::default_instance_ = NULL;

Team_CS_GetTeamList* Team_CS_GetTeamList::New() const {
  return new Team_CS_GetTeamList;
}

void Team_CS_GetTeamList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    obj_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Team_CS_GetTeamList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 obj = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obj_)));
          set_has_obj();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Team_CS_GetTeamList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 obj = 1;
  if (has_obj()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->obj(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Team_CS_GetTeamList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 obj = 1;
  if (has_obj()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->obj(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Team_CS_GetTeamList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 obj = 1;
    if (has_obj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obj());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Team_CS_GetTeamList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Team_CS_GetTeamList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Team_CS_GetTeamList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Team_CS_GetTeamList::MergeFrom(const Team_CS_GetTeamList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_obj()) {
      set_obj(from.obj());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Team_CS_GetTeamList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Team_CS_GetTeamList::CopyFrom(const Team_CS_GetTeamList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Team_CS_GetTeamList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Team_CS_GetTeamList::Swap(Team_CS_GetTeamList* other) {
  if (other != this) {
    std::swap(obj_, other->obj_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Team_CS_GetTeamList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Team_CS_GetTeamList_descriptor_;
  metadata.reflection = Team_CS_GetTeamList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Team_SC_GetTeamList::kResultFieldNumber;
const int Team_SC_GetTeamList::kTeamInfoFieldNumber;
#endif  // !_MSC_VER

Team_SC_GetTeamList::Team_SC_GetTeamList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Team_SC_GetTeamList::InitAsDefaultInstance() {
}

Team_SC_GetTeamList::Team_SC_GetTeamList(const Team_SC_GetTeamList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Team_SC_GetTeamList::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Team_SC_GetTeamList::~Team_SC_GetTeamList() {
  SharedDtor();
}

void Team_SC_GetTeamList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Team_SC_GetTeamList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Team_SC_GetTeamList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Team_SC_GetTeamList_descriptor_;
}

const Team_SC_GetTeamList& Team_SC_GetTeamList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2eproto();
  return *default_instance_;
}

Team_SC_GetTeamList* Team_SC_GetTeamList::default_instance_ = NULL;

Team_SC_GetTeamList* Team_SC_GetTeamList::New() const {
  return new Team_SC_GetTeamList;
}

void Team_SC_GetTeamList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  teaminfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Team_SC_GetTeamList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_teamInfo;
        break;
      }

      // repeated .proto.message.ProtoTeamListTeamInfo teamInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_teamInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teaminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_teamInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Team_SC_GetTeamList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .proto.message.ProtoTeamListTeamInfo teamInfo = 2;
  for (int i = 0; i < this->teaminfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->teaminfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Team_SC_GetTeamList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .proto.message.ProtoTeamListTeamInfo teamInfo = 2;
  for (int i = 0; i < this->teaminfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->teaminfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Team_SC_GetTeamList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .proto.message.ProtoTeamListTeamInfo teamInfo = 2;
  total_size += 1 * this->teaminfo_size();
  for (int i = 0; i < this->teaminfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teaminfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Team_SC_GetTeamList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Team_SC_GetTeamList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Team_SC_GetTeamList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Team_SC_GetTeamList::MergeFrom(const Team_SC_GetTeamList& from) {
  GOOGLE_CHECK_NE(&from, this);
  teaminfo_.MergeFrom(from.teaminfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Team_SC_GetTeamList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Team_SC_GetTeamList::CopyFrom(const Team_SC_GetTeamList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Team_SC_GetTeamList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < teaminfo_size(); i++) {
    if (!this->teaminfo(i).IsInitialized()) return false;
  }
  return true;
}

void Team_SC_GetTeamList::Swap(Team_SC_GetTeamList* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    teaminfo_.Swap(&other->teaminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Team_SC_GetTeamList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Team_SC_GetTeamList_descriptor_;
  metadata.reflection = Team_SC_GetTeamList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Team_CS_CreateTeam::kNeedCombatFieldNumber;
#endif  // !_MSC_VER

Team_CS_CreateTeam::Team_CS_CreateTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Team_CS_CreateTeam::InitAsDefaultInstance() {
}

Team_CS_CreateTeam::Team_CS_CreateTeam(const Team_CS_CreateTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Team_CS_CreateTeam::SharedCtor() {
  _cached_size_ = 0;
  needcombat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Team_CS_CreateTeam::~Team_CS_CreateTeam() {
  SharedDtor();
}

void Team_CS_CreateTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Team_CS_CreateTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Team_CS_CreateTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Team_CS_CreateTeam_descriptor_;
}

const Team_CS_CreateTeam& Team_CS_CreateTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2eproto();
  return *default_instance_;
}

Team_CS_CreateTeam* Team_CS_CreateTeam::default_instance_ = NULL;

Team_CS_CreateTeam* Team_CS_CreateTeam::New() const {
  return new Team_CS_CreateTeam;
}

void Team_CS_CreateTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    needcombat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Team_CS_CreateTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 needCombat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &needcombat_)));
          set_has_needcombat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Team_CS_CreateTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 needCombat = 1;
  if (has_needcombat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->needcombat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Team_CS_CreateTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 needCombat = 1;
  if (has_needcombat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->needcombat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Team_CS_CreateTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 needCombat = 1;
    if (has_needcombat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->needcombat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Team_CS_CreateTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Team_CS_CreateTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Team_CS_CreateTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Team_CS_CreateTeam::MergeFrom(const Team_CS_CreateTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_needcombat()) {
      set_needcombat(from.needcombat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Team_CS_CreateTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Team_CS_CreateTeam::CopyFrom(const Team_CS_CreateTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Team_CS_CreateTeam::IsInitialized() const {

  return true;
}

void Team_CS_CreateTeam::Swap(Team_CS_CreateTeam* other) {
  if (other != this) {
    std::swap(needcombat_, other->needcombat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Team_CS_CreateTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Team_CS_CreateTeam_descriptor_;
  metadata.reflection = Team_CS_CreateTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Team_SC_CreateTeam::kResultFieldNumber;
#endif  // !_MSC_VER

Team_SC_CreateTeam::Team_SC_CreateTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Team_SC_CreateTeam::InitAsDefaultInstance() {
}

Team_SC_CreateTeam::Team_SC_CreateTeam(const Team_SC_CreateTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Team_SC_CreateTeam::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Team_SC_CreateTeam::~Team_SC_CreateTeam() {
  SharedDtor();
}

void Team_SC_CreateTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Team_SC_CreateTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Team_SC_CreateTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Team_SC_CreateTeam_descriptor_;
}

const Team_SC_CreateTeam& Team_SC_CreateTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2eproto();
  return *default_instance_;
}

Team_SC_CreateTeam* Team_SC_CreateTeam::default_instance_ = NULL;

Team_SC_CreateTeam* Team_SC_CreateTeam::New() const {
  return new Team_SC_CreateTeam;
}

void Team_SC_CreateTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Team_SC_CreateTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Team_SC_CreateTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Team_SC_CreateTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Team_SC_CreateTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Team_SC_CreateTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Team_SC_CreateTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Team_SC_CreateTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Team_SC_CreateTeam::MergeFrom(const Team_SC_CreateTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Team_SC_CreateTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Team_SC_CreateTeam::CopyFrom(const Team_SC_CreateTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Team_SC_CreateTeam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Team_SC_CreateTeam::Swap(Team_SC_CreateTeam* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Team_SC_CreateTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Team_SC_CreateTeam_descriptor_;
  metadata.reflection = Team_SC_CreateTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Team_CS_ApplyTeam::kTeamIdFieldNumber;
#endif  // !_MSC_VER

Team_CS_ApplyTeam::Team_CS_ApplyTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Team_CS_ApplyTeam::InitAsDefaultInstance() {
}

Team_CS_ApplyTeam::Team_CS_ApplyTeam(const Team_CS_ApplyTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Team_CS_ApplyTeam::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Team_CS_ApplyTeam::~Team_CS_ApplyTeam() {
  SharedDtor();
}

void Team_CS_ApplyTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Team_CS_ApplyTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Team_CS_ApplyTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Team_CS_ApplyTeam_descriptor_;
}

const Team_CS_ApplyTeam& Team_CS_ApplyTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2eproto();
  return *default_instance_;
}

Team_CS_ApplyTeam* Team_CS_ApplyTeam::default_instance_ = NULL;

Team_CS_ApplyTeam* Team_CS_ApplyTeam::New() const {
  return new Team_CS_ApplyTeam;
}

void Team_CS_ApplyTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    teamid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Team_CS_ApplyTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 teamId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Team_CS_ApplyTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 teamId = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Team_CS_ApplyTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 teamId = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Team_CS_ApplyTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 teamId = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Team_CS_ApplyTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Team_CS_ApplyTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Team_CS_ApplyTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Team_CS_ApplyTeam::MergeFrom(const Team_CS_ApplyTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Team_CS_ApplyTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Team_CS_ApplyTeam::CopyFrom(const Team_CS_ApplyTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Team_CS_ApplyTeam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Team_CS_ApplyTeam::Swap(Team_CS_ApplyTeam* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Team_CS_ApplyTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Team_CS_ApplyTeam_descriptor_;
  metadata.reflection = Team_CS_ApplyTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Team_SC_ApplyTeam::kResultFieldNumber;
const int Team_SC_ApplyTeam::kTeamIdFieldNumber;
#endif  // !_MSC_VER

Team_SC_ApplyTeam::Team_SC_ApplyTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Team_SC_ApplyTeam::InitAsDefaultInstance() {
}

Team_SC_ApplyTeam::Team_SC_ApplyTeam(const Team_SC_ApplyTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Team_SC_ApplyTeam::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  teamid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Team_SC_ApplyTeam::~Team_SC_ApplyTeam() {
  SharedDtor();
}

void Team_SC_ApplyTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Team_SC_ApplyTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Team_SC_ApplyTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Team_SC_ApplyTeam_descriptor_;
}

const Team_SC_ApplyTeam& Team_SC_ApplyTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2eproto();
  return *default_instance_;
}

Team_SC_ApplyTeam* Team_SC_ApplyTeam::default_instance_ = NULL;

Team_SC_ApplyTeam* Team_SC_ApplyTeam::New() const {
  return new Team_SC_ApplyTeam;
}

void Team_SC_ApplyTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    teamid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Team_SC_ApplyTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_teamId;
        break;
      }

      // optional int32 teamId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Team_SC_ApplyTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 teamId = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Team_SC_ApplyTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 teamId = 2;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Team_SC_ApplyTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 teamId = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Team_SC_ApplyTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Team_SC_ApplyTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Team_SC_ApplyTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Team_SC_ApplyTeam::MergeFrom(const Team_SC_ApplyTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Team_SC_ApplyTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Team_SC_ApplyTeam::CopyFrom(const Team_SC_ApplyTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Team_SC_ApplyTeam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Team_SC_ApplyTeam::Swap(Team_SC_ApplyTeam* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Team_SC_ApplyTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Team_SC_ApplyTeam_descriptor_;
  metadata.reflection = Team_SC_ApplyTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Team_CS_TeamQuit::kTeamIdFieldNumber;
#endif  // !_MSC_VER

Team_CS_TeamQuit::Team_CS_TeamQuit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Team_CS_TeamQuit::InitAsDefaultInstance() {
}

Team_CS_TeamQuit::Team_CS_TeamQuit(const Team_CS_TeamQuit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Team_CS_TeamQuit::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Team_CS_TeamQuit::~Team_CS_TeamQuit() {
  SharedDtor();
}

void Team_CS_TeamQuit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Team_CS_TeamQuit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Team_CS_TeamQuit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Team_CS_TeamQuit_descriptor_;
}

const Team_CS_TeamQuit& Team_CS_TeamQuit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2eproto();
  return *default_instance_;
}

Team_CS_TeamQuit* Team_CS_TeamQuit::default_instance_ = NULL;

Team_CS_TeamQuit* Team_CS_TeamQuit::New() const {
  return new Team_CS_TeamQuit;
}

void Team_CS_TeamQuit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    teamid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Team_CS_TeamQuit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 teamId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Team_CS_TeamQuit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 teamId = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Team_CS_TeamQuit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 teamId = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Team_CS_TeamQuit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 teamId = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Team_CS_TeamQuit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Team_CS_TeamQuit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Team_CS_TeamQuit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Team_CS_TeamQuit::MergeFrom(const Team_CS_TeamQuit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Team_CS_TeamQuit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Team_CS_TeamQuit::CopyFrom(const Team_CS_TeamQuit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Team_CS_TeamQuit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Team_CS_TeamQuit::Swap(Team_CS_TeamQuit* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Team_CS_TeamQuit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Team_CS_TeamQuit_descriptor_;
  metadata.reflection = Team_CS_TeamQuit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Team_SC_TeamQuit::kResultFieldNumber;
#endif  // !_MSC_VER

Team_SC_TeamQuit::Team_SC_TeamQuit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Team_SC_TeamQuit::InitAsDefaultInstance() {
}

Team_SC_TeamQuit::Team_SC_TeamQuit(const Team_SC_TeamQuit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Team_SC_TeamQuit::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Team_SC_TeamQuit::~Team_SC_TeamQuit() {
  SharedDtor();
}

void Team_SC_TeamQuit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Team_SC_TeamQuit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Team_SC_TeamQuit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Team_SC_TeamQuit_descriptor_;
}

const Team_SC_TeamQuit& Team_SC_TeamQuit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2eproto();
  return *default_instance_;
}

Team_SC_TeamQuit* Team_SC_TeamQuit::default_instance_ = NULL;

Team_SC_TeamQuit* Team_SC_TeamQuit::New() const {
  return new Team_SC_TeamQuit;
}

void Team_SC_TeamQuit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Team_SC_TeamQuit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Team_SC_TeamQuit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Team_SC_TeamQuit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Team_SC_TeamQuit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Team_SC_TeamQuit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Team_SC_TeamQuit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Team_SC_TeamQuit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Team_SC_TeamQuit::MergeFrom(const Team_SC_TeamQuit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Team_SC_TeamQuit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Team_SC_TeamQuit::CopyFrom(const Team_SC_TeamQuit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Team_SC_TeamQuit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Team_SC_TeamQuit::Swap(Team_SC_TeamQuit* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Team_SC_TeamQuit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Team_SC_TeamQuit_descriptor_;
  metadata.reflection = Team_SC_TeamQuit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Team_CS_TeamAppoint::kPlyIdFieldNumber;
const int Team_CS_TeamAppoint::kAppointFieldNumber;
#endif  // !_MSC_VER

Team_CS_TeamAppoint::Team_CS_TeamAppoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Team_CS_TeamAppoint::InitAsDefaultInstance() {
}

Team_CS_TeamAppoint::Team_CS_TeamAppoint(const Team_CS_TeamAppoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Team_CS_TeamAppoint::SharedCtor() {
  _cached_size_ = 0;
  plyid_ = 0u;
  appoint_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Team_CS_TeamAppoint::~Team_CS_TeamAppoint() {
  SharedDtor();
}

void Team_CS_TeamAppoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Team_CS_TeamAppoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Team_CS_TeamAppoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Team_CS_TeamAppoint_descriptor_;
}

const Team_CS_TeamAppoint& Team_CS_TeamAppoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2eproto();
  return *default_instance_;
}

Team_CS_TeamAppoint* Team_CS_TeamAppoint::default_instance_ = NULL;

Team_CS_TeamAppoint* Team_CS_TeamAppoint::New() const {
  return new Team_CS_TeamAppoint;
}

void Team_CS_TeamAppoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    plyid_ = 0u;
    appoint_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Team_CS_TeamAppoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 plyId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plyid_)));
          set_has_plyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_appoint;
        break;
      }

      // required int32 appoint = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appoint_)));
          set_has_appoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Team_CS_TeamAppoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 plyId = 1;
  if (has_plyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->plyid(), output);
  }

  // required int32 appoint = 2;
  if (has_appoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->appoint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Team_CS_TeamAppoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 plyId = 1;
  if (has_plyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->plyid(), target);
  }

  // required int32 appoint = 2;
  if (has_appoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->appoint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Team_CS_TeamAppoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 plyId = 1;
    if (has_plyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->plyid());
    }

    // required int32 appoint = 2;
    if (has_appoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appoint());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Team_CS_TeamAppoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Team_CS_TeamAppoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Team_CS_TeamAppoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Team_CS_TeamAppoint::MergeFrom(const Team_CS_TeamAppoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plyid()) {
      set_plyid(from.plyid());
    }
    if (from.has_appoint()) {
      set_appoint(from.appoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Team_CS_TeamAppoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Team_CS_TeamAppoint::CopyFrom(const Team_CS_TeamAppoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Team_CS_TeamAppoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Team_CS_TeamAppoint::Swap(Team_CS_TeamAppoint* other) {
  if (other != this) {
    std::swap(plyid_, other->plyid_);
    std::swap(appoint_, other->appoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Team_CS_TeamAppoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Team_CS_TeamAppoint_descriptor_;
  metadata.reflection = Team_CS_TeamAppoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Team_SC_TeamAppoint::kResultFieldNumber;
#endif  // !_MSC_VER

Team_SC_TeamAppoint::Team_SC_TeamAppoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Team_SC_TeamAppoint::InitAsDefaultInstance() {
}

Team_SC_TeamAppoint::Team_SC_TeamAppoint(const Team_SC_TeamAppoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Team_SC_TeamAppoint::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Team_SC_TeamAppoint::~Team_SC_TeamAppoint() {
  SharedDtor();
}

void Team_SC_TeamAppoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Team_SC_TeamAppoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Team_SC_TeamAppoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Team_SC_TeamAppoint_descriptor_;
}

const Team_SC_TeamAppoint& Team_SC_TeamAppoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2eproto();
  return *default_instance_;
}

Team_SC_TeamAppoint* Team_SC_TeamAppoint::default_instance_ = NULL;

Team_SC_TeamAppoint* Team_SC_TeamAppoint::New() const {
  return new Team_SC_TeamAppoint;
}

void Team_SC_TeamAppoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Team_SC_TeamAppoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Team_SC_TeamAppoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Team_SC_TeamAppoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Team_SC_TeamAppoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Team_SC_TeamAppoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Team_SC_TeamAppoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Team_SC_TeamAppoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Team_SC_TeamAppoint::MergeFrom(const Team_SC_TeamAppoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Team_SC_TeamAppoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Team_SC_TeamAppoint::CopyFrom(const Team_SC_TeamAppoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Team_SC_TeamAppoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Team_SC_TeamAppoint::Swap(Team_SC_TeamAppoint* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Team_SC_TeamAppoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Team_SC_TeamAppoint_descriptor_;
  metadata.reflection = Team_SC_TeamAppoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Team_CS_TeamKick::kPlyIdFieldNumber;
#endif  // !_MSC_VER

Team_CS_TeamKick::Team_CS_TeamKick()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Team_CS_TeamKick::InitAsDefaultInstance() {
}

Team_CS_TeamKick::Team_CS_TeamKick(const Team_CS_TeamKick& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Team_CS_TeamKick::SharedCtor() {
  _cached_size_ = 0;
  plyid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Team_CS_TeamKick::~Team_CS_TeamKick() {
  SharedDtor();
}

void Team_CS_TeamKick::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Team_CS_TeamKick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Team_CS_TeamKick::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Team_CS_TeamKick_descriptor_;
}

const Team_CS_TeamKick& Team_CS_TeamKick::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2eproto();
  return *default_instance_;
}

Team_CS_TeamKick* Team_CS_TeamKick::default_instance_ = NULL;

Team_CS_TeamKick* Team_CS_TeamKick::New() const {
  return new Team_CS_TeamKick;
}

void Team_CS_TeamKick::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    plyid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Team_CS_TeamKick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 plyId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plyid_)));
          set_has_plyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Team_CS_TeamKick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 plyId = 1;
  if (has_plyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->plyid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Team_CS_TeamKick::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 plyId = 1;
  if (has_plyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->plyid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Team_CS_TeamKick::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 plyId = 1;
    if (has_plyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->plyid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Team_CS_TeamKick::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Team_CS_TeamKick* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Team_CS_TeamKick*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Team_CS_TeamKick::MergeFrom(const Team_CS_TeamKick& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plyid()) {
      set_plyid(from.plyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Team_CS_TeamKick::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Team_CS_TeamKick::CopyFrom(const Team_CS_TeamKick& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Team_CS_TeamKick::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Team_CS_TeamKick::Swap(Team_CS_TeamKick* other) {
  if (other != this) {
    std::swap(plyid_, other->plyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Team_CS_TeamKick::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Team_CS_TeamKick_descriptor_;
  metadata.reflection = Team_CS_TeamKick_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Team_SC_TeamKick::kResultFieldNumber;
const int Team_SC_TeamKick::kBeKickNameFieldNumber;
#endif  // !_MSC_VER

Team_SC_TeamKick::Team_SC_TeamKick()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Team_SC_TeamKick::InitAsDefaultInstance() {
}

Team_SC_TeamKick::Team_SC_TeamKick(const Team_SC_TeamKick& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Team_SC_TeamKick::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  bekickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Team_SC_TeamKick::~Team_SC_TeamKick() {
  SharedDtor();
}

void Team_SC_TeamKick::SharedDtor() {
  if (bekickname_ != &::google::protobuf::internal::kEmptyString) {
    delete bekickname_;
  }
  if (this != default_instance_) {
  }
}

void Team_SC_TeamKick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Team_SC_TeamKick::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Team_SC_TeamKick_descriptor_;
}

const Team_SC_TeamKick& Team_SC_TeamKick::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2eproto();
  return *default_instance_;
}

Team_SC_TeamKick* Team_SC_TeamKick::default_instance_ = NULL;

Team_SC_TeamKick* Team_SC_TeamKick::New() const {
  return new Team_SC_TeamKick;
}

void Team_SC_TeamKick::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_bekickname()) {
      if (bekickname_ != &::google::protobuf::internal::kEmptyString) {
        bekickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Team_SC_TeamKick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_beKickName;
        break;
      }

      // optional string beKickName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_beKickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bekickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bekickname().data(), this->bekickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Team_SC_TeamKick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional string beKickName = 2;
  if (has_bekickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bekickname().data(), this->bekickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->bekickname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Team_SC_TeamKick::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional string beKickName = 2;
  if (has_bekickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bekickname().data(), this->bekickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bekickname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Team_SC_TeamKick::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional string beKickName = 2;
    if (has_bekickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bekickname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Team_SC_TeamKick::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Team_SC_TeamKick* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Team_SC_TeamKick*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Team_SC_TeamKick::MergeFrom(const Team_SC_TeamKick& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_bekickname()) {
      set_bekickname(from.bekickname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Team_SC_TeamKick::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Team_SC_TeamKick::CopyFrom(const Team_SC_TeamKick& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Team_SC_TeamKick::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Team_SC_TeamKick::Swap(Team_SC_TeamKick* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(bekickname_, other->bekickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Team_SC_TeamKick::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Team_SC_TeamKick_descriptor_;
  metadata.reflection = Team_SC_TeamKick_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Team_CS_TempLeave::kPlyIdFieldNumber;
const int Team_CS_TempLeave::kStatusFieldNumber;
#endif  // !_MSC_VER

Team_CS_TempLeave::Team_CS_TempLeave()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Team_CS_TempLeave::InitAsDefaultInstance() {
}

Team_CS_TempLeave::Team_CS_TempLeave(const Team_CS_TempLeave& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Team_CS_TempLeave::SharedCtor() {
  _cached_size_ = 0;
  plyid_ = 0u;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Team_CS_TempLeave::~Team_CS_TempLeave() {
  SharedDtor();
}

void Team_CS_TempLeave::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Team_CS_TempLeave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Team_CS_TempLeave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Team_CS_TempLeave_descriptor_;
}

const Team_CS_TempLeave& Team_CS_TempLeave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2eproto();
  return *default_instance_;
}

Team_CS_TempLeave* Team_CS_TempLeave::default_instance_ = NULL;

Team_CS_TempLeave* Team_CS_TempLeave::New() const {
  return new Team_CS_TempLeave;
}

void Team_CS_TempLeave::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    plyid_ = 0u;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Team_CS_TempLeave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 plyId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plyid_)));
          set_has_plyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required int32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Team_CS_TempLeave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 plyId = 1;
  if (has_plyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->plyid(), output);
  }

  // required int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Team_CS_TempLeave::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 plyId = 1;
  if (has_plyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->plyid(), target);
  }

  // required int32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Team_CS_TempLeave::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 plyId = 1;
    if (has_plyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->plyid());
    }

    // required int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Team_CS_TempLeave::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Team_CS_TempLeave* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Team_CS_TempLeave*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Team_CS_TempLeave::MergeFrom(const Team_CS_TempLeave& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plyid()) {
      set_plyid(from.plyid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Team_CS_TempLeave::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Team_CS_TempLeave::CopyFrom(const Team_CS_TempLeave& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Team_CS_TempLeave::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Team_CS_TempLeave::Swap(Team_CS_TempLeave* other) {
  if (other != this) {
    std::swap(plyid_, other->plyid_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Team_CS_TempLeave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Team_CS_TempLeave_descriptor_;
  metadata.reflection = Team_CS_TempLeave_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Team_SC_TempLeave::kResultFieldNumber;
#endif  // !_MSC_VER

Team_SC_TempLeave::Team_SC_TempLeave()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Team_SC_TempLeave::InitAsDefaultInstance() {
}

Team_SC_TempLeave::Team_SC_TempLeave(const Team_SC_TempLeave& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Team_SC_TempLeave::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Team_SC_TempLeave::~Team_SC_TempLeave() {
  SharedDtor();
}

void Team_SC_TempLeave::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Team_SC_TempLeave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Team_SC_TempLeave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Team_SC_TempLeave_descriptor_;
}

const Team_SC_TempLeave& Team_SC_TempLeave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2eproto();
  return *default_instance_;
}

Team_SC_TempLeave* Team_SC_TempLeave::default_instance_ = NULL;

Team_SC_TempLeave* Team_SC_TempLeave::New() const {
  return new Team_SC_TempLeave;
}

void Team_SC_TempLeave::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Team_SC_TempLeave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Team_SC_TempLeave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Team_SC_TempLeave::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Team_SC_TempLeave::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Team_SC_TempLeave::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Team_SC_TempLeave* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Team_SC_TempLeave*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Team_SC_TempLeave::MergeFrom(const Team_SC_TempLeave& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Team_SC_TempLeave::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Team_SC_TempLeave::CopyFrom(const Team_SC_TempLeave& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Team_SC_TempLeave::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Team_SC_TempLeave::Swap(Team_SC_TempLeave* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Team_SC_TempLeave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Team_SC_TempLeave_descriptor_;
  metadata.reflection = Team_SC_TempLeave_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Team_CS_TeamAuto::kIsAutoFieldNumber;
#endif  // !_MSC_VER

Team_CS_TeamAuto::Team_CS_TeamAuto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Team_CS_TeamAuto::InitAsDefaultInstance() {
}

Team_CS_TeamAuto::Team_CS_TeamAuto(const Team_CS_TeamAuto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Team_CS_TeamAuto::SharedCtor() {
  _cached_size_ = 0;
  isauto_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Team_CS_TeamAuto::~Team_CS_TeamAuto() {
  SharedDtor();
}

void Team_CS_TeamAuto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Team_CS_TeamAuto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Team_CS_TeamAuto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Team_CS_TeamAuto_descriptor_;
}

const Team_CS_TeamAuto& Team_CS_TeamAuto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2eproto();
  return *default_instance_;
}

Team_CS_TeamAuto* Team_CS_TeamAuto::default_instance_ = NULL;

Team_CS_TeamAuto* Team_CS_TeamAuto::New() const {
  return new Team_CS_TeamAuto;
}

void Team_CS_TeamAuto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isauto_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Team_CS_TeamAuto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 isAuto = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isauto_)));
          set_has_isauto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Team_CS_TeamAuto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 isAuto = 1;
  if (has_isauto()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->isauto(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Team_CS_TeamAuto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 isAuto = 1;
  if (has_isauto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->isauto(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Team_CS_TeamAuto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 isAuto = 1;
    if (has_isauto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isauto());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Team_CS_TeamAuto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Team_CS_TeamAuto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Team_CS_TeamAuto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Team_CS_TeamAuto::MergeFrom(const Team_CS_TeamAuto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isauto()) {
      set_isauto(from.isauto());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Team_CS_TeamAuto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Team_CS_TeamAuto::CopyFrom(const Team_CS_TeamAuto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Team_CS_TeamAuto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Team_CS_TeamAuto::Swap(Team_CS_TeamAuto* other) {
  if (other != this) {
    std::swap(isauto_, other->isauto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Team_CS_TeamAuto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Team_CS_TeamAuto_descriptor_;
  metadata.reflection = Team_CS_TeamAuto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Team_SC_TeamAuto::kResultFieldNumber;
#endif  // !_MSC_VER

Team_SC_TeamAuto::Team_SC_TeamAuto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Team_SC_TeamAuto::InitAsDefaultInstance() {
}

Team_SC_TeamAuto::Team_SC_TeamAuto(const Team_SC_TeamAuto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Team_SC_TeamAuto::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Team_SC_TeamAuto::~Team_SC_TeamAuto() {
  SharedDtor();
}

void Team_SC_TeamAuto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Team_SC_TeamAuto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Team_SC_TeamAuto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Team_SC_TeamAuto_descriptor_;
}

const Team_SC_TeamAuto& Team_SC_TeamAuto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2eproto();
  return *default_instance_;
}

Team_SC_TeamAuto* Team_SC_TeamAuto::default_instance_ = NULL;

Team_SC_TeamAuto* Team_SC_TeamAuto::New() const {
  return new Team_SC_TeamAuto;
}

void Team_SC_TeamAuto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Team_SC_TeamAuto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Team_SC_TeamAuto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Team_SC_TeamAuto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Team_SC_TeamAuto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Team_SC_TeamAuto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Team_SC_TeamAuto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Team_SC_TeamAuto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Team_SC_TeamAuto::MergeFrom(const Team_SC_TeamAuto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Team_SC_TeamAuto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Team_SC_TeamAuto::CopyFrom(const Team_SC_TeamAuto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Team_SC_TeamAuto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Team_SC_TeamAuto::Swap(Team_SC_TeamAuto* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Team_SC_TeamAuto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Team_SC_TeamAuto_descriptor_;
  metadata.reflection = Team_SC_TeamAuto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Team_CS_MemberAuto::kIsAutoFieldNumber;
const int Team_CS_MemberAuto::kObjFieldNumber;
#endif  // !_MSC_VER

Team_CS_MemberAuto::Team_CS_MemberAuto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Team_CS_MemberAuto::InitAsDefaultInstance() {
}

Team_CS_MemberAuto::Team_CS_MemberAuto(const Team_CS_MemberAuto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Team_CS_MemberAuto::SharedCtor() {
  _cached_size_ = 0;
  isauto_ = 0;
  obj_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Team_CS_MemberAuto::~Team_CS_MemberAuto() {
  SharedDtor();
}

void Team_CS_MemberAuto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Team_CS_MemberAuto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Team_CS_MemberAuto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Team_CS_MemberAuto_descriptor_;
}

const Team_CS_MemberAuto& Team_CS_MemberAuto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2eproto();
  return *default_instance_;
}

Team_CS_MemberAuto* Team_CS_MemberAuto::default_instance_ = NULL;

Team_CS_MemberAuto* Team_CS_MemberAuto::New() const {
  return new Team_CS_MemberAuto;
}

void Team_CS_MemberAuto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isauto_ = 0;
    obj_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Team_CS_MemberAuto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 isAuto = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isauto_)));
          set_has_isauto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_obj;
        break;
      }

      // required int32 obj = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_obj:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obj_)));
          set_has_obj();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Team_CS_MemberAuto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 isAuto = 1;
  if (has_isauto()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->isauto(), output);
  }

  // required int32 obj = 2;
  if (has_obj()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->obj(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Team_CS_MemberAuto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 isAuto = 1;
  if (has_isauto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->isauto(), target);
  }

  // required int32 obj = 2;
  if (has_obj()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->obj(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Team_CS_MemberAuto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 isAuto = 1;
    if (has_isauto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isauto());
    }

    // required int32 obj = 2;
    if (has_obj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obj());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Team_CS_MemberAuto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Team_CS_MemberAuto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Team_CS_MemberAuto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Team_CS_MemberAuto::MergeFrom(const Team_CS_MemberAuto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isauto()) {
      set_isauto(from.isauto());
    }
    if (from.has_obj()) {
      set_obj(from.obj());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Team_CS_MemberAuto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Team_CS_MemberAuto::CopyFrom(const Team_CS_MemberAuto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Team_CS_MemberAuto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Team_CS_MemberAuto::Swap(Team_CS_MemberAuto* other) {
  if (other != this) {
    std::swap(isauto_, other->isauto_);
    std::swap(obj_, other->obj_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Team_CS_MemberAuto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Team_CS_MemberAuto_descriptor_;
  metadata.reflection = Team_CS_MemberAuto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Team_SC_MemberAuto::kResultFieldNumber;
const int Team_SC_MemberAuto::kIsAutoFieldNumber;
#endif  // !_MSC_VER

Team_SC_MemberAuto::Team_SC_MemberAuto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Team_SC_MemberAuto::InitAsDefaultInstance() {
}

Team_SC_MemberAuto::Team_SC_MemberAuto(const Team_SC_MemberAuto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Team_SC_MemberAuto::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  isauto_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Team_SC_MemberAuto::~Team_SC_MemberAuto() {
  SharedDtor();
}

void Team_SC_MemberAuto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Team_SC_MemberAuto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Team_SC_MemberAuto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Team_SC_MemberAuto_descriptor_;
}

const Team_SC_MemberAuto& Team_SC_MemberAuto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2eproto();
  return *default_instance_;
}

Team_SC_MemberAuto* Team_SC_MemberAuto::default_instance_ = NULL;

Team_SC_MemberAuto* Team_SC_MemberAuto::New() const {
  return new Team_SC_MemberAuto;
}

void Team_SC_MemberAuto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    isauto_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Team_SC_MemberAuto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isAuto;
        break;
      }

      // required int32 isAuto = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isAuto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isauto_)));
          set_has_isauto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Team_SC_MemberAuto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required int32 isAuto = 2;
  if (has_isauto()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->isauto(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Team_SC_MemberAuto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required int32 isAuto = 2;
  if (has_isauto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->isauto(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Team_SC_MemberAuto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required int32 isAuto = 2;
    if (has_isauto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isauto());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Team_SC_MemberAuto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Team_SC_MemberAuto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Team_SC_MemberAuto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Team_SC_MemberAuto::MergeFrom(const Team_SC_MemberAuto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_isauto()) {
      set_isauto(from.isauto());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Team_SC_MemberAuto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Team_SC_MemberAuto::CopyFrom(const Team_SC_MemberAuto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Team_SC_MemberAuto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Team_SC_MemberAuto::Swap(Team_SC_MemberAuto* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(isauto_, other->isauto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Team_SC_MemberAuto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Team_SC_MemberAuto_descriptor_;
  metadata.reflection = Team_SC_MemberAuto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Team_CS_TeamInvite::kPlyIdFieldNumber;
#endif  // !_MSC_VER

Team_CS_TeamInvite::Team_CS_TeamInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Team_CS_TeamInvite::InitAsDefaultInstance() {
}

Team_CS_TeamInvite::Team_CS_TeamInvite(const Team_CS_TeamInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Team_CS_TeamInvite::SharedCtor() {
  _cached_size_ = 0;
  plyid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Team_CS_TeamInvite::~Team_CS_TeamInvite() {
  SharedDtor();
}

void Team_CS_TeamInvite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Team_CS_TeamInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Team_CS_TeamInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Team_CS_TeamInvite_descriptor_;
}

const Team_CS_TeamInvite& Team_CS_TeamInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2eproto();
  return *default_instance_;
}

Team_CS_TeamInvite* Team_CS_TeamInvite::default_instance_ = NULL;

Team_CS_TeamInvite* Team_CS_TeamInvite::New() const {
  return new Team_CS_TeamInvite;
}

void Team_CS_TeamInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    plyid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Team_CS_TeamInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 plyId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &plyid_)));
          set_has_plyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Team_CS_TeamInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 plyId = 1;
  if (has_plyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->plyid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Team_CS_TeamInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 plyId = 1;
  if (has_plyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->plyid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Team_CS_TeamInvite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 plyId = 1;
    if (has_plyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->plyid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Team_CS_TeamInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Team_CS_TeamInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Team_CS_TeamInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Team_CS_TeamInvite::MergeFrom(const Team_CS_TeamInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plyid()) {
      set_plyid(from.plyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Team_CS_TeamInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Team_CS_TeamInvite::CopyFrom(const Team_CS_TeamInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Team_CS_TeamInvite::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Team_CS_TeamInvite::Swap(Team_CS_TeamInvite* other) {
  if (other != this) {
    std::swap(plyid_, other->plyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Team_CS_TeamInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Team_CS_TeamInvite_descriptor_;
  metadata.reflection = Team_CS_TeamInvite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Team_SC_TeamInvite::kResultFieldNumber;
#endif  // !_MSC_VER

Team_SC_TeamInvite::Team_SC_TeamInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Team_SC_TeamInvite::InitAsDefaultInstance() {
}

Team_SC_TeamInvite::Team_SC_TeamInvite(const Team_SC_TeamInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Team_SC_TeamInvite::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Team_SC_TeamInvite::~Team_SC_TeamInvite() {
  SharedDtor();
}

void Team_SC_TeamInvite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Team_SC_TeamInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Team_SC_TeamInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Team_SC_TeamInvite_descriptor_;
}

const Team_SC_TeamInvite& Team_SC_TeamInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2eproto();
  return *default_instance_;
}

Team_SC_TeamInvite* Team_SC_TeamInvite::default_instance_ = NULL;

Team_SC_TeamInvite* Team_SC_TeamInvite::New() const {
  return new Team_SC_TeamInvite;
}

void Team_SC_TeamInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Team_SC_TeamInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Team_SC_TeamInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Team_SC_TeamInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Team_SC_TeamInvite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Team_SC_TeamInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Team_SC_TeamInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Team_SC_TeamInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Team_SC_TeamInvite::MergeFrom(const Team_SC_TeamInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Team_SC_TeamInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Team_SC_TeamInvite::CopyFrom(const Team_SC_TeamInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Team_SC_TeamInvite::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Team_SC_TeamInvite::Swap(Team_SC_TeamInvite* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Team_SC_TeamInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Team_SC_TeamInvite_descriptor_;
  metadata.reflection = Team_SC_TeamInvite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Team_CS_SetTeamBeInvite::kAllowFieldNumber;
const int Team_CS_SetTeamBeInvite::kTeamIdFieldNumber;
#endif  // !_MSC_VER

Team_CS_SetTeamBeInvite::Team_CS_SetTeamBeInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Team_CS_SetTeamBeInvite::InitAsDefaultInstance() {
}

Team_CS_SetTeamBeInvite::Team_CS_SetTeamBeInvite(const Team_CS_SetTeamBeInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Team_CS_SetTeamBeInvite::SharedCtor() {
  _cached_size_ = 0;
  allow_ = false;
  teamid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Team_CS_SetTeamBeInvite::~Team_CS_SetTeamBeInvite() {
  SharedDtor();
}

void Team_CS_SetTeamBeInvite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Team_CS_SetTeamBeInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Team_CS_SetTeamBeInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Team_CS_SetTeamBeInvite_descriptor_;
}

const Team_CS_SetTeamBeInvite& Team_CS_SetTeamBeInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2eproto();
  return *default_instance_;
}

Team_CS_SetTeamBeInvite* Team_CS_SetTeamBeInvite::default_instance_ = NULL;

Team_CS_SetTeamBeInvite* Team_CS_SetTeamBeInvite::New() const {
  return new Team_CS_SetTeamBeInvite;
}

void Team_CS_SetTeamBeInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    allow_ = false;
    teamid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Team_CS_SetTeamBeInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool allow = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_)));
          set_has_allow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_teamId;
        break;
      }

      // required int32 teamId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Team_CS_SetTeamBeInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool allow = 1;
  if (has_allow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->allow(), output);
  }

  // required int32 teamId = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Team_CS_SetTeamBeInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool allow = 1;
  if (has_allow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->allow(), target);
  }

  // required int32 teamId = 2;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Team_CS_SetTeamBeInvite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool allow = 1;
    if (has_allow()) {
      total_size += 1 + 1;
    }

    // required int32 teamId = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Team_CS_SetTeamBeInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Team_CS_SetTeamBeInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Team_CS_SetTeamBeInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Team_CS_SetTeamBeInvite::MergeFrom(const Team_CS_SetTeamBeInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_allow()) {
      set_allow(from.allow());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Team_CS_SetTeamBeInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Team_CS_SetTeamBeInvite::CopyFrom(const Team_CS_SetTeamBeInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Team_CS_SetTeamBeInvite::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Team_CS_SetTeamBeInvite::Swap(Team_CS_SetTeamBeInvite* other) {
  if (other != this) {
    std::swap(allow_, other->allow_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Team_CS_SetTeamBeInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Team_CS_SetTeamBeInvite_descriptor_;
  metadata.reflection = Team_CS_SetTeamBeInvite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Team_SC_SetTeamBeInvite::kResultFieldNumber;
#endif  // !_MSC_VER

Team_SC_SetTeamBeInvite::Team_SC_SetTeamBeInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Team_SC_SetTeamBeInvite::InitAsDefaultInstance() {
}

Team_SC_SetTeamBeInvite::Team_SC_SetTeamBeInvite(const Team_SC_SetTeamBeInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Team_SC_SetTeamBeInvite::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Team_SC_SetTeamBeInvite::~Team_SC_SetTeamBeInvite() {
  SharedDtor();
}

void Team_SC_SetTeamBeInvite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Team_SC_SetTeamBeInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Team_SC_SetTeamBeInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Team_SC_SetTeamBeInvite_descriptor_;
}

const Team_SC_SetTeamBeInvite& Team_SC_SetTeamBeInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2eproto();
  return *default_instance_;
}

Team_SC_SetTeamBeInvite* Team_SC_SetTeamBeInvite::default_instance_ = NULL;

Team_SC_SetTeamBeInvite* Team_SC_SetTeamBeInvite::New() const {
  return new Team_SC_SetTeamBeInvite;
}

void Team_SC_SetTeamBeInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Team_SC_SetTeamBeInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Team_SC_SetTeamBeInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Team_SC_SetTeamBeInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Team_SC_SetTeamBeInvite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Team_SC_SetTeamBeInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Team_SC_SetTeamBeInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Team_SC_SetTeamBeInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Team_SC_SetTeamBeInvite::MergeFrom(const Team_SC_SetTeamBeInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Team_SC_SetTeamBeInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Team_SC_SetTeamBeInvite::CopyFrom(const Team_SC_SetTeamBeInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Team_SC_SetTeamBeInvite::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Team_SC_SetTeamBeInvite::Swap(Team_SC_SetTeamBeInvite* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Team_SC_SetTeamBeInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Team_SC_SetTeamBeInvite_descriptor_;
  metadata.reflection = Team_SC_SetTeamBeInvite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Team_CS_SetTeamAllow::kPlyIdFieldNumber;
const int Team_CS_SetTeamAllow::kAllowFieldNumber;
#endif  // !_MSC_VER

Team_CS_SetTeamAllow::Team_CS_SetTeamAllow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Team_CS_SetTeamAllow::InitAsDefaultInstance() {
}

Team_CS_SetTeamAllow::Team_CS_SetTeamAllow(const Team_CS_SetTeamAllow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Team_CS_SetTeamAllow::SharedCtor() {
  _cached_size_ = 0;
  plyid_ = 0u;
  allow_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Team_CS_SetTeamAllow::~Team_CS_SetTeamAllow() {
  SharedDtor();
}

void Team_CS_SetTeamAllow::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Team_CS_SetTeamAllow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Team_CS_SetTeamAllow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Team_CS_SetTeamAllow_descriptor_;
}

const Team_CS_SetTeamAllow& Team_CS_SetTeamAllow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2eproto();
  return *default_instance_;
}

Team_CS_SetTeamAllow* Team_CS_SetTeamAllow::default_instance_ = NULL;

Team_CS_SetTeamAllow* Team_CS_SetTeamAllow::New() const {
  return new Team_CS_SetTeamAllow;
}

void Team_CS_SetTeamAllow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    plyid_ = 0u;
    allow_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Team_CS_SetTeamAllow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 plyId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plyid_)));
          set_has_plyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_allow;
        break;
      }

      // required bool allow = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_)));
          set_has_allow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Team_CS_SetTeamAllow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 plyId = 1;
  if (has_plyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->plyid(), output);
  }

  // required bool allow = 2;
  if (has_allow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->allow(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Team_CS_SetTeamAllow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 plyId = 1;
  if (has_plyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->plyid(), target);
  }

  // required bool allow = 2;
  if (has_allow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->allow(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Team_CS_SetTeamAllow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 plyId = 1;
    if (has_plyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->plyid());
    }

    // required bool allow = 2;
    if (has_allow()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Team_CS_SetTeamAllow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Team_CS_SetTeamAllow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Team_CS_SetTeamAllow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Team_CS_SetTeamAllow::MergeFrom(const Team_CS_SetTeamAllow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plyid()) {
      set_plyid(from.plyid());
    }
    if (from.has_allow()) {
      set_allow(from.allow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Team_CS_SetTeamAllow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Team_CS_SetTeamAllow::CopyFrom(const Team_CS_SetTeamAllow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Team_CS_SetTeamAllow::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Team_CS_SetTeamAllow::Swap(Team_CS_SetTeamAllow* other) {
  if (other != this) {
    std::swap(plyid_, other->plyid_);
    std::swap(allow_, other->allow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Team_CS_SetTeamAllow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Team_CS_SetTeamAllow_descriptor_;
  metadata.reflection = Team_CS_SetTeamAllow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Team_SC_SetTeamAllow::kResultFieldNumber;
#endif  // !_MSC_VER

Team_SC_SetTeamAllow::Team_SC_SetTeamAllow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Team_SC_SetTeamAllow::InitAsDefaultInstance() {
}

Team_SC_SetTeamAllow::Team_SC_SetTeamAllow(const Team_SC_SetTeamAllow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Team_SC_SetTeamAllow::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Team_SC_SetTeamAllow::~Team_SC_SetTeamAllow() {
  SharedDtor();
}

void Team_SC_SetTeamAllow::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Team_SC_SetTeamAllow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Team_SC_SetTeamAllow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Team_SC_SetTeamAllow_descriptor_;
}

const Team_SC_SetTeamAllow& Team_SC_SetTeamAllow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2eproto();
  return *default_instance_;
}

Team_SC_SetTeamAllow* Team_SC_SetTeamAllow::default_instance_ = NULL;

Team_SC_SetTeamAllow* Team_SC_SetTeamAllow::New() const {
  return new Team_SC_SetTeamAllow;
}

void Team_SC_SetTeamAllow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Team_SC_SetTeamAllow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Team_SC_SetTeamAllow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Team_SC_SetTeamAllow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Team_SC_SetTeamAllow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Team_SC_SetTeamAllow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Team_SC_SetTeamAllow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Team_SC_SetTeamAllow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Team_SC_SetTeamAllow::MergeFrom(const Team_SC_SetTeamAllow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Team_SC_SetTeamAllow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Team_SC_SetTeamAllow::CopyFrom(const Team_SC_SetTeamAllow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Team_SC_SetTeamAllow::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Team_SC_SetTeamAllow::Swap(Team_SC_SetTeamAllow* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Team_SC_SetTeamAllow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Team_SC_SetTeamAllow_descriptor_;
  metadata.reflection = Team_SC_SetTeamAllow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Team_CS_SetTeamAllowOneTime::kAllowFieldNumber;
#endif  // !_MSC_VER

Team_CS_SetTeamAllowOneTime::Team_CS_SetTeamAllowOneTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Team_CS_SetTeamAllowOneTime::InitAsDefaultInstance() {
}

Team_CS_SetTeamAllowOneTime::Team_CS_SetTeamAllowOneTime(const Team_CS_SetTeamAllowOneTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Team_CS_SetTeamAllowOneTime::SharedCtor() {
  _cached_size_ = 0;
  allow_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Team_CS_SetTeamAllowOneTime::~Team_CS_SetTeamAllowOneTime() {
  SharedDtor();
}

void Team_CS_SetTeamAllowOneTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Team_CS_SetTeamAllowOneTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Team_CS_SetTeamAllowOneTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Team_CS_SetTeamAllowOneTime_descriptor_;
}

const Team_CS_SetTeamAllowOneTime& Team_CS_SetTeamAllowOneTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2eproto();
  return *default_instance_;
}

Team_CS_SetTeamAllowOneTime* Team_CS_SetTeamAllowOneTime::default_instance_ = NULL;

Team_CS_SetTeamAllowOneTime* Team_CS_SetTeamAllowOneTime::New() const {
  return new Team_CS_SetTeamAllowOneTime;
}

void Team_CS_SetTeamAllowOneTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    allow_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Team_CS_SetTeamAllowOneTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool allow = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_)));
          set_has_allow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Team_CS_SetTeamAllowOneTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool allow = 1;
  if (has_allow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->allow(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Team_CS_SetTeamAllowOneTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool allow = 1;
  if (has_allow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->allow(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Team_CS_SetTeamAllowOneTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool allow = 1;
    if (has_allow()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Team_CS_SetTeamAllowOneTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Team_CS_SetTeamAllowOneTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Team_CS_SetTeamAllowOneTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Team_CS_SetTeamAllowOneTime::MergeFrom(const Team_CS_SetTeamAllowOneTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_allow()) {
      set_allow(from.allow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Team_CS_SetTeamAllowOneTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Team_CS_SetTeamAllowOneTime::CopyFrom(const Team_CS_SetTeamAllowOneTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Team_CS_SetTeamAllowOneTime::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Team_CS_SetTeamAllowOneTime::Swap(Team_CS_SetTeamAllowOneTime* other) {
  if (other != this) {
    std::swap(allow_, other->allow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Team_CS_SetTeamAllowOneTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Team_CS_SetTeamAllowOneTime_descriptor_;
  metadata.reflection = Team_CS_SetTeamAllowOneTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Team_SC_SetTeamAllowOneTime::kResultFieldNumber;
#endif  // !_MSC_VER

Team_SC_SetTeamAllowOneTime::Team_SC_SetTeamAllowOneTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Team_SC_SetTeamAllowOneTime::InitAsDefaultInstance() {
}

Team_SC_SetTeamAllowOneTime::Team_SC_SetTeamAllowOneTime(const Team_SC_SetTeamAllowOneTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Team_SC_SetTeamAllowOneTime::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Team_SC_SetTeamAllowOneTime::~Team_SC_SetTeamAllowOneTime() {
  SharedDtor();
}

void Team_SC_SetTeamAllowOneTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Team_SC_SetTeamAllowOneTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Team_SC_SetTeamAllowOneTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Team_SC_SetTeamAllowOneTime_descriptor_;
}

const Team_SC_SetTeamAllowOneTime& Team_SC_SetTeamAllowOneTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2eproto();
  return *default_instance_;
}

Team_SC_SetTeamAllowOneTime* Team_SC_SetTeamAllowOneTime::default_instance_ = NULL;

Team_SC_SetTeamAllowOneTime* Team_SC_SetTeamAllowOneTime::New() const {
  return new Team_SC_SetTeamAllowOneTime;
}

void Team_SC_SetTeamAllowOneTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Team_SC_SetTeamAllowOneTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Team_SC_SetTeamAllowOneTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Team_SC_SetTeamAllowOneTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Team_SC_SetTeamAllowOneTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Team_SC_SetTeamAllowOneTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Team_SC_SetTeamAllowOneTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Team_SC_SetTeamAllowOneTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Team_SC_SetTeamAllowOneTime::MergeFrom(const Team_SC_SetTeamAllowOneTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Team_SC_SetTeamAllowOneTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Team_SC_SetTeamAllowOneTime::CopyFrom(const Team_SC_SetTeamAllowOneTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Team_SC_SetTeamAllowOneTime::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Team_SC_SetTeamAllowOneTime::Swap(Team_SC_SetTeamAllowOneTime* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Team_SC_SetTeamAllowOneTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Team_SC_SetTeamAllowOneTime_descriptor_;
  metadata.reflection = Team_SC_SetTeamAllowOneTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Team_CS_UpdateTeamInfo::Team_CS_UpdateTeamInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Team_CS_UpdateTeamInfo::InitAsDefaultInstance() {
}

Team_CS_UpdateTeamInfo::Team_CS_UpdateTeamInfo(const Team_CS_UpdateTeamInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Team_CS_UpdateTeamInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Team_CS_UpdateTeamInfo::~Team_CS_UpdateTeamInfo() {
  SharedDtor();
}

void Team_CS_UpdateTeamInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Team_CS_UpdateTeamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Team_CS_UpdateTeamInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Team_CS_UpdateTeamInfo_descriptor_;
}

const Team_CS_UpdateTeamInfo& Team_CS_UpdateTeamInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2eproto();
  return *default_instance_;
}

Team_CS_UpdateTeamInfo* Team_CS_UpdateTeamInfo::default_instance_ = NULL;

Team_CS_UpdateTeamInfo* Team_CS_UpdateTeamInfo::New() const {
  return new Team_CS_UpdateTeamInfo;
}

void Team_CS_UpdateTeamInfo::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Team_CS_UpdateTeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Team_CS_UpdateTeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Team_CS_UpdateTeamInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Team_CS_UpdateTeamInfo::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Team_CS_UpdateTeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Team_CS_UpdateTeamInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Team_CS_UpdateTeamInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Team_CS_UpdateTeamInfo::MergeFrom(const Team_CS_UpdateTeamInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Team_CS_UpdateTeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Team_CS_UpdateTeamInfo::CopyFrom(const Team_CS_UpdateTeamInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Team_CS_UpdateTeamInfo::IsInitialized() const {

  return true;
}

void Team_CS_UpdateTeamInfo::Swap(Team_CS_UpdateTeamInfo* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Team_CS_UpdateTeamInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Team_CS_UpdateTeamInfo_descriptor_;
  metadata.reflection = Team_CS_UpdateTeamInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Team_SC_UpdateTeamInfo::kTeamInfoFieldNumber;
#endif  // !_MSC_VER

Team_SC_UpdateTeamInfo::Team_SC_UpdateTeamInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Team_SC_UpdateTeamInfo::InitAsDefaultInstance() {
  teaminfo_ = const_cast< ::proto::message::ProtoTeamInfo*>(&::proto::message::ProtoTeamInfo::default_instance());
}

Team_SC_UpdateTeamInfo::Team_SC_UpdateTeamInfo(const Team_SC_UpdateTeamInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Team_SC_UpdateTeamInfo::SharedCtor() {
  _cached_size_ = 0;
  teaminfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Team_SC_UpdateTeamInfo::~Team_SC_UpdateTeamInfo() {
  SharedDtor();
}

void Team_SC_UpdateTeamInfo::SharedDtor() {
  if (this != default_instance_) {
    delete teaminfo_;
  }
}

void Team_SC_UpdateTeamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Team_SC_UpdateTeamInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Team_SC_UpdateTeamInfo_descriptor_;
}

const Team_SC_UpdateTeamInfo& Team_SC_UpdateTeamInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2eproto();
  return *default_instance_;
}

Team_SC_UpdateTeamInfo* Team_SC_UpdateTeamInfo::default_instance_ = NULL;

Team_SC_UpdateTeamInfo* Team_SC_UpdateTeamInfo::New() const {
  return new Team_SC_UpdateTeamInfo;
}

void Team_SC_UpdateTeamInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_teaminfo()) {
      if (teaminfo_ != NULL) teaminfo_->::proto::message::ProtoTeamInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Team_SC_UpdateTeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.message.ProtoTeamInfo teamInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_teaminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Team_SC_UpdateTeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.message.ProtoTeamInfo teamInfo = 1;
  if (has_teaminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->teaminfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Team_SC_UpdateTeamInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.message.ProtoTeamInfo teamInfo = 1;
  if (has_teaminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->teaminfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Team_SC_UpdateTeamInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.message.ProtoTeamInfo teamInfo = 1;
    if (has_teaminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->teaminfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Team_SC_UpdateTeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Team_SC_UpdateTeamInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Team_SC_UpdateTeamInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Team_SC_UpdateTeamInfo::MergeFrom(const Team_SC_UpdateTeamInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teaminfo()) {
      mutable_teaminfo()->::proto::message::ProtoTeamInfo::MergeFrom(from.teaminfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Team_SC_UpdateTeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Team_SC_UpdateTeamInfo::CopyFrom(const Team_SC_UpdateTeamInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Team_SC_UpdateTeamInfo::IsInitialized() const {

  if (has_teaminfo()) {
    if (!this->teaminfo().IsInitialized()) return false;
  }
  return true;
}

void Team_SC_UpdateTeamInfo::Swap(Team_SC_UpdateTeamInfo* other) {
  if (other != this) {
    std::swap(teaminfo_, other->teaminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Team_SC_UpdateTeamInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Team_SC_UpdateTeamInfo_descriptor_;
  metadata.reflection = Team_SC_UpdateTeamInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Team_SC_UpdateTeamBeInvite::kTeamIdFieldNumber;
const int Team_SC_UpdateTeamBeInvite::kNameFieldNumber;
const int Team_SC_UpdateTeamBeInvite::kObjFieldNumber;
const int Team_SC_UpdateTeamBeInvite::kTeamnumFieldNumber;
#endif  // !_MSC_VER

Team_SC_UpdateTeamBeInvite::Team_SC_UpdateTeamBeInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Team_SC_UpdateTeamBeInvite::InitAsDefaultInstance() {
}

Team_SC_UpdateTeamBeInvite::Team_SC_UpdateTeamBeInvite(const Team_SC_UpdateTeamBeInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Team_SC_UpdateTeamBeInvite::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  obj_ = 0;
  teamnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Team_SC_UpdateTeamBeInvite::~Team_SC_UpdateTeamBeInvite() {
  SharedDtor();
}

void Team_SC_UpdateTeamBeInvite::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Team_SC_UpdateTeamBeInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Team_SC_UpdateTeamBeInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Team_SC_UpdateTeamBeInvite_descriptor_;
}

const Team_SC_UpdateTeamBeInvite& Team_SC_UpdateTeamBeInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2eproto();
  return *default_instance_;
}

Team_SC_UpdateTeamBeInvite* Team_SC_UpdateTeamBeInvite::default_instance_ = NULL;

Team_SC_UpdateTeamBeInvite* Team_SC_UpdateTeamBeInvite::New() const {
  return new Team_SC_UpdateTeamBeInvite;
}

void Team_SC_UpdateTeamBeInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    teamid_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    obj_ = 0;
    teamnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Team_SC_UpdateTeamBeInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 teamId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_obj;
        break;
      }

      // optional int32 obj = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_obj:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obj_)));
          set_has_obj();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_teamnum;
        break;
      }

      // optional int32 teamnum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamnum_)));
          set_has_teamnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Team_SC_UpdateTeamBeInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 teamId = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->teamid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 obj = 3;
  if (has_obj()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->obj(), output);
  }

  // optional int32 teamnum = 4;
  if (has_teamnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->teamnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Team_SC_UpdateTeamBeInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 teamId = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->teamid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 obj = 3;
  if (has_obj()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->obj(), target);
  }

  // optional int32 teamnum = 4;
  if (has_teamnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->teamnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Team_SC_UpdateTeamBeInvite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 teamId = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 obj = 3;
    if (has_obj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obj());
    }

    // optional int32 teamnum = 4;
    if (has_teamnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Team_SC_UpdateTeamBeInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Team_SC_UpdateTeamBeInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Team_SC_UpdateTeamBeInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Team_SC_UpdateTeamBeInvite::MergeFrom(const Team_SC_UpdateTeamBeInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_obj()) {
      set_obj(from.obj());
    }
    if (from.has_teamnum()) {
      set_teamnum(from.teamnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Team_SC_UpdateTeamBeInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Team_SC_UpdateTeamBeInvite::CopyFrom(const Team_SC_UpdateTeamBeInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Team_SC_UpdateTeamBeInvite::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Team_SC_UpdateTeamBeInvite::Swap(Team_SC_UpdateTeamBeInvite* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(name_, other->name_);
    std::swap(obj_, other->obj_);
    std::swap(teamnum_, other->teamnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Team_SC_UpdateTeamBeInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Team_SC_UpdateTeamBeInvite_descriptor_;
  metadata.reflection = Team_SC_UpdateTeamBeInvite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Team_SC_UpdateApplyList::kTeamManListFieldNumber;
#endif  // !_MSC_VER

Team_SC_UpdateApplyList::Team_SC_UpdateApplyList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Team_SC_UpdateApplyList::InitAsDefaultInstance() {
}

Team_SC_UpdateApplyList::Team_SC_UpdateApplyList(const Team_SC_UpdateApplyList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Team_SC_UpdateApplyList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Team_SC_UpdateApplyList::~Team_SC_UpdateApplyList() {
  SharedDtor();
}

void Team_SC_UpdateApplyList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Team_SC_UpdateApplyList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Team_SC_UpdateApplyList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Team_SC_UpdateApplyList_descriptor_;
}

const Team_SC_UpdateApplyList& Team_SC_UpdateApplyList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2eproto();
  return *default_instance_;
}

Team_SC_UpdateApplyList* Team_SC_UpdateApplyList::default_instance_ = NULL;

Team_SC_UpdateApplyList* Team_SC_UpdateApplyList::New() const {
  return new Team_SC_UpdateApplyList;
}

void Team_SC_UpdateApplyList::Clear() {
  teammanlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Team_SC_UpdateApplyList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.ProtoTeamManInfo teamManList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_teamManList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teammanlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_teamManList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Team_SC_UpdateApplyList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.ProtoTeamManInfo teamManList = 1;
  for (int i = 0; i < this->teammanlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->teammanlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Team_SC_UpdateApplyList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.ProtoTeamManInfo teamManList = 1;
  for (int i = 0; i < this->teammanlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->teammanlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Team_SC_UpdateApplyList::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.ProtoTeamManInfo teamManList = 1;
  total_size += 1 * this->teammanlist_size();
  for (int i = 0; i < this->teammanlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teammanlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Team_SC_UpdateApplyList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Team_SC_UpdateApplyList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Team_SC_UpdateApplyList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Team_SC_UpdateApplyList::MergeFrom(const Team_SC_UpdateApplyList& from) {
  GOOGLE_CHECK_NE(&from, this);
  teammanlist_.MergeFrom(from.teammanlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Team_SC_UpdateApplyList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Team_SC_UpdateApplyList::CopyFrom(const Team_SC_UpdateApplyList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Team_SC_UpdateApplyList::IsInitialized() const {

  for (int i = 0; i < teammanlist_size(); i++) {
    if (!this->teammanlist(i).IsInitialized()) return false;
  }
  return true;
}

void Team_SC_UpdateApplyList::Swap(Team_SC_UpdateApplyList* other) {
  if (other != this) {
    teammanlist_.Swap(&other->teammanlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Team_SC_UpdateApplyList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Team_SC_UpdateApplyList_descriptor_;
  metadata.reflection = Team_SC_UpdateApplyList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Team_SC_UpdateTeamMemberTick::kNameFieldNumber;
#endif  // !_MSC_VER

Team_SC_UpdateTeamMemberTick::Team_SC_UpdateTeamMemberTick()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Team_SC_UpdateTeamMemberTick::InitAsDefaultInstance() {
}

Team_SC_UpdateTeamMemberTick::Team_SC_UpdateTeamMemberTick(const Team_SC_UpdateTeamMemberTick& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Team_SC_UpdateTeamMemberTick::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Team_SC_UpdateTeamMemberTick::~Team_SC_UpdateTeamMemberTick() {
  SharedDtor();
}

void Team_SC_UpdateTeamMemberTick::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Team_SC_UpdateTeamMemberTick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Team_SC_UpdateTeamMemberTick::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Team_SC_UpdateTeamMemberTick_descriptor_;
}

const Team_SC_UpdateTeamMemberTick& Team_SC_UpdateTeamMemberTick::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2eproto();
  return *default_instance_;
}

Team_SC_UpdateTeamMemberTick* Team_SC_UpdateTeamMemberTick::default_instance_ = NULL;

Team_SC_UpdateTeamMemberTick* Team_SC_UpdateTeamMemberTick::New() const {
  return new Team_SC_UpdateTeamMemberTick;
}

void Team_SC_UpdateTeamMemberTick::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Team_SC_UpdateTeamMemberTick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Team_SC_UpdateTeamMemberTick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Team_SC_UpdateTeamMemberTick::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Team_SC_UpdateTeamMemberTick::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Team_SC_UpdateTeamMemberTick::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Team_SC_UpdateTeamMemberTick* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Team_SC_UpdateTeamMemberTick*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Team_SC_UpdateTeamMemberTick::MergeFrom(const Team_SC_UpdateTeamMemberTick& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Team_SC_UpdateTeamMemberTick::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Team_SC_UpdateTeamMemberTick::CopyFrom(const Team_SC_UpdateTeamMemberTick& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Team_SC_UpdateTeamMemberTick::IsInitialized() const {

  return true;
}

void Team_SC_UpdateTeamMemberTick::Swap(Team_SC_UpdateTeamMemberTick* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Team_SC_UpdateTeamMemberTick::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Team_SC_UpdateTeamMemberTick_descriptor_;
  metadata.reflection = Team_SC_UpdateTeamMemberTick_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Team_CS_FollowLeader::Team_CS_FollowLeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Team_CS_FollowLeader::InitAsDefaultInstance() {
}

Team_CS_FollowLeader::Team_CS_FollowLeader(const Team_CS_FollowLeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Team_CS_FollowLeader::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Team_CS_FollowLeader::~Team_CS_FollowLeader() {
  SharedDtor();
}

void Team_CS_FollowLeader::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Team_CS_FollowLeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Team_CS_FollowLeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Team_CS_FollowLeader_descriptor_;
}

const Team_CS_FollowLeader& Team_CS_FollowLeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2eproto();
  return *default_instance_;
}

Team_CS_FollowLeader* Team_CS_FollowLeader::default_instance_ = NULL;

Team_CS_FollowLeader* Team_CS_FollowLeader::New() const {
  return new Team_CS_FollowLeader;
}

void Team_CS_FollowLeader::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Team_CS_FollowLeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Team_CS_FollowLeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Team_CS_FollowLeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Team_CS_FollowLeader::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Team_CS_FollowLeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Team_CS_FollowLeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Team_CS_FollowLeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Team_CS_FollowLeader::MergeFrom(const Team_CS_FollowLeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Team_CS_FollowLeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Team_CS_FollowLeader::CopyFrom(const Team_CS_FollowLeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Team_CS_FollowLeader::IsInitialized() const {

  return true;
}

void Team_CS_FollowLeader::Swap(Team_CS_FollowLeader* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Team_CS_FollowLeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Team_CS_FollowLeader_descriptor_;
  metadata.reflection = Team_CS_FollowLeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Team_SC_FollowLeader::kResultFieldNumber;
const int Team_SC_FollowLeader::kChangeMapFieldNumber;
const int Team_SC_FollowLeader::kPtFieldNumber;
#endif  // !_MSC_VER

Team_SC_FollowLeader::Team_SC_FollowLeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Team_SC_FollowLeader::InitAsDefaultInstance() {
  pt_ = const_cast< ::proto::message::Point3D*>(&::proto::message::Point3D::default_instance());
}

Team_SC_FollowLeader::Team_SC_FollowLeader(const Team_SC_FollowLeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Team_SC_FollowLeader::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  changemap_ = false;
  pt_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Team_SC_FollowLeader::~Team_SC_FollowLeader() {
  SharedDtor();
}

void Team_SC_FollowLeader::SharedDtor() {
  if (this != default_instance_) {
    delete pt_;
  }
}

void Team_SC_FollowLeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Team_SC_FollowLeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Team_SC_FollowLeader_descriptor_;
}

const Team_SC_FollowLeader& Team_SC_FollowLeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2eproto();
  return *default_instance_;
}

Team_SC_FollowLeader* Team_SC_FollowLeader::default_instance_ = NULL;

Team_SC_FollowLeader* Team_SC_FollowLeader::New() const {
  return new Team_SC_FollowLeader;
}

void Team_SC_FollowLeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    changemap_ = false;
    if (has_pt()) {
      if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Team_SC_FollowLeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_changeMap;
        break;
      }

      // optional bool changeMap = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_changeMap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &changemap_)));
          set_has_changemap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pt;
        break;
      }

      // optional .proto.message.Point3D pt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Team_SC_FollowLeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional bool changeMap = 2;
  if (has_changemap()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->changemap(), output);
  }

  // optional .proto.message.Point3D pt = 3;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Team_SC_FollowLeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional bool changeMap = 2;
  if (has_changemap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->changemap(), target);
  }

  // optional .proto.message.Point3D pt = 3;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Team_SC_FollowLeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional bool changeMap = 2;
    if (has_changemap()) {
      total_size += 1 + 1;
    }

    // optional .proto.message.Point3D pt = 3;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Team_SC_FollowLeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Team_SC_FollowLeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Team_SC_FollowLeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Team_SC_FollowLeader::MergeFrom(const Team_SC_FollowLeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_changemap()) {
      set_changemap(from.changemap());
    }
    if (from.has_pt()) {
      mutable_pt()->::proto::message::Point3D::MergeFrom(from.pt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Team_SC_FollowLeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Team_SC_FollowLeader::CopyFrom(const Team_SC_FollowLeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Team_SC_FollowLeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Team_SC_FollowLeader::Swap(Team_SC_FollowLeader* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(changemap_, other->changemap_);
    std::swap(pt_, other->pt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Team_SC_FollowLeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Team_SC_FollowLeader_descriptor_;
  metadata.reflection = Team_SC_FollowLeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Team_CS_SummonFollower::Team_CS_SummonFollower()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Team_CS_SummonFollower::InitAsDefaultInstance() {
}

Team_CS_SummonFollower::Team_CS_SummonFollower(const Team_CS_SummonFollower& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Team_CS_SummonFollower::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Team_CS_SummonFollower::~Team_CS_SummonFollower() {
  SharedDtor();
}

void Team_CS_SummonFollower::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Team_CS_SummonFollower::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Team_CS_SummonFollower::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Team_CS_SummonFollower_descriptor_;
}

const Team_CS_SummonFollower& Team_CS_SummonFollower::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2eproto();
  return *default_instance_;
}

Team_CS_SummonFollower* Team_CS_SummonFollower::default_instance_ = NULL;

Team_CS_SummonFollower* Team_CS_SummonFollower::New() const {
  return new Team_CS_SummonFollower;
}

void Team_CS_SummonFollower::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Team_CS_SummonFollower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Team_CS_SummonFollower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Team_CS_SummonFollower::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Team_CS_SummonFollower::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Team_CS_SummonFollower::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Team_CS_SummonFollower* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Team_CS_SummonFollower*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Team_CS_SummonFollower::MergeFrom(const Team_CS_SummonFollower& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Team_CS_SummonFollower::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Team_CS_SummonFollower::CopyFrom(const Team_CS_SummonFollower& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Team_CS_SummonFollower::IsInitialized() const {

  return true;
}

void Team_CS_SummonFollower::Swap(Team_CS_SummonFollower* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Team_CS_SummonFollower::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Team_CS_SummonFollower_descriptor_;
  metadata.reflection = Team_CS_SummonFollower_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Team_SC_SummonFollower::kResultFieldNumber;
#endif  // !_MSC_VER

Team_SC_SummonFollower::Team_SC_SummonFollower()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Team_SC_SummonFollower::InitAsDefaultInstance() {
}

Team_SC_SummonFollower::Team_SC_SummonFollower(const Team_SC_SummonFollower& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Team_SC_SummonFollower::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Team_SC_SummonFollower::~Team_SC_SummonFollower() {
  SharedDtor();
}

void Team_SC_SummonFollower::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Team_SC_SummonFollower::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Team_SC_SummonFollower::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Team_SC_SummonFollower_descriptor_;
}

const Team_SC_SummonFollower& Team_SC_SummonFollower::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2eproto();
  return *default_instance_;
}

Team_SC_SummonFollower* Team_SC_SummonFollower::default_instance_ = NULL;

Team_SC_SummonFollower* Team_SC_SummonFollower::New() const {
  return new Team_SC_SummonFollower;
}

void Team_SC_SummonFollower::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Team_SC_SummonFollower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Team_SC_SummonFollower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Team_SC_SummonFollower::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Team_SC_SummonFollower::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Team_SC_SummonFollower::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Team_SC_SummonFollower* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Team_SC_SummonFollower*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Team_SC_SummonFollower::MergeFrom(const Team_SC_SummonFollower& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Team_SC_SummonFollower::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Team_SC_SummonFollower::CopyFrom(const Team_SC_SummonFollower& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Team_SC_SummonFollower::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Team_SC_SummonFollower::Swap(Team_SC_SummonFollower* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Team_SC_SummonFollower::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Team_SC_SummonFollower_descriptor_;
  metadata.reflection = Team_SC_SummonFollower_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Team_SC_LeaderSummon::Team_SC_LeaderSummon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Team_SC_LeaderSummon::InitAsDefaultInstance() {
}

Team_SC_LeaderSummon::Team_SC_LeaderSummon(const Team_SC_LeaderSummon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Team_SC_LeaderSummon::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Team_SC_LeaderSummon::~Team_SC_LeaderSummon() {
  SharedDtor();
}

void Team_SC_LeaderSummon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Team_SC_LeaderSummon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Team_SC_LeaderSummon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Team_SC_LeaderSummon_descriptor_;
}

const Team_SC_LeaderSummon& Team_SC_LeaderSummon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2eproto();
  return *default_instance_;
}

Team_SC_LeaderSummon* Team_SC_LeaderSummon::default_instance_ = NULL;

Team_SC_LeaderSummon* Team_SC_LeaderSummon::New() const {
  return new Team_SC_LeaderSummon;
}

void Team_SC_LeaderSummon::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Team_SC_LeaderSummon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Team_SC_LeaderSummon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Team_SC_LeaderSummon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Team_SC_LeaderSummon::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Team_SC_LeaderSummon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Team_SC_LeaderSummon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Team_SC_LeaderSummon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Team_SC_LeaderSummon::MergeFrom(const Team_SC_LeaderSummon& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Team_SC_LeaderSummon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Team_SC_LeaderSummon::CopyFrom(const Team_SC_LeaderSummon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Team_SC_LeaderSummon::IsInitialized() const {

  return true;
}

void Team_SC_LeaderSummon::Swap(Team_SC_LeaderSummon* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Team_SC_LeaderSummon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Team_SC_LeaderSummon_descriptor_;
  metadata.reflection = Team_SC_LeaderSummon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Team_CS_SetIgnoreTeamInvite::kAllowFieldNumber;
#endif  // !_MSC_VER

Team_CS_SetIgnoreTeamInvite::Team_CS_SetIgnoreTeamInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Team_CS_SetIgnoreTeamInvite::InitAsDefaultInstance() {
}

Team_CS_SetIgnoreTeamInvite::Team_CS_SetIgnoreTeamInvite(const Team_CS_SetIgnoreTeamInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Team_CS_SetIgnoreTeamInvite::SharedCtor() {
  _cached_size_ = 0;
  allow_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Team_CS_SetIgnoreTeamInvite::~Team_CS_SetIgnoreTeamInvite() {
  SharedDtor();
}

void Team_CS_SetIgnoreTeamInvite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Team_CS_SetIgnoreTeamInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Team_CS_SetIgnoreTeamInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Team_CS_SetIgnoreTeamInvite_descriptor_;
}

const Team_CS_SetIgnoreTeamInvite& Team_CS_SetIgnoreTeamInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2eproto();
  return *default_instance_;
}

Team_CS_SetIgnoreTeamInvite* Team_CS_SetIgnoreTeamInvite::default_instance_ = NULL;

Team_CS_SetIgnoreTeamInvite* Team_CS_SetIgnoreTeamInvite::New() const {
  return new Team_CS_SetIgnoreTeamInvite;
}

void Team_CS_SetIgnoreTeamInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    allow_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Team_CS_SetIgnoreTeamInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool allow = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_)));
          set_has_allow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Team_CS_SetIgnoreTeamInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool allow = 1;
  if (has_allow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->allow(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Team_CS_SetIgnoreTeamInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool allow = 1;
  if (has_allow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->allow(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Team_CS_SetIgnoreTeamInvite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool allow = 1;
    if (has_allow()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Team_CS_SetIgnoreTeamInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Team_CS_SetIgnoreTeamInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Team_CS_SetIgnoreTeamInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Team_CS_SetIgnoreTeamInvite::MergeFrom(const Team_CS_SetIgnoreTeamInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_allow()) {
      set_allow(from.allow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Team_CS_SetIgnoreTeamInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Team_CS_SetIgnoreTeamInvite::CopyFrom(const Team_CS_SetIgnoreTeamInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Team_CS_SetIgnoreTeamInvite::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Team_CS_SetIgnoreTeamInvite::Swap(Team_CS_SetIgnoreTeamInvite* other) {
  if (other != this) {
    std::swap(allow_, other->allow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Team_CS_SetIgnoreTeamInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Team_CS_SetIgnoreTeamInvite_descriptor_;
  metadata.reflection = Team_CS_SetIgnoreTeamInvite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Team_SC_SetIgnoreTeamInvite::kResultFieldNumber;
#endif  // !_MSC_VER

Team_SC_SetIgnoreTeamInvite::Team_SC_SetIgnoreTeamInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Team_SC_SetIgnoreTeamInvite::InitAsDefaultInstance() {
}

Team_SC_SetIgnoreTeamInvite::Team_SC_SetIgnoreTeamInvite(const Team_SC_SetIgnoreTeamInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Team_SC_SetIgnoreTeamInvite::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Team_SC_SetIgnoreTeamInvite::~Team_SC_SetIgnoreTeamInvite() {
  SharedDtor();
}

void Team_SC_SetIgnoreTeamInvite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Team_SC_SetIgnoreTeamInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Team_SC_SetIgnoreTeamInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Team_SC_SetIgnoreTeamInvite_descriptor_;
}

const Team_SC_SetIgnoreTeamInvite& Team_SC_SetIgnoreTeamInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2eproto();
  return *default_instance_;
}

Team_SC_SetIgnoreTeamInvite* Team_SC_SetIgnoreTeamInvite::default_instance_ = NULL;

Team_SC_SetIgnoreTeamInvite* Team_SC_SetIgnoreTeamInvite::New() const {
  return new Team_SC_SetIgnoreTeamInvite;
}

void Team_SC_SetIgnoreTeamInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Team_SC_SetIgnoreTeamInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Team_SC_SetIgnoreTeamInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Team_SC_SetIgnoreTeamInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Team_SC_SetIgnoreTeamInvite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Team_SC_SetIgnoreTeamInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Team_SC_SetIgnoreTeamInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Team_SC_SetIgnoreTeamInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Team_SC_SetIgnoreTeamInvite::MergeFrom(const Team_SC_SetIgnoreTeamInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Team_SC_SetIgnoreTeamInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Team_SC_SetIgnoreTeamInvite::CopyFrom(const Team_SC_SetIgnoreTeamInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Team_SC_SetIgnoreTeamInvite::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Team_SC_SetIgnoreTeamInvite::Swap(Team_SC_SetIgnoreTeamInvite* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Team_SC_SetIgnoreTeamInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Team_SC_SetIgnoreTeamInvite_descriptor_;
  metadata.reflection = Team_SC_SetIgnoreTeamInvite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Team_CS_QueryIgnoreTeamInvite::Team_CS_QueryIgnoreTeamInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Team_CS_QueryIgnoreTeamInvite::InitAsDefaultInstance() {
}

Team_CS_QueryIgnoreTeamInvite::Team_CS_QueryIgnoreTeamInvite(const Team_CS_QueryIgnoreTeamInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Team_CS_QueryIgnoreTeamInvite::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Team_CS_QueryIgnoreTeamInvite::~Team_CS_QueryIgnoreTeamInvite() {
  SharedDtor();
}

void Team_CS_QueryIgnoreTeamInvite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Team_CS_QueryIgnoreTeamInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Team_CS_QueryIgnoreTeamInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Team_CS_QueryIgnoreTeamInvite_descriptor_;
}

const Team_CS_QueryIgnoreTeamInvite& Team_CS_QueryIgnoreTeamInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2eproto();
  return *default_instance_;
}

Team_CS_QueryIgnoreTeamInvite* Team_CS_QueryIgnoreTeamInvite::default_instance_ = NULL;

Team_CS_QueryIgnoreTeamInvite* Team_CS_QueryIgnoreTeamInvite::New() const {
  return new Team_CS_QueryIgnoreTeamInvite;
}

void Team_CS_QueryIgnoreTeamInvite::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Team_CS_QueryIgnoreTeamInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Team_CS_QueryIgnoreTeamInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Team_CS_QueryIgnoreTeamInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Team_CS_QueryIgnoreTeamInvite::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Team_CS_QueryIgnoreTeamInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Team_CS_QueryIgnoreTeamInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Team_CS_QueryIgnoreTeamInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Team_CS_QueryIgnoreTeamInvite::MergeFrom(const Team_CS_QueryIgnoreTeamInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Team_CS_QueryIgnoreTeamInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Team_CS_QueryIgnoreTeamInvite::CopyFrom(const Team_CS_QueryIgnoreTeamInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Team_CS_QueryIgnoreTeamInvite::IsInitialized() const {

  return true;
}

void Team_CS_QueryIgnoreTeamInvite::Swap(Team_CS_QueryIgnoreTeamInvite* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Team_CS_QueryIgnoreTeamInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Team_CS_QueryIgnoreTeamInvite_descriptor_;
  metadata.reflection = Team_CS_QueryIgnoreTeamInvite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Team_SC_QueryIgnoreTeamInvite::kAllowFieldNumber;
#endif  // !_MSC_VER

Team_SC_QueryIgnoreTeamInvite::Team_SC_QueryIgnoreTeamInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Team_SC_QueryIgnoreTeamInvite::InitAsDefaultInstance() {
}

Team_SC_QueryIgnoreTeamInvite::Team_SC_QueryIgnoreTeamInvite(const Team_SC_QueryIgnoreTeamInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Team_SC_QueryIgnoreTeamInvite::SharedCtor() {
  _cached_size_ = 0;
  allow_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Team_SC_QueryIgnoreTeamInvite::~Team_SC_QueryIgnoreTeamInvite() {
  SharedDtor();
}

void Team_SC_QueryIgnoreTeamInvite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Team_SC_QueryIgnoreTeamInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Team_SC_QueryIgnoreTeamInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Team_SC_QueryIgnoreTeamInvite_descriptor_;
}

const Team_SC_QueryIgnoreTeamInvite& Team_SC_QueryIgnoreTeamInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2eproto();
  return *default_instance_;
}

Team_SC_QueryIgnoreTeamInvite* Team_SC_QueryIgnoreTeamInvite::default_instance_ = NULL;

Team_SC_QueryIgnoreTeamInvite* Team_SC_QueryIgnoreTeamInvite::New() const {
  return new Team_SC_QueryIgnoreTeamInvite;
}

void Team_SC_QueryIgnoreTeamInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    allow_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Team_SC_QueryIgnoreTeamInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool allow = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_)));
          set_has_allow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Team_SC_QueryIgnoreTeamInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool allow = 1;
  if (has_allow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->allow(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Team_SC_QueryIgnoreTeamInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool allow = 1;
  if (has_allow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->allow(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Team_SC_QueryIgnoreTeamInvite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool allow = 1;
    if (has_allow()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Team_SC_QueryIgnoreTeamInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Team_SC_QueryIgnoreTeamInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Team_SC_QueryIgnoreTeamInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Team_SC_QueryIgnoreTeamInvite::MergeFrom(const Team_SC_QueryIgnoreTeamInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_allow()) {
      set_allow(from.allow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Team_SC_QueryIgnoreTeamInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Team_SC_QueryIgnoreTeamInvite::CopyFrom(const Team_SC_QueryIgnoreTeamInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Team_SC_QueryIgnoreTeamInvite::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Team_SC_QueryIgnoreTeamInvite::Swap(Team_SC_QueryIgnoreTeamInvite* other) {
  if (other != this) {
    std::swap(allow_, other->allow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Team_SC_QueryIgnoreTeamInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Team_SC_QueryIgnoreTeamInvite_descriptor_;
  metadata.reflection = Team_SC_QueryIgnoreTeamInvite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Team_SC_ErrorInfo::kResultFieldNumber;
#endif  // !_MSC_VER

Team_SC_ErrorInfo::Team_SC_ErrorInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Team_SC_ErrorInfo::InitAsDefaultInstance() {
}

Team_SC_ErrorInfo::Team_SC_ErrorInfo(const Team_SC_ErrorInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Team_SC_ErrorInfo::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Team_SC_ErrorInfo::~Team_SC_ErrorInfo() {
  SharedDtor();
}

void Team_SC_ErrorInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Team_SC_ErrorInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Team_SC_ErrorInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Team_SC_ErrorInfo_descriptor_;
}

const Team_SC_ErrorInfo& Team_SC_ErrorInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2eproto();
  return *default_instance_;
}

Team_SC_ErrorInfo* Team_SC_ErrorInfo::default_instance_ = NULL;

Team_SC_ErrorInfo* Team_SC_ErrorInfo::New() const {
  return new Team_SC_ErrorInfo;
}

void Team_SC_ErrorInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Team_SC_ErrorInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Team_SC_ErrorInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Team_SC_ErrorInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Team_SC_ErrorInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Team_SC_ErrorInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Team_SC_ErrorInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Team_SC_ErrorInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Team_SC_ErrorInfo::MergeFrom(const Team_SC_ErrorInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Team_SC_ErrorInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Team_SC_ErrorInfo::CopyFrom(const Team_SC_ErrorInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Team_SC_ErrorInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Team_SC_ErrorInfo::Swap(Team_SC_ErrorInfo* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Team_SC_ErrorInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Team_SC_ErrorInfo_descriptor_;
  metadata.reflection = Team_SC_ErrorInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoTeamManHPInfo::kPlyIdFieldNumber;
const int ProtoTeamManHPInfo::kMaxHpFieldNumber;
const int ProtoTeamManHPInfo::kHpFieldNumber;
#endif  // !_MSC_VER

ProtoTeamManHPInfo::ProtoTeamManHPInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoTeamManHPInfo::InitAsDefaultInstance() {
}

ProtoTeamManHPInfo::ProtoTeamManHPInfo(const ProtoTeamManHPInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoTeamManHPInfo::SharedCtor() {
  _cached_size_ = 0;
  plyid_ = 0u;
  maxhp_ = 0u;
  hp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoTeamManHPInfo::~ProtoTeamManHPInfo() {
  SharedDtor();
}

void ProtoTeamManHPInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoTeamManHPInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoTeamManHPInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoTeamManHPInfo_descriptor_;
}

const ProtoTeamManHPInfo& ProtoTeamManHPInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2eproto();
  return *default_instance_;
}

ProtoTeamManHPInfo* ProtoTeamManHPInfo::default_instance_ = NULL;

ProtoTeamManHPInfo* ProtoTeamManHPInfo::New() const {
  return new ProtoTeamManHPInfo;
}

void ProtoTeamManHPInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    plyid_ = 0u;
    maxhp_ = 0u;
    hp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoTeamManHPInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 plyId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plyid_)));
          set_has_plyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_maxHp;
        break;
      }

      // required uint32 maxHp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Hp;
        break;
      }

      // required uint32 Hp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoTeamManHPInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 plyId = 1;
  if (has_plyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->plyid(), output);
  }

  // required uint32 maxHp = 2;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->maxhp(), output);
  }

  // required uint32 Hp = 3;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoTeamManHPInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 plyId = 1;
  if (has_plyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->plyid(), target);
  }

  // required uint32 maxHp = 2;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->maxhp(), target);
  }

  // required uint32 Hp = 3;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoTeamManHPInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 plyId = 1;
    if (has_plyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->plyid());
    }

    // required uint32 maxHp = 2;
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxhp());
    }

    // required uint32 Hp = 3;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoTeamManHPInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoTeamManHPInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoTeamManHPInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoTeamManHPInfo::MergeFrom(const ProtoTeamManHPInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plyid()) {
      set_plyid(from.plyid());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoTeamManHPInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoTeamManHPInfo::CopyFrom(const ProtoTeamManHPInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoTeamManHPInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ProtoTeamManHPInfo::Swap(ProtoTeamManHPInfo* other) {
  if (other != this) {
    std::swap(plyid_, other->plyid_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(hp_, other->hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoTeamManHPInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoTeamManHPInfo_descriptor_;
  metadata.reflection = ProtoTeamManHPInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Team_SC_UpdateCurrentHp::kHpListFieldNumber;
#endif  // !_MSC_VER

Team_SC_UpdateCurrentHp::Team_SC_UpdateCurrentHp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Team_SC_UpdateCurrentHp::InitAsDefaultInstance() {
}

Team_SC_UpdateCurrentHp::Team_SC_UpdateCurrentHp(const Team_SC_UpdateCurrentHp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Team_SC_UpdateCurrentHp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Team_SC_UpdateCurrentHp::~Team_SC_UpdateCurrentHp() {
  SharedDtor();
}

void Team_SC_UpdateCurrentHp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Team_SC_UpdateCurrentHp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Team_SC_UpdateCurrentHp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Team_SC_UpdateCurrentHp_descriptor_;
}

const Team_SC_UpdateCurrentHp& Team_SC_UpdateCurrentHp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2eproto();
  return *default_instance_;
}

Team_SC_UpdateCurrentHp* Team_SC_UpdateCurrentHp::default_instance_ = NULL;

Team_SC_UpdateCurrentHp* Team_SC_UpdateCurrentHp::New() const {
  return new Team_SC_UpdateCurrentHp;
}

void Team_SC_UpdateCurrentHp::Clear() {
  hplist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Team_SC_UpdateCurrentHp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.ProtoTeamManHPInfo HpList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HpList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hplist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_HpList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Team_SC_UpdateCurrentHp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.ProtoTeamManHPInfo HpList = 1;
  for (int i = 0; i < this->hplist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hplist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Team_SC_UpdateCurrentHp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.ProtoTeamManHPInfo HpList = 1;
  for (int i = 0; i < this->hplist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hplist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Team_SC_UpdateCurrentHp::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.ProtoTeamManHPInfo HpList = 1;
  total_size += 1 * this->hplist_size();
  for (int i = 0; i < this->hplist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hplist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Team_SC_UpdateCurrentHp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Team_SC_UpdateCurrentHp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Team_SC_UpdateCurrentHp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Team_SC_UpdateCurrentHp::MergeFrom(const Team_SC_UpdateCurrentHp& from) {
  GOOGLE_CHECK_NE(&from, this);
  hplist_.MergeFrom(from.hplist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Team_SC_UpdateCurrentHp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Team_SC_UpdateCurrentHp::CopyFrom(const Team_SC_UpdateCurrentHp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Team_SC_UpdateCurrentHp::IsInitialized() const {

  for (int i = 0; i < hplist_size(); i++) {
    if (!this->hplist(i).IsInitialized()) return false;
  }
  return true;
}

void Team_SC_UpdateCurrentHp::Swap(Team_SC_UpdateCurrentHp* other) {
  if (other != this) {
    hplist_.Swap(&other->hplist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Team_SC_UpdateCurrentHp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Team_SC_UpdateCurrentHp_descriptor_;
  metadata.reflection = Team_SC_UpdateCurrentHp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Team_CS_TeamReady::kStatusFieldNumber;
#endif  // !_MSC_VER

Team_CS_TeamReady::Team_CS_TeamReady()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Team_CS_TeamReady::InitAsDefaultInstance() {
}

Team_CS_TeamReady::Team_CS_TeamReady(const Team_CS_TeamReady& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Team_CS_TeamReady::SharedCtor() {
  _cached_size_ = 0;
  status_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Team_CS_TeamReady::~Team_CS_TeamReady() {
  SharedDtor();
}

void Team_CS_TeamReady::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Team_CS_TeamReady::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Team_CS_TeamReady::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Team_CS_TeamReady_descriptor_;
}

const Team_CS_TeamReady& Team_CS_TeamReady::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2eproto();
  return *default_instance_;
}

Team_CS_TeamReady* Team_CS_TeamReady::default_instance_ = NULL;

Team_CS_TeamReady* Team_CS_TeamReady::New() const {
  return new Team_CS_TeamReady;
}

void Team_CS_TeamReady::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Team_CS_TeamReady::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Team_CS_TeamReady::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Team_CS_TeamReady::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Team_CS_TeamReady::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool status = 1;
    if (has_status()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Team_CS_TeamReady::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Team_CS_TeamReady* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Team_CS_TeamReady*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Team_CS_TeamReady::MergeFrom(const Team_CS_TeamReady& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Team_CS_TeamReady::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Team_CS_TeamReady::CopyFrom(const Team_CS_TeamReady& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Team_CS_TeamReady::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Team_CS_TeamReady::Swap(Team_CS_TeamReady* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Team_CS_TeamReady::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Team_CS_TeamReady_descriptor_;
  metadata.reflection = Team_CS_TeamReady_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Team_SC_TeamReady::kResultFieldNumber;
#endif  // !_MSC_VER

Team_SC_TeamReady::Team_SC_TeamReady()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Team_SC_TeamReady::InitAsDefaultInstance() {
}

Team_SC_TeamReady::Team_SC_TeamReady(const Team_SC_TeamReady& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Team_SC_TeamReady::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Team_SC_TeamReady::~Team_SC_TeamReady() {
  SharedDtor();
}

void Team_SC_TeamReady::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Team_SC_TeamReady::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Team_SC_TeamReady::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Team_SC_TeamReady_descriptor_;
}

const Team_SC_TeamReady& Team_SC_TeamReady::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2eproto();
  return *default_instance_;
}

Team_SC_TeamReady* Team_SC_TeamReady::default_instance_ = NULL;

Team_SC_TeamReady* Team_SC_TeamReady::New() const {
  return new Team_SC_TeamReady;
}

void Team_SC_TeamReady::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Team_SC_TeamReady::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Team_SC_TeamReady::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Team_SC_TeamReady::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Team_SC_TeamReady::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Team_SC_TeamReady::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Team_SC_TeamReady* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Team_SC_TeamReady*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Team_SC_TeamReady::MergeFrom(const Team_SC_TeamReady& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Team_SC_TeamReady::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Team_SC_TeamReady::CopyFrom(const Team_SC_TeamReady& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Team_SC_TeamReady::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Team_SC_TeamReady::Swap(Team_SC_TeamReady* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Team_SC_TeamReady::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Team_SC_TeamReady_descriptor_;
  metadata.reflection = Team_SC_TeamReady_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

// @@protoc_insertion_point(global_scope)
