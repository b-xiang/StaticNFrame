// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map.proto

#ifndef PROTOBUF_map_2eproto__INCLUDED
#define PROTOBUF_map_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "item.pb.h"
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_map_2eproto();
void protobuf_AssignDesc_map_2eproto();
void protobuf_ShutdownFile_map_2eproto();

class Map_SC_NavPaths;
class Map_CS_PlayerPositionSync;
class Map_SC_AddSyncPlayer;
class Map_SC_ChangeTttle;
class Map_SC_ChangeEquip;
class Map_SC_DelSync;
class Map_SC_Move;
class Map_SC_CheckPosition;
class Map_SC_AddSyncMonster;
class Map_CS_SpeelBegin;
class Map_CS_SpeelEnd;
class Map_SC_SpeelBegin;
class Map_CS_ClientLoadOK;
class Map_SC_ChangeMap;
class Map_CS_ChangeMapOK;
class Map_CS_ReqChangeMap;
class Map_CS_EnterSceneArea;
class Map_CS_LeaveSceneArea;
class Map_SC_TriggerEvent;
class Map_CS_TriggerEvent;
class Map_SC_SyncAreaStatus;
class Map_SC_MonsterStopMove;
class Map_CS_TeamerLocationSyn;
class Location;
class Map_SC_TeamerLocationSyn;
class Map_CS_StartParkour;
class Map_CS_EndParkour;
class Map_CS_PickUpChest;
class Map_SC_PickUpChest;
class Map_SC_StartParkour;
class Map_SC_PlayerCheckPosition;
class Map_SC_PlayerStopMove;
class Map_SC_PlayerStateSync;
class Map_CS_PlayerCheckPosition;
class Map_CS_PlayerStopMove;
class Map_CS_PlayerStateSync;
class Map_SC_AddSyncRandomChest;
class Map_SC_UpdateDir;
class Map_CS_GetMapBranch;
class Map_CS_ChangeBranch;
class BranchInfo;
class Map_SC_GetMapBranch;
class Map_SC_ChangeBranch;
class Map_CS_GameStoryStart;
class Map_CS_GameStoryEnd;
class Map_CS_NPCStopAI;
class Map_CS_NPCActiveAI;
class Map_SC_MonsterTalk;
class Map_SC_MonsterTurnBackSync;
class Map_SC_ChangeMapResult;
class Game2Match_PVPMatch;
class Game2Match_TeamMatch;
class Game2Match_CancelMatch;
class Game2Client_WorldBossInfo;
class Game2Battle_WorldBossStart;
class Client2Game_WorldBossBid;
class Game2Battle_WorldBossBid;
class Game2Client_WolrdBoss_SaleHistory;
class Map_CS_TicketBossInfo;
class Map_SC_TicketBossInfo;
class Map_CS_TicketBossChallenge;
class Map_SC_TicketBossChallenge;
class Map_CS_ChatMark;
class Map_CS_TakeDropItem;
class Map_SC_TakeDropItem;
class Game2Battle_TicketBossChallenge;
class Game2Battle_TakeDropItem;
class Game2Match_CreateRoom;
class Game2Match_GetRoomList;
class Game2Battle_UpdateHeadInfo;
class Game2Match_CreateTerritoryBattle;

// ===================================================================

class Map_SC_NavPaths : public ::google::protobuf::Message {
 public:
  Map_SC_NavPaths();
  virtual ~Map_SC_NavPaths();

  Map_SC_NavPaths(const Map_SC_NavPaths& from);

  inline Map_SC_NavPaths& operator=(const Map_SC_NavPaths& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map_SC_NavPaths& default_instance();

  void Swap(Map_SC_NavPaths* other);

  // implements Message ----------------------------------------------

  Map_SC_NavPaths* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map_SC_NavPaths& from);
  void MergeFrom(const Map_SC_NavPaths& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required float Velocity = 2;
  inline bool has_velocity() const;
  inline void clear_velocity();
  static const int kVelocityFieldNumber = 2;
  inline float velocity() const;
  inline void set_velocity(float value);

  // repeated .proto.message.Point3D paths = 3;
  inline int paths_size() const;
  inline void clear_paths();
  static const int kPathsFieldNumber = 3;
  inline const ::proto::message::Point3D& paths(int index) const;
  inline ::proto::message::Point3D* mutable_paths(int index);
  inline ::proto::message::Point3D* add_paths();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::Point3D >&
      paths() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::Point3D >*
      mutable_paths();

  // @@protoc_insertion_point(class_scope:proto.message.Map_SC_NavPaths)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_velocity();
  inline void clear_has_velocity();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  float velocity_;
  ::google::protobuf::RepeatedPtrField< ::proto::message::Point3D > paths_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Map_SC_NavPaths* default_instance_;
};
// -------------------------------------------------------------------

class Map_CS_PlayerPositionSync : public ::google::protobuf::Message {
 public:
  Map_CS_PlayerPositionSync();
  virtual ~Map_CS_PlayerPositionSync();

  Map_CS_PlayerPositionSync(const Map_CS_PlayerPositionSync& from);

  inline Map_CS_PlayerPositionSync& operator=(const Map_CS_PlayerPositionSync& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map_CS_PlayerPositionSync& default_instance();

  void Swap(Map_CS_PlayerPositionSync* other);

  // implements Message ----------------------------------------------

  Map_CS_PlayerPositionSync* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map_CS_PlayerPositionSync& from);
  void MergeFrom(const Map_CS_PlayerPositionSync& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .proto.message.Point3D pt = 1;
  inline bool has_pt() const;
  inline void clear_pt();
  static const int kPtFieldNumber = 1;
  inline const ::proto::message::Point3D& pt() const;
  inline ::proto::message::Point3D* mutable_pt();
  inline ::proto::message::Point3D* release_pt();
  inline void set_allocated_pt(::proto::message::Point3D* pt);

  // required float dir = 2;
  inline bool has_dir() const;
  inline void clear_dir();
  static const int kDirFieldNumber = 2;
  inline float dir() const;
  inline void set_dir(float value);

  // optional bool arrival = 3;
  inline bool has_arrival() const;
  inline void clear_arrival();
  static const int kArrivalFieldNumber = 3;
  inline bool arrival() const;
  inline void set_arrival(bool value);

  // @@protoc_insertion_point(class_scope:proto.message.Map_CS_PlayerPositionSync)
 private:
  inline void set_has_pt();
  inline void clear_has_pt();
  inline void set_has_dir();
  inline void clear_has_dir();
  inline void set_has_arrival();
  inline void clear_has_arrival();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::message::Point3D* pt_;
  float dir_;
  bool arrival_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Map_CS_PlayerPositionSync* default_instance_;
};
// -------------------------------------------------------------------

class Map_SC_AddSyncPlayer : public ::google::protobuf::Message {
 public:
  Map_SC_AddSyncPlayer();
  virtual ~Map_SC_AddSyncPlayer();

  Map_SC_AddSyncPlayer(const Map_SC_AddSyncPlayer& from);

  inline Map_SC_AddSyncPlayer& operator=(const Map_SC_AddSyncPlayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map_SC_AddSyncPlayer& default_instance();

  void Swap(Map_SC_AddSyncPlayer* other);

  // implements Message ----------------------------------------------

  Map_SC_AddSyncPlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map_SC_AddSyncPlayer& from);
  void MergeFrom(const Map_SC_AddSyncPlayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 nPlayerId = 1;
  inline bool has_nplayerid() const;
  inline void clear_nplayerid();
  static const int kNPlayerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 nplayerid() const;
  inline void set_nplayerid(::google::protobuf::uint32 value);

  // required .proto.message.Point3D pt = 2;
  inline bool has_pt() const;
  inline void clear_pt();
  static const int kPtFieldNumber = 2;
  inline const ::proto::message::Point3D& pt() const;
  inline ::proto::message::Point3D* mutable_pt();
  inline ::proto::message::Point3D* release_pt();
  inline void set_allocated_pt(::proto::message::Point3D* pt);

  // required float dir = 3;
  inline bool has_dir() const;
  inline void clear_dir();
  static const int kDirFieldNumber = 3;
  inline float dir() const;
  inline void set_dir(float value);

  // optional string Name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 MaxHP = 5;
  inline bool has_maxhp() const;
  inline void clear_maxhp();
  static const int kMaxHPFieldNumber = 5;
  inline ::google::protobuf::int32 maxhp() const;
  inline void set_maxhp(::google::protobuf::int32 value);

  // optional int32 CurHP = 6;
  inline bool has_curhp() const;
  inline void clear_curhp();
  static const int kCurHPFieldNumber = 6;
  inline ::google::protobuf::int32 curhp() const;
  inline void set_curhp(::google::protobuf::int32 value);

  // optional int32 Level = 7;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 7;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // repeated .proto.message.Equip equip_list = 8;
  inline int equip_list_size() const;
  inline void clear_equip_list();
  static const int kEquipListFieldNumber = 8;
  inline const ::proto::message::Equip& equip_list(int index) const;
  inline ::proto::message::Equip* mutable_equip_list(int index);
  inline ::proto::message::Equip* add_equip_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::Equip >&
      equip_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::Equip >*
      mutable_equip_list();

  // optional int32 career = 9;
  inline bool has_career() const;
  inline void clear_career();
  static const int kCareerFieldNumber = 9;
  inline ::google::protobuf::int32 career() const;
  inline void set_career(::google::protobuf::int32 value);

  // optional int32 Velocity = 10;
  inline bool has_velocity() const;
  inline void clear_velocity();
  static const int kVelocityFieldNumber = 10;
  inline ::google::protobuf::int32 velocity() const;
  inline void set_velocity(::google::protobuf::int32 value);

  // optional int32 titleID = 11;
  inline bool has_titleid() const;
  inline void clear_titleid();
  static const int kTitleIDFieldNumber = 11;
  inline ::google::protobuf::int32 titleid() const;
  inline void set_titleid(::google::protobuf::int32 value);

  // optional int32 layer = 12;
  inline bool has_layer() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 12;
  inline ::google::protobuf::int32 layer() const;
  inline void set_layer(::google::protobuf::int32 value);

  // optional string titlename = 13;
  inline bool has_titlename() const;
  inline void clear_titlename();
  static const int kTitlenameFieldNumber = 13;
  inline const ::std::string& titlename() const;
  inline void set_titlename(const ::std::string& value);
  inline void set_titlename(const char* value);
  inline void set_titlename(const char* value, size_t size);
  inline ::std::string* mutable_titlename();
  inline ::std::string* release_titlename();
  inline void set_allocated_titlename(::std::string* titlename);

  // optional int32 titleishide = 14;
  inline bool has_titleishide() const;
  inline void clear_titleishide();
  static const int kTitleishideFieldNumber = 14;
  inline ::google::protobuf::int32 titleishide() const;
  inline void set_titleishide(::google::protobuf::int32 value);

  // repeated int32 skill_id_list = 15;
  inline int skill_id_list_size() const;
  inline void clear_skill_id_list();
  static const int kSkillIdListFieldNumber = 15;
  inline ::google::protobuf::int32 skill_id_list(int index) const;
  inline void set_skill_id_list(int index, ::google::protobuf::int32 value);
  inline void add_skill_id_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      skill_id_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_skill_id_list();

  // optional uint64 nPlayeruuid = 16;
  inline bool has_nplayeruuid() const;
  inline void clear_nplayeruuid();
  static const int kNPlayeruuidFieldNumber = 16;
  inline ::google::protobuf::uint64 nplayeruuid() const;
  inline void set_nplayeruuid(::google::protobuf::uint64 value);

  // optional uint64 nGuildid = 17;
  inline bool has_nguildid() const;
  inline void clear_nguildid();
  static const int kNGuildidFieldNumber = 17;
  inline ::google::protobuf::uint64 nguildid() const;
  inline void set_nguildid(::google::protobuf::uint64 value);

  // optional string GuildName = 18;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildNameFieldNumber = 18;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  inline void set_allocated_guildname(::std::string* guildname);

  // @@protoc_insertion_point(class_scope:proto.message.Map_SC_AddSyncPlayer)
 private:
  inline void set_has_nplayerid();
  inline void clear_has_nplayerid();
  inline void set_has_pt();
  inline void clear_has_pt();
  inline void set_has_dir();
  inline void clear_has_dir();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_maxhp();
  inline void clear_has_maxhp();
  inline void set_has_curhp();
  inline void clear_has_curhp();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_career();
  inline void clear_has_career();
  inline void set_has_velocity();
  inline void clear_has_velocity();
  inline void set_has_titleid();
  inline void clear_has_titleid();
  inline void set_has_layer();
  inline void clear_has_layer();
  inline void set_has_titlename();
  inline void clear_has_titlename();
  inline void set_has_titleishide();
  inline void clear_has_titleishide();
  inline void set_has_nplayeruuid();
  inline void clear_has_nplayeruuid();
  inline void set_has_nguildid();
  inline void clear_has_nguildid();
  inline void set_has_guildname();
  inline void clear_has_guildname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::message::Point3D* pt_;
  ::google::protobuf::uint32 nplayerid_;
  float dir_;
  ::std::string* name_;
  ::google::protobuf::int32 maxhp_;
  ::google::protobuf::int32 curhp_;
  ::google::protobuf::RepeatedPtrField< ::proto::message::Equip > equip_list_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 career_;
  ::google::protobuf::int32 velocity_;
  ::google::protobuf::int32 titleid_;
  ::std::string* titlename_;
  ::google::protobuf::int32 layer_;
  ::google::protobuf::int32 titleishide_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > skill_id_list_;
  ::google::protobuf::uint64 nplayeruuid_;
  ::google::protobuf::uint64 nguildid_;
  ::std::string* guildname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Map_SC_AddSyncPlayer* default_instance_;
};
// -------------------------------------------------------------------

class Map_SC_ChangeTttle : public ::google::protobuf::Message {
 public:
  Map_SC_ChangeTttle();
  virtual ~Map_SC_ChangeTttle();

  Map_SC_ChangeTttle(const Map_SC_ChangeTttle& from);

  inline Map_SC_ChangeTttle& operator=(const Map_SC_ChangeTttle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map_SC_ChangeTttle& default_instance();

  void Swap(Map_SC_ChangeTttle* other);

  // implements Message ----------------------------------------------

  Map_SC_ChangeTttle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map_SC_ChangeTttle& from);
  void MergeFrom(const Map_SC_ChangeTttle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 nId = 1;
  inline bool has_nid() const;
  inline void clear_nid();
  static const int kNIdFieldNumber = 1;
  inline ::google::protobuf::uint32 nid() const;
  inline void set_nid(::google::protobuf::uint32 value);

  // required int32 titleID = 2;
  inline bool has_titleid() const;
  inline void clear_titleid();
  static const int kTitleIDFieldNumber = 2;
  inline ::google::protobuf::int32 titleid() const;
  inline void set_titleid(::google::protobuf::int32 value);

  // optional string titlename = 3;
  inline bool has_titlename() const;
  inline void clear_titlename();
  static const int kTitlenameFieldNumber = 3;
  inline const ::std::string& titlename() const;
  inline void set_titlename(const ::std::string& value);
  inline void set_titlename(const char* value);
  inline void set_titlename(const char* value, size_t size);
  inline ::std::string* mutable_titlename();
  inline ::std::string* release_titlename();
  inline void set_allocated_titlename(::std::string* titlename);

  // optional int32 ishide = 4;
  inline bool has_ishide() const;
  inline void clear_ishide();
  static const int kIshideFieldNumber = 4;
  inline ::google::protobuf::int32 ishide() const;
  inline void set_ishide(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Map_SC_ChangeTttle)
 private:
  inline void set_has_nid();
  inline void clear_has_nid();
  inline void set_has_titleid();
  inline void clear_has_titleid();
  inline void set_has_titlename();
  inline void clear_has_titlename();
  inline void set_has_ishide();
  inline void clear_has_ishide();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 nid_;
  ::google::protobuf::int32 titleid_;
  ::std::string* titlename_;
  ::google::protobuf::int32 ishide_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Map_SC_ChangeTttle* default_instance_;
};
// -------------------------------------------------------------------

class Map_SC_ChangeEquip : public ::google::protobuf::Message {
 public:
  Map_SC_ChangeEquip();
  virtual ~Map_SC_ChangeEquip();

  Map_SC_ChangeEquip(const Map_SC_ChangeEquip& from);

  inline Map_SC_ChangeEquip& operator=(const Map_SC_ChangeEquip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map_SC_ChangeEquip& default_instance();

  void Swap(Map_SC_ChangeEquip* other);

  // implements Message ----------------------------------------------

  Map_SC_ChangeEquip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map_SC_ChangeEquip& from);
  void MergeFrom(const Map_SC_ChangeEquip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 nId = 1;
  inline bool has_nid() const;
  inline void clear_nid();
  static const int kNIdFieldNumber = 1;
  inline ::google::protobuf::uint32 nid() const;
  inline void set_nid(::google::protobuf::uint32 value);

  // repeated .proto.message.Equip equip_list = 2;
  inline int equip_list_size() const;
  inline void clear_equip_list();
  static const int kEquipListFieldNumber = 2;
  inline const ::proto::message::Equip& equip_list(int index) const;
  inline ::proto::message::Equip* mutable_equip_list(int index);
  inline ::proto::message::Equip* add_equip_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::Equip >&
      equip_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::Equip >*
      mutable_equip_list();

  // @@protoc_insertion_point(class_scope:proto.message.Map_SC_ChangeEquip)
 private:
  inline void set_has_nid();
  inline void clear_has_nid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::message::Equip > equip_list_;
  ::google::protobuf::uint32 nid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Map_SC_ChangeEquip* default_instance_;
};
// -------------------------------------------------------------------

class Map_SC_DelSync : public ::google::protobuf::Message {
 public:
  Map_SC_DelSync();
  virtual ~Map_SC_DelSync();

  Map_SC_DelSync(const Map_SC_DelSync& from);

  inline Map_SC_DelSync& operator=(const Map_SC_DelSync& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map_SC_DelSync& default_instance();

  void Swap(Map_SC_DelSync* other);

  // implements Message ----------------------------------------------

  Map_SC_DelSync* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map_SC_DelSync& from);
  void MergeFrom(const Map_SC_DelSync& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 nPlayerId = 1;
  inline bool has_nplayerid() const;
  inline void clear_nplayerid();
  static const int kNPlayerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 nplayerid() const;
  inline void set_nplayerid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Map_SC_DelSync)
 private:
  inline void set_has_nplayerid();
  inline void clear_has_nplayerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 nplayerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Map_SC_DelSync* default_instance_;
};
// -------------------------------------------------------------------

class Map_SC_Move : public ::google::protobuf::Message {
 public:
  Map_SC_Move();
  virtual ~Map_SC_Move();

  Map_SC_Move(const Map_SC_Move& from);

  inline Map_SC_Move& operator=(const Map_SC_Move& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map_SC_Move& default_instance();

  void Swap(Map_SC_Move* other);

  // implements Message ----------------------------------------------

  Map_SC_Move* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map_SC_Move& from);
  void MergeFrom(const Map_SC_Move& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 nId = 1;
  inline bool has_nid() const;
  inline void clear_nid();
  static const int kNIdFieldNumber = 1;
  inline ::google::protobuf::uint32 nid() const;
  inline void set_nid(::google::protobuf::uint32 value);

  // required .proto.message.Point3D pt = 2;
  inline bool has_pt() const;
  inline void clear_pt();
  static const int kPtFieldNumber = 2;
  inline const ::proto::message::Point3D& pt() const;
  inline ::proto::message::Point3D* mutable_pt();
  inline ::proto::message::Point3D* release_pt();
  inline void set_allocated_pt(::proto::message::Point3D* pt);

  // required float dir = 3;
  inline bool has_dir() const;
  inline void clear_dir();
  static const int kDirFieldNumber = 3;
  inline float dir() const;
  inline void set_dir(float value);

  // required float velocity = 4;
  inline bool has_velocity() const;
  inline void clear_velocity();
  static const int kVelocityFieldNumber = 4;
  inline float velocity() const;
  inline void set_velocity(float value);

  // optional bool arrival = 5;
  inline bool has_arrival() const;
  inline void clear_arrival();
  static const int kArrivalFieldNumber = 5;
  inline bool arrival() const;
  inline void set_arrival(bool value);

  // @@protoc_insertion_point(class_scope:proto.message.Map_SC_Move)
 private:
  inline void set_has_nid();
  inline void clear_has_nid();
  inline void set_has_pt();
  inline void clear_has_pt();
  inline void set_has_dir();
  inline void clear_has_dir();
  inline void set_has_velocity();
  inline void clear_has_velocity();
  inline void set_has_arrival();
  inline void clear_has_arrival();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::message::Point3D* pt_;
  ::google::protobuf::uint32 nid_;
  float dir_;
  float velocity_;
  bool arrival_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Map_SC_Move* default_instance_;
};
// -------------------------------------------------------------------

class Map_SC_CheckPosition : public ::google::protobuf::Message {
 public:
  Map_SC_CheckPosition();
  virtual ~Map_SC_CheckPosition();

  Map_SC_CheckPosition(const Map_SC_CheckPosition& from);

  inline Map_SC_CheckPosition& operator=(const Map_SC_CheckPosition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map_SC_CheckPosition& default_instance();

  void Swap(Map_SC_CheckPosition* other);

  // implements Message ----------------------------------------------

  Map_SC_CheckPosition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map_SC_CheckPosition& from);
  void MergeFrom(const Map_SC_CheckPosition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 nId = 1;
  inline bool has_nid() const;
  inline void clear_nid();
  static const int kNIdFieldNumber = 1;
  inline ::google::protobuf::uint32 nid() const;
  inline void set_nid(::google::protobuf::uint32 value);

  // required .proto.message.Point3D pt = 2;
  inline bool has_pt() const;
  inline void clear_pt();
  static const int kPtFieldNumber = 2;
  inline const ::proto::message::Point3D& pt() const;
  inline ::proto::message::Point3D* mutable_pt();
  inline ::proto::message::Point3D* release_pt();
  inline void set_allocated_pt(::proto::message::Point3D* pt);

  // required float dir = 3;
  inline bool has_dir() const;
  inline void clear_dir();
  static const int kDirFieldNumber = 3;
  inline float dir() const;
  inline void set_dir(float value);

  // @@protoc_insertion_point(class_scope:proto.message.Map_SC_CheckPosition)
 private:
  inline void set_has_nid();
  inline void clear_has_nid();
  inline void set_has_pt();
  inline void clear_has_pt();
  inline void set_has_dir();
  inline void clear_has_dir();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::message::Point3D* pt_;
  ::google::protobuf::uint32 nid_;
  float dir_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Map_SC_CheckPosition* default_instance_;
};
// -------------------------------------------------------------------

class Map_SC_AddSyncMonster : public ::google::protobuf::Message {
 public:
  Map_SC_AddSyncMonster();
  virtual ~Map_SC_AddSyncMonster();

  Map_SC_AddSyncMonster(const Map_SC_AddSyncMonster& from);

  inline Map_SC_AddSyncMonster& operator=(const Map_SC_AddSyncMonster& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map_SC_AddSyncMonster& default_instance();

  void Swap(Map_SC_AddSyncMonster* other);

  // implements Message ----------------------------------------------

  Map_SC_AddSyncMonster* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map_SC_AddSyncMonster& from);
  void MergeFrom(const Map_SC_AddSyncMonster& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 ProID = 2;
  inline bool has_proid() const;
  inline void clear_proid();
  static const int kProIDFieldNumber = 2;
  inline ::google::protobuf::uint32 proid() const;
  inline void set_proid(::google::protobuf::uint32 value);

  // required .proto.message.Point3D pt = 3;
  inline bool has_pt() const;
  inline void clear_pt();
  static const int kPtFieldNumber = 3;
  inline const ::proto::message::Point3D& pt() const;
  inline ::proto::message::Point3D* mutable_pt();
  inline ::proto::message::Point3D* release_pt();
  inline void set_allocated_pt(::proto::message::Point3D* pt);

  // required float dir = 4;
  inline bool has_dir() const;
  inline void clear_dir();
  static const int kDirFieldNumber = 4;
  inline float dir() const;
  inline void set_dir(float value);

  // optional int32 Velocity = 5;
  inline bool has_velocity() const;
  inline void clear_velocity();
  static const int kVelocityFieldNumber = 5;
  inline ::google::protobuf::int32 velocity() const;
  inline void set_velocity(::google::protobuf::int32 value);

  // optional int32 MaxHP = 6;
  inline bool has_maxhp() const;
  inline void clear_maxhp();
  static const int kMaxHPFieldNumber = 6;
  inline ::google::protobuf::int32 maxhp() const;
  inline void set_maxhp(::google::protobuf::int32 value);

  // optional int32 CurHP = 7;
  inline bool has_curhp() const;
  inline void clear_curhp();
  static const int kCurHPFieldNumber = 7;
  inline ::google::protobuf::int32 curhp() const;
  inline void set_curhp(::google::protobuf::int32 value);

  // optional int32 max_tp = 8;
  inline bool has_max_tp() const;
  inline void clear_max_tp();
  static const int kMaxTpFieldNumber = 8;
  inline ::google::protobuf::int32 max_tp() const;
  inline void set_max_tp(::google::protobuf::int32 value);

  // optional int32 cur_tp = 9;
  inline bool has_cur_tp() const;
  inline void clear_cur_tp();
  static const int kCurTpFieldNumber = 9;
  inline ::google::protobuf::int32 cur_tp() const;
  inline void set_cur_tp(::google::protobuf::int32 value);

  // optional int32 cmap = 10;
  inline bool has_cmap() const;
  inline void clear_cmap();
  static const int kCmapFieldNumber = 10;
  inline ::google::protobuf::int32 cmap() const;
  inline void set_cmap(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Map_SC_AddSyncMonster)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_proid();
  inline void clear_has_proid();
  inline void set_has_pt();
  inline void clear_has_pt();
  inline void set_has_dir();
  inline void clear_has_dir();
  inline void set_has_velocity();
  inline void clear_has_velocity();
  inline void set_has_maxhp();
  inline void clear_has_maxhp();
  inline void set_has_curhp();
  inline void clear_has_curhp();
  inline void set_has_max_tp();
  inline void clear_has_max_tp();
  inline void set_has_cur_tp();
  inline void clear_has_cur_tp();
  inline void set_has_cmap();
  inline void clear_has_cmap();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 proid_;
  ::proto::message::Point3D* pt_;
  float dir_;
  ::google::protobuf::int32 velocity_;
  ::google::protobuf::int32 maxhp_;
  ::google::protobuf::int32 curhp_;
  ::google::protobuf::int32 max_tp_;
  ::google::protobuf::int32 cur_tp_;
  ::google::protobuf::int32 cmap_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Map_SC_AddSyncMonster* default_instance_;
};
// -------------------------------------------------------------------

class Map_CS_SpeelBegin : public ::google::protobuf::Message {
 public:
  Map_CS_SpeelBegin();
  virtual ~Map_CS_SpeelBegin();

  Map_CS_SpeelBegin(const Map_CS_SpeelBegin& from);

  inline Map_CS_SpeelBegin& operator=(const Map_CS_SpeelBegin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map_CS_SpeelBegin& default_instance();

  void Swap(Map_CS_SpeelBegin* other);

  // implements Message ----------------------------------------------

  Map_CS_SpeelBegin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map_CS_SpeelBegin& from);
  void MergeFrom(const Map_CS_SpeelBegin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 Layer = 1;
  inline bool has_layer() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 1;
  inline ::google::protobuf::uint32 layer() const;
  inline void set_layer(::google::protobuf::uint32 value);

  // optional int32 TriggerId = 2;
  inline bool has_triggerid() const;
  inline void clear_triggerid();
  static const int kTriggerIdFieldNumber = 2;
  inline ::google::protobuf::int32 triggerid() const;
  inline void set_triggerid(::google::protobuf::int32 value);

  // optional uint32 TriggerType = 3;
  inline bool has_triggertype() const;
  inline void clear_triggertype();
  static const int kTriggerTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 triggertype() const;
  inline void set_triggertype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Map_CS_SpeelBegin)
 private:
  inline void set_has_layer();
  inline void clear_has_layer();
  inline void set_has_triggerid();
  inline void clear_has_triggerid();
  inline void set_has_triggertype();
  inline void clear_has_triggertype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 layer_;
  ::google::protobuf::int32 triggerid_;
  ::google::protobuf::uint32 triggertype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Map_CS_SpeelBegin* default_instance_;
};
// -------------------------------------------------------------------

class Map_CS_SpeelEnd : public ::google::protobuf::Message {
 public:
  Map_CS_SpeelEnd();
  virtual ~Map_CS_SpeelEnd();

  Map_CS_SpeelEnd(const Map_CS_SpeelEnd& from);

  inline Map_CS_SpeelEnd& operator=(const Map_CS_SpeelEnd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map_CS_SpeelEnd& default_instance();

  void Swap(Map_CS_SpeelEnd* other);

  // implements Message ----------------------------------------------

  Map_CS_SpeelEnd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map_CS_SpeelEnd& from);
  void MergeFrom(const Map_CS_SpeelEnd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .proto.message.Point3D pt = 1;
  inline bool has_pt() const;
  inline void clear_pt();
  static const int kPtFieldNumber = 1;
  inline const ::proto::message::Point3D& pt() const;
  inline ::proto::message::Point3D* mutable_pt();
  inline ::proto::message::Point3D* release_pt();
  inline void set_allocated_pt(::proto::message::Point3D* pt);

  // @@protoc_insertion_point(class_scope:proto.message.Map_CS_SpeelEnd)
 private:
  inline void set_has_pt();
  inline void clear_has_pt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::message::Point3D* pt_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Map_CS_SpeelEnd* default_instance_;
};
// -------------------------------------------------------------------

class Map_SC_SpeelBegin : public ::google::protobuf::Message {
 public:
  Map_SC_SpeelBegin();
  virtual ~Map_SC_SpeelBegin();

  Map_SC_SpeelBegin(const Map_SC_SpeelBegin& from);

  inline Map_SC_SpeelBegin& operator=(const Map_SC_SpeelBegin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map_SC_SpeelBegin& default_instance();

  void Swap(Map_SC_SpeelBegin* other);

  // implements Message ----------------------------------------------

  Map_SC_SpeelBegin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map_SC_SpeelBegin& from);
  void MergeFrom(const Map_SC_SpeelBegin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 PlyId = 1;
  inline bool has_plyid() const;
  inline void clear_plyid();
  static const int kPlyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 plyid() const;
  inline void set_plyid(::google::protobuf::uint32 value);

  // required uint32 Layer = 2;
  inline bool has_layer() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 2;
  inline ::google::protobuf::uint32 layer() const;
  inline void set_layer(::google::protobuf::uint32 value);

  // optional int32 TriggerId = 3;
  inline bool has_triggerid() const;
  inline void clear_triggerid();
  static const int kTriggerIdFieldNumber = 3;
  inline ::google::protobuf::int32 triggerid() const;
  inline void set_triggerid(::google::protobuf::int32 value);

  // optional uint32 TriggerType = 4;
  inline bool has_triggertype() const;
  inline void clear_triggertype();
  static const int kTriggerTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 triggertype() const;
  inline void set_triggertype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Map_SC_SpeelBegin)
 private:
  inline void set_has_plyid();
  inline void clear_has_plyid();
  inline void set_has_layer();
  inline void clear_has_layer();
  inline void set_has_triggerid();
  inline void clear_has_triggerid();
  inline void set_has_triggertype();
  inline void clear_has_triggertype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 plyid_;
  ::google::protobuf::uint32 layer_;
  ::google::protobuf::int32 triggerid_;
  ::google::protobuf::uint32 triggertype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Map_SC_SpeelBegin* default_instance_;
};
// -------------------------------------------------------------------

class Map_CS_ClientLoadOK : public ::google::protobuf::Message {
 public:
  Map_CS_ClientLoadOK();
  virtual ~Map_CS_ClientLoadOK();

  Map_CS_ClientLoadOK(const Map_CS_ClientLoadOK& from);

  inline Map_CS_ClientLoadOK& operator=(const Map_CS_ClientLoadOK& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map_CS_ClientLoadOK& default_instance();

  void Swap(Map_CS_ClientLoadOK* other);

  // implements Message ----------------------------------------------

  Map_CS_ClientLoadOK* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map_CS_ClientLoadOK& from);
  void MergeFrom(const Map_CS_ClientLoadOK& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.message.Map_CS_ClientLoadOK)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Map_CS_ClientLoadOK* default_instance_;
};
// -------------------------------------------------------------------

class Map_SC_ChangeMap : public ::google::protobuf::Message {
 public:
  Map_SC_ChangeMap();
  virtual ~Map_SC_ChangeMap();

  Map_SC_ChangeMap(const Map_SC_ChangeMap& from);

  inline Map_SC_ChangeMap& operator=(const Map_SC_ChangeMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map_SC_ChangeMap& default_instance();

  void Swap(Map_SC_ChangeMap* other);

  // implements Message ----------------------------------------------

  Map_SC_ChangeMap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map_SC_ChangeMap& from);
  void MergeFrom(const Map_SC_ChangeMap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 MapID = 1;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapIDFieldNumber = 1;
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // optional .proto.message.Point3D Pt = 3;
  inline bool has_pt() const;
  inline void clear_pt();
  static const int kPtFieldNumber = 3;
  inline const ::proto::message::Point3D& pt() const;
  inline ::proto::message::Point3D* mutable_pt();
  inline ::proto::message::Point3D* release_pt();
  inline void set_allocated_pt(::proto::message::Point3D* pt);

  // optional float Dir = 4;
  inline bool has_dir() const;
  inline void clear_dir();
  static const int kDirFieldNumber = 4;
  inline float dir() const;
  inline void set_dir(float value);

  // optional int32 Layer = 5;
  inline bool has_layer() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 5;
  inline ::google::protobuf::int32 layer() const;
  inline void set_layer(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Map_SC_ChangeMap)
 private:
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_pt();
  inline void clear_has_pt();
  inline void set_has_dir();
  inline void clear_has_dir();
  inline void set_has_layer();
  inline void clear_has_layer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::message::Point3D* pt_;
  ::google::protobuf::uint32 mapid_;
  float dir_;
  ::google::protobuf::int32 layer_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Map_SC_ChangeMap* default_instance_;
};
// -------------------------------------------------------------------

class Map_CS_ChangeMapOK : public ::google::protobuf::Message {
 public:
  Map_CS_ChangeMapOK();
  virtual ~Map_CS_ChangeMapOK();

  Map_CS_ChangeMapOK(const Map_CS_ChangeMapOK& from);

  inline Map_CS_ChangeMapOK& operator=(const Map_CS_ChangeMapOK& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map_CS_ChangeMapOK& default_instance();

  void Swap(Map_CS_ChangeMapOK* other);

  // implements Message ----------------------------------------------

  Map_CS_ChangeMapOK* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map_CS_ChangeMapOK& from);
  void MergeFrom(const Map_CS_ChangeMapOK& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 MapID = 1;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapIDFieldNumber = 1;
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Map_CS_ChangeMapOK)
 private:
  inline void set_has_mapid();
  inline void clear_has_mapid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 mapid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Map_CS_ChangeMapOK* default_instance_;
};
// -------------------------------------------------------------------

class Map_CS_ReqChangeMap : public ::google::protobuf::Message {
 public:
  Map_CS_ReqChangeMap();
  virtual ~Map_CS_ReqChangeMap();

  Map_CS_ReqChangeMap(const Map_CS_ReqChangeMap& from);

  inline Map_CS_ReqChangeMap& operator=(const Map_CS_ReqChangeMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map_CS_ReqChangeMap& default_instance();

  void Swap(Map_CS_ReqChangeMap* other);

  // implements Message ----------------------------------------------

  Map_CS_ReqChangeMap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map_CS_ReqChangeMap& from);
  void MergeFrom(const Map_CS_ReqChangeMap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 MapID = 1;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapIDFieldNumber = 1;
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // optional uint32 BranchId = 2;
  inline bool has_branchid() const;
  inline void clear_branchid();
  static const int kBranchIdFieldNumber = 2;
  inline ::google::protobuf::uint32 branchid() const;
  inline void set_branchid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Map_CS_ReqChangeMap)
 private:
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_branchid();
  inline void clear_has_branchid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 mapid_;
  ::google::protobuf::uint32 branchid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Map_CS_ReqChangeMap* default_instance_;
};
// -------------------------------------------------------------------

class Map_CS_EnterSceneArea : public ::google::protobuf::Message {
 public:
  Map_CS_EnterSceneArea();
  virtual ~Map_CS_EnterSceneArea();

  Map_CS_EnterSceneArea(const Map_CS_EnterSceneArea& from);

  inline Map_CS_EnterSceneArea& operator=(const Map_CS_EnterSceneArea& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map_CS_EnterSceneArea& default_instance();

  void Swap(Map_CS_EnterSceneArea* other);

  // implements Message ----------------------------------------------

  Map_CS_EnterSceneArea* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map_CS_EnterSceneArea& from);
  void MergeFrom(const Map_CS_EnterSceneArea& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 SceneAreaId = 1;
  inline bool has_sceneareaid() const;
  inline void clear_sceneareaid();
  static const int kSceneAreaIdFieldNumber = 1;
  inline ::google::protobuf::uint32 sceneareaid() const;
  inline void set_sceneareaid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Map_CS_EnterSceneArea)
 private:
  inline void set_has_sceneareaid();
  inline void clear_has_sceneareaid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 sceneareaid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Map_CS_EnterSceneArea* default_instance_;
};
// -------------------------------------------------------------------

class Map_CS_LeaveSceneArea : public ::google::protobuf::Message {
 public:
  Map_CS_LeaveSceneArea();
  virtual ~Map_CS_LeaveSceneArea();

  Map_CS_LeaveSceneArea(const Map_CS_LeaveSceneArea& from);

  inline Map_CS_LeaveSceneArea& operator=(const Map_CS_LeaveSceneArea& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map_CS_LeaveSceneArea& default_instance();

  void Swap(Map_CS_LeaveSceneArea* other);

  // implements Message ----------------------------------------------

  Map_CS_LeaveSceneArea* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map_CS_LeaveSceneArea& from);
  void MergeFrom(const Map_CS_LeaveSceneArea& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 SceneAreaId = 1;
  inline bool has_sceneareaid() const;
  inline void clear_sceneareaid();
  static const int kSceneAreaIdFieldNumber = 1;
  inline ::google::protobuf::uint32 sceneareaid() const;
  inline void set_sceneareaid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Map_CS_LeaveSceneArea)
 private:
  inline void set_has_sceneareaid();
  inline void clear_has_sceneareaid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 sceneareaid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Map_CS_LeaveSceneArea* default_instance_;
};
// -------------------------------------------------------------------

class Map_SC_TriggerEvent : public ::google::protobuf::Message {
 public:
  Map_SC_TriggerEvent();
  virtual ~Map_SC_TriggerEvent();

  Map_SC_TriggerEvent(const Map_SC_TriggerEvent& from);

  inline Map_SC_TriggerEvent& operator=(const Map_SC_TriggerEvent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map_SC_TriggerEvent& default_instance();

  void Swap(Map_SC_TriggerEvent* other);

  // implements Message ----------------------------------------------

  Map_SC_TriggerEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map_SC_TriggerEvent& from);
  void MergeFrom(const Map_SC_TriggerEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 PlyId = 1;
  inline bool has_plyid() const;
  inline void clear_plyid();
  static const int kPlyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 plyid() const;
  inline void set_plyid(::google::protobuf::uint32 value);

  // required uint32 TriggerType = 2;
  inline bool has_triggertype() const;
  inline void clear_triggertype();
  static const int kTriggerTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 triggertype() const;
  inline void set_triggertype(::google::protobuf::uint32 value);

  // required uint32 TriggerId = 3;
  inline bool has_triggerid() const;
  inline void clear_triggerid();
  static const int kTriggerIdFieldNumber = 3;
  inline ::google::protobuf::uint32 triggerid() const;
  inline void set_triggerid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Map_SC_TriggerEvent)
 private:
  inline void set_has_plyid();
  inline void clear_has_plyid();
  inline void set_has_triggertype();
  inline void clear_has_triggertype();
  inline void set_has_triggerid();
  inline void clear_has_triggerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 plyid_;
  ::google::protobuf::uint32 triggertype_;
  ::google::protobuf::uint32 triggerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Map_SC_TriggerEvent* default_instance_;
};
// -------------------------------------------------------------------

class Map_CS_TriggerEvent : public ::google::protobuf::Message {
 public:
  Map_CS_TriggerEvent();
  virtual ~Map_CS_TriggerEvent();

  Map_CS_TriggerEvent(const Map_CS_TriggerEvent& from);

  inline Map_CS_TriggerEvent& operator=(const Map_CS_TriggerEvent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map_CS_TriggerEvent& default_instance();

  void Swap(Map_CS_TriggerEvent* other);

  // implements Message ----------------------------------------------

  Map_CS_TriggerEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map_CS_TriggerEvent& from);
  void MergeFrom(const Map_CS_TriggerEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 TriggerType = 1;
  inline bool has_triggertype() const;
  inline void clear_triggertype();
  static const int kTriggerTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 triggertype() const;
  inline void set_triggertype(::google::protobuf::uint32 value);

  // required uint32 TriggerId = 2;
  inline bool has_triggerid() const;
  inline void clear_triggerid();
  static const int kTriggerIdFieldNumber = 2;
  inline ::google::protobuf::uint32 triggerid() const;
  inline void set_triggerid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Map_CS_TriggerEvent)
 private:
  inline void set_has_triggertype();
  inline void clear_has_triggertype();
  inline void set_has_triggerid();
  inline void clear_has_triggerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 triggertype_;
  ::google::protobuf::uint32 triggerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Map_CS_TriggerEvent* default_instance_;
};
// -------------------------------------------------------------------

class Map_SC_SyncAreaStatus : public ::google::protobuf::Message {
 public:
  Map_SC_SyncAreaStatus();
  virtual ~Map_SC_SyncAreaStatus();

  Map_SC_SyncAreaStatus(const Map_SC_SyncAreaStatus& from);

  inline Map_SC_SyncAreaStatus& operator=(const Map_SC_SyncAreaStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map_SC_SyncAreaStatus& default_instance();

  void Swap(Map_SC_SyncAreaStatus* other);

  // implements Message ----------------------------------------------

  Map_SC_SyncAreaStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map_SC_SyncAreaStatus& from);
  void MergeFrom(const Map_SC_SyncAreaStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 CharId = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 SceneAreaType = 2;
  inline bool has_sceneareatype() const;
  inline void clear_sceneareatype();
  static const int kSceneAreaTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 sceneareatype() const;
  inline void set_sceneareatype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Map_SC_SyncAreaStatus)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_sceneareatype();
  inline void clear_has_sceneareatype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 sceneareatype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Map_SC_SyncAreaStatus* default_instance_;
};
// -------------------------------------------------------------------

class Map_SC_MonsterStopMove : public ::google::protobuf::Message {
 public:
  Map_SC_MonsterStopMove();
  virtual ~Map_SC_MonsterStopMove();

  Map_SC_MonsterStopMove(const Map_SC_MonsterStopMove& from);

  inline Map_SC_MonsterStopMove& operator=(const Map_SC_MonsterStopMove& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map_SC_MonsterStopMove& default_instance();

  void Swap(Map_SC_MonsterStopMove* other);

  // implements Message ----------------------------------------------

  Map_SC_MonsterStopMove* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map_SC_MonsterStopMove& from);
  void MergeFrom(const Map_SC_MonsterStopMove& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 nId = 1;
  inline bool has_nid() const;
  inline void clear_nid();
  static const int kNIdFieldNumber = 1;
  inline ::google::protobuf::uint32 nid() const;
  inline void set_nid(::google::protobuf::uint32 value);

  // required .proto.message.Point3D pt = 2;
  inline bool has_pt() const;
  inline void clear_pt();
  static const int kPtFieldNumber = 2;
  inline const ::proto::message::Point3D& pt() const;
  inline ::proto::message::Point3D* mutable_pt();
  inline ::proto::message::Point3D* release_pt();
  inline void set_allocated_pt(::proto::message::Point3D* pt);

  // required float dir = 3;
  inline bool has_dir() const;
  inline void clear_dir();
  static const int kDirFieldNumber = 3;
  inline float dir() const;
  inline void set_dir(float value);

  // @@protoc_insertion_point(class_scope:proto.message.Map_SC_MonsterStopMove)
 private:
  inline void set_has_nid();
  inline void clear_has_nid();
  inline void set_has_pt();
  inline void clear_has_pt();
  inline void set_has_dir();
  inline void clear_has_dir();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::message::Point3D* pt_;
  ::google::protobuf::uint32 nid_;
  float dir_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Map_SC_MonsterStopMove* default_instance_;
};
// -------------------------------------------------------------------

class Map_CS_TeamerLocationSyn : public ::google::protobuf::Message {
 public:
  Map_CS_TeamerLocationSyn();
  virtual ~Map_CS_TeamerLocationSyn();

  Map_CS_TeamerLocationSyn(const Map_CS_TeamerLocationSyn& from);

  inline Map_CS_TeamerLocationSyn& operator=(const Map_CS_TeamerLocationSyn& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map_CS_TeamerLocationSyn& default_instance();

  void Swap(Map_CS_TeamerLocationSyn* other);

  // implements Message ----------------------------------------------

  Map_CS_TeamerLocationSyn* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map_CS_TeamerLocationSyn& from);
  void MergeFrom(const Map_CS_TeamerLocationSyn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 opened = 1;
  inline bool has_opened() const;
  inline void clear_opened();
  static const int kOpenedFieldNumber = 1;
  inline ::google::protobuf::int32 opened() const;
  inline void set_opened(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Map_CS_TeamerLocationSyn)
 private:
  inline void set_has_opened();
  inline void clear_has_opened();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 opened_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Map_CS_TeamerLocationSyn* default_instance_;
};
// -------------------------------------------------------------------

class Location : public ::google::protobuf::Message {
 public:
  Location();
  virtual ~Location();

  Location(const Location& from);

  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Location& default_instance();

  void Swap(Location* other);

  // implements Message ----------------------------------------------

  Location* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Location& from);
  void MergeFrom(const Location& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 plyId = 1;
  inline bool has_plyid() const;
  inline void clear_plyid();
  static const int kPlyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 plyid() const;
  inline void set_plyid(::google::protobuf::uint32 value);

  // required .proto.message.Point3D pt = 2;
  inline bool has_pt() const;
  inline void clear_pt();
  static const int kPtFieldNumber = 2;
  inline const ::proto::message::Point3D& pt() const;
  inline ::proto::message::Point3D* mutable_pt();
  inline ::proto::message::Point3D* release_pt();
  inline void set_allocated_pt(::proto::message::Point3D* pt);

  // required uint32 MapID = 3;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapIDFieldNumber = 3;
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // optional uint32 Layer = 4;
  inline bool has_layer() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 4;
  inline ::google::protobuf::uint32 layer() const;
  inline void set_layer(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Location)
 private:
  inline void set_has_plyid();
  inline void clear_has_plyid();
  inline void set_has_pt();
  inline void clear_has_pt();
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_layer();
  inline void clear_has_layer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::message::Point3D* pt_;
  ::google::protobuf::uint32 plyid_;
  ::google::protobuf::uint32 mapid_;
  ::google::protobuf::uint32 layer_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Location* default_instance_;
};
// -------------------------------------------------------------------

class Map_SC_TeamerLocationSyn : public ::google::protobuf::Message {
 public:
  Map_SC_TeamerLocationSyn();
  virtual ~Map_SC_TeamerLocationSyn();

  Map_SC_TeamerLocationSyn(const Map_SC_TeamerLocationSyn& from);

  inline Map_SC_TeamerLocationSyn& operator=(const Map_SC_TeamerLocationSyn& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map_SC_TeamerLocationSyn& default_instance();

  void Swap(Map_SC_TeamerLocationSyn* other);

  // implements Message ----------------------------------------------

  Map_SC_TeamerLocationSyn* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map_SC_TeamerLocationSyn& from);
  void MergeFrom(const Map_SC_TeamerLocationSyn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.message.Location loc = 1;
  inline int loc_size() const;
  inline void clear_loc();
  static const int kLocFieldNumber = 1;
  inline const ::proto::message::Location& loc(int index) const;
  inline ::proto::message::Location* mutable_loc(int index);
  inline ::proto::message::Location* add_loc();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::Location >&
      loc() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::Location >*
      mutable_loc();

  // @@protoc_insertion_point(class_scope:proto.message.Map_SC_TeamerLocationSyn)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::message::Location > loc_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Map_SC_TeamerLocationSyn* default_instance_;
};
// -------------------------------------------------------------------

class Map_CS_StartParkour : public ::google::protobuf::Message {
 public:
  Map_CS_StartParkour();
  virtual ~Map_CS_StartParkour();

  Map_CS_StartParkour(const Map_CS_StartParkour& from);

  inline Map_CS_StartParkour& operator=(const Map_CS_StartParkour& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map_CS_StartParkour& default_instance();

  void Swap(Map_CS_StartParkour* other);

  // implements Message ----------------------------------------------

  Map_CS_StartParkour* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map_CS_StartParkour& from);
  void MergeFrom(const Map_CS_StartParkour& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.message.Map_CS_StartParkour)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Map_CS_StartParkour* default_instance_;
};
// -------------------------------------------------------------------

class Map_CS_EndParkour : public ::google::protobuf::Message {
 public:
  Map_CS_EndParkour();
  virtual ~Map_CS_EndParkour();

  Map_CS_EndParkour(const Map_CS_EndParkour& from);

  inline Map_CS_EndParkour& operator=(const Map_CS_EndParkour& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map_CS_EndParkour& default_instance();

  void Swap(Map_CS_EndParkour* other);

  // implements Message ----------------------------------------------

  Map_CS_EndParkour* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map_CS_EndParkour& from);
  void MergeFrom(const Map_CS_EndParkour& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.message.Map_CS_EndParkour)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Map_CS_EndParkour* default_instance_;
};
// -------------------------------------------------------------------

class Map_CS_PickUpChest : public ::google::protobuf::Message {
 public:
  Map_CS_PickUpChest();
  virtual ~Map_CS_PickUpChest();

  Map_CS_PickUpChest(const Map_CS_PickUpChest& from);

  inline Map_CS_PickUpChest& operator=(const Map_CS_PickUpChest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map_CS_PickUpChest& default_instance();

  void Swap(Map_CS_PickUpChest* other);

  // implements Message ----------------------------------------------

  Map_CS_PickUpChest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map_CS_PickUpChest& from);
  void MergeFrom(const Map_CS_PickUpChest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 nID = 1;
  inline bool has_nid() const;
  inline void clear_nid();
  static const int kNIDFieldNumber = 1;
  inline ::google::protobuf::uint32 nid() const;
  inline void set_nid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Map_CS_PickUpChest)
 private:
  inline void set_has_nid();
  inline void clear_has_nid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 nid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Map_CS_PickUpChest* default_instance_;
};
// -------------------------------------------------------------------

class Map_SC_PickUpChest : public ::google::protobuf::Message {
 public:
  Map_SC_PickUpChest();
  virtual ~Map_SC_PickUpChest();

  Map_SC_PickUpChest(const Map_SC_PickUpChest& from);

  inline Map_SC_PickUpChest& operator=(const Map_SC_PickUpChest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map_SC_PickUpChest& default_instance();

  void Swap(Map_SC_PickUpChest* other);

  // implements Message ----------------------------------------------

  Map_SC_PickUpChest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map_SC_PickUpChest& from);
  void MergeFrom(const Map_SC_PickUpChest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional .proto.message.IDTimes id_times = 2;
  inline bool has_id_times() const;
  inline void clear_id_times();
  static const int kIdTimesFieldNumber = 2;
  inline const ::proto::message::IDTimes& id_times() const;
  inline ::proto::message::IDTimes* mutable_id_times();
  inline ::proto::message::IDTimes* release_id_times();
  inline void set_allocated_id_times(::proto::message::IDTimes* id_times);

  // repeated .proto.message.DropItemNum item_list = 3;
  inline int item_list_size() const;
  inline void clear_item_list();
  static const int kItemListFieldNumber = 3;
  inline const ::proto::message::DropItemNum& item_list(int index) const;
  inline ::proto::message::DropItemNum* mutable_item_list(int index);
  inline ::proto::message::DropItemNum* add_item_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::DropItemNum >&
      item_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::DropItemNum >*
      mutable_item_list();

  // @@protoc_insertion_point(class_scope:proto.message.Map_SC_PickUpChest)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_id_times();
  inline void clear_has_id_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::message::IDTimes* id_times_;
  ::google::protobuf::RepeatedPtrField< ::proto::message::DropItemNum > item_list_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Map_SC_PickUpChest* default_instance_;
};
// -------------------------------------------------------------------

class Map_SC_StartParkour : public ::google::protobuf::Message {
 public:
  Map_SC_StartParkour();
  virtual ~Map_SC_StartParkour();

  Map_SC_StartParkour(const Map_SC_StartParkour& from);

  inline Map_SC_StartParkour& operator=(const Map_SC_StartParkour& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map_SC_StartParkour& default_instance();

  void Swap(Map_SC_StartParkour* other);

  // implements Message ----------------------------------------------

  Map_SC_StartParkour* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map_SC_StartParkour& from);
  void MergeFrom(const Map_SC_StartParkour& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 res = 1;
  inline bool has_res() const;
  inline void clear_res();
  static const int kResFieldNumber = 1;
  inline ::google::protobuf::int32 res() const;
  inline void set_res(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Map_SC_StartParkour)
 private:
  inline void set_has_res();
  inline void clear_has_res();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 res_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Map_SC_StartParkour* default_instance_;
};
// -------------------------------------------------------------------

class Map_SC_PlayerCheckPosition : public ::google::protobuf::Message {
 public:
  Map_SC_PlayerCheckPosition();
  virtual ~Map_SC_PlayerCheckPosition();

  Map_SC_PlayerCheckPosition(const Map_SC_PlayerCheckPosition& from);

  inline Map_SC_PlayerCheckPosition& operator=(const Map_SC_PlayerCheckPosition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map_SC_PlayerCheckPosition& default_instance();

  void Swap(Map_SC_PlayerCheckPosition* other);

  // implements Message ----------------------------------------------

  Map_SC_PlayerCheckPosition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map_SC_PlayerCheckPosition& from);
  void MergeFrom(const Map_SC_PlayerCheckPosition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 plyId = 1;
  inline bool has_plyid() const;
  inline void clear_plyid();
  static const int kPlyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 plyid() const;
  inline void set_plyid(::google::protobuf::uint32 value);

  // required .proto.message.Point3D pt = 2;
  inline bool has_pt() const;
  inline void clear_pt();
  static const int kPtFieldNumber = 2;
  inline const ::proto::message::Point3D& pt() const;
  inline ::proto::message::Point3D* mutable_pt();
  inline ::proto::message::Point3D* release_pt();
  inline void set_allocated_pt(::proto::message::Point3D* pt);

  // @@protoc_insertion_point(class_scope:proto.message.Map_SC_PlayerCheckPosition)
 private:
  inline void set_has_plyid();
  inline void clear_has_plyid();
  inline void set_has_pt();
  inline void clear_has_pt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::message::Point3D* pt_;
  ::google::protobuf::uint32 plyid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Map_SC_PlayerCheckPosition* default_instance_;
};
// -------------------------------------------------------------------

class Map_SC_PlayerStopMove : public ::google::protobuf::Message {
 public:
  Map_SC_PlayerStopMove();
  virtual ~Map_SC_PlayerStopMove();

  Map_SC_PlayerStopMove(const Map_SC_PlayerStopMove& from);

  inline Map_SC_PlayerStopMove& operator=(const Map_SC_PlayerStopMove& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map_SC_PlayerStopMove& default_instance();

  void Swap(Map_SC_PlayerStopMove* other);

  // implements Message ----------------------------------------------

  Map_SC_PlayerStopMove* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map_SC_PlayerStopMove& from);
  void MergeFrom(const Map_SC_PlayerStopMove& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 plyId = 1;
  inline bool has_plyid() const;
  inline void clear_plyid();
  static const int kPlyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 plyid() const;
  inline void set_plyid(::google::protobuf::uint32 value);

  // required .proto.message.Point3D pt = 2;
  inline bool has_pt() const;
  inline void clear_pt();
  static const int kPtFieldNumber = 2;
  inline const ::proto::message::Point3D& pt() const;
  inline ::proto::message::Point3D* mutable_pt();
  inline ::proto::message::Point3D* release_pt();
  inline void set_allocated_pt(::proto::message::Point3D* pt);

  // @@protoc_insertion_point(class_scope:proto.message.Map_SC_PlayerStopMove)
 private:
  inline void set_has_plyid();
  inline void clear_has_plyid();
  inline void set_has_pt();
  inline void clear_has_pt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::message::Point3D* pt_;
  ::google::protobuf::uint32 plyid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Map_SC_PlayerStopMove* default_instance_;
};
// -------------------------------------------------------------------

class Map_SC_PlayerStateSync : public ::google::protobuf::Message {
 public:
  Map_SC_PlayerStateSync();
  virtual ~Map_SC_PlayerStateSync();

  Map_SC_PlayerStateSync(const Map_SC_PlayerStateSync& from);

  inline Map_SC_PlayerStateSync& operator=(const Map_SC_PlayerStateSync& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map_SC_PlayerStateSync& default_instance();

  void Swap(Map_SC_PlayerStateSync* other);

  // implements Message ----------------------------------------------

  Map_SC_PlayerStateSync* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map_SC_PlayerStateSync& from);
  void MergeFrom(const Map_SC_PlayerStateSync& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 plyId = 1;
  inline bool has_plyid() const;
  inline void clear_plyid();
  static const int kPlyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 plyid() const;
  inline void set_plyid(::google::protobuf::uint32 value);

  // required uint32 SyncState = 2;
  inline bool has_syncstate() const;
  inline void clear_syncstate();
  static const int kSyncStateFieldNumber = 2;
  inline ::google::protobuf::uint32 syncstate() const;
  inline void set_syncstate(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Map_SC_PlayerStateSync)
 private:
  inline void set_has_plyid();
  inline void clear_has_plyid();
  inline void set_has_syncstate();
  inline void clear_has_syncstate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 plyid_;
  ::google::protobuf::uint32 syncstate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Map_SC_PlayerStateSync* default_instance_;
};
// -------------------------------------------------------------------

class Map_CS_PlayerCheckPosition : public ::google::protobuf::Message {
 public:
  Map_CS_PlayerCheckPosition();
  virtual ~Map_CS_PlayerCheckPosition();

  Map_CS_PlayerCheckPosition(const Map_CS_PlayerCheckPosition& from);

  inline Map_CS_PlayerCheckPosition& operator=(const Map_CS_PlayerCheckPosition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map_CS_PlayerCheckPosition& default_instance();

  void Swap(Map_CS_PlayerCheckPosition* other);

  // implements Message ----------------------------------------------

  Map_CS_PlayerCheckPosition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map_CS_PlayerCheckPosition& from);
  void MergeFrom(const Map_CS_PlayerCheckPosition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .proto.message.Point3D pt = 1;
  inline bool has_pt() const;
  inline void clear_pt();
  static const int kPtFieldNumber = 1;
  inline const ::proto::message::Point3D& pt() const;
  inline ::proto::message::Point3D* mutable_pt();
  inline ::proto::message::Point3D* release_pt();
  inline void set_allocated_pt(::proto::message::Point3D* pt);

  // @@protoc_insertion_point(class_scope:proto.message.Map_CS_PlayerCheckPosition)
 private:
  inline void set_has_pt();
  inline void clear_has_pt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::message::Point3D* pt_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Map_CS_PlayerCheckPosition* default_instance_;
};
// -------------------------------------------------------------------

class Map_CS_PlayerStopMove : public ::google::protobuf::Message {
 public:
  Map_CS_PlayerStopMove();
  virtual ~Map_CS_PlayerStopMove();

  Map_CS_PlayerStopMove(const Map_CS_PlayerStopMove& from);

  inline Map_CS_PlayerStopMove& operator=(const Map_CS_PlayerStopMove& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map_CS_PlayerStopMove& default_instance();

  void Swap(Map_CS_PlayerStopMove* other);

  // implements Message ----------------------------------------------

  Map_CS_PlayerStopMove* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map_CS_PlayerStopMove& from);
  void MergeFrom(const Map_CS_PlayerStopMove& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .proto.message.Point3D pt = 1;
  inline bool has_pt() const;
  inline void clear_pt();
  static const int kPtFieldNumber = 1;
  inline const ::proto::message::Point3D& pt() const;
  inline ::proto::message::Point3D* mutable_pt();
  inline ::proto::message::Point3D* release_pt();
  inline void set_allocated_pt(::proto::message::Point3D* pt);

  // @@protoc_insertion_point(class_scope:proto.message.Map_CS_PlayerStopMove)
 private:
  inline void set_has_pt();
  inline void clear_has_pt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::message::Point3D* pt_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Map_CS_PlayerStopMove* default_instance_;
};
// -------------------------------------------------------------------

class Map_CS_PlayerStateSync : public ::google::protobuf::Message {
 public:
  Map_CS_PlayerStateSync();
  virtual ~Map_CS_PlayerStateSync();

  Map_CS_PlayerStateSync(const Map_CS_PlayerStateSync& from);

  inline Map_CS_PlayerStateSync& operator=(const Map_CS_PlayerStateSync& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map_CS_PlayerStateSync& default_instance();

  void Swap(Map_CS_PlayerStateSync* other);

  // implements Message ----------------------------------------------

  Map_CS_PlayerStateSync* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map_CS_PlayerStateSync& from);
  void MergeFrom(const Map_CS_PlayerStateSync& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 SyncState = 1;
  inline bool has_syncstate() const;
  inline void clear_syncstate();
  static const int kSyncStateFieldNumber = 1;
  inline ::google::protobuf::uint32 syncstate() const;
  inline void set_syncstate(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Map_CS_PlayerStateSync)
 private:
  inline void set_has_syncstate();
  inline void clear_has_syncstate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 syncstate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Map_CS_PlayerStateSync* default_instance_;
};
// -------------------------------------------------------------------

class Map_SC_AddSyncRandomChest : public ::google::protobuf::Message {
 public:
  Map_SC_AddSyncRandomChest();
  virtual ~Map_SC_AddSyncRandomChest();

  Map_SC_AddSyncRandomChest(const Map_SC_AddSyncRandomChest& from);

  inline Map_SC_AddSyncRandomChest& operator=(const Map_SC_AddSyncRandomChest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map_SC_AddSyncRandomChest& default_instance();

  void Swap(Map_SC_AddSyncRandomChest* other);

  // implements Message ----------------------------------------------

  Map_SC_AddSyncRandomChest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map_SC_AddSyncRandomChest& from);
  void MergeFrom(const Map_SC_AddSyncRandomChest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 ProID = 2;
  inline bool has_proid() const;
  inline void clear_proid();
  static const int kProIDFieldNumber = 2;
  inline ::google::protobuf::uint32 proid() const;
  inline void set_proid(::google::protobuf::uint32 value);

  // required .proto.message.Point3D pt = 3;
  inline bool has_pt() const;
  inline void clear_pt();
  static const int kPtFieldNumber = 3;
  inline const ::proto::message::Point3D& pt() const;
  inline ::proto::message::Point3D* mutable_pt();
  inline ::proto::message::Point3D* release_pt();
  inline void set_allocated_pt(::proto::message::Point3D* pt);

  // required float dir = 4;
  inline bool has_dir() const;
  inline void clear_dir();
  static const int kDirFieldNumber = 4;
  inline float dir() const;
  inline void set_dir(float value);

  // required uint64 CreateUid = 5;
  inline bool has_createuid() const;
  inline void clear_createuid();
  static const int kCreateUidFieldNumber = 5;
  inline ::google::protobuf::uint64 createuid() const;
  inline void set_createuid(::google::protobuf::uint64 value);

  // required string CreateName = 6;
  inline bool has_createname() const;
  inline void clear_createname();
  static const int kCreateNameFieldNumber = 6;
  inline const ::std::string& createname() const;
  inline void set_createname(const ::std::string& value);
  inline void set_createname(const char* value);
  inline void set_createname(const char* value, size_t size);
  inline ::std::string* mutable_createname();
  inline ::std::string* release_createname();
  inline void set_allocated_createname(::std::string* createname);

  // optional int32 Velocity = 7;
  inline bool has_velocity() const;
  inline void clear_velocity();
  static const int kVelocityFieldNumber = 7;
  inline ::google::protobuf::int32 velocity() const;
  inline void set_velocity(::google::protobuf::int32 value);

  // optional int32 MaxHP = 8;
  inline bool has_maxhp() const;
  inline void clear_maxhp();
  static const int kMaxHPFieldNumber = 8;
  inline ::google::protobuf::int32 maxhp() const;
  inline void set_maxhp(::google::protobuf::int32 value);

  // optional int32 CurHP = 9;
  inline bool has_curhp() const;
  inline void clear_curhp();
  static const int kCurHPFieldNumber = 9;
  inline ::google::protobuf::int32 curhp() const;
  inline void set_curhp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Map_SC_AddSyncRandomChest)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_proid();
  inline void clear_has_proid();
  inline void set_has_pt();
  inline void clear_has_pt();
  inline void set_has_dir();
  inline void clear_has_dir();
  inline void set_has_createuid();
  inline void clear_has_createuid();
  inline void set_has_createname();
  inline void clear_has_createname();
  inline void set_has_velocity();
  inline void clear_has_velocity();
  inline void set_has_maxhp();
  inline void clear_has_maxhp();
  inline void set_has_curhp();
  inline void clear_has_curhp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 proid_;
  ::proto::message::Point3D* pt_;
  ::google::protobuf::uint64 createuid_;
  float dir_;
  ::google::protobuf::int32 velocity_;
  ::std::string* createname_;
  ::google::protobuf::int32 maxhp_;
  ::google::protobuf::int32 curhp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Map_SC_AddSyncRandomChest* default_instance_;
};
// -------------------------------------------------------------------

class Map_SC_UpdateDir : public ::google::protobuf::Message {
 public:
  Map_SC_UpdateDir();
  virtual ~Map_SC_UpdateDir();

  Map_SC_UpdateDir(const Map_SC_UpdateDir& from);

  inline Map_SC_UpdateDir& operator=(const Map_SC_UpdateDir& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map_SC_UpdateDir& default_instance();

  void Swap(Map_SC_UpdateDir* other);

  // implements Message ----------------------------------------------

  Map_SC_UpdateDir* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map_SC_UpdateDir& from);
  void MergeFrom(const Map_SC_UpdateDir& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional float dir = 2;
  inline bool has_dir() const;
  inline void clear_dir();
  static const int kDirFieldNumber = 2;
  inline float dir() const;
  inline void set_dir(float value);

  // @@protoc_insertion_point(class_scope:proto.message.Map_SC_UpdateDir)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_dir();
  inline void clear_has_dir();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  float dir_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Map_SC_UpdateDir* default_instance_;
};
// -------------------------------------------------------------------

class Map_CS_GetMapBranch : public ::google::protobuf::Message {
 public:
  Map_CS_GetMapBranch();
  virtual ~Map_CS_GetMapBranch();

  Map_CS_GetMapBranch(const Map_CS_GetMapBranch& from);

  inline Map_CS_GetMapBranch& operator=(const Map_CS_GetMapBranch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map_CS_GetMapBranch& default_instance();

  void Swap(Map_CS_GetMapBranch* other);

  // implements Message ----------------------------------------------

  Map_CS_GetMapBranch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map_CS_GetMapBranch& from);
  void MergeFrom(const Map_CS_GetMapBranch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.message.Map_CS_GetMapBranch)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Map_CS_GetMapBranch* default_instance_;
};
// -------------------------------------------------------------------

class Map_CS_ChangeBranch : public ::google::protobuf::Message {
 public:
  Map_CS_ChangeBranch();
  virtual ~Map_CS_ChangeBranch();

  Map_CS_ChangeBranch(const Map_CS_ChangeBranch& from);

  inline Map_CS_ChangeBranch& operator=(const Map_CS_ChangeBranch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map_CS_ChangeBranch& default_instance();

  void Swap(Map_CS_ChangeBranch* other);

  // implements Message ----------------------------------------------

  Map_CS_ChangeBranch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map_CS_ChangeBranch& from);
  void MergeFrom(const Map_CS_ChangeBranch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 BranchId = 1;
  inline bool has_branchid() const;
  inline void clear_branchid();
  static const int kBranchIdFieldNumber = 1;
  inline ::google::protobuf::int32 branchid() const;
  inline void set_branchid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Map_CS_ChangeBranch)
 private:
  inline void set_has_branchid();
  inline void clear_has_branchid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 branchid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Map_CS_ChangeBranch* default_instance_;
};
// -------------------------------------------------------------------

class BranchInfo : public ::google::protobuf::Message {
 public:
  BranchInfo();
  virtual ~BranchInfo();

  BranchInfo(const BranchInfo& from);

  inline BranchInfo& operator=(const BranchInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BranchInfo& default_instance();

  void Swap(BranchInfo* other);

  // implements Message ----------------------------------------------

  BranchInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BranchInfo& from);
  void MergeFrom(const BranchInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 BranchId = 1;
  inline bool has_branchid() const;
  inline void clear_branchid();
  static const int kBranchIdFieldNumber = 1;
  inline ::google::protobuf::int32 branchid() const;
  inline void set_branchid(::google::protobuf::int32 value);

  // required int32 PlayerNum = 2;
  inline bool has_playernum() const;
  inline void clear_playernum();
  static const int kPlayerNumFieldNumber = 2;
  inline ::google::protobuf::int32 playernum() const;
  inline void set_playernum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.BranchInfo)
 private:
  inline void set_has_branchid();
  inline void clear_has_branchid();
  inline void set_has_playernum();
  inline void clear_has_playernum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 branchid_;
  ::google::protobuf::int32 playernum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static BranchInfo* default_instance_;
};
// -------------------------------------------------------------------

class Map_SC_GetMapBranch : public ::google::protobuf::Message {
 public:
  Map_SC_GetMapBranch();
  virtual ~Map_SC_GetMapBranch();

  Map_SC_GetMapBranch(const Map_SC_GetMapBranch& from);

  inline Map_SC_GetMapBranch& operator=(const Map_SC_GetMapBranch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map_SC_GetMapBranch& default_instance();

  void Swap(Map_SC_GetMapBranch* other);

  // implements Message ----------------------------------------------

  Map_SC_GetMapBranch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map_SC_GetMapBranch& from);
  void MergeFrom(const Map_SC_GetMapBranch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.message.BranchInfo branch_list = 3;
  inline int branch_list_size() const;
  inline void clear_branch_list();
  static const int kBranchListFieldNumber = 3;
  inline const ::proto::message::BranchInfo& branch_list(int index) const;
  inline ::proto::message::BranchInfo* mutable_branch_list(int index);
  inline ::proto::message::BranchInfo* add_branch_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::BranchInfo >&
      branch_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::BranchInfo >*
      mutable_branch_list();

  // @@protoc_insertion_point(class_scope:proto.message.Map_SC_GetMapBranch)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::message::BranchInfo > branch_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Map_SC_GetMapBranch* default_instance_;
};
// -------------------------------------------------------------------

class Map_SC_ChangeBranch : public ::google::protobuf::Message {
 public:
  Map_SC_ChangeBranch();
  virtual ~Map_SC_ChangeBranch();

  Map_SC_ChangeBranch(const Map_SC_ChangeBranch& from);

  inline Map_SC_ChangeBranch& operator=(const Map_SC_ChangeBranch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map_SC_ChangeBranch& default_instance();

  void Swap(Map_SC_ChangeBranch* other);

  // implements Message ----------------------------------------------

  Map_SC_ChangeBranch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map_SC_ChangeBranch& from);
  void MergeFrom(const Map_SC_ChangeBranch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 rt = 1;
  inline bool has_rt() const;
  inline void clear_rt();
  static const int kRtFieldNumber = 1;
  inline ::google::protobuf::int32 rt() const;
  inline void set_rt(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Map_SC_ChangeBranch)
 private:
  inline void set_has_rt();
  inline void clear_has_rt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 rt_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Map_SC_ChangeBranch* default_instance_;
};
// -------------------------------------------------------------------

class Map_CS_GameStoryStart : public ::google::protobuf::Message {
 public:
  Map_CS_GameStoryStart();
  virtual ~Map_CS_GameStoryStart();

  Map_CS_GameStoryStart(const Map_CS_GameStoryStart& from);

  inline Map_CS_GameStoryStart& operator=(const Map_CS_GameStoryStart& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map_CS_GameStoryStart& default_instance();

  void Swap(Map_CS_GameStoryStart* other);

  // implements Message ----------------------------------------------

  Map_CS_GameStoryStart* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map_CS_GameStoryStart& from);
  void MergeFrom(const Map_CS_GameStoryStart& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 GameStoryID = 1;
  inline bool has_gamestoryid() const;
  inline void clear_gamestoryid();
  static const int kGameStoryIDFieldNumber = 1;
  inline ::google::protobuf::uint32 gamestoryid() const;
  inline void set_gamestoryid(::google::protobuf::uint32 value);

  // optional uint32 NPCID = 2;
  inline bool has_npcid() const;
  inline void clear_npcid();
  static const int kNPCIDFieldNumber = 2;
  inline ::google::protobuf::uint32 npcid() const;
  inline void set_npcid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Map_CS_GameStoryStart)
 private:
  inline void set_has_gamestoryid();
  inline void clear_has_gamestoryid();
  inline void set_has_npcid();
  inline void clear_has_npcid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 gamestoryid_;
  ::google::protobuf::uint32 npcid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Map_CS_GameStoryStart* default_instance_;
};
// -------------------------------------------------------------------

class Map_CS_GameStoryEnd : public ::google::protobuf::Message {
 public:
  Map_CS_GameStoryEnd();
  virtual ~Map_CS_GameStoryEnd();

  Map_CS_GameStoryEnd(const Map_CS_GameStoryEnd& from);

  inline Map_CS_GameStoryEnd& operator=(const Map_CS_GameStoryEnd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map_CS_GameStoryEnd& default_instance();

  void Swap(Map_CS_GameStoryEnd* other);

  // implements Message ----------------------------------------------

  Map_CS_GameStoryEnd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map_CS_GameStoryEnd& from);
  void MergeFrom(const Map_CS_GameStoryEnd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 GameStoryID = 1;
  inline bool has_gamestoryid() const;
  inline void clear_gamestoryid();
  static const int kGameStoryIDFieldNumber = 1;
  inline ::google::protobuf::uint32 gamestoryid() const;
  inline void set_gamestoryid(::google::protobuf::uint32 value);

  // optional uint32 NPCID = 2;
  inline bool has_npcid() const;
  inline void clear_npcid();
  static const int kNPCIDFieldNumber = 2;
  inline ::google::protobuf::uint32 npcid() const;
  inline void set_npcid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Map_CS_GameStoryEnd)
 private:
  inline void set_has_gamestoryid();
  inline void clear_has_gamestoryid();
  inline void set_has_npcid();
  inline void clear_has_npcid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 gamestoryid_;
  ::google::protobuf::uint32 npcid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Map_CS_GameStoryEnd* default_instance_;
};
// -------------------------------------------------------------------

class Map_CS_NPCStopAI : public ::google::protobuf::Message {
 public:
  Map_CS_NPCStopAI();
  virtual ~Map_CS_NPCStopAI();

  Map_CS_NPCStopAI(const Map_CS_NPCStopAI& from);

  inline Map_CS_NPCStopAI& operator=(const Map_CS_NPCStopAI& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map_CS_NPCStopAI& default_instance();

  void Swap(Map_CS_NPCStopAI* other);

  // implements Message ----------------------------------------------

  Map_CS_NPCStopAI* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map_CS_NPCStopAI& from);
  void MergeFrom(const Map_CS_NPCStopAI& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 NPCID = 1;
  inline bool has_npcid() const;
  inline void clear_npcid();
  static const int kNPCIDFieldNumber = 1;
  inline ::google::protobuf::uint32 npcid() const;
  inline void set_npcid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Map_CS_NPCStopAI)
 private:
  inline void set_has_npcid();
  inline void clear_has_npcid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 npcid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Map_CS_NPCStopAI* default_instance_;
};
// -------------------------------------------------------------------

class Map_CS_NPCActiveAI : public ::google::protobuf::Message {
 public:
  Map_CS_NPCActiveAI();
  virtual ~Map_CS_NPCActiveAI();

  Map_CS_NPCActiveAI(const Map_CS_NPCActiveAI& from);

  inline Map_CS_NPCActiveAI& operator=(const Map_CS_NPCActiveAI& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map_CS_NPCActiveAI& default_instance();

  void Swap(Map_CS_NPCActiveAI* other);

  // implements Message ----------------------------------------------

  Map_CS_NPCActiveAI* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map_CS_NPCActiveAI& from);
  void MergeFrom(const Map_CS_NPCActiveAI& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 NPCID = 1;
  inline bool has_npcid() const;
  inline void clear_npcid();
  static const int kNPCIDFieldNumber = 1;
  inline ::google::protobuf::uint32 npcid() const;
  inline void set_npcid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Map_CS_NPCActiveAI)
 private:
  inline void set_has_npcid();
  inline void clear_has_npcid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 npcid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Map_CS_NPCActiveAI* default_instance_;
};
// -------------------------------------------------------------------

class Map_SC_MonsterTalk : public ::google::protobuf::Message {
 public:
  Map_SC_MonsterTalk();
  virtual ~Map_SC_MonsterTalk();

  Map_SC_MonsterTalk(const Map_SC_MonsterTalk& from);

  inline Map_SC_MonsterTalk& operator=(const Map_SC_MonsterTalk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map_SC_MonsterTalk& default_instance();

  void Swap(Map_SC_MonsterTalk* other);

  // implements Message ----------------------------------------------

  Map_SC_MonsterTalk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map_SC_MonsterTalk& from);
  void MergeFrom(const Map_SC_MonsterTalk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 talkID = 2;
  inline bool has_talkid() const;
  inline void clear_talkid();
  static const int kTalkIDFieldNumber = 2;
  inline ::google::protobuf::uint32 talkid() const;
  inline void set_talkid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Map_SC_MonsterTalk)
 private:
  inline void set_has_talkid();
  inline void clear_has_talkid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 talkid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Map_SC_MonsterTalk* default_instance_;
};
// -------------------------------------------------------------------

class Map_SC_MonsterTurnBackSync : public ::google::protobuf::Message {
 public:
  Map_SC_MonsterTurnBackSync();
  virtual ~Map_SC_MonsterTurnBackSync();

  Map_SC_MonsterTurnBackSync(const Map_SC_MonsterTurnBackSync& from);

  inline Map_SC_MonsterTurnBackSync& operator=(const Map_SC_MonsterTurnBackSync& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map_SC_MonsterTurnBackSync& default_instance();

  void Swap(Map_SC_MonsterTurnBackSync* other);

  // implements Message ----------------------------------------------

  Map_SC_MonsterTurnBackSync* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map_SC_MonsterTurnBackSync& from);
  void MergeFrom(const Map_SC_MonsterTurnBackSync& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 MonsterID = 1;
  inline bool has_monsterid() const;
  inline void clear_monsterid();
  static const int kMonsterIDFieldNumber = 1;
  inline ::google::protobuf::uint32 monsterid() const;
  inline void set_monsterid(::google::protobuf::uint32 value);

  // required uint64 EndTick = 2;
  inline bool has_endtick() const;
  inline void clear_endtick();
  static const int kEndTickFieldNumber = 2;
  inline ::google::protobuf::uint64 endtick() const;
  inline void set_endtick(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.message.Map_SC_MonsterTurnBackSync)
 private:
  inline void set_has_monsterid();
  inline void clear_has_monsterid();
  inline void set_has_endtick();
  inline void clear_has_endtick();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 endtick_;
  ::google::protobuf::uint32 monsterid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Map_SC_MonsterTurnBackSync* default_instance_;
};
// -------------------------------------------------------------------

class Map_SC_ChangeMapResult : public ::google::protobuf::Message {
 public:
  Map_SC_ChangeMapResult();
  virtual ~Map_SC_ChangeMapResult();

  Map_SC_ChangeMapResult(const Map_SC_ChangeMapResult& from);

  inline Map_SC_ChangeMapResult& operator=(const Map_SC_ChangeMapResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map_SC_ChangeMapResult& default_instance();

  void Swap(Map_SC_ChangeMapResult* other);

  // implements Message ----------------------------------------------

  Map_SC_ChangeMapResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map_SC_ChangeMapResult& from);
  void MergeFrom(const Map_SC_ChangeMapResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 map_table_id = 2;
  inline bool has_map_table_id() const;
  inline void clear_map_table_id();
  static const int kMapTableIdFieldNumber = 2;
  inline ::google::protobuf::int32 map_table_id() const;
  inline void set_map_table_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Map_SC_ChangeMapResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_map_table_id();
  inline void clear_has_map_table_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 map_table_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Map_SC_ChangeMapResult* default_instance_;
};
// -------------------------------------------------------------------

class Game2Match_PVPMatch : public ::google::protobuf::Message {
 public:
  Game2Match_PVPMatch();
  virtual ~Game2Match_PVPMatch();

  Game2Match_PVPMatch(const Game2Match_PVPMatch& from);

  inline Game2Match_PVPMatch& operator=(const Game2Match_PVPMatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Game2Match_PVPMatch& default_instance();

  void Swap(Game2Match_PVPMatch* other);

  // implements Message ----------------------------------------------

  Game2Match_PVPMatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Game2Match_PVPMatch& from);
  void MergeFrom(const Game2Match_PVPMatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 iTableId = 1;
  inline bool has_itableid() const;
  inline void clear_itableid();
  static const int kITableIdFieldNumber = 1;
  inline ::google::protobuf::int32 itableid() const;
  inline void set_itableid(::google::protobuf::int32 value);

  // required .proto.message.MatchPlayerInfo sMatchPlyInfo = 2;
  inline bool has_smatchplyinfo() const;
  inline void clear_smatchplyinfo();
  static const int kSMatchPlyInfoFieldNumber = 2;
  inline const ::proto::message::MatchPlayerInfo& smatchplyinfo() const;
  inline ::proto::message::MatchPlayerInfo* mutable_smatchplyinfo();
  inline ::proto::message::MatchPlayerInfo* release_smatchplyinfo();
  inline void set_allocated_smatchplyinfo(::proto::message::MatchPlayerInfo* smatchplyinfo);

  // @@protoc_insertion_point(class_scope:proto.message.Game2Match_PVPMatch)
 private:
  inline void set_has_itableid();
  inline void clear_has_itableid();
  inline void set_has_smatchplyinfo();
  inline void clear_has_smatchplyinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::message::MatchPlayerInfo* smatchplyinfo_;
  ::google::protobuf::int32 itableid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Game2Match_PVPMatch* default_instance_;
};
// -------------------------------------------------------------------

class Game2Match_TeamMatch : public ::google::protobuf::Message {
 public:
  Game2Match_TeamMatch();
  virtual ~Game2Match_TeamMatch();

  Game2Match_TeamMatch(const Game2Match_TeamMatch& from);

  inline Game2Match_TeamMatch& operator=(const Game2Match_TeamMatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Game2Match_TeamMatch& default_instance();

  void Swap(Game2Match_TeamMatch* other);

  // implements Message ----------------------------------------------

  Game2Match_TeamMatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Game2Match_TeamMatch& from);
  void MergeFrom(const Game2Match_TeamMatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 iTableId = 1;
  inline bool has_itableid() const;
  inline void clear_itableid();
  static const int kITableIdFieldNumber = 1;
  inline ::google::protobuf::int32 itableid() const;
  inline void set_itableid(::google::protobuf::int32 value);

  // required uint64 uiHostId = 2;
  inline bool has_uihostid() const;
  inline void clear_uihostid();
  static const int kUiHostIdFieldNumber = 2;
  inline ::google::protobuf::uint64 uihostid() const;
  inline void set_uihostid(::google::protobuf::uint64 value);

  // repeated .proto.message.MatchPlayerInfo vecMatchPlyInfo = 3;
  inline int vecmatchplyinfo_size() const;
  inline void clear_vecmatchplyinfo();
  static const int kVecMatchPlyInfoFieldNumber = 3;
  inline const ::proto::message::MatchPlayerInfo& vecmatchplyinfo(int index) const;
  inline ::proto::message::MatchPlayerInfo* mutable_vecmatchplyinfo(int index);
  inline ::proto::message::MatchPlayerInfo* add_vecmatchplyinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::MatchPlayerInfo >&
      vecmatchplyinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::MatchPlayerInfo >*
      mutable_vecmatchplyinfo();

  // @@protoc_insertion_point(class_scope:proto.message.Game2Match_TeamMatch)
 private:
  inline void set_has_itableid();
  inline void clear_has_itableid();
  inline void set_has_uihostid();
  inline void clear_has_uihostid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uihostid_;
  ::google::protobuf::RepeatedPtrField< ::proto::message::MatchPlayerInfo > vecmatchplyinfo_;
  ::google::protobuf::int32 itableid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Game2Match_TeamMatch* default_instance_;
};
// -------------------------------------------------------------------

class Game2Match_CancelMatch : public ::google::protobuf::Message {
 public:
  Game2Match_CancelMatch();
  virtual ~Game2Match_CancelMatch();

  Game2Match_CancelMatch(const Game2Match_CancelMatch& from);

  inline Game2Match_CancelMatch& operator=(const Game2Match_CancelMatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Game2Match_CancelMatch& default_instance();

  void Swap(Game2Match_CancelMatch* other);

  // implements Message ----------------------------------------------

  Game2Match_CancelMatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Game2Match_CancelMatch& from);
  void MergeFrom(const Game2Match_CancelMatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 uuid = 1;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 1;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.message.Game2Match_CancelMatch)
 private:
  inline void set_has_uuid();
  inline void clear_has_uuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Game2Match_CancelMatch* default_instance_;
};
// -------------------------------------------------------------------

class Game2Client_WorldBossInfo : public ::google::protobuf::Message {
 public:
  Game2Client_WorldBossInfo();
  virtual ~Game2Client_WorldBossInfo();

  Game2Client_WorldBossInfo(const Game2Client_WorldBossInfo& from);

  inline Game2Client_WorldBossInfo& operator=(const Game2Client_WorldBossInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Game2Client_WorldBossInfo& default_instance();

  void Swap(Game2Client_WorldBossInfo* other);

  // implements Message ----------------------------------------------

  Game2Client_WorldBossInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Game2Client_WorldBossInfo& from);
  void MergeFrom(const Game2Client_WorldBossInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 uiBossId = 1;
  inline bool has_uibossid() const;
  inline void clear_uibossid();
  static const int kUiBossIdFieldNumber = 1;
  inline ::google::protobuf::uint32 uibossid() const;
  inline void set_uibossid(::google::protobuf::uint32 value);

  // required uint32 uiBossLevel = 2;
  inline bool has_uibosslevel() const;
  inline void clear_uibosslevel();
  static const int kUiBossLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 uibosslevel() const;
  inline void set_uibosslevel(::google::protobuf::uint32 value);

  // required uint32 uiExpiryTime = 3;
  inline bool has_uiexpirytime() const;
  inline void clear_uiexpirytime();
  static const int kUiExpiryTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 uiexpirytime() const;
  inline void set_uiexpirytime(::google::protobuf::uint32 value);

  // required uint64 uiBossHp = 4;
  inline bool has_uibosshp() const;
  inline void clear_uibosshp();
  static const int kUiBossHpFieldNumber = 4;
  inline ::google::protobuf::uint64 uibosshp() const;
  inline void set_uibosshp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.message.Game2Client_WorldBossInfo)
 private:
  inline void set_has_uibossid();
  inline void clear_has_uibossid();
  inline void set_has_uibosslevel();
  inline void clear_has_uibosslevel();
  inline void set_has_uiexpirytime();
  inline void clear_has_uiexpirytime();
  inline void set_has_uibosshp();
  inline void clear_has_uibosshp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 uibossid_;
  ::google::protobuf::uint32 uibosslevel_;
  ::google::protobuf::uint64 uibosshp_;
  ::google::protobuf::uint32 uiexpirytime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Game2Client_WorldBossInfo* default_instance_;
};
// -------------------------------------------------------------------

class Game2Battle_WorldBossStart : public ::google::protobuf::Message {
 public:
  Game2Battle_WorldBossStart();
  virtual ~Game2Battle_WorldBossStart();

  Game2Battle_WorldBossStart(const Game2Battle_WorldBossStart& from);

  inline Game2Battle_WorldBossStart& operator=(const Game2Battle_WorldBossStart& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Game2Battle_WorldBossStart& default_instance();

  void Swap(Game2Battle_WorldBossStart* other);

  // implements Message ----------------------------------------------

  Game2Battle_WorldBossStart* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Game2Battle_WorldBossStart& from);
  void MergeFrom(const Game2Battle_WorldBossStart& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 uiBossId = 1;
  inline bool has_uibossid() const;
  inline void clear_uibossid();
  static const int kUiBossIdFieldNumber = 1;
  inline ::google::protobuf::uint32 uibossid() const;
  inline void set_uibossid(::google::protobuf::uint32 value);

  // required uint32 uiBossLevel = 2;
  inline bool has_uibosslevel() const;
  inline void clear_uibosslevel();
  static const int kUiBossLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 uibosslevel() const;
  inline void set_uibosslevel(::google::protobuf::uint32 value);

  // required uint32 uiExpiryTime = 3;
  inline bool has_uiexpirytime() const;
  inline void clear_uiexpirytime();
  static const int kUiExpiryTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 uiexpirytime() const;
  inline void set_uiexpirytime(::google::protobuf::uint32 value);

  // required uint64 uiHp = 4;
  inline bool has_uihp() const;
  inline void clear_uihp();
  static const int kUiHpFieldNumber = 4;
  inline ::google::protobuf::uint64 uihp() const;
  inline void set_uihp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.message.Game2Battle_WorldBossStart)
 private:
  inline void set_has_uibossid();
  inline void clear_has_uibossid();
  inline void set_has_uibosslevel();
  inline void clear_has_uibosslevel();
  inline void set_has_uiexpirytime();
  inline void clear_has_uiexpirytime();
  inline void set_has_uihp();
  inline void clear_has_uihp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 uibossid_;
  ::google::protobuf::uint32 uibosslevel_;
  ::google::protobuf::uint64 uihp_;
  ::google::protobuf::uint32 uiexpirytime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Game2Battle_WorldBossStart* default_instance_;
};
// -------------------------------------------------------------------

class Client2Game_WorldBossBid : public ::google::protobuf::Message {
 public:
  Client2Game_WorldBossBid();
  virtual ~Client2Game_WorldBossBid();

  Client2Game_WorldBossBid(const Client2Game_WorldBossBid& from);

  inline Client2Game_WorldBossBid& operator=(const Client2Game_WorldBossBid& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Client2Game_WorldBossBid& default_instance();

  void Swap(Client2Game_WorldBossBid* other);

  // implements Message ----------------------------------------------

  Client2Game_WorldBossBid* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Client2Game_WorldBossBid& from);
  void MergeFrom(const Client2Game_WorldBossBid& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 uiItemIndex = 1;
  inline bool has_uiitemindex() const;
  inline void clear_uiitemindex();
  static const int kUiItemIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 uiitemindex() const;
  inline void set_uiitemindex(::google::protobuf::uint32 value);

  // required uint32 uiPrice = 2;
  inline bool has_uiprice() const;
  inline void clear_uiprice();
  static const int kUiPriceFieldNumber = 2;
  inline ::google::protobuf::uint32 uiprice() const;
  inline void set_uiprice(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Client2Game_WorldBossBid)
 private:
  inline void set_has_uiitemindex();
  inline void clear_has_uiitemindex();
  inline void set_has_uiprice();
  inline void clear_has_uiprice();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 uiitemindex_;
  ::google::protobuf::uint32 uiprice_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Client2Game_WorldBossBid* default_instance_;
};
// -------------------------------------------------------------------

class Game2Battle_WorldBossBid : public ::google::protobuf::Message {
 public:
  Game2Battle_WorldBossBid();
  virtual ~Game2Battle_WorldBossBid();

  Game2Battle_WorldBossBid(const Game2Battle_WorldBossBid& from);

  inline Game2Battle_WorldBossBid& operator=(const Game2Battle_WorldBossBid& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Game2Battle_WorldBossBid& default_instance();

  void Swap(Game2Battle_WorldBossBid* other);

  // implements Message ----------------------------------------------

  Game2Battle_WorldBossBid* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Game2Battle_WorldBossBid& from);
  void MergeFrom(const Game2Battle_WorldBossBid& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 uiItemIndex = 1;
  inline bool has_uiitemindex() const;
  inline void clear_uiitemindex();
  static const int kUiItemIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 uiitemindex() const;
  inline void set_uiitemindex(::google::protobuf::uint32 value);

  // required uint32 uiPrice = 2;
  inline bool has_uiprice() const;
  inline void clear_uiprice();
  static const int kUiPriceFieldNumber = 2;
  inline ::google::protobuf::uint32 uiprice() const;
  inline void set_uiprice(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Game2Battle_WorldBossBid)
 private:
  inline void set_has_uiitemindex();
  inline void clear_has_uiitemindex();
  inline void set_has_uiprice();
  inline void clear_has_uiprice();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 uiitemindex_;
  ::google::protobuf::uint32 uiprice_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Game2Battle_WorldBossBid* default_instance_;
};
// -------------------------------------------------------------------

class Game2Client_WolrdBoss_SaleHistory : public ::google::protobuf::Message {
 public:
  Game2Client_WolrdBoss_SaleHistory();
  virtual ~Game2Client_WolrdBoss_SaleHistory();

  Game2Client_WolrdBoss_SaleHistory(const Game2Client_WolrdBoss_SaleHistory& from);

  inline Game2Client_WolrdBoss_SaleHistory& operator=(const Game2Client_WolrdBoss_SaleHistory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Game2Client_WolrdBoss_SaleHistory& default_instance();

  void Swap(Game2Client_WolrdBoss_SaleHistory* other);

  // implements Message ----------------------------------------------

  Game2Client_WolrdBoss_SaleHistory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Game2Client_WolrdBoss_SaleHistory& from);
  void MergeFrom(const Game2Client_WolrdBoss_SaleHistory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.message.WolrdBossSaledItem item = 1;
  inline int item_size() const;
  inline void clear_item();
  static const int kItemFieldNumber = 1;
  inline const ::proto::message::WolrdBossSaledItem& item(int index) const;
  inline ::proto::message::WolrdBossSaledItem* mutable_item(int index);
  inline ::proto::message::WolrdBossSaledItem* add_item();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::WolrdBossSaledItem >&
      item() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::WolrdBossSaledItem >*
      mutable_item();

  // @@protoc_insertion_point(class_scope:proto.message.Game2Client_WolrdBoss_SaleHistory)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::message::WolrdBossSaledItem > item_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Game2Client_WolrdBoss_SaleHistory* default_instance_;
};
// -------------------------------------------------------------------

class Map_CS_TicketBossInfo : public ::google::protobuf::Message {
 public:
  Map_CS_TicketBossInfo();
  virtual ~Map_CS_TicketBossInfo();

  Map_CS_TicketBossInfo(const Map_CS_TicketBossInfo& from);

  inline Map_CS_TicketBossInfo& operator=(const Map_CS_TicketBossInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map_CS_TicketBossInfo& default_instance();

  void Swap(Map_CS_TicketBossInfo* other);

  // implements Message ----------------------------------------------

  Map_CS_TicketBossInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map_CS_TicketBossInfo& from);
  void MergeFrom(const Map_CS_TicketBossInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 uiTableId = 1;
  inline bool has_uitableid() const;
  inline void clear_uitableid();
  static const int kUiTableIdFieldNumber = 1;
  inline ::google::protobuf::uint32 uitableid() const;
  inline void set_uitableid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Map_CS_TicketBossInfo)
 private:
  inline void set_has_uitableid();
  inline void clear_has_uitableid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 uitableid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Map_CS_TicketBossInfo* default_instance_;
};
// -------------------------------------------------------------------

class Map_SC_TicketBossInfo : public ::google::protobuf::Message {
 public:
  Map_SC_TicketBossInfo();
  virtual ~Map_SC_TicketBossInfo();

  Map_SC_TicketBossInfo(const Map_SC_TicketBossInfo& from);

  inline Map_SC_TicketBossInfo& operator=(const Map_SC_TicketBossInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map_SC_TicketBossInfo& default_instance();

  void Swap(Map_SC_TicketBossInfo* other);

  // implements Message ----------------------------------------------

  Map_SC_TicketBossInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map_SC_TicketBossInfo& from);
  void MergeFrom(const Map_SC_TicketBossInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 uiTableId = 1;
  inline int uitableid_size() const;
  inline void clear_uitableid();
  static const int kUiTableIdFieldNumber = 1;
  inline ::google::protobuf::uint32 uitableid(int index) const;
  inline void set_uitableid(int index, ::google::protobuf::uint32 value);
  inline void add_uitableid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      uitableid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_uitableid();

  // repeated uint32 uiBossId = 2;
  inline int uibossid_size() const;
  inline void clear_uibossid();
  static const int kUiBossIdFieldNumber = 2;
  inline ::google::protobuf::uint32 uibossid(int index) const;
  inline void set_uibossid(int index, ::google::protobuf::uint32 value);
  inline void add_uibossid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      uibossid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_uibossid();

  // repeated uint64 uiBossHp = 3;
  inline int uibosshp_size() const;
  inline void clear_uibosshp();
  static const int kUiBossHpFieldNumber = 3;
  inline ::google::protobuf::uint64 uibosshp(int index) const;
  inline void set_uibosshp(int index, ::google::protobuf::uint64 value);
  inline void add_uibosshp(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      uibosshp() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_uibosshp();

  // repeated uint32 uiRefreshTime = 4;
  inline int uirefreshtime_size() const;
  inline void clear_uirefreshtime();
  static const int kUiRefreshTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 uirefreshtime(int index) const;
  inline void set_uirefreshtime(int index, ::google::protobuf::uint32 value);
  inline void add_uirefreshtime(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      uirefreshtime() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_uirefreshtime();

  // @@protoc_insertion_point(class_scope:proto.message.Map_SC_TicketBossInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > uitableid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > uibossid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > uibosshp_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > uirefreshtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Map_SC_TicketBossInfo* default_instance_;
};
// -------------------------------------------------------------------

class Map_CS_TicketBossChallenge : public ::google::protobuf::Message {
 public:
  Map_CS_TicketBossChallenge();
  virtual ~Map_CS_TicketBossChallenge();

  Map_CS_TicketBossChallenge(const Map_CS_TicketBossChallenge& from);

  inline Map_CS_TicketBossChallenge& operator=(const Map_CS_TicketBossChallenge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map_CS_TicketBossChallenge& default_instance();

  void Swap(Map_CS_TicketBossChallenge* other);

  // implements Message ----------------------------------------------

  Map_CS_TicketBossChallenge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map_CS_TicketBossChallenge& from);
  void MergeFrom(const Map_CS_TicketBossChallenge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 uiTableId = 1;
  inline bool has_uitableid() const;
  inline void clear_uitableid();
  static const int kUiTableIdFieldNumber = 1;
  inline ::google::protobuf::uint32 uitableid() const;
  inline void set_uitableid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Map_CS_TicketBossChallenge)
 private:
  inline void set_has_uitableid();
  inline void clear_has_uitableid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 uitableid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Map_CS_TicketBossChallenge* default_instance_;
};
// -------------------------------------------------------------------

class Map_SC_TicketBossChallenge : public ::google::protobuf::Message {
 public:
  Map_SC_TicketBossChallenge();
  virtual ~Map_SC_TicketBossChallenge();

  Map_SC_TicketBossChallenge(const Map_SC_TicketBossChallenge& from);

  inline Map_SC_TicketBossChallenge& operator=(const Map_SC_TicketBossChallenge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map_SC_TicketBossChallenge& default_instance();

  void Swap(Map_SC_TicketBossChallenge* other);

  // implements Message ----------------------------------------------

  Map_SC_TicketBossChallenge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map_SC_TicketBossChallenge& from);
  void MergeFrom(const Map_SC_TicketBossChallenge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 uiTableId = 1;
  inline bool has_uitableid() const;
  inline void clear_uitableid();
  static const int kUiTableIdFieldNumber = 1;
  inline ::google::protobuf::uint32 uitableid() const;
  inline void set_uitableid(::google::protobuf::uint32 value);

  // required uint32 uiResult = 2;
  inline bool has_uiresult() const;
  inline void clear_uiresult();
  static const int kUiResultFieldNumber = 2;
  inline ::google::protobuf::uint32 uiresult() const;
  inline void set_uiresult(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Map_SC_TicketBossChallenge)
 private:
  inline void set_has_uitableid();
  inline void clear_has_uitableid();
  inline void set_has_uiresult();
  inline void clear_has_uiresult();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 uitableid_;
  ::google::protobuf::uint32 uiresult_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Map_SC_TicketBossChallenge* default_instance_;
};
// -------------------------------------------------------------------

class Map_CS_ChatMark : public ::google::protobuf::Message {
 public:
  Map_CS_ChatMark();
  virtual ~Map_CS_ChatMark();

  Map_CS_ChatMark(const Map_CS_ChatMark& from);

  inline Map_CS_ChatMark& operator=(const Map_CS_ChatMark& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map_CS_ChatMark& default_instance();

  void Swap(Map_CS_ChatMark* other);

  // implements Message ----------------------------------------------

  Map_CS_ChatMark* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map_CS_ChatMark& from);
  void MergeFrom(const Map_CS_ChatMark& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 channel = 1;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 1;
  inline ::google::protobuf::int32 channel() const;
  inline void set_channel(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Map_CS_ChatMark)
 private:
  inline void set_has_channel();
  inline void clear_has_channel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 channel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Map_CS_ChatMark* default_instance_;
};
// -------------------------------------------------------------------

class Map_CS_TakeDropItem : public ::google::protobuf::Message {
 public:
  Map_CS_TakeDropItem();
  virtual ~Map_CS_TakeDropItem();

  Map_CS_TakeDropItem(const Map_CS_TakeDropItem& from);

  inline Map_CS_TakeDropItem& operator=(const Map_CS_TakeDropItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map_CS_TakeDropItem& default_instance();

  void Swap(Map_CS_TakeDropItem* other);

  // implements Message ----------------------------------------------

  Map_CS_TakeDropItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map_CS_TakeDropItem& from);
  void MergeFrom(const Map_CS_TakeDropItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 uiKey = 1;
  inline bool has_uikey() const;
  inline void clear_uikey();
  static const int kUiKeyFieldNumber = 1;
  inline ::google::protobuf::uint32 uikey() const;
  inline void set_uikey(::google::protobuf::uint32 value);

  // required uint32 uiTableId = 2;
  inline bool has_uitableid() const;
  inline void clear_uitableid();
  static const int kUiTableIdFieldNumber = 2;
  inline ::google::protobuf::uint32 uitableid() const;
  inline void set_uitableid(::google::protobuf::uint32 value);

  // required uint32 uiIndex = 3;
  inline bool has_uiindex() const;
  inline void clear_uiindex();
  static const int kUiIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 uiindex() const;
  inline void set_uiindex(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Map_CS_TakeDropItem)
 private:
  inline void set_has_uikey();
  inline void clear_has_uikey();
  inline void set_has_uitableid();
  inline void clear_has_uitableid();
  inline void set_has_uiindex();
  inline void clear_has_uiindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 uikey_;
  ::google::protobuf::uint32 uitableid_;
  ::google::protobuf::uint32 uiindex_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Map_CS_TakeDropItem* default_instance_;
};
// -------------------------------------------------------------------

class Map_SC_TakeDropItem : public ::google::protobuf::Message {
 public:
  Map_SC_TakeDropItem();
  virtual ~Map_SC_TakeDropItem();

  Map_SC_TakeDropItem(const Map_SC_TakeDropItem& from);

  inline Map_SC_TakeDropItem& operator=(const Map_SC_TakeDropItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map_SC_TakeDropItem& default_instance();

  void Swap(Map_SC_TakeDropItem* other);

  // implements Message ----------------------------------------------

  Map_SC_TakeDropItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map_SC_TakeDropItem& from);
  void MergeFrom(const Map_SC_TakeDropItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 uiResult = 1;
  inline bool has_uiresult() const;
  inline void clear_uiresult();
  static const int kUiResultFieldNumber = 1;
  inline ::google::protobuf::uint32 uiresult() const;
  inline void set_uiresult(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Map_SC_TakeDropItem)
 private:
  inline void set_has_uiresult();
  inline void clear_has_uiresult();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 uiresult_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Map_SC_TakeDropItem* default_instance_;
};
// -------------------------------------------------------------------

class Game2Battle_TicketBossChallenge : public ::google::protobuf::Message {
 public:
  Game2Battle_TicketBossChallenge();
  virtual ~Game2Battle_TicketBossChallenge();

  Game2Battle_TicketBossChallenge(const Game2Battle_TicketBossChallenge& from);

  inline Game2Battle_TicketBossChallenge& operator=(const Game2Battle_TicketBossChallenge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Game2Battle_TicketBossChallenge& default_instance();

  void Swap(Game2Battle_TicketBossChallenge* other);

  // implements Message ----------------------------------------------

  Game2Battle_TicketBossChallenge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Game2Battle_TicketBossChallenge& from);
  void MergeFrom(const Game2Battle_TicketBossChallenge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 uiTableId = 1;
  inline bool has_uitableid() const;
  inline void clear_uitableid();
  static const int kUiTableIdFieldNumber = 1;
  inline ::google::protobuf::uint32 uitableid() const;
  inline void set_uitableid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Game2Battle_TicketBossChallenge)
 private:
  inline void set_has_uitableid();
  inline void clear_has_uitableid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 uitableid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Game2Battle_TicketBossChallenge* default_instance_;
};
// -------------------------------------------------------------------

class Game2Battle_TakeDropItem : public ::google::protobuf::Message {
 public:
  Game2Battle_TakeDropItem();
  virtual ~Game2Battle_TakeDropItem();

  Game2Battle_TakeDropItem(const Game2Battle_TakeDropItem& from);

  inline Game2Battle_TakeDropItem& operator=(const Game2Battle_TakeDropItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Game2Battle_TakeDropItem& default_instance();

  void Swap(Game2Battle_TakeDropItem* other);

  // implements Message ----------------------------------------------

  Game2Battle_TakeDropItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Game2Battle_TakeDropItem& from);
  void MergeFrom(const Game2Battle_TakeDropItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 uiKey = 1;
  inline bool has_uikey() const;
  inline void clear_uikey();
  static const int kUiKeyFieldNumber = 1;
  inline ::google::protobuf::uint32 uikey() const;
  inline void set_uikey(::google::protobuf::uint32 value);

  // required uint32 uiTableId = 2;
  inline bool has_uitableid() const;
  inline void clear_uitableid();
  static const int kUiTableIdFieldNumber = 2;
  inline ::google::protobuf::uint32 uitableid() const;
  inline void set_uitableid(::google::protobuf::uint32 value);

  // required uint32 uiIndex = 3;
  inline bool has_uiindex() const;
  inline void clear_uiindex();
  static const int kUiIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 uiindex() const;
  inline void set_uiindex(::google::protobuf::uint32 value);

  // required uint32 uiNullGirdNum = 4;
  inline bool has_uinullgirdnum() const;
  inline void clear_uinullgirdnum();
  static const int kUiNullGirdNumFieldNumber = 4;
  inline ::google::protobuf::uint32 uinullgirdnum() const;
  inline void set_uinullgirdnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Game2Battle_TakeDropItem)
 private:
  inline void set_has_uikey();
  inline void clear_has_uikey();
  inline void set_has_uitableid();
  inline void clear_has_uitableid();
  inline void set_has_uiindex();
  inline void clear_has_uiindex();
  inline void set_has_uinullgirdnum();
  inline void clear_has_uinullgirdnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 uikey_;
  ::google::protobuf::uint32 uitableid_;
  ::google::protobuf::uint32 uiindex_;
  ::google::protobuf::uint32 uinullgirdnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Game2Battle_TakeDropItem* default_instance_;
};
// -------------------------------------------------------------------

class Game2Match_CreateRoom : public ::google::protobuf::Message {
 public:
  Game2Match_CreateRoom();
  virtual ~Game2Match_CreateRoom();

  Game2Match_CreateRoom(const Game2Match_CreateRoom& from);

  inline Game2Match_CreateRoom& operator=(const Game2Match_CreateRoom& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Game2Match_CreateRoom& default_instance();

  void Swap(Game2Match_CreateRoom* other);

  // implements Message ----------------------------------------------

  Game2Match_CreateRoom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Game2Match_CreateRoom& from);
  void MergeFrom(const Game2Match_CreateRoom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 obj = 1;
  inline bool has_obj() const;
  inline void clear_obj();
  static const int kObjFieldNumber = 1;
  inline ::google::protobuf::int32 obj() const;
  inline void set_obj(::google::protobuf::int32 value);

  // optional .proto.message.MatchPlayerInfo sPlyInfo = 2;
  inline bool has_splyinfo() const;
  inline void clear_splyinfo();
  static const int kSPlyInfoFieldNumber = 2;
  inline const ::proto::message::MatchPlayerInfo& splyinfo() const;
  inline ::proto::message::MatchPlayerInfo* mutable_splyinfo();
  inline ::proto::message::MatchPlayerInfo* release_splyinfo();
  inline void set_allocated_splyinfo(::proto::message::MatchPlayerInfo* splyinfo);

  // @@protoc_insertion_point(class_scope:proto.message.Game2Match_CreateRoom)
 private:
  inline void set_has_obj();
  inline void clear_has_obj();
  inline void set_has_splyinfo();
  inline void clear_has_splyinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::message::MatchPlayerInfo* splyinfo_;
  ::google::protobuf::int32 obj_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Game2Match_CreateRoom* default_instance_;
};
// -------------------------------------------------------------------

class Game2Match_GetRoomList : public ::google::protobuf::Message {
 public:
  Game2Match_GetRoomList();
  virtual ~Game2Match_GetRoomList();

  Game2Match_GetRoomList(const Game2Match_GetRoomList& from);

  inline Game2Match_GetRoomList& operator=(const Game2Match_GetRoomList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Game2Match_GetRoomList& default_instance();

  void Swap(Game2Match_GetRoomList* other);

  // implements Message ----------------------------------------------

  Game2Match_GetRoomList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Game2Match_GetRoomList& from);
  void MergeFrom(const Game2Match_GetRoomList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 obj = 1;
  inline bool has_obj() const;
  inline void clear_obj();
  static const int kObjFieldNumber = 1;
  inline ::google::protobuf::int32 obj() const;
  inline void set_obj(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.message.Game2Match_GetRoomList)
 private:
  inline void set_has_obj();
  inline void clear_has_obj();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 obj_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Game2Match_GetRoomList* default_instance_;
};
// -------------------------------------------------------------------

class Game2Battle_UpdateHeadInfo : public ::google::protobuf::Message {
 public:
  Game2Battle_UpdateHeadInfo();
  virtual ~Game2Battle_UpdateHeadInfo();

  Game2Battle_UpdateHeadInfo(const Game2Battle_UpdateHeadInfo& from);

  inline Game2Battle_UpdateHeadInfo& operator=(const Game2Battle_UpdateHeadInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Game2Battle_UpdateHeadInfo& default_instance();

  void Swap(Game2Battle_UpdateHeadInfo* other);

  // implements Message ----------------------------------------------

  Game2Battle_UpdateHeadInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Game2Battle_UpdateHeadInfo& from);
  void MergeFrom(const Game2Battle_UpdateHeadInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.message.BattleSingleHeadInfo info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::proto::message::BattleSingleHeadInfo& info() const;
  inline ::proto::message::BattleSingleHeadInfo* mutable_info();
  inline ::proto::message::BattleSingleHeadInfo* release_info();
  inline void set_allocated_info(::proto::message::BattleSingleHeadInfo* info);

  // @@protoc_insertion_point(class_scope:proto.message.Game2Battle_UpdateHeadInfo)
 private:
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::message::BattleSingleHeadInfo* info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Game2Battle_UpdateHeadInfo* default_instance_;
};
// -------------------------------------------------------------------

class Game2Match_CreateTerritoryBattle : public ::google::protobuf::Message {
 public:
  Game2Match_CreateTerritoryBattle();
  virtual ~Game2Match_CreateTerritoryBattle();

  Game2Match_CreateTerritoryBattle(const Game2Match_CreateTerritoryBattle& from);

  inline Game2Match_CreateTerritoryBattle& operator=(const Game2Match_CreateTerritoryBattle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Game2Match_CreateTerritoryBattle& default_instance();

  void Swap(Game2Match_CreateTerritoryBattle* other);

  // implements Message ----------------------------------------------

  Game2Match_CreateTerritoryBattle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Game2Match_CreateTerritoryBattle& from);
  void MergeFrom(const Game2Match_CreateTerritoryBattle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.message.TBFieldInfo info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::proto::message::TBFieldInfo& info(int index) const;
  inline ::proto::message::TBFieldInfo* mutable_info(int index);
  inline ::proto::message::TBFieldInfo* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::message::TBFieldInfo >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::message::TBFieldInfo >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:proto.message.Game2Match_CreateTerritoryBattle)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::message::TBFieldInfo > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Game2Match_CreateTerritoryBattle* default_instance_;
};
// ===================================================================


// ===================================================================

// Map_SC_NavPaths

// required uint32 ID = 1;
inline bool Map_SC_NavPaths::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Map_SC_NavPaths::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Map_SC_NavPaths::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Map_SC_NavPaths::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Map_SC_NavPaths::id() const {
  return id_;
}
inline void Map_SC_NavPaths::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required float Velocity = 2;
inline bool Map_SC_NavPaths::has_velocity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Map_SC_NavPaths::set_has_velocity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Map_SC_NavPaths::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Map_SC_NavPaths::clear_velocity() {
  velocity_ = 0;
  clear_has_velocity();
}
inline float Map_SC_NavPaths::velocity() const {
  return velocity_;
}
inline void Map_SC_NavPaths::set_velocity(float value) {
  set_has_velocity();
  velocity_ = value;
}

// repeated .proto.message.Point3D paths = 3;
inline int Map_SC_NavPaths::paths_size() const {
  return paths_.size();
}
inline void Map_SC_NavPaths::clear_paths() {
  paths_.Clear();
}
inline const ::proto::message::Point3D& Map_SC_NavPaths::paths(int index) const {
  return paths_.Get(index);
}
inline ::proto::message::Point3D* Map_SC_NavPaths::mutable_paths(int index) {
  return paths_.Mutable(index);
}
inline ::proto::message::Point3D* Map_SC_NavPaths::add_paths() {
  return paths_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::Point3D >&
Map_SC_NavPaths::paths() const {
  return paths_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::Point3D >*
Map_SC_NavPaths::mutable_paths() {
  return &paths_;
}

// -------------------------------------------------------------------

// Map_CS_PlayerPositionSync

// required .proto.message.Point3D pt = 1;
inline bool Map_CS_PlayerPositionSync::has_pt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Map_CS_PlayerPositionSync::set_has_pt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Map_CS_PlayerPositionSync::clear_has_pt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Map_CS_PlayerPositionSync::clear_pt() {
  if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
  clear_has_pt();
}
inline const ::proto::message::Point3D& Map_CS_PlayerPositionSync::pt() const {
  return pt_ != NULL ? *pt_ : *default_instance_->pt_;
}
inline ::proto::message::Point3D* Map_CS_PlayerPositionSync::mutable_pt() {
  set_has_pt();
  if (pt_ == NULL) pt_ = new ::proto::message::Point3D;
  return pt_;
}
inline ::proto::message::Point3D* Map_CS_PlayerPositionSync::release_pt() {
  clear_has_pt();
  ::proto::message::Point3D* temp = pt_;
  pt_ = NULL;
  return temp;
}
inline void Map_CS_PlayerPositionSync::set_allocated_pt(::proto::message::Point3D* pt) {
  delete pt_;
  pt_ = pt;
  if (pt) {
    set_has_pt();
  } else {
    clear_has_pt();
  }
}

// required float dir = 2;
inline bool Map_CS_PlayerPositionSync::has_dir() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Map_CS_PlayerPositionSync::set_has_dir() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Map_CS_PlayerPositionSync::clear_has_dir() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Map_CS_PlayerPositionSync::clear_dir() {
  dir_ = 0;
  clear_has_dir();
}
inline float Map_CS_PlayerPositionSync::dir() const {
  return dir_;
}
inline void Map_CS_PlayerPositionSync::set_dir(float value) {
  set_has_dir();
  dir_ = value;
}

// optional bool arrival = 3;
inline bool Map_CS_PlayerPositionSync::has_arrival() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Map_CS_PlayerPositionSync::set_has_arrival() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Map_CS_PlayerPositionSync::clear_has_arrival() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Map_CS_PlayerPositionSync::clear_arrival() {
  arrival_ = false;
  clear_has_arrival();
}
inline bool Map_CS_PlayerPositionSync::arrival() const {
  return arrival_;
}
inline void Map_CS_PlayerPositionSync::set_arrival(bool value) {
  set_has_arrival();
  arrival_ = value;
}

// -------------------------------------------------------------------

// Map_SC_AddSyncPlayer

// required uint32 nPlayerId = 1;
inline bool Map_SC_AddSyncPlayer::has_nplayerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Map_SC_AddSyncPlayer::set_has_nplayerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Map_SC_AddSyncPlayer::clear_has_nplayerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Map_SC_AddSyncPlayer::clear_nplayerid() {
  nplayerid_ = 0u;
  clear_has_nplayerid();
}
inline ::google::protobuf::uint32 Map_SC_AddSyncPlayer::nplayerid() const {
  return nplayerid_;
}
inline void Map_SC_AddSyncPlayer::set_nplayerid(::google::protobuf::uint32 value) {
  set_has_nplayerid();
  nplayerid_ = value;
}

// required .proto.message.Point3D pt = 2;
inline bool Map_SC_AddSyncPlayer::has_pt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Map_SC_AddSyncPlayer::set_has_pt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Map_SC_AddSyncPlayer::clear_has_pt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Map_SC_AddSyncPlayer::clear_pt() {
  if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
  clear_has_pt();
}
inline const ::proto::message::Point3D& Map_SC_AddSyncPlayer::pt() const {
  return pt_ != NULL ? *pt_ : *default_instance_->pt_;
}
inline ::proto::message::Point3D* Map_SC_AddSyncPlayer::mutable_pt() {
  set_has_pt();
  if (pt_ == NULL) pt_ = new ::proto::message::Point3D;
  return pt_;
}
inline ::proto::message::Point3D* Map_SC_AddSyncPlayer::release_pt() {
  clear_has_pt();
  ::proto::message::Point3D* temp = pt_;
  pt_ = NULL;
  return temp;
}
inline void Map_SC_AddSyncPlayer::set_allocated_pt(::proto::message::Point3D* pt) {
  delete pt_;
  pt_ = pt;
  if (pt) {
    set_has_pt();
  } else {
    clear_has_pt();
  }
}

// required float dir = 3;
inline bool Map_SC_AddSyncPlayer::has_dir() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Map_SC_AddSyncPlayer::set_has_dir() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Map_SC_AddSyncPlayer::clear_has_dir() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Map_SC_AddSyncPlayer::clear_dir() {
  dir_ = 0;
  clear_has_dir();
}
inline float Map_SC_AddSyncPlayer::dir() const {
  return dir_;
}
inline void Map_SC_AddSyncPlayer::set_dir(float value) {
  set_has_dir();
  dir_ = value;
}

// optional string Name = 4;
inline bool Map_SC_AddSyncPlayer::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Map_SC_AddSyncPlayer::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Map_SC_AddSyncPlayer::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Map_SC_AddSyncPlayer::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Map_SC_AddSyncPlayer::name() const {
  return *name_;
}
inline void Map_SC_AddSyncPlayer::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Map_SC_AddSyncPlayer::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Map_SC_AddSyncPlayer::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Map_SC_AddSyncPlayer::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Map_SC_AddSyncPlayer::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Map_SC_AddSyncPlayer::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 MaxHP = 5;
inline bool Map_SC_AddSyncPlayer::has_maxhp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Map_SC_AddSyncPlayer::set_has_maxhp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Map_SC_AddSyncPlayer::clear_has_maxhp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Map_SC_AddSyncPlayer::clear_maxhp() {
  maxhp_ = 0;
  clear_has_maxhp();
}
inline ::google::protobuf::int32 Map_SC_AddSyncPlayer::maxhp() const {
  return maxhp_;
}
inline void Map_SC_AddSyncPlayer::set_maxhp(::google::protobuf::int32 value) {
  set_has_maxhp();
  maxhp_ = value;
}

// optional int32 CurHP = 6;
inline bool Map_SC_AddSyncPlayer::has_curhp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Map_SC_AddSyncPlayer::set_has_curhp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Map_SC_AddSyncPlayer::clear_has_curhp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Map_SC_AddSyncPlayer::clear_curhp() {
  curhp_ = 0;
  clear_has_curhp();
}
inline ::google::protobuf::int32 Map_SC_AddSyncPlayer::curhp() const {
  return curhp_;
}
inline void Map_SC_AddSyncPlayer::set_curhp(::google::protobuf::int32 value) {
  set_has_curhp();
  curhp_ = value;
}

// optional int32 Level = 7;
inline bool Map_SC_AddSyncPlayer::has_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Map_SC_AddSyncPlayer::set_has_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Map_SC_AddSyncPlayer::clear_has_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Map_SC_AddSyncPlayer::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 Map_SC_AddSyncPlayer::level() const {
  return level_;
}
inline void Map_SC_AddSyncPlayer::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// repeated .proto.message.Equip equip_list = 8;
inline int Map_SC_AddSyncPlayer::equip_list_size() const {
  return equip_list_.size();
}
inline void Map_SC_AddSyncPlayer::clear_equip_list() {
  equip_list_.Clear();
}
inline const ::proto::message::Equip& Map_SC_AddSyncPlayer::equip_list(int index) const {
  return equip_list_.Get(index);
}
inline ::proto::message::Equip* Map_SC_AddSyncPlayer::mutable_equip_list(int index) {
  return equip_list_.Mutable(index);
}
inline ::proto::message::Equip* Map_SC_AddSyncPlayer::add_equip_list() {
  return equip_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::Equip >&
Map_SC_AddSyncPlayer::equip_list() const {
  return equip_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::Equip >*
Map_SC_AddSyncPlayer::mutable_equip_list() {
  return &equip_list_;
}

// optional int32 career = 9;
inline bool Map_SC_AddSyncPlayer::has_career() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Map_SC_AddSyncPlayer::set_has_career() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Map_SC_AddSyncPlayer::clear_has_career() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Map_SC_AddSyncPlayer::clear_career() {
  career_ = 0;
  clear_has_career();
}
inline ::google::protobuf::int32 Map_SC_AddSyncPlayer::career() const {
  return career_;
}
inline void Map_SC_AddSyncPlayer::set_career(::google::protobuf::int32 value) {
  set_has_career();
  career_ = value;
}

// optional int32 Velocity = 10;
inline bool Map_SC_AddSyncPlayer::has_velocity() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Map_SC_AddSyncPlayer::set_has_velocity() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Map_SC_AddSyncPlayer::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Map_SC_AddSyncPlayer::clear_velocity() {
  velocity_ = 0;
  clear_has_velocity();
}
inline ::google::protobuf::int32 Map_SC_AddSyncPlayer::velocity() const {
  return velocity_;
}
inline void Map_SC_AddSyncPlayer::set_velocity(::google::protobuf::int32 value) {
  set_has_velocity();
  velocity_ = value;
}

// optional int32 titleID = 11;
inline bool Map_SC_AddSyncPlayer::has_titleid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Map_SC_AddSyncPlayer::set_has_titleid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Map_SC_AddSyncPlayer::clear_has_titleid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Map_SC_AddSyncPlayer::clear_titleid() {
  titleid_ = 0;
  clear_has_titleid();
}
inline ::google::protobuf::int32 Map_SC_AddSyncPlayer::titleid() const {
  return titleid_;
}
inline void Map_SC_AddSyncPlayer::set_titleid(::google::protobuf::int32 value) {
  set_has_titleid();
  titleid_ = value;
}

// optional int32 layer = 12;
inline bool Map_SC_AddSyncPlayer::has_layer() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Map_SC_AddSyncPlayer::set_has_layer() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Map_SC_AddSyncPlayer::clear_has_layer() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Map_SC_AddSyncPlayer::clear_layer() {
  layer_ = 0;
  clear_has_layer();
}
inline ::google::protobuf::int32 Map_SC_AddSyncPlayer::layer() const {
  return layer_;
}
inline void Map_SC_AddSyncPlayer::set_layer(::google::protobuf::int32 value) {
  set_has_layer();
  layer_ = value;
}

// optional string titlename = 13;
inline bool Map_SC_AddSyncPlayer::has_titlename() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Map_SC_AddSyncPlayer::set_has_titlename() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Map_SC_AddSyncPlayer::clear_has_titlename() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Map_SC_AddSyncPlayer::clear_titlename() {
  if (titlename_ != &::google::protobuf::internal::kEmptyString) {
    titlename_->clear();
  }
  clear_has_titlename();
}
inline const ::std::string& Map_SC_AddSyncPlayer::titlename() const {
  return *titlename_;
}
inline void Map_SC_AddSyncPlayer::set_titlename(const ::std::string& value) {
  set_has_titlename();
  if (titlename_ == &::google::protobuf::internal::kEmptyString) {
    titlename_ = new ::std::string;
  }
  titlename_->assign(value);
}
inline void Map_SC_AddSyncPlayer::set_titlename(const char* value) {
  set_has_titlename();
  if (titlename_ == &::google::protobuf::internal::kEmptyString) {
    titlename_ = new ::std::string;
  }
  titlename_->assign(value);
}
inline void Map_SC_AddSyncPlayer::set_titlename(const char* value, size_t size) {
  set_has_titlename();
  if (titlename_ == &::google::protobuf::internal::kEmptyString) {
    titlename_ = new ::std::string;
  }
  titlename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Map_SC_AddSyncPlayer::mutable_titlename() {
  set_has_titlename();
  if (titlename_ == &::google::protobuf::internal::kEmptyString) {
    titlename_ = new ::std::string;
  }
  return titlename_;
}
inline ::std::string* Map_SC_AddSyncPlayer::release_titlename() {
  clear_has_titlename();
  if (titlename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = titlename_;
    titlename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Map_SC_AddSyncPlayer::set_allocated_titlename(::std::string* titlename) {
  if (titlename_ != &::google::protobuf::internal::kEmptyString) {
    delete titlename_;
  }
  if (titlename) {
    set_has_titlename();
    titlename_ = titlename;
  } else {
    clear_has_titlename();
    titlename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 titleishide = 14;
inline bool Map_SC_AddSyncPlayer::has_titleishide() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Map_SC_AddSyncPlayer::set_has_titleishide() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Map_SC_AddSyncPlayer::clear_has_titleishide() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Map_SC_AddSyncPlayer::clear_titleishide() {
  titleishide_ = 0;
  clear_has_titleishide();
}
inline ::google::protobuf::int32 Map_SC_AddSyncPlayer::titleishide() const {
  return titleishide_;
}
inline void Map_SC_AddSyncPlayer::set_titleishide(::google::protobuf::int32 value) {
  set_has_titleishide();
  titleishide_ = value;
}

// repeated int32 skill_id_list = 15;
inline int Map_SC_AddSyncPlayer::skill_id_list_size() const {
  return skill_id_list_.size();
}
inline void Map_SC_AddSyncPlayer::clear_skill_id_list() {
  skill_id_list_.Clear();
}
inline ::google::protobuf::int32 Map_SC_AddSyncPlayer::skill_id_list(int index) const {
  return skill_id_list_.Get(index);
}
inline void Map_SC_AddSyncPlayer::set_skill_id_list(int index, ::google::protobuf::int32 value) {
  skill_id_list_.Set(index, value);
}
inline void Map_SC_AddSyncPlayer::add_skill_id_list(::google::protobuf::int32 value) {
  skill_id_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Map_SC_AddSyncPlayer::skill_id_list() const {
  return skill_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Map_SC_AddSyncPlayer::mutable_skill_id_list() {
  return &skill_id_list_;
}

// optional uint64 nPlayeruuid = 16;
inline bool Map_SC_AddSyncPlayer::has_nplayeruuid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Map_SC_AddSyncPlayer::set_has_nplayeruuid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Map_SC_AddSyncPlayer::clear_has_nplayeruuid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Map_SC_AddSyncPlayer::clear_nplayeruuid() {
  nplayeruuid_ = GOOGLE_ULONGLONG(0);
  clear_has_nplayeruuid();
}
inline ::google::protobuf::uint64 Map_SC_AddSyncPlayer::nplayeruuid() const {
  return nplayeruuid_;
}
inline void Map_SC_AddSyncPlayer::set_nplayeruuid(::google::protobuf::uint64 value) {
  set_has_nplayeruuid();
  nplayeruuid_ = value;
}

// optional uint64 nGuildid = 17;
inline bool Map_SC_AddSyncPlayer::has_nguildid() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Map_SC_AddSyncPlayer::set_has_nguildid() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Map_SC_AddSyncPlayer::clear_has_nguildid() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Map_SC_AddSyncPlayer::clear_nguildid() {
  nguildid_ = GOOGLE_ULONGLONG(0);
  clear_has_nguildid();
}
inline ::google::protobuf::uint64 Map_SC_AddSyncPlayer::nguildid() const {
  return nguildid_;
}
inline void Map_SC_AddSyncPlayer::set_nguildid(::google::protobuf::uint64 value) {
  set_has_nguildid();
  nguildid_ = value;
}

// optional string GuildName = 18;
inline bool Map_SC_AddSyncPlayer::has_guildname() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Map_SC_AddSyncPlayer::set_has_guildname() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Map_SC_AddSyncPlayer::clear_has_guildname() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Map_SC_AddSyncPlayer::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    guildname_->clear();
  }
  clear_has_guildname();
}
inline const ::std::string& Map_SC_AddSyncPlayer::guildname() const {
  return *guildname_;
}
inline void Map_SC_AddSyncPlayer::set_guildname(const ::std::string& value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void Map_SC_AddSyncPlayer::set_guildname(const char* value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void Map_SC_AddSyncPlayer::set_guildname(const char* value, size_t size) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Map_SC_AddSyncPlayer::mutable_guildname() {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  return guildname_;
}
inline ::std::string* Map_SC_AddSyncPlayer::release_guildname() {
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Map_SC_AddSyncPlayer::set_allocated_guildname(::std::string* guildname) {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (guildname) {
    set_has_guildname();
    guildname_ = guildname;
  } else {
    clear_has_guildname();
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Map_SC_ChangeTttle

// required uint32 nId = 1;
inline bool Map_SC_ChangeTttle::has_nid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Map_SC_ChangeTttle::set_has_nid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Map_SC_ChangeTttle::clear_has_nid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Map_SC_ChangeTttle::clear_nid() {
  nid_ = 0u;
  clear_has_nid();
}
inline ::google::protobuf::uint32 Map_SC_ChangeTttle::nid() const {
  return nid_;
}
inline void Map_SC_ChangeTttle::set_nid(::google::protobuf::uint32 value) {
  set_has_nid();
  nid_ = value;
}

// required int32 titleID = 2;
inline bool Map_SC_ChangeTttle::has_titleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Map_SC_ChangeTttle::set_has_titleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Map_SC_ChangeTttle::clear_has_titleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Map_SC_ChangeTttle::clear_titleid() {
  titleid_ = 0;
  clear_has_titleid();
}
inline ::google::protobuf::int32 Map_SC_ChangeTttle::titleid() const {
  return titleid_;
}
inline void Map_SC_ChangeTttle::set_titleid(::google::protobuf::int32 value) {
  set_has_titleid();
  titleid_ = value;
}

// optional string titlename = 3;
inline bool Map_SC_ChangeTttle::has_titlename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Map_SC_ChangeTttle::set_has_titlename() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Map_SC_ChangeTttle::clear_has_titlename() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Map_SC_ChangeTttle::clear_titlename() {
  if (titlename_ != &::google::protobuf::internal::kEmptyString) {
    titlename_->clear();
  }
  clear_has_titlename();
}
inline const ::std::string& Map_SC_ChangeTttle::titlename() const {
  return *titlename_;
}
inline void Map_SC_ChangeTttle::set_titlename(const ::std::string& value) {
  set_has_titlename();
  if (titlename_ == &::google::protobuf::internal::kEmptyString) {
    titlename_ = new ::std::string;
  }
  titlename_->assign(value);
}
inline void Map_SC_ChangeTttle::set_titlename(const char* value) {
  set_has_titlename();
  if (titlename_ == &::google::protobuf::internal::kEmptyString) {
    titlename_ = new ::std::string;
  }
  titlename_->assign(value);
}
inline void Map_SC_ChangeTttle::set_titlename(const char* value, size_t size) {
  set_has_titlename();
  if (titlename_ == &::google::protobuf::internal::kEmptyString) {
    titlename_ = new ::std::string;
  }
  titlename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Map_SC_ChangeTttle::mutable_titlename() {
  set_has_titlename();
  if (titlename_ == &::google::protobuf::internal::kEmptyString) {
    titlename_ = new ::std::string;
  }
  return titlename_;
}
inline ::std::string* Map_SC_ChangeTttle::release_titlename() {
  clear_has_titlename();
  if (titlename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = titlename_;
    titlename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Map_SC_ChangeTttle::set_allocated_titlename(::std::string* titlename) {
  if (titlename_ != &::google::protobuf::internal::kEmptyString) {
    delete titlename_;
  }
  if (titlename) {
    set_has_titlename();
    titlename_ = titlename;
  } else {
    clear_has_titlename();
    titlename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 ishide = 4;
inline bool Map_SC_ChangeTttle::has_ishide() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Map_SC_ChangeTttle::set_has_ishide() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Map_SC_ChangeTttle::clear_has_ishide() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Map_SC_ChangeTttle::clear_ishide() {
  ishide_ = 0;
  clear_has_ishide();
}
inline ::google::protobuf::int32 Map_SC_ChangeTttle::ishide() const {
  return ishide_;
}
inline void Map_SC_ChangeTttle::set_ishide(::google::protobuf::int32 value) {
  set_has_ishide();
  ishide_ = value;
}

// -------------------------------------------------------------------

// Map_SC_ChangeEquip

// required uint32 nId = 1;
inline bool Map_SC_ChangeEquip::has_nid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Map_SC_ChangeEquip::set_has_nid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Map_SC_ChangeEquip::clear_has_nid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Map_SC_ChangeEquip::clear_nid() {
  nid_ = 0u;
  clear_has_nid();
}
inline ::google::protobuf::uint32 Map_SC_ChangeEquip::nid() const {
  return nid_;
}
inline void Map_SC_ChangeEquip::set_nid(::google::protobuf::uint32 value) {
  set_has_nid();
  nid_ = value;
}

// repeated .proto.message.Equip equip_list = 2;
inline int Map_SC_ChangeEquip::equip_list_size() const {
  return equip_list_.size();
}
inline void Map_SC_ChangeEquip::clear_equip_list() {
  equip_list_.Clear();
}
inline const ::proto::message::Equip& Map_SC_ChangeEquip::equip_list(int index) const {
  return equip_list_.Get(index);
}
inline ::proto::message::Equip* Map_SC_ChangeEquip::mutable_equip_list(int index) {
  return equip_list_.Mutable(index);
}
inline ::proto::message::Equip* Map_SC_ChangeEquip::add_equip_list() {
  return equip_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::Equip >&
Map_SC_ChangeEquip::equip_list() const {
  return equip_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::Equip >*
Map_SC_ChangeEquip::mutable_equip_list() {
  return &equip_list_;
}

// -------------------------------------------------------------------

// Map_SC_DelSync

// required uint32 nPlayerId = 1;
inline bool Map_SC_DelSync::has_nplayerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Map_SC_DelSync::set_has_nplayerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Map_SC_DelSync::clear_has_nplayerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Map_SC_DelSync::clear_nplayerid() {
  nplayerid_ = 0u;
  clear_has_nplayerid();
}
inline ::google::protobuf::uint32 Map_SC_DelSync::nplayerid() const {
  return nplayerid_;
}
inline void Map_SC_DelSync::set_nplayerid(::google::protobuf::uint32 value) {
  set_has_nplayerid();
  nplayerid_ = value;
}

// -------------------------------------------------------------------

// Map_SC_Move

// required uint32 nId = 1;
inline bool Map_SC_Move::has_nid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Map_SC_Move::set_has_nid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Map_SC_Move::clear_has_nid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Map_SC_Move::clear_nid() {
  nid_ = 0u;
  clear_has_nid();
}
inline ::google::protobuf::uint32 Map_SC_Move::nid() const {
  return nid_;
}
inline void Map_SC_Move::set_nid(::google::protobuf::uint32 value) {
  set_has_nid();
  nid_ = value;
}

// required .proto.message.Point3D pt = 2;
inline bool Map_SC_Move::has_pt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Map_SC_Move::set_has_pt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Map_SC_Move::clear_has_pt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Map_SC_Move::clear_pt() {
  if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
  clear_has_pt();
}
inline const ::proto::message::Point3D& Map_SC_Move::pt() const {
  return pt_ != NULL ? *pt_ : *default_instance_->pt_;
}
inline ::proto::message::Point3D* Map_SC_Move::mutable_pt() {
  set_has_pt();
  if (pt_ == NULL) pt_ = new ::proto::message::Point3D;
  return pt_;
}
inline ::proto::message::Point3D* Map_SC_Move::release_pt() {
  clear_has_pt();
  ::proto::message::Point3D* temp = pt_;
  pt_ = NULL;
  return temp;
}
inline void Map_SC_Move::set_allocated_pt(::proto::message::Point3D* pt) {
  delete pt_;
  pt_ = pt;
  if (pt) {
    set_has_pt();
  } else {
    clear_has_pt();
  }
}

// required float dir = 3;
inline bool Map_SC_Move::has_dir() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Map_SC_Move::set_has_dir() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Map_SC_Move::clear_has_dir() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Map_SC_Move::clear_dir() {
  dir_ = 0;
  clear_has_dir();
}
inline float Map_SC_Move::dir() const {
  return dir_;
}
inline void Map_SC_Move::set_dir(float value) {
  set_has_dir();
  dir_ = value;
}

// required float velocity = 4;
inline bool Map_SC_Move::has_velocity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Map_SC_Move::set_has_velocity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Map_SC_Move::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Map_SC_Move::clear_velocity() {
  velocity_ = 0;
  clear_has_velocity();
}
inline float Map_SC_Move::velocity() const {
  return velocity_;
}
inline void Map_SC_Move::set_velocity(float value) {
  set_has_velocity();
  velocity_ = value;
}

// optional bool arrival = 5;
inline bool Map_SC_Move::has_arrival() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Map_SC_Move::set_has_arrival() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Map_SC_Move::clear_has_arrival() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Map_SC_Move::clear_arrival() {
  arrival_ = false;
  clear_has_arrival();
}
inline bool Map_SC_Move::arrival() const {
  return arrival_;
}
inline void Map_SC_Move::set_arrival(bool value) {
  set_has_arrival();
  arrival_ = value;
}

// -------------------------------------------------------------------

// Map_SC_CheckPosition

// required uint32 nId = 1;
inline bool Map_SC_CheckPosition::has_nid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Map_SC_CheckPosition::set_has_nid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Map_SC_CheckPosition::clear_has_nid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Map_SC_CheckPosition::clear_nid() {
  nid_ = 0u;
  clear_has_nid();
}
inline ::google::protobuf::uint32 Map_SC_CheckPosition::nid() const {
  return nid_;
}
inline void Map_SC_CheckPosition::set_nid(::google::protobuf::uint32 value) {
  set_has_nid();
  nid_ = value;
}

// required .proto.message.Point3D pt = 2;
inline bool Map_SC_CheckPosition::has_pt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Map_SC_CheckPosition::set_has_pt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Map_SC_CheckPosition::clear_has_pt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Map_SC_CheckPosition::clear_pt() {
  if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
  clear_has_pt();
}
inline const ::proto::message::Point3D& Map_SC_CheckPosition::pt() const {
  return pt_ != NULL ? *pt_ : *default_instance_->pt_;
}
inline ::proto::message::Point3D* Map_SC_CheckPosition::mutable_pt() {
  set_has_pt();
  if (pt_ == NULL) pt_ = new ::proto::message::Point3D;
  return pt_;
}
inline ::proto::message::Point3D* Map_SC_CheckPosition::release_pt() {
  clear_has_pt();
  ::proto::message::Point3D* temp = pt_;
  pt_ = NULL;
  return temp;
}
inline void Map_SC_CheckPosition::set_allocated_pt(::proto::message::Point3D* pt) {
  delete pt_;
  pt_ = pt;
  if (pt) {
    set_has_pt();
  } else {
    clear_has_pt();
  }
}

// required float dir = 3;
inline bool Map_SC_CheckPosition::has_dir() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Map_SC_CheckPosition::set_has_dir() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Map_SC_CheckPosition::clear_has_dir() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Map_SC_CheckPosition::clear_dir() {
  dir_ = 0;
  clear_has_dir();
}
inline float Map_SC_CheckPosition::dir() const {
  return dir_;
}
inline void Map_SC_CheckPosition::set_dir(float value) {
  set_has_dir();
  dir_ = value;
}

// -------------------------------------------------------------------

// Map_SC_AddSyncMonster

// required uint32 ID = 1;
inline bool Map_SC_AddSyncMonster::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Map_SC_AddSyncMonster::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Map_SC_AddSyncMonster::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Map_SC_AddSyncMonster::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Map_SC_AddSyncMonster::id() const {
  return id_;
}
inline void Map_SC_AddSyncMonster::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 ProID = 2;
inline bool Map_SC_AddSyncMonster::has_proid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Map_SC_AddSyncMonster::set_has_proid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Map_SC_AddSyncMonster::clear_has_proid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Map_SC_AddSyncMonster::clear_proid() {
  proid_ = 0u;
  clear_has_proid();
}
inline ::google::protobuf::uint32 Map_SC_AddSyncMonster::proid() const {
  return proid_;
}
inline void Map_SC_AddSyncMonster::set_proid(::google::protobuf::uint32 value) {
  set_has_proid();
  proid_ = value;
}

// required .proto.message.Point3D pt = 3;
inline bool Map_SC_AddSyncMonster::has_pt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Map_SC_AddSyncMonster::set_has_pt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Map_SC_AddSyncMonster::clear_has_pt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Map_SC_AddSyncMonster::clear_pt() {
  if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
  clear_has_pt();
}
inline const ::proto::message::Point3D& Map_SC_AddSyncMonster::pt() const {
  return pt_ != NULL ? *pt_ : *default_instance_->pt_;
}
inline ::proto::message::Point3D* Map_SC_AddSyncMonster::mutable_pt() {
  set_has_pt();
  if (pt_ == NULL) pt_ = new ::proto::message::Point3D;
  return pt_;
}
inline ::proto::message::Point3D* Map_SC_AddSyncMonster::release_pt() {
  clear_has_pt();
  ::proto::message::Point3D* temp = pt_;
  pt_ = NULL;
  return temp;
}
inline void Map_SC_AddSyncMonster::set_allocated_pt(::proto::message::Point3D* pt) {
  delete pt_;
  pt_ = pt;
  if (pt) {
    set_has_pt();
  } else {
    clear_has_pt();
  }
}

// required float dir = 4;
inline bool Map_SC_AddSyncMonster::has_dir() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Map_SC_AddSyncMonster::set_has_dir() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Map_SC_AddSyncMonster::clear_has_dir() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Map_SC_AddSyncMonster::clear_dir() {
  dir_ = 0;
  clear_has_dir();
}
inline float Map_SC_AddSyncMonster::dir() const {
  return dir_;
}
inline void Map_SC_AddSyncMonster::set_dir(float value) {
  set_has_dir();
  dir_ = value;
}

// optional int32 Velocity = 5;
inline bool Map_SC_AddSyncMonster::has_velocity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Map_SC_AddSyncMonster::set_has_velocity() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Map_SC_AddSyncMonster::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Map_SC_AddSyncMonster::clear_velocity() {
  velocity_ = 0;
  clear_has_velocity();
}
inline ::google::protobuf::int32 Map_SC_AddSyncMonster::velocity() const {
  return velocity_;
}
inline void Map_SC_AddSyncMonster::set_velocity(::google::protobuf::int32 value) {
  set_has_velocity();
  velocity_ = value;
}

// optional int32 MaxHP = 6;
inline bool Map_SC_AddSyncMonster::has_maxhp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Map_SC_AddSyncMonster::set_has_maxhp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Map_SC_AddSyncMonster::clear_has_maxhp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Map_SC_AddSyncMonster::clear_maxhp() {
  maxhp_ = 0;
  clear_has_maxhp();
}
inline ::google::protobuf::int32 Map_SC_AddSyncMonster::maxhp() const {
  return maxhp_;
}
inline void Map_SC_AddSyncMonster::set_maxhp(::google::protobuf::int32 value) {
  set_has_maxhp();
  maxhp_ = value;
}

// optional int32 CurHP = 7;
inline bool Map_SC_AddSyncMonster::has_curhp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Map_SC_AddSyncMonster::set_has_curhp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Map_SC_AddSyncMonster::clear_has_curhp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Map_SC_AddSyncMonster::clear_curhp() {
  curhp_ = 0;
  clear_has_curhp();
}
inline ::google::protobuf::int32 Map_SC_AddSyncMonster::curhp() const {
  return curhp_;
}
inline void Map_SC_AddSyncMonster::set_curhp(::google::protobuf::int32 value) {
  set_has_curhp();
  curhp_ = value;
}

// optional int32 max_tp = 8;
inline bool Map_SC_AddSyncMonster::has_max_tp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Map_SC_AddSyncMonster::set_has_max_tp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Map_SC_AddSyncMonster::clear_has_max_tp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Map_SC_AddSyncMonster::clear_max_tp() {
  max_tp_ = 0;
  clear_has_max_tp();
}
inline ::google::protobuf::int32 Map_SC_AddSyncMonster::max_tp() const {
  return max_tp_;
}
inline void Map_SC_AddSyncMonster::set_max_tp(::google::protobuf::int32 value) {
  set_has_max_tp();
  max_tp_ = value;
}

// optional int32 cur_tp = 9;
inline bool Map_SC_AddSyncMonster::has_cur_tp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Map_SC_AddSyncMonster::set_has_cur_tp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Map_SC_AddSyncMonster::clear_has_cur_tp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Map_SC_AddSyncMonster::clear_cur_tp() {
  cur_tp_ = 0;
  clear_has_cur_tp();
}
inline ::google::protobuf::int32 Map_SC_AddSyncMonster::cur_tp() const {
  return cur_tp_;
}
inline void Map_SC_AddSyncMonster::set_cur_tp(::google::protobuf::int32 value) {
  set_has_cur_tp();
  cur_tp_ = value;
}

// optional int32 cmap = 10;
inline bool Map_SC_AddSyncMonster::has_cmap() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Map_SC_AddSyncMonster::set_has_cmap() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Map_SC_AddSyncMonster::clear_has_cmap() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Map_SC_AddSyncMonster::clear_cmap() {
  cmap_ = 0;
  clear_has_cmap();
}
inline ::google::protobuf::int32 Map_SC_AddSyncMonster::cmap() const {
  return cmap_;
}
inline void Map_SC_AddSyncMonster::set_cmap(::google::protobuf::int32 value) {
  set_has_cmap();
  cmap_ = value;
}

// -------------------------------------------------------------------

// Map_CS_SpeelBegin

// required uint32 Layer = 1;
inline bool Map_CS_SpeelBegin::has_layer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Map_CS_SpeelBegin::set_has_layer() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Map_CS_SpeelBegin::clear_has_layer() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Map_CS_SpeelBegin::clear_layer() {
  layer_ = 0u;
  clear_has_layer();
}
inline ::google::protobuf::uint32 Map_CS_SpeelBegin::layer() const {
  return layer_;
}
inline void Map_CS_SpeelBegin::set_layer(::google::protobuf::uint32 value) {
  set_has_layer();
  layer_ = value;
}

// optional int32 TriggerId = 2;
inline bool Map_CS_SpeelBegin::has_triggerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Map_CS_SpeelBegin::set_has_triggerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Map_CS_SpeelBegin::clear_has_triggerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Map_CS_SpeelBegin::clear_triggerid() {
  triggerid_ = 0;
  clear_has_triggerid();
}
inline ::google::protobuf::int32 Map_CS_SpeelBegin::triggerid() const {
  return triggerid_;
}
inline void Map_CS_SpeelBegin::set_triggerid(::google::protobuf::int32 value) {
  set_has_triggerid();
  triggerid_ = value;
}

// optional uint32 TriggerType = 3;
inline bool Map_CS_SpeelBegin::has_triggertype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Map_CS_SpeelBegin::set_has_triggertype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Map_CS_SpeelBegin::clear_has_triggertype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Map_CS_SpeelBegin::clear_triggertype() {
  triggertype_ = 0u;
  clear_has_triggertype();
}
inline ::google::protobuf::uint32 Map_CS_SpeelBegin::triggertype() const {
  return triggertype_;
}
inline void Map_CS_SpeelBegin::set_triggertype(::google::protobuf::uint32 value) {
  set_has_triggertype();
  triggertype_ = value;
}

// -------------------------------------------------------------------

// Map_CS_SpeelEnd

// required .proto.message.Point3D pt = 1;
inline bool Map_CS_SpeelEnd::has_pt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Map_CS_SpeelEnd::set_has_pt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Map_CS_SpeelEnd::clear_has_pt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Map_CS_SpeelEnd::clear_pt() {
  if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
  clear_has_pt();
}
inline const ::proto::message::Point3D& Map_CS_SpeelEnd::pt() const {
  return pt_ != NULL ? *pt_ : *default_instance_->pt_;
}
inline ::proto::message::Point3D* Map_CS_SpeelEnd::mutable_pt() {
  set_has_pt();
  if (pt_ == NULL) pt_ = new ::proto::message::Point3D;
  return pt_;
}
inline ::proto::message::Point3D* Map_CS_SpeelEnd::release_pt() {
  clear_has_pt();
  ::proto::message::Point3D* temp = pt_;
  pt_ = NULL;
  return temp;
}
inline void Map_CS_SpeelEnd::set_allocated_pt(::proto::message::Point3D* pt) {
  delete pt_;
  pt_ = pt;
  if (pt) {
    set_has_pt();
  } else {
    clear_has_pt();
  }
}

// -------------------------------------------------------------------

// Map_SC_SpeelBegin

// required uint32 PlyId = 1;
inline bool Map_SC_SpeelBegin::has_plyid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Map_SC_SpeelBegin::set_has_plyid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Map_SC_SpeelBegin::clear_has_plyid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Map_SC_SpeelBegin::clear_plyid() {
  plyid_ = 0u;
  clear_has_plyid();
}
inline ::google::protobuf::uint32 Map_SC_SpeelBegin::plyid() const {
  return plyid_;
}
inline void Map_SC_SpeelBegin::set_plyid(::google::protobuf::uint32 value) {
  set_has_plyid();
  plyid_ = value;
}

// required uint32 Layer = 2;
inline bool Map_SC_SpeelBegin::has_layer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Map_SC_SpeelBegin::set_has_layer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Map_SC_SpeelBegin::clear_has_layer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Map_SC_SpeelBegin::clear_layer() {
  layer_ = 0u;
  clear_has_layer();
}
inline ::google::protobuf::uint32 Map_SC_SpeelBegin::layer() const {
  return layer_;
}
inline void Map_SC_SpeelBegin::set_layer(::google::protobuf::uint32 value) {
  set_has_layer();
  layer_ = value;
}

// optional int32 TriggerId = 3;
inline bool Map_SC_SpeelBegin::has_triggerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Map_SC_SpeelBegin::set_has_triggerid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Map_SC_SpeelBegin::clear_has_triggerid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Map_SC_SpeelBegin::clear_triggerid() {
  triggerid_ = 0;
  clear_has_triggerid();
}
inline ::google::protobuf::int32 Map_SC_SpeelBegin::triggerid() const {
  return triggerid_;
}
inline void Map_SC_SpeelBegin::set_triggerid(::google::protobuf::int32 value) {
  set_has_triggerid();
  triggerid_ = value;
}

// optional uint32 TriggerType = 4;
inline bool Map_SC_SpeelBegin::has_triggertype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Map_SC_SpeelBegin::set_has_triggertype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Map_SC_SpeelBegin::clear_has_triggertype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Map_SC_SpeelBegin::clear_triggertype() {
  triggertype_ = 0u;
  clear_has_triggertype();
}
inline ::google::protobuf::uint32 Map_SC_SpeelBegin::triggertype() const {
  return triggertype_;
}
inline void Map_SC_SpeelBegin::set_triggertype(::google::protobuf::uint32 value) {
  set_has_triggertype();
  triggertype_ = value;
}

// -------------------------------------------------------------------

// Map_CS_ClientLoadOK

// -------------------------------------------------------------------

// Map_SC_ChangeMap

// required uint32 MapID = 1;
inline bool Map_SC_ChangeMap::has_mapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Map_SC_ChangeMap::set_has_mapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Map_SC_ChangeMap::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Map_SC_ChangeMap::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 Map_SC_ChangeMap::mapid() const {
  return mapid_;
}
inline void Map_SC_ChangeMap::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
}

// optional .proto.message.Point3D Pt = 3;
inline bool Map_SC_ChangeMap::has_pt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Map_SC_ChangeMap::set_has_pt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Map_SC_ChangeMap::clear_has_pt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Map_SC_ChangeMap::clear_pt() {
  if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
  clear_has_pt();
}
inline const ::proto::message::Point3D& Map_SC_ChangeMap::pt() const {
  return pt_ != NULL ? *pt_ : *default_instance_->pt_;
}
inline ::proto::message::Point3D* Map_SC_ChangeMap::mutable_pt() {
  set_has_pt();
  if (pt_ == NULL) pt_ = new ::proto::message::Point3D;
  return pt_;
}
inline ::proto::message::Point3D* Map_SC_ChangeMap::release_pt() {
  clear_has_pt();
  ::proto::message::Point3D* temp = pt_;
  pt_ = NULL;
  return temp;
}
inline void Map_SC_ChangeMap::set_allocated_pt(::proto::message::Point3D* pt) {
  delete pt_;
  pt_ = pt;
  if (pt) {
    set_has_pt();
  } else {
    clear_has_pt();
  }
}

// optional float Dir = 4;
inline bool Map_SC_ChangeMap::has_dir() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Map_SC_ChangeMap::set_has_dir() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Map_SC_ChangeMap::clear_has_dir() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Map_SC_ChangeMap::clear_dir() {
  dir_ = 0;
  clear_has_dir();
}
inline float Map_SC_ChangeMap::dir() const {
  return dir_;
}
inline void Map_SC_ChangeMap::set_dir(float value) {
  set_has_dir();
  dir_ = value;
}

// optional int32 Layer = 5;
inline bool Map_SC_ChangeMap::has_layer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Map_SC_ChangeMap::set_has_layer() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Map_SC_ChangeMap::clear_has_layer() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Map_SC_ChangeMap::clear_layer() {
  layer_ = 0;
  clear_has_layer();
}
inline ::google::protobuf::int32 Map_SC_ChangeMap::layer() const {
  return layer_;
}
inline void Map_SC_ChangeMap::set_layer(::google::protobuf::int32 value) {
  set_has_layer();
  layer_ = value;
}

// -------------------------------------------------------------------

// Map_CS_ChangeMapOK

// optional uint32 MapID = 1;
inline bool Map_CS_ChangeMapOK::has_mapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Map_CS_ChangeMapOK::set_has_mapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Map_CS_ChangeMapOK::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Map_CS_ChangeMapOK::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 Map_CS_ChangeMapOK::mapid() const {
  return mapid_;
}
inline void Map_CS_ChangeMapOK::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
}

// -------------------------------------------------------------------

// Map_CS_ReqChangeMap

// optional uint32 MapID = 1;
inline bool Map_CS_ReqChangeMap::has_mapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Map_CS_ReqChangeMap::set_has_mapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Map_CS_ReqChangeMap::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Map_CS_ReqChangeMap::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 Map_CS_ReqChangeMap::mapid() const {
  return mapid_;
}
inline void Map_CS_ReqChangeMap::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
}

// optional uint32 BranchId = 2;
inline bool Map_CS_ReqChangeMap::has_branchid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Map_CS_ReqChangeMap::set_has_branchid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Map_CS_ReqChangeMap::clear_has_branchid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Map_CS_ReqChangeMap::clear_branchid() {
  branchid_ = 0u;
  clear_has_branchid();
}
inline ::google::protobuf::uint32 Map_CS_ReqChangeMap::branchid() const {
  return branchid_;
}
inline void Map_CS_ReqChangeMap::set_branchid(::google::protobuf::uint32 value) {
  set_has_branchid();
  branchid_ = value;
}

// -------------------------------------------------------------------

// Map_CS_EnterSceneArea

// required uint32 SceneAreaId = 1;
inline bool Map_CS_EnterSceneArea::has_sceneareaid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Map_CS_EnterSceneArea::set_has_sceneareaid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Map_CS_EnterSceneArea::clear_has_sceneareaid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Map_CS_EnterSceneArea::clear_sceneareaid() {
  sceneareaid_ = 0u;
  clear_has_sceneareaid();
}
inline ::google::protobuf::uint32 Map_CS_EnterSceneArea::sceneareaid() const {
  return sceneareaid_;
}
inline void Map_CS_EnterSceneArea::set_sceneareaid(::google::protobuf::uint32 value) {
  set_has_sceneareaid();
  sceneareaid_ = value;
}

// -------------------------------------------------------------------

// Map_CS_LeaveSceneArea

// required uint32 SceneAreaId = 1;
inline bool Map_CS_LeaveSceneArea::has_sceneareaid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Map_CS_LeaveSceneArea::set_has_sceneareaid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Map_CS_LeaveSceneArea::clear_has_sceneareaid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Map_CS_LeaveSceneArea::clear_sceneareaid() {
  sceneareaid_ = 0u;
  clear_has_sceneareaid();
}
inline ::google::protobuf::uint32 Map_CS_LeaveSceneArea::sceneareaid() const {
  return sceneareaid_;
}
inline void Map_CS_LeaveSceneArea::set_sceneareaid(::google::protobuf::uint32 value) {
  set_has_sceneareaid();
  sceneareaid_ = value;
}

// -------------------------------------------------------------------

// Map_SC_TriggerEvent

// required uint32 PlyId = 1;
inline bool Map_SC_TriggerEvent::has_plyid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Map_SC_TriggerEvent::set_has_plyid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Map_SC_TriggerEvent::clear_has_plyid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Map_SC_TriggerEvent::clear_plyid() {
  plyid_ = 0u;
  clear_has_plyid();
}
inline ::google::protobuf::uint32 Map_SC_TriggerEvent::plyid() const {
  return plyid_;
}
inline void Map_SC_TriggerEvent::set_plyid(::google::protobuf::uint32 value) {
  set_has_plyid();
  plyid_ = value;
}

// required uint32 TriggerType = 2;
inline bool Map_SC_TriggerEvent::has_triggertype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Map_SC_TriggerEvent::set_has_triggertype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Map_SC_TriggerEvent::clear_has_triggertype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Map_SC_TriggerEvent::clear_triggertype() {
  triggertype_ = 0u;
  clear_has_triggertype();
}
inline ::google::protobuf::uint32 Map_SC_TriggerEvent::triggertype() const {
  return triggertype_;
}
inline void Map_SC_TriggerEvent::set_triggertype(::google::protobuf::uint32 value) {
  set_has_triggertype();
  triggertype_ = value;
}

// required uint32 TriggerId = 3;
inline bool Map_SC_TriggerEvent::has_triggerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Map_SC_TriggerEvent::set_has_triggerid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Map_SC_TriggerEvent::clear_has_triggerid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Map_SC_TriggerEvent::clear_triggerid() {
  triggerid_ = 0u;
  clear_has_triggerid();
}
inline ::google::protobuf::uint32 Map_SC_TriggerEvent::triggerid() const {
  return triggerid_;
}
inline void Map_SC_TriggerEvent::set_triggerid(::google::protobuf::uint32 value) {
  set_has_triggerid();
  triggerid_ = value;
}

// -------------------------------------------------------------------

// Map_CS_TriggerEvent

// required uint32 TriggerType = 1;
inline bool Map_CS_TriggerEvent::has_triggertype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Map_CS_TriggerEvent::set_has_triggertype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Map_CS_TriggerEvent::clear_has_triggertype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Map_CS_TriggerEvent::clear_triggertype() {
  triggertype_ = 0u;
  clear_has_triggertype();
}
inline ::google::protobuf::uint32 Map_CS_TriggerEvent::triggertype() const {
  return triggertype_;
}
inline void Map_CS_TriggerEvent::set_triggertype(::google::protobuf::uint32 value) {
  set_has_triggertype();
  triggertype_ = value;
}

// required uint32 TriggerId = 2;
inline bool Map_CS_TriggerEvent::has_triggerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Map_CS_TriggerEvent::set_has_triggerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Map_CS_TriggerEvent::clear_has_triggerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Map_CS_TriggerEvent::clear_triggerid() {
  triggerid_ = 0u;
  clear_has_triggerid();
}
inline ::google::protobuf::uint32 Map_CS_TriggerEvent::triggerid() const {
  return triggerid_;
}
inline void Map_CS_TriggerEvent::set_triggerid(::google::protobuf::uint32 value) {
  set_has_triggerid();
  triggerid_ = value;
}

// -------------------------------------------------------------------

// Map_SC_SyncAreaStatus

// required uint32 CharId = 1;
inline bool Map_SC_SyncAreaStatus::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Map_SC_SyncAreaStatus::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Map_SC_SyncAreaStatus::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Map_SC_SyncAreaStatus::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 Map_SC_SyncAreaStatus::charid() const {
  return charid_;
}
inline void Map_SC_SyncAreaStatus::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 SceneAreaType = 2;
inline bool Map_SC_SyncAreaStatus::has_sceneareatype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Map_SC_SyncAreaStatus::set_has_sceneareatype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Map_SC_SyncAreaStatus::clear_has_sceneareatype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Map_SC_SyncAreaStatus::clear_sceneareatype() {
  sceneareatype_ = 0u;
  clear_has_sceneareatype();
}
inline ::google::protobuf::uint32 Map_SC_SyncAreaStatus::sceneareatype() const {
  return sceneareatype_;
}
inline void Map_SC_SyncAreaStatus::set_sceneareatype(::google::protobuf::uint32 value) {
  set_has_sceneareatype();
  sceneareatype_ = value;
}

// -------------------------------------------------------------------

// Map_SC_MonsterStopMove

// required uint32 nId = 1;
inline bool Map_SC_MonsterStopMove::has_nid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Map_SC_MonsterStopMove::set_has_nid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Map_SC_MonsterStopMove::clear_has_nid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Map_SC_MonsterStopMove::clear_nid() {
  nid_ = 0u;
  clear_has_nid();
}
inline ::google::protobuf::uint32 Map_SC_MonsterStopMove::nid() const {
  return nid_;
}
inline void Map_SC_MonsterStopMove::set_nid(::google::protobuf::uint32 value) {
  set_has_nid();
  nid_ = value;
}

// required .proto.message.Point3D pt = 2;
inline bool Map_SC_MonsterStopMove::has_pt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Map_SC_MonsterStopMove::set_has_pt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Map_SC_MonsterStopMove::clear_has_pt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Map_SC_MonsterStopMove::clear_pt() {
  if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
  clear_has_pt();
}
inline const ::proto::message::Point3D& Map_SC_MonsterStopMove::pt() const {
  return pt_ != NULL ? *pt_ : *default_instance_->pt_;
}
inline ::proto::message::Point3D* Map_SC_MonsterStopMove::mutable_pt() {
  set_has_pt();
  if (pt_ == NULL) pt_ = new ::proto::message::Point3D;
  return pt_;
}
inline ::proto::message::Point3D* Map_SC_MonsterStopMove::release_pt() {
  clear_has_pt();
  ::proto::message::Point3D* temp = pt_;
  pt_ = NULL;
  return temp;
}
inline void Map_SC_MonsterStopMove::set_allocated_pt(::proto::message::Point3D* pt) {
  delete pt_;
  pt_ = pt;
  if (pt) {
    set_has_pt();
  } else {
    clear_has_pt();
  }
}

// required float dir = 3;
inline bool Map_SC_MonsterStopMove::has_dir() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Map_SC_MonsterStopMove::set_has_dir() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Map_SC_MonsterStopMove::clear_has_dir() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Map_SC_MonsterStopMove::clear_dir() {
  dir_ = 0;
  clear_has_dir();
}
inline float Map_SC_MonsterStopMove::dir() const {
  return dir_;
}
inline void Map_SC_MonsterStopMove::set_dir(float value) {
  set_has_dir();
  dir_ = value;
}

// -------------------------------------------------------------------

// Map_CS_TeamerLocationSyn

// required int32 opened = 1;
inline bool Map_CS_TeamerLocationSyn::has_opened() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Map_CS_TeamerLocationSyn::set_has_opened() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Map_CS_TeamerLocationSyn::clear_has_opened() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Map_CS_TeamerLocationSyn::clear_opened() {
  opened_ = 0;
  clear_has_opened();
}
inline ::google::protobuf::int32 Map_CS_TeamerLocationSyn::opened() const {
  return opened_;
}
inline void Map_CS_TeamerLocationSyn::set_opened(::google::protobuf::int32 value) {
  set_has_opened();
  opened_ = value;
}

// -------------------------------------------------------------------

// Location

// required uint32 plyId = 1;
inline bool Location::has_plyid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Location::set_has_plyid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Location::clear_has_plyid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Location::clear_plyid() {
  plyid_ = 0u;
  clear_has_plyid();
}
inline ::google::protobuf::uint32 Location::plyid() const {
  return plyid_;
}
inline void Location::set_plyid(::google::protobuf::uint32 value) {
  set_has_plyid();
  plyid_ = value;
}

// required .proto.message.Point3D pt = 2;
inline bool Location::has_pt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Location::set_has_pt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Location::clear_has_pt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Location::clear_pt() {
  if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
  clear_has_pt();
}
inline const ::proto::message::Point3D& Location::pt() const {
  return pt_ != NULL ? *pt_ : *default_instance_->pt_;
}
inline ::proto::message::Point3D* Location::mutable_pt() {
  set_has_pt();
  if (pt_ == NULL) pt_ = new ::proto::message::Point3D;
  return pt_;
}
inline ::proto::message::Point3D* Location::release_pt() {
  clear_has_pt();
  ::proto::message::Point3D* temp = pt_;
  pt_ = NULL;
  return temp;
}
inline void Location::set_allocated_pt(::proto::message::Point3D* pt) {
  delete pt_;
  pt_ = pt;
  if (pt) {
    set_has_pt();
  } else {
    clear_has_pt();
  }
}

// required uint32 MapID = 3;
inline bool Location::has_mapid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Location::set_has_mapid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Location::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Location::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 Location::mapid() const {
  return mapid_;
}
inline void Location::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
}

// optional uint32 Layer = 4;
inline bool Location::has_layer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Location::set_has_layer() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Location::clear_has_layer() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Location::clear_layer() {
  layer_ = 0u;
  clear_has_layer();
}
inline ::google::protobuf::uint32 Location::layer() const {
  return layer_;
}
inline void Location::set_layer(::google::protobuf::uint32 value) {
  set_has_layer();
  layer_ = value;
}

// -------------------------------------------------------------------

// Map_SC_TeamerLocationSyn

// repeated .proto.message.Location loc = 1;
inline int Map_SC_TeamerLocationSyn::loc_size() const {
  return loc_.size();
}
inline void Map_SC_TeamerLocationSyn::clear_loc() {
  loc_.Clear();
}
inline const ::proto::message::Location& Map_SC_TeamerLocationSyn::loc(int index) const {
  return loc_.Get(index);
}
inline ::proto::message::Location* Map_SC_TeamerLocationSyn::mutable_loc(int index) {
  return loc_.Mutable(index);
}
inline ::proto::message::Location* Map_SC_TeamerLocationSyn::add_loc() {
  return loc_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::Location >&
Map_SC_TeamerLocationSyn::loc() const {
  return loc_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::Location >*
Map_SC_TeamerLocationSyn::mutable_loc() {
  return &loc_;
}

// -------------------------------------------------------------------

// Map_CS_StartParkour

// -------------------------------------------------------------------

// Map_CS_EndParkour

// -------------------------------------------------------------------

// Map_CS_PickUpChest

// required uint32 nID = 1;
inline bool Map_CS_PickUpChest::has_nid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Map_CS_PickUpChest::set_has_nid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Map_CS_PickUpChest::clear_has_nid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Map_CS_PickUpChest::clear_nid() {
  nid_ = 0u;
  clear_has_nid();
}
inline ::google::protobuf::uint32 Map_CS_PickUpChest::nid() const {
  return nid_;
}
inline void Map_CS_PickUpChest::set_nid(::google::protobuf::uint32 value) {
  set_has_nid();
  nid_ = value;
}

// -------------------------------------------------------------------

// Map_SC_PickUpChest

// optional int32 result = 1;
inline bool Map_SC_PickUpChest::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Map_SC_PickUpChest::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Map_SC_PickUpChest::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Map_SC_PickUpChest::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 Map_SC_PickUpChest::result() const {
  return result_;
}
inline void Map_SC_PickUpChest::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional .proto.message.IDTimes id_times = 2;
inline bool Map_SC_PickUpChest::has_id_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Map_SC_PickUpChest::set_has_id_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Map_SC_PickUpChest::clear_has_id_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Map_SC_PickUpChest::clear_id_times() {
  if (id_times_ != NULL) id_times_->::proto::message::IDTimes::Clear();
  clear_has_id_times();
}
inline const ::proto::message::IDTimes& Map_SC_PickUpChest::id_times() const {
  return id_times_ != NULL ? *id_times_ : *default_instance_->id_times_;
}
inline ::proto::message::IDTimes* Map_SC_PickUpChest::mutable_id_times() {
  set_has_id_times();
  if (id_times_ == NULL) id_times_ = new ::proto::message::IDTimes;
  return id_times_;
}
inline ::proto::message::IDTimes* Map_SC_PickUpChest::release_id_times() {
  clear_has_id_times();
  ::proto::message::IDTimes* temp = id_times_;
  id_times_ = NULL;
  return temp;
}
inline void Map_SC_PickUpChest::set_allocated_id_times(::proto::message::IDTimes* id_times) {
  delete id_times_;
  id_times_ = id_times;
  if (id_times) {
    set_has_id_times();
  } else {
    clear_has_id_times();
  }
}

// repeated .proto.message.DropItemNum item_list = 3;
inline int Map_SC_PickUpChest::item_list_size() const {
  return item_list_.size();
}
inline void Map_SC_PickUpChest::clear_item_list() {
  item_list_.Clear();
}
inline const ::proto::message::DropItemNum& Map_SC_PickUpChest::item_list(int index) const {
  return item_list_.Get(index);
}
inline ::proto::message::DropItemNum* Map_SC_PickUpChest::mutable_item_list(int index) {
  return item_list_.Mutable(index);
}
inline ::proto::message::DropItemNum* Map_SC_PickUpChest::add_item_list() {
  return item_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::DropItemNum >&
Map_SC_PickUpChest::item_list() const {
  return item_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::DropItemNum >*
Map_SC_PickUpChest::mutable_item_list() {
  return &item_list_;
}

// -------------------------------------------------------------------

// Map_SC_StartParkour

// required int32 res = 1;
inline bool Map_SC_StartParkour::has_res() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Map_SC_StartParkour::set_has_res() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Map_SC_StartParkour::clear_has_res() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Map_SC_StartParkour::clear_res() {
  res_ = 0;
  clear_has_res();
}
inline ::google::protobuf::int32 Map_SC_StartParkour::res() const {
  return res_;
}
inline void Map_SC_StartParkour::set_res(::google::protobuf::int32 value) {
  set_has_res();
  res_ = value;
}

// -------------------------------------------------------------------

// Map_SC_PlayerCheckPosition

// required uint32 plyId = 1;
inline bool Map_SC_PlayerCheckPosition::has_plyid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Map_SC_PlayerCheckPosition::set_has_plyid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Map_SC_PlayerCheckPosition::clear_has_plyid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Map_SC_PlayerCheckPosition::clear_plyid() {
  plyid_ = 0u;
  clear_has_plyid();
}
inline ::google::protobuf::uint32 Map_SC_PlayerCheckPosition::plyid() const {
  return plyid_;
}
inline void Map_SC_PlayerCheckPosition::set_plyid(::google::protobuf::uint32 value) {
  set_has_plyid();
  plyid_ = value;
}

// required .proto.message.Point3D pt = 2;
inline bool Map_SC_PlayerCheckPosition::has_pt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Map_SC_PlayerCheckPosition::set_has_pt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Map_SC_PlayerCheckPosition::clear_has_pt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Map_SC_PlayerCheckPosition::clear_pt() {
  if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
  clear_has_pt();
}
inline const ::proto::message::Point3D& Map_SC_PlayerCheckPosition::pt() const {
  return pt_ != NULL ? *pt_ : *default_instance_->pt_;
}
inline ::proto::message::Point3D* Map_SC_PlayerCheckPosition::mutable_pt() {
  set_has_pt();
  if (pt_ == NULL) pt_ = new ::proto::message::Point3D;
  return pt_;
}
inline ::proto::message::Point3D* Map_SC_PlayerCheckPosition::release_pt() {
  clear_has_pt();
  ::proto::message::Point3D* temp = pt_;
  pt_ = NULL;
  return temp;
}
inline void Map_SC_PlayerCheckPosition::set_allocated_pt(::proto::message::Point3D* pt) {
  delete pt_;
  pt_ = pt;
  if (pt) {
    set_has_pt();
  } else {
    clear_has_pt();
  }
}

// -------------------------------------------------------------------

// Map_SC_PlayerStopMove

// required uint32 plyId = 1;
inline bool Map_SC_PlayerStopMove::has_plyid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Map_SC_PlayerStopMove::set_has_plyid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Map_SC_PlayerStopMove::clear_has_plyid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Map_SC_PlayerStopMove::clear_plyid() {
  plyid_ = 0u;
  clear_has_plyid();
}
inline ::google::protobuf::uint32 Map_SC_PlayerStopMove::plyid() const {
  return plyid_;
}
inline void Map_SC_PlayerStopMove::set_plyid(::google::protobuf::uint32 value) {
  set_has_plyid();
  plyid_ = value;
}

// required .proto.message.Point3D pt = 2;
inline bool Map_SC_PlayerStopMove::has_pt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Map_SC_PlayerStopMove::set_has_pt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Map_SC_PlayerStopMove::clear_has_pt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Map_SC_PlayerStopMove::clear_pt() {
  if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
  clear_has_pt();
}
inline const ::proto::message::Point3D& Map_SC_PlayerStopMove::pt() const {
  return pt_ != NULL ? *pt_ : *default_instance_->pt_;
}
inline ::proto::message::Point3D* Map_SC_PlayerStopMove::mutable_pt() {
  set_has_pt();
  if (pt_ == NULL) pt_ = new ::proto::message::Point3D;
  return pt_;
}
inline ::proto::message::Point3D* Map_SC_PlayerStopMove::release_pt() {
  clear_has_pt();
  ::proto::message::Point3D* temp = pt_;
  pt_ = NULL;
  return temp;
}
inline void Map_SC_PlayerStopMove::set_allocated_pt(::proto::message::Point3D* pt) {
  delete pt_;
  pt_ = pt;
  if (pt) {
    set_has_pt();
  } else {
    clear_has_pt();
  }
}

// -------------------------------------------------------------------

// Map_SC_PlayerStateSync

// required uint32 plyId = 1;
inline bool Map_SC_PlayerStateSync::has_plyid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Map_SC_PlayerStateSync::set_has_plyid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Map_SC_PlayerStateSync::clear_has_plyid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Map_SC_PlayerStateSync::clear_plyid() {
  plyid_ = 0u;
  clear_has_plyid();
}
inline ::google::protobuf::uint32 Map_SC_PlayerStateSync::plyid() const {
  return plyid_;
}
inline void Map_SC_PlayerStateSync::set_plyid(::google::protobuf::uint32 value) {
  set_has_plyid();
  plyid_ = value;
}

// required uint32 SyncState = 2;
inline bool Map_SC_PlayerStateSync::has_syncstate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Map_SC_PlayerStateSync::set_has_syncstate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Map_SC_PlayerStateSync::clear_has_syncstate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Map_SC_PlayerStateSync::clear_syncstate() {
  syncstate_ = 0u;
  clear_has_syncstate();
}
inline ::google::protobuf::uint32 Map_SC_PlayerStateSync::syncstate() const {
  return syncstate_;
}
inline void Map_SC_PlayerStateSync::set_syncstate(::google::protobuf::uint32 value) {
  set_has_syncstate();
  syncstate_ = value;
}

// -------------------------------------------------------------------

// Map_CS_PlayerCheckPosition

// required .proto.message.Point3D pt = 1;
inline bool Map_CS_PlayerCheckPosition::has_pt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Map_CS_PlayerCheckPosition::set_has_pt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Map_CS_PlayerCheckPosition::clear_has_pt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Map_CS_PlayerCheckPosition::clear_pt() {
  if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
  clear_has_pt();
}
inline const ::proto::message::Point3D& Map_CS_PlayerCheckPosition::pt() const {
  return pt_ != NULL ? *pt_ : *default_instance_->pt_;
}
inline ::proto::message::Point3D* Map_CS_PlayerCheckPosition::mutable_pt() {
  set_has_pt();
  if (pt_ == NULL) pt_ = new ::proto::message::Point3D;
  return pt_;
}
inline ::proto::message::Point3D* Map_CS_PlayerCheckPosition::release_pt() {
  clear_has_pt();
  ::proto::message::Point3D* temp = pt_;
  pt_ = NULL;
  return temp;
}
inline void Map_CS_PlayerCheckPosition::set_allocated_pt(::proto::message::Point3D* pt) {
  delete pt_;
  pt_ = pt;
  if (pt) {
    set_has_pt();
  } else {
    clear_has_pt();
  }
}

// -------------------------------------------------------------------

// Map_CS_PlayerStopMove

// required .proto.message.Point3D pt = 1;
inline bool Map_CS_PlayerStopMove::has_pt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Map_CS_PlayerStopMove::set_has_pt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Map_CS_PlayerStopMove::clear_has_pt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Map_CS_PlayerStopMove::clear_pt() {
  if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
  clear_has_pt();
}
inline const ::proto::message::Point3D& Map_CS_PlayerStopMove::pt() const {
  return pt_ != NULL ? *pt_ : *default_instance_->pt_;
}
inline ::proto::message::Point3D* Map_CS_PlayerStopMove::mutable_pt() {
  set_has_pt();
  if (pt_ == NULL) pt_ = new ::proto::message::Point3D;
  return pt_;
}
inline ::proto::message::Point3D* Map_CS_PlayerStopMove::release_pt() {
  clear_has_pt();
  ::proto::message::Point3D* temp = pt_;
  pt_ = NULL;
  return temp;
}
inline void Map_CS_PlayerStopMove::set_allocated_pt(::proto::message::Point3D* pt) {
  delete pt_;
  pt_ = pt;
  if (pt) {
    set_has_pt();
  } else {
    clear_has_pt();
  }
}

// -------------------------------------------------------------------

// Map_CS_PlayerStateSync

// required uint32 SyncState = 1;
inline bool Map_CS_PlayerStateSync::has_syncstate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Map_CS_PlayerStateSync::set_has_syncstate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Map_CS_PlayerStateSync::clear_has_syncstate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Map_CS_PlayerStateSync::clear_syncstate() {
  syncstate_ = 0u;
  clear_has_syncstate();
}
inline ::google::protobuf::uint32 Map_CS_PlayerStateSync::syncstate() const {
  return syncstate_;
}
inline void Map_CS_PlayerStateSync::set_syncstate(::google::protobuf::uint32 value) {
  set_has_syncstate();
  syncstate_ = value;
}

// -------------------------------------------------------------------

// Map_SC_AddSyncRandomChest

// required uint32 ID = 1;
inline bool Map_SC_AddSyncRandomChest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Map_SC_AddSyncRandomChest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Map_SC_AddSyncRandomChest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Map_SC_AddSyncRandomChest::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Map_SC_AddSyncRandomChest::id() const {
  return id_;
}
inline void Map_SC_AddSyncRandomChest::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 ProID = 2;
inline bool Map_SC_AddSyncRandomChest::has_proid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Map_SC_AddSyncRandomChest::set_has_proid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Map_SC_AddSyncRandomChest::clear_has_proid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Map_SC_AddSyncRandomChest::clear_proid() {
  proid_ = 0u;
  clear_has_proid();
}
inline ::google::protobuf::uint32 Map_SC_AddSyncRandomChest::proid() const {
  return proid_;
}
inline void Map_SC_AddSyncRandomChest::set_proid(::google::protobuf::uint32 value) {
  set_has_proid();
  proid_ = value;
}

// required .proto.message.Point3D pt = 3;
inline bool Map_SC_AddSyncRandomChest::has_pt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Map_SC_AddSyncRandomChest::set_has_pt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Map_SC_AddSyncRandomChest::clear_has_pt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Map_SC_AddSyncRandomChest::clear_pt() {
  if (pt_ != NULL) pt_->::proto::message::Point3D::Clear();
  clear_has_pt();
}
inline const ::proto::message::Point3D& Map_SC_AddSyncRandomChest::pt() const {
  return pt_ != NULL ? *pt_ : *default_instance_->pt_;
}
inline ::proto::message::Point3D* Map_SC_AddSyncRandomChest::mutable_pt() {
  set_has_pt();
  if (pt_ == NULL) pt_ = new ::proto::message::Point3D;
  return pt_;
}
inline ::proto::message::Point3D* Map_SC_AddSyncRandomChest::release_pt() {
  clear_has_pt();
  ::proto::message::Point3D* temp = pt_;
  pt_ = NULL;
  return temp;
}
inline void Map_SC_AddSyncRandomChest::set_allocated_pt(::proto::message::Point3D* pt) {
  delete pt_;
  pt_ = pt;
  if (pt) {
    set_has_pt();
  } else {
    clear_has_pt();
  }
}

// required float dir = 4;
inline bool Map_SC_AddSyncRandomChest::has_dir() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Map_SC_AddSyncRandomChest::set_has_dir() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Map_SC_AddSyncRandomChest::clear_has_dir() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Map_SC_AddSyncRandomChest::clear_dir() {
  dir_ = 0;
  clear_has_dir();
}
inline float Map_SC_AddSyncRandomChest::dir() const {
  return dir_;
}
inline void Map_SC_AddSyncRandomChest::set_dir(float value) {
  set_has_dir();
  dir_ = value;
}

// required uint64 CreateUid = 5;
inline bool Map_SC_AddSyncRandomChest::has_createuid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Map_SC_AddSyncRandomChest::set_has_createuid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Map_SC_AddSyncRandomChest::clear_has_createuid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Map_SC_AddSyncRandomChest::clear_createuid() {
  createuid_ = GOOGLE_ULONGLONG(0);
  clear_has_createuid();
}
inline ::google::protobuf::uint64 Map_SC_AddSyncRandomChest::createuid() const {
  return createuid_;
}
inline void Map_SC_AddSyncRandomChest::set_createuid(::google::protobuf::uint64 value) {
  set_has_createuid();
  createuid_ = value;
}

// required string CreateName = 6;
inline bool Map_SC_AddSyncRandomChest::has_createname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Map_SC_AddSyncRandomChest::set_has_createname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Map_SC_AddSyncRandomChest::clear_has_createname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Map_SC_AddSyncRandomChest::clear_createname() {
  if (createname_ != &::google::protobuf::internal::kEmptyString) {
    createname_->clear();
  }
  clear_has_createname();
}
inline const ::std::string& Map_SC_AddSyncRandomChest::createname() const {
  return *createname_;
}
inline void Map_SC_AddSyncRandomChest::set_createname(const ::std::string& value) {
  set_has_createname();
  if (createname_ == &::google::protobuf::internal::kEmptyString) {
    createname_ = new ::std::string;
  }
  createname_->assign(value);
}
inline void Map_SC_AddSyncRandomChest::set_createname(const char* value) {
  set_has_createname();
  if (createname_ == &::google::protobuf::internal::kEmptyString) {
    createname_ = new ::std::string;
  }
  createname_->assign(value);
}
inline void Map_SC_AddSyncRandomChest::set_createname(const char* value, size_t size) {
  set_has_createname();
  if (createname_ == &::google::protobuf::internal::kEmptyString) {
    createname_ = new ::std::string;
  }
  createname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Map_SC_AddSyncRandomChest::mutable_createname() {
  set_has_createname();
  if (createname_ == &::google::protobuf::internal::kEmptyString) {
    createname_ = new ::std::string;
  }
  return createname_;
}
inline ::std::string* Map_SC_AddSyncRandomChest::release_createname() {
  clear_has_createname();
  if (createname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = createname_;
    createname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Map_SC_AddSyncRandomChest::set_allocated_createname(::std::string* createname) {
  if (createname_ != &::google::protobuf::internal::kEmptyString) {
    delete createname_;
  }
  if (createname) {
    set_has_createname();
    createname_ = createname;
  } else {
    clear_has_createname();
    createname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 Velocity = 7;
inline bool Map_SC_AddSyncRandomChest::has_velocity() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Map_SC_AddSyncRandomChest::set_has_velocity() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Map_SC_AddSyncRandomChest::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Map_SC_AddSyncRandomChest::clear_velocity() {
  velocity_ = 0;
  clear_has_velocity();
}
inline ::google::protobuf::int32 Map_SC_AddSyncRandomChest::velocity() const {
  return velocity_;
}
inline void Map_SC_AddSyncRandomChest::set_velocity(::google::protobuf::int32 value) {
  set_has_velocity();
  velocity_ = value;
}

// optional int32 MaxHP = 8;
inline bool Map_SC_AddSyncRandomChest::has_maxhp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Map_SC_AddSyncRandomChest::set_has_maxhp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Map_SC_AddSyncRandomChest::clear_has_maxhp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Map_SC_AddSyncRandomChest::clear_maxhp() {
  maxhp_ = 0;
  clear_has_maxhp();
}
inline ::google::protobuf::int32 Map_SC_AddSyncRandomChest::maxhp() const {
  return maxhp_;
}
inline void Map_SC_AddSyncRandomChest::set_maxhp(::google::protobuf::int32 value) {
  set_has_maxhp();
  maxhp_ = value;
}

// optional int32 CurHP = 9;
inline bool Map_SC_AddSyncRandomChest::has_curhp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Map_SC_AddSyncRandomChest::set_has_curhp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Map_SC_AddSyncRandomChest::clear_has_curhp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Map_SC_AddSyncRandomChest::clear_curhp() {
  curhp_ = 0;
  clear_has_curhp();
}
inline ::google::protobuf::int32 Map_SC_AddSyncRandomChest::curhp() const {
  return curhp_;
}
inline void Map_SC_AddSyncRandomChest::set_curhp(::google::protobuf::int32 value) {
  set_has_curhp();
  curhp_ = value;
}

// -------------------------------------------------------------------

// Map_SC_UpdateDir

// required uint32 Id = 1;
inline bool Map_SC_UpdateDir::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Map_SC_UpdateDir::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Map_SC_UpdateDir::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Map_SC_UpdateDir::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Map_SC_UpdateDir::id() const {
  return id_;
}
inline void Map_SC_UpdateDir::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional float dir = 2;
inline bool Map_SC_UpdateDir::has_dir() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Map_SC_UpdateDir::set_has_dir() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Map_SC_UpdateDir::clear_has_dir() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Map_SC_UpdateDir::clear_dir() {
  dir_ = 0;
  clear_has_dir();
}
inline float Map_SC_UpdateDir::dir() const {
  return dir_;
}
inline void Map_SC_UpdateDir::set_dir(float value) {
  set_has_dir();
  dir_ = value;
}

// -------------------------------------------------------------------

// Map_CS_GetMapBranch

// -------------------------------------------------------------------

// Map_CS_ChangeBranch

// required int32 BranchId = 1;
inline bool Map_CS_ChangeBranch::has_branchid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Map_CS_ChangeBranch::set_has_branchid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Map_CS_ChangeBranch::clear_has_branchid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Map_CS_ChangeBranch::clear_branchid() {
  branchid_ = 0;
  clear_has_branchid();
}
inline ::google::protobuf::int32 Map_CS_ChangeBranch::branchid() const {
  return branchid_;
}
inline void Map_CS_ChangeBranch::set_branchid(::google::protobuf::int32 value) {
  set_has_branchid();
  branchid_ = value;
}

// -------------------------------------------------------------------

// BranchInfo

// required int32 BranchId = 1;
inline bool BranchInfo::has_branchid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BranchInfo::set_has_branchid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BranchInfo::clear_has_branchid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BranchInfo::clear_branchid() {
  branchid_ = 0;
  clear_has_branchid();
}
inline ::google::protobuf::int32 BranchInfo::branchid() const {
  return branchid_;
}
inline void BranchInfo::set_branchid(::google::protobuf::int32 value) {
  set_has_branchid();
  branchid_ = value;
}

// required int32 PlayerNum = 2;
inline bool BranchInfo::has_playernum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BranchInfo::set_has_playernum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BranchInfo::clear_has_playernum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BranchInfo::clear_playernum() {
  playernum_ = 0;
  clear_has_playernum();
}
inline ::google::protobuf::int32 BranchInfo::playernum() const {
  return playernum_;
}
inline void BranchInfo::set_playernum(::google::protobuf::int32 value) {
  set_has_playernum();
  playernum_ = value;
}

// -------------------------------------------------------------------

// Map_SC_GetMapBranch

// repeated .proto.message.BranchInfo branch_list = 3;
inline int Map_SC_GetMapBranch::branch_list_size() const {
  return branch_list_.size();
}
inline void Map_SC_GetMapBranch::clear_branch_list() {
  branch_list_.Clear();
}
inline const ::proto::message::BranchInfo& Map_SC_GetMapBranch::branch_list(int index) const {
  return branch_list_.Get(index);
}
inline ::proto::message::BranchInfo* Map_SC_GetMapBranch::mutable_branch_list(int index) {
  return branch_list_.Mutable(index);
}
inline ::proto::message::BranchInfo* Map_SC_GetMapBranch::add_branch_list() {
  return branch_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::BranchInfo >&
Map_SC_GetMapBranch::branch_list() const {
  return branch_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::BranchInfo >*
Map_SC_GetMapBranch::mutable_branch_list() {
  return &branch_list_;
}

// -------------------------------------------------------------------

// Map_SC_ChangeBranch

// required int32 rt = 1;
inline bool Map_SC_ChangeBranch::has_rt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Map_SC_ChangeBranch::set_has_rt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Map_SC_ChangeBranch::clear_has_rt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Map_SC_ChangeBranch::clear_rt() {
  rt_ = 0;
  clear_has_rt();
}
inline ::google::protobuf::int32 Map_SC_ChangeBranch::rt() const {
  return rt_;
}
inline void Map_SC_ChangeBranch::set_rt(::google::protobuf::int32 value) {
  set_has_rt();
  rt_ = value;
}

// -------------------------------------------------------------------

// Map_CS_GameStoryStart

// required uint32 GameStoryID = 1;
inline bool Map_CS_GameStoryStart::has_gamestoryid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Map_CS_GameStoryStart::set_has_gamestoryid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Map_CS_GameStoryStart::clear_has_gamestoryid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Map_CS_GameStoryStart::clear_gamestoryid() {
  gamestoryid_ = 0u;
  clear_has_gamestoryid();
}
inline ::google::protobuf::uint32 Map_CS_GameStoryStart::gamestoryid() const {
  return gamestoryid_;
}
inline void Map_CS_GameStoryStart::set_gamestoryid(::google::protobuf::uint32 value) {
  set_has_gamestoryid();
  gamestoryid_ = value;
}

// optional uint32 NPCID = 2;
inline bool Map_CS_GameStoryStart::has_npcid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Map_CS_GameStoryStart::set_has_npcid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Map_CS_GameStoryStart::clear_has_npcid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Map_CS_GameStoryStart::clear_npcid() {
  npcid_ = 0u;
  clear_has_npcid();
}
inline ::google::protobuf::uint32 Map_CS_GameStoryStart::npcid() const {
  return npcid_;
}
inline void Map_CS_GameStoryStart::set_npcid(::google::protobuf::uint32 value) {
  set_has_npcid();
  npcid_ = value;
}

// -------------------------------------------------------------------

// Map_CS_GameStoryEnd

// required uint32 GameStoryID = 1;
inline bool Map_CS_GameStoryEnd::has_gamestoryid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Map_CS_GameStoryEnd::set_has_gamestoryid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Map_CS_GameStoryEnd::clear_has_gamestoryid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Map_CS_GameStoryEnd::clear_gamestoryid() {
  gamestoryid_ = 0u;
  clear_has_gamestoryid();
}
inline ::google::protobuf::uint32 Map_CS_GameStoryEnd::gamestoryid() const {
  return gamestoryid_;
}
inline void Map_CS_GameStoryEnd::set_gamestoryid(::google::protobuf::uint32 value) {
  set_has_gamestoryid();
  gamestoryid_ = value;
}

// optional uint32 NPCID = 2;
inline bool Map_CS_GameStoryEnd::has_npcid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Map_CS_GameStoryEnd::set_has_npcid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Map_CS_GameStoryEnd::clear_has_npcid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Map_CS_GameStoryEnd::clear_npcid() {
  npcid_ = 0u;
  clear_has_npcid();
}
inline ::google::protobuf::uint32 Map_CS_GameStoryEnd::npcid() const {
  return npcid_;
}
inline void Map_CS_GameStoryEnd::set_npcid(::google::protobuf::uint32 value) {
  set_has_npcid();
  npcid_ = value;
}

// -------------------------------------------------------------------

// Map_CS_NPCStopAI

// optional uint32 NPCID = 1;
inline bool Map_CS_NPCStopAI::has_npcid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Map_CS_NPCStopAI::set_has_npcid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Map_CS_NPCStopAI::clear_has_npcid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Map_CS_NPCStopAI::clear_npcid() {
  npcid_ = 0u;
  clear_has_npcid();
}
inline ::google::protobuf::uint32 Map_CS_NPCStopAI::npcid() const {
  return npcid_;
}
inline void Map_CS_NPCStopAI::set_npcid(::google::protobuf::uint32 value) {
  set_has_npcid();
  npcid_ = value;
}

// -------------------------------------------------------------------

// Map_CS_NPCActiveAI

// optional uint32 NPCID = 1;
inline bool Map_CS_NPCActiveAI::has_npcid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Map_CS_NPCActiveAI::set_has_npcid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Map_CS_NPCActiveAI::clear_has_npcid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Map_CS_NPCActiveAI::clear_npcid() {
  npcid_ = 0u;
  clear_has_npcid();
}
inline ::google::protobuf::uint32 Map_CS_NPCActiveAI::npcid() const {
  return npcid_;
}
inline void Map_CS_NPCActiveAI::set_npcid(::google::protobuf::uint32 value) {
  set_has_npcid();
  npcid_ = value;
}

// -------------------------------------------------------------------

// Map_SC_MonsterTalk

// optional uint32 talkID = 2;
inline bool Map_SC_MonsterTalk::has_talkid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Map_SC_MonsterTalk::set_has_talkid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Map_SC_MonsterTalk::clear_has_talkid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Map_SC_MonsterTalk::clear_talkid() {
  talkid_ = 0u;
  clear_has_talkid();
}
inline ::google::protobuf::uint32 Map_SC_MonsterTalk::talkid() const {
  return talkid_;
}
inline void Map_SC_MonsterTalk::set_talkid(::google::protobuf::uint32 value) {
  set_has_talkid();
  talkid_ = value;
}

// -------------------------------------------------------------------

// Map_SC_MonsterTurnBackSync

// required uint32 MonsterID = 1;
inline bool Map_SC_MonsterTurnBackSync::has_monsterid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Map_SC_MonsterTurnBackSync::set_has_monsterid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Map_SC_MonsterTurnBackSync::clear_has_monsterid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Map_SC_MonsterTurnBackSync::clear_monsterid() {
  monsterid_ = 0u;
  clear_has_monsterid();
}
inline ::google::protobuf::uint32 Map_SC_MonsterTurnBackSync::monsterid() const {
  return monsterid_;
}
inline void Map_SC_MonsterTurnBackSync::set_monsterid(::google::protobuf::uint32 value) {
  set_has_monsterid();
  monsterid_ = value;
}

// required uint64 EndTick = 2;
inline bool Map_SC_MonsterTurnBackSync::has_endtick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Map_SC_MonsterTurnBackSync::set_has_endtick() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Map_SC_MonsterTurnBackSync::clear_has_endtick() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Map_SC_MonsterTurnBackSync::clear_endtick() {
  endtick_ = GOOGLE_ULONGLONG(0);
  clear_has_endtick();
}
inline ::google::protobuf::uint64 Map_SC_MonsterTurnBackSync::endtick() const {
  return endtick_;
}
inline void Map_SC_MonsterTurnBackSync::set_endtick(::google::protobuf::uint64 value) {
  set_has_endtick();
  endtick_ = value;
}

// -------------------------------------------------------------------

// Map_SC_ChangeMapResult

// optional int32 result = 1;
inline bool Map_SC_ChangeMapResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Map_SC_ChangeMapResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Map_SC_ChangeMapResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Map_SC_ChangeMapResult::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 Map_SC_ChangeMapResult::result() const {
  return result_;
}
inline void Map_SC_ChangeMapResult::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 map_table_id = 2;
inline bool Map_SC_ChangeMapResult::has_map_table_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Map_SC_ChangeMapResult::set_has_map_table_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Map_SC_ChangeMapResult::clear_has_map_table_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Map_SC_ChangeMapResult::clear_map_table_id() {
  map_table_id_ = 0;
  clear_has_map_table_id();
}
inline ::google::protobuf::int32 Map_SC_ChangeMapResult::map_table_id() const {
  return map_table_id_;
}
inline void Map_SC_ChangeMapResult::set_map_table_id(::google::protobuf::int32 value) {
  set_has_map_table_id();
  map_table_id_ = value;
}

// -------------------------------------------------------------------

// Game2Match_PVPMatch

// required int32 iTableId = 1;
inline bool Game2Match_PVPMatch::has_itableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Game2Match_PVPMatch::set_has_itableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Game2Match_PVPMatch::clear_has_itableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Game2Match_PVPMatch::clear_itableid() {
  itableid_ = 0;
  clear_has_itableid();
}
inline ::google::protobuf::int32 Game2Match_PVPMatch::itableid() const {
  return itableid_;
}
inline void Game2Match_PVPMatch::set_itableid(::google::protobuf::int32 value) {
  set_has_itableid();
  itableid_ = value;
}

// required .proto.message.MatchPlayerInfo sMatchPlyInfo = 2;
inline bool Game2Match_PVPMatch::has_smatchplyinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Game2Match_PVPMatch::set_has_smatchplyinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Game2Match_PVPMatch::clear_has_smatchplyinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Game2Match_PVPMatch::clear_smatchplyinfo() {
  if (smatchplyinfo_ != NULL) smatchplyinfo_->::proto::message::MatchPlayerInfo::Clear();
  clear_has_smatchplyinfo();
}
inline const ::proto::message::MatchPlayerInfo& Game2Match_PVPMatch::smatchplyinfo() const {
  return smatchplyinfo_ != NULL ? *smatchplyinfo_ : *default_instance_->smatchplyinfo_;
}
inline ::proto::message::MatchPlayerInfo* Game2Match_PVPMatch::mutable_smatchplyinfo() {
  set_has_smatchplyinfo();
  if (smatchplyinfo_ == NULL) smatchplyinfo_ = new ::proto::message::MatchPlayerInfo;
  return smatchplyinfo_;
}
inline ::proto::message::MatchPlayerInfo* Game2Match_PVPMatch::release_smatchplyinfo() {
  clear_has_smatchplyinfo();
  ::proto::message::MatchPlayerInfo* temp = smatchplyinfo_;
  smatchplyinfo_ = NULL;
  return temp;
}
inline void Game2Match_PVPMatch::set_allocated_smatchplyinfo(::proto::message::MatchPlayerInfo* smatchplyinfo) {
  delete smatchplyinfo_;
  smatchplyinfo_ = smatchplyinfo;
  if (smatchplyinfo) {
    set_has_smatchplyinfo();
  } else {
    clear_has_smatchplyinfo();
  }
}

// -------------------------------------------------------------------

// Game2Match_TeamMatch

// required int32 iTableId = 1;
inline bool Game2Match_TeamMatch::has_itableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Game2Match_TeamMatch::set_has_itableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Game2Match_TeamMatch::clear_has_itableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Game2Match_TeamMatch::clear_itableid() {
  itableid_ = 0;
  clear_has_itableid();
}
inline ::google::protobuf::int32 Game2Match_TeamMatch::itableid() const {
  return itableid_;
}
inline void Game2Match_TeamMatch::set_itableid(::google::protobuf::int32 value) {
  set_has_itableid();
  itableid_ = value;
}

// required uint64 uiHostId = 2;
inline bool Game2Match_TeamMatch::has_uihostid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Game2Match_TeamMatch::set_has_uihostid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Game2Match_TeamMatch::clear_has_uihostid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Game2Match_TeamMatch::clear_uihostid() {
  uihostid_ = GOOGLE_ULONGLONG(0);
  clear_has_uihostid();
}
inline ::google::protobuf::uint64 Game2Match_TeamMatch::uihostid() const {
  return uihostid_;
}
inline void Game2Match_TeamMatch::set_uihostid(::google::protobuf::uint64 value) {
  set_has_uihostid();
  uihostid_ = value;
}

// repeated .proto.message.MatchPlayerInfo vecMatchPlyInfo = 3;
inline int Game2Match_TeamMatch::vecmatchplyinfo_size() const {
  return vecmatchplyinfo_.size();
}
inline void Game2Match_TeamMatch::clear_vecmatchplyinfo() {
  vecmatchplyinfo_.Clear();
}
inline const ::proto::message::MatchPlayerInfo& Game2Match_TeamMatch::vecmatchplyinfo(int index) const {
  return vecmatchplyinfo_.Get(index);
}
inline ::proto::message::MatchPlayerInfo* Game2Match_TeamMatch::mutable_vecmatchplyinfo(int index) {
  return vecmatchplyinfo_.Mutable(index);
}
inline ::proto::message::MatchPlayerInfo* Game2Match_TeamMatch::add_vecmatchplyinfo() {
  return vecmatchplyinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::MatchPlayerInfo >&
Game2Match_TeamMatch::vecmatchplyinfo() const {
  return vecmatchplyinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::MatchPlayerInfo >*
Game2Match_TeamMatch::mutable_vecmatchplyinfo() {
  return &vecmatchplyinfo_;
}

// -------------------------------------------------------------------

// Game2Match_CancelMatch

// optional uint64 uuid = 1;
inline bool Game2Match_CancelMatch::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Game2Match_CancelMatch::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Game2Match_CancelMatch::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Game2Match_CancelMatch::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 Game2Match_CancelMatch::uuid() const {
  return uuid_;
}
inline void Game2Match_CancelMatch::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// -------------------------------------------------------------------

// Game2Client_WorldBossInfo

// required uint32 uiBossId = 1;
inline bool Game2Client_WorldBossInfo::has_uibossid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Game2Client_WorldBossInfo::set_has_uibossid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Game2Client_WorldBossInfo::clear_has_uibossid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Game2Client_WorldBossInfo::clear_uibossid() {
  uibossid_ = 0u;
  clear_has_uibossid();
}
inline ::google::protobuf::uint32 Game2Client_WorldBossInfo::uibossid() const {
  return uibossid_;
}
inline void Game2Client_WorldBossInfo::set_uibossid(::google::protobuf::uint32 value) {
  set_has_uibossid();
  uibossid_ = value;
}

// required uint32 uiBossLevel = 2;
inline bool Game2Client_WorldBossInfo::has_uibosslevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Game2Client_WorldBossInfo::set_has_uibosslevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Game2Client_WorldBossInfo::clear_has_uibosslevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Game2Client_WorldBossInfo::clear_uibosslevel() {
  uibosslevel_ = 0u;
  clear_has_uibosslevel();
}
inline ::google::protobuf::uint32 Game2Client_WorldBossInfo::uibosslevel() const {
  return uibosslevel_;
}
inline void Game2Client_WorldBossInfo::set_uibosslevel(::google::protobuf::uint32 value) {
  set_has_uibosslevel();
  uibosslevel_ = value;
}

// required uint32 uiExpiryTime = 3;
inline bool Game2Client_WorldBossInfo::has_uiexpirytime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Game2Client_WorldBossInfo::set_has_uiexpirytime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Game2Client_WorldBossInfo::clear_has_uiexpirytime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Game2Client_WorldBossInfo::clear_uiexpirytime() {
  uiexpirytime_ = 0u;
  clear_has_uiexpirytime();
}
inline ::google::protobuf::uint32 Game2Client_WorldBossInfo::uiexpirytime() const {
  return uiexpirytime_;
}
inline void Game2Client_WorldBossInfo::set_uiexpirytime(::google::protobuf::uint32 value) {
  set_has_uiexpirytime();
  uiexpirytime_ = value;
}

// required uint64 uiBossHp = 4;
inline bool Game2Client_WorldBossInfo::has_uibosshp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Game2Client_WorldBossInfo::set_has_uibosshp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Game2Client_WorldBossInfo::clear_has_uibosshp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Game2Client_WorldBossInfo::clear_uibosshp() {
  uibosshp_ = GOOGLE_ULONGLONG(0);
  clear_has_uibosshp();
}
inline ::google::protobuf::uint64 Game2Client_WorldBossInfo::uibosshp() const {
  return uibosshp_;
}
inline void Game2Client_WorldBossInfo::set_uibosshp(::google::protobuf::uint64 value) {
  set_has_uibosshp();
  uibosshp_ = value;
}

// -------------------------------------------------------------------

// Game2Battle_WorldBossStart

// required uint32 uiBossId = 1;
inline bool Game2Battle_WorldBossStart::has_uibossid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Game2Battle_WorldBossStart::set_has_uibossid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Game2Battle_WorldBossStart::clear_has_uibossid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Game2Battle_WorldBossStart::clear_uibossid() {
  uibossid_ = 0u;
  clear_has_uibossid();
}
inline ::google::protobuf::uint32 Game2Battle_WorldBossStart::uibossid() const {
  return uibossid_;
}
inline void Game2Battle_WorldBossStart::set_uibossid(::google::protobuf::uint32 value) {
  set_has_uibossid();
  uibossid_ = value;
}

// required uint32 uiBossLevel = 2;
inline bool Game2Battle_WorldBossStart::has_uibosslevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Game2Battle_WorldBossStart::set_has_uibosslevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Game2Battle_WorldBossStart::clear_has_uibosslevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Game2Battle_WorldBossStart::clear_uibosslevel() {
  uibosslevel_ = 0u;
  clear_has_uibosslevel();
}
inline ::google::protobuf::uint32 Game2Battle_WorldBossStart::uibosslevel() const {
  return uibosslevel_;
}
inline void Game2Battle_WorldBossStart::set_uibosslevel(::google::protobuf::uint32 value) {
  set_has_uibosslevel();
  uibosslevel_ = value;
}

// required uint32 uiExpiryTime = 3;
inline bool Game2Battle_WorldBossStart::has_uiexpirytime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Game2Battle_WorldBossStart::set_has_uiexpirytime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Game2Battle_WorldBossStart::clear_has_uiexpirytime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Game2Battle_WorldBossStart::clear_uiexpirytime() {
  uiexpirytime_ = 0u;
  clear_has_uiexpirytime();
}
inline ::google::protobuf::uint32 Game2Battle_WorldBossStart::uiexpirytime() const {
  return uiexpirytime_;
}
inline void Game2Battle_WorldBossStart::set_uiexpirytime(::google::protobuf::uint32 value) {
  set_has_uiexpirytime();
  uiexpirytime_ = value;
}

// required uint64 uiHp = 4;
inline bool Game2Battle_WorldBossStart::has_uihp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Game2Battle_WorldBossStart::set_has_uihp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Game2Battle_WorldBossStart::clear_has_uihp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Game2Battle_WorldBossStart::clear_uihp() {
  uihp_ = GOOGLE_ULONGLONG(0);
  clear_has_uihp();
}
inline ::google::protobuf::uint64 Game2Battle_WorldBossStart::uihp() const {
  return uihp_;
}
inline void Game2Battle_WorldBossStart::set_uihp(::google::protobuf::uint64 value) {
  set_has_uihp();
  uihp_ = value;
}

// -------------------------------------------------------------------

// Client2Game_WorldBossBid

// required uint32 uiItemIndex = 1;
inline bool Client2Game_WorldBossBid::has_uiitemindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Client2Game_WorldBossBid::set_has_uiitemindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Client2Game_WorldBossBid::clear_has_uiitemindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Client2Game_WorldBossBid::clear_uiitemindex() {
  uiitemindex_ = 0u;
  clear_has_uiitemindex();
}
inline ::google::protobuf::uint32 Client2Game_WorldBossBid::uiitemindex() const {
  return uiitemindex_;
}
inline void Client2Game_WorldBossBid::set_uiitemindex(::google::protobuf::uint32 value) {
  set_has_uiitemindex();
  uiitemindex_ = value;
}

// required uint32 uiPrice = 2;
inline bool Client2Game_WorldBossBid::has_uiprice() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Client2Game_WorldBossBid::set_has_uiprice() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Client2Game_WorldBossBid::clear_has_uiprice() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Client2Game_WorldBossBid::clear_uiprice() {
  uiprice_ = 0u;
  clear_has_uiprice();
}
inline ::google::protobuf::uint32 Client2Game_WorldBossBid::uiprice() const {
  return uiprice_;
}
inline void Client2Game_WorldBossBid::set_uiprice(::google::protobuf::uint32 value) {
  set_has_uiprice();
  uiprice_ = value;
}

// -------------------------------------------------------------------

// Game2Battle_WorldBossBid

// required uint32 uiItemIndex = 1;
inline bool Game2Battle_WorldBossBid::has_uiitemindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Game2Battle_WorldBossBid::set_has_uiitemindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Game2Battle_WorldBossBid::clear_has_uiitemindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Game2Battle_WorldBossBid::clear_uiitemindex() {
  uiitemindex_ = 0u;
  clear_has_uiitemindex();
}
inline ::google::protobuf::uint32 Game2Battle_WorldBossBid::uiitemindex() const {
  return uiitemindex_;
}
inline void Game2Battle_WorldBossBid::set_uiitemindex(::google::protobuf::uint32 value) {
  set_has_uiitemindex();
  uiitemindex_ = value;
}

// required uint32 uiPrice = 2;
inline bool Game2Battle_WorldBossBid::has_uiprice() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Game2Battle_WorldBossBid::set_has_uiprice() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Game2Battle_WorldBossBid::clear_has_uiprice() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Game2Battle_WorldBossBid::clear_uiprice() {
  uiprice_ = 0u;
  clear_has_uiprice();
}
inline ::google::protobuf::uint32 Game2Battle_WorldBossBid::uiprice() const {
  return uiprice_;
}
inline void Game2Battle_WorldBossBid::set_uiprice(::google::protobuf::uint32 value) {
  set_has_uiprice();
  uiprice_ = value;
}

// -------------------------------------------------------------------

// Game2Client_WolrdBoss_SaleHistory

// repeated .proto.message.WolrdBossSaledItem item = 1;
inline int Game2Client_WolrdBoss_SaleHistory::item_size() const {
  return item_.size();
}
inline void Game2Client_WolrdBoss_SaleHistory::clear_item() {
  item_.Clear();
}
inline const ::proto::message::WolrdBossSaledItem& Game2Client_WolrdBoss_SaleHistory::item(int index) const {
  return item_.Get(index);
}
inline ::proto::message::WolrdBossSaledItem* Game2Client_WolrdBoss_SaleHistory::mutable_item(int index) {
  return item_.Mutable(index);
}
inline ::proto::message::WolrdBossSaledItem* Game2Client_WolrdBoss_SaleHistory::add_item() {
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::WolrdBossSaledItem >&
Game2Client_WolrdBoss_SaleHistory::item() const {
  return item_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::WolrdBossSaledItem >*
Game2Client_WolrdBoss_SaleHistory::mutable_item() {
  return &item_;
}

// -------------------------------------------------------------------

// Map_CS_TicketBossInfo

// required uint32 uiTableId = 1;
inline bool Map_CS_TicketBossInfo::has_uitableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Map_CS_TicketBossInfo::set_has_uitableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Map_CS_TicketBossInfo::clear_has_uitableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Map_CS_TicketBossInfo::clear_uitableid() {
  uitableid_ = 0u;
  clear_has_uitableid();
}
inline ::google::protobuf::uint32 Map_CS_TicketBossInfo::uitableid() const {
  return uitableid_;
}
inline void Map_CS_TicketBossInfo::set_uitableid(::google::protobuf::uint32 value) {
  set_has_uitableid();
  uitableid_ = value;
}

// -------------------------------------------------------------------

// Map_SC_TicketBossInfo

// repeated uint32 uiTableId = 1;
inline int Map_SC_TicketBossInfo::uitableid_size() const {
  return uitableid_.size();
}
inline void Map_SC_TicketBossInfo::clear_uitableid() {
  uitableid_.Clear();
}
inline ::google::protobuf::uint32 Map_SC_TicketBossInfo::uitableid(int index) const {
  return uitableid_.Get(index);
}
inline void Map_SC_TicketBossInfo::set_uitableid(int index, ::google::protobuf::uint32 value) {
  uitableid_.Set(index, value);
}
inline void Map_SC_TicketBossInfo::add_uitableid(::google::protobuf::uint32 value) {
  uitableid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Map_SC_TicketBossInfo::uitableid() const {
  return uitableid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Map_SC_TicketBossInfo::mutable_uitableid() {
  return &uitableid_;
}

// repeated uint32 uiBossId = 2;
inline int Map_SC_TicketBossInfo::uibossid_size() const {
  return uibossid_.size();
}
inline void Map_SC_TicketBossInfo::clear_uibossid() {
  uibossid_.Clear();
}
inline ::google::protobuf::uint32 Map_SC_TicketBossInfo::uibossid(int index) const {
  return uibossid_.Get(index);
}
inline void Map_SC_TicketBossInfo::set_uibossid(int index, ::google::protobuf::uint32 value) {
  uibossid_.Set(index, value);
}
inline void Map_SC_TicketBossInfo::add_uibossid(::google::protobuf::uint32 value) {
  uibossid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Map_SC_TicketBossInfo::uibossid() const {
  return uibossid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Map_SC_TicketBossInfo::mutable_uibossid() {
  return &uibossid_;
}

// repeated uint64 uiBossHp = 3;
inline int Map_SC_TicketBossInfo::uibosshp_size() const {
  return uibosshp_.size();
}
inline void Map_SC_TicketBossInfo::clear_uibosshp() {
  uibosshp_.Clear();
}
inline ::google::protobuf::uint64 Map_SC_TicketBossInfo::uibosshp(int index) const {
  return uibosshp_.Get(index);
}
inline void Map_SC_TicketBossInfo::set_uibosshp(int index, ::google::protobuf::uint64 value) {
  uibosshp_.Set(index, value);
}
inline void Map_SC_TicketBossInfo::add_uibosshp(::google::protobuf::uint64 value) {
  uibosshp_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Map_SC_TicketBossInfo::uibosshp() const {
  return uibosshp_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Map_SC_TicketBossInfo::mutable_uibosshp() {
  return &uibosshp_;
}

// repeated uint32 uiRefreshTime = 4;
inline int Map_SC_TicketBossInfo::uirefreshtime_size() const {
  return uirefreshtime_.size();
}
inline void Map_SC_TicketBossInfo::clear_uirefreshtime() {
  uirefreshtime_.Clear();
}
inline ::google::protobuf::uint32 Map_SC_TicketBossInfo::uirefreshtime(int index) const {
  return uirefreshtime_.Get(index);
}
inline void Map_SC_TicketBossInfo::set_uirefreshtime(int index, ::google::protobuf::uint32 value) {
  uirefreshtime_.Set(index, value);
}
inline void Map_SC_TicketBossInfo::add_uirefreshtime(::google::protobuf::uint32 value) {
  uirefreshtime_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Map_SC_TicketBossInfo::uirefreshtime() const {
  return uirefreshtime_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Map_SC_TicketBossInfo::mutable_uirefreshtime() {
  return &uirefreshtime_;
}

// -------------------------------------------------------------------

// Map_CS_TicketBossChallenge

// required uint32 uiTableId = 1;
inline bool Map_CS_TicketBossChallenge::has_uitableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Map_CS_TicketBossChallenge::set_has_uitableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Map_CS_TicketBossChallenge::clear_has_uitableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Map_CS_TicketBossChallenge::clear_uitableid() {
  uitableid_ = 0u;
  clear_has_uitableid();
}
inline ::google::protobuf::uint32 Map_CS_TicketBossChallenge::uitableid() const {
  return uitableid_;
}
inline void Map_CS_TicketBossChallenge::set_uitableid(::google::protobuf::uint32 value) {
  set_has_uitableid();
  uitableid_ = value;
}

// -------------------------------------------------------------------

// Map_SC_TicketBossChallenge

// required uint32 uiTableId = 1;
inline bool Map_SC_TicketBossChallenge::has_uitableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Map_SC_TicketBossChallenge::set_has_uitableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Map_SC_TicketBossChallenge::clear_has_uitableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Map_SC_TicketBossChallenge::clear_uitableid() {
  uitableid_ = 0u;
  clear_has_uitableid();
}
inline ::google::protobuf::uint32 Map_SC_TicketBossChallenge::uitableid() const {
  return uitableid_;
}
inline void Map_SC_TicketBossChallenge::set_uitableid(::google::protobuf::uint32 value) {
  set_has_uitableid();
  uitableid_ = value;
}

// required uint32 uiResult = 2;
inline bool Map_SC_TicketBossChallenge::has_uiresult() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Map_SC_TicketBossChallenge::set_has_uiresult() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Map_SC_TicketBossChallenge::clear_has_uiresult() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Map_SC_TicketBossChallenge::clear_uiresult() {
  uiresult_ = 0u;
  clear_has_uiresult();
}
inline ::google::protobuf::uint32 Map_SC_TicketBossChallenge::uiresult() const {
  return uiresult_;
}
inline void Map_SC_TicketBossChallenge::set_uiresult(::google::protobuf::uint32 value) {
  set_has_uiresult();
  uiresult_ = value;
}

// -------------------------------------------------------------------

// Map_CS_ChatMark

// required int32 channel = 1;
inline bool Map_CS_ChatMark::has_channel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Map_CS_ChatMark::set_has_channel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Map_CS_ChatMark::clear_has_channel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Map_CS_ChatMark::clear_channel() {
  channel_ = 0;
  clear_has_channel();
}
inline ::google::protobuf::int32 Map_CS_ChatMark::channel() const {
  return channel_;
}
inline void Map_CS_ChatMark::set_channel(::google::protobuf::int32 value) {
  set_has_channel();
  channel_ = value;
}

// -------------------------------------------------------------------

// Map_CS_TakeDropItem

// required uint32 uiKey = 1;
inline bool Map_CS_TakeDropItem::has_uikey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Map_CS_TakeDropItem::set_has_uikey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Map_CS_TakeDropItem::clear_has_uikey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Map_CS_TakeDropItem::clear_uikey() {
  uikey_ = 0u;
  clear_has_uikey();
}
inline ::google::protobuf::uint32 Map_CS_TakeDropItem::uikey() const {
  return uikey_;
}
inline void Map_CS_TakeDropItem::set_uikey(::google::protobuf::uint32 value) {
  set_has_uikey();
  uikey_ = value;
}

// required uint32 uiTableId = 2;
inline bool Map_CS_TakeDropItem::has_uitableid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Map_CS_TakeDropItem::set_has_uitableid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Map_CS_TakeDropItem::clear_has_uitableid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Map_CS_TakeDropItem::clear_uitableid() {
  uitableid_ = 0u;
  clear_has_uitableid();
}
inline ::google::protobuf::uint32 Map_CS_TakeDropItem::uitableid() const {
  return uitableid_;
}
inline void Map_CS_TakeDropItem::set_uitableid(::google::protobuf::uint32 value) {
  set_has_uitableid();
  uitableid_ = value;
}

// required uint32 uiIndex = 3;
inline bool Map_CS_TakeDropItem::has_uiindex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Map_CS_TakeDropItem::set_has_uiindex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Map_CS_TakeDropItem::clear_has_uiindex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Map_CS_TakeDropItem::clear_uiindex() {
  uiindex_ = 0u;
  clear_has_uiindex();
}
inline ::google::protobuf::uint32 Map_CS_TakeDropItem::uiindex() const {
  return uiindex_;
}
inline void Map_CS_TakeDropItem::set_uiindex(::google::protobuf::uint32 value) {
  set_has_uiindex();
  uiindex_ = value;
}

// -------------------------------------------------------------------

// Map_SC_TakeDropItem

// required uint32 uiResult = 1;
inline bool Map_SC_TakeDropItem::has_uiresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Map_SC_TakeDropItem::set_has_uiresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Map_SC_TakeDropItem::clear_has_uiresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Map_SC_TakeDropItem::clear_uiresult() {
  uiresult_ = 0u;
  clear_has_uiresult();
}
inline ::google::protobuf::uint32 Map_SC_TakeDropItem::uiresult() const {
  return uiresult_;
}
inline void Map_SC_TakeDropItem::set_uiresult(::google::protobuf::uint32 value) {
  set_has_uiresult();
  uiresult_ = value;
}

// -------------------------------------------------------------------

// Game2Battle_TicketBossChallenge

// required uint32 uiTableId = 1;
inline bool Game2Battle_TicketBossChallenge::has_uitableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Game2Battle_TicketBossChallenge::set_has_uitableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Game2Battle_TicketBossChallenge::clear_has_uitableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Game2Battle_TicketBossChallenge::clear_uitableid() {
  uitableid_ = 0u;
  clear_has_uitableid();
}
inline ::google::protobuf::uint32 Game2Battle_TicketBossChallenge::uitableid() const {
  return uitableid_;
}
inline void Game2Battle_TicketBossChallenge::set_uitableid(::google::protobuf::uint32 value) {
  set_has_uitableid();
  uitableid_ = value;
}

// -------------------------------------------------------------------

// Game2Battle_TakeDropItem

// required uint32 uiKey = 1;
inline bool Game2Battle_TakeDropItem::has_uikey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Game2Battle_TakeDropItem::set_has_uikey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Game2Battle_TakeDropItem::clear_has_uikey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Game2Battle_TakeDropItem::clear_uikey() {
  uikey_ = 0u;
  clear_has_uikey();
}
inline ::google::protobuf::uint32 Game2Battle_TakeDropItem::uikey() const {
  return uikey_;
}
inline void Game2Battle_TakeDropItem::set_uikey(::google::protobuf::uint32 value) {
  set_has_uikey();
  uikey_ = value;
}

// required uint32 uiTableId = 2;
inline bool Game2Battle_TakeDropItem::has_uitableid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Game2Battle_TakeDropItem::set_has_uitableid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Game2Battle_TakeDropItem::clear_has_uitableid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Game2Battle_TakeDropItem::clear_uitableid() {
  uitableid_ = 0u;
  clear_has_uitableid();
}
inline ::google::protobuf::uint32 Game2Battle_TakeDropItem::uitableid() const {
  return uitableid_;
}
inline void Game2Battle_TakeDropItem::set_uitableid(::google::protobuf::uint32 value) {
  set_has_uitableid();
  uitableid_ = value;
}

// required uint32 uiIndex = 3;
inline bool Game2Battle_TakeDropItem::has_uiindex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Game2Battle_TakeDropItem::set_has_uiindex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Game2Battle_TakeDropItem::clear_has_uiindex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Game2Battle_TakeDropItem::clear_uiindex() {
  uiindex_ = 0u;
  clear_has_uiindex();
}
inline ::google::protobuf::uint32 Game2Battle_TakeDropItem::uiindex() const {
  return uiindex_;
}
inline void Game2Battle_TakeDropItem::set_uiindex(::google::protobuf::uint32 value) {
  set_has_uiindex();
  uiindex_ = value;
}

// required uint32 uiNullGirdNum = 4;
inline bool Game2Battle_TakeDropItem::has_uinullgirdnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Game2Battle_TakeDropItem::set_has_uinullgirdnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Game2Battle_TakeDropItem::clear_has_uinullgirdnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Game2Battle_TakeDropItem::clear_uinullgirdnum() {
  uinullgirdnum_ = 0u;
  clear_has_uinullgirdnum();
}
inline ::google::protobuf::uint32 Game2Battle_TakeDropItem::uinullgirdnum() const {
  return uinullgirdnum_;
}
inline void Game2Battle_TakeDropItem::set_uinullgirdnum(::google::protobuf::uint32 value) {
  set_has_uinullgirdnum();
  uinullgirdnum_ = value;
}

// -------------------------------------------------------------------

// Game2Match_CreateRoom

// optional int32 obj = 1;
inline bool Game2Match_CreateRoom::has_obj() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Game2Match_CreateRoom::set_has_obj() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Game2Match_CreateRoom::clear_has_obj() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Game2Match_CreateRoom::clear_obj() {
  obj_ = 0;
  clear_has_obj();
}
inline ::google::protobuf::int32 Game2Match_CreateRoom::obj() const {
  return obj_;
}
inline void Game2Match_CreateRoom::set_obj(::google::protobuf::int32 value) {
  set_has_obj();
  obj_ = value;
}

// optional .proto.message.MatchPlayerInfo sPlyInfo = 2;
inline bool Game2Match_CreateRoom::has_splyinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Game2Match_CreateRoom::set_has_splyinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Game2Match_CreateRoom::clear_has_splyinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Game2Match_CreateRoom::clear_splyinfo() {
  if (splyinfo_ != NULL) splyinfo_->::proto::message::MatchPlayerInfo::Clear();
  clear_has_splyinfo();
}
inline const ::proto::message::MatchPlayerInfo& Game2Match_CreateRoom::splyinfo() const {
  return splyinfo_ != NULL ? *splyinfo_ : *default_instance_->splyinfo_;
}
inline ::proto::message::MatchPlayerInfo* Game2Match_CreateRoom::mutable_splyinfo() {
  set_has_splyinfo();
  if (splyinfo_ == NULL) splyinfo_ = new ::proto::message::MatchPlayerInfo;
  return splyinfo_;
}
inline ::proto::message::MatchPlayerInfo* Game2Match_CreateRoom::release_splyinfo() {
  clear_has_splyinfo();
  ::proto::message::MatchPlayerInfo* temp = splyinfo_;
  splyinfo_ = NULL;
  return temp;
}
inline void Game2Match_CreateRoom::set_allocated_splyinfo(::proto::message::MatchPlayerInfo* splyinfo) {
  delete splyinfo_;
  splyinfo_ = splyinfo;
  if (splyinfo) {
    set_has_splyinfo();
  } else {
    clear_has_splyinfo();
  }
}

// -------------------------------------------------------------------

// Game2Match_GetRoomList

// optional int32 obj = 1;
inline bool Game2Match_GetRoomList::has_obj() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Game2Match_GetRoomList::set_has_obj() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Game2Match_GetRoomList::clear_has_obj() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Game2Match_GetRoomList::clear_obj() {
  obj_ = 0;
  clear_has_obj();
}
inline ::google::protobuf::int32 Game2Match_GetRoomList::obj() const {
  return obj_;
}
inline void Game2Match_GetRoomList::set_obj(::google::protobuf::int32 value) {
  set_has_obj();
  obj_ = value;
}

// -------------------------------------------------------------------

// Game2Battle_UpdateHeadInfo

// optional .proto.message.BattleSingleHeadInfo info = 1;
inline bool Game2Battle_UpdateHeadInfo::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Game2Battle_UpdateHeadInfo::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Game2Battle_UpdateHeadInfo::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Game2Battle_UpdateHeadInfo::clear_info() {
  if (info_ != NULL) info_->::proto::message::BattleSingleHeadInfo::Clear();
  clear_has_info();
}
inline const ::proto::message::BattleSingleHeadInfo& Game2Battle_UpdateHeadInfo::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::proto::message::BattleSingleHeadInfo* Game2Battle_UpdateHeadInfo::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::proto::message::BattleSingleHeadInfo;
  return info_;
}
inline ::proto::message::BattleSingleHeadInfo* Game2Battle_UpdateHeadInfo::release_info() {
  clear_has_info();
  ::proto::message::BattleSingleHeadInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void Game2Battle_UpdateHeadInfo::set_allocated_info(::proto::message::BattleSingleHeadInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// Game2Match_CreateTerritoryBattle

// repeated .proto.message.TBFieldInfo info = 1;
inline int Game2Match_CreateTerritoryBattle::info_size() const {
  return info_.size();
}
inline void Game2Match_CreateTerritoryBattle::clear_info() {
  info_.Clear();
}
inline const ::proto::message::TBFieldInfo& Game2Match_CreateTerritoryBattle::info(int index) const {
  return info_.Get(index);
}
inline ::proto::message::TBFieldInfo* Game2Match_CreateTerritoryBattle::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::proto::message::TBFieldInfo* Game2Match_CreateTerritoryBattle::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::message::TBFieldInfo >&
Game2Match_CreateTerritoryBattle::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::message::TBFieldInfo >*
Game2Match_CreateTerritoryBattle::mutable_info() {
  return &info_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_map_2eproto__INCLUDED
