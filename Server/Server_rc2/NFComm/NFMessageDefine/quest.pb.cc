// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: quest.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "quest.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

namespace {

const ::google::protobuf::Descriptor* ProtoQuestMain_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoQuestMain_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoQuestActive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoQuestActive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoQuestFuben_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoQuestFuben_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoQuestDailyKillMonster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoQuestDailyKillMonster_reflection_ = NULL;
const ::google::protobuf::Descriptor* SingleQuestBranch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleQuestBranch_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoQuestBranch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoQuestBranch_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoQuestCycle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoQuestCycle_reflection_ = NULL;
const ::google::protobuf::Descriptor* Quest_SC_UpdateLoopQuestData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Quest_SC_UpdateLoopQuestData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoQuestData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoQuestData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Quest_CS_GetQuestInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Quest_CS_GetQuestInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Quest_SC_GetQuestInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Quest_SC_GetQuestInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Quest_CS_GetQuestData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Quest_CS_GetQuestData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Quest_SC_GetQuestData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Quest_SC_GetQuestData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Quest_CS_AddQuest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Quest_CS_AddQuest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Quest_SC_AddQuest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Quest_SC_AddQuest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Quest_CS_FinishQuest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Quest_CS_FinishQuest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Quest_SC_FinishQuest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Quest_SC_FinishQuest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Quest_CS_QuitQuest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Quest_CS_QuitQuest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Quest_SC_QuitQuest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Quest_SC_QuitQuest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Quest_CS_QuestFinishList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Quest_CS_QuestFinishList_reflection_ = NULL;
const ::google::protobuf::Descriptor* Quest_SC_QuestFinishList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Quest_SC_QuestFinishList_reflection_ = NULL;
const ::google::protobuf::Descriptor* Quest_CS_QuestGotoMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Quest_CS_QuestGotoMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* Quest_SC_QuestGotoMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Quest_SC_QuestGotoMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* Quest_SC_UpdateQuestInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Quest_SC_UpdateQuestInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Quest_SC_UpdateAutoFinishQuest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Quest_SC_UpdateAutoFinishQuest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Quest_SC_UpdateAutoNewQuest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Quest_SC_UpdateAutoNewQuest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoQuestItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoQuestItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Quest_SC_UpdateQuestAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Quest_SC_UpdateQuestAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Quest_SC_AfterLoopQuestAllAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Quest_SC_AfterLoopQuestAllAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Quest_SC_UpdateQuestData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Quest_SC_UpdateQuestData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Quest_CS_PublishHelpItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Quest_CS_PublishHelpItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Quest_SC_PublishHelpItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Quest_SC_PublishHelpItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Quest_CS_HelpOtherItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Quest_CS_HelpOtherItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Quest_SC_HelpOtherItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Quest_SC_HelpOtherItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Quest_SC_DelHelpItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Quest_SC_DelHelpItem_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_quest_2eproto() {
  protobuf_AddDesc_quest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "quest.proto");
  GOOGLE_CHECK(file != NULL);
  ProtoQuestMain_descriptor_ = file->message_type(0);
  static const int ProtoQuestMain_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoQuestMain, curquestid_),
  };
  ProtoQuestMain_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoQuestMain_descriptor_,
      ProtoQuestMain::default_instance_,
      ProtoQuestMain_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoQuestMain, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoQuestMain, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoQuestMain));
  ProtoQuestActive_descriptor_ = file->message_type(1);
  static const int ProtoQuestActive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoQuestActive, curquestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoQuestActive, lastgiveup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoQuestActive, awardcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoQuestActive, receivetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoQuestActive, cleantime_),
  };
  ProtoQuestActive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoQuestActive_descriptor_,
      ProtoQuestActive::default_instance_,
      ProtoQuestActive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoQuestActive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoQuestActive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoQuestActive));
  ProtoQuestFuben_descriptor_ = file->message_type(2);
  static const int ProtoQuestFuben_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoQuestFuben, curquestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoQuestFuben, awardcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoQuestFuben, cleantime_),
  };
  ProtoQuestFuben_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoQuestFuben_descriptor_,
      ProtoQuestFuben::default_instance_,
      ProtoQuestFuben_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoQuestFuben, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoQuestFuben, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoQuestFuben));
  ProtoQuestDailyKillMonster_descriptor_ = file->message_type(3);
  static const int ProtoQuestDailyKillMonster_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoQuestDailyKillMonster, curquestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoQuestDailyKillMonster, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoQuestDailyKillMonster, cleantime_),
  };
  ProtoQuestDailyKillMonster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoQuestDailyKillMonster_descriptor_,
      ProtoQuestDailyKillMonster::default_instance_,
      ProtoQuestDailyKillMonster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoQuestDailyKillMonster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoQuestDailyKillMonster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoQuestDailyKillMonster));
  SingleQuestBranch_descriptor_ = file->message_type(4);
  static const int SingleQuestBranch_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleQuestBranch, curquestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleQuestBranch, nprogress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleQuestBranch, isdone_),
  };
  SingleQuestBranch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SingleQuestBranch_descriptor_,
      SingleQuestBranch::default_instance_,
      SingleQuestBranch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleQuestBranch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleQuestBranch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SingleQuestBranch));
  ProtoQuestBranch_descriptor_ = file->message_type(5);
  static const int ProtoQuestBranch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoQuestBranch, curquest_),
  };
  ProtoQuestBranch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoQuestBranch_descriptor_,
      ProtoQuestBranch::default_instance_,
      ProtoQuestBranch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoQuestBranch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoQuestBranch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoQuestBranch));
  ProtoQuestCycle_descriptor_ = file->message_type(6);
  static const int ProtoQuestCycle_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoQuestCycle, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoQuestCycle, curquestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoQuestCycle, roundnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoQuestCycle, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoQuestCycle, receivetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoQuestCycle, cleantime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoQuestCycle, daynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoQuestCycle, progressnum_),
  };
  ProtoQuestCycle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoQuestCycle_descriptor_,
      ProtoQuestCycle::default_instance_,
      ProtoQuestCycle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoQuestCycle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoQuestCycle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoQuestCycle));
  Quest_SC_UpdateLoopQuestData_descriptor_ = file->message_type(7);
  static const int Quest_SC_UpdateLoopQuestData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_UpdateLoopQuestData, questcycle_),
  };
  Quest_SC_UpdateLoopQuestData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Quest_SC_UpdateLoopQuestData_descriptor_,
      Quest_SC_UpdateLoopQuestData::default_instance_,
      Quest_SC_UpdateLoopQuestData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_UpdateLoopQuestData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_UpdateLoopQuestData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Quest_SC_UpdateLoopQuestData));
  ProtoQuestData_descriptor_ = file->message_type(8);
  static const int ProtoQuestData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoQuestData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoQuestData, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoQuestData, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoQuestData, nprogress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoQuestData, isdone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoQuestData, ninitprogress_),
  };
  ProtoQuestData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoQuestData_descriptor_,
      ProtoQuestData::default_instance_,
      ProtoQuestData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoQuestData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoQuestData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoQuestData));
  Quest_CS_GetQuestInfo_descriptor_ = file->message_type(9);
  static const int Quest_CS_GetQuestInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_CS_GetQuestInfo, kind_),
  };
  Quest_CS_GetQuestInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Quest_CS_GetQuestInfo_descriptor_,
      Quest_CS_GetQuestInfo::default_instance_,
      Quest_CS_GetQuestInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_CS_GetQuestInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_CS_GetQuestInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Quest_CS_GetQuestInfo));
  Quest_SC_GetQuestInfo_descriptor_ = file->message_type(10);
  static const int Quest_SC_GetQuestInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_GetQuestInfo, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_GetQuestInfo, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_GetQuestInfo, questmain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_GetQuestInfo, questactive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_GetQuestInfo, questfuben_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_GetQuestInfo, questdailykillmonster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_GetQuestInfo, questbranch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_GetQuestInfo, questcycle_),
  };
  Quest_SC_GetQuestInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Quest_SC_GetQuestInfo_descriptor_,
      Quest_SC_GetQuestInfo::default_instance_,
      Quest_SC_GetQuestInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_GetQuestInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_GetQuestInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Quest_SC_GetQuestInfo));
  Quest_CS_GetQuestData_descriptor_ = file->message_type(11);
  static const int Quest_CS_GetQuestData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_CS_GetQuestData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_CS_GetQuestData, kind_),
  };
  Quest_CS_GetQuestData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Quest_CS_GetQuestData_descriptor_,
      Quest_CS_GetQuestData::default_instance_,
      Quest_CS_GetQuestData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_CS_GetQuestData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_CS_GetQuestData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Quest_CS_GetQuestData));
  Quest_SC_GetQuestData_descriptor_ = file->message_type(12);
  static const int Quest_SC_GetQuestData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_GetQuestData, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_GetQuestData, questdata_),
  };
  Quest_SC_GetQuestData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Quest_SC_GetQuestData_descriptor_,
      Quest_SC_GetQuestData::default_instance_,
      Quest_SC_GetQuestData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_GetQuestData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_GetQuestData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Quest_SC_GetQuestData));
  Quest_CS_AddQuest_descriptor_ = file->message_type(13);
  static const int Quest_CS_AddQuest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_CS_AddQuest, questid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_CS_AddQuest, kind_),
  };
  Quest_CS_AddQuest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Quest_CS_AddQuest_descriptor_,
      Quest_CS_AddQuest::default_instance_,
      Quest_CS_AddQuest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_CS_AddQuest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_CS_AddQuest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Quest_CS_AddQuest));
  Quest_SC_AddQuest_descriptor_ = file->message_type(14);
  static const int Quest_SC_AddQuest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_AddQuest, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_AddQuest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_AddQuest, kind_),
  };
  Quest_SC_AddQuest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Quest_SC_AddQuest_descriptor_,
      Quest_SC_AddQuest::default_instance_,
      Quest_SC_AddQuest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_AddQuest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_AddQuest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Quest_SC_AddQuest));
  Quest_CS_FinishQuest_descriptor_ = file->message_type(15);
  static const int Quest_CS_FinishQuest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_CS_FinishQuest, questid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_CS_FinishQuest, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_CS_FinishQuest, arg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_CS_FinishQuest, questresult_),
  };
  Quest_CS_FinishQuest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Quest_CS_FinishQuest_descriptor_,
      Quest_CS_FinishQuest::default_instance_,
      Quest_CS_FinishQuest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_CS_FinishQuest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_CS_FinishQuest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Quest_CS_FinishQuest));
  Quest_SC_FinishQuest_descriptor_ = file->message_type(16);
  static const int Quest_SC_FinishQuest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_FinishQuest, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_FinishQuest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_FinishQuest, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_FinishQuest, questresult_),
  };
  Quest_SC_FinishQuest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Quest_SC_FinishQuest_descriptor_,
      Quest_SC_FinishQuest::default_instance_,
      Quest_SC_FinishQuest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_FinishQuest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_FinishQuest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Quest_SC_FinishQuest));
  Quest_CS_QuitQuest_descriptor_ = file->message_type(17);
  static const int Quest_CS_QuitQuest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_CS_QuitQuest, questid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_CS_QuitQuest, kind_),
  };
  Quest_CS_QuitQuest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Quest_CS_QuitQuest_descriptor_,
      Quest_CS_QuitQuest::default_instance_,
      Quest_CS_QuitQuest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_CS_QuitQuest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_CS_QuitQuest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Quest_CS_QuitQuest));
  Quest_SC_QuitQuest_descriptor_ = file->message_type(18);
  static const int Quest_SC_QuitQuest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_QuitQuest, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_QuitQuest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_QuitQuest, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_QuitQuest, isauto_),
  };
  Quest_SC_QuitQuest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Quest_SC_QuitQuest_descriptor_,
      Quest_SC_QuitQuest::default_instance_,
      Quest_SC_QuitQuest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_QuitQuest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_QuitQuest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Quest_SC_QuitQuest));
  Quest_CS_QuestFinishList_descriptor_ = file->message_type(19);
  static const int Quest_CS_QuestFinishList_offsets_[1] = {
  };
  Quest_CS_QuestFinishList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Quest_CS_QuestFinishList_descriptor_,
      Quest_CS_QuestFinishList::default_instance_,
      Quest_CS_QuestFinishList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_CS_QuestFinishList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_CS_QuestFinishList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Quest_CS_QuestFinishList));
  Quest_SC_QuestFinishList_descriptor_ = file->message_type(20);
  static const int Quest_SC_QuestFinishList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_QuestFinishList, questid_),
  };
  Quest_SC_QuestFinishList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Quest_SC_QuestFinishList_descriptor_,
      Quest_SC_QuestFinishList::default_instance_,
      Quest_SC_QuestFinishList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_QuestFinishList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_QuestFinishList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Quest_SC_QuestFinishList));
  Quest_CS_QuestGotoMap_descriptor_ = file->message_type(21);
  static const int Quest_CS_QuestGotoMap_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_CS_QuestGotoMap, questid_),
  };
  Quest_CS_QuestGotoMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Quest_CS_QuestGotoMap_descriptor_,
      Quest_CS_QuestGotoMap::default_instance_,
      Quest_CS_QuestGotoMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_CS_QuestGotoMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_CS_QuestGotoMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Quest_CS_QuestGotoMap));
  Quest_SC_QuestGotoMap_descriptor_ = file->message_type(22);
  static const int Quest_SC_QuestGotoMap_offsets_[1] = {
  };
  Quest_SC_QuestGotoMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Quest_SC_QuestGotoMap_descriptor_,
      Quest_SC_QuestGotoMap::default_instance_,
      Quest_SC_QuestGotoMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_QuestGotoMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_QuestGotoMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Quest_SC_QuestGotoMap));
  Quest_SC_UpdateQuestInfo_descriptor_ = file->message_type(23);
  static const int Quest_SC_UpdateQuestInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_UpdateQuestInfo, questmain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_UpdateQuestInfo, questactive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_UpdateQuestInfo, questfuben_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_UpdateQuestInfo, questdailykillmonster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_UpdateQuestInfo, questbranch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_UpdateQuestInfo, questcycle_),
  };
  Quest_SC_UpdateQuestInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Quest_SC_UpdateQuestInfo_descriptor_,
      Quest_SC_UpdateQuestInfo::default_instance_,
      Quest_SC_UpdateQuestInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_UpdateQuestInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_UpdateQuestInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Quest_SC_UpdateQuestInfo));
  Quest_SC_UpdateAutoFinishQuest_descriptor_ = file->message_type(24);
  static const int Quest_SC_UpdateAutoFinishQuest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_UpdateAutoFinishQuest, questid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_UpdateAutoFinishQuest, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_UpdateAutoFinishQuest, questresult_),
  };
  Quest_SC_UpdateAutoFinishQuest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Quest_SC_UpdateAutoFinishQuest_descriptor_,
      Quest_SC_UpdateAutoFinishQuest::default_instance_,
      Quest_SC_UpdateAutoFinishQuest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_UpdateAutoFinishQuest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_UpdateAutoFinishQuest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Quest_SC_UpdateAutoFinishQuest));
  Quest_SC_UpdateAutoNewQuest_descriptor_ = file->message_type(25);
  static const int Quest_SC_UpdateAutoNewQuest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_UpdateAutoNewQuest, questid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_UpdateAutoNewQuest, kind_),
  };
  Quest_SC_UpdateAutoNewQuest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Quest_SC_UpdateAutoNewQuest_descriptor_,
      Quest_SC_UpdateAutoNewQuest::default_instance_,
      Quest_SC_UpdateAutoNewQuest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_UpdateAutoNewQuest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_UpdateAutoNewQuest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Quest_SC_UpdateAutoNewQuest));
  ProtoQuestItem_descriptor_ = file->message_type(26);
  static const int ProtoQuestItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoQuestItem, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoQuestItem, num_),
  };
  ProtoQuestItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoQuestItem_descriptor_,
      ProtoQuestItem::default_instance_,
      ProtoQuestItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoQuestItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoQuestItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoQuestItem));
  Quest_SC_UpdateQuestAward_descriptor_ = file->message_type(27);
  static const int Quest_SC_UpdateQuestAward_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_UpdateQuestAward, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_UpdateQuestAward, silver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_UpdateQuestAward, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_UpdateQuestAward, cropsvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_UpdateQuestAward, items_),
  };
  Quest_SC_UpdateQuestAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Quest_SC_UpdateQuestAward_descriptor_,
      Quest_SC_UpdateQuestAward::default_instance_,
      Quest_SC_UpdateQuestAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_UpdateQuestAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_UpdateQuestAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Quest_SC_UpdateQuestAward));
  Quest_SC_AfterLoopQuestAllAward_descriptor_ = file->message_type(28);
  static const int Quest_SC_AfterLoopQuestAllAward_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_AfterLoopQuestAllAward, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_AfterLoopQuestAllAward, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_AfterLoopQuestAllAward, silver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_AfterLoopQuestAllAward, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_AfterLoopQuestAllAward, cropsvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_AfterLoopQuestAllAward, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_AfterLoopQuestAllAward, isovertime_),
  };
  Quest_SC_AfterLoopQuestAllAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Quest_SC_AfterLoopQuestAllAward_descriptor_,
      Quest_SC_AfterLoopQuestAllAward::default_instance_,
      Quest_SC_AfterLoopQuestAllAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_AfterLoopQuestAllAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_AfterLoopQuestAllAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Quest_SC_AfterLoopQuestAllAward));
  Quest_SC_UpdateQuestData_descriptor_ = file->message_type(29);
  static const int Quest_SC_UpdateQuestData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_UpdateQuestData, questdata_),
  };
  Quest_SC_UpdateQuestData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Quest_SC_UpdateQuestData_descriptor_,
      Quest_SC_UpdateQuestData::default_instance_,
      Quest_SC_UpdateQuestData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_UpdateQuestData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_UpdateQuestData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Quest_SC_UpdateQuestData));
  Quest_CS_PublishHelpItem_descriptor_ = file->message_type(30);
  static const int Quest_CS_PublishHelpItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_CS_PublishHelpItem, questid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_CS_PublishHelpItem, num_),
  };
  Quest_CS_PublishHelpItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Quest_CS_PublishHelpItem_descriptor_,
      Quest_CS_PublishHelpItem::default_instance_,
      Quest_CS_PublishHelpItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_CS_PublishHelpItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_CS_PublishHelpItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Quest_CS_PublishHelpItem));
  Quest_SC_PublishHelpItem_descriptor_ = file->message_type(31);
  static const int Quest_SC_PublishHelpItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_PublishHelpItem, result_),
  };
  Quest_SC_PublishHelpItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Quest_SC_PublishHelpItem_descriptor_,
      Quest_SC_PublishHelpItem::default_instance_,
      Quest_SC_PublishHelpItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_PublishHelpItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_PublishHelpItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Quest_SC_PublishHelpItem));
  Quest_CS_HelpOtherItem_descriptor_ = file->message_type(32);
  static const int Quest_CS_HelpOtherItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_CS_HelpOtherItem, questid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_CS_HelpOtherItem, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_CS_HelpOtherItem, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_CS_HelpOtherItem, arg_),
  };
  Quest_CS_HelpOtherItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Quest_CS_HelpOtherItem_descriptor_,
      Quest_CS_HelpOtherItem::default_instance_,
      Quest_CS_HelpOtherItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_CS_HelpOtherItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_CS_HelpOtherItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Quest_CS_HelpOtherItem));
  Quest_SC_HelpOtherItem_descriptor_ = file->message_type(33);
  static const int Quest_SC_HelpOtherItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_HelpOtherItem, result_),
  };
  Quest_SC_HelpOtherItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Quest_SC_HelpOtherItem_descriptor_,
      Quest_SC_HelpOtherItem::default_instance_,
      Quest_SC_HelpOtherItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_HelpOtherItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_HelpOtherItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Quest_SC_HelpOtherItem));
  Quest_SC_DelHelpItem_descriptor_ = file->message_type(34);
  static const int Quest_SC_DelHelpItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_DelHelpItem, questid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_DelHelpItem, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_DelHelpItem, playerid_),
  };
  Quest_SC_DelHelpItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Quest_SC_DelHelpItem_descriptor_,
      Quest_SC_DelHelpItem::default_instance_,
      Quest_SC_DelHelpItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_DelHelpItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest_SC_DelHelpItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Quest_SC_DelHelpItem));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_quest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoQuestMain_descriptor_, &ProtoQuestMain::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoQuestActive_descriptor_, &ProtoQuestActive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoQuestFuben_descriptor_, &ProtoQuestFuben::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoQuestDailyKillMonster_descriptor_, &ProtoQuestDailyKillMonster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SingleQuestBranch_descriptor_, &SingleQuestBranch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoQuestBranch_descriptor_, &ProtoQuestBranch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoQuestCycle_descriptor_, &ProtoQuestCycle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Quest_SC_UpdateLoopQuestData_descriptor_, &Quest_SC_UpdateLoopQuestData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoQuestData_descriptor_, &ProtoQuestData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Quest_CS_GetQuestInfo_descriptor_, &Quest_CS_GetQuestInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Quest_SC_GetQuestInfo_descriptor_, &Quest_SC_GetQuestInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Quest_CS_GetQuestData_descriptor_, &Quest_CS_GetQuestData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Quest_SC_GetQuestData_descriptor_, &Quest_SC_GetQuestData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Quest_CS_AddQuest_descriptor_, &Quest_CS_AddQuest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Quest_SC_AddQuest_descriptor_, &Quest_SC_AddQuest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Quest_CS_FinishQuest_descriptor_, &Quest_CS_FinishQuest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Quest_SC_FinishQuest_descriptor_, &Quest_SC_FinishQuest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Quest_CS_QuitQuest_descriptor_, &Quest_CS_QuitQuest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Quest_SC_QuitQuest_descriptor_, &Quest_SC_QuitQuest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Quest_CS_QuestFinishList_descriptor_, &Quest_CS_QuestFinishList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Quest_SC_QuestFinishList_descriptor_, &Quest_SC_QuestFinishList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Quest_CS_QuestGotoMap_descriptor_, &Quest_CS_QuestGotoMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Quest_SC_QuestGotoMap_descriptor_, &Quest_SC_QuestGotoMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Quest_SC_UpdateQuestInfo_descriptor_, &Quest_SC_UpdateQuestInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Quest_SC_UpdateAutoFinishQuest_descriptor_, &Quest_SC_UpdateAutoFinishQuest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Quest_SC_UpdateAutoNewQuest_descriptor_, &Quest_SC_UpdateAutoNewQuest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoQuestItem_descriptor_, &ProtoQuestItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Quest_SC_UpdateQuestAward_descriptor_, &Quest_SC_UpdateQuestAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Quest_SC_AfterLoopQuestAllAward_descriptor_, &Quest_SC_AfterLoopQuestAllAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Quest_SC_UpdateQuestData_descriptor_, &Quest_SC_UpdateQuestData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Quest_CS_PublishHelpItem_descriptor_, &Quest_CS_PublishHelpItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Quest_SC_PublishHelpItem_descriptor_, &Quest_SC_PublishHelpItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Quest_CS_HelpOtherItem_descriptor_, &Quest_CS_HelpOtherItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Quest_SC_HelpOtherItem_descriptor_, &Quest_SC_HelpOtherItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Quest_SC_DelHelpItem_descriptor_, &Quest_SC_DelHelpItem::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_quest_2eproto() {
  delete ProtoQuestMain::default_instance_;
  delete ProtoQuestMain_reflection_;
  delete ProtoQuestActive::default_instance_;
  delete ProtoQuestActive_reflection_;
  delete ProtoQuestFuben::default_instance_;
  delete ProtoQuestFuben_reflection_;
  delete ProtoQuestDailyKillMonster::default_instance_;
  delete ProtoQuestDailyKillMonster_reflection_;
  delete SingleQuestBranch::default_instance_;
  delete SingleQuestBranch_reflection_;
  delete ProtoQuestBranch::default_instance_;
  delete ProtoQuestBranch_reflection_;
  delete ProtoQuestCycle::default_instance_;
  delete ProtoQuestCycle_reflection_;
  delete Quest_SC_UpdateLoopQuestData::default_instance_;
  delete Quest_SC_UpdateLoopQuestData_reflection_;
  delete ProtoQuestData::default_instance_;
  delete ProtoQuestData_reflection_;
  delete Quest_CS_GetQuestInfo::default_instance_;
  delete Quest_CS_GetQuestInfo_reflection_;
  delete Quest_SC_GetQuestInfo::default_instance_;
  delete Quest_SC_GetQuestInfo_reflection_;
  delete Quest_CS_GetQuestData::default_instance_;
  delete Quest_CS_GetQuestData_reflection_;
  delete Quest_SC_GetQuestData::default_instance_;
  delete Quest_SC_GetQuestData_reflection_;
  delete Quest_CS_AddQuest::default_instance_;
  delete Quest_CS_AddQuest_reflection_;
  delete Quest_SC_AddQuest::default_instance_;
  delete Quest_SC_AddQuest_reflection_;
  delete Quest_CS_FinishQuest::default_instance_;
  delete Quest_CS_FinishQuest_reflection_;
  delete Quest_SC_FinishQuest::default_instance_;
  delete Quest_SC_FinishQuest_reflection_;
  delete Quest_CS_QuitQuest::default_instance_;
  delete Quest_CS_QuitQuest_reflection_;
  delete Quest_SC_QuitQuest::default_instance_;
  delete Quest_SC_QuitQuest_reflection_;
  delete Quest_CS_QuestFinishList::default_instance_;
  delete Quest_CS_QuestFinishList_reflection_;
  delete Quest_SC_QuestFinishList::default_instance_;
  delete Quest_SC_QuestFinishList_reflection_;
  delete Quest_CS_QuestGotoMap::default_instance_;
  delete Quest_CS_QuestGotoMap_reflection_;
  delete Quest_SC_QuestGotoMap::default_instance_;
  delete Quest_SC_QuestGotoMap_reflection_;
  delete Quest_SC_UpdateQuestInfo::default_instance_;
  delete Quest_SC_UpdateQuestInfo_reflection_;
  delete Quest_SC_UpdateAutoFinishQuest::default_instance_;
  delete Quest_SC_UpdateAutoFinishQuest_reflection_;
  delete Quest_SC_UpdateAutoNewQuest::default_instance_;
  delete Quest_SC_UpdateAutoNewQuest_reflection_;
  delete ProtoQuestItem::default_instance_;
  delete ProtoQuestItem_reflection_;
  delete Quest_SC_UpdateQuestAward::default_instance_;
  delete Quest_SC_UpdateQuestAward_reflection_;
  delete Quest_SC_AfterLoopQuestAllAward::default_instance_;
  delete Quest_SC_AfterLoopQuestAllAward_reflection_;
  delete Quest_SC_UpdateQuestData::default_instance_;
  delete Quest_SC_UpdateQuestData_reflection_;
  delete Quest_CS_PublishHelpItem::default_instance_;
  delete Quest_CS_PublishHelpItem_reflection_;
  delete Quest_SC_PublishHelpItem::default_instance_;
  delete Quest_SC_PublishHelpItem_reflection_;
  delete Quest_CS_HelpOtherItem::default_instance_;
  delete Quest_CS_HelpOtherItem_reflection_;
  delete Quest_SC_HelpOtherItem::default_instance_;
  delete Quest_SC_HelpOtherItem_reflection_;
  delete Quest_SC_DelHelpItem::default_instance_;
  delete Quest_SC_DelHelpItem_reflection_;
}

void protobuf_AddDesc_quest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013quest.proto\022\rproto.message\"$\n\016ProtoQue"
    "stMain\022\022\n\ncurQuestId\030\001 \003(\005\"v\n\020ProtoQuest"
    "Active\022\022\n\ncurQuestId\030\001 \003(\005\022\022\n\nlastGiveUp"
    "\030\002 \002(\005\022\022\n\nawardCount\030\003 \002(\005\022\023\n\013receiveTim"
    "e\030\004 \001(\003\022\021\n\tcleanTime\030\005 \001(\003\"L\n\017ProtoQuest"
    "Fuben\022\022\n\ncurQuestId\030\001 \003(\005\022\022\n\nawardCount\030"
    "\002 \002(\005\022\021\n\tcleanTime\030\003 \001(\003\"P\n\032ProtoQuestDa"
    "ilyKillMonster\022\022\n\ncurQuestId\030\001 \003(\005\022\013\n\003nu"
    "m\030\002 \002(\005\022\021\n\tcleanTime\030\003 \001(\003\"J\n\021SingleQues"
    "tBranch\022\022\n\ncurQuestId\030\001 \001(\005\022\021\n\tnProgress"
    "\030\002 \001(\004\022\016\n\006isDone\030\003 \001(\010\"F\n\020ProtoQuestBran"
    "ch\0222\n\010curQuest\030\001 \003(\0132 .proto.message.Sin"
    "gleQuestBranch\"\237\001\n\017ProtoQuestCycle\022\014\n\004ki"
    "nd\030\001 \002(\005\022\022\n\ncurQuestId\030\002 \002(\005\022\020\n\010roundNum"
    "\030\003 \002(\005\022\013\n\003num\030\004 \002(\005\022\023\n\013receiveTime\030\005 \001(\003"
    "\022\021\n\tcleanTime\030\006 \001(\003\022\016\n\006dayNum\030\007 \001(\005\022\023\n\013p"
    "rogressNum\030\010 \001(\005\"R\n\034Quest_SC_UpdateLoopQ"
    "uestData\0222\n\nquestCycle\030\001 \001(\0132\036.proto.mes"
    "sage.ProtoQuestCycle\"s\n\016ProtoQuestData\022\n"
    "\n\002id\030\001 \002(\005\022\014\n\004kind\030\002 \002(\005\022\r\n\005count\030\003 \002(\005\022"
    "\021\n\tnProgress\030\004 \001(\004\022\016\n\006isDone\030\005 \001(\010\022\025\n\rnI"
    "nitProgress\030\006 \001(\004\"%\n\025Quest_CS_GetQuestIn"
    "fo\022\014\n\004kind\030\001 \002(\005\"\205\003\n\025Quest_SC_GetQuestIn"
    "fo\022\016\n\006result\030\001 \002(\005\022\014\n\004kind\030\002 \001(\005\0220\n\tques"
    "tMain\030\003 \001(\0132\035.proto.message.ProtoQuestMa"
    "in\0224\n\013questActive\030\004 \001(\0132\037.proto.message."
    "ProtoQuestActive\0222\n\nquestFuben\030\005 \001(\0132\036.p"
    "roto.message.ProtoQuestFuben\022H\n\025questDai"
    "lyKillMonster\030\006 \001(\0132).proto.message.Prot"
    "oQuestDailyKillMonster\0224\n\013questBranch\030\007 "
    "\001(\0132\037.proto.message.ProtoQuestBranch\0222\n\n"
    "questCycle\030\010 \001(\0132\036.proto.message.ProtoQu"
    "estCycle\"1\n\025Quest_CS_GetQuestData\022\n\n\002id\030"
    "\001 \002(\005\022\014\n\004kind\030\002 \002(\005\"Y\n\025Quest_SC_GetQuest"
    "Data\022\016\n\006result\030\001 \002(\005\0220\n\tquestData\030\002 \001(\0132"
    "\035.proto.message.ProtoQuestData\"2\n\021Quest_"
    "CS_AddQuest\022\017\n\007questId\030\001 \002(\005\022\014\n\004kind\030\002 \002"
    "(\005\"=\n\021Quest_SC_AddQuest\022\016\n\006result\030\001 \002(\005\022"
    "\n\n\002id\030\002 \001(\005\022\014\n\004kind\030\003 \001(\005\"W\n\024Quest_CS_Fi"
    "nishQuest\022\017\n\007questId\030\001 \002(\005\022\014\n\004kind\030\002 \002(\005"
    "\022\013\n\003arg\030\003 \001(\004\022\023\n\013questresult\030\004 \001(\005\"U\n\024Qu"
    "est_SC_FinishQuest\022\016\n\006result\030\001 \002(\005\022\n\n\002id"
    "\030\002 \001(\005\022\014\n\004kind\030\003 \001(\005\022\023\n\013questresult\030\004 \001("
    "\005\"3\n\022Quest_CS_QuitQuest\022\017\n\007questId\030\001 \002(\005"
    "\022\014\n\004kind\030\002 \002(\005\"N\n\022Quest_SC_QuitQuest\022\016\n\006"
    "result\030\001 \002(\005\022\n\n\002id\030\002 \001(\005\022\014\n\004kind\030\003 \001(\005\022\016"
    "\n\006isauto\030\004 \001(\005\"\032\n\030Quest_CS_QuestFinishLi"
    "st\"+\n\030Quest_SC_QuestFinishList\022\017\n\007questI"
    "d\030\001 \002(\005\"(\n\025Quest_CS_QuestGotoMap\022\017\n\007ques"
    "tId\030\001 \002(\005\"\027\n\025Quest_SC_QuestGotoMap\"\352\002\n\030Q"
    "uest_SC_UpdateQuestInfo\0220\n\tquestMain\030\001 \001"
    "(\0132\035.proto.message.ProtoQuestMain\0224\n\013que"
    "stActive\030\002 \001(\0132\037.proto.message.ProtoQues"
    "tActive\0222\n\nquestFuben\030\003 \001(\0132\036.proto.mess"
    "age.ProtoQuestFuben\022H\n\025questDailyKillMon"
    "ster\030\004 \001(\0132).proto.message.ProtoQuestDai"
    "lyKillMonster\0224\n\013questBranch\030\005 \001(\0132\037.pro"
    "to.message.ProtoQuestBranch\0222\n\nquestCycl"
    "e\030\006 \003(\0132\036.proto.message.ProtoQuestCycle\""
    "T\n\036Quest_SC_UpdateAutoFinishQuest\022\017\n\007que"
    "stId\030\001 \002(\005\022\014\n\004kind\030\002 \002(\005\022\023\n\013questresult\030"
    "\003 \001(\005\"<\n\033Quest_SC_UpdateAutoNewQuest\022\017\n\007"
    "questId\030\001 \002(\005\022\014\n\004kind\030\002 \002(\005\"+\n\016ProtoQues"
    "tItem\022\014\n\004item\030\001 \002(\005\022\013\n\003num\030\002 \002(\005\"\210\001\n\031Que"
    "st_SC_UpdateQuestAward\022\013\n\003exp\030\001 \001(\005\022\016\n\006s"
    "ilver\030\002 \001(\005\022\014\n\004gold\030\003 \001(\005\022\022\n\ncropsValue\030"
    "\004 \001(\005\022,\n\005items\030\005 \003(\0132\035.proto.message.Pro"
    "toQuestItem\"\260\001\n\037Quest_SC_AfterLoopQuestA"
    "llAward\022\014\n\004kind\030\001 \001(\005\022\013\n\003exp\030\002 \001(\005\022\016\n\006si"
    "lver\030\003 \001(\005\022\014\n\004gold\030\004 \001(\005\022\022\n\ncropsValue\030\005"
    " \001(\005\022,\n\005items\030\006 \003(\0132\035.proto.message.Prot"
    "oQuestItem\022\022\n\nisOverTime\030\007 \001(\010\"L\n\030Quest_"
    "SC_UpdateQuestData\0220\n\tquestData\030\001 \003(\0132\035."
    "proto.message.ProtoQuestData\"8\n\030Quest_CS"
    "_PublishHelpItem\022\017\n\007questid\030\001 \002(\005\022\013\n\003num"
    "\030\002 \002(\005\"*\n\030Quest_SC_PublishHelpItem\022\016\n\006re"
    "sult\030\001 \002(\005\"U\n\026Quest_CS_HelpOtherItem\022\017\n\007"
    "questid\030\001 \002(\005\022\020\n\010playerid\030\002 \002(\004\022\013\n\003num\030\003"
    " \002(\005\022\013\n\003arg\030\004 \002(\004\"(\n\026Quest_SC_HelpOtherI"
    "tem\022\016\n\006result\030\001 \002(\005\"F\n\024Quest_SC_DelHelpI"
    "tem\022\017\n\007questid\030\001 \002(\005\022\013\n\003num\030\002 \002(\005\022\020\n\010pla"
    "yerid\030\003 \002(\004", 3251);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "quest.proto", &protobuf_RegisterTypes);
  ProtoQuestMain::default_instance_ = new ProtoQuestMain();
  ProtoQuestActive::default_instance_ = new ProtoQuestActive();
  ProtoQuestFuben::default_instance_ = new ProtoQuestFuben();
  ProtoQuestDailyKillMonster::default_instance_ = new ProtoQuestDailyKillMonster();
  SingleQuestBranch::default_instance_ = new SingleQuestBranch();
  ProtoQuestBranch::default_instance_ = new ProtoQuestBranch();
  ProtoQuestCycle::default_instance_ = new ProtoQuestCycle();
  Quest_SC_UpdateLoopQuestData::default_instance_ = new Quest_SC_UpdateLoopQuestData();
  ProtoQuestData::default_instance_ = new ProtoQuestData();
  Quest_CS_GetQuestInfo::default_instance_ = new Quest_CS_GetQuestInfo();
  Quest_SC_GetQuestInfo::default_instance_ = new Quest_SC_GetQuestInfo();
  Quest_CS_GetQuestData::default_instance_ = new Quest_CS_GetQuestData();
  Quest_SC_GetQuestData::default_instance_ = new Quest_SC_GetQuestData();
  Quest_CS_AddQuest::default_instance_ = new Quest_CS_AddQuest();
  Quest_SC_AddQuest::default_instance_ = new Quest_SC_AddQuest();
  Quest_CS_FinishQuest::default_instance_ = new Quest_CS_FinishQuest();
  Quest_SC_FinishQuest::default_instance_ = new Quest_SC_FinishQuest();
  Quest_CS_QuitQuest::default_instance_ = new Quest_CS_QuitQuest();
  Quest_SC_QuitQuest::default_instance_ = new Quest_SC_QuitQuest();
  Quest_CS_QuestFinishList::default_instance_ = new Quest_CS_QuestFinishList();
  Quest_SC_QuestFinishList::default_instance_ = new Quest_SC_QuestFinishList();
  Quest_CS_QuestGotoMap::default_instance_ = new Quest_CS_QuestGotoMap();
  Quest_SC_QuestGotoMap::default_instance_ = new Quest_SC_QuestGotoMap();
  Quest_SC_UpdateQuestInfo::default_instance_ = new Quest_SC_UpdateQuestInfo();
  Quest_SC_UpdateAutoFinishQuest::default_instance_ = new Quest_SC_UpdateAutoFinishQuest();
  Quest_SC_UpdateAutoNewQuest::default_instance_ = new Quest_SC_UpdateAutoNewQuest();
  ProtoQuestItem::default_instance_ = new ProtoQuestItem();
  Quest_SC_UpdateQuestAward::default_instance_ = new Quest_SC_UpdateQuestAward();
  Quest_SC_AfterLoopQuestAllAward::default_instance_ = new Quest_SC_AfterLoopQuestAllAward();
  Quest_SC_UpdateQuestData::default_instance_ = new Quest_SC_UpdateQuestData();
  Quest_CS_PublishHelpItem::default_instance_ = new Quest_CS_PublishHelpItem();
  Quest_SC_PublishHelpItem::default_instance_ = new Quest_SC_PublishHelpItem();
  Quest_CS_HelpOtherItem::default_instance_ = new Quest_CS_HelpOtherItem();
  Quest_SC_HelpOtherItem::default_instance_ = new Quest_SC_HelpOtherItem();
  Quest_SC_DelHelpItem::default_instance_ = new Quest_SC_DelHelpItem();
  ProtoQuestMain::default_instance_->InitAsDefaultInstance();
  ProtoQuestActive::default_instance_->InitAsDefaultInstance();
  ProtoQuestFuben::default_instance_->InitAsDefaultInstance();
  ProtoQuestDailyKillMonster::default_instance_->InitAsDefaultInstance();
  SingleQuestBranch::default_instance_->InitAsDefaultInstance();
  ProtoQuestBranch::default_instance_->InitAsDefaultInstance();
  ProtoQuestCycle::default_instance_->InitAsDefaultInstance();
  Quest_SC_UpdateLoopQuestData::default_instance_->InitAsDefaultInstance();
  ProtoQuestData::default_instance_->InitAsDefaultInstance();
  Quest_CS_GetQuestInfo::default_instance_->InitAsDefaultInstance();
  Quest_SC_GetQuestInfo::default_instance_->InitAsDefaultInstance();
  Quest_CS_GetQuestData::default_instance_->InitAsDefaultInstance();
  Quest_SC_GetQuestData::default_instance_->InitAsDefaultInstance();
  Quest_CS_AddQuest::default_instance_->InitAsDefaultInstance();
  Quest_SC_AddQuest::default_instance_->InitAsDefaultInstance();
  Quest_CS_FinishQuest::default_instance_->InitAsDefaultInstance();
  Quest_SC_FinishQuest::default_instance_->InitAsDefaultInstance();
  Quest_CS_QuitQuest::default_instance_->InitAsDefaultInstance();
  Quest_SC_QuitQuest::default_instance_->InitAsDefaultInstance();
  Quest_CS_QuestFinishList::default_instance_->InitAsDefaultInstance();
  Quest_SC_QuestFinishList::default_instance_->InitAsDefaultInstance();
  Quest_CS_QuestGotoMap::default_instance_->InitAsDefaultInstance();
  Quest_SC_QuestGotoMap::default_instance_->InitAsDefaultInstance();
  Quest_SC_UpdateQuestInfo::default_instance_->InitAsDefaultInstance();
  Quest_SC_UpdateAutoFinishQuest::default_instance_->InitAsDefaultInstance();
  Quest_SC_UpdateAutoNewQuest::default_instance_->InitAsDefaultInstance();
  ProtoQuestItem::default_instance_->InitAsDefaultInstance();
  Quest_SC_UpdateQuestAward::default_instance_->InitAsDefaultInstance();
  Quest_SC_AfterLoopQuestAllAward::default_instance_->InitAsDefaultInstance();
  Quest_SC_UpdateQuestData::default_instance_->InitAsDefaultInstance();
  Quest_CS_PublishHelpItem::default_instance_->InitAsDefaultInstance();
  Quest_SC_PublishHelpItem::default_instance_->InitAsDefaultInstance();
  Quest_CS_HelpOtherItem::default_instance_->InitAsDefaultInstance();
  Quest_SC_HelpOtherItem::default_instance_->InitAsDefaultInstance();
  Quest_SC_DelHelpItem::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_quest_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_quest_2eproto {
  StaticDescriptorInitializer_quest_2eproto() {
    protobuf_AddDesc_quest_2eproto();
  }
} static_descriptor_initializer_quest_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ProtoQuestMain::kCurQuestIdFieldNumber;
#endif  // !_MSC_VER

ProtoQuestMain::ProtoQuestMain()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoQuestMain::InitAsDefaultInstance() {
}

ProtoQuestMain::ProtoQuestMain(const ProtoQuestMain& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoQuestMain::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoQuestMain::~ProtoQuestMain() {
  SharedDtor();
}

void ProtoQuestMain::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoQuestMain::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoQuestMain::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoQuestMain_descriptor_;
}

const ProtoQuestMain& ProtoQuestMain::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quest_2eproto();
  return *default_instance_;
}

ProtoQuestMain* ProtoQuestMain::default_instance_ = NULL;

ProtoQuestMain* ProtoQuestMain::New() const {
  return new ProtoQuestMain;
}

void ProtoQuestMain::Clear() {
  curquestid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoQuestMain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 curQuestId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curQuestId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_curquestid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_curquestid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_curQuestId;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoQuestMain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 curQuestId = 1;
  for (int i = 0; i < this->curquestid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->curquestid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoQuestMain::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 curQuestId = 1;
  for (int i = 0; i < this->curquestid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->curquestid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoQuestMain::ByteSize() const {
  int total_size = 0;

  // repeated int32 curQuestId = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->curquestid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->curquestid(i));
    }
    total_size += 1 * this->curquestid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoQuestMain::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoQuestMain* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoQuestMain*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoQuestMain::MergeFrom(const ProtoQuestMain& from) {
  GOOGLE_CHECK_NE(&from, this);
  curquestid_.MergeFrom(from.curquestid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoQuestMain::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoQuestMain::CopyFrom(const ProtoQuestMain& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoQuestMain::IsInitialized() const {

  return true;
}

void ProtoQuestMain::Swap(ProtoQuestMain* other) {
  if (other != this) {
    curquestid_.Swap(&other->curquestid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoQuestMain::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoQuestMain_descriptor_;
  metadata.reflection = ProtoQuestMain_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoQuestActive::kCurQuestIdFieldNumber;
const int ProtoQuestActive::kLastGiveUpFieldNumber;
const int ProtoQuestActive::kAwardCountFieldNumber;
const int ProtoQuestActive::kReceiveTimeFieldNumber;
const int ProtoQuestActive::kCleanTimeFieldNumber;
#endif  // !_MSC_VER

ProtoQuestActive::ProtoQuestActive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoQuestActive::InitAsDefaultInstance() {
}

ProtoQuestActive::ProtoQuestActive(const ProtoQuestActive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoQuestActive::SharedCtor() {
  _cached_size_ = 0;
  lastgiveup_ = 0;
  awardcount_ = 0;
  receivetime_ = GOOGLE_LONGLONG(0);
  cleantime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoQuestActive::~ProtoQuestActive() {
  SharedDtor();
}

void ProtoQuestActive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoQuestActive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoQuestActive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoQuestActive_descriptor_;
}

const ProtoQuestActive& ProtoQuestActive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quest_2eproto();
  return *default_instance_;
}

ProtoQuestActive* ProtoQuestActive::default_instance_ = NULL;

ProtoQuestActive* ProtoQuestActive::New() const {
  return new ProtoQuestActive;
}

void ProtoQuestActive::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    lastgiveup_ = 0;
    awardcount_ = 0;
    receivetime_ = GOOGLE_LONGLONG(0);
    cleantime_ = GOOGLE_LONGLONG(0);
  }
  curquestid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoQuestActive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 curQuestId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curQuestId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_curquestid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_curquestid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_curQuestId;
        if (input->ExpectTag(16)) goto parse_lastGiveUp;
        break;
      }

      // required int32 lastGiveUp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastGiveUp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastgiveup_)));
          set_has_lastgiveup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_awardCount;
        break;
      }

      // required int32 awardCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awardCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awardcount_)));
          set_has_awardcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_receiveTime;
        break;
      }

      // optional int64 receiveTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_receiveTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &receivetime_)));
          set_has_receivetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cleanTime;
        break;
      }

      // optional int64 cleanTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cleanTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cleantime_)));
          set_has_cleantime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoQuestActive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 curQuestId = 1;
  for (int i = 0; i < this->curquestid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->curquestid(i), output);
  }

  // required int32 lastGiveUp = 2;
  if (has_lastgiveup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lastgiveup(), output);
  }

  // required int32 awardCount = 3;
  if (has_awardcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->awardcount(), output);
  }

  // optional int64 receiveTime = 4;
  if (has_receivetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->receivetime(), output);
  }

  // optional int64 cleanTime = 5;
  if (has_cleantime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->cleantime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoQuestActive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 curQuestId = 1;
  for (int i = 0; i < this->curquestid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->curquestid(i), target);
  }

  // required int32 lastGiveUp = 2;
  if (has_lastgiveup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lastgiveup(), target);
  }

  // required int32 awardCount = 3;
  if (has_awardcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->awardcount(), target);
  }

  // optional int64 receiveTime = 4;
  if (has_receivetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->receivetime(), target);
  }

  // optional int64 cleanTime = 5;
  if (has_cleantime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->cleantime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoQuestActive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 lastGiveUp = 2;
    if (has_lastgiveup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastgiveup());
    }

    // required int32 awardCount = 3;
    if (has_awardcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awardcount());
    }

    // optional int64 receiveTime = 4;
    if (has_receivetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->receivetime());
    }

    // optional int64 cleanTime = 5;
    if (has_cleantime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cleantime());
    }

  }
  // repeated int32 curQuestId = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->curquestid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->curquestid(i));
    }
    total_size += 1 * this->curquestid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoQuestActive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoQuestActive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoQuestActive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoQuestActive::MergeFrom(const ProtoQuestActive& from) {
  GOOGLE_CHECK_NE(&from, this);
  curquestid_.MergeFrom(from.curquestid_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_lastgiveup()) {
      set_lastgiveup(from.lastgiveup());
    }
    if (from.has_awardcount()) {
      set_awardcount(from.awardcount());
    }
    if (from.has_receivetime()) {
      set_receivetime(from.receivetime());
    }
    if (from.has_cleantime()) {
      set_cleantime(from.cleantime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoQuestActive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoQuestActive::CopyFrom(const ProtoQuestActive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoQuestActive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void ProtoQuestActive::Swap(ProtoQuestActive* other) {
  if (other != this) {
    curquestid_.Swap(&other->curquestid_);
    std::swap(lastgiveup_, other->lastgiveup_);
    std::swap(awardcount_, other->awardcount_);
    std::swap(receivetime_, other->receivetime_);
    std::swap(cleantime_, other->cleantime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoQuestActive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoQuestActive_descriptor_;
  metadata.reflection = ProtoQuestActive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoQuestFuben::kCurQuestIdFieldNumber;
const int ProtoQuestFuben::kAwardCountFieldNumber;
const int ProtoQuestFuben::kCleanTimeFieldNumber;
#endif  // !_MSC_VER

ProtoQuestFuben::ProtoQuestFuben()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoQuestFuben::InitAsDefaultInstance() {
}

ProtoQuestFuben::ProtoQuestFuben(const ProtoQuestFuben& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoQuestFuben::SharedCtor() {
  _cached_size_ = 0;
  awardcount_ = 0;
  cleantime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoQuestFuben::~ProtoQuestFuben() {
  SharedDtor();
}

void ProtoQuestFuben::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoQuestFuben::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoQuestFuben::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoQuestFuben_descriptor_;
}

const ProtoQuestFuben& ProtoQuestFuben::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quest_2eproto();
  return *default_instance_;
}

ProtoQuestFuben* ProtoQuestFuben::default_instance_ = NULL;

ProtoQuestFuben* ProtoQuestFuben::New() const {
  return new ProtoQuestFuben;
}

void ProtoQuestFuben::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    awardcount_ = 0;
    cleantime_ = GOOGLE_LONGLONG(0);
  }
  curquestid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoQuestFuben::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 curQuestId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curQuestId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_curquestid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_curquestid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_curQuestId;
        if (input->ExpectTag(16)) goto parse_awardCount;
        break;
      }

      // required int32 awardCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awardCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awardcount_)));
          set_has_awardcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cleanTime;
        break;
      }

      // optional int64 cleanTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cleanTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cleantime_)));
          set_has_cleantime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoQuestFuben::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 curQuestId = 1;
  for (int i = 0; i < this->curquestid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->curquestid(i), output);
  }

  // required int32 awardCount = 2;
  if (has_awardcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->awardcount(), output);
  }

  // optional int64 cleanTime = 3;
  if (has_cleantime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->cleantime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoQuestFuben::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 curQuestId = 1;
  for (int i = 0; i < this->curquestid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->curquestid(i), target);
  }

  // required int32 awardCount = 2;
  if (has_awardcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->awardcount(), target);
  }

  // optional int64 cleanTime = 3;
  if (has_cleantime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->cleantime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoQuestFuben::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 awardCount = 2;
    if (has_awardcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awardcount());
    }

    // optional int64 cleanTime = 3;
    if (has_cleantime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cleantime());
    }

  }
  // repeated int32 curQuestId = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->curquestid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->curquestid(i));
    }
    total_size += 1 * this->curquestid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoQuestFuben::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoQuestFuben* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoQuestFuben*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoQuestFuben::MergeFrom(const ProtoQuestFuben& from) {
  GOOGLE_CHECK_NE(&from, this);
  curquestid_.MergeFrom(from.curquestid_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_awardcount()) {
      set_awardcount(from.awardcount());
    }
    if (from.has_cleantime()) {
      set_cleantime(from.cleantime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoQuestFuben::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoQuestFuben::CopyFrom(const ProtoQuestFuben& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoQuestFuben::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void ProtoQuestFuben::Swap(ProtoQuestFuben* other) {
  if (other != this) {
    curquestid_.Swap(&other->curquestid_);
    std::swap(awardcount_, other->awardcount_);
    std::swap(cleantime_, other->cleantime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoQuestFuben::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoQuestFuben_descriptor_;
  metadata.reflection = ProtoQuestFuben_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoQuestDailyKillMonster::kCurQuestIdFieldNumber;
const int ProtoQuestDailyKillMonster::kNumFieldNumber;
const int ProtoQuestDailyKillMonster::kCleanTimeFieldNumber;
#endif  // !_MSC_VER

ProtoQuestDailyKillMonster::ProtoQuestDailyKillMonster()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoQuestDailyKillMonster::InitAsDefaultInstance() {
}

ProtoQuestDailyKillMonster::ProtoQuestDailyKillMonster(const ProtoQuestDailyKillMonster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoQuestDailyKillMonster::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  cleantime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoQuestDailyKillMonster::~ProtoQuestDailyKillMonster() {
  SharedDtor();
}

void ProtoQuestDailyKillMonster::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoQuestDailyKillMonster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoQuestDailyKillMonster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoQuestDailyKillMonster_descriptor_;
}

const ProtoQuestDailyKillMonster& ProtoQuestDailyKillMonster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quest_2eproto();
  return *default_instance_;
}

ProtoQuestDailyKillMonster* ProtoQuestDailyKillMonster::default_instance_ = NULL;

ProtoQuestDailyKillMonster* ProtoQuestDailyKillMonster::New() const {
  return new ProtoQuestDailyKillMonster;
}

void ProtoQuestDailyKillMonster::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    num_ = 0;
    cleantime_ = GOOGLE_LONGLONG(0);
  }
  curquestid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoQuestDailyKillMonster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 curQuestId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curQuestId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_curquestid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_curquestid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_curQuestId;
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // required int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cleanTime;
        break;
      }

      // optional int64 cleanTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cleanTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cleantime_)));
          set_has_cleantime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoQuestDailyKillMonster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 curQuestId = 1;
  for (int i = 0; i < this->curquestid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->curquestid(i), output);
  }

  // required int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  // optional int64 cleanTime = 3;
  if (has_cleantime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->cleantime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoQuestDailyKillMonster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 curQuestId = 1;
  for (int i = 0; i < this->curquestid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->curquestid(i), target);
  }

  // required int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  // optional int64 cleanTime = 3;
  if (has_cleantime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->cleantime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoQuestDailyKillMonster::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int64 cleanTime = 3;
    if (has_cleantime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cleantime());
    }

  }
  // repeated int32 curQuestId = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->curquestid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->curquestid(i));
    }
    total_size += 1 * this->curquestid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoQuestDailyKillMonster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoQuestDailyKillMonster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoQuestDailyKillMonster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoQuestDailyKillMonster::MergeFrom(const ProtoQuestDailyKillMonster& from) {
  GOOGLE_CHECK_NE(&from, this);
  curquestid_.MergeFrom(from.curquestid_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_cleantime()) {
      set_cleantime(from.cleantime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoQuestDailyKillMonster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoQuestDailyKillMonster::CopyFrom(const ProtoQuestDailyKillMonster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoQuestDailyKillMonster::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void ProtoQuestDailyKillMonster::Swap(ProtoQuestDailyKillMonster* other) {
  if (other != this) {
    curquestid_.Swap(&other->curquestid_);
    std::swap(num_, other->num_);
    std::swap(cleantime_, other->cleantime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoQuestDailyKillMonster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoQuestDailyKillMonster_descriptor_;
  metadata.reflection = ProtoQuestDailyKillMonster_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SingleQuestBranch::kCurQuestIdFieldNumber;
const int SingleQuestBranch::kNProgressFieldNumber;
const int SingleQuestBranch::kIsDoneFieldNumber;
#endif  // !_MSC_VER

SingleQuestBranch::SingleQuestBranch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SingleQuestBranch::InitAsDefaultInstance() {
}

SingleQuestBranch::SingleQuestBranch(const SingleQuestBranch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SingleQuestBranch::SharedCtor() {
  _cached_size_ = 0;
  curquestid_ = 0;
  nprogress_ = GOOGLE_ULONGLONG(0);
  isdone_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleQuestBranch::~SingleQuestBranch() {
  SharedDtor();
}

void SingleQuestBranch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SingleQuestBranch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleQuestBranch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleQuestBranch_descriptor_;
}

const SingleQuestBranch& SingleQuestBranch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quest_2eproto();
  return *default_instance_;
}

SingleQuestBranch* SingleQuestBranch::default_instance_ = NULL;

SingleQuestBranch* SingleQuestBranch::New() const {
  return new SingleQuestBranch;
}

void SingleQuestBranch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    curquestid_ = 0;
    nprogress_ = GOOGLE_ULONGLONG(0);
    isdone_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SingleQuestBranch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 curQuestId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curquestid_)));
          set_has_curquestid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nProgress;
        break;
      }

      // optional uint64 nProgress = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nProgress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nprogress_)));
          set_has_nprogress();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isDone;
        break;
      }

      // optional bool isDone = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isDone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdone_)));
          set_has_isdone();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SingleQuestBranch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 curQuestId = 1;
  if (has_curquestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->curquestid(), output);
  }

  // optional uint64 nProgress = 2;
  if (has_nprogress()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->nprogress(), output);
  }

  // optional bool isDone = 3;
  if (has_isdone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isdone(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SingleQuestBranch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 curQuestId = 1;
  if (has_curquestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->curquestid(), target);
  }

  // optional uint64 nProgress = 2;
  if (has_nprogress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->nprogress(), target);
  }

  // optional bool isDone = 3;
  if (has_isdone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isdone(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SingleQuestBranch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 curQuestId = 1;
    if (has_curquestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curquestid());
    }

    // optional uint64 nProgress = 2;
    if (has_nprogress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nprogress());
    }

    // optional bool isDone = 3;
    if (has_isdone()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleQuestBranch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SingleQuestBranch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SingleQuestBranch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleQuestBranch::MergeFrom(const SingleQuestBranch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_curquestid()) {
      set_curquestid(from.curquestid());
    }
    if (from.has_nprogress()) {
      set_nprogress(from.nprogress());
    }
    if (from.has_isdone()) {
      set_isdone(from.isdone());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SingleQuestBranch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleQuestBranch::CopyFrom(const SingleQuestBranch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleQuestBranch::IsInitialized() const {

  return true;
}

void SingleQuestBranch::Swap(SingleQuestBranch* other) {
  if (other != this) {
    std::swap(curquestid_, other->curquestid_);
    std::swap(nprogress_, other->nprogress_);
    std::swap(isdone_, other->isdone_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SingleQuestBranch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SingleQuestBranch_descriptor_;
  metadata.reflection = SingleQuestBranch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoQuestBranch::kCurQuestFieldNumber;
#endif  // !_MSC_VER

ProtoQuestBranch::ProtoQuestBranch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoQuestBranch::InitAsDefaultInstance() {
}

ProtoQuestBranch::ProtoQuestBranch(const ProtoQuestBranch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoQuestBranch::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoQuestBranch::~ProtoQuestBranch() {
  SharedDtor();
}

void ProtoQuestBranch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoQuestBranch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoQuestBranch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoQuestBranch_descriptor_;
}

const ProtoQuestBranch& ProtoQuestBranch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quest_2eproto();
  return *default_instance_;
}

ProtoQuestBranch* ProtoQuestBranch::default_instance_ = NULL;

ProtoQuestBranch* ProtoQuestBranch::New() const {
  return new ProtoQuestBranch;
}

void ProtoQuestBranch::Clear() {
  curquest_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoQuestBranch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.SingleQuestBranch curQuest = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_curQuest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_curquest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_curQuest;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoQuestBranch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.SingleQuestBranch curQuest = 1;
  for (int i = 0; i < this->curquest_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->curquest(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoQuestBranch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.SingleQuestBranch curQuest = 1;
  for (int i = 0; i < this->curquest_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->curquest(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoQuestBranch::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.SingleQuestBranch curQuest = 1;
  total_size += 1 * this->curquest_size();
  for (int i = 0; i < this->curquest_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->curquest(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoQuestBranch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoQuestBranch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoQuestBranch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoQuestBranch::MergeFrom(const ProtoQuestBranch& from) {
  GOOGLE_CHECK_NE(&from, this);
  curquest_.MergeFrom(from.curquest_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoQuestBranch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoQuestBranch::CopyFrom(const ProtoQuestBranch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoQuestBranch::IsInitialized() const {

  return true;
}

void ProtoQuestBranch::Swap(ProtoQuestBranch* other) {
  if (other != this) {
    curquest_.Swap(&other->curquest_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoQuestBranch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoQuestBranch_descriptor_;
  metadata.reflection = ProtoQuestBranch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoQuestCycle::kKindFieldNumber;
const int ProtoQuestCycle::kCurQuestIdFieldNumber;
const int ProtoQuestCycle::kRoundNumFieldNumber;
const int ProtoQuestCycle::kNumFieldNumber;
const int ProtoQuestCycle::kReceiveTimeFieldNumber;
const int ProtoQuestCycle::kCleanTimeFieldNumber;
const int ProtoQuestCycle::kDayNumFieldNumber;
const int ProtoQuestCycle::kProgressNumFieldNumber;
#endif  // !_MSC_VER

ProtoQuestCycle::ProtoQuestCycle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoQuestCycle::InitAsDefaultInstance() {
}

ProtoQuestCycle::ProtoQuestCycle(const ProtoQuestCycle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoQuestCycle::SharedCtor() {
  _cached_size_ = 0;
  kind_ = 0;
  curquestid_ = 0;
  roundnum_ = 0;
  num_ = 0;
  receivetime_ = GOOGLE_LONGLONG(0);
  cleantime_ = GOOGLE_LONGLONG(0);
  daynum_ = 0;
  progressnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoQuestCycle::~ProtoQuestCycle() {
  SharedDtor();
}

void ProtoQuestCycle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoQuestCycle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoQuestCycle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoQuestCycle_descriptor_;
}

const ProtoQuestCycle& ProtoQuestCycle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quest_2eproto();
  return *default_instance_;
}

ProtoQuestCycle* ProtoQuestCycle::default_instance_ = NULL;

ProtoQuestCycle* ProtoQuestCycle::New() const {
  return new ProtoQuestCycle;
}

void ProtoQuestCycle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    kind_ = 0;
    curquestid_ = 0;
    roundnum_ = 0;
    num_ = 0;
    receivetime_ = GOOGLE_LONGLONG(0);
    cleantime_ = GOOGLE_LONGLONG(0);
    daynum_ = 0;
    progressnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoQuestCycle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 kind = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kind_)));
          set_has_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_curQuestId;
        break;
      }

      // required int32 curQuestId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curQuestId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curquestid_)));
          set_has_curquestid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_roundNum;
        break;
      }

      // required int32 roundNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roundNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roundnum_)));
          set_has_roundnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_num;
        break;
      }

      // required int32 num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_receiveTime;
        break;
      }

      // optional int64 receiveTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_receiveTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &receivetime_)));
          set_has_receivetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cleanTime;
        break;
      }

      // optional int64 cleanTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cleanTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cleantime_)));
          set_has_cleantime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_dayNum;
        break;
      }

      // optional int32 dayNum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dayNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &daynum_)));
          set_has_daynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_progressNum;
        break;
      }

      // optional int32 progressNum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_progressNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &progressnum_)));
          set_has_progressnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoQuestCycle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 kind = 1;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->kind(), output);
  }

  // required int32 curQuestId = 2;
  if (has_curquestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->curquestid(), output);
  }

  // required int32 roundNum = 3;
  if (has_roundnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->roundnum(), output);
  }

  // required int32 num = 4;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num(), output);
  }

  // optional int64 receiveTime = 5;
  if (has_receivetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->receivetime(), output);
  }

  // optional int64 cleanTime = 6;
  if (has_cleantime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->cleantime(), output);
  }

  // optional int32 dayNum = 7;
  if (has_daynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->daynum(), output);
  }

  // optional int32 progressNum = 8;
  if (has_progressnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->progressnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoQuestCycle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 kind = 1;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->kind(), target);
  }

  // required int32 curQuestId = 2;
  if (has_curquestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->curquestid(), target);
  }

  // required int32 roundNum = 3;
  if (has_roundnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->roundnum(), target);
  }

  // required int32 num = 4;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num(), target);
  }

  // optional int64 receiveTime = 5;
  if (has_receivetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->receivetime(), target);
  }

  // optional int64 cleanTime = 6;
  if (has_cleantime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->cleantime(), target);
  }

  // optional int32 dayNum = 7;
  if (has_daynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->daynum(), target);
  }

  // optional int32 progressNum = 8;
  if (has_progressnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->progressnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoQuestCycle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 kind = 1;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kind());
    }

    // required int32 curQuestId = 2;
    if (has_curquestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curquestid());
    }

    // required int32 roundNum = 3;
    if (has_roundnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roundnum());
    }

    // required int32 num = 4;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int64 receiveTime = 5;
    if (has_receivetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->receivetime());
    }

    // optional int64 cleanTime = 6;
    if (has_cleantime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cleantime());
    }

    // optional int32 dayNum = 7;
    if (has_daynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daynum());
    }

    // optional int32 progressNum = 8;
    if (has_progressnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->progressnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoQuestCycle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoQuestCycle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoQuestCycle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoQuestCycle::MergeFrom(const ProtoQuestCycle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kind()) {
      set_kind(from.kind());
    }
    if (from.has_curquestid()) {
      set_curquestid(from.curquestid());
    }
    if (from.has_roundnum()) {
      set_roundnum(from.roundnum());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_receivetime()) {
      set_receivetime(from.receivetime());
    }
    if (from.has_cleantime()) {
      set_cleantime(from.cleantime());
    }
    if (from.has_daynum()) {
      set_daynum(from.daynum());
    }
    if (from.has_progressnum()) {
      set_progressnum(from.progressnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoQuestCycle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoQuestCycle::CopyFrom(const ProtoQuestCycle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoQuestCycle::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ProtoQuestCycle::Swap(ProtoQuestCycle* other) {
  if (other != this) {
    std::swap(kind_, other->kind_);
    std::swap(curquestid_, other->curquestid_);
    std::swap(roundnum_, other->roundnum_);
    std::swap(num_, other->num_);
    std::swap(receivetime_, other->receivetime_);
    std::swap(cleantime_, other->cleantime_);
    std::swap(daynum_, other->daynum_);
    std::swap(progressnum_, other->progressnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoQuestCycle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoQuestCycle_descriptor_;
  metadata.reflection = ProtoQuestCycle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Quest_SC_UpdateLoopQuestData::kQuestCycleFieldNumber;
#endif  // !_MSC_VER

Quest_SC_UpdateLoopQuestData::Quest_SC_UpdateLoopQuestData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Quest_SC_UpdateLoopQuestData::InitAsDefaultInstance() {
  questcycle_ = const_cast< ::proto::message::ProtoQuestCycle*>(&::proto::message::ProtoQuestCycle::default_instance());
}

Quest_SC_UpdateLoopQuestData::Quest_SC_UpdateLoopQuestData(const Quest_SC_UpdateLoopQuestData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Quest_SC_UpdateLoopQuestData::SharedCtor() {
  _cached_size_ = 0;
  questcycle_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Quest_SC_UpdateLoopQuestData::~Quest_SC_UpdateLoopQuestData() {
  SharedDtor();
}

void Quest_SC_UpdateLoopQuestData::SharedDtor() {
  if (this != default_instance_) {
    delete questcycle_;
  }
}

void Quest_SC_UpdateLoopQuestData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Quest_SC_UpdateLoopQuestData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Quest_SC_UpdateLoopQuestData_descriptor_;
}

const Quest_SC_UpdateLoopQuestData& Quest_SC_UpdateLoopQuestData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quest_2eproto();
  return *default_instance_;
}

Quest_SC_UpdateLoopQuestData* Quest_SC_UpdateLoopQuestData::default_instance_ = NULL;

Quest_SC_UpdateLoopQuestData* Quest_SC_UpdateLoopQuestData::New() const {
  return new Quest_SC_UpdateLoopQuestData;
}

void Quest_SC_UpdateLoopQuestData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_questcycle()) {
      if (questcycle_ != NULL) questcycle_->::proto::message::ProtoQuestCycle::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Quest_SC_UpdateLoopQuestData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.message.ProtoQuestCycle questCycle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_questcycle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Quest_SC_UpdateLoopQuestData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.message.ProtoQuestCycle questCycle = 1;
  if (has_questcycle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->questcycle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Quest_SC_UpdateLoopQuestData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.message.ProtoQuestCycle questCycle = 1;
  if (has_questcycle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->questcycle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Quest_SC_UpdateLoopQuestData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.message.ProtoQuestCycle questCycle = 1;
    if (has_questcycle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->questcycle());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Quest_SC_UpdateLoopQuestData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Quest_SC_UpdateLoopQuestData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Quest_SC_UpdateLoopQuestData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Quest_SC_UpdateLoopQuestData::MergeFrom(const Quest_SC_UpdateLoopQuestData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questcycle()) {
      mutable_questcycle()->::proto::message::ProtoQuestCycle::MergeFrom(from.questcycle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Quest_SC_UpdateLoopQuestData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quest_SC_UpdateLoopQuestData::CopyFrom(const Quest_SC_UpdateLoopQuestData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quest_SC_UpdateLoopQuestData::IsInitialized() const {

  if (has_questcycle()) {
    if (!this->questcycle().IsInitialized()) return false;
  }
  return true;
}

void Quest_SC_UpdateLoopQuestData::Swap(Quest_SC_UpdateLoopQuestData* other) {
  if (other != this) {
    std::swap(questcycle_, other->questcycle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Quest_SC_UpdateLoopQuestData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Quest_SC_UpdateLoopQuestData_descriptor_;
  metadata.reflection = Quest_SC_UpdateLoopQuestData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoQuestData::kIdFieldNumber;
const int ProtoQuestData::kKindFieldNumber;
const int ProtoQuestData::kCountFieldNumber;
const int ProtoQuestData::kNProgressFieldNumber;
const int ProtoQuestData::kIsDoneFieldNumber;
const int ProtoQuestData::kNInitProgressFieldNumber;
#endif  // !_MSC_VER

ProtoQuestData::ProtoQuestData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoQuestData::InitAsDefaultInstance() {
}

ProtoQuestData::ProtoQuestData(const ProtoQuestData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoQuestData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  kind_ = 0;
  count_ = 0;
  nprogress_ = GOOGLE_ULONGLONG(0);
  isdone_ = false;
  ninitprogress_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoQuestData::~ProtoQuestData() {
  SharedDtor();
}

void ProtoQuestData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoQuestData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoQuestData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoQuestData_descriptor_;
}

const ProtoQuestData& ProtoQuestData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quest_2eproto();
  return *default_instance_;
}

ProtoQuestData* ProtoQuestData::default_instance_ = NULL;

ProtoQuestData* ProtoQuestData::New() const {
  return new ProtoQuestData;
}

void ProtoQuestData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    kind_ = 0;
    count_ = 0;
    nprogress_ = GOOGLE_ULONGLONG(0);
    isdone_ = false;
    ninitprogress_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoQuestData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_kind;
        break;
      }

      // required int32 kind = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kind_)));
          set_has_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // required int32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nProgress;
        break;
      }

      // optional uint64 nProgress = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nProgress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nprogress_)));
          set_has_nprogress();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isDone;
        break;
      }

      // optional bool isDone = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isDone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdone_)));
          set_has_isdone();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_nInitProgress;
        break;
      }

      // optional uint64 nInitProgress = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nInitProgress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ninitprogress_)));
          set_has_ninitprogress();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoQuestData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 kind = 2;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->kind(), output);
  }

  // required int32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  // optional uint64 nProgress = 4;
  if (has_nprogress()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->nprogress(), output);
  }

  // optional bool isDone = 5;
  if (has_isdone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isdone(), output);
  }

  // optional uint64 nInitProgress = 6;
  if (has_ninitprogress()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->ninitprogress(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoQuestData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 kind = 2;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->kind(), target);
  }

  // required int32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  // optional uint64 nProgress = 4;
  if (has_nprogress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->nprogress(), target);
  }

  // optional bool isDone = 5;
  if (has_isdone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isdone(), target);
  }

  // optional uint64 nInitProgress = 6;
  if (has_ninitprogress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->ninitprogress(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoQuestData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 kind = 2;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kind());
    }

    // required int32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional uint64 nProgress = 4;
    if (has_nprogress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nprogress());
    }

    // optional bool isDone = 5;
    if (has_isdone()) {
      total_size += 1 + 1;
    }

    // optional uint64 nInitProgress = 6;
    if (has_ninitprogress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ninitprogress());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoQuestData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoQuestData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoQuestData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoQuestData::MergeFrom(const ProtoQuestData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_kind()) {
      set_kind(from.kind());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_nprogress()) {
      set_nprogress(from.nprogress());
    }
    if (from.has_isdone()) {
      set_isdone(from.isdone());
    }
    if (from.has_ninitprogress()) {
      set_ninitprogress(from.ninitprogress());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoQuestData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoQuestData::CopyFrom(const ProtoQuestData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoQuestData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ProtoQuestData::Swap(ProtoQuestData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(kind_, other->kind_);
    std::swap(count_, other->count_);
    std::swap(nprogress_, other->nprogress_);
    std::swap(isdone_, other->isdone_);
    std::swap(ninitprogress_, other->ninitprogress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoQuestData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoQuestData_descriptor_;
  metadata.reflection = ProtoQuestData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Quest_CS_GetQuestInfo::kKindFieldNumber;
#endif  // !_MSC_VER

Quest_CS_GetQuestInfo::Quest_CS_GetQuestInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Quest_CS_GetQuestInfo::InitAsDefaultInstance() {
}

Quest_CS_GetQuestInfo::Quest_CS_GetQuestInfo(const Quest_CS_GetQuestInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Quest_CS_GetQuestInfo::SharedCtor() {
  _cached_size_ = 0;
  kind_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Quest_CS_GetQuestInfo::~Quest_CS_GetQuestInfo() {
  SharedDtor();
}

void Quest_CS_GetQuestInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Quest_CS_GetQuestInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Quest_CS_GetQuestInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Quest_CS_GetQuestInfo_descriptor_;
}

const Quest_CS_GetQuestInfo& Quest_CS_GetQuestInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quest_2eproto();
  return *default_instance_;
}

Quest_CS_GetQuestInfo* Quest_CS_GetQuestInfo::default_instance_ = NULL;

Quest_CS_GetQuestInfo* Quest_CS_GetQuestInfo::New() const {
  return new Quest_CS_GetQuestInfo;
}

void Quest_CS_GetQuestInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    kind_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Quest_CS_GetQuestInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 kind = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kind_)));
          set_has_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Quest_CS_GetQuestInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 kind = 1;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->kind(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Quest_CS_GetQuestInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 kind = 1;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->kind(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Quest_CS_GetQuestInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 kind = 1;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kind());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Quest_CS_GetQuestInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Quest_CS_GetQuestInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Quest_CS_GetQuestInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Quest_CS_GetQuestInfo::MergeFrom(const Quest_CS_GetQuestInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kind()) {
      set_kind(from.kind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Quest_CS_GetQuestInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quest_CS_GetQuestInfo::CopyFrom(const Quest_CS_GetQuestInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quest_CS_GetQuestInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Quest_CS_GetQuestInfo::Swap(Quest_CS_GetQuestInfo* other) {
  if (other != this) {
    std::swap(kind_, other->kind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Quest_CS_GetQuestInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Quest_CS_GetQuestInfo_descriptor_;
  metadata.reflection = Quest_CS_GetQuestInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Quest_SC_GetQuestInfo::kResultFieldNumber;
const int Quest_SC_GetQuestInfo::kKindFieldNumber;
const int Quest_SC_GetQuestInfo::kQuestMainFieldNumber;
const int Quest_SC_GetQuestInfo::kQuestActiveFieldNumber;
const int Quest_SC_GetQuestInfo::kQuestFubenFieldNumber;
const int Quest_SC_GetQuestInfo::kQuestDailyKillMonsterFieldNumber;
const int Quest_SC_GetQuestInfo::kQuestBranchFieldNumber;
const int Quest_SC_GetQuestInfo::kQuestCycleFieldNumber;
#endif  // !_MSC_VER

Quest_SC_GetQuestInfo::Quest_SC_GetQuestInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Quest_SC_GetQuestInfo::InitAsDefaultInstance() {
  questmain_ = const_cast< ::proto::message::ProtoQuestMain*>(&::proto::message::ProtoQuestMain::default_instance());
  questactive_ = const_cast< ::proto::message::ProtoQuestActive*>(&::proto::message::ProtoQuestActive::default_instance());
  questfuben_ = const_cast< ::proto::message::ProtoQuestFuben*>(&::proto::message::ProtoQuestFuben::default_instance());
  questdailykillmonster_ = const_cast< ::proto::message::ProtoQuestDailyKillMonster*>(&::proto::message::ProtoQuestDailyKillMonster::default_instance());
  questbranch_ = const_cast< ::proto::message::ProtoQuestBranch*>(&::proto::message::ProtoQuestBranch::default_instance());
  questcycle_ = const_cast< ::proto::message::ProtoQuestCycle*>(&::proto::message::ProtoQuestCycle::default_instance());
}

Quest_SC_GetQuestInfo::Quest_SC_GetQuestInfo(const Quest_SC_GetQuestInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Quest_SC_GetQuestInfo::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  kind_ = 0;
  questmain_ = NULL;
  questactive_ = NULL;
  questfuben_ = NULL;
  questdailykillmonster_ = NULL;
  questbranch_ = NULL;
  questcycle_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Quest_SC_GetQuestInfo::~Quest_SC_GetQuestInfo() {
  SharedDtor();
}

void Quest_SC_GetQuestInfo::SharedDtor() {
  if (this != default_instance_) {
    delete questmain_;
    delete questactive_;
    delete questfuben_;
    delete questdailykillmonster_;
    delete questbranch_;
    delete questcycle_;
  }
}

void Quest_SC_GetQuestInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Quest_SC_GetQuestInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Quest_SC_GetQuestInfo_descriptor_;
}

const Quest_SC_GetQuestInfo& Quest_SC_GetQuestInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quest_2eproto();
  return *default_instance_;
}

Quest_SC_GetQuestInfo* Quest_SC_GetQuestInfo::default_instance_ = NULL;

Quest_SC_GetQuestInfo* Quest_SC_GetQuestInfo::New() const {
  return new Quest_SC_GetQuestInfo;
}

void Quest_SC_GetQuestInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    kind_ = 0;
    if (has_questmain()) {
      if (questmain_ != NULL) questmain_->::proto::message::ProtoQuestMain::Clear();
    }
    if (has_questactive()) {
      if (questactive_ != NULL) questactive_->::proto::message::ProtoQuestActive::Clear();
    }
    if (has_questfuben()) {
      if (questfuben_ != NULL) questfuben_->::proto::message::ProtoQuestFuben::Clear();
    }
    if (has_questdailykillmonster()) {
      if (questdailykillmonster_ != NULL) questdailykillmonster_->::proto::message::ProtoQuestDailyKillMonster::Clear();
    }
    if (has_questbranch()) {
      if (questbranch_ != NULL) questbranch_->::proto::message::ProtoQuestBranch::Clear();
    }
    if (has_questcycle()) {
      if (questcycle_ != NULL) questcycle_->::proto::message::ProtoQuestCycle::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Quest_SC_GetQuestInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_kind;
        break;
      }

      // optional int32 kind = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kind_)));
          set_has_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_questMain;
        break;
      }

      // optional .proto.message.ProtoQuestMain questMain = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_questMain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_questmain()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_questActive;
        break;
      }

      // optional .proto.message.ProtoQuestActive questActive = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_questActive:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_questactive()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_questFuben;
        break;
      }

      // optional .proto.message.ProtoQuestFuben questFuben = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_questFuben:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_questfuben()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_questDailyKillMonster;
        break;
      }

      // optional .proto.message.ProtoQuestDailyKillMonster questDailyKillMonster = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_questDailyKillMonster:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_questdailykillmonster()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_questBranch;
        break;
      }

      // optional .proto.message.ProtoQuestBranch questBranch = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_questBranch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_questbranch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_questCycle;
        break;
      }

      // optional .proto.message.ProtoQuestCycle questCycle = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_questCycle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_questcycle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Quest_SC_GetQuestInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 kind = 2;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->kind(), output);
  }

  // optional .proto.message.ProtoQuestMain questMain = 3;
  if (has_questmain()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->questmain(), output);
  }

  // optional .proto.message.ProtoQuestActive questActive = 4;
  if (has_questactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->questactive(), output);
  }

  // optional .proto.message.ProtoQuestFuben questFuben = 5;
  if (has_questfuben()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->questfuben(), output);
  }

  // optional .proto.message.ProtoQuestDailyKillMonster questDailyKillMonster = 6;
  if (has_questdailykillmonster()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->questdailykillmonster(), output);
  }

  // optional .proto.message.ProtoQuestBranch questBranch = 7;
  if (has_questbranch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->questbranch(), output);
  }

  // optional .proto.message.ProtoQuestCycle questCycle = 8;
  if (has_questcycle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->questcycle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Quest_SC_GetQuestInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 kind = 2;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->kind(), target);
  }

  // optional .proto.message.ProtoQuestMain questMain = 3;
  if (has_questmain()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->questmain(), target);
  }

  // optional .proto.message.ProtoQuestActive questActive = 4;
  if (has_questactive()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->questactive(), target);
  }

  // optional .proto.message.ProtoQuestFuben questFuben = 5;
  if (has_questfuben()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->questfuben(), target);
  }

  // optional .proto.message.ProtoQuestDailyKillMonster questDailyKillMonster = 6;
  if (has_questdailykillmonster()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->questdailykillmonster(), target);
  }

  // optional .proto.message.ProtoQuestBranch questBranch = 7;
  if (has_questbranch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->questbranch(), target);
  }

  // optional .proto.message.ProtoQuestCycle questCycle = 8;
  if (has_questcycle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->questcycle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Quest_SC_GetQuestInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 kind = 2;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kind());
    }

    // optional .proto.message.ProtoQuestMain questMain = 3;
    if (has_questmain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->questmain());
    }

    // optional .proto.message.ProtoQuestActive questActive = 4;
    if (has_questactive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->questactive());
    }

    // optional .proto.message.ProtoQuestFuben questFuben = 5;
    if (has_questfuben()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->questfuben());
    }

    // optional .proto.message.ProtoQuestDailyKillMonster questDailyKillMonster = 6;
    if (has_questdailykillmonster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->questdailykillmonster());
    }

    // optional .proto.message.ProtoQuestBranch questBranch = 7;
    if (has_questbranch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->questbranch());
    }

    // optional .proto.message.ProtoQuestCycle questCycle = 8;
    if (has_questcycle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->questcycle());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Quest_SC_GetQuestInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Quest_SC_GetQuestInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Quest_SC_GetQuestInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Quest_SC_GetQuestInfo::MergeFrom(const Quest_SC_GetQuestInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_kind()) {
      set_kind(from.kind());
    }
    if (from.has_questmain()) {
      mutable_questmain()->::proto::message::ProtoQuestMain::MergeFrom(from.questmain());
    }
    if (from.has_questactive()) {
      mutable_questactive()->::proto::message::ProtoQuestActive::MergeFrom(from.questactive());
    }
    if (from.has_questfuben()) {
      mutable_questfuben()->::proto::message::ProtoQuestFuben::MergeFrom(from.questfuben());
    }
    if (from.has_questdailykillmonster()) {
      mutable_questdailykillmonster()->::proto::message::ProtoQuestDailyKillMonster::MergeFrom(from.questdailykillmonster());
    }
    if (from.has_questbranch()) {
      mutable_questbranch()->::proto::message::ProtoQuestBranch::MergeFrom(from.questbranch());
    }
    if (from.has_questcycle()) {
      mutable_questcycle()->::proto::message::ProtoQuestCycle::MergeFrom(from.questcycle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Quest_SC_GetQuestInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quest_SC_GetQuestInfo::CopyFrom(const Quest_SC_GetQuestInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quest_SC_GetQuestInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_questactive()) {
    if (!this->questactive().IsInitialized()) return false;
  }
  if (has_questfuben()) {
    if (!this->questfuben().IsInitialized()) return false;
  }
  if (has_questdailykillmonster()) {
    if (!this->questdailykillmonster().IsInitialized()) return false;
  }
  if (has_questcycle()) {
    if (!this->questcycle().IsInitialized()) return false;
  }
  return true;
}

void Quest_SC_GetQuestInfo::Swap(Quest_SC_GetQuestInfo* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(kind_, other->kind_);
    std::swap(questmain_, other->questmain_);
    std::swap(questactive_, other->questactive_);
    std::swap(questfuben_, other->questfuben_);
    std::swap(questdailykillmonster_, other->questdailykillmonster_);
    std::swap(questbranch_, other->questbranch_);
    std::swap(questcycle_, other->questcycle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Quest_SC_GetQuestInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Quest_SC_GetQuestInfo_descriptor_;
  metadata.reflection = Quest_SC_GetQuestInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Quest_CS_GetQuestData::kIdFieldNumber;
const int Quest_CS_GetQuestData::kKindFieldNumber;
#endif  // !_MSC_VER

Quest_CS_GetQuestData::Quest_CS_GetQuestData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Quest_CS_GetQuestData::InitAsDefaultInstance() {
}

Quest_CS_GetQuestData::Quest_CS_GetQuestData(const Quest_CS_GetQuestData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Quest_CS_GetQuestData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  kind_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Quest_CS_GetQuestData::~Quest_CS_GetQuestData() {
  SharedDtor();
}

void Quest_CS_GetQuestData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Quest_CS_GetQuestData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Quest_CS_GetQuestData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Quest_CS_GetQuestData_descriptor_;
}

const Quest_CS_GetQuestData& Quest_CS_GetQuestData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quest_2eproto();
  return *default_instance_;
}

Quest_CS_GetQuestData* Quest_CS_GetQuestData::default_instance_ = NULL;

Quest_CS_GetQuestData* Quest_CS_GetQuestData::New() const {
  return new Quest_CS_GetQuestData;
}

void Quest_CS_GetQuestData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    kind_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Quest_CS_GetQuestData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_kind;
        break;
      }

      // required int32 kind = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kind_)));
          set_has_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Quest_CS_GetQuestData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 kind = 2;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->kind(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Quest_CS_GetQuestData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 kind = 2;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->kind(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Quest_CS_GetQuestData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 kind = 2;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kind());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Quest_CS_GetQuestData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Quest_CS_GetQuestData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Quest_CS_GetQuestData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Quest_CS_GetQuestData::MergeFrom(const Quest_CS_GetQuestData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_kind()) {
      set_kind(from.kind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Quest_CS_GetQuestData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quest_CS_GetQuestData::CopyFrom(const Quest_CS_GetQuestData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quest_CS_GetQuestData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Quest_CS_GetQuestData::Swap(Quest_CS_GetQuestData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(kind_, other->kind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Quest_CS_GetQuestData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Quest_CS_GetQuestData_descriptor_;
  metadata.reflection = Quest_CS_GetQuestData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Quest_SC_GetQuestData::kResultFieldNumber;
const int Quest_SC_GetQuestData::kQuestDataFieldNumber;
#endif  // !_MSC_VER

Quest_SC_GetQuestData::Quest_SC_GetQuestData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Quest_SC_GetQuestData::InitAsDefaultInstance() {
  questdata_ = const_cast< ::proto::message::ProtoQuestData*>(&::proto::message::ProtoQuestData::default_instance());
}

Quest_SC_GetQuestData::Quest_SC_GetQuestData(const Quest_SC_GetQuestData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Quest_SC_GetQuestData::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  questdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Quest_SC_GetQuestData::~Quest_SC_GetQuestData() {
  SharedDtor();
}

void Quest_SC_GetQuestData::SharedDtor() {
  if (this != default_instance_) {
    delete questdata_;
  }
}

void Quest_SC_GetQuestData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Quest_SC_GetQuestData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Quest_SC_GetQuestData_descriptor_;
}

const Quest_SC_GetQuestData& Quest_SC_GetQuestData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quest_2eproto();
  return *default_instance_;
}

Quest_SC_GetQuestData* Quest_SC_GetQuestData::default_instance_ = NULL;

Quest_SC_GetQuestData* Quest_SC_GetQuestData::New() const {
  return new Quest_SC_GetQuestData;
}

void Quest_SC_GetQuestData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_questdata()) {
      if (questdata_ != NULL) questdata_->::proto::message::ProtoQuestData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Quest_SC_GetQuestData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_questData;
        break;
      }

      // optional .proto.message.ProtoQuestData questData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_questData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_questdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Quest_SC_GetQuestData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .proto.message.ProtoQuestData questData = 2;
  if (has_questdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->questdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Quest_SC_GetQuestData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .proto.message.ProtoQuestData questData = 2;
  if (has_questdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->questdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Quest_SC_GetQuestData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .proto.message.ProtoQuestData questData = 2;
    if (has_questdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->questdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Quest_SC_GetQuestData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Quest_SC_GetQuestData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Quest_SC_GetQuestData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Quest_SC_GetQuestData::MergeFrom(const Quest_SC_GetQuestData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_questdata()) {
      mutable_questdata()->::proto::message::ProtoQuestData::MergeFrom(from.questdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Quest_SC_GetQuestData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quest_SC_GetQuestData::CopyFrom(const Quest_SC_GetQuestData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quest_SC_GetQuestData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_questdata()) {
    if (!this->questdata().IsInitialized()) return false;
  }
  return true;
}

void Quest_SC_GetQuestData::Swap(Quest_SC_GetQuestData* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(questdata_, other->questdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Quest_SC_GetQuestData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Quest_SC_GetQuestData_descriptor_;
  metadata.reflection = Quest_SC_GetQuestData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Quest_CS_AddQuest::kQuestIdFieldNumber;
const int Quest_CS_AddQuest::kKindFieldNumber;
#endif  // !_MSC_VER

Quest_CS_AddQuest::Quest_CS_AddQuest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Quest_CS_AddQuest::InitAsDefaultInstance() {
}

Quest_CS_AddQuest::Quest_CS_AddQuest(const Quest_CS_AddQuest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Quest_CS_AddQuest::SharedCtor() {
  _cached_size_ = 0;
  questid_ = 0;
  kind_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Quest_CS_AddQuest::~Quest_CS_AddQuest() {
  SharedDtor();
}

void Quest_CS_AddQuest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Quest_CS_AddQuest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Quest_CS_AddQuest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Quest_CS_AddQuest_descriptor_;
}

const Quest_CS_AddQuest& Quest_CS_AddQuest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quest_2eproto();
  return *default_instance_;
}

Quest_CS_AddQuest* Quest_CS_AddQuest::default_instance_ = NULL;

Quest_CS_AddQuest* Quest_CS_AddQuest::New() const {
  return new Quest_CS_AddQuest;
}

void Quest_CS_AddQuest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    questid_ = 0;
    kind_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Quest_CS_AddQuest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 questId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_kind;
        break;
      }

      // required int32 kind = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kind_)));
          set_has_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Quest_CS_AddQuest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 questId = 1;
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->questid(), output);
  }

  // required int32 kind = 2;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->kind(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Quest_CS_AddQuest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 questId = 1;
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->questid(), target);
  }

  // required int32 kind = 2;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->kind(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Quest_CS_AddQuest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 questId = 1;
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->questid());
    }

    // required int32 kind = 2;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kind());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Quest_CS_AddQuest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Quest_CS_AddQuest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Quest_CS_AddQuest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Quest_CS_AddQuest::MergeFrom(const Quest_CS_AddQuest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questid()) {
      set_questid(from.questid());
    }
    if (from.has_kind()) {
      set_kind(from.kind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Quest_CS_AddQuest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quest_CS_AddQuest::CopyFrom(const Quest_CS_AddQuest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quest_CS_AddQuest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Quest_CS_AddQuest::Swap(Quest_CS_AddQuest* other) {
  if (other != this) {
    std::swap(questid_, other->questid_);
    std::swap(kind_, other->kind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Quest_CS_AddQuest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Quest_CS_AddQuest_descriptor_;
  metadata.reflection = Quest_CS_AddQuest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Quest_SC_AddQuest::kResultFieldNumber;
const int Quest_SC_AddQuest::kIdFieldNumber;
const int Quest_SC_AddQuest::kKindFieldNumber;
#endif  // !_MSC_VER

Quest_SC_AddQuest::Quest_SC_AddQuest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Quest_SC_AddQuest::InitAsDefaultInstance() {
}

Quest_SC_AddQuest::Quest_SC_AddQuest(const Quest_SC_AddQuest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Quest_SC_AddQuest::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  id_ = 0;
  kind_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Quest_SC_AddQuest::~Quest_SC_AddQuest() {
  SharedDtor();
}

void Quest_SC_AddQuest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Quest_SC_AddQuest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Quest_SC_AddQuest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Quest_SC_AddQuest_descriptor_;
}

const Quest_SC_AddQuest& Quest_SC_AddQuest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quest_2eproto();
  return *default_instance_;
}

Quest_SC_AddQuest* Quest_SC_AddQuest::default_instance_ = NULL;

Quest_SC_AddQuest* Quest_SC_AddQuest::New() const {
  return new Quest_SC_AddQuest;
}

void Quest_SC_AddQuest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    id_ = 0;
    kind_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Quest_SC_AddQuest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_kind;
        break;
      }

      // optional int32 kind = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kind_)));
          set_has_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Quest_SC_AddQuest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional int32 kind = 3;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->kind(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Quest_SC_AddQuest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional int32 kind = 3;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->kind(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Quest_SC_AddQuest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 kind = 3;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kind());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Quest_SC_AddQuest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Quest_SC_AddQuest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Quest_SC_AddQuest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Quest_SC_AddQuest::MergeFrom(const Quest_SC_AddQuest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_kind()) {
      set_kind(from.kind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Quest_SC_AddQuest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quest_SC_AddQuest::CopyFrom(const Quest_SC_AddQuest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quest_SC_AddQuest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Quest_SC_AddQuest::Swap(Quest_SC_AddQuest* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(id_, other->id_);
    std::swap(kind_, other->kind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Quest_SC_AddQuest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Quest_SC_AddQuest_descriptor_;
  metadata.reflection = Quest_SC_AddQuest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Quest_CS_FinishQuest::kQuestIdFieldNumber;
const int Quest_CS_FinishQuest::kKindFieldNumber;
const int Quest_CS_FinishQuest::kArgFieldNumber;
const int Quest_CS_FinishQuest::kQuestresultFieldNumber;
#endif  // !_MSC_VER

Quest_CS_FinishQuest::Quest_CS_FinishQuest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Quest_CS_FinishQuest::InitAsDefaultInstance() {
}

Quest_CS_FinishQuest::Quest_CS_FinishQuest(const Quest_CS_FinishQuest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Quest_CS_FinishQuest::SharedCtor() {
  _cached_size_ = 0;
  questid_ = 0;
  kind_ = 0;
  arg_ = GOOGLE_ULONGLONG(0);
  questresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Quest_CS_FinishQuest::~Quest_CS_FinishQuest() {
  SharedDtor();
}

void Quest_CS_FinishQuest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Quest_CS_FinishQuest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Quest_CS_FinishQuest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Quest_CS_FinishQuest_descriptor_;
}

const Quest_CS_FinishQuest& Quest_CS_FinishQuest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quest_2eproto();
  return *default_instance_;
}

Quest_CS_FinishQuest* Quest_CS_FinishQuest::default_instance_ = NULL;

Quest_CS_FinishQuest* Quest_CS_FinishQuest::New() const {
  return new Quest_CS_FinishQuest;
}

void Quest_CS_FinishQuest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    questid_ = 0;
    kind_ = 0;
    arg_ = GOOGLE_ULONGLONG(0);
    questresult_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Quest_CS_FinishQuest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 questId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_kind;
        break;
      }

      // required int32 kind = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kind_)));
          set_has_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_arg;
        break;
      }

      // optional uint64 arg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &arg_)));
          set_has_arg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_questresult;
        break;
      }

      // optional int32 questresult = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_questresult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &questresult_)));
          set_has_questresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Quest_CS_FinishQuest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 questId = 1;
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->questid(), output);
  }

  // required int32 kind = 2;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->kind(), output);
  }

  // optional uint64 arg = 3;
  if (has_arg()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->arg(), output);
  }

  // optional int32 questresult = 4;
  if (has_questresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->questresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Quest_CS_FinishQuest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 questId = 1;
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->questid(), target);
  }

  // required int32 kind = 2;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->kind(), target);
  }

  // optional uint64 arg = 3;
  if (has_arg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->arg(), target);
  }

  // optional int32 questresult = 4;
  if (has_questresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->questresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Quest_CS_FinishQuest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 questId = 1;
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->questid());
    }

    // required int32 kind = 2;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kind());
    }

    // optional uint64 arg = 3;
    if (has_arg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->arg());
    }

    // optional int32 questresult = 4;
    if (has_questresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->questresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Quest_CS_FinishQuest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Quest_CS_FinishQuest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Quest_CS_FinishQuest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Quest_CS_FinishQuest::MergeFrom(const Quest_CS_FinishQuest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questid()) {
      set_questid(from.questid());
    }
    if (from.has_kind()) {
      set_kind(from.kind());
    }
    if (from.has_arg()) {
      set_arg(from.arg());
    }
    if (from.has_questresult()) {
      set_questresult(from.questresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Quest_CS_FinishQuest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quest_CS_FinishQuest::CopyFrom(const Quest_CS_FinishQuest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quest_CS_FinishQuest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Quest_CS_FinishQuest::Swap(Quest_CS_FinishQuest* other) {
  if (other != this) {
    std::swap(questid_, other->questid_);
    std::swap(kind_, other->kind_);
    std::swap(arg_, other->arg_);
    std::swap(questresult_, other->questresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Quest_CS_FinishQuest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Quest_CS_FinishQuest_descriptor_;
  metadata.reflection = Quest_CS_FinishQuest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Quest_SC_FinishQuest::kResultFieldNumber;
const int Quest_SC_FinishQuest::kIdFieldNumber;
const int Quest_SC_FinishQuest::kKindFieldNumber;
const int Quest_SC_FinishQuest::kQuestresultFieldNumber;
#endif  // !_MSC_VER

Quest_SC_FinishQuest::Quest_SC_FinishQuest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Quest_SC_FinishQuest::InitAsDefaultInstance() {
}

Quest_SC_FinishQuest::Quest_SC_FinishQuest(const Quest_SC_FinishQuest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Quest_SC_FinishQuest::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  id_ = 0;
  kind_ = 0;
  questresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Quest_SC_FinishQuest::~Quest_SC_FinishQuest() {
  SharedDtor();
}

void Quest_SC_FinishQuest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Quest_SC_FinishQuest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Quest_SC_FinishQuest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Quest_SC_FinishQuest_descriptor_;
}

const Quest_SC_FinishQuest& Quest_SC_FinishQuest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quest_2eproto();
  return *default_instance_;
}

Quest_SC_FinishQuest* Quest_SC_FinishQuest::default_instance_ = NULL;

Quest_SC_FinishQuest* Quest_SC_FinishQuest::New() const {
  return new Quest_SC_FinishQuest;
}

void Quest_SC_FinishQuest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    id_ = 0;
    kind_ = 0;
    questresult_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Quest_SC_FinishQuest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_kind;
        break;
      }

      // optional int32 kind = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kind_)));
          set_has_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_questresult;
        break;
      }

      // optional int32 questresult = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_questresult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &questresult_)));
          set_has_questresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Quest_SC_FinishQuest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional int32 kind = 3;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->kind(), output);
  }

  // optional int32 questresult = 4;
  if (has_questresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->questresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Quest_SC_FinishQuest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional int32 kind = 3;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->kind(), target);
  }

  // optional int32 questresult = 4;
  if (has_questresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->questresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Quest_SC_FinishQuest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 kind = 3;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kind());
    }

    // optional int32 questresult = 4;
    if (has_questresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->questresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Quest_SC_FinishQuest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Quest_SC_FinishQuest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Quest_SC_FinishQuest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Quest_SC_FinishQuest::MergeFrom(const Quest_SC_FinishQuest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_kind()) {
      set_kind(from.kind());
    }
    if (from.has_questresult()) {
      set_questresult(from.questresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Quest_SC_FinishQuest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quest_SC_FinishQuest::CopyFrom(const Quest_SC_FinishQuest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quest_SC_FinishQuest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Quest_SC_FinishQuest::Swap(Quest_SC_FinishQuest* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(id_, other->id_);
    std::swap(kind_, other->kind_);
    std::swap(questresult_, other->questresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Quest_SC_FinishQuest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Quest_SC_FinishQuest_descriptor_;
  metadata.reflection = Quest_SC_FinishQuest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Quest_CS_QuitQuest::kQuestIdFieldNumber;
const int Quest_CS_QuitQuest::kKindFieldNumber;
#endif  // !_MSC_VER

Quest_CS_QuitQuest::Quest_CS_QuitQuest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Quest_CS_QuitQuest::InitAsDefaultInstance() {
}

Quest_CS_QuitQuest::Quest_CS_QuitQuest(const Quest_CS_QuitQuest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Quest_CS_QuitQuest::SharedCtor() {
  _cached_size_ = 0;
  questid_ = 0;
  kind_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Quest_CS_QuitQuest::~Quest_CS_QuitQuest() {
  SharedDtor();
}

void Quest_CS_QuitQuest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Quest_CS_QuitQuest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Quest_CS_QuitQuest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Quest_CS_QuitQuest_descriptor_;
}

const Quest_CS_QuitQuest& Quest_CS_QuitQuest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quest_2eproto();
  return *default_instance_;
}

Quest_CS_QuitQuest* Quest_CS_QuitQuest::default_instance_ = NULL;

Quest_CS_QuitQuest* Quest_CS_QuitQuest::New() const {
  return new Quest_CS_QuitQuest;
}

void Quest_CS_QuitQuest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    questid_ = 0;
    kind_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Quest_CS_QuitQuest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 questId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_kind;
        break;
      }

      // required int32 kind = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kind_)));
          set_has_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Quest_CS_QuitQuest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 questId = 1;
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->questid(), output);
  }

  // required int32 kind = 2;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->kind(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Quest_CS_QuitQuest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 questId = 1;
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->questid(), target);
  }

  // required int32 kind = 2;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->kind(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Quest_CS_QuitQuest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 questId = 1;
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->questid());
    }

    // required int32 kind = 2;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kind());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Quest_CS_QuitQuest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Quest_CS_QuitQuest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Quest_CS_QuitQuest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Quest_CS_QuitQuest::MergeFrom(const Quest_CS_QuitQuest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questid()) {
      set_questid(from.questid());
    }
    if (from.has_kind()) {
      set_kind(from.kind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Quest_CS_QuitQuest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quest_CS_QuitQuest::CopyFrom(const Quest_CS_QuitQuest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quest_CS_QuitQuest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Quest_CS_QuitQuest::Swap(Quest_CS_QuitQuest* other) {
  if (other != this) {
    std::swap(questid_, other->questid_);
    std::swap(kind_, other->kind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Quest_CS_QuitQuest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Quest_CS_QuitQuest_descriptor_;
  metadata.reflection = Quest_CS_QuitQuest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Quest_SC_QuitQuest::kResultFieldNumber;
const int Quest_SC_QuitQuest::kIdFieldNumber;
const int Quest_SC_QuitQuest::kKindFieldNumber;
const int Quest_SC_QuitQuest::kIsautoFieldNumber;
#endif  // !_MSC_VER

Quest_SC_QuitQuest::Quest_SC_QuitQuest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Quest_SC_QuitQuest::InitAsDefaultInstance() {
}

Quest_SC_QuitQuest::Quest_SC_QuitQuest(const Quest_SC_QuitQuest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Quest_SC_QuitQuest::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  id_ = 0;
  kind_ = 0;
  isauto_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Quest_SC_QuitQuest::~Quest_SC_QuitQuest() {
  SharedDtor();
}

void Quest_SC_QuitQuest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Quest_SC_QuitQuest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Quest_SC_QuitQuest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Quest_SC_QuitQuest_descriptor_;
}

const Quest_SC_QuitQuest& Quest_SC_QuitQuest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quest_2eproto();
  return *default_instance_;
}

Quest_SC_QuitQuest* Quest_SC_QuitQuest::default_instance_ = NULL;

Quest_SC_QuitQuest* Quest_SC_QuitQuest::New() const {
  return new Quest_SC_QuitQuest;
}

void Quest_SC_QuitQuest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    id_ = 0;
    kind_ = 0;
    isauto_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Quest_SC_QuitQuest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_kind;
        break;
      }

      // optional int32 kind = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kind_)));
          set_has_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isauto;
        break;
      }

      // optional int32 isauto = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isauto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isauto_)));
          set_has_isauto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Quest_SC_QuitQuest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional int32 kind = 3;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->kind(), output);
  }

  // optional int32 isauto = 4;
  if (has_isauto()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->isauto(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Quest_SC_QuitQuest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional int32 kind = 3;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->kind(), target);
  }

  // optional int32 isauto = 4;
  if (has_isauto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->isauto(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Quest_SC_QuitQuest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 kind = 3;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kind());
    }

    // optional int32 isauto = 4;
    if (has_isauto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isauto());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Quest_SC_QuitQuest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Quest_SC_QuitQuest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Quest_SC_QuitQuest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Quest_SC_QuitQuest::MergeFrom(const Quest_SC_QuitQuest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_kind()) {
      set_kind(from.kind());
    }
    if (from.has_isauto()) {
      set_isauto(from.isauto());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Quest_SC_QuitQuest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quest_SC_QuitQuest::CopyFrom(const Quest_SC_QuitQuest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quest_SC_QuitQuest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Quest_SC_QuitQuest::Swap(Quest_SC_QuitQuest* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(id_, other->id_);
    std::swap(kind_, other->kind_);
    std::swap(isauto_, other->isauto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Quest_SC_QuitQuest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Quest_SC_QuitQuest_descriptor_;
  metadata.reflection = Quest_SC_QuitQuest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Quest_CS_QuestFinishList::Quest_CS_QuestFinishList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Quest_CS_QuestFinishList::InitAsDefaultInstance() {
}

Quest_CS_QuestFinishList::Quest_CS_QuestFinishList(const Quest_CS_QuestFinishList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Quest_CS_QuestFinishList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Quest_CS_QuestFinishList::~Quest_CS_QuestFinishList() {
  SharedDtor();
}

void Quest_CS_QuestFinishList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Quest_CS_QuestFinishList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Quest_CS_QuestFinishList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Quest_CS_QuestFinishList_descriptor_;
}

const Quest_CS_QuestFinishList& Quest_CS_QuestFinishList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quest_2eproto();
  return *default_instance_;
}

Quest_CS_QuestFinishList* Quest_CS_QuestFinishList::default_instance_ = NULL;

Quest_CS_QuestFinishList* Quest_CS_QuestFinishList::New() const {
  return new Quest_CS_QuestFinishList;
}

void Quest_CS_QuestFinishList::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Quest_CS_QuestFinishList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Quest_CS_QuestFinishList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Quest_CS_QuestFinishList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Quest_CS_QuestFinishList::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Quest_CS_QuestFinishList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Quest_CS_QuestFinishList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Quest_CS_QuestFinishList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Quest_CS_QuestFinishList::MergeFrom(const Quest_CS_QuestFinishList& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Quest_CS_QuestFinishList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quest_CS_QuestFinishList::CopyFrom(const Quest_CS_QuestFinishList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quest_CS_QuestFinishList::IsInitialized() const {

  return true;
}

void Quest_CS_QuestFinishList::Swap(Quest_CS_QuestFinishList* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Quest_CS_QuestFinishList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Quest_CS_QuestFinishList_descriptor_;
  metadata.reflection = Quest_CS_QuestFinishList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Quest_SC_QuestFinishList::kQuestIdFieldNumber;
#endif  // !_MSC_VER

Quest_SC_QuestFinishList::Quest_SC_QuestFinishList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Quest_SC_QuestFinishList::InitAsDefaultInstance() {
}

Quest_SC_QuestFinishList::Quest_SC_QuestFinishList(const Quest_SC_QuestFinishList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Quest_SC_QuestFinishList::SharedCtor() {
  _cached_size_ = 0;
  questid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Quest_SC_QuestFinishList::~Quest_SC_QuestFinishList() {
  SharedDtor();
}

void Quest_SC_QuestFinishList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Quest_SC_QuestFinishList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Quest_SC_QuestFinishList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Quest_SC_QuestFinishList_descriptor_;
}

const Quest_SC_QuestFinishList& Quest_SC_QuestFinishList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quest_2eproto();
  return *default_instance_;
}

Quest_SC_QuestFinishList* Quest_SC_QuestFinishList::default_instance_ = NULL;

Quest_SC_QuestFinishList* Quest_SC_QuestFinishList::New() const {
  return new Quest_SC_QuestFinishList;
}

void Quest_SC_QuestFinishList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    questid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Quest_SC_QuestFinishList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 questId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Quest_SC_QuestFinishList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 questId = 1;
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->questid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Quest_SC_QuestFinishList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 questId = 1;
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->questid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Quest_SC_QuestFinishList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 questId = 1;
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->questid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Quest_SC_QuestFinishList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Quest_SC_QuestFinishList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Quest_SC_QuestFinishList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Quest_SC_QuestFinishList::MergeFrom(const Quest_SC_QuestFinishList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questid()) {
      set_questid(from.questid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Quest_SC_QuestFinishList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quest_SC_QuestFinishList::CopyFrom(const Quest_SC_QuestFinishList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quest_SC_QuestFinishList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Quest_SC_QuestFinishList::Swap(Quest_SC_QuestFinishList* other) {
  if (other != this) {
    std::swap(questid_, other->questid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Quest_SC_QuestFinishList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Quest_SC_QuestFinishList_descriptor_;
  metadata.reflection = Quest_SC_QuestFinishList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Quest_CS_QuestGotoMap::kQuestIdFieldNumber;
#endif  // !_MSC_VER

Quest_CS_QuestGotoMap::Quest_CS_QuestGotoMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Quest_CS_QuestGotoMap::InitAsDefaultInstance() {
}

Quest_CS_QuestGotoMap::Quest_CS_QuestGotoMap(const Quest_CS_QuestGotoMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Quest_CS_QuestGotoMap::SharedCtor() {
  _cached_size_ = 0;
  questid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Quest_CS_QuestGotoMap::~Quest_CS_QuestGotoMap() {
  SharedDtor();
}

void Quest_CS_QuestGotoMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Quest_CS_QuestGotoMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Quest_CS_QuestGotoMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Quest_CS_QuestGotoMap_descriptor_;
}

const Quest_CS_QuestGotoMap& Quest_CS_QuestGotoMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quest_2eproto();
  return *default_instance_;
}

Quest_CS_QuestGotoMap* Quest_CS_QuestGotoMap::default_instance_ = NULL;

Quest_CS_QuestGotoMap* Quest_CS_QuestGotoMap::New() const {
  return new Quest_CS_QuestGotoMap;
}

void Quest_CS_QuestGotoMap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    questid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Quest_CS_QuestGotoMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 questId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Quest_CS_QuestGotoMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 questId = 1;
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->questid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Quest_CS_QuestGotoMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 questId = 1;
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->questid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Quest_CS_QuestGotoMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 questId = 1;
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->questid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Quest_CS_QuestGotoMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Quest_CS_QuestGotoMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Quest_CS_QuestGotoMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Quest_CS_QuestGotoMap::MergeFrom(const Quest_CS_QuestGotoMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questid()) {
      set_questid(from.questid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Quest_CS_QuestGotoMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quest_CS_QuestGotoMap::CopyFrom(const Quest_CS_QuestGotoMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quest_CS_QuestGotoMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Quest_CS_QuestGotoMap::Swap(Quest_CS_QuestGotoMap* other) {
  if (other != this) {
    std::swap(questid_, other->questid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Quest_CS_QuestGotoMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Quest_CS_QuestGotoMap_descriptor_;
  metadata.reflection = Quest_CS_QuestGotoMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Quest_SC_QuestGotoMap::Quest_SC_QuestGotoMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Quest_SC_QuestGotoMap::InitAsDefaultInstance() {
}

Quest_SC_QuestGotoMap::Quest_SC_QuestGotoMap(const Quest_SC_QuestGotoMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Quest_SC_QuestGotoMap::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Quest_SC_QuestGotoMap::~Quest_SC_QuestGotoMap() {
  SharedDtor();
}

void Quest_SC_QuestGotoMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Quest_SC_QuestGotoMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Quest_SC_QuestGotoMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Quest_SC_QuestGotoMap_descriptor_;
}

const Quest_SC_QuestGotoMap& Quest_SC_QuestGotoMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quest_2eproto();
  return *default_instance_;
}

Quest_SC_QuestGotoMap* Quest_SC_QuestGotoMap::default_instance_ = NULL;

Quest_SC_QuestGotoMap* Quest_SC_QuestGotoMap::New() const {
  return new Quest_SC_QuestGotoMap;
}

void Quest_SC_QuestGotoMap::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Quest_SC_QuestGotoMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Quest_SC_QuestGotoMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Quest_SC_QuestGotoMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Quest_SC_QuestGotoMap::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Quest_SC_QuestGotoMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Quest_SC_QuestGotoMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Quest_SC_QuestGotoMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Quest_SC_QuestGotoMap::MergeFrom(const Quest_SC_QuestGotoMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Quest_SC_QuestGotoMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quest_SC_QuestGotoMap::CopyFrom(const Quest_SC_QuestGotoMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quest_SC_QuestGotoMap::IsInitialized() const {

  return true;
}

void Quest_SC_QuestGotoMap::Swap(Quest_SC_QuestGotoMap* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Quest_SC_QuestGotoMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Quest_SC_QuestGotoMap_descriptor_;
  metadata.reflection = Quest_SC_QuestGotoMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Quest_SC_UpdateQuestInfo::kQuestMainFieldNumber;
const int Quest_SC_UpdateQuestInfo::kQuestActiveFieldNumber;
const int Quest_SC_UpdateQuestInfo::kQuestFubenFieldNumber;
const int Quest_SC_UpdateQuestInfo::kQuestDailyKillMonsterFieldNumber;
const int Quest_SC_UpdateQuestInfo::kQuestBranchFieldNumber;
const int Quest_SC_UpdateQuestInfo::kQuestCycleFieldNumber;
#endif  // !_MSC_VER

Quest_SC_UpdateQuestInfo::Quest_SC_UpdateQuestInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Quest_SC_UpdateQuestInfo::InitAsDefaultInstance() {
  questmain_ = const_cast< ::proto::message::ProtoQuestMain*>(&::proto::message::ProtoQuestMain::default_instance());
  questactive_ = const_cast< ::proto::message::ProtoQuestActive*>(&::proto::message::ProtoQuestActive::default_instance());
  questfuben_ = const_cast< ::proto::message::ProtoQuestFuben*>(&::proto::message::ProtoQuestFuben::default_instance());
  questdailykillmonster_ = const_cast< ::proto::message::ProtoQuestDailyKillMonster*>(&::proto::message::ProtoQuestDailyKillMonster::default_instance());
  questbranch_ = const_cast< ::proto::message::ProtoQuestBranch*>(&::proto::message::ProtoQuestBranch::default_instance());
}

Quest_SC_UpdateQuestInfo::Quest_SC_UpdateQuestInfo(const Quest_SC_UpdateQuestInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Quest_SC_UpdateQuestInfo::SharedCtor() {
  _cached_size_ = 0;
  questmain_ = NULL;
  questactive_ = NULL;
  questfuben_ = NULL;
  questdailykillmonster_ = NULL;
  questbranch_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Quest_SC_UpdateQuestInfo::~Quest_SC_UpdateQuestInfo() {
  SharedDtor();
}

void Quest_SC_UpdateQuestInfo::SharedDtor() {
  if (this != default_instance_) {
    delete questmain_;
    delete questactive_;
    delete questfuben_;
    delete questdailykillmonster_;
    delete questbranch_;
  }
}

void Quest_SC_UpdateQuestInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Quest_SC_UpdateQuestInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Quest_SC_UpdateQuestInfo_descriptor_;
}

const Quest_SC_UpdateQuestInfo& Quest_SC_UpdateQuestInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quest_2eproto();
  return *default_instance_;
}

Quest_SC_UpdateQuestInfo* Quest_SC_UpdateQuestInfo::default_instance_ = NULL;

Quest_SC_UpdateQuestInfo* Quest_SC_UpdateQuestInfo::New() const {
  return new Quest_SC_UpdateQuestInfo;
}

void Quest_SC_UpdateQuestInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_questmain()) {
      if (questmain_ != NULL) questmain_->::proto::message::ProtoQuestMain::Clear();
    }
    if (has_questactive()) {
      if (questactive_ != NULL) questactive_->::proto::message::ProtoQuestActive::Clear();
    }
    if (has_questfuben()) {
      if (questfuben_ != NULL) questfuben_->::proto::message::ProtoQuestFuben::Clear();
    }
    if (has_questdailykillmonster()) {
      if (questdailykillmonster_ != NULL) questdailykillmonster_->::proto::message::ProtoQuestDailyKillMonster::Clear();
    }
    if (has_questbranch()) {
      if (questbranch_ != NULL) questbranch_->::proto::message::ProtoQuestBranch::Clear();
    }
  }
  questcycle_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Quest_SC_UpdateQuestInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.message.ProtoQuestMain questMain = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_questmain()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_questActive;
        break;
      }

      // optional .proto.message.ProtoQuestActive questActive = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_questActive:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_questactive()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_questFuben;
        break;
      }

      // optional .proto.message.ProtoQuestFuben questFuben = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_questFuben:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_questfuben()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_questDailyKillMonster;
        break;
      }

      // optional .proto.message.ProtoQuestDailyKillMonster questDailyKillMonster = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_questDailyKillMonster:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_questdailykillmonster()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_questBranch;
        break;
      }

      // optional .proto.message.ProtoQuestBranch questBranch = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_questBranch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_questbranch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_questCycle;
        break;
      }

      // repeated .proto.message.ProtoQuestCycle questCycle = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_questCycle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_questcycle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_questCycle;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Quest_SC_UpdateQuestInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.message.ProtoQuestMain questMain = 1;
  if (has_questmain()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->questmain(), output);
  }

  // optional .proto.message.ProtoQuestActive questActive = 2;
  if (has_questactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->questactive(), output);
  }

  // optional .proto.message.ProtoQuestFuben questFuben = 3;
  if (has_questfuben()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->questfuben(), output);
  }

  // optional .proto.message.ProtoQuestDailyKillMonster questDailyKillMonster = 4;
  if (has_questdailykillmonster()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->questdailykillmonster(), output);
  }

  // optional .proto.message.ProtoQuestBranch questBranch = 5;
  if (has_questbranch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->questbranch(), output);
  }

  // repeated .proto.message.ProtoQuestCycle questCycle = 6;
  for (int i = 0; i < this->questcycle_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->questcycle(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Quest_SC_UpdateQuestInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.message.ProtoQuestMain questMain = 1;
  if (has_questmain()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->questmain(), target);
  }

  // optional .proto.message.ProtoQuestActive questActive = 2;
  if (has_questactive()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->questactive(), target);
  }

  // optional .proto.message.ProtoQuestFuben questFuben = 3;
  if (has_questfuben()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->questfuben(), target);
  }

  // optional .proto.message.ProtoQuestDailyKillMonster questDailyKillMonster = 4;
  if (has_questdailykillmonster()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->questdailykillmonster(), target);
  }

  // optional .proto.message.ProtoQuestBranch questBranch = 5;
  if (has_questbranch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->questbranch(), target);
  }

  // repeated .proto.message.ProtoQuestCycle questCycle = 6;
  for (int i = 0; i < this->questcycle_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->questcycle(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Quest_SC_UpdateQuestInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.message.ProtoQuestMain questMain = 1;
    if (has_questmain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->questmain());
    }

    // optional .proto.message.ProtoQuestActive questActive = 2;
    if (has_questactive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->questactive());
    }

    // optional .proto.message.ProtoQuestFuben questFuben = 3;
    if (has_questfuben()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->questfuben());
    }

    // optional .proto.message.ProtoQuestDailyKillMonster questDailyKillMonster = 4;
    if (has_questdailykillmonster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->questdailykillmonster());
    }

    // optional .proto.message.ProtoQuestBranch questBranch = 5;
    if (has_questbranch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->questbranch());
    }

  }
  // repeated .proto.message.ProtoQuestCycle questCycle = 6;
  total_size += 1 * this->questcycle_size();
  for (int i = 0; i < this->questcycle_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->questcycle(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Quest_SC_UpdateQuestInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Quest_SC_UpdateQuestInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Quest_SC_UpdateQuestInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Quest_SC_UpdateQuestInfo::MergeFrom(const Quest_SC_UpdateQuestInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  questcycle_.MergeFrom(from.questcycle_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questmain()) {
      mutable_questmain()->::proto::message::ProtoQuestMain::MergeFrom(from.questmain());
    }
    if (from.has_questactive()) {
      mutable_questactive()->::proto::message::ProtoQuestActive::MergeFrom(from.questactive());
    }
    if (from.has_questfuben()) {
      mutable_questfuben()->::proto::message::ProtoQuestFuben::MergeFrom(from.questfuben());
    }
    if (from.has_questdailykillmonster()) {
      mutable_questdailykillmonster()->::proto::message::ProtoQuestDailyKillMonster::MergeFrom(from.questdailykillmonster());
    }
    if (from.has_questbranch()) {
      mutable_questbranch()->::proto::message::ProtoQuestBranch::MergeFrom(from.questbranch());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Quest_SC_UpdateQuestInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quest_SC_UpdateQuestInfo::CopyFrom(const Quest_SC_UpdateQuestInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quest_SC_UpdateQuestInfo::IsInitialized() const {

  if (has_questactive()) {
    if (!this->questactive().IsInitialized()) return false;
  }
  if (has_questfuben()) {
    if (!this->questfuben().IsInitialized()) return false;
  }
  if (has_questdailykillmonster()) {
    if (!this->questdailykillmonster().IsInitialized()) return false;
  }
  for (int i = 0; i < questcycle_size(); i++) {
    if (!this->questcycle(i).IsInitialized()) return false;
  }
  return true;
}

void Quest_SC_UpdateQuestInfo::Swap(Quest_SC_UpdateQuestInfo* other) {
  if (other != this) {
    std::swap(questmain_, other->questmain_);
    std::swap(questactive_, other->questactive_);
    std::swap(questfuben_, other->questfuben_);
    std::swap(questdailykillmonster_, other->questdailykillmonster_);
    std::swap(questbranch_, other->questbranch_);
    questcycle_.Swap(&other->questcycle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Quest_SC_UpdateQuestInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Quest_SC_UpdateQuestInfo_descriptor_;
  metadata.reflection = Quest_SC_UpdateQuestInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Quest_SC_UpdateAutoFinishQuest::kQuestIdFieldNumber;
const int Quest_SC_UpdateAutoFinishQuest::kKindFieldNumber;
const int Quest_SC_UpdateAutoFinishQuest::kQuestresultFieldNumber;
#endif  // !_MSC_VER

Quest_SC_UpdateAutoFinishQuest::Quest_SC_UpdateAutoFinishQuest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Quest_SC_UpdateAutoFinishQuest::InitAsDefaultInstance() {
}

Quest_SC_UpdateAutoFinishQuest::Quest_SC_UpdateAutoFinishQuest(const Quest_SC_UpdateAutoFinishQuest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Quest_SC_UpdateAutoFinishQuest::SharedCtor() {
  _cached_size_ = 0;
  questid_ = 0;
  kind_ = 0;
  questresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Quest_SC_UpdateAutoFinishQuest::~Quest_SC_UpdateAutoFinishQuest() {
  SharedDtor();
}

void Quest_SC_UpdateAutoFinishQuest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Quest_SC_UpdateAutoFinishQuest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Quest_SC_UpdateAutoFinishQuest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Quest_SC_UpdateAutoFinishQuest_descriptor_;
}

const Quest_SC_UpdateAutoFinishQuest& Quest_SC_UpdateAutoFinishQuest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quest_2eproto();
  return *default_instance_;
}

Quest_SC_UpdateAutoFinishQuest* Quest_SC_UpdateAutoFinishQuest::default_instance_ = NULL;

Quest_SC_UpdateAutoFinishQuest* Quest_SC_UpdateAutoFinishQuest::New() const {
  return new Quest_SC_UpdateAutoFinishQuest;
}

void Quest_SC_UpdateAutoFinishQuest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    questid_ = 0;
    kind_ = 0;
    questresult_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Quest_SC_UpdateAutoFinishQuest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 questId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_kind;
        break;
      }

      // required int32 kind = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kind_)));
          set_has_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_questresult;
        break;
      }

      // optional int32 questresult = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_questresult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &questresult_)));
          set_has_questresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Quest_SC_UpdateAutoFinishQuest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 questId = 1;
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->questid(), output);
  }

  // required int32 kind = 2;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->kind(), output);
  }

  // optional int32 questresult = 3;
  if (has_questresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->questresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Quest_SC_UpdateAutoFinishQuest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 questId = 1;
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->questid(), target);
  }

  // required int32 kind = 2;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->kind(), target);
  }

  // optional int32 questresult = 3;
  if (has_questresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->questresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Quest_SC_UpdateAutoFinishQuest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 questId = 1;
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->questid());
    }

    // required int32 kind = 2;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kind());
    }

    // optional int32 questresult = 3;
    if (has_questresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->questresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Quest_SC_UpdateAutoFinishQuest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Quest_SC_UpdateAutoFinishQuest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Quest_SC_UpdateAutoFinishQuest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Quest_SC_UpdateAutoFinishQuest::MergeFrom(const Quest_SC_UpdateAutoFinishQuest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questid()) {
      set_questid(from.questid());
    }
    if (from.has_kind()) {
      set_kind(from.kind());
    }
    if (from.has_questresult()) {
      set_questresult(from.questresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Quest_SC_UpdateAutoFinishQuest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quest_SC_UpdateAutoFinishQuest::CopyFrom(const Quest_SC_UpdateAutoFinishQuest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quest_SC_UpdateAutoFinishQuest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Quest_SC_UpdateAutoFinishQuest::Swap(Quest_SC_UpdateAutoFinishQuest* other) {
  if (other != this) {
    std::swap(questid_, other->questid_);
    std::swap(kind_, other->kind_);
    std::swap(questresult_, other->questresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Quest_SC_UpdateAutoFinishQuest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Quest_SC_UpdateAutoFinishQuest_descriptor_;
  metadata.reflection = Quest_SC_UpdateAutoFinishQuest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Quest_SC_UpdateAutoNewQuest::kQuestIdFieldNumber;
const int Quest_SC_UpdateAutoNewQuest::kKindFieldNumber;
#endif  // !_MSC_VER

Quest_SC_UpdateAutoNewQuest::Quest_SC_UpdateAutoNewQuest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Quest_SC_UpdateAutoNewQuest::InitAsDefaultInstance() {
}

Quest_SC_UpdateAutoNewQuest::Quest_SC_UpdateAutoNewQuest(const Quest_SC_UpdateAutoNewQuest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Quest_SC_UpdateAutoNewQuest::SharedCtor() {
  _cached_size_ = 0;
  questid_ = 0;
  kind_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Quest_SC_UpdateAutoNewQuest::~Quest_SC_UpdateAutoNewQuest() {
  SharedDtor();
}

void Quest_SC_UpdateAutoNewQuest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Quest_SC_UpdateAutoNewQuest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Quest_SC_UpdateAutoNewQuest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Quest_SC_UpdateAutoNewQuest_descriptor_;
}

const Quest_SC_UpdateAutoNewQuest& Quest_SC_UpdateAutoNewQuest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quest_2eproto();
  return *default_instance_;
}

Quest_SC_UpdateAutoNewQuest* Quest_SC_UpdateAutoNewQuest::default_instance_ = NULL;

Quest_SC_UpdateAutoNewQuest* Quest_SC_UpdateAutoNewQuest::New() const {
  return new Quest_SC_UpdateAutoNewQuest;
}

void Quest_SC_UpdateAutoNewQuest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    questid_ = 0;
    kind_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Quest_SC_UpdateAutoNewQuest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 questId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_kind;
        break;
      }

      // required int32 kind = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kind_)));
          set_has_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Quest_SC_UpdateAutoNewQuest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 questId = 1;
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->questid(), output);
  }

  // required int32 kind = 2;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->kind(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Quest_SC_UpdateAutoNewQuest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 questId = 1;
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->questid(), target);
  }

  // required int32 kind = 2;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->kind(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Quest_SC_UpdateAutoNewQuest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 questId = 1;
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->questid());
    }

    // required int32 kind = 2;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kind());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Quest_SC_UpdateAutoNewQuest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Quest_SC_UpdateAutoNewQuest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Quest_SC_UpdateAutoNewQuest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Quest_SC_UpdateAutoNewQuest::MergeFrom(const Quest_SC_UpdateAutoNewQuest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questid()) {
      set_questid(from.questid());
    }
    if (from.has_kind()) {
      set_kind(from.kind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Quest_SC_UpdateAutoNewQuest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quest_SC_UpdateAutoNewQuest::CopyFrom(const Quest_SC_UpdateAutoNewQuest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quest_SC_UpdateAutoNewQuest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Quest_SC_UpdateAutoNewQuest::Swap(Quest_SC_UpdateAutoNewQuest* other) {
  if (other != this) {
    std::swap(questid_, other->questid_);
    std::swap(kind_, other->kind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Quest_SC_UpdateAutoNewQuest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Quest_SC_UpdateAutoNewQuest_descriptor_;
  metadata.reflection = Quest_SC_UpdateAutoNewQuest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoQuestItem::kItemFieldNumber;
const int ProtoQuestItem::kNumFieldNumber;
#endif  // !_MSC_VER

ProtoQuestItem::ProtoQuestItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoQuestItem::InitAsDefaultInstance() {
}

ProtoQuestItem::ProtoQuestItem(const ProtoQuestItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoQuestItem::SharedCtor() {
  _cached_size_ = 0;
  item_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoQuestItem::~ProtoQuestItem() {
  SharedDtor();
}

void ProtoQuestItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoQuestItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoQuestItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoQuestItem_descriptor_;
}

const ProtoQuestItem& ProtoQuestItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quest_2eproto();
  return *default_instance_;
}

ProtoQuestItem* ProtoQuestItem::default_instance_ = NULL;

ProtoQuestItem* ProtoQuestItem::New() const {
  return new ProtoQuestItem;
}

void ProtoQuestItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoQuestItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_)));
          set_has_item();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // required int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoQuestItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 item = 1;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item(), output);
  }

  // required int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoQuestItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 item = 1;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item(), target);
  }

  // required int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoQuestItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 item = 1;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item());
    }

    // required int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoQuestItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoQuestItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoQuestItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoQuestItem::MergeFrom(const ProtoQuestItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item()) {
      set_item(from.item());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoQuestItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoQuestItem::CopyFrom(const ProtoQuestItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoQuestItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ProtoQuestItem::Swap(ProtoQuestItem* other) {
  if (other != this) {
    std::swap(item_, other->item_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoQuestItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoQuestItem_descriptor_;
  metadata.reflection = ProtoQuestItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Quest_SC_UpdateQuestAward::kExpFieldNumber;
const int Quest_SC_UpdateQuestAward::kSilverFieldNumber;
const int Quest_SC_UpdateQuestAward::kGoldFieldNumber;
const int Quest_SC_UpdateQuestAward::kCropsValueFieldNumber;
const int Quest_SC_UpdateQuestAward::kItemsFieldNumber;
#endif  // !_MSC_VER

Quest_SC_UpdateQuestAward::Quest_SC_UpdateQuestAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Quest_SC_UpdateQuestAward::InitAsDefaultInstance() {
}

Quest_SC_UpdateQuestAward::Quest_SC_UpdateQuestAward(const Quest_SC_UpdateQuestAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Quest_SC_UpdateQuestAward::SharedCtor() {
  _cached_size_ = 0;
  exp_ = 0;
  silver_ = 0;
  gold_ = 0;
  cropsvalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Quest_SC_UpdateQuestAward::~Quest_SC_UpdateQuestAward() {
  SharedDtor();
}

void Quest_SC_UpdateQuestAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Quest_SC_UpdateQuestAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Quest_SC_UpdateQuestAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Quest_SC_UpdateQuestAward_descriptor_;
}

const Quest_SC_UpdateQuestAward& Quest_SC_UpdateQuestAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quest_2eproto();
  return *default_instance_;
}

Quest_SC_UpdateQuestAward* Quest_SC_UpdateQuestAward::default_instance_ = NULL;

Quest_SC_UpdateQuestAward* Quest_SC_UpdateQuestAward::New() const {
  return new Quest_SC_UpdateQuestAward;
}

void Quest_SC_UpdateQuestAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    exp_ = 0;
    silver_ = 0;
    gold_ = 0;
    cropsvalue_ = 0;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Quest_SC_UpdateQuestAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 exp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_silver;
        break;
      }

      // optional int32 silver = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_silver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &silver_)));
          set_has_silver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gold;
        break;
      }

      // optional int32 gold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cropsValue;
        break;
      }

      // optional int32 cropsValue = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cropsValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cropsvalue_)));
          set_has_cropsvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_items;
        break;
      }

      // repeated .proto.message.ProtoQuestItem items = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Quest_SC_UpdateQuestAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 exp = 1;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->exp(), output);
  }

  // optional int32 silver = 2;
  if (has_silver()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->silver(), output);
  }

  // optional int32 gold = 3;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gold(), output);
  }

  // optional int32 cropsValue = 4;
  if (has_cropsvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cropsvalue(), output);
  }

  // repeated .proto.message.ProtoQuestItem items = 5;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Quest_SC_UpdateQuestAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 exp = 1;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->exp(), target);
  }

  // optional int32 silver = 2;
  if (has_silver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->silver(), target);
  }

  // optional int32 gold = 3;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gold(), target);
  }

  // optional int32 cropsValue = 4;
  if (has_cropsvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cropsvalue(), target);
  }

  // repeated .proto.message.ProtoQuestItem items = 5;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Quest_SC_UpdateQuestAward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 exp = 1;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 silver = 2;
    if (has_silver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->silver());
    }

    // optional int32 gold = 3;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // optional int32 cropsValue = 4;
    if (has_cropsvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cropsvalue());
    }

  }
  // repeated .proto.message.ProtoQuestItem items = 5;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Quest_SC_UpdateQuestAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Quest_SC_UpdateQuestAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Quest_SC_UpdateQuestAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Quest_SC_UpdateQuestAward::MergeFrom(const Quest_SC_UpdateQuestAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_silver()) {
      set_silver(from.silver());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_cropsvalue()) {
      set_cropsvalue(from.cropsvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Quest_SC_UpdateQuestAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quest_SC_UpdateQuestAward::CopyFrom(const Quest_SC_UpdateQuestAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quest_SC_UpdateQuestAward::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void Quest_SC_UpdateQuestAward::Swap(Quest_SC_UpdateQuestAward* other) {
  if (other != this) {
    std::swap(exp_, other->exp_);
    std::swap(silver_, other->silver_);
    std::swap(gold_, other->gold_);
    std::swap(cropsvalue_, other->cropsvalue_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Quest_SC_UpdateQuestAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Quest_SC_UpdateQuestAward_descriptor_;
  metadata.reflection = Quest_SC_UpdateQuestAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Quest_SC_AfterLoopQuestAllAward::kKindFieldNumber;
const int Quest_SC_AfterLoopQuestAllAward::kExpFieldNumber;
const int Quest_SC_AfterLoopQuestAllAward::kSilverFieldNumber;
const int Quest_SC_AfterLoopQuestAllAward::kGoldFieldNumber;
const int Quest_SC_AfterLoopQuestAllAward::kCropsValueFieldNumber;
const int Quest_SC_AfterLoopQuestAllAward::kItemsFieldNumber;
const int Quest_SC_AfterLoopQuestAllAward::kIsOverTimeFieldNumber;
#endif  // !_MSC_VER

Quest_SC_AfterLoopQuestAllAward::Quest_SC_AfterLoopQuestAllAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Quest_SC_AfterLoopQuestAllAward::InitAsDefaultInstance() {
}

Quest_SC_AfterLoopQuestAllAward::Quest_SC_AfterLoopQuestAllAward(const Quest_SC_AfterLoopQuestAllAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Quest_SC_AfterLoopQuestAllAward::SharedCtor() {
  _cached_size_ = 0;
  kind_ = 0;
  exp_ = 0;
  silver_ = 0;
  gold_ = 0;
  cropsvalue_ = 0;
  isovertime_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Quest_SC_AfterLoopQuestAllAward::~Quest_SC_AfterLoopQuestAllAward() {
  SharedDtor();
}

void Quest_SC_AfterLoopQuestAllAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Quest_SC_AfterLoopQuestAllAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Quest_SC_AfterLoopQuestAllAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Quest_SC_AfterLoopQuestAllAward_descriptor_;
}

const Quest_SC_AfterLoopQuestAllAward& Quest_SC_AfterLoopQuestAllAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quest_2eproto();
  return *default_instance_;
}

Quest_SC_AfterLoopQuestAllAward* Quest_SC_AfterLoopQuestAllAward::default_instance_ = NULL;

Quest_SC_AfterLoopQuestAllAward* Quest_SC_AfterLoopQuestAllAward::New() const {
  return new Quest_SC_AfterLoopQuestAllAward;
}

void Quest_SC_AfterLoopQuestAllAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    kind_ = 0;
    exp_ = 0;
    silver_ = 0;
    gold_ = 0;
    cropsvalue_ = 0;
    isovertime_ = false;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Quest_SC_AfterLoopQuestAllAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 kind = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kind_)));
          set_has_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }

      // optional int32 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_silver;
        break;
      }

      // optional int32 silver = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_silver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &silver_)));
          set_has_silver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gold;
        break;
      }

      // optional int32 gold = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cropsValue;
        break;
      }

      // optional int32 cropsValue = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cropsValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cropsvalue_)));
          set_has_cropsvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_items;
        break;
      }

      // repeated .proto.message.ProtoQuestItem items = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_items;
        if (input->ExpectTag(56)) goto parse_isOverTime;
        break;
      }

      // optional bool isOverTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isOverTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isovertime_)));
          set_has_isovertime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Quest_SC_AfterLoopQuestAllAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 kind = 1;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->kind(), output);
  }

  // optional int32 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exp(), output);
  }

  // optional int32 silver = 3;
  if (has_silver()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->silver(), output);
  }

  // optional int32 gold = 4;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gold(), output);
  }

  // optional int32 cropsValue = 5;
  if (has_cropsvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cropsvalue(), output);
  }

  // repeated .proto.message.ProtoQuestItem items = 6;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->items(i), output);
  }

  // optional bool isOverTime = 7;
  if (has_isovertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isovertime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Quest_SC_AfterLoopQuestAllAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 kind = 1;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->kind(), target);
  }

  // optional int32 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exp(), target);
  }

  // optional int32 silver = 3;
  if (has_silver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->silver(), target);
  }

  // optional int32 gold = 4;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gold(), target);
  }

  // optional int32 cropsValue = 5;
  if (has_cropsvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cropsvalue(), target);
  }

  // repeated .proto.message.ProtoQuestItem items = 6;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->items(i), target);
  }

  // optional bool isOverTime = 7;
  if (has_isovertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->isovertime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Quest_SC_AfterLoopQuestAllAward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 kind = 1;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kind());
    }

    // optional int32 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 silver = 3;
    if (has_silver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->silver());
    }

    // optional int32 gold = 4;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // optional int32 cropsValue = 5;
    if (has_cropsvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cropsvalue());
    }

    // optional bool isOverTime = 7;
    if (has_isovertime()) {
      total_size += 1 + 1;
    }

  }
  // repeated .proto.message.ProtoQuestItem items = 6;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Quest_SC_AfterLoopQuestAllAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Quest_SC_AfterLoopQuestAllAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Quest_SC_AfterLoopQuestAllAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Quest_SC_AfterLoopQuestAllAward::MergeFrom(const Quest_SC_AfterLoopQuestAllAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kind()) {
      set_kind(from.kind());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_silver()) {
      set_silver(from.silver());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_cropsvalue()) {
      set_cropsvalue(from.cropsvalue());
    }
    if (from.has_isovertime()) {
      set_isovertime(from.isovertime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Quest_SC_AfterLoopQuestAllAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quest_SC_AfterLoopQuestAllAward::CopyFrom(const Quest_SC_AfterLoopQuestAllAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quest_SC_AfterLoopQuestAllAward::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void Quest_SC_AfterLoopQuestAllAward::Swap(Quest_SC_AfterLoopQuestAllAward* other) {
  if (other != this) {
    std::swap(kind_, other->kind_);
    std::swap(exp_, other->exp_);
    std::swap(silver_, other->silver_);
    std::swap(gold_, other->gold_);
    std::swap(cropsvalue_, other->cropsvalue_);
    items_.Swap(&other->items_);
    std::swap(isovertime_, other->isovertime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Quest_SC_AfterLoopQuestAllAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Quest_SC_AfterLoopQuestAllAward_descriptor_;
  metadata.reflection = Quest_SC_AfterLoopQuestAllAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Quest_SC_UpdateQuestData::kQuestDataFieldNumber;
#endif  // !_MSC_VER

Quest_SC_UpdateQuestData::Quest_SC_UpdateQuestData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Quest_SC_UpdateQuestData::InitAsDefaultInstance() {
}

Quest_SC_UpdateQuestData::Quest_SC_UpdateQuestData(const Quest_SC_UpdateQuestData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Quest_SC_UpdateQuestData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Quest_SC_UpdateQuestData::~Quest_SC_UpdateQuestData() {
  SharedDtor();
}

void Quest_SC_UpdateQuestData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Quest_SC_UpdateQuestData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Quest_SC_UpdateQuestData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Quest_SC_UpdateQuestData_descriptor_;
}

const Quest_SC_UpdateQuestData& Quest_SC_UpdateQuestData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quest_2eproto();
  return *default_instance_;
}

Quest_SC_UpdateQuestData* Quest_SC_UpdateQuestData::default_instance_ = NULL;

Quest_SC_UpdateQuestData* Quest_SC_UpdateQuestData::New() const {
  return new Quest_SC_UpdateQuestData;
}

void Quest_SC_UpdateQuestData::Clear() {
  questdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Quest_SC_UpdateQuestData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.ProtoQuestData questData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_questData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_questdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_questData;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Quest_SC_UpdateQuestData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.ProtoQuestData questData = 1;
  for (int i = 0; i < this->questdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->questdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Quest_SC_UpdateQuestData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.ProtoQuestData questData = 1;
  for (int i = 0; i < this->questdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->questdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Quest_SC_UpdateQuestData::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.ProtoQuestData questData = 1;
  total_size += 1 * this->questdata_size();
  for (int i = 0; i < this->questdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->questdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Quest_SC_UpdateQuestData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Quest_SC_UpdateQuestData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Quest_SC_UpdateQuestData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Quest_SC_UpdateQuestData::MergeFrom(const Quest_SC_UpdateQuestData& from) {
  GOOGLE_CHECK_NE(&from, this);
  questdata_.MergeFrom(from.questdata_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Quest_SC_UpdateQuestData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quest_SC_UpdateQuestData::CopyFrom(const Quest_SC_UpdateQuestData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quest_SC_UpdateQuestData::IsInitialized() const {

  for (int i = 0; i < questdata_size(); i++) {
    if (!this->questdata(i).IsInitialized()) return false;
  }
  return true;
}

void Quest_SC_UpdateQuestData::Swap(Quest_SC_UpdateQuestData* other) {
  if (other != this) {
    questdata_.Swap(&other->questdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Quest_SC_UpdateQuestData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Quest_SC_UpdateQuestData_descriptor_;
  metadata.reflection = Quest_SC_UpdateQuestData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Quest_CS_PublishHelpItem::kQuestidFieldNumber;
const int Quest_CS_PublishHelpItem::kNumFieldNumber;
#endif  // !_MSC_VER

Quest_CS_PublishHelpItem::Quest_CS_PublishHelpItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Quest_CS_PublishHelpItem::InitAsDefaultInstance() {
}

Quest_CS_PublishHelpItem::Quest_CS_PublishHelpItem(const Quest_CS_PublishHelpItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Quest_CS_PublishHelpItem::SharedCtor() {
  _cached_size_ = 0;
  questid_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Quest_CS_PublishHelpItem::~Quest_CS_PublishHelpItem() {
  SharedDtor();
}

void Quest_CS_PublishHelpItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Quest_CS_PublishHelpItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Quest_CS_PublishHelpItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Quest_CS_PublishHelpItem_descriptor_;
}

const Quest_CS_PublishHelpItem& Quest_CS_PublishHelpItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quest_2eproto();
  return *default_instance_;
}

Quest_CS_PublishHelpItem* Quest_CS_PublishHelpItem::default_instance_ = NULL;

Quest_CS_PublishHelpItem* Quest_CS_PublishHelpItem::New() const {
  return new Quest_CS_PublishHelpItem;
}

void Quest_CS_PublishHelpItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    questid_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Quest_CS_PublishHelpItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 questid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // required int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Quest_CS_PublishHelpItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 questid = 1;
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->questid(), output);
  }

  // required int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Quest_CS_PublishHelpItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 questid = 1;
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->questid(), target);
  }

  // required int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Quest_CS_PublishHelpItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 questid = 1;
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->questid());
    }

    // required int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Quest_CS_PublishHelpItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Quest_CS_PublishHelpItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Quest_CS_PublishHelpItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Quest_CS_PublishHelpItem::MergeFrom(const Quest_CS_PublishHelpItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questid()) {
      set_questid(from.questid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Quest_CS_PublishHelpItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quest_CS_PublishHelpItem::CopyFrom(const Quest_CS_PublishHelpItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quest_CS_PublishHelpItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Quest_CS_PublishHelpItem::Swap(Quest_CS_PublishHelpItem* other) {
  if (other != this) {
    std::swap(questid_, other->questid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Quest_CS_PublishHelpItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Quest_CS_PublishHelpItem_descriptor_;
  metadata.reflection = Quest_CS_PublishHelpItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Quest_SC_PublishHelpItem::kResultFieldNumber;
#endif  // !_MSC_VER

Quest_SC_PublishHelpItem::Quest_SC_PublishHelpItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Quest_SC_PublishHelpItem::InitAsDefaultInstance() {
}

Quest_SC_PublishHelpItem::Quest_SC_PublishHelpItem(const Quest_SC_PublishHelpItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Quest_SC_PublishHelpItem::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Quest_SC_PublishHelpItem::~Quest_SC_PublishHelpItem() {
  SharedDtor();
}

void Quest_SC_PublishHelpItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Quest_SC_PublishHelpItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Quest_SC_PublishHelpItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Quest_SC_PublishHelpItem_descriptor_;
}

const Quest_SC_PublishHelpItem& Quest_SC_PublishHelpItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quest_2eproto();
  return *default_instance_;
}

Quest_SC_PublishHelpItem* Quest_SC_PublishHelpItem::default_instance_ = NULL;

Quest_SC_PublishHelpItem* Quest_SC_PublishHelpItem::New() const {
  return new Quest_SC_PublishHelpItem;
}

void Quest_SC_PublishHelpItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Quest_SC_PublishHelpItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Quest_SC_PublishHelpItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Quest_SC_PublishHelpItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Quest_SC_PublishHelpItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Quest_SC_PublishHelpItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Quest_SC_PublishHelpItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Quest_SC_PublishHelpItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Quest_SC_PublishHelpItem::MergeFrom(const Quest_SC_PublishHelpItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Quest_SC_PublishHelpItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quest_SC_PublishHelpItem::CopyFrom(const Quest_SC_PublishHelpItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quest_SC_PublishHelpItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Quest_SC_PublishHelpItem::Swap(Quest_SC_PublishHelpItem* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Quest_SC_PublishHelpItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Quest_SC_PublishHelpItem_descriptor_;
  metadata.reflection = Quest_SC_PublishHelpItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Quest_CS_HelpOtherItem::kQuestidFieldNumber;
const int Quest_CS_HelpOtherItem::kPlayeridFieldNumber;
const int Quest_CS_HelpOtherItem::kNumFieldNumber;
const int Quest_CS_HelpOtherItem::kArgFieldNumber;
#endif  // !_MSC_VER

Quest_CS_HelpOtherItem::Quest_CS_HelpOtherItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Quest_CS_HelpOtherItem::InitAsDefaultInstance() {
}

Quest_CS_HelpOtherItem::Quest_CS_HelpOtherItem(const Quest_CS_HelpOtherItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Quest_CS_HelpOtherItem::SharedCtor() {
  _cached_size_ = 0;
  questid_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  num_ = 0;
  arg_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Quest_CS_HelpOtherItem::~Quest_CS_HelpOtherItem() {
  SharedDtor();
}

void Quest_CS_HelpOtherItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Quest_CS_HelpOtherItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Quest_CS_HelpOtherItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Quest_CS_HelpOtherItem_descriptor_;
}

const Quest_CS_HelpOtherItem& Quest_CS_HelpOtherItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quest_2eproto();
  return *default_instance_;
}

Quest_CS_HelpOtherItem* Quest_CS_HelpOtherItem::default_instance_ = NULL;

Quest_CS_HelpOtherItem* Quest_CS_HelpOtherItem::New() const {
  return new Quest_CS_HelpOtherItem;
}

void Quest_CS_HelpOtherItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    questid_ = 0;
    playerid_ = GOOGLE_ULONGLONG(0);
    num_ = 0;
    arg_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Quest_CS_HelpOtherItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 questid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }

      // required uint64 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // required int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_arg;
        break;
      }

      // required uint64 arg = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &arg_)));
          set_has_arg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Quest_CS_HelpOtherItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 questid = 1;
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->questid(), output);
  }

  // required uint64 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->playerid(), output);
  }

  // required int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  // required uint64 arg = 4;
  if (has_arg()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->arg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Quest_CS_HelpOtherItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 questid = 1;
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->questid(), target);
  }

  // required uint64 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->playerid(), target);
  }

  // required int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  // required uint64 arg = 4;
  if (has_arg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->arg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Quest_CS_HelpOtherItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 questid = 1;
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->questid());
    }

    // required uint64 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // required int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // required uint64 arg = 4;
    if (has_arg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->arg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Quest_CS_HelpOtherItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Quest_CS_HelpOtherItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Quest_CS_HelpOtherItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Quest_CS_HelpOtherItem::MergeFrom(const Quest_CS_HelpOtherItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questid()) {
      set_questid(from.questid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_arg()) {
      set_arg(from.arg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Quest_CS_HelpOtherItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quest_CS_HelpOtherItem::CopyFrom(const Quest_CS_HelpOtherItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quest_CS_HelpOtherItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Quest_CS_HelpOtherItem::Swap(Quest_CS_HelpOtherItem* other) {
  if (other != this) {
    std::swap(questid_, other->questid_);
    std::swap(playerid_, other->playerid_);
    std::swap(num_, other->num_);
    std::swap(arg_, other->arg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Quest_CS_HelpOtherItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Quest_CS_HelpOtherItem_descriptor_;
  metadata.reflection = Quest_CS_HelpOtherItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Quest_SC_HelpOtherItem::kResultFieldNumber;
#endif  // !_MSC_VER

Quest_SC_HelpOtherItem::Quest_SC_HelpOtherItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Quest_SC_HelpOtherItem::InitAsDefaultInstance() {
}

Quest_SC_HelpOtherItem::Quest_SC_HelpOtherItem(const Quest_SC_HelpOtherItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Quest_SC_HelpOtherItem::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Quest_SC_HelpOtherItem::~Quest_SC_HelpOtherItem() {
  SharedDtor();
}

void Quest_SC_HelpOtherItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Quest_SC_HelpOtherItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Quest_SC_HelpOtherItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Quest_SC_HelpOtherItem_descriptor_;
}

const Quest_SC_HelpOtherItem& Quest_SC_HelpOtherItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quest_2eproto();
  return *default_instance_;
}

Quest_SC_HelpOtherItem* Quest_SC_HelpOtherItem::default_instance_ = NULL;

Quest_SC_HelpOtherItem* Quest_SC_HelpOtherItem::New() const {
  return new Quest_SC_HelpOtherItem;
}

void Quest_SC_HelpOtherItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Quest_SC_HelpOtherItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Quest_SC_HelpOtherItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Quest_SC_HelpOtherItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Quest_SC_HelpOtherItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Quest_SC_HelpOtherItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Quest_SC_HelpOtherItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Quest_SC_HelpOtherItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Quest_SC_HelpOtherItem::MergeFrom(const Quest_SC_HelpOtherItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Quest_SC_HelpOtherItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quest_SC_HelpOtherItem::CopyFrom(const Quest_SC_HelpOtherItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quest_SC_HelpOtherItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Quest_SC_HelpOtherItem::Swap(Quest_SC_HelpOtherItem* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Quest_SC_HelpOtherItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Quest_SC_HelpOtherItem_descriptor_;
  metadata.reflection = Quest_SC_HelpOtherItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Quest_SC_DelHelpItem::kQuestidFieldNumber;
const int Quest_SC_DelHelpItem::kNumFieldNumber;
const int Quest_SC_DelHelpItem::kPlayeridFieldNumber;
#endif  // !_MSC_VER

Quest_SC_DelHelpItem::Quest_SC_DelHelpItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Quest_SC_DelHelpItem::InitAsDefaultInstance() {
}

Quest_SC_DelHelpItem::Quest_SC_DelHelpItem(const Quest_SC_DelHelpItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Quest_SC_DelHelpItem::SharedCtor() {
  _cached_size_ = 0;
  questid_ = 0;
  num_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Quest_SC_DelHelpItem::~Quest_SC_DelHelpItem() {
  SharedDtor();
}

void Quest_SC_DelHelpItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Quest_SC_DelHelpItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Quest_SC_DelHelpItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Quest_SC_DelHelpItem_descriptor_;
}

const Quest_SC_DelHelpItem& Quest_SC_DelHelpItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quest_2eproto();
  return *default_instance_;
}

Quest_SC_DelHelpItem* Quest_SC_DelHelpItem::default_instance_ = NULL;

Quest_SC_DelHelpItem* Quest_SC_DelHelpItem::New() const {
  return new Quest_SC_DelHelpItem;
}

void Quest_SC_DelHelpItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    questid_ = 0;
    num_ = 0;
    playerid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Quest_SC_DelHelpItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 questid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // required int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playerid;
        break;
      }

      // required uint64 playerid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Quest_SC_DelHelpItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 questid = 1;
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->questid(), output);
  }

  // required int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  // required uint64 playerid = 3;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Quest_SC_DelHelpItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 questid = 1;
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->questid(), target);
  }

  // required int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  // required uint64 playerid = 3;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Quest_SC_DelHelpItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 questid = 1;
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->questid());
    }

    // required int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // required uint64 playerid = 3;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Quest_SC_DelHelpItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Quest_SC_DelHelpItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Quest_SC_DelHelpItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Quest_SC_DelHelpItem::MergeFrom(const Quest_SC_DelHelpItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questid()) {
      set_questid(from.questid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Quest_SC_DelHelpItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quest_SC_DelHelpItem::CopyFrom(const Quest_SC_DelHelpItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quest_SC_DelHelpItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Quest_SC_DelHelpItem::Swap(Quest_SC_DelHelpItem* other) {
  if (other != this) {
    std::swap(questid_, other->questid_);
    std::swap(num_, other->num_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Quest_SC_DelHelpItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Quest_SC_DelHelpItem_descriptor_;
  metadata.reflection = Quest_SC_DelHelpItem_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

// @@protoc_insertion_point(global_scope)
