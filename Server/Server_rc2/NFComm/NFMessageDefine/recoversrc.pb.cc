// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: recoversrc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "recoversrc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace message {

namespace {

const ::google::protobuf::Descriptor* RecoverSrc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecoverSrc_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecoverList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecoverList_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecoverSrcMsg_CS_RequestData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecoverSrcMsg_CS_RequestData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecoverSrcMsg_SC_AckData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecoverSrcMsg_SC_AckData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecoverSrcMsg_CS_RequestRecover_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecoverSrcMsg_CS_RequestRecover_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecoverSrcMsg_SC_AckRecover_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecoverSrcMsg_SC_AckRecover_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_recoversrc_2eproto() {
  protobuf_AddDesc_recoversrc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "recoversrc.proto");
  GOOGLE_CHECK(file != NULL);
  RecoverSrc_descriptor_ = file->message_type(0);
  static const int RecoverSrc_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoverSrc, restype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoverSrc, counts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoverSrc, getrestime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoverSrc, lastjointime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoverSrc, isopen_),
  };
  RecoverSrc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecoverSrc_descriptor_,
      RecoverSrc::default_instance_,
      RecoverSrc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoverSrc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoverSrc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecoverSrc));
  RecoverList_descriptor_ = file->message_type(1);
  static const int RecoverList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoverList, data_rec_),
  };
  RecoverList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecoverList_descriptor_,
      RecoverList::default_instance_,
      RecoverList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoverList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoverList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecoverList));
  RecoverSrcMsg_CS_RequestData_descriptor_ = file->message_type(2);
  static const int RecoverSrcMsg_CS_RequestData_offsets_[1] = {
  };
  RecoverSrcMsg_CS_RequestData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecoverSrcMsg_CS_RequestData_descriptor_,
      RecoverSrcMsg_CS_RequestData::default_instance_,
      RecoverSrcMsg_CS_RequestData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoverSrcMsg_CS_RequestData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoverSrcMsg_CS_RequestData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecoverSrcMsg_CS_RequestData));
  RecoverSrcMsg_SC_AckData_descriptor_ = file->message_type(3);
  static const int RecoverSrcMsg_SC_AckData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoverSrcMsg_SC_AckData, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoverSrcMsg_SC_AckData, data_),
  };
  RecoverSrcMsg_SC_AckData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecoverSrcMsg_SC_AckData_descriptor_,
      RecoverSrcMsg_SC_AckData::default_instance_,
      RecoverSrcMsg_SC_AckData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoverSrcMsg_SC_AckData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoverSrcMsg_SC_AckData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecoverSrcMsg_SC_AckData));
  RecoverSrcMsg_CS_RequestRecover_descriptor_ = file->message_type(4);
  static const int RecoverSrcMsg_CS_RequestRecover_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoverSrcMsg_CS_RequestRecover, restype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoverSrcMsg_CS_RequestRecover, way_),
  };
  RecoverSrcMsg_CS_RequestRecover_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecoverSrcMsg_CS_RequestRecover_descriptor_,
      RecoverSrcMsg_CS_RequestRecover::default_instance_,
      RecoverSrcMsg_CS_RequestRecover_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoverSrcMsg_CS_RequestRecover, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoverSrcMsg_CS_RequestRecover, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecoverSrcMsg_CS_RequestRecover));
  RecoverSrcMsg_SC_AckRecover_descriptor_ = file->message_type(5);
  static const int RecoverSrcMsg_SC_AckRecover_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoverSrcMsg_SC_AckRecover, result_),
  };
  RecoverSrcMsg_SC_AckRecover_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecoverSrcMsg_SC_AckRecover_descriptor_,
      RecoverSrcMsg_SC_AckRecover::default_instance_,
      RecoverSrcMsg_SC_AckRecover_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoverSrcMsg_SC_AckRecover, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoverSrcMsg_SC_AckRecover, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecoverSrcMsg_SC_AckRecover));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_recoversrc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecoverSrc_descriptor_, &RecoverSrc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecoverList_descriptor_, &RecoverList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecoverSrcMsg_CS_RequestData_descriptor_, &RecoverSrcMsg_CS_RequestData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecoverSrcMsg_SC_AckData_descriptor_, &RecoverSrcMsg_SC_AckData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecoverSrcMsg_CS_RequestRecover_descriptor_, &RecoverSrcMsg_CS_RequestRecover::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecoverSrcMsg_SC_AckRecover_descriptor_, &RecoverSrcMsg_SC_AckRecover::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_recoversrc_2eproto() {
  delete RecoverSrc::default_instance_;
  delete RecoverSrc_reflection_;
  delete RecoverList::default_instance_;
  delete RecoverList_reflection_;
  delete RecoverSrcMsg_CS_RequestData::default_instance_;
  delete RecoverSrcMsg_CS_RequestData_reflection_;
  delete RecoverSrcMsg_SC_AckData::default_instance_;
  delete RecoverSrcMsg_SC_AckData_reflection_;
  delete RecoverSrcMsg_CS_RequestRecover::default_instance_;
  delete RecoverSrcMsg_CS_RequestRecover_reflection_;
  delete RecoverSrcMsg_SC_AckRecover::default_instance_;
  delete RecoverSrcMsg_SC_AckRecover_reflection_;
}

void protobuf_AddDesc_recoversrc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::message::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020recoversrc.proto\022\rproto.message\032\014commo"
    "n.proto\"g\n\nRecoverSrc\022\017\n\007restype\030\001 \001(\r\022\016"
    "\n\006counts\030\002 \001(\r\022\022\n\ngetrestime\030\003 \001(\004\022\024\n\014la"
    "stjointime\030\004 \001(\004\022\016\n\006isopen\030\005 \001(\r\":\n\013Reco"
    "verList\022+\n\010data_rec\030\001 \003(\0132\031.proto.messag"
    "e.RecoverSrc\"\036\n\034RecoverSrcMsg_CS_Request"
    "Data\"T\n\030RecoverSrcMsg_SC_AckData\022\016\n\006resu"
    "lt\030\001 \001(\r\022(\n\004data\030\002 \001(\0132\032.proto.message.R"
    "ecoverList\"\?\n\037RecoverSrcMsg_CS_RequestRe"
    "cover\022\017\n\007restype\030\001 \001(\r\022\013\n\003way\030\002 \001(\r\"-\n\033R"
    "ecoverSrcMsg_SC_AckRecover\022\016\n\006result\030\001 \001"
    "(\rB\017\n\rproto.message", 459);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "recoversrc.proto", &protobuf_RegisterTypes);
  RecoverSrc::default_instance_ = new RecoverSrc();
  RecoverList::default_instance_ = new RecoverList();
  RecoverSrcMsg_CS_RequestData::default_instance_ = new RecoverSrcMsg_CS_RequestData();
  RecoverSrcMsg_SC_AckData::default_instance_ = new RecoverSrcMsg_SC_AckData();
  RecoverSrcMsg_CS_RequestRecover::default_instance_ = new RecoverSrcMsg_CS_RequestRecover();
  RecoverSrcMsg_SC_AckRecover::default_instance_ = new RecoverSrcMsg_SC_AckRecover();
  RecoverSrc::default_instance_->InitAsDefaultInstance();
  RecoverList::default_instance_->InitAsDefaultInstance();
  RecoverSrcMsg_CS_RequestData::default_instance_->InitAsDefaultInstance();
  RecoverSrcMsg_SC_AckData::default_instance_->InitAsDefaultInstance();
  RecoverSrcMsg_CS_RequestRecover::default_instance_->InitAsDefaultInstance();
  RecoverSrcMsg_SC_AckRecover::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_recoversrc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_recoversrc_2eproto {
  StaticDescriptorInitializer_recoversrc_2eproto() {
    protobuf_AddDesc_recoversrc_2eproto();
  }
} static_descriptor_initializer_recoversrc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RecoverSrc::kRestypeFieldNumber;
const int RecoverSrc::kCountsFieldNumber;
const int RecoverSrc::kGetrestimeFieldNumber;
const int RecoverSrc::kLastjointimeFieldNumber;
const int RecoverSrc::kIsopenFieldNumber;
#endif  // !_MSC_VER

RecoverSrc::RecoverSrc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecoverSrc::InitAsDefaultInstance() {
}

RecoverSrc::RecoverSrc(const RecoverSrc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecoverSrc::SharedCtor() {
  _cached_size_ = 0;
  restype_ = 0u;
  counts_ = 0u;
  getrestime_ = GOOGLE_ULONGLONG(0);
  lastjointime_ = GOOGLE_ULONGLONG(0);
  isopen_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecoverSrc::~RecoverSrc() {
  SharedDtor();
}

void RecoverSrc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecoverSrc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecoverSrc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecoverSrc_descriptor_;
}

const RecoverSrc& RecoverSrc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_recoversrc_2eproto();
  return *default_instance_;
}

RecoverSrc* RecoverSrc::default_instance_ = NULL;

RecoverSrc* RecoverSrc::New() const {
  return new RecoverSrc;
}

void RecoverSrc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    restype_ = 0u;
    counts_ = 0u;
    getrestime_ = GOOGLE_ULONGLONG(0);
    lastjointime_ = GOOGLE_ULONGLONG(0);
    isopen_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecoverSrc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 restype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &restype_)));
          set_has_restype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_counts;
        break;
      }

      // optional uint32 counts = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_counts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &counts_)));
          set_has_counts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_getrestime;
        break;
      }

      // optional uint64 getrestime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getrestime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &getrestime_)));
          set_has_getrestime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lastjointime;
        break;
      }

      // optional uint64 lastjointime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastjointime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastjointime_)));
          set_has_lastjointime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isopen;
        break;
      }

      // optional uint32 isopen = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isopen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isopen_)));
          set_has_isopen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecoverSrc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 restype = 1;
  if (has_restype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->restype(), output);
  }

  // optional uint32 counts = 2;
  if (has_counts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->counts(), output);
  }

  // optional uint64 getrestime = 3;
  if (has_getrestime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->getrestime(), output);
  }

  // optional uint64 lastjointime = 4;
  if (has_lastjointime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->lastjointime(), output);
  }

  // optional uint32 isopen = 5;
  if (has_isopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->isopen(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecoverSrc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 restype = 1;
  if (has_restype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->restype(), target);
  }

  // optional uint32 counts = 2;
  if (has_counts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->counts(), target);
  }

  // optional uint64 getrestime = 3;
  if (has_getrestime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->getrestime(), target);
  }

  // optional uint64 lastjointime = 4;
  if (has_lastjointime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->lastjointime(), target);
  }

  // optional uint32 isopen = 5;
  if (has_isopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->isopen(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecoverSrc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 restype = 1;
    if (has_restype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->restype());
    }

    // optional uint32 counts = 2;
    if (has_counts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->counts());
    }

    // optional uint64 getrestime = 3;
    if (has_getrestime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->getrestime());
    }

    // optional uint64 lastjointime = 4;
    if (has_lastjointime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastjointime());
    }

    // optional uint32 isopen = 5;
    if (has_isopen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isopen());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecoverSrc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecoverSrc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecoverSrc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecoverSrc::MergeFrom(const RecoverSrc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_restype()) {
      set_restype(from.restype());
    }
    if (from.has_counts()) {
      set_counts(from.counts());
    }
    if (from.has_getrestime()) {
      set_getrestime(from.getrestime());
    }
    if (from.has_lastjointime()) {
      set_lastjointime(from.lastjointime());
    }
    if (from.has_isopen()) {
      set_isopen(from.isopen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecoverSrc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecoverSrc::CopyFrom(const RecoverSrc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecoverSrc::IsInitialized() const {

  return true;
}

void RecoverSrc::Swap(RecoverSrc* other) {
  if (other != this) {
    std::swap(restype_, other->restype_);
    std::swap(counts_, other->counts_);
    std::swap(getrestime_, other->getrestime_);
    std::swap(lastjointime_, other->lastjointime_);
    std::swap(isopen_, other->isopen_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecoverSrc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecoverSrc_descriptor_;
  metadata.reflection = RecoverSrc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecoverList::kDataRecFieldNumber;
#endif  // !_MSC_VER

RecoverList::RecoverList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecoverList::InitAsDefaultInstance() {
}

RecoverList::RecoverList(const RecoverList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecoverList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecoverList::~RecoverList() {
  SharedDtor();
}

void RecoverList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecoverList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecoverList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecoverList_descriptor_;
}

const RecoverList& RecoverList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_recoversrc_2eproto();
  return *default_instance_;
}

RecoverList* RecoverList::default_instance_ = NULL;

RecoverList* RecoverList::New() const {
  return new RecoverList;
}

void RecoverList::Clear() {
  data_rec_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecoverList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.message.RecoverSrc data_rec = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_rec:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data_rec()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data_rec;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecoverList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.message.RecoverSrc data_rec = 1;
  for (int i = 0; i < this->data_rec_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data_rec(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecoverList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.message.RecoverSrc data_rec = 1;
  for (int i = 0; i < this->data_rec_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data_rec(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecoverList::ByteSize() const {
  int total_size = 0;

  // repeated .proto.message.RecoverSrc data_rec = 1;
  total_size += 1 * this->data_rec_size();
  for (int i = 0; i < this->data_rec_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data_rec(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecoverList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecoverList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecoverList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecoverList::MergeFrom(const RecoverList& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_rec_.MergeFrom(from.data_rec_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecoverList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecoverList::CopyFrom(const RecoverList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecoverList::IsInitialized() const {

  return true;
}

void RecoverList::Swap(RecoverList* other) {
  if (other != this) {
    data_rec_.Swap(&other->data_rec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecoverList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecoverList_descriptor_;
  metadata.reflection = RecoverList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RecoverSrcMsg_CS_RequestData::RecoverSrcMsg_CS_RequestData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecoverSrcMsg_CS_RequestData::InitAsDefaultInstance() {
}

RecoverSrcMsg_CS_RequestData::RecoverSrcMsg_CS_RequestData(const RecoverSrcMsg_CS_RequestData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecoverSrcMsg_CS_RequestData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecoverSrcMsg_CS_RequestData::~RecoverSrcMsg_CS_RequestData() {
  SharedDtor();
}

void RecoverSrcMsg_CS_RequestData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecoverSrcMsg_CS_RequestData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecoverSrcMsg_CS_RequestData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecoverSrcMsg_CS_RequestData_descriptor_;
}

const RecoverSrcMsg_CS_RequestData& RecoverSrcMsg_CS_RequestData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_recoversrc_2eproto();
  return *default_instance_;
}

RecoverSrcMsg_CS_RequestData* RecoverSrcMsg_CS_RequestData::default_instance_ = NULL;

RecoverSrcMsg_CS_RequestData* RecoverSrcMsg_CS_RequestData::New() const {
  return new RecoverSrcMsg_CS_RequestData;
}

void RecoverSrcMsg_CS_RequestData::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecoverSrcMsg_CS_RequestData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RecoverSrcMsg_CS_RequestData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecoverSrcMsg_CS_RequestData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecoverSrcMsg_CS_RequestData::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecoverSrcMsg_CS_RequestData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecoverSrcMsg_CS_RequestData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecoverSrcMsg_CS_RequestData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecoverSrcMsg_CS_RequestData::MergeFrom(const RecoverSrcMsg_CS_RequestData& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecoverSrcMsg_CS_RequestData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecoverSrcMsg_CS_RequestData::CopyFrom(const RecoverSrcMsg_CS_RequestData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecoverSrcMsg_CS_RequestData::IsInitialized() const {

  return true;
}

void RecoverSrcMsg_CS_RequestData::Swap(RecoverSrcMsg_CS_RequestData* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecoverSrcMsg_CS_RequestData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecoverSrcMsg_CS_RequestData_descriptor_;
  metadata.reflection = RecoverSrcMsg_CS_RequestData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecoverSrcMsg_SC_AckData::kResultFieldNumber;
const int RecoverSrcMsg_SC_AckData::kDataFieldNumber;
#endif  // !_MSC_VER

RecoverSrcMsg_SC_AckData::RecoverSrcMsg_SC_AckData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecoverSrcMsg_SC_AckData::InitAsDefaultInstance() {
  data_ = const_cast< ::proto::message::RecoverList*>(&::proto::message::RecoverList::default_instance());
}

RecoverSrcMsg_SC_AckData::RecoverSrcMsg_SC_AckData(const RecoverSrcMsg_SC_AckData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecoverSrcMsg_SC_AckData::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecoverSrcMsg_SC_AckData::~RecoverSrcMsg_SC_AckData() {
  SharedDtor();
}

void RecoverSrcMsg_SC_AckData::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void RecoverSrcMsg_SC_AckData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecoverSrcMsg_SC_AckData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecoverSrcMsg_SC_AckData_descriptor_;
}

const RecoverSrcMsg_SC_AckData& RecoverSrcMsg_SC_AckData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_recoversrc_2eproto();
  return *default_instance_;
}

RecoverSrcMsg_SC_AckData* RecoverSrcMsg_SC_AckData::default_instance_ = NULL;

RecoverSrcMsg_SC_AckData* RecoverSrcMsg_SC_AckData::New() const {
  return new RecoverSrcMsg_SC_AckData;
}

void RecoverSrcMsg_SC_AckData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    if (has_data()) {
      if (data_ != NULL) data_->::proto::message::RecoverList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecoverSrcMsg_SC_AckData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .proto.message.RecoverList data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecoverSrcMsg_SC_AckData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional .proto.message.RecoverList data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecoverSrcMsg_SC_AckData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional .proto.message.RecoverList data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecoverSrcMsg_SC_AckData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional .proto.message.RecoverList data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecoverSrcMsg_SC_AckData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecoverSrcMsg_SC_AckData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecoverSrcMsg_SC_AckData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecoverSrcMsg_SC_AckData::MergeFrom(const RecoverSrcMsg_SC_AckData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_data()) {
      mutable_data()->::proto::message::RecoverList::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecoverSrcMsg_SC_AckData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecoverSrcMsg_SC_AckData::CopyFrom(const RecoverSrcMsg_SC_AckData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecoverSrcMsg_SC_AckData::IsInitialized() const {

  return true;
}

void RecoverSrcMsg_SC_AckData::Swap(RecoverSrcMsg_SC_AckData* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecoverSrcMsg_SC_AckData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecoverSrcMsg_SC_AckData_descriptor_;
  metadata.reflection = RecoverSrcMsg_SC_AckData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecoverSrcMsg_CS_RequestRecover::kRestypeFieldNumber;
const int RecoverSrcMsg_CS_RequestRecover::kWayFieldNumber;
#endif  // !_MSC_VER

RecoverSrcMsg_CS_RequestRecover::RecoverSrcMsg_CS_RequestRecover()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecoverSrcMsg_CS_RequestRecover::InitAsDefaultInstance() {
}

RecoverSrcMsg_CS_RequestRecover::RecoverSrcMsg_CS_RequestRecover(const RecoverSrcMsg_CS_RequestRecover& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecoverSrcMsg_CS_RequestRecover::SharedCtor() {
  _cached_size_ = 0;
  restype_ = 0u;
  way_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecoverSrcMsg_CS_RequestRecover::~RecoverSrcMsg_CS_RequestRecover() {
  SharedDtor();
}

void RecoverSrcMsg_CS_RequestRecover::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecoverSrcMsg_CS_RequestRecover::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecoverSrcMsg_CS_RequestRecover::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecoverSrcMsg_CS_RequestRecover_descriptor_;
}

const RecoverSrcMsg_CS_RequestRecover& RecoverSrcMsg_CS_RequestRecover::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_recoversrc_2eproto();
  return *default_instance_;
}

RecoverSrcMsg_CS_RequestRecover* RecoverSrcMsg_CS_RequestRecover::default_instance_ = NULL;

RecoverSrcMsg_CS_RequestRecover* RecoverSrcMsg_CS_RequestRecover::New() const {
  return new RecoverSrcMsg_CS_RequestRecover;
}

void RecoverSrcMsg_CS_RequestRecover::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    restype_ = 0u;
    way_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecoverSrcMsg_CS_RequestRecover::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 restype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &restype_)));
          set_has_restype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_way;
        break;
      }

      // optional uint32 way = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_way:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &way_)));
          set_has_way();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecoverSrcMsg_CS_RequestRecover::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 restype = 1;
  if (has_restype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->restype(), output);
  }

  // optional uint32 way = 2;
  if (has_way()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->way(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecoverSrcMsg_CS_RequestRecover::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 restype = 1;
  if (has_restype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->restype(), target);
  }

  // optional uint32 way = 2;
  if (has_way()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->way(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecoverSrcMsg_CS_RequestRecover::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 restype = 1;
    if (has_restype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->restype());
    }

    // optional uint32 way = 2;
    if (has_way()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->way());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecoverSrcMsg_CS_RequestRecover::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecoverSrcMsg_CS_RequestRecover* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecoverSrcMsg_CS_RequestRecover*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecoverSrcMsg_CS_RequestRecover::MergeFrom(const RecoverSrcMsg_CS_RequestRecover& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_restype()) {
      set_restype(from.restype());
    }
    if (from.has_way()) {
      set_way(from.way());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecoverSrcMsg_CS_RequestRecover::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecoverSrcMsg_CS_RequestRecover::CopyFrom(const RecoverSrcMsg_CS_RequestRecover& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecoverSrcMsg_CS_RequestRecover::IsInitialized() const {

  return true;
}

void RecoverSrcMsg_CS_RequestRecover::Swap(RecoverSrcMsg_CS_RequestRecover* other) {
  if (other != this) {
    std::swap(restype_, other->restype_);
    std::swap(way_, other->way_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecoverSrcMsg_CS_RequestRecover::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecoverSrcMsg_CS_RequestRecover_descriptor_;
  metadata.reflection = RecoverSrcMsg_CS_RequestRecover_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecoverSrcMsg_SC_AckRecover::kResultFieldNumber;
#endif  // !_MSC_VER

RecoverSrcMsg_SC_AckRecover::RecoverSrcMsg_SC_AckRecover()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecoverSrcMsg_SC_AckRecover::InitAsDefaultInstance() {
}

RecoverSrcMsg_SC_AckRecover::RecoverSrcMsg_SC_AckRecover(const RecoverSrcMsg_SC_AckRecover& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecoverSrcMsg_SC_AckRecover::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecoverSrcMsg_SC_AckRecover::~RecoverSrcMsg_SC_AckRecover() {
  SharedDtor();
}

void RecoverSrcMsg_SC_AckRecover::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecoverSrcMsg_SC_AckRecover::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecoverSrcMsg_SC_AckRecover::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecoverSrcMsg_SC_AckRecover_descriptor_;
}

const RecoverSrcMsg_SC_AckRecover& RecoverSrcMsg_SC_AckRecover::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_recoversrc_2eproto();
  return *default_instance_;
}

RecoverSrcMsg_SC_AckRecover* RecoverSrcMsg_SC_AckRecover::default_instance_ = NULL;

RecoverSrcMsg_SC_AckRecover* RecoverSrcMsg_SC_AckRecover::New() const {
  return new RecoverSrcMsg_SC_AckRecover;
}

void RecoverSrcMsg_SC_AckRecover::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecoverSrcMsg_SC_AckRecover::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecoverSrcMsg_SC_AckRecover::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecoverSrcMsg_SC_AckRecover::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecoverSrcMsg_SC_AckRecover::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecoverSrcMsg_SC_AckRecover::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecoverSrcMsg_SC_AckRecover* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecoverSrcMsg_SC_AckRecover*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecoverSrcMsg_SC_AckRecover::MergeFrom(const RecoverSrcMsg_SC_AckRecover& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecoverSrcMsg_SC_AckRecover::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecoverSrcMsg_SC_AckRecover::CopyFrom(const RecoverSrcMsg_SC_AckRecover& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecoverSrcMsg_SC_AckRecover::IsInitialized() const {

  return true;
}

void RecoverSrcMsg_SC_AckRecover::Swap(RecoverSrcMsg_SC_AckRecover* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecoverSrcMsg_SC_AckRecover::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecoverSrcMsg_SC_AckRecover_descriptor_;
  metadata.reflection = RecoverSrcMsg_SC_AckRecover_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

// @@protoc_insertion_point(global_scope)
