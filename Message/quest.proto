package proto.message;

/*
enum Quest_CS_MsgID
{
	Quest_CS_GetQuestInfo = 2400,           // 获取某类任务信息
	Quest_CS_GetQuestData = 2401,           // 获取某个任务数据
	Quest_CS_AddQuest = 2402,               // 领取任务
	Quest_CS_FinishQuest = 2403,            // 完成任务
	Quest_CS_QuitQuest = 2404,              // 放弃任务
	Quest_CS_QuestFinishList = 2405,        // 获取已完成任务列表
	Quest_CS_QuestGotoMap = 2406,           // 请求跳到指定地图
	Quest_CS_PublishHelpItem  = 2417,		//发布一个物品上交任务
	Quest_CS_HelpOtherItem = 2418,           // 帮助他人完成上交物品的任务
}

enum Quest_SC_MsgID
{
	Quest_SC_GetQuestInfo = 2400,           // 返回获取某类任务信息
	Quest_SC_GetQuestData = 2401,           // 返回获取某个任务数据
	Quest_SC_AddQuest = 2402,               // 返回领取任务
	Quest_SC_FinishQuest = 2403,            // 返回完成任务
	Quest_SC_QuitQuest = 2404,              // 返回放弃任务
	Quest_SC_QuestFinishList = 2405,        // 返回获取已完成任务列表
	Quest_SC_QuestGotoMap = 2406,           // 请求跳到指定地图
    
	Quest_SC_UpdateQuestInfo = 2410,        // 主动同步任务信息到客户端
    Quest_SC_UpdateAutoFinishQuest = 2411,  // 主动同步自动完成的任务到客户端
    Quest_SC_UpdateAutoNewQuest = 2412,     // 主动同自动领取的新任务到客户端 这个协议只用来通知客户端寻路，通知任务信息 还是走2414 2415
    Quest_SC_UpdateQuestAward = 2413,       // 主动奖励任务到客户端
    Quest_SC_UpdateQuestData = 2414,        // 主动同步任务数据到客户端
	Quest_SC_UpdateLoopQuestData = 2415,	// 主动更新环任务数据到客户端
	Quest_SC_PublishHelpItem  = 2417,		//发布一个物品上交任务
	Quest_SC_HelpOtherItem = 2418,           // 帮助他人完成上交物品的任务
	Quest_SC_DelHelpItem  = 2419,		//删除聊天记录中的求助物品记录
    Quest_SC_AfterLoopQuestAllAward = 2420,       // 完整整个环任务的时候发送任务全部奖励给客户端
}
*/

// 任务种类id定义：
// 1:主线任务 2:活动任务 3:副本任务 4:日常杀怪任务 5:支线任务
// 101:日常环任务 102:公会周环任务 103:周300环任务 104:经验环任务 105:区域性任务 106:身份单人任务 107:身份多人任务 108:藏宝图任务

// 主线任务
message ProtoQuestMain
{
    repeated int32 curQuestId = 1; // 当前任务(0:无任务)
}

// 活动任务
message ProtoQuestActive
{
    repeated int32 curQuestId = 1; // 当前任务(0:无任务)
    required int32 lastGiveUp = 2; // 上次放弃进度(0点重置)
    required int32 awardCount = 3; // 已奖励次数(只第一次有奖励)
    optional int64 receiveTime = 4; // 上次接取时间
    optional int64 cleanTime = 5; // 重置时间
}

// 副本任务
message ProtoQuestFuben
{
    repeated int32 curQuestId = 1; // 当前任务(0:无任务)
    required int32 awardCount = 2; // 已奖励次数(只第一次有奖励)
    optional int64 cleanTime = 3; // 重置时间
}

// 日常杀怪任务
message ProtoQuestDailyKillMonster
{
    repeated int32 curQuestId = 1; // 当前任务(0:无任务)
    required int32 num = 2; // 已完成次数(每天可完成1次日常杀怪任务)
    optional int64 cleanTime = 3; // 重置时间

}

// 支线任务
message SingleQuestBranch
{
    optional int32 curQuestId = 1; // 当前任务(0:无任务)
    optional uint64 nProgress = 2;// 进度
    optional bool isDone = 3;//是否已经完成
}
message ProtoQuestBranch
{
    repeated SingleQuestBranch curQuest = 1; // 当前任务(0:无任务)
}

// 环任务
message ProtoQuestCycle
{
	required int32 kind = 1; // 种类
    required int32 curQuestId = 2; // 当前任务(0:无任务)
    required int32 roundNum = 3; // 已接取轮数
    required int32 num = 4; // 本轮已完成次数
    optional int64 receiveTime = 5; // 上次接取时间
    optional int64 cleanTime = 6; // 重置时间
	optional int32 dayNum = 7; // 本日已完成次数
	optional int32 progressNum = 8; // 进度信息 目前只做多人任务杀怪数量用。 例如： 队员新加入队伍 要同步击杀数量
}

message Quest_SC_UpdateLoopQuestData
{
	optional ProtoQuestCycle questCycle = 1; // 环任务信息
}

// 任务数据
message ProtoQuestData
{
    required int32 id = 1; // 任务id
    required int32 kind = 2; // 种类
    required int32 count = 3; // 任务计数
    // 支线任务才有
    optional uint64 nProgress = 4;// 进度
    optional bool isDone = 5;//是否已经完成
    optional uint64 nInitProgress = 6;//初始进度
}

// 获取某类任务信息
message Quest_CS_GetQuestInfo
{
	required int32 kind = 1; // 种类
}

// 返回获取某类任务信息
message Quest_SC_GetQuestInfo
{
	required int32 result = 1; // 结果
	optional int32 kind = 2; // 种类
	optional ProtoQuestMain questMain = 3; // 主线任务信息
	optional ProtoQuestActive questActive = 4; // 活动任务信息
	optional ProtoQuestFuben questFuben = 5; // 副本任务信息
	optional ProtoQuestDailyKillMonster questDailyKillMonster = 6; // 日常杀怪任务信息
	optional ProtoQuestBranch questBranch = 7; // 支线任务信息
	optional ProtoQuestCycle questCycle = 8; // 环任务信息
}

// 获取某个任务数据
message Quest_CS_GetQuestData
{
    required int32 id = 1; // 任务id
    required int32 kind = 2; // 种类
}

// 返回获取某个任务数据
message Quest_SC_GetQuestData
{
	required int32 result = 1;
	optional ProtoQuestData questData = 2;
}

// 领取任务
message Quest_CS_AddQuest
{
	required int32 questId = 1; // 任务id
	required int32 kind = 2; // 种类
}

// 返回领取任务
message Quest_SC_AddQuest
{
	required int32 result = 1; // 结果
    optional int32 id = 2; // 任务id
    optional int32 kind = 3; // 种类
}

// 完成任务
message Quest_CS_FinishQuest
{
	required int32 questId = 1; // 任务id
	required int32 kind = 2; // 种类
	optional uint64 arg = 3; //附加参数，只为寻物任务目标提交物品时使用
	optional int32 questresult = 4; // 1成功 2.失败 不发默认成功 任务完成或失败 新需求 现在副本任务可以失败，继续给下个任务
}

// 返回完成任务
message Quest_SC_FinishQuest
{
	required int32 result = 1; // 结果
    optional int32 id = 2; // 任务id
    optional int32 kind = 3; // 种类
	optional int32 questresult = 4; // 1成功 2.失败 不发默认成功 任务完成或失败 新需求 现在副本任务可以失败，继续给下个任务
}

// 放弃任务
message Quest_CS_QuitQuest
{
	required int32 questId = 1; // 任务id
	required int32 kind = 2; // 种类
}

// 返回放弃任务
message Quest_SC_QuitQuest
{
    	required int32 result = 1; // 结果
    	optional int32 id = 2; // 任务id
    	optional int32 kind = 3; // 种类
    	optional int32 isauto = 4; // 0,玩家手动放弃的 1,系统自动放弃的，也可能是队长放弃同步到队员的。
}

// 获取已完成任务列表
message Quest_CS_QuestFinishList
{

}

// 返回获取已完成任务列表
message Quest_SC_QuestFinishList
{
	required int32 questId = 1; // 已完成任务列表(只返回上一个完成的任务)
}

// 请求跳到指定地图
message Quest_CS_QuestGotoMap
{
	required int32 questId = 1;
}

// 返回请求跳到指定地图
message Quest_SC_QuestGotoMap
{

}

// 主动同步任务信息到客户端
message Quest_SC_UpdateQuestInfo
{
	optional ProtoQuestMain questMain = 1;                          // 主线任务信息
	optional ProtoQuestActive questActive = 2;                      // 活动任务信息
	optional ProtoQuestFuben questFuben = 3;                        // 副本任务信息
	optional ProtoQuestDailyKillMonster questDailyKillMonster = 4;  // 日常杀怪任务信息
	optional ProtoQuestBranch questBranch = 5;                      // 支线任务信息
	repeated ProtoQuestCycle questCycle = 6;                        // 环任务信息
}

// 主动同步自动完成的任务到客户端
message Quest_SC_UpdateAutoFinishQuest
{
	required int32 questId = 1; // 任务id
	required int32 kind = 2; // 种类
	optional int32 questresult = 3; // 1成功 2.失败 不发默认成功 任务完成或失败 新需求 现在副本任务可以失败，继续给下个任务
}

// 主动同自动领取的新任务到客户端
message Quest_SC_UpdateAutoNewQuest
{
	required int32 questId = 1; // 任务id
	required int32 kind = 2; // 种类
}

// 主动奖励任务到客户端
message ProtoQuestItem
{
	required int32 item = 1; // 道具id
	required int32 num = 2; // 数量
}
message Quest_SC_UpdateQuestAward
{
	optional int32 exp = 1; // 经验
	optional int32 silver = 2; // 银币
	optional int32 gold = 3; // 金币
	optional int32 cropsValue = 4; // 公会贡献
	repeated ProtoQuestItem items = 5; // 道具
}

message Quest_SC_AfterLoopQuestAllAward 
{

	optional int32 kind = 1; //任务类型
	optional int32 exp = 2; // 经验
	optional int32 silver = 3; // 银币
	optional int32 gold = 4; // 金币
	optional int32 cropsValue = 5; // 公会贡献
	repeated ProtoQuestItem items = 6; // 道具
	optional bool isOverTime = 7;//是否超出正常奖励次数
}


// 主动同步任务数据到客户端
message Quest_SC_UpdateQuestData
{
	repeated ProtoQuestData questData = 1;
}
message Quest_CS_PublishHelpItem
{
	required int32 questid = 1; //任务ID
	required int32 num = 2; // 当前任务轮数
}
message Quest_SC_PublishHelpItem
{
	required int32 result = 1; // 结果
}
message Quest_CS_HelpOtherItem
{
	required int32 questid = 1; //任务ID
	required uint64 playerid = 2; //玩家UID
	required int32 num = 3; // 当前任务轮数
	required uint64 arg = 4; //寻物任务目标提交物品时使用
}
message Quest_SC_HelpOtherItem
{
	required int32 result = 1; // 结果
}
message Quest_SC_DelHelpItem
{
	required int32 questid = 1; //任务ID
	required int32 num = 2; // 当前任务轮数
	required uint64 playerid = 3; //玩家UID
}
