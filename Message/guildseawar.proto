option java_package = "proto.message";
package proto.message;
import "common.proto";

/*
enum GuildSeaWar_CS_MsgID
{
	GuildSeaWar_CS_IntoBattleField = 4300,     // 进入战场
	GuildSeaWar_CS_QueryBattleCurrentInfo = 4302,     // 请求当前战场实时比分数据
	GuildSeaWar_CS_QueryGuildSeaWarInfo = 4303,     // 请求本公会海战的信息
	GuildSeaWar_CS_QueryControlBoat = 4305,     // 请求控制海战船只
	GuildSeaWar_CS_QueryAllBoatInfo = 4307,     // 请求本公会所有船只信息 这里要把哪些船已经出战了给客户端
	GuildSeaWar_CS_SetBattleBoatInfo = 4308,     // 设置出战公会船只信息
	GuildSeaWar_CS_InBattleDonate = 4310,     // 捐赠木材
	GuildSeaWar_CS_InBattleRepair = 4311,     // 加速修复
	GuildSeaWar_CS_QueryAfterSeaWarResult = 4313,     // 查看历史战绩，对战信息，公会排名等
	GuildSeaWar_CS_OutOfControl = 4316,     //取消控制
	GuildSeaWar_CS_QueryControlBoatInBattle = 4318,     //正在战斗中 请求控制船只
	GuildSeaWar_CS_QueryMyBoatControlList = 4319,   // 查看我的船有哪些人要控制
	GuildSeaWar_CS_SetMyBoatControlList = 4320,   // 决定我的船给谁控制
	
	GuildSeaWar_CS_LoadGuildBoatSuccess = 4321,   // 加载公会陆战场景成功
	GuildSeaWar_CS_LeaveLandScene 		= 4322,   // 请求离开公会海战陆战场景
	GuildSeaWar_CS_LeaveBoatSync 		= 4324,   // 请求离开公会海战海战场景
	GuildSeaWar_CS_ReqEnterWatch 		= 4325,   // 请求进入观战
	GuildSeaWar_CS_SpeedRevive 			= 4328,   // 加速复活
	GuildSeaWar_CS_ReqControlBoat 		= 4330,   // 请求控制船只
	GuildSeaWar_CS_ReqLookBoatInfo 		= 4331,   // 请求查看船的数据
}

enum GuildSeaWar_SC_MsgID
{
	GuildSeaWar_SC_IntoBattleField = 4300,     // 进入战场
	GuildSeaWar_SC_BroadOpen = 4301,     // 通知符合条件的公会中的所有玩家
	GuildSeaWar_SC_QueryBattleCurrentInfo = 4302,     // 请求当前战场实时比分数据
	GuildSeaWar_SC_QueryGuildSeaWarInfo = 4303,     // 请求本公会海战的信息， 有信息变动的时候 也会主动推送这条
	GuildSeaWar_SC_UpdateGuildSeaWarResult = 4304,     // 本公会海战结束 主动推送结果
	GuildSeaWar_SC_QueryControlBoat = 4305,     // 请求控制海战船只
	GuildSeaWar_SC_QueryControlBoatResult = 4306,     // 请求控制海战船只结果
	GuildSeaWar_SC_QueryAllBoatInfo = 4307,     // 请求本公会所有船只信息
	GuildSeaWar_SC_SetBattleBoatInfo = 4308,     // 设置出战公会船只信息
	GuildSeaWar_SC_UpdateMyBoatInBattle = 4309,     // 通知玩家的船被选为出战船，有玩家申请控制出战船也会通过这条协议
	GuildSeaWar_SC_InBattleDonate = 4310,     // 捐赠木材
	GuildSeaWar_SC_InBattleRepair = 4311,     // 加速修复
	GuildSeaWar_SC_BroadBoatDie = 4312,     // 船被击毁
	GuildSeaWar_SC_QueryAfterSeaWarResult = 4313,     // 查看历史战绩，对战信息，公会排名等
	GuildSeaWar_SC_Updateboatlist = 4314,     // 主动推送参战船只变化
	GuildSeaWar_SC_Updateplayerlist = 4315,     // 主动推送参战玩家变化
	GuildSeaWar_SC_OutOfControl = 4316,     //取消控制
	GuildSeaWar_SC_UpdateBoatOutOfControl = 4317,     //广播有船取消控制了
	GuildSeaWar_SC_QueryControlBoatInBattle = 4318,     //正在战斗中 请求控制船只
	GuildSeaWar_SC_QueryMyBoatControlList = 4319,   // 查看我的船有哪些人要控制
	GuildSeaWar_SC_SetMyBoatControlList = 4320,   // 决定我的船给谁控制
	
	GuildSeaWar_SC_GuildBoatStart 		= 4321,   // 公会海战开始(发送给观战者)
	GuildSeaWar_SC_LeaveLandScene 		= 4322,   // 请求离开公会海战陆战场景
	GuildSeaWar_SC_EnterBoatSync 		= 4323,   // 进入公会海战海域场景(发送给参战者)
	GuildSeaWar_SC_LeaveBoatSync		= 4324,   // 请求离开公会海战海战场景
	GuildSeaWar_SC_ReqEnterWatch 		= 4325,   // 请求进入观战(观战者才能操作)
	GuildSeaWar_SC_BattleResult 		= 4326,   // 公会海战结果
	GuildSeaWar_SC_UpdateBattleData 	= 4327,   // 更新战斗数据
	GuildSeaWar_SC_SpeedRevive 			= 4328,   // 加速复活
	GuildSeaWar_SC_NotifyControlBoat 	= 4329,   // 通知控制船只
	GuildSeaWar_SC_ReqControlBoat 		= 4330,   // 请求控制船只
	GuildSeaWar_SC_ReqLookBoatInfo 		= 4331,   // 请求查看船的数据
}
*/
message BoatSimpleData
{
	optional string boatname 	= 1; //船只姓名
	optional int32 fa_id 		= 2; //已穿戴时装ID
	optional int32 level 		= 3; //等级
	optional int32 boat_combat 	= 4; //船舰战斗力
	optional int32 stage_id 	= 5; //船的阶段
	repeated int32 part_list 	= 6; //部件列表
}
message ProtoBoatInSeaBattleInfo
{
	required int32 index = 1;//船只Index
	required uint64 ownerid = 2;//所属者ID	
	required string ownername = 3;//所属者姓名
	required uint64 controlid = 4; //操作者ID
	required string controlname = 5;//操作者姓名
	optional BoatSimpleData boatinfo = 6;//船只信息	
	required int32 woodcount  = 7;//拥有木头数
	repeated uint64 wantControlList = 8;    // 已经申请者的ID
	
}
message BoatBattleData
{
	required BoatSimpleData data = 1;//船只信息
	required int32 isinbattle = 2;//是否已经出战
	required uint64 ownerid = 3;//所属者ID	
	required string ownername = 4;//所属者姓名
	required uint64 controlid = 5; //操作者ID
	required string controlname = 6;//操作者姓名
}

message ProtoBoatInSeaBattleSimpleInfo
{
	required int32 team = 1;// 1.我方 2.敌方
	required int32 rank = 2; // 排名	
	required string name = 4;//船只名字
	required int32 score = 5;//积分
}
message ProtoPlayerInSeaBattleInfo
{
	optional uint64 	playerid		= 1;	//playerID
	optional string         strname			= 2;	//名字
	optional uint32		level			= 3;	//等级
	optional uint64 	guildid			= 4;	//公会ID
	optional uint32		guildoffice		= 5;	//公会职位
	optional uint32		profession		= 6; 	//职业
	optional uint64 	accumulated		= 7;  	//历史贡献
	optional int32 		donatewood		= 8;    //捐赠木头数
	optional int32 		score			= 9;    //获得积分
}
message DB_SeaWarVsInfo
{
	repeated ProtoSeaWarVsInfo_InDB vsinfo = 1;
}
message ProtoSeaWarVsInfo
{
	optional uint64 timetick = 1;
	optional SingleVsInfoList edata = 2;
	optional int32 etype = 3;
}
message SingleVsInfoList
{
	repeated SingleVsInfo info = 2;//单场对战信息	
}
message SingleVsInfo
{
	optional uint64 	redguildid		= 1;	//公会ID
	optional string  	redguildname		= 2;	//公会名字
	optional uint32		redguildlevel		= 3;	//公会等级
	optional uint64 	blueguildid		= 4;	//对手公会ID
	optional string  	blueguildname		= 5;	//对手公会名字
	optional uint32		blueguildlevel		= 6;	//对手公会等级
	optional int32 		result 			= 7;    // 0.未开始 1.红队胜 2.蓝队胜 3.平局
	optional int32 		battleid 		= 8;    // 
}
message ProtoSeaWarVsInfo_InDB
{
	optional uint64 timetick = 1;
	optional SingleVsInfoList_InDB edata = 2;
	optional int32 etype = 3;
}
message SingleVsInfoList_InDB
{
	repeated SingleVsInfo_InDB info = 2;//单场对战信息	
}
message SingleVsInfo_InDB
{
	optional uint64 	redguildid		= 1;	//公会ID
	optional uint32		redguildlevel		= 2;	//公会等级
	optional uint64 	blueguildid		= 3;	//对手公会ID
	optional uint32		blueguildlevel		= 4;	//对手公会等级
	optional int32 		result 			= 5;    // 0.未开始 1.红队胜 2.蓝队胜 3.平局
	optional int32 		battleid 		= 6;    // 
}
message DB_SeaWarRankInfo
{
	repeated ProtoSeaWarRankInfo_InDB rankinfo = 1;
}

message ProtoSeaWarRankInfo
{
	optional uint64 timetick = 1;
	optional SingleRankInfoList edata = 2;
	optional int32 etype = 3;
}
message SingleRankInfoList
{
	repeated SingleRankInfo info = 2;//排名信息	
}
message SingleRankInfo
{
	optional int32 		rank 		= 1;
	optional uint64 	guildid		= 2;	//公会ID
	optional string  	guildname	= 3;	//公会名字
	optional uint32		guildlevel	= 4;	//公会等级
	optional int32		score		=5;
}
message ProtoSeaWarRankInfo_InDB
{
	optional uint64 timetick = 1;
	optional SingleRankInfoList_InDB edata = 2;
	optional int32 etype = 3;
}
message SingleRankInfoList_InDB
{
	repeated SingleRankInfo_InDB info = 2;//排名信息	
}
message SingleRankInfo_InDB
{
	optional int32 		rank 		= 1;
	optional uint64 	guildid		= 2;	//公会ID
	optional uint32		guildlevel	= 3;	//公会等级
	optional int32		score		=4;
}
message ProtoSeaWarHistoryInfo
{
	repeated SingleHistoryInfo info = 1;//历史信息	
}
message SingleHistoryInfo
{
	optional int32 		rank 		= 1;
	optional uint64 	guildid		= 2;	//公会ID
	optional string  	guildname	= 3;	//公会名字
	optional uint32		guildlevel	= 4;	//公会等级
	optional int32 		joincount	= 5;	//参战次数
	optional int32 		wincount	= 6;	//胜利次数
}
message GuildSeaWar_CS_IntoBattleField
{
		
}
message GuildSeaWar_SC_IntoBattleField
{
	required int32 result 		= 1;
	optional uint32 map_id  	= 2;   	//地图Id
	optional Point3D pt   		= 3;    //出生的坐标
	optional float dir         	= 4;    //朝向
	optional int32 layer       	= 5;    //层级
}
message GuildSeaWar_SC_BroadOpen
{
}
message GuildSeaWar_CS_QueryBattleCurrentInfo
{}
message GuildSeaWar_SC_QueryBattleCurrentInfo
{
	optional uint64 	guildid			= 1;	//公会ID
	optional string  	guildname		= 2;	//公会名字
	optional uint32		guildlevel		= 3;	//公会等级
	optional string		guildownername		= 4;	//会长名字
	optional int32 		guildscore		= 5;   // 公会积分 
	optional int32 		inboatplayernum		= 6;   // 当前在场景中的公会玩家数量
	repeated ProtoBoatInSeaBattleSimpleInfo myTeamInfo = 7; // 
	optional uint64 	vsguildid		= 8;	//对手公会ID
	optional string  	vsguildname		= 9;	//对手公会名字
	optional uint32		vsguildlevel		= 10;	//对手公会等级
	optional string		vsguildownername	= 11;	//对手会长名字
	optional int32 		vsguildscore		= 12;   //对手公会积分 
	repeated ProtoBoatInSeaBattleSimpleInfo vsTeamInfo = 13; // 
	optional int32		myrank			= 14;   //我的排名
	optional int32		myscore			= 15;   //我的积分
}
message GuildSeaWar_CS_QueryGuildSeaWarInfo
{}
message GuildSeaWar_SC_QueryGuildSeaWarInfo
{
	optional uint64 	guildid			= 1;	//公会ID
	optional string  	guildname		= 2;	//公会名字
	optional uint32		guildlevel		= 3;	//公会等级
	optional string		guildownername		= 4;	//会长名字
	optional uint64 	vsguildid		= 5;	//对手公会ID
	optional string  	vsguildname		= 6;	//对手公会名字
	optional uint32		vsguildlevel		= 7;	//对手公会等级
	optional string		vsguildownername	= 8;	//对手会长名字
	optional int32 		guildboatid		= 9;    // 公会大船ID
	repeated ProtoBoatInSeaBattleInfo     allboatlist  = 10;   // 公会参战船只
	optional int32 		insceneplayernum	= 11;   // 当前在场景中的公会玩家数量
	repeated ProtoPlayerInSeaBattleInfo   allplayerlist = 12;  //  参战的玩家
	optional int32 		guildscore		= 13;   // 公会积分 
}

message GuildSeaWar_CS_QueryControlBoat
{
	required uint64 ownerid = 1;//所属者ID	
}
message GuildSeaWar_SC_QueryControlBoat
{
	required int32    result = 1;	
}

message GuildSeaWar_SC_QueryControlBoatResult 
{
	required  ProtoBoatInSeaBattleInfo boatinfo = 1;
}

message GuildSeaWar_CS_QueryAllBoatInfo
{
	optional int32 start_index 		= 1; //查询的开始索引(0开始)
	optional int32 end_index 		= 2; //查询的结束索引
}
message GuildSeaWar_SC_QueryAllBoatInfo
{
	
	optional int32 start_index 		= 1; //查询的开始索引(0开始)
	optional int32 end_index 		= 2; //查询的结束索引
	optional int32 total_num 		= 3; //船舰总数量
	repeated BoatBattleData boatinfo= 4; //船只信息	
}

message GuildSeaWar_CS_SetBattleBoatInfo
{
	optional uint64 index1 = 1;
	optional uint64 index2 = 2;
	optional uint64 index3 = 3;
	optional uint64 index4 = 4;
	optional uint64 index5 = 5;
}
message GuildSeaWar_SC_UpdateGuildSeaWarResult
{
	required int32 result = 1;
}
message GuildSeaWar_SC_SetBattleBoatInfo
{
	required int32 result = 1;
}

message GuildSeaWar_SC_UpdateMyBoatInBattle
{
// TODO
}
message GuildSeaWar_CS_InBattleDonate
{
	required int32 type =1; // 1.小捐赠 2.大捐赠
	required uint64 boatid = 2;// 船只ID	
}
message GuildSeaWar_SC_InBattleDonate
{
	required int32 result = 1;
}
message GuildSeaWar_CS_InBattleRepair
{
	required int32 type =1; // 1.小加速 2.大加速
	required uint64 boatid = 2;// 船只ID	
}
message GuildSeaWar_SC_InBattleRepair
{
	required int32 result = 1;
}
message	GuildSeaWar_SC_BroadBoatDie
{
	required uint64 guildid = 1;// 公会ID
	required uint64 boatid = 2;// 船只ID	
}
message  GuildSeaWar_CS_QueryAfterSeaWarResult
{
	required int32 type =1; // 1.历史战绩，2.对战信息，3.公会排名
}
message GuildSeaWar_SC_QueryAfterSeaWarResult
{
	required int32 type =1; // 1.历史战绩，2.对战信息，3.公会排名
	repeated ProtoSeaWarVsInfo vsInfo = 2;
	repeated ProtoSeaWarRankInfo rankInfo = 3;
	optional ProtoSeaWarHistoryInfo historyInfo = 4;
}
message GuildSeaWar_SC_Updateboatlist
{
	repeated ProtoBoatInSeaBattleInfo boatinfo =1;
}
message GuildSeaWar_SC_Updateplayerlist
{
	repeated ProtoPlayerInSeaBattleInfo playerinfo =1;
}
message GuildSeaWar_CS_OutOfControl
{
}
message GuildSeaWar_SC_OutOfControl
{
	required int32 result =1;
}
message GuildSeaWar_SC_UpdateBoatOutOfControl
{
	required uint64 ownerid = 1;//所属者ID	
}

message	GuildSeaWar_CS_QueryControlBoatInBattle
{
	required uint64 ownerid = 1;//所属者ID	
}
message	GuildSeaWar_SC_QueryControlBoatInBattle
{
	required int32 result =1;
}
message GuildSeaWar_CS_QueryMyBoatControlList
{
	required uint64 ownerid = 1;//所属者ID	
}
message ProtoWantControlInfo
{
	required uint32 plyId = 1;                  // id
	required int32 job = 2;                     // 职业
	required int32 level = 3;                   // 等级
	required string name = 5;                   // 名字
	repeated int32 equipID_list = 6; 			// 穿戴的装备ID列表
	optional uint64 plyuuid = 7;                   // uuid
	optional int32 identity = 8;                 // 身份
	optional ProtoBoatInfo boatInfo = 9;			//船只信息
	optional int32 weekdonate   = 10; // 本周贡献
}
message	GuildSeaWar_SC_QueryMyBoatControlList
{
	repeated ProtoWantControlInfo playerlist = 1;
}
message	GuildSeaWar_CS_SetMyBoatControlList
{
	required uint64 controlid = 1;//控制者ID	
}
message	GuildSeaWar_SC_SetMyBoatControlList 
{
	required int32 result =1;
}

message GuildSeaWar_CS_LoadGuildBoatSuccess
{

}

message GuildSeaWar_SC_GuildBoatStart
{
}

message GuildSeaWar_CS_LeaveLandScene
{

}

message GuildSeaWar_SC_LeaveLandScene
{
	optional int32 result = 1; //结果
}

message GuildSeaWar_CS_LeaveBoatSync
{
	
}

message GuildSeaWar_SC_LeaveBoatSync
{
	optional int32 result 				= 1; //结果
	optional BoatMatchData boat_info 	= 2; //数据恢复
}

message GuildSeaWar_CS_ReqEnterWatch
{
}

message GuildSeaWar_SC_ReqEnterWatch
{
	optional int32 result 				= 1; //结果
	optional int32 map_id 				= 2; //地图ID
}

message GuildSeaWar_CS_SpeedRevive
{
}

message GuildSeaWar_SC_SpeedRevive
{
	optional int32 result 		= 1; //结果
	optional int32 total_time 	= 2; //复活的总时间
	optional int32 dec_time 	= 3; //每一秒跳动减掉的时间
}

message GuildSeaWar_SC_NotifyControlBoat
{
	optional uint64 charid 		= 1; //玩家角色ID
}

message GuildSeaWar_CS_ReqControlBoat
{
	optional uint64 ownerid 	= 1; //船拥有者ID
}

message GuildSeaWar_SC_ReqControlBoat
{
	optional int32 result 		= 1; //结果
	optional uint64 ownerid 	= 2; //船拥有者ID
}

message GuildSeaWar_CS_ReqLookBoatInfo
{
	optional uint64 ownerid 	= 1; //船拥有者ID	
}

message GuildSeaWar_SC_ReqLookBoatInfo
{
	optional uint64 owner_id 		= 1; //船拥有者ID
	optional string owner_name 		= 2; //所属船长的名字
	optional string boat_name 		= 3; //船的名字
	optional int32 boat_combat 		= 4; //船的战力 			
	
	optional uint32 control_id 		= 5; //操控者ID
	optional string control_name 	= 6; //代理船长名字
	optional int32 wood_num 		= 7; //木材数量
	optional int32 kill_num 		= 8; //击杀数
}

message GuildSeaWar_SC_EnterBoatSync
{
	optional int32 map_id 			= 1; //地图ID
	optional Point3D point 			= 2; //坐标点
	optional float dir 				= 3; //方向
	optional int32 team 			= 4; //队伍
	optional BoatMatchData boat_info= 5; //控制船的数据信息
}

message GuildSeaWar_SC_BattleResult
{
	optional int32 battle_result 	= 1; //战斗结果(1:胜利 0:失败 2:平局)
	optional BoatMatchData boat_info= 2; //数据恢复
}

message BattleData
{
	optional int32 team 		= 1; //队伍
	optional int32 battle_score = 2; //战斗积分
	optional int32 wood_num 	= 3; //木材数量
	optional int32 total_hp 	= 4; //公会船只总血量
	optional int32 cur_hp 		= 5; //公会船只当前血量
}

message GuildSeaWar_SC_UpdateBattleData
{
	optional int32 remain_time 		= 1; //剩余时间
	optional BattleData team_data_1 = 2; //队伍1的数据
	optional BattleData team_data_2 = 3; //队伍2的数据
	optional int32 self_score 		= 4; //自己的积分
}
