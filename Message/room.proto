package proto.message;

import "common.proto";

/*
enum Room_CS_MsgID
{
    Room_CS_CreateRoom = 3350,                  // 创建房间
    Room_CS_ApplyRoom = 3351,                   // 加入房间
    Room_CS_RoomQuit = 3352,                    // 退出房间
    Room_CS_RoomAppoint = 3353,                 // 任命房主
    Room_CS_RoomKick = 3354,                    // 踢出房间
    Room_CS_TempLeave = 3355,                   // 暂离房间
    Room_CS_RoomAuto = 3356,                    // 设置房间自动匹配
    Room_CS_MemberAuto = 3357,                  // 设置队员自动匹配
    Room_CS_RoomInvite = 3358,                  // 邀请玩家
    Room_CS_SetRoomBeInvite = 3359,             // 同意/拒绝被邀请加入房间
    Room_CS_SetRoomAllow = 3360,                // 是否同意申请
    Room_CS_SetRoomAllowOneTime = 3361,         // 一键是否同意申请
    Room_CS_MatchingQueueInfo = 3362,         	// 请求获取匹配队列信息
    Room_CS_UpdateRoomInfo = 3363,         	// 请求同步房间信息
    Room_CS_FollowLeader = 3364,		// 请求跟随房主

    Room_CS_RoomReady = 3365,           	//准备状态

    Room_CS_SetRoomOutObj = 3371 , 		// 设置房间目标 	
    Room_CS_GetRoomList   = 3372 , 		//
}
    
enum Room_SC_MsgID  
{
    Room_SC_CreateRoom = 3350,                  // 创建房间
    Room_SC_ApplyRoom = 3351,                   // 加入房间
    Room_SC_RoomQuit = 3352,                    // 退出房间
    Room_SC_RoomAppoint = 3353,                 // 任命房主
    Room_SC_RoomKick = 3354,                    // 踢出房间
    Room_SC_TempLeave = 3355,                   // 暂离房间
    Room_SC_RoomAuto = 3356,                    // 设置房间自动匹配
    Room_SC_MemberAuto = 3357,                  // 设置队员自动匹配
    Room_SC_RoomInvite = 3358,                  // 邀请玩家

    Room_SC_SetRoomAllow = 3360,                // 是否同意申请
    Room_SC_SetRoomAllowOneTime = 3361,         // 一键是否同意申请
    Room_SC_MatchingQueueInfo = 3362,         	// 返回请求获取匹配队列信息
    Room_SC_UpdateRoomInfo = 3363,              // 同步房间信息

    Room_SC_RoomReady = 3365,           	//准备状态
    Room_SC_UpdateRoomBeInvite = 3366,          // 通知玩家被邀请加入房间
    Room_SC_UpdateApplyList = 3367,             // 主动同步申请列表
    Room_SC_UpdateRoomMemberTick = 3368,        // 同步房间成员被踢除信息
    Room_SC_UpdateRoomLevelInfo = 3369,         // 主动同步房间成员等级信息
    Room_SC_UpdateCurrentHp = 3370,           	//主动推送给客户端房间中玩家血量信息

    Room_SC_SetRoomOutObj = 3371 , 		// 设置房间目标 	
    Room_SC_GetRoomList   = 3372 , 		//
}   
*/  

// 队员信息
message ProtoRoomManInfo    
{
    required uint32 plyId = 1;                  // id
    required int32 job = 2;                     // 职业
    required int32 level = 3;                   // 等级
    optional int32 status = 4;                  // 入队状态 (1:跟随 2:暂离)
    required string name = 5;                   // 名字
    repeated int32 equipID_list = 6; 			// 穿戴的装备ID列表
    optional uint64 plyuuid = 7;                   // uuid
    optional int32 identity = 8;                 // 身份
    optional int32 combat = 9; //战力 
    optional bool isReady = 10; // 是否准备
    optional int32 Demonhunterlevel = 11;//猎魔人等级
}

// 房间信息
message ProtoRoomInfo
{
    required int32 roomId = 1;                  // 房间id
	required int32 numLimit = 2;                // 人数上限
    optional uint32 leaderId = 3;               // 房主id
	required int32 roomAuto = 4;                // 是否自动匹配
    optional ProtoRoomOutObj roomOutObj = 5;    // 房间目标信息
    repeated ProtoRoomManInfo roomManList = 6;  // 队员列表
	optional int32 needCombat = 7; // 需求战力
}

// 主动同步房间成员等级信息
message Room_SC_UpdateRoomLevelInfo
{
	required int32 plyId = 1;					// id
    required int32 level = 2;                   // 等级
}

// 房间列表
message ProtoRoomListRoomInfo
{
    required int32 roomId = 1;                  // 房间id
	required int32 peopleNum = 2;               // 当前人数
	required int32 numLimit = 3;                // 人数上限
    optional ProtoRoomManInfo leaderInfo = 4;   // 房主信息
    optional ProtoRoomOutObj roomOutObj = 5;    // 房间目标信息
	optional int32 totalCombat = 6;// 总战力	
	optional int32 leaderCombat = 7; // 房主战力
	optional int32 needCombat = 8; // 需求战力
}

// 房间目标信息
message ProtoRoomOutObj
{   
    required int32 obj = 1;                     // 任务目标
    required int32 levelMin = 2;                // 最低等级
    required int32 levelMax = 3;                // 最高等级
}   
    
// 设置房间目标   
message Room_CS_SetRoomOutObj   
{       
    required ProtoRoomOutObj obj = 1;           // 房间目标
}   
    
// 返回设置房间目标 
message Room_SC_SetRoomOutObj   
{   
	required int32 result = 1;  
}   

// 请求获取匹配队列信息
message Room_CS_MatchingQueueInfo
{
    required int32 obj = 1;           			// 任务目标
}

// 返回匹配队列信息
message Room_SC_MatchingQueueInfo
{
	required int32 nRoomNum = 1;				// 房间数量
	required int32 nSingleNum = 2;				// 单人匹配数量
	required int32 obj = 3;           			// 任务目标
}
    
// 获取房间列表   
message Room_CS_GetRoomList 
{   
    required int32 obj = 1;                     // 任务目标
}

// 返回获取房间列表
message Room_SC_GetRoomList
{
    required int32 result = 1;
    repeated ProtoRoomListRoomInfo roomInfo = 2;
}

// 创建房间
message Room_CS_CreateRoom
{
	optional int32 needCombat = 1;	 //需求战力
}

// 返回创建房间
message Room_SC_CreateRoom
{
	required int32 result = 1;
}

// 加入房间
message Room_CS_ApplyRoom
{
    required int32 roomId = 1;             // 房间id
}

// 返回加入房间
message Room_SC_ApplyRoom
{
	required int32 result = 1;
    optional int32 roomId = 2;             // 房间id
}

// 退出房间
message Room_CS_RoomQuit
{
    required int32 roomId = 1;             // 房间id
}

// 返回退出房间
message Room_SC_RoomQuit
{
	required int32 result = 1;
}

// 任命房主
message Room_CS_RoomAppoint
{
    required uint32 plyId = 1;
    required int32 appoint = 2;             // 1:任命 2:取消
}

// 返回任命房主
message Room_SC_RoomAppoint
{
	required int32 result = 1;
}

// 踢出房间
message Room_CS_RoomKick
{
    required uint32 plyId = 1;
}

// 返回踢出房间
message Room_SC_RoomKick
{
	required int32 result = 1;
    optional string beKickName = 2; // 被踢出的玩家名字
}

// 暂离房间
message Room_CS_TempLeave
{
    required uint32 plyId = 1;
    required int32 status = 2;                // 1:回归 2:暂离
}

// 返回暂离房间
message Room_SC_TempLeave
{
	required int32 result = 1;
}

// 设置房间自动匹配
message Room_CS_RoomAuto
{
	required int32 isAuto = 1;             // 1:自动 0:取消自动
}

// 返回设置房间自动匹配
message Room_SC_RoomAuto
{
	required int32 result = 1;
}

// 设置队员自动匹配
message Room_CS_MemberAuto
{
	required int32 isAuto = 1;             // 1:自动 0:取消自动
	required int32 obj = 2;                // 任务目标
}

// 返回设置队员自动匹配
message Room_SC_MemberAuto
{
	required int32 result = 1;
	required int32 isAuto = 2;             // 1:自动 0:取消自动
}

// 邀请玩家
message Room_CS_RoomInvite
{
    required uint64 plyId = 1;
}

// 返回邀请玩家
message Room_SC_RoomInvite
{
	required int32 result = 1;
}

// 同意/拒绝被邀请加入房间
message Room_CS_SetRoomBeInvite
{
    required bool allow = 1;                // 1:允许 0:拒绝
    required int32 roomId = 2;              // 房间id
}

// 返回同意/拒绝被邀请加入房间
message Room_SC_SetRoomBeInvite
{
	required int32 result = 1;
}

// 是否同意申请
message Room_CS_SetRoomAllow
{
    required uint32 plyId = 1;
    required bool allow = 2;                 // 1:允许 0:拒绝
}

// 返回是否同意申请
message Room_SC_SetRoomAllow
{
	required int32 result = 1;
}

// 一键是否同意申请
message Room_CS_SetRoomAllowOneTime
{   
    required bool allow = 1;                 // 1:允许 0:拒绝
}

// 返回一键是否同意申请
message Room_SC_SetRoomAllowOneTime
{
	required int32 result = 1;
}

// 请求同步房间信息
message Room_CS_UpdateRoomInfo
{

}

// 主动同步房间信息
message Room_SC_UpdateRoomInfo
{
    optional ProtoRoomInfo roomInfo = 1;
}

// 主动通知玩家被邀请加入房间
message Room_SC_UpdateRoomBeInvite
{
    required int32 roomId = 1;              // 房间id
	optional string name = 2;				// 邀请者名字
}

// 主动同步申请列表
message Room_SC_UpdateApplyList
{
    repeated ProtoRoomManInfo roomManList = 1;
}

// 同步房间成员被踢除信息
message Room_SC_UpdateRoomMemberTick
{
    optional string name = 1; // 房主名字
}

// 请求跟随房主
message Room_CS_FollowLeader
{
	
}

// 返回跟随房主
message Room_SC_FollowLeader
{
	required int32 result = 1;
	optional bool changeMap = 2;		// 是否跳转地图
	optional Point3D pt = 3;			// 房主位置
}
message Room_CS_SummonFollower
{
}
message	Room_SC_SummonFollower
{
	required int32 result = 1;
}
message	Room_SC_LeaderSummon
{
}
message Room_CS_SetIgnoreRoomInvite
{
    required bool allow = 1;                 // 1:允许 0:拒绝
}
message Room_SC_SetIgnoreRoomInvite
{
    required int32 result = 1;
}
message Room_CS_QueryIgnoreRoomInvite
{
}
message Room_SC_QueryIgnoreRoomInvite
{
    required bool allow = 1;                 // 1:允许 0:拒绝
}
message Room_SC_ErrorInfo           	//主动推送给客户端一些组队或多人任务相关的错误码
{
    required int32 result = 1;
}
message ProtoRoomManHPInfo
{
    required uint32 plyId = 1;                  // id
    required uint32 maxHp = 2;			// 最大HP
    required uint32 Hp = 3;			//当前HP
}
message Room_SC_UpdateCurrentHp
{
    repeated ProtoRoomManHPInfo HpList = 1;  //房间中血量信息
}
message Room_CS_RoomReady
{
     required bool status = 1;// false 不准备 true 准备
}
message Room_SC_RoomReady
{
    required int32 result = 1;
}
message Battle2Game_GetRoomList
{
    required int32 result = 1;
    repeated ProtoRoomListRoomInfo roomInfo = 2;
}
