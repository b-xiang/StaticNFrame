option java_package = "proto.message";
package proto.message;

import "common.proto";
import "item.proto";


/*
enum Map_SC_MsgID
{
	Map_SC_NavPaths 			= 2100   	//返回寻路路径
	Map_SC_AddSyncPlayer 		= 2101		//在自己同步区域里面加玩家
	Map_SC_DelSync 				= 2102		//在同步区域里面删除玩家和怪物
	Map_SC_Move          		= 2103		//同步
	Map_SC_AddSyncMonster 		= 2104		//在自己同步区域里面加怪物
	Map_SC_SpeelBegin			= 2105      //同步其他玩家攀爬
	Map_SC_ChangeMap			= 2106      //通知客户端跳前景
	Map_SC_CheckPosition		= 2107		//校验坐标
	Map_SC_Relive				= 2108		//复活
	Map_SC_SyncAreaStatus		= 2109		//同步区域的状态
	Map_SC_TriggerEvent			= 2110		//触发事件(其他玩家)
	Map_SC_MonsterStopMove		= 2111		//怪物停止移动
	Map_SC_TeamerLocationSyn	= 2112		//向客户端同步队友位置

	Map_SC_StartParkour			= 2113		//开始跑酷返回

	Map_SC_PlayerCheckPosition	= 2114		//玩家坐标检测
	Map_SC_PlayerStopMove		= 2115		//玩家停止移动

	Map_SC_PlayerStateSync	    = 2116	    //玩家状态同步

	Map_SC_PickUpChest			= 2117		//捡宝箱
	Map_SC_AddSyncRandomChest   = 2118		//在自己同步区域里面加宝箱
	
	Map_SC_ChangeTttle			= 2119		//同步称号变更
	Map_SC_ChangeEquip			= 2120		//同步装备变更
	
	Map_SC_UpdateDir			= 2121		//更新朝向
	
	Map_SC_GetMapBranch			= 2122		//获取分线列表返回
	Map_SC_ChangeBranch         = 2123      //跳线结果
	
	Map_SC_MonsterTalk 			= 2124,      //NPC喊话
	Map_SC_MonsterTurnBackSync	= 2125, 	//怪物转身进度条
	
	Map_SC_ChangeMapResult		= 2126		//切换场景结果
	
	eMap_SC_WorldBossInfo = 2127, 	//世界boss信息请求  (空结构)
	eMap_SC_WorldBossBid = 2128, 	//世界boss 拍卖出价
	eMap_SC_WorldBossSaleHistory = 2129,
	
	
	
	eMap_SC_TicketBossInfo = 2130, 	//请求门票boss信息  	
	eMap_SC_TicketChallenge = 2131, 	//挑战门票boss
	
	eMap_SC_TakeDropItem = 2132,		
	
	
}

enum Map_CS_MsgID
{
	Map_CS_PlayerPositionSync 	= 2100		//同步玩家消息
	Map_CS_SpeelBegin			= 2101		//撤换地图层开始
	Map_CS_SpeelEnd				= 2102		//撤换地图层结束
	Map_CS_ClientLoadOK			= 2103		//客户端加载成功
	Map_CS_ChangeMapOK         	= 2104		//撤换地图oK
	Map_CS_EnterSceneArea		= 2105		//进入特殊区域（草丛，安全区）
	Map_CS_LeaveSceneArea		= 2106		//离开特殊区域（草丛，安全区）
	Map_CS_TriggerEvent			= 2107		//触发事件(信仰之跃、进出草丛、草车等)


	Map_CS_TeamerLocationSyn	= 2108		//同步显示队友位置开关
	Map_CS_ReqChangeMap			= 2109		//客户端请求切换场景

	Map_CS_StartParkour			= 2110		//开始跑酷
	Map_CS_EndParkour			= 2111		//结束跑酷

	Map_CS_PickUpChest			= 2112		//捡宝箱

	Map_CS_PlayerCheckPosition	= 2113		//玩家坐标检测
	Map_CS_PlayerStopMove		= 2114		//玩家停止移动

	Map_CS_PlayerStateSync	    = 2115	    //玩家状态同步
	
	Map_CS_GetMapBranch	    	= 2116	    //获取分线列表
	Map_CS_ChangeBranch			= 2117      //跳分线
	
	
	eMap_CS_WorldBossChallenge	 = 2121, 	//世界boss  挑战
	eMap_CS_WorldBossInfo		= 2122, 	//世界boss信息请求
	eMap_CS_WorldBossBid		= 2123, 	//世界boss 拍卖
	eMap_CS_WorldBossSaleHistory = 2124,	//拍卖历史
	
	
	
	
	eMap_CS_TicketBossInfo = 2125, 	//请求门票boss信息  
	eMap_CS_TicketChallenge = 2126, 	//挑战门票boss
	eMap_CS_TakeDropItem = 2127,
	eMap_CS_ChatMark = 2128, 	//聊天记录器
	
	eMap_CS_SurvivalChallenge = 2129, 	//大逃杀
}

enum eSceneAreaType
{
	eSceneAreaType_safe		= 1,      //安全区
	eSceneAreaType_grass	= 2,      //草丛中
	eSceneAreaType_Attack   = 3,      //战斗
	eSceneAreaType_Num
};

*/

message Map_SC_NavPaths
{
	required uint32 ID = 1;   		//怪物Id
	required float  Velocity = 2;	//速度
	repeated Point3D paths = 3;   	//路径
}

message Map_CS_PlayerPositionSync
{
    required Point3D pt		= 1;	//寻路点的坐标
	required float dir		= 2;   	//角色当前朝向
	optional bool arrival   = 3;    //是否到达
	
}

message Map_SC_AddSyncPlayer
{
	required uint32 nPlayerId 	= 1;	//玩家Id
	required Point3D pt 		= 2;	//坐标
	required float dir 			= 3;	//朝向
	optional string Name 		= 4;    //名字
	optional int32 MaxHP       	= 5;    //最大血量
	optional int32 CurHP       	= 6;    //当前血量
	optional int32 Level       	= 7;    //等级
	repeated Equip equip_list 	= 8; 	//装备列表
	optional int32 career 		= 9; 	//职业
	optional int32 Velocity     = 10;   //移动速度
	optional int32 titleID		= 11;	//称号id
	optional int32 layer        = 12;   //层级
	optional string titlename   = 13; 	//称号要使用的名称 有可能是公会名 有可能是导师名
	optional int32 titleishide 	= 14; 	//称号当前是否隐藏
	repeated int32 skill_id_list= 15; 	//技能ID列表
	optional uint64 nPlayeruuid = 16;      //64位ID
	optional uint64 nGuildid = 17;		//公会64位ID
	optional string GuildName  = 18; 	//公会名称
}

message Map_SC_ChangeTttle
{
	required uint32 nId 	= 1;		//玩家ID
	required int32	titleID	= 2;		//称号ID
	optional string titlename   = 3; // 称号要使用的名称 有可能是公会名 有可能是导师名
	optional int32 ishide = 4;
}

message Map_SC_ChangeEquip
{
	required uint32 	nId 		= 1;	//玩家ID
	repeated Equip 		equip_list 	= 2; 	//装备列表
}

message Map_SC_DelSync
{
	required uint32 nPlayerId = 1;	//玩家Id
}

message Map_SC_Move
{
	required uint32 nId 	= 1;		//玩家Id
	required Point3D pt 	= 2;		//寻路点的坐标
	required float dir		= 3;		//当前朝向
	required float velocity	= 4;     	//速度	
	optional bool arrival 	= 5;	    //是否到达
}

message Map_SC_CheckPosition
{
	required uint32 nId 	= 1;		//玩家Id
	required Point3D pt 	= 2;		//坐标
	required float dir		= 3;		//朝向
}

message Map_SC_AddSyncMonster
{
	required uint32 ID 		= 1;   	//怪物Id
	required uint32 ProID 	= 2;	//怪物表格Id
	required Point3D pt 	= 3;	//坐标
	required float dir 		= 4;	//朝向
	optional int32 Velocity = 5;    //移动速度
	optional int32 MaxHP    = 6;    //最大血量
	optional int32 CurHP    = 7;    //当前血量
	optional int32 max_tp   = 8;    //最大TP值(>0时才为boss怪做操作)
	optional int32 cur_tp   = 9;    //当前TP值
	optional int32 cmap     = 10;   //阵容
}

message Map_CS_SpeelBegin
{
	required uint32 Layer  			= 1;   	//地图的层
	optional int32 TriggerId    	= 2;    //(触发器名字 int)
	optional uint32 TriggerType   	= 3;    //触发类型
}

message Map_CS_SpeelEnd
{
	required Point3D pt 	= 1;	//坐标
}

message Map_SC_SpeelBegin
{
	required uint32 PlyId  		= 1;   	//玩家id
	required uint32 Layer  		= 2;   	//地图的层
	optional int32 	TriggerId   = 3;    //(触发器名字 int)
	optional uint32 TriggerType = 4;    //触发类型
}

message Map_CS_ClientLoadOK
{
}

message Map_SC_ChangeMap
{
	required uint32 	MapID  		= 1;   	//地图Id
	optional Point3D 	Pt   		= 3;    //出生的坐标
	optional float		Dir         = 4;    //朝向
	optional int32		Layer       = 5;    //层级
}

message Map_CS_ChangeMapOK
{
	optional uint32 	MapID  		= 1;   	//地图Id
}

message Map_CS_ReqChangeMap
{
	optional uint32		MapID		= 1;	//地图Id
	optional uint32		BranchId		= 2;	//想要指定的分线ID
}

message Map_CS_EnterSceneArea
{
	required uint32 SceneAreaId  		= 1;   	//特殊区域Id
}

message Map_CS_LeaveSceneArea
{
	required uint32 SceneAreaId  		= 1;   	//特殊区域Id
}

message Map_SC_TriggerEvent
{
	required uint32 PlyId  				= 1;	//玩家id
	required uint32 TriggerType			= 2;	//触发类型(信仰之跃、攀爬、进入草车、草丛等)
	required uint32 TriggerId			= 3;	//触发id
}

message Map_CS_TriggerEvent
{
	required uint32 TriggerType			= 1;	//触发类型(信仰之跃、攀爬、进入草车、草丛等)
	required uint32 TriggerId			= 2;	//触发id
}

message Map_SC_SyncAreaStatus
{
	required uint32 CharId  		= 1;   	//玩家id
	optional uint32 SceneAreaType   = 2;    //区域状态也是（移位 参见 eSceneAreaType）
}

message Map_SC_MonsterStopMove
{
	required uint32 nId 	= 1;		//玩家Id
	required Point3D pt 	= 2;		//坐标
	required float dir		= 3;		//朝向
}


message Map_CS_TeamerLocationSyn
{
	required int32 opened 	= 1;	//是否开始同步 1：开始  0：结束
}

message Location
{
	required uint32 plyId 	= 1;        // id
	required Point3D pt		= 2;		//坐标
	required uint32 MapID	= 3;		//地图Id
	optional uint32 Layer  	= 4;   		//地图的层
}

message Map_SC_TeamerLocationSyn
{
	repeated Location loc	= 1;		//队友玩家位置
}

message Map_CS_StartParkour
{
}

message Map_CS_EndParkour
{
}

message Map_CS_PickUpChest
{
	required uint32 nID = 1;            //宝箱ID
}

message Map_SC_PickUpChest
{
	optional int32 result 		= 1; //结果
	optional IDTimes id_times 	= 2; //宝箱ID次数
	repeated DropItemNum item_list 	= 3; //物品列表
}

message Map_SC_StartParkour
{
	required int32 res = 1;            //0：成功 其他参数：失败
}

message Map_SC_PlayerCheckPosition			//玩家坐标检测
{
	required uint32 plyId 		= 1;        // id
	required Point3D pt			= 2;		//坐标
}


message Map_SC_PlayerStopMove			//玩家停止移动
{
	required uint32 plyId 	= 1;        // id
	required Point3D pt		= 2;		//坐标
}


message Map_SC_PlayerStateSync	      //玩家状态同步
{
	required uint32 plyId 		= 1;        // id
	required uint32 SyncState 	= 2;		//状态类型
}


message Map_CS_PlayerCheckPosition		//玩家坐标检测
{
	required Point3D pt			= 1;		//坐标
}

message Map_CS_PlayerStopMove			//玩家停止移动
{
	required Point3D pt		= 1;		//坐标
}

message Map_CS_PlayerStateSync	       //玩家状态同步
{
	required uint32 SyncState 	= 1;		//状态类型
}

message Map_SC_AddSyncRandomChest
{
	required uint32 ID 		= 1;   	//宝箱Id
	required uint32 ProID 	= 2;	//宝箱表格Id
	required Point3D pt 	= 3;	//坐标
	required float dir 		= 4;	//朝向
	required uint64 CreateUid = 5; // 创建者UID
	required string CreateName = 6; // 创建者名字
	optional int32 Velocity = 7;    //移动速度
	optional int32 MaxHP    = 8;    //最大血量
	optional int32 CurHP    = 9;    //当前血量
}

message Map_SC_UpdateDir
{
	required uint32 Id 	= 1;		//Id
	optional float 	dir = 2;        //朝向  
}

message Map_CS_GetMapBranch
{
}

message Map_CS_ChangeBranch
{
	required int32 BranchId 	= 1;		//线的ID
}

message BranchInfo
{
	required int32 	BranchId 	= 1;		//线的ID
	required int32  PlayerNum  = 2;        //人数
}


message Map_SC_GetMapBranch
{
	repeated BranchInfo branch_list 	= 3; //物品列表
}

message Map_SC_ChangeBranch
{
	required int32 rt 	= 1;		//0:成功 其他参见错误码
}

message Map_CS_GameStoryStart
{
	required uint32 GameStoryID = 1;		//剧情ID
	optional uint32 NPCID       = 2;        //剧情对应的NPC，服务器暂停NPC
}

message Map_CS_GameStoryEnd	 		
{
	required uint32 GameStoryID = 1;		//剧情ID
	optional uint32 NPCID       = 2;        //剧情对应的NPC，NPC开始AI
}

message Map_CS_NPCStopAI
{
	optional uint32 NPCID       = 1;        //NPC ID
}

message Map_CS_NPCActiveAI	 		
{
	optional uint32 NPCID       = 1;        //NPC ID
}

message Map_SC_MonsterTalk
{
	optional uint32 talkID      = 2;        //喊话的ID
}
message Map_SC_MonsterTurnBackSync
{
	required uint32 MonsterID = 1; //怪物ID
	required uint64 EndTick = 2; // 结束时间戳
}

message Map_SC_ChangeMapResult
{
	optional int32 result 			= 1; //结果
	optional int32 map_table_id 	= 2; //map表格ID
}

message Game2Match_PVPMatch
{
	required int32 iTableId 	= 1; //Usual表格ID
	required MatchPlayerInfo sMatchPlyInfo = 2;	//玩家信息
}

message Game2Match_TeamMatch
{
	required int32 iTableId 	= 1; //Usual表格ID
	required uint64 uiHostId = 2; // 队长ID
	repeated MatchPlayerInfo vecMatchPlyInfo = 3;	//玩家信息列表
}


message Game2Match_CancelMatch
{
	optional uint64 uuid			= 1 ;//玩家uuid
}



message Game2Client_WorldBossInfo
{
	required uint32 uiBossId		=1; 	//bossID
	required uint32 uiBossLevel		=2;		//等级
	required uint32 uiExpiryTime 	=3;		//到期时间
	required uint64 uiBossHp 	=4;		//boss当前血量
	
}


message Game2Battle_WorldBossStart
{	
	required uint32 uiBossId		=1; 	//bossID
	required uint32 uiBossLevel		=2;		//等级
	required uint32 uiExpiryTime 	=3;		//到期时间
	required uint64	uiHp 			= 4;  	//血量
}

message Client2Game_WorldBossBid
{
	required uint32 uiItemIndex		=1;		//物品索引
	required uint32 uiPrice			=2;		//出价
}


message Game2Battle_WorldBossBid
{
	required uint32 uiItemIndex		=1;		//物品索引
	required uint32 uiPrice			=2;		//出价
}

//拍卖历史
message Game2Client_WolrdBoss_SaleHistory
{	
	repeated  WolrdBossSaledItem item = 1;
}


message Map_CS_TicketBossInfo
{
	required uint32 uiTableId		= 1; 	//uiTableId
}

message Map_SC_TicketBossInfo
{
	repeated uint32 uiTableId		= 1; 	//uiTableId
	repeated uint32 uiBossId		= 2; 	//bossID
	repeated uint64 uiBossHp 		= 3;	//boss当前血量
	repeated uint32 uiRefreshTime	= 4;	//下一次刷新时间戳
	
}


message Map_CS_TicketBossChallenge
{
	required uint32 uiTableId		= 1; 	//uiTableId
}


message Map_SC_TicketBossChallenge
{
	required uint32 uiTableId		= 1; 	//uiTableId
	required uint32 uiResult		= 2; 	//0成功 其他失败
}

message Map_CS_ChatMark
{
	required int32 channel  = 1; // 频道
	
}


message Map_CS_TakeDropItem
{
	required uint32 uiKey		= 1; 		//物品的场景objid
	required uint32 uiTableId		= 2; 	//uiTableId    门票boss用  其他填0就好
	required uint32 uiIndex		= 3; 	//物品列表的下标
}


message Map_SC_TakeDropItem
{
	required uint32 uiResult		= 1; 	
}
message Game2Battle_TicketBossChallenge
{
	required uint32 uiTableId		= 1; 	//uiTableId
}


message Game2Battle_TakeDropItem
{
	required uint32 uiKey		= 1; 
	required uint32 uiTableId		= 2; 	//uiTableId
	required uint32 uiIndex		= 3; 	//物品下标
	required uint32 uiNullGirdNum		= 4; 	//背包空格字数
}

message Game2Match_CreateRoom
{
	optional int32 obj = 1; //目标
	optional MatchPlayerInfo sPlyInfo = 2;	//玩家信息
}
message Game2Match_GetRoomList
{
	optional int32 obj = 1;
}
message Game2Battle_UpdateHeadInfo
{
	optional BattleSingleHeadInfo info = 1;
}


message Game2Match_CreateTerritoryBattle
{
	repeated TBFieldInfo info =1;
}


