option java_package = "proto.message";
package proto.message;

import "common.proto";

/*
enum Attack_CS_MsgID
{
	Attack_CS_PlayerExcuteSkill = 5300,     //玩家释放技能
	Attack_CS_RequestHurt 		= 5301,     //玩家请求伤害
	Attack_CS_BlockSkillStart	= 5302,     //玩家放格挡技能开始
	Attack_CS_BlockSkillEnd		= 5303,     //玩家放格挡技能结束
	
	//向经过Game后再到Battle
	Attack_CS_Relive      		= 5304,    	//死亡复活
	
	
	eClient2Battle_SkillEnd = eClient2Battle_SkillEnd
}

enum Attack_SC_MsgID
{
	eClient2Battle_SkillBegin 	= 6600,
	Attack_SC_ExcuteSkillSelf   = 6600 ,    // 释放技能返回给自己的消息
	Attack_SC_ExcuteSkillOther  = 6601,    	// 释放技能返回给同步区域其他玩家的消息
	Attack_SC_UpdateHurtData    = 6602,    	// 升级技能
    Attack_SC_AttackBack        = 6603,    	// 击退
	
	Attack_SC_AddBuffer         = 6604,    	//加buffer
	Attack_SC_DelBuffer			= 6605，   	//减buffer
	Attack_SC_UpdateBuffer		= 6606，	//更新buffer
	Attack_SC_AttackSprint     	= 6607,    	//冲刺
	Attack_SC_AttackDie     	= 6608,    	//非正常死亡
	Attack_SC_BlockSkill		= 6609,     //玩家放格挡技能返回
	Attack_SC_BlockSkillStart	= 6609,     //玩家放格挡技能开始
	Attack_SC_BlockSkillEnd		= 6610,     //玩家放格挡技能结束
	Attack_SC_UpdateAttacking	= 6611,     //是否是战斗状态
	Attack_SC_Strike            = 6612,     //反击
	Attack_SC_Die            	= 6613,     //死亡
	Attack_SC_Shout            	= 6614,     //喊话
	Attack_SC_ClearSkillCD      = 6615,     //清空技能CD	
	Attack_SC_UpdateAttackStatus= 6616,     //更新战斗状态
	Attack_SC_Relive 			= 6617, 	//复活回复	
	Attack_SC_UpdateMonsterAttackStatus = 6618,     //更新怪物战斗状态
	Attack_SC_Block 			= 6619,     //格挡住
	Attack_SC_UpdateTP      	= 6620,    	//更新TP值
	Attack_SC_UpdateFlagCamp	= 6621,    	//更新旗子阵营
	Attack_SC_RelivePos 		= 6622, 	//复活点回复	
 	Attack_SC_UpdateGroupCD  	= 6623,        //更新技能组ID

	eClient2Battle_SkillEnd = 6650,			
}

enum  eCharStatus
{
	eCharStatus_Bat			= 0,		//霸体
	eCharStatus_Unmatched	= 1,		//无敌
	eCharStatus_Cloaked		= 2,		//隐身
	eCharStatus_Giddiness	= 3,		//眩晕
	eCharStatus_speel		= 4,		//攀爬
	eCharStatus_Hawkeye     = 5,        //鹰眼
	eCharStatus_HawkeyeSign = 6,        //鹰眼标记
	eCharStatus_grass		= 7,        //草丛中
	eCharStatus_SafeArea	= 8,        //安全区
	eCharStatus_Block		= 9,        //格挡
	eCharStatus_Weakness	= 10,        //弱点
	eCharStatus_Parkour     = 11,        //跑酷
	eCharStatus_NoMove		= 12,        //定身
	eCharStatus_BeatDown	= 13,        //击倒
	eCharStatus_Flag		= 14,		 //旗子
	eCharStatus_Sneak		= 15,        //潜行
	eCharStatus_Num
};

enum eHurtType
{
	eHurtType_Violence,		//暴击
	eHurtType_Absorb,		//伤害吸收
	eHurtType_Rebound,		//伤害反弹
};

*/

message Attack_SC_UpdateXP
{
	optional uint32 xpenergy =1;
}


message Attack_CS_PlayerExcuteSkill
{
    required int32 		PlayerSkillId 	= 1; 	//PayerSkill的表格Id
	optional uint32 	SkillId         = 2; 	//第几段技能Id	
	optional float 		Dir 			= 3;	//朝向
	optional Point3D 	pt      		= 4;	//冲刺的坐标
	optional uint32	    targetID	 	= 5; 	//攻击的目标(无目标传0)
	optional int32 		objType = 6;//默认为0，角色自身移动 1为佣兵
}

message Attack_CS_RequestHurt
{
    required int32 	PlayerSkillId 	= 1; 	//PayerSkill的表格Id
	optional uint32 SkillId         = 2; 	//第几段技能Id	
	repeated uint32 ListDesId 		= 3;	//攻击目标
	optional int32 	objType = 4;//默认为0，角色自身移动 1为佣兵
}

message Attack_CS_AttackSprint
{
	optional uint32		SkillId   	= 2;		//技能Id
	optional Point3D	pt      	= 3;		//冲刺的坐标
}

message Attack_SC_ExcuteSkillSelf
{
	required int32 PlayerSkillId 	= 1; 		//PayerSkill的表格Id
    required int32 SkillId 			= 2; 		//Skill的表格Id
	required int32 error			= 3;       	//参考错误列表
	optional uint32 	charId = 4;//默认为0，>0为玩家佣兵释放的技能 
	optional float 		Dir 			= 5;	//朝向
	optional Point3D 	pt      		= 6;	//冲刺的坐标
	optional uint32	    targetID = 7; 		//攻击的目标(无目标为0)
}

message Attack_SC_ExcuteSkillOther
{
	required uint32 	CharId	 = 1;       //角色Id（玩家或者NPC）
	required int32 		SkillId  = 2; 		//Skill的表格Id
	optional float  	dir 	 = 3;       //角色的朝向
	optional Point3D 	pt       = 4;		//冲刺的坐标
	optional uint32	    targetID = 5; 		//攻击的目标(无目标为0)
	optional int32 	objType = 6;//默认为0，角色自身移动 1为佣兵
	optional int32 	camp = 7;//释放技能的角色阵营
}

message Attack_SC_UpdateHurtData
{
	required uint32 CharId	= 1;        //角色Id（玩家或者NPC）
    required int32 	nHurt 	= 2; 		//伤害值
	optional int32  nCurHP 	= 3;		//当前的HP(当前HP小于等于0时候，播放死亡动画，服务器不单独发送死亡消息)
	optional int32  SkillId = 4;        //技能Id
	optional int32  nMaxHP 	= 5;        //最大HP
	optional int32  nHurtType = 6;      //伤害类型(参见eHurtType)移位操作的）
	optional uint64 attacker =7;		//伤害来源者ID
}

message Attack_SC_AttackBack
{
	required uint32 	CharId		= 1;        //角色Id（玩家或者NPC）
	optional uint32		AttCharId 	= 2;		//攻击者Id
	optional uint32		SkillId   	= 3;		//技能Id
	optional Point3D	pt      	= 4;		//击退的坐标
	optional float      Dir 		= 5;        //朝向
	optional int32		nTime       = 6;		//时间       
}

message Attack_SC_AddBuffer
{
	required uint32 	CharId		= 1;        //角色Id（玩家或者NPC）
	optional uint32		BufferId 	= 2;		//BufferId
	optional uint64     Status      = 3;        //状态（参见 eCharStatus，移位操作的）
	optional int32      LastTime    = 4;        //持续时间
	optional  int32     isDisPlayInProto  = 5;  // 是否在协议中传递具体数值
	optional int32      property    = 6;// 属性数值 
}

message Attack_SC_DelBuffer
{
	required uint32 	CharId		= 1;        //角色Id（玩家或者NPC）
	optional uint32		BufferId 	= 2;		//BufferId
	optional uint64     Status      = 3;        //状态（参见 eCharStatus，移位操作的）
}

message Attack_SC_UpdateBuffer
{
	required uint32 	CharId		= 1;        //角色Id（玩家或者NPC）
	optional uint32		BufferId 	= 2;		//BufferId
	optional int32      LastTime    = 3;        //持续时间
}

message Attack_SC_AttackDie
{
	required uint32 	CharId		= 1;        //角色Id（玩家或者NPC）
}

message Attack_CS_BlockSkillStart
{
	required float   dir 	= 1;     //朝上
	optional Point3D pt 	= 2;	 //坐标
	
}

message Attack_CS_BlockSkillEnd
{
}

message Attack_SC_BlockSkillStart
{
	required uint32 	CharId	= 1;        //角色Id（玩家或者NPC）
	optional float  	dir 	= 2;     	//朝上
	optional Point3D 	pt 		= 3;	 	//坐标
	
}

message Attack_SC_BlockSkillEnd
{
	required uint32 	CharId	= 1;        //角色Id（玩家或者NPC）
}

message Attack_SC_UpdateAttacking
{
	required bool 	attacking	= 1;        //是否是战斗状态
}

message Attack_SC_UpdateTP
{
	optional int32 charid 		= 1; //角色ID(boss ID)
	optional int32 total_num 	= 2; //总数量
	optional int32 cur_num 		= 3; //当前数量
}	


message Attack_SC_Strike
{
}

message Attack_SC_Die
{
	optional int32 charid 		= 1; //角色ID
}	

message Attack_SC_Shout
{
	optional int32 nID 		= 1; //喊话ID
}	

message Attack_CS_Relive
{
	required uint32 type  		= 1;   	//复活类型.1=原地复活  2=复活点复活
	
}

message Attack_SC_Relive
{
	optional int32 result 			= 1; //结果
	optional int32 relive_times 	= 2; //当日已复活次数
}

message Attack_SC_ClearSkillCD
{
	required uint32 SkillId  	= 1;  
}

message Attack_SC_UpdateAttackStatus
{
	required uint64     Status      = 1;        //状态（参见 eCharStatus，移位操作的）
	optional uint32 		ID 		= 2; 		//角色ID
}

message Attack_SC_UpdateMonsterAttackStatus
{
	required uint32 charid 		= 1; //角色ID(boss ID)
	optional bool 	status 		= 2; //0:脱战  1：进战
}

message Attack_SC_Block
{
	required uint32 charid 		= 1; //角色ID(boss ID)
}

message Attack_SC_UpdateFlagCamp
{
	optional int32 charid 		= 1; //角色ID
	optional int32 flag_camp 	= 2; //旗子阵营，0：中立；1：正义；2：邪恶
}	

message Attack_SC_RelivePos
{
	required uint32 PlyId  		= 1;   	//玩家id
	optional int32  CurHP   	= 2;    //当前HP
	optional uint32 MaxHP   	= 3;    //最大HP
	optional Point3D 	Pt   	= 4;    //出生的坐标
	optional float		Dir     = 5;    //朝向
}
message Attack_SC_UpdateGroupCD  // 更新技能组CD 
{
    optional int32 skillid = 1;	 //技能ID
    optional int32 groupid = 2;  //技能组ID
    optional int64 endtick = 3;  //结束时间戳
}

